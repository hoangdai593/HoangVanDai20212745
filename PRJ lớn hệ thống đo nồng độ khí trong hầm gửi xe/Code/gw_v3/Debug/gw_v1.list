
gw_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008ef4  08008ef4  00009ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009068  08009068  0000b1cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009068  08009068  0000b1cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009068  08009068  0000b1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009068  08009068  0000a068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800906c  0800906c  0000a06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08009070  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f0  200001cc  0800923c  0000b1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800923c  0000b5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b0d  00000000  00000000  0000b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003569  00000000  00000000  0001fd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00023270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e43  00000000  00000000  00024500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a59d  00000000  00000000  00025343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189e0  00000000  00000000  0003f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f289  00000000  00000000  000582c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eac  00000000  00000000  000e758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ec438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008edc 	.word	0x08008edc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08008edc 	.word	0x08008edc

0800014c <RS485_SendCommand>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void RS485_SendCommand(uint8_t slaveID, uint8_t command)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
    RS_txBuffer[0] = slaveID;  // �?ịa chỉ Slave
 800015c:	4a09      	ldr	r2, [pc, #36]	@ (8000184 <RS485_SendCommand+0x38>)
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	7013      	strb	r3, [r2, #0]
    RS_txBuffer[1] = command;  // Lệnh
 8000162:	4a08      	ldr	r2, [pc, #32]	@ (8000184 <RS485_SendCommand+0x38>)
 8000164:	79bb      	ldrb	r3, [r7, #6]
 8000166:	7053      	strb	r3, [r2, #1]
    RS_txBuffer[2] = '\n';     // Ký tự kết thúc
 8000168:	4b06      	ldr	r3, [pc, #24]	@ (8000184 <RS485_SendCommand+0x38>)
 800016a:	220a      	movs	r2, #10
 800016c:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart1, RS_txBuffer, 3, HAL_MAX_DELAY);
 800016e:	f04f 33ff 	mov.w	r3, #4294967295
 8000172:	2203      	movs	r2, #3
 8000174:	4903      	ldr	r1, [pc, #12]	@ (8000184 <RS485_SendCommand+0x38>)
 8000176:	4804      	ldr	r0, [pc, #16]	@ (8000188 <RS485_SendCommand+0x3c>)
 8000178:	f003 fc96 	bl	8003aa8 <HAL_UART_Transmit>
}
 800017c:	bf00      	nop
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	200001e8 	.word	0x200001e8
 8000188:	20000278 	.word	0x20000278

0800018c <decode_ppm_2>:

void decode_ppm_2 (char *RS_rxBuffer,PPM *ppm1,PPM *ppm2)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b08c      	sub	sp, #48	@ 0x30
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
	int inx = 0;
 8000198:	2300      	movs	r3, #0
 800019a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int i;
	char buffer_co_1[3];
	char buffer_co2_1[5];
	char buffer_co_2[3];
	char buffer_co2_2[5];
	while (RS_rxBuffer[inx] != ',') inx++;  // 1st ','
 800019c:	e002      	b.n	80001a4 <decode_ppm_2+0x18>
 800019e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001a0:	3301      	adds	r3, #1
 80001a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80001a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	4413      	add	r3, r2
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b2c      	cmp	r3, #44	@ 0x2c
 80001ae:	d1f6      	bne.n	800019e <decode_ppm_2+0x12>
	//ppm1
	inx++;
 80001b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001b2:	3301      	adds	r3, #1
 80001b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	memset(buffer_co_1, '\0', 3);
 80001b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80001ba:	2203      	movs	r2, #3
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f008 fe5a 	bl	8008e78 <memset>
	i=0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (RS_rxBuffer[inx] != ',')   // copy vào buffer giá trị CO
 80001c8:	e00f      	b.n	80001ea <decode_ppm_2+0x5e>
	{
		buffer_co_1[i] = RS_rxBuffer[inx];
 80001ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001cc:	68fa      	ldr	r2, [r7, #12]
 80001ce:	4413      	add	r3, r2
 80001d0:	7819      	ldrb	r1, [r3, #0]
 80001d2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80001d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001d8:	4413      	add	r3, r2
 80001da:	460a      	mov	r2, r1
 80001dc:	701a      	strb	r2, [r3, #0]
		i++;
 80001de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001e0:	3301      	adds	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	@ 0x28
		inx++;
 80001e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001e6:	3301      	adds	r3, #1
 80001e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (RS_rxBuffer[inx] != ',')   // copy vào buffer giá trị CO
 80001ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	4413      	add	r3, r2
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b2c      	cmp	r3, #44	@ 0x2c
 80001f4:	d1e9      	bne.n	80001ca <decode_ppm_2+0x3e>
	}
	ppm1->CO_ppm = atoi(buffer_co_1);
 80001f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80001fa:	4618      	mov	r0, r3
 80001fc:	f008 fdb4 	bl	8008d68 <atoi>
 8000200:	4602      	mov	r2, r0
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	601a      	str	r2, [r3, #0]
	//
	inx++;
 8000206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000208:	3301      	adds	r3, #1
 800020a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	memset(buffer_co2_1, '\0', 5);
 800020c:	f107 031c 	add.w	r3, r7, #28
 8000210:	2205      	movs	r2, #5
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f008 fe2f 	bl	8008e78 <memset>
	i=0;
 800021a:	2300      	movs	r3, #0
 800021c:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (RS_rxBuffer[inx] != ',')   // copy vào buffer giá trị CO2
 800021e:	e00f      	b.n	8000240 <decode_ppm_2+0xb4>
	{
		buffer_co2_1[i] = RS_rxBuffer[inx];
 8000220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	4413      	add	r3, r2
 8000226:	7819      	ldrb	r1, [r3, #0]
 8000228:	f107 021c 	add.w	r2, r7, #28
 800022c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800022e:	4413      	add	r3, r2
 8000230:	460a      	mov	r2, r1
 8000232:	701a      	strb	r2, [r3, #0]
		i++;
 8000234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000236:	3301      	adds	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	@ 0x28
		inx++;
 800023a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800023c:	3301      	adds	r3, #1
 800023e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (RS_rxBuffer[inx] != ',')   // copy vào buffer giá trị CO2
 8000240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	4413      	add	r3, r2
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b2c      	cmp	r3, #44	@ 0x2c
 800024a:	d1e9      	bne.n	8000220 <decode_ppm_2+0x94>
	}
   ppm1->CO2_ppm = atoi(buffer_co2_1);
 800024c:	f107 031c 	add.w	r3, r7, #28
 8000250:	4618      	mov	r0, r3
 8000252:	f008 fd89 	bl	8008d68 <atoi>
 8000256:	4602      	mov	r2, r0
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	605a      	str	r2, [r3, #4]
	//ppm2
	inx++;
 800025c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800025e:	3301      	adds	r3, #1
 8000260:	62fb      	str	r3, [r7, #44]	@ 0x2c
	memset(buffer_co_2, '\0', 3);
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2203      	movs	r2, #3
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f008 fe04 	bl	8008e78 <memset>
	i=0;
 8000270:	2300      	movs	r3, #0
 8000272:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (RS_rxBuffer[inx] != ',')   // copy vào buffer giá trị CO
 8000274:	e00f      	b.n	8000296 <decode_ppm_2+0x10a>
	{
		buffer_co_2[i] = RS_rxBuffer[inx];
 8000276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	4413      	add	r3, r2
 800027c:	7819      	ldrb	r1, [r3, #0]
 800027e:	f107 0218 	add.w	r2, r7, #24
 8000282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000284:	4413      	add	r3, r2
 8000286:	460a      	mov	r2, r1
 8000288:	701a      	strb	r2, [r3, #0]
		i++;
 800028a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800028c:	3301      	adds	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	@ 0x28
		inx++;
 8000290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000292:	3301      	adds	r3, #1
 8000294:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (RS_rxBuffer[inx] != ',')   // copy vào buffer giá trị CO
 8000296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b2c      	cmp	r3, #44	@ 0x2c
 80002a0:	d1e9      	bne.n	8000276 <decode_ppm_2+0xea>
	}
	ppm1->CO_ppm = atoi(buffer_co_2);
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	4618      	mov	r0, r3
 80002a8:	f008 fd5e 	bl	8008d68 <atoi>
 80002ac:	4602      	mov	r2, r0
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	601a      	str	r2, [r3, #0]
	//
	inx++;
 80002b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002b4:	3301      	adds	r3, #1
 80002b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	memset(buffer_co2_2, '\0', 5);
 80002b8:	f107 0310 	add.w	r3, r7, #16
 80002bc:	2205      	movs	r2, #5
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f008 fdd9 	bl	8008e78 <memset>
	i=0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (RS_rxBuffer[inx] != ',')   // copy vào buffer giá trị CO2
 80002ca:	e00f      	b.n	80002ec <decode_ppm_2+0x160>
	{
		buffer_co2_2[i] = RS_rxBuffer[inx];
 80002cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	4413      	add	r3, r2
 80002d2:	7819      	ldrb	r1, [r3, #0]
 80002d4:	f107 0210 	add.w	r2, r7, #16
 80002d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002da:	4413      	add	r3, r2
 80002dc:	460a      	mov	r2, r1
 80002de:	701a      	strb	r2, [r3, #0]
		i++;
 80002e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002e2:	3301      	adds	r3, #1
 80002e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		inx++;
 80002e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002e8:	3301      	adds	r3, #1
 80002ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (RS_rxBuffer[inx] != ',')   // copy vào buffer giá trị CO2
 80002ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b2c      	cmp	r3, #44	@ 0x2c
 80002f6:	d1e9      	bne.n	80002cc <decode_ppm_2+0x140>
	}
    ppm2->CO2_ppm = atoi(buffer_co2_2);
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	4618      	mov	r0, r3
 80002fe:	f008 fd33 	bl	8008d68 <atoi>
 8000302:	4602      	mov	r2, r0
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	605a      	str	r2, [r3, #4]
}
 8000308:	bf00      	nop
 800030a:	3730      	adds	r7, #48	@ 0x30
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <Change_Time_Read_Data>:
void Change_Time_Read_Data()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 8000314:	4b2a      	ldr	r3, [pc, #168]	@ (80003c0 <Change_Time_Read_Data+0xb0>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800031c:	dc1c      	bgt.n	8000358 <Change_Time_Read_Data+0x48>
 800031e:	4b28      	ldr	r3, [pc, #160]	@ (80003c0 <Change_Time_Read_Data+0xb0>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b19      	cmp	r3, #25
 8000324:	dc18      	bgt.n	8000358 <Change_Time_Read_Data+0x48>
 8000326:	4b27      	ldr	r3, [pc, #156]	@ (80003c4 <Change_Time_Read_Data+0xb4>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800032e:	dc13      	bgt.n	8000358 <Change_Time_Read_Data+0x48>
 8000330:	4b24      	ldr	r3, [pc, #144]	@ (80003c4 <Change_Time_Read_Data+0xb4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b19      	cmp	r3, #25
 8000336:	dc0f      	bgt.n	8000358 <Change_Time_Read_Data+0x48>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8000338:	4823      	ldr	r0, [pc, #140]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 800033a:	f003 f90d 	bl	8003558 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 30000);     // Cập nhật chu kỳ
 800033e:	4b22      	ldr	r3, [pc, #136]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000346:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000348:	4b1f      	ldr	r3, [pc, #124]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 800034a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800034e:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 8000350:	481d      	ldr	r0, [pc, #116]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 8000352:	f003 f8af 	bl	80034b4 <HAL_TIM_Base_Start_IT>
 8000356:	e031      	b.n	80003bc <Change_Time_Read_Data+0xac>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=25 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <Change_Time_Read_Data+0xb0>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000360:	da0c      	bge.n	800037c <Change_Time_Read_Data+0x6c>
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <Change_Time_Read_Data+0xb0>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b18      	cmp	r3, #24
 8000368:	dc08      	bgt.n	800037c <Change_Time_Read_Data+0x6c>
 800036a:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <Change_Time_Read_Data+0xb4>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000372:	da03      	bge.n	800037c <Change_Time_Read_Data+0x6c>
 8000374:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <Change_Time_Read_Data+0xb4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b31      	cmp	r3, #49	@ 0x31
 800037a:	dd0f      	ble.n	800039c <Change_Time_Read_Data+0x8c>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 800037c:	4812      	ldr	r0, [pc, #72]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 800037e:	f003 f8eb 	bl	8003558 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 5000);     // Cập nhật chu kỳ
 8000382:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800038a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800038c:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 800038e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000392:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 8000394:	480c      	ldr	r0, [pc, #48]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 8000396:	f003 f88d 	bl	80034b4 <HAL_TIM_Base_Start_IT>
 800039a:	e00f      	b.n	80003bc <Change_Time_Read_Data+0xac>
	}
	else
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 800039c:	480a      	ldr	r0, [pc, #40]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 800039e:	f003 f8db 	bl	8003558 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 15000);     // Cập nhật chu kỳ
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80003aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 80003ae:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80003b2:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 80003b4:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <Change_Time_Read_Data+0xb8>)
 80003b6:	f003 f87d 	bl	80034b4 <HAL_TIM_Base_Start_IT>
	}
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000210 	.word	0x20000210
 80003c4:	20000218 	.word	0x20000218
 80003c8:	20000230 	.word	0x20000230

080003cc <HAL_UART_RxCpltCallback>:
    	}
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	// Nhận dữ liệu từ node tổng
    if (huart->Instance == USART1)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a14      	ldr	r2, [pc, #80]	@ (800042c <HAL_UART_RxCpltCallback+0x60>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d11d      	bne.n	800041a <HAL_UART_RxCpltCallback+0x4e>
    {
        if (RS_rxBuffer[0] == 0x01)
 80003de:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <HAL_UART_RxCpltCallback+0x64>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d10a      	bne.n	80003fc <HAL_UART_RxCpltCallback+0x30>
           { // Kiểm tra địa chỉ slave
        	decode_ppm_2((char*)RS_rxBuffer,&ppm_data_1,&ppm_data_2);
 80003e6:	4a13      	ldr	r2, [pc, #76]	@ (8000434 <HAL_UART_RxCpltCallback+0x68>)
 80003e8:	4913      	ldr	r1, [pc, #76]	@ (8000438 <HAL_UART_RxCpltCallback+0x6c>)
 80003ea:	4811      	ldr	r0, [pc, #68]	@ (8000430 <HAL_UART_RxCpltCallback+0x64>)
 80003ec:	f7ff fece 	bl	800018c <decode_ppm_2>
        	Change_Time_Read_Data();
 80003f0:	f7ff ff8e 	bl	8000310 <Change_Time_Read_Data>
        	RS485_SendCommand(0x01, 0xFF); //FF = OK
 80003f4:	21ff      	movs	r1, #255	@ 0xff
 80003f6:	2001      	movs	r0, #1
 80003f8:	f7ff fea8 	bl	800014c <RS485_SendCommand>
           }
        if (RS_rxBuffer[0] == 0x02)
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <HAL_UART_RxCpltCallback+0x64>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d10a      	bne.n	800041a <HAL_UART_RxCpltCallback+0x4e>
           { // Kiểm tra địa chỉ slave
        	decode_ppm_2((char*)RS_rxBuffer,&ppm_data_3,&ppm_data_4);
 8000404:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <HAL_UART_RxCpltCallback+0x70>)
 8000406:	490e      	ldr	r1, [pc, #56]	@ (8000440 <HAL_UART_RxCpltCallback+0x74>)
 8000408:	4809      	ldr	r0, [pc, #36]	@ (8000430 <HAL_UART_RxCpltCallback+0x64>)
 800040a:	f7ff febf 	bl	800018c <decode_ppm_2>
        	Change_Time_Read_Data();
 800040e:	f7ff ff7f 	bl	8000310 <Change_Time_Read_Data>
        	RS485_SendCommand(0x02, 0xFF);
 8000412:	21ff      	movs	r1, #255	@ 0xff
 8000414:	2002      	movs	r0, #2
 8000416:	f7ff fe99 	bl	800014c <RS485_SendCommand>
           }
     }
        // Tiếp tục nhận
        HAL_UART_Receive_IT(&huart1, RS_rxBuffer, 15);
 800041a:	220f      	movs	r2, #15
 800041c:	4904      	ldr	r1, [pc, #16]	@ (8000430 <HAL_UART_RxCpltCallback+0x64>)
 800041e:	4809      	ldr	r0, [pc, #36]	@ (8000444 <HAL_UART_RxCpltCallback+0x78>)
 8000420:	f003 fbcd 	bl	8003bbe <HAL_UART_Receive_IT>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40013800 	.word	0x40013800
 8000430:	200001fc 	.word	0x200001fc
 8000434:	20000218 	.word	0x20000218
 8000438:	20000210 	.word	0x20000210
 800043c:	20000228 	.word	0x20000228
 8000440:	20000220 	.word	0x20000220
 8000444:	20000278 	.word	0x20000278

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fa16 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f80a 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f8dc 	bl	8000610 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000458:	f000 f8b0 	bl	80005bc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800045c:	f008 f80e 	bl	800847c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000460:	f000 f85e 	bl	8000520 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <main+0x1c>

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b094      	sub	sp, #80	@ 0x50
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000472:	2228      	movs	r2, #40	@ 0x28
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f008 fcfe 	bl	8008e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000498:	2301      	movs	r3, #1
 800049a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a6:	2301      	movs	r3, #1
 80004a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80004b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004be:	4618      	mov	r0, r3
 80004c0:	f002 fae2 	bl	8002a88 <HAL_RCC_OscConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004ca:	f000 f8c3 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ce:	230f      	movs	r3, #15
 80004d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2101      	movs	r1, #1
 80004ea:	4618      	mov	r0, r3
 80004ec:	f002 fd4e 	bl	8002f8c <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004f6:	f000 f8ad 	bl	8000654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004fa:	2310      	movs	r3, #16
 80004fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000502:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fece 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000512:	f000 f89f 	bl	8000654 <Error_Handler>
  }
}
 8000516:	bf00      	nop
 8000518:	3750      	adds	r7, #80	@ 0x50
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800053c:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <MX_TIM2_Init+0x98>)
 800053e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000542:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8000544:	4b1c      	ldr	r3, [pc, #112]	@ (80005b8 <MX_TIM2_Init+0x98>)
 8000546:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800054a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054c:	4b1a      	ldr	r3, [pc, #104]	@ (80005b8 <MX_TIM2_Init+0x98>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000552:	4b19      	ldr	r3, [pc, #100]	@ (80005b8 <MX_TIM2_Init+0x98>)
 8000554:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000558:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055a:	4b17      	ldr	r3, [pc, #92]	@ (80005b8 <MX_TIM2_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000560:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <MX_TIM2_Init+0x98>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000566:	4814      	ldr	r0, [pc, #80]	@ (80005b8 <MX_TIM2_Init+0x98>)
 8000568:	f002 ff54 	bl	8003414 <HAL_TIM_Base_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000572:	f000 f86f 	bl	8000654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4619      	mov	r1, r3
 8000582:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <MX_TIM2_Init+0x98>)
 8000584:	f003 f816 	bl	80035b4 <HAL_TIM_ConfigClockSource>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800058e:	f000 f861 	bl	8000654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	4619      	mov	r1, r3
 800059e:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <MX_TIM2_Init+0x98>)
 80005a0:	f003 f9d4 	bl	800394c <HAL_TIMEx_MasterConfigSynchronization>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005aa:	f000 f853 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000230 	.word	0x20000230

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_USART1_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f003 fa08 	bl	8003a08 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f829 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000278 	.word	0x20000278
 800060c:	40013800 	.word	0x40013800

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_GPIO_Init+0x40>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a0d      	ldr	r2, [pc, #52]	@ (8000650 <MX_GPIO_Init+0x40>)
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_GPIO_Init+0x40>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0320 	and.w	r3, r3, #32
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <MX_GPIO_Init+0x40>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <MX_GPIO_Init+0x40>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <MX_GPIO_Init+0x40>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <Error_Handler+0x8>

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <HAL_MspInit+0x5c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <HAL_MspInit+0x5c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <HAL_MspInit+0x5c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <HAL_MspInit+0x5c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <HAL_MspInit+0x5c>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <HAL_MspInit+0x5c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <HAL_MspInit+0x60>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <HAL_MspInit+0x60>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000

080006c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006d4:	d10b      	bne.n	80006ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <HAL_TIM_Base_MspInit+0x34>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a07      	ldr	r2, [pc, #28]	@ (80006f8 <HAL_TIM_Base_MspInit+0x34>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <HAL_TIM_Base_MspInit+0x34>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a20      	ldr	r2, [pc, #128]	@ (8000798 <HAL_UART_MspInit+0x9c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d139      	bne.n	8000790 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800071c:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <HAL_UART_MspInit+0xa0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <HAL_UART_MspInit+0xa0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <HAL_UART_MspInit+0xa0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <HAL_UART_MspInit+0xa0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a18      	ldr	r2, [pc, #96]	@ (800079c <HAL_UART_MspInit+0xa0>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <HAL_UART_MspInit+0xa0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800074c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <HAL_UART_MspInit+0xa4>)
 8000762:	f000 faad 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <HAL_UART_MspInit+0xa4>)
 800077c:	f000 faa0 	bl	8000cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2025      	movs	r0, #37	@ 0x25
 8000786:	f000 f9b2 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800078a:	2025      	movs	r0, #37	@ 0x25
 800078c:	f000 f9cb 	bl	8000b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40013800 	.word	0x40013800
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <NMI_Handler+0x4>

080007ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <MemManage_Handler+0x4>

080007bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <UsageFault_Handler+0x4>

080007cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f888 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000800:	4802      	ldr	r0, [pc, #8]	@ (800080c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000802:	f000 fcfd 	bl	8001200 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000f8c 	.word	0x20000f8c

08000810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <USART1_IRQHandler+0x10>)
 8000816:	f003 f9f7 	bl	8003c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000278 	.word	0x20000278

08000824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000830:	f7ff fff8 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000834:	480b      	ldr	r0, [pc, #44]	@ (8000864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000836:	490c      	ldr	r1, [pc, #48]	@ (8000868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000838:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <LoopFillZerobss+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800084c:	4c09      	ldr	r4, [pc, #36]	@ (8000874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f008 fb1b 	bl	8008e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085e:	f7ff fdf3 	bl	8000448 <main>
  bx lr
 8000862:	4770      	bx	lr
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800086c:	08009070 	.word	0x08009070
  ldr r2, =_sbss
 8000870:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000874:	200015bc 	.word	0x200015bc

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f923 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff fee2 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f93b 	bl	8000b42 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f903 	bl	8000aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	@ (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <HAL_IncTick+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_IncTick+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a03      	ldr	r2, [pc, #12]	@ (8000928 <HAL_IncTick+0x20>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000008 	.word	0x20000008
 8000928:	200002c0 	.word	0x200002c0

0800092c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	@ (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	200002c0 	.word	0x200002c0

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4906      	ldr	r1, [pc, #24]	@ (80009d8 <__NVIC_EnableIRQ+0x34>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	@ (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	@ (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	@ 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	@ 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f7ff ff90 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff2d 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff42 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff90 	bl	8000a30 <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5f 	bl	80009dc <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff35 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffa2 	bl	8000a94 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d008      	beq.n	8000b84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2204      	movs	r2, #4
 8000b76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e020      	b.n	8000bc6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 020e 	bic.w	r2, r2, #14
 8000b92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0201 	bic.w	r2, r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d005      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2204      	movs	r2, #4
 8000bec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e051      	b.n	8000c98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 020e 	bic.w	r2, r2, #14
 8000c02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0201 	bic.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a22      	ldr	r2, [pc, #136]	@ (8000ca4 <HAL_DMA_Abort_IT+0xd4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d029      	beq.n	8000c72 <HAL_DMA_Abort_IT+0xa2>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <HAL_DMA_Abort_IT+0xd8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d022      	beq.n	8000c6e <HAL_DMA_Abort_IT+0x9e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000cac <HAL_DMA_Abort_IT+0xdc>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01a      	beq.n	8000c68 <HAL_DMA_Abort_IT+0x98>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb0 <HAL_DMA_Abort_IT+0xe0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d012      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x92>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <HAL_DMA_Abort_IT+0xe4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d00a      	beq.n	8000c5c <HAL_DMA_Abort_IT+0x8c>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <HAL_DMA_Abort_IT+0xe8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d102      	bne.n	8000c56 <HAL_DMA_Abort_IT+0x86>
 8000c50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c54:	e00e      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c5a:	e00b      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c60:	e008      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c66:	e005      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6c:	e002      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c6e:	2310      	movs	r3, #16
 8000c70:	e000      	b.n	8000c74 <HAL_DMA_Abort_IT+0xa4>
 8000c72:	2301      	movs	r3, #1
 8000c74:	4a11      	ldr	r2, [pc, #68]	@ (8000cbc <HAL_DMA_Abort_IT+0xec>)
 8000c76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
    } 
  }
  return status;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	4002001c 	.word	0x4002001c
 8000cac:	40020030 	.word	0x40020030
 8000cb0:	40020044 	.word	0x40020044
 8000cb4:	40020058 	.word	0x40020058
 8000cb8:	4002006c 	.word	0x4002006c
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	@ 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e169      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8158 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a9a      	ldr	r2, [pc, #616]	@ (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d05e      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000cfc:	4a98      	ldr	r2, [pc, #608]	@ (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d875      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d02:	4a98      	ldr	r2, [pc, #608]	@ (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d058      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d08:	4a96      	ldr	r2, [pc, #600]	@ (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d86f      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d0e:	4a96      	ldr	r2, [pc, #600]	@ (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d052      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d14:	4a94      	ldr	r2, [pc, #592]	@ (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d869      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d1a:	4a94      	ldr	r2, [pc, #592]	@ (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d04c      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d20:	4a92      	ldr	r2, [pc, #584]	@ (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d863      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d26:	4a92      	ldr	r2, [pc, #584]	@ (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d046      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d2c:	4a90      	ldr	r2, [pc, #576]	@ (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d85d      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d82a      	bhi.n	8000d8c <HAL_GPIO_Init+0xcc>
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d859      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d40 <HAL_GPIO_Init+0x80>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000dbb 	.word	0x08000dbb
 8000d44:	08000d95 	.word	0x08000d95
 8000d48:	08000da7 	.word	0x08000da7
 8000d4c:	08000de9 	.word	0x08000de9
 8000d50:	08000def 	.word	0x08000def
 8000d54:	08000def 	.word	0x08000def
 8000d58:	08000def 	.word	0x08000def
 8000d5c:	08000def 	.word	0x08000def
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000def 	.word	0x08000def
 8000d68:	08000def 	.word	0x08000def
 8000d6c:	08000def 	.word	0x08000def
 8000d70:	08000def 	.word	0x08000def
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000def 	.word	0x08000def
 8000d7c:	08000def 	.word	0x08000def
 8000d80:	08000def 	.word	0x08000def
 8000d84:	08000d9d 	.word	0x08000d9d
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	4a79      	ldr	r2, [pc, #484]	@ (8000f74 <HAL_GPIO_Init+0x2b4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d92:	e02c      	b.n	8000dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e029      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	3304      	adds	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e024      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	3308      	adds	r3, #8
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e01f      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	330c      	adds	r3, #12
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e01a      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e013      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	611a      	str	r2, [r3, #16]
          break;
 8000dda:	e009      	b.n	8000df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	615a      	str	r2, [r3, #20]
          break;
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          break;
 8000dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2bff      	cmp	r3, #255	@ 0xff
 8000df4:	d801      	bhi.n	8000dfa <HAL_GPIO_Init+0x13a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	e001      	b.n	8000dfe <HAL_GPIO_Init+0x13e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2bff      	cmp	r3, #255	@ 0xff
 8000e04:	d802      	bhi.n	8000e0c <HAL_GPIO_Init+0x14c>
 8000e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0x152>
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	210f      	movs	r1, #15
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	401a      	ands	r2, r3
 8000e24:	6a39      	ldr	r1, [r7, #32]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80b1 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e40:	4b4d      	ldr	r3, [pc, #308]	@ (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	@ (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e58:	4a48      	ldr	r2, [pc, #288]	@ (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a40      	ldr	r2, [pc, #256]	@ (8000f80 <HAL_GPIO_Init+0x2c0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d013      	beq.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a3f      	ldr	r2, [pc, #252]	@ (8000f84 <HAL_GPIO_Init+0x2c4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00d      	beq.n	8000ea8 <HAL_GPIO_Init+0x1e8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3d      	ldr	r2, [pc, #244]	@ (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d101      	bne.n	8000ea0 <HAL_GPIO_Init+0x1e0>
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e004      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000eac:	2300      	movs	r3, #0
 8000eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eb0:	f002 0203 	and.w	r2, r2, #3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ebe:	492f      	ldr	r1, [pc, #188]	@ (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	492c      	ldr	r1, [pc, #176]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	608b      	str	r3, [r1, #8]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4928      	ldr	r1, [pc, #160]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f00:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4922      	ldr	r1, [pc, #136]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	60cb      	str	r3, [r1, #12]
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f0e:	4b20      	ldr	r3, [pc, #128]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	491e      	ldr	r1, [pc, #120]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f28:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4918      	ldr	r1, [pc, #96]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	604b      	str	r3, [r1, #4]
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4914      	ldr	r1, [pc, #80]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d021      	beq.n	8000f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	490e      	ldr	r1, [pc, #56]	@ (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
 8000f5c:	e021      	b.n	8000fa2 <HAL_GPIO_Init+0x2e2>
 8000f5e:	bf00      	nop
 8000f60:	10320000 	.word	0x10320000
 8000f64:	10310000 	.word	0x10310000
 8000f68:	10220000 	.word	0x10220000
 8000f6c:	10210000 	.word	0x10210000
 8000f70:	10120000 	.word	0x10120000
 8000f74:	10110000 	.word	0x10110000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40010800 	.word	0x40010800
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40011400 	.word	0x40011400
 8000f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4909      	ldr	r1, [pc, #36]	@ (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f47f ae8e 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	372c      	adds	r7, #44	@ 0x2c
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0e8      	b.n	80011ac <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d106      	bne.n	8000ff4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f007 fc10 	bl	8008814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fb8b 	bl	8004722 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001016:	f003 fb61 	bl	80046dc <USB_CoreInit>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0bf      	b.n	80011ac <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fb8f 	bl	8004756 <USB_SetCurrentMode>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2202      	movs	r2, #2
 8001042:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0b0      	b.n	80011ac <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e03e      	b.n	80010ce <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	3311      	adds	r3, #17
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	440b      	add	r3, r1
 8001072:	3310      	adds	r3, #16
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	3313      	adds	r3, #19
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	3320      	adds	r3, #32
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3324      	adds	r3, #36	@ 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	3301      	adds	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3bb      	bcc.n	8001050 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e044      	b.n	8001168 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3b5      	bcc.n	80010de <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3304      	adds	r3, #4
 800117a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117c:	f003 faf7 	bl	800476e <USB_DevInit>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00c      	b.n	80011ac <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 fd76 	bl	8006c96 <USB_DevDisconnect>

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d101      	bne.n	80011ca <HAL_PCD_Start+0x16>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e016      	b.n	80011f8 <HAL_PCD_Start+0x44>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fa8d 	bl	80046f6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011dc:	2101      	movs	r1, #1
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f007 fd8b 	bl	8008cfa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 fd4a 	bl	8006c82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f005 fd4c 	bl	8006caa <USB_ReadInterrupts>
 8001212:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fb1a 	bl	8001858 <PCD_EP_ISR_Handler>

    return;
 8001224:	e119      	b.n	800145a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122c:	2b00      	cmp	r3, #0
 800122e:	d013      	beq.n	8001258 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001242:	b292      	uxth	r2, r2
 8001244:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f007 fb5e 	bl	800890a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800124e:	2100      	movs	r1, #0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f905 	bl	8001460 <HAL_PCD_SetAddress>

    return;
 8001256:	e100      	b.n	800145a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00c      	beq.n	800127c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001274:	b292      	uxth	r2, r2
 8001276:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800127a:	e0ee      	b.n	800145a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00c      	beq.n	80012a0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800128e:	b29a      	uxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001298:	b292      	uxth	r2, r2
 800129a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800129e:	e0dc      	b.n	800145a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d027      	beq.n	80012fa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0204 	bic.w	r2, r2, #4
 80012bc:	b292      	uxth	r2, r2
 80012be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0208 	bic.w	r2, r2, #8
 80012d4:	b292      	uxth	r2, r2
 80012d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f007 fb4e 	bl	800897c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012f2:	b292      	uxth	r2, r2
 80012f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012f8:	e0af      	b.n	800145a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8083 	beq.w	800140c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	77fb      	strb	r3, [r7, #31]
 800130a:	e010      	b.n	800132e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	441a      	add	r2, r3
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	8812      	ldrh	r2, [r2, #0]
 800131c:	b292      	uxth	r2, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	3320      	adds	r3, #32
 8001322:	443b      	add	r3, r7
 8001324:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001328:	7ffb      	ldrb	r3, [r7, #31]
 800132a:	3301      	adds	r3, #1
 800132c:	77fb      	strb	r3, [r7, #31]
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	2b07      	cmp	r3, #7
 8001332:	d9eb      	bls.n	800130c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	b292      	uxth	r2, r2
 8001348:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	b292      	uxth	r2, r2
 8001360:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001364:	bf00      	nop
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800136e:	b29b      	uxth	r3, r3
 8001370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f6      	beq.n	8001366 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001380:	b29a      	uxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800138a:	b292      	uxth	r2, r2
 800138c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
 8001394:	e00f      	b.n	80013b6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4611      	mov	r1, r2
 800139e:	7ffa      	ldrb	r2, [r7, #31]
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	440a      	add	r2, r1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	3320      	adds	r3, #32
 80013a8:	443b      	add	r3, r7
 80013aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013ae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	3301      	adds	r3, #1
 80013b4:	77fb      	strb	r3, [r7, #31]
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	d9ec      	bls.n	8001396 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0208 	orr.w	r2, r2, #8
 80013ce:	b292      	uxth	r2, r2
 80013d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013e6:	b292      	uxth	r2, r2
 80013e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0204 	orr.w	r2, r2, #4
 80013fe:	b292      	uxth	r2, r2
 8001400:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f007 fa9f 	bl	8008948 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800140a:	e026      	b.n	800145a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00f      	beq.n	8001436 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800141e:	b29a      	uxth	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001428:	b292      	uxth	r2, r2
 800142a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f007 fa5d 	bl	80088ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001434:	e011      	b.n	800145a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001452:	b292      	uxth	r2, r2
 8001454:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001458:	bf00      	nop
  }
}
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_PCD_SetAddress+0x1a>
 8001476:	2302      	movs	r3, #2
 8001478:	e012      	b.n	80014a0 <HAL_PCD_SetAddress+0x40>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f005 fbe3 	bl	8006c5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	70fb      	strb	r3, [r7, #3]
 80014ba:	460b      	mov	r3, r1
 80014bc:	803b      	strh	r3, [r7, #0]
 80014be:	4613      	mov	r3, r2
 80014c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da0e      	bge.n	80014ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	f003 0207 	and.w	r2, r3, #7
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	3310      	adds	r3, #16
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2201      	movs	r2, #1
 80014e8:	705a      	strb	r2, [r3, #1]
 80014ea:	e00e      	b.n	800150a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f003 0207 	and.w	r2, r3, #7
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	b2da      	uxtb	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001516:	883a      	ldrh	r2, [r7, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	78ba      	ldrb	r2, [r7, #2]
 8001520:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001522:	78bb      	ldrb	r3, [r7, #2]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d102      	bne.n	800152e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_PCD_EP_Open+0x94>
 8001538:	2302      	movs	r3, #2
 800153a:	e00e      	b.n	800155a <HAL_PCD_EP_Open+0xb2>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	4618      	mov	r0, r3
 800154c:	f003 f92c 	bl	80047a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001558:	7afb      	ldrb	r3, [r7, #11]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800156e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001572:	2b00      	cmp	r3, #0
 8001574:	da0e      	bge.n	8001594 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	3310      	adds	r3, #16
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2201      	movs	r2, #1
 8001590:	705a      	strb	r2, [r3, #1]
 8001592:	e00e      	b.n	80015b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	f003 0207 	and.w	r2, r3, #7
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_PCD_EP_Close+0x6a>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e00e      	b.n	80015ea <HAL_PCD_EP_Close+0x88>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fca4 	bl	8004f28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	460b      	mov	r3, r1
 8001600:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	f003 0207 	and.w	r2, r3, #7
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	b2da      	uxtb	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6979      	ldr	r1, [r7, #20]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fe5b 	bl	8005300 <USB_EPStartXfer>

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	f003 0207 	and.w	r2, r3, #7
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	460b      	mov	r3, r1
 8001690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	f003 0207 	and.w	r2, r3, #7
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	3310      	adds	r3, #16
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2201      	movs	r2, #1
 80016cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6979      	ldr	r1, [r7, #20]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fe0d 	bl	8005300 <USB_EPStartXfer>

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	7912      	ldrb	r2, [r2, #4]
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e04c      	b.n	80017a8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800170e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001712:	2b00      	cmp	r3, #0
 8001714:	da0e      	bge.n	8001734 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	f003 0207 	and.w	r2, r3, #7
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	3310      	adds	r3, #16
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	705a      	strb	r2, [r3, #1]
 8001732:	e00c      	b.n	800174e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_PCD_EP_SetStall+0x7e>
 800176a:	2302      	movs	r3, #2
 800176c:	e01c      	b.n	80017a8 <HAL_PCD_EP_SetStall+0xb8>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68f9      	ldr	r1, [r7, #12]
 800177c:	4618      	mov	r0, r3
 800177e:	f005 f970 	bl	8006a62 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	2b00      	cmp	r3, #0
 800178a:	d108      	bne.n	800179e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001796:	4619      	mov	r1, r3
 8001798:	4610      	mov	r0, r2
 800179a:	f005 fa95 	bl	8006cc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	7912      	ldrb	r2, [r2, #4]
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e040      	b.n	8001850 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da0e      	bge.n	80017f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	f003 0207 	and.w	r2, r3, #7
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	3310      	adds	r3, #16
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	705a      	strb	r2, [r3, #1]
 80017f2:	e00e      	b.n	8001812 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	f003 0207 	and.w	r2, r3, #7
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_PCD_EP_ClrStall+0x82>
 800182e:	2302      	movs	r3, #2
 8001830:	e00e      	b.n	8001850 <HAL_PCD_EP_ClrStall+0xa0>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68f9      	ldr	r1, [r7, #12]
 8001840:	4618      	mov	r0, r3
 8001842:	f005 f95e 	bl	8006b02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b096      	sub	sp, #88	@ 0x58
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001860:	e3bb      	b.n	8001fda <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800186a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800186e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800187c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001880:	2b00      	cmp	r3, #0
 8001882:	f040 8175 	bne.w	8001b70 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001886:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d14e      	bne.n	8001930 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800189e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018a2:	81fb      	strh	r3, [r7, #14]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3310      	adds	r3, #16
 80018ba:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	3302      	adds	r3, #2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	441a      	add	r2, r3
 80018f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018f6:	2100      	movs	r1, #0
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f006 ffde 	bl	80088ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7b5b      	ldrb	r3, [r3, #13]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8368 	beq.w	8001fda <PCD_EP_ISR_Handler+0x782>
 800190a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 8363 	bne.w	8001fda <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7b5b      	ldrb	r3, [r3, #13]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800191e:	b2da      	uxtb	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	735a      	strb	r2, [r3, #13]
 800192e:	e354      	b.n	8001fda <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001936:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001942:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800194a:	2b00      	cmp	r3, #0
 800194c:	d034      	beq.n	80019b8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001956:	b29b      	uxth	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	3306      	adds	r3, #6
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001978:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001986:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800198c:	b29b      	uxth	r3, r3
 800198e:	f005 f9eb 	bl	8006d68 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29a      	uxth	r2, r3
 800199a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800199e:	4013      	ands	r3, r2
 80019a0:	823b      	strh	r3, [r7, #16]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	8a3a      	ldrh	r2, [r7, #16]
 80019a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019ac:	b292      	uxth	r2, r2
 80019ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f006 ff55 	bl	8008860 <HAL_PCD_SetupStageCallback>
 80019b6:	e310      	b.n	8001fda <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f280 830c 	bge.w	8001fda <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80019ce:	4013      	ands	r3, r2
 80019d0:	83fb      	strh	r3, [r7, #30]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	8bfa      	ldrh	r2, [r7, #30]
 80019d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019dc:	b292      	uxth	r2, r2
 80019de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	3306      	adds	r3, #6
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d019      	beq.n	8001a48 <PCD_EP_ISR_Handler+0x1f0>
 8001a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d015      	beq.n	8001a48 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a22:	6959      	ldr	r1, [r3, #20]
 8001a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a26:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a2a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f005 f99b 	bl	8006d68 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a40:	2100      	movs	r1, #0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f006 ff1e 	bl	8008884 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 82bd 	bne.w	8001fda <PCD_EP_ISR_Handler+0x782>
 8001a60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a64:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001a68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001a6c:	f000 82b5 	beq.w	8001fda <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4413      	add	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b3e      	cmp	r3, #62	@ 0x3e
 8001aa6:	d91d      	bls.n	8001ae4 <PCD_EP_ISR_Handler+0x28c>
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	095b      	lsrs	r3, r3, #5
 8001aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <PCD_EP_ISR_Handler+0x26a>
 8001abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	801a      	strh	r2, [r3, #0]
 8001ae2:	e026      	b.n	8001b32 <PCD_EP_ISR_Handler+0x2da>
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10a      	bne.n	8001b02 <PCD_EP_ISR_Handler+0x2aa>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	801a      	strh	r2, [r3, #0]
 8001b00:	e017      	b.n	8001b32 <PCD_EP_ISR_Handler+0x2da>
 8001b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <PCD_EP_ISR_Handler+0x2c4>
 8001b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b18:	3301      	adds	r3, #1
 8001b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b42:	827b      	strh	r3, [r7, #18]
 8001b44:	8a7b      	ldrh	r3, [r7, #18]
 8001b46:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001b4a:	827b      	strh	r3, [r7, #18]
 8001b4c:	8a7b      	ldrh	r3, [r7, #18]
 8001b4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001b52:	827b      	strh	r3, [r7, #18]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	8a7b      	ldrh	r3, [r7, #18]
 8001b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	8013      	strh	r3, [r2, #0]
 8001b6e:	e234      	b.n	8001fda <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b84:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f280 80fc 	bge.w	8001d86 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001bbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bc0:	b292      	uxth	r2, r2
 8001bc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bc4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bdc:	7b1b      	ldrb	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d125      	bne.n	8001c2e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8092 	beq.w	8001d3c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	6959      	ldr	r1, [r3, #20]
 8001c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c22:	88da      	ldrh	r2, [r3, #6]
 8001c24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c28:	f005 f89e 	bl	8006d68 <USB_ReadPMA>
 8001c2c:	e086      	b.n	8001d3c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c30:	78db      	ldrb	r3, [r3, #3]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d10a      	bne.n	8001c4c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f9d9 	bl	8001ff6 <HAL_PCD_EP_DB_Receive>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001c4a:	e077      	b.n	8001d3c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c66:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	441a      	add	r2, r3
 8001c78:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d024      	beq.n	8001cf4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001cd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d02e      	beq.n	8001d3c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce4:	6959      	ldr	r1, [r3, #20]
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce8:	891a      	ldrh	r2, [r3, #8]
 8001cea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cee:	f005 f83b 	bl	8006d68 <USB_ReadPMA>
 8001cf2:	e023      	b.n	8001d3c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	3306      	adds	r3, #6
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d1c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2e:	6959      	ldr	r1, [r3, #20]
 8001d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d32:	895a      	ldrh	r2, [r3, #10]
 8001d34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d38:	f005 f816 	bl	8006d68 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d44:	441a      	add	r2, r3
 8001d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d52:	441a      	add	r2, r3
 8001d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d56:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x514>
 8001d60:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d206      	bcs.n	8001d7a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f006 fd86 	bl	8008884 <HAL_PCD_DataOutStageCallback>
 8001d78:	e005      	b.n	8001d86 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fabd 	bl	8005300 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8123 	beq.w	8001fda <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d94:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	3310      	adds	r3, #16
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	441a      	add	r2, r3
 8001dd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	78db      	ldrb	r3, [r3, #3]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	f040 80a2 	bne.w	8001f32 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df6:	7b1b      	ldrb	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8093 	beq.w	8001f24 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d046      	beq.n	8001e98 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d126      	bne.n	8001e60 <PCD_EP_ISR_Handler+0x608>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	4413      	add	r3, r2
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	011a      	lsls	r2, r3, #4
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	4413      	add	r3, r2
 8001e34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e38:	623b      	str	r3, [r7, #32]
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	801a      	strh	r2, [r3, #0]
 8001e5e:	e061      	b.n	8001f24 <PCD_EP_ISR_Handler+0x6cc>
 8001e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d15d      	bne.n	8001f24 <PCD_EP_ISR_Handler+0x6cc>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7c:	4413      	add	r3, r2
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	011a      	lsls	r2, r3, #4
 8001e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e88:	4413      	add	r3, r2
 8001e8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e92:	2200      	movs	r2, #0
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	e045      	b.n	8001f24 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea0:	785b      	ldrb	r3, [r3, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d126      	bne.n	8001ef4 <PCD_EP_ISR_Handler+0x69c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eba:	4413      	add	r3, r2
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	011a      	lsls	r2, r3, #4
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef0:	801a      	strh	r2, [r3, #0]
 8001ef2:	e017      	b.n	8001f24 <PCD_EP_ISR_Handler+0x6cc>
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef6:	785b      	ldrb	r3, [r3, #1]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d113      	bne.n	8001f24 <PCD_EP_ISR_Handler+0x6cc>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f0a:	4413      	add	r3, r2
 8001f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	011a      	lsls	r2, r3, #4
 8001f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f16:	4413      	add	r3, r2
 8001f18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f20:	2200      	movs	r2, #0
 8001f22:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f006 fcc5 	bl	80088ba <HAL_PCD_DataInStageCallback>
 8001f30:	e053      	b.n	8001fda <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d146      	bne.n	8001fcc <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	3302      	adds	r3, #2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f66:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d907      	bls.n	8001f86 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f7e:	1ad2      	subs	r2, r2, r3
 8001f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f82:	619a      	str	r2, [r3, #24]
 8001f84:	e002      	b.n	8001f8c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d106      	bne.n	8001fa2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f006 fc8d 	bl	80088ba <HAL_PCD_DataInStageCallback>
 8001fa0:	e01b      	b.n	8001fda <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001faa:	441a      	add	r2, r3
 8001fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fb8:	441a      	add	r2, r3
 8001fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fbc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 f99b 	bl	8005300 <USB_EPStartXfer>
 8001fca:	e006      	b.n	8001fda <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f91b 	bl	8002210 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f6ff ac3b 	blt.w	8001862 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3758      	adds	r7, #88	@ 0x58
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b088      	sub	sp, #32
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	4613      	mov	r3, r2
 8002002:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d07e      	beq.n	800210c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	3302      	adds	r3, #2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002036:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	8b7b      	ldrh	r3, [r7, #26]
 800203e:	429a      	cmp	r2, r3
 8002040:	d306      	bcc.n	8002050 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	8b7b      	ldrh	r3, [r7, #26]
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	619a      	str	r2, [r3, #24]
 800204e:	e002      	b.n	8002056 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d123      	bne.n	80020a6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002078:	833b      	strh	r3, [r7, #24]
 800207a:	8b3b      	ldrh	r3, [r7, #24]
 800207c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002080:	833b      	strh	r3, [r7, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	441a      	add	r2, r3
 8002090:	8b3b      	ldrh	r3, [r7, #24]
 8002092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800209a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800209e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01f      	beq.n	80020f0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ca:	82fb      	strh	r3, [r7, #22]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	441a      	add	r2, r3
 80020da:	8afb      	ldrh	r3, [r7, #22]
 80020dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020f0:	8b7b      	ldrh	r3, [r7, #26]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8087 	beq.w	8002206 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	6959      	ldr	r1, [r3, #20]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	891a      	ldrh	r2, [r3, #8]
 8002104:	8b7b      	ldrh	r3, [r7, #26]
 8002106:	f004 fe2f 	bl	8006d68 <USB_ReadPMA>
 800210a:	e07c      	b.n	8002206 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	3306      	adds	r3, #6
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002134:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	8b7b      	ldrh	r3, [r7, #26]
 800213c:	429a      	cmp	r2, r3
 800213e:	d306      	bcc.n	800214e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	8b7b      	ldrh	r3, [r7, #26]
 8002146:	1ad2      	subs	r2, r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	619a      	str	r2, [r3, #24]
 800214c:	e002      	b.n	8002154 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d123      	bne.n	80021a4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002176:	83fb      	strh	r3, [r7, #30]
 8002178:	8bfb      	ldrh	r3, [r7, #30]
 800217a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800217e:	83fb      	strh	r3, [r7, #30]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	8bfb      	ldrh	r3, [r7, #30]
 8002190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800219c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11f      	bne.n	80021ee <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021c8:	83bb      	strh	r3, [r7, #28]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	441a      	add	r2, r3
 80021d8:	8bbb      	ldrh	r3, [r7, #28]
 80021da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021ee:	8b7b      	ldrh	r3, [r7, #26]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6959      	ldr	r1, [r3, #20]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	895a      	ldrh	r2, [r3, #10]
 8002200:	8b7b      	ldrh	r3, [r7, #26]
 8002202:	f004 fdb1 	bl	8006d68 <USB_ReadPMA>
    }
  }

  return count;
 8002206:	8b7b      	ldrh	r3, [r7, #26]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0a4      	sub	sp, #144	@ 0x90
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 81dd 	beq.w	80025e4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	3302      	adds	r3, #2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002252:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800225e:	429a      	cmp	r2, r3
 8002260:	d907      	bls.n	8002272 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800226a:	1ad2      	subs	r2, r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	619a      	str	r2, [r3, #24]
 8002270:	e002      	b.n	8002278 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 80b9 	bne.w	80023f4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d126      	bne.n	80022d8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002298:	b29b      	uxth	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229e:	4413      	add	r3, r2
 80022a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	011a      	lsls	r2, r3, #4
 80022a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022aa:	4413      	add	r3, r2
 80022ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	801a      	strh	r2, [r3, #0]
 80022c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	e01a      	b.n	800230e <HAL_PCD_EP_DB_Transmit+0xfe>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	785b      	ldrb	r3, [r3, #1]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d116      	bne.n	800230e <HAL_PCD_EP_DB_Transmit+0xfe>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f4:	4413      	add	r3, r2
 80022f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	011a      	lsls	r2, r3, #4
 80022fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002300:	4413      	add	r3, r2
 8002302:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002306:	633b      	str	r3, [r7, #48]	@ 0x30
 8002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230a:	2200      	movs	r2, #0
 800230c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	785b      	ldrb	r3, [r3, #1]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d126      	bne.n	800236a <HAL_PCD_EP_DB_Transmit+0x15a>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	011a      	lsls	r2, r3, #4
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234e:	b29a      	uxth	r2, r3
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800235e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002362:	b29a      	uxth	r2, r3
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	801a      	strh	r2, [r3, #0]
 8002368:	e017      	b.n	800239a <HAL_PCD_EP_DB_Transmit+0x18a>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	785b      	ldrb	r3, [r3, #1]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d113      	bne.n	800239a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	4413      	add	r3, r2
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	011a      	lsls	r2, r3, #4
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	4413      	add	r3, r2
 800238e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002392:	623b      	str	r3, [r7, #32]
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2200      	movs	r2, #0
 8002398:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f006 fa8a 	bl	80088ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 82fc 	beq.w	80029aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023cc:	82fb      	strh	r3, [r7, #22]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	441a      	add	r2, r3
 80023dc:	8afb      	ldrh	r3, [r7, #22]
 80023de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8013      	strh	r3, [r2, #0]
 80023f2:	e2da      	b.n	80029aa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d021      	beq.n	8002442 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002418:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	441a      	add	r2, r3
 800242a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800242e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002436:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800243a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800243e:	b29b      	uxth	r3, r3
 8002440:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 82ae 	bne.w	80029aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002456:	441a      	add	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002464:	441a      	add	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	429a      	cmp	r2, r3
 8002474:	d30b      	bcc.n	800248e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6a1a      	ldr	r2, [r3, #32]
 8002482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002486:	1ad2      	subs	r2, r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	e017      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002496:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800249a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024a6:	e00a      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2200      	movs	r2, #0
 80024bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d165      	bne.n	8002592 <HAL_PCD_EP_DB_Transmit+0x382>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024da:	4413      	add	r3, r2
 80024dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	011a      	lsls	r2, r3, #4
 80024e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e6:	4413      	add	r3, r2
 80024e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002502:	2b3e      	cmp	r3, #62	@ 0x3e
 8002504:	d91d      	bls.n	8002542 <HAL_PCD_EP_DB_Transmit+0x332>
 8002506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800250e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_PCD_EP_DB_Transmit+0x310>
 800251a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800251c:	3b01      	subs	r3, #1
 800251e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29a      	uxth	r2, r3
 8002526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002528:	b29b      	uxth	r3, r3
 800252a:	029b      	lsls	r3, r3, #10
 800252c:	b29b      	uxth	r3, r3
 800252e:	4313      	orrs	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253a:	b29a      	uxth	r2, r3
 800253c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	e044      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <HAL_PCD_EP_DB_Transmit+0x350>
 800254a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002558:	b29a      	uxth	r2, r3
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	e035      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002560:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002576:	3301      	adds	r3, #1
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800257a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29a      	uxth	r2, r3
 8002580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002582:	b29b      	uxth	r3, r3
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	b29b      	uxth	r3, r3
 8002588:	4313      	orrs	r3, r2
 800258a:	b29a      	uxth	r2, r3
 800258c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	e01c      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d118      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	647b      	str	r3, [r7, #68]	@ 0x44
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ae:	4413      	add	r3, r2
 80025b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	011a      	lsls	r2, r3, #4
 80025b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ba:	4413      	add	r3, r2
 80025bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80025c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6959      	ldr	r1, [r3, #20]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	891a      	ldrh	r2, [r3, #8]
 80025d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f004 fb7e 	bl	8006cde <USB_WritePMA>
 80025e2:	e1e2      	b.n	80029aa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	3306      	adds	r3, #6
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002618:	429a      	cmp	r2, r3
 800261a:	d307      	bcc.n	800262c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002624:	1ad2      	subs	r2, r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	619a      	str	r2, [r3, #24]
 800262a:	e002      	b.n	8002632 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 80c0 	bne.w	80027bc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	785b      	ldrb	r3, [r3, #1]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d126      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0x482>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002658:	4413      	add	r3, r2
 800265a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	011a      	lsls	r2, r3, #4
 8002662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002664:	4413      	add	r3, r2
 8002666:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800266a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800266c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002676:	b29a      	uxth	r2, r3
 8002678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268a:	b29a      	uxth	r2, r3
 800268c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800268e:	801a      	strh	r2, [r3, #0]
 8002690:	e01a      	b.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	785b      	ldrb	r3, [r3, #1]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d116      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	667b      	str	r3, [r7, #100]	@ 0x64
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026ae:	4413      	add	r3, r2
 80026b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	011a      	lsls	r2, r3, #4
 80026b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026ba:	4413      	add	r3, r2
 80026bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80026c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026c4:	2200      	movs	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d12b      	bne.n	800272e <HAL_PCD_EP_DB_Transmit+0x51e>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ea:	4413      	add	r3, r2
 80026ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	011a      	lsls	r2, r3, #4
 80026f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f6:	4413      	add	r3, r2
 80026f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800270c:	b29a      	uxth	r2, r3
 800270e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002724:	b29a      	uxth	r2, r3
 8002726:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e017      	b.n	800275e <HAL_PCD_EP_DB_Transmit+0x54e>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d113      	bne.n	800275e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002744:	4413      	add	r3, r2
 8002746:	677b      	str	r3, [r7, #116]	@ 0x74
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	011a      	lsls	r2, r3, #4
 800274e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002750:	4413      	add	r3, r2
 8002752:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002756:	673b      	str	r3, [r7, #112]	@ 0x70
 8002758:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800275a:	2200      	movs	r2, #0
 800275c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f006 f8a8 	bl	80088ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 811a 	bne.w	80029aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800278c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002790:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	441a      	add	r2, r3
 80027a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80027a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	8013      	strh	r3, [r2, #0]
 80027ba:	e0f6      	b.n	80029aa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d121      	bne.n	800280a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80027f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002806:	b29b      	uxth	r3, r3
 8002808:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002810:	2b01      	cmp	r3, #1
 8002812:	f040 80ca 	bne.w	80029aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800281e:	441a      	add	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800282c:	441a      	add	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6a1a      	ldr	r2, [r3, #32]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	d30b      	bcc.n	8002856 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	6a1a      	ldr	r2, [r3, #32]
 800284a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800284e:	1ad2      	subs	r2, r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	e017      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800285e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800286e:	e00a      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2200      	movs	r2, #0
 800287c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	657b      	str	r3, [r7, #84]	@ 0x54
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d165      	bne.n	8002960 <HAL_PCD_EP_DB_Transmit+0x750>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a8:	4413      	add	r3, r2
 80028aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	011a      	lsls	r2, r3, #4
 80028b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80028d2:	d91d      	bls.n	8002910 <HAL_PCD_EP_DB_Transmit+0x700>
 80028d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <HAL_PCD_EP_DB_Transmit+0x6de>
 80028e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028ea:	3b01      	subs	r3, #1
 80028ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002908:	b29a      	uxth	r2, r3
 800290a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	e041      	b.n	8002994 <HAL_PCD_EP_DB_Transmit+0x784>
 8002910:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002926:	b29a      	uxth	r2, r3
 8002928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e032      	b.n	8002994 <HAL_PCD_EP_DB_Transmit+0x784>
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_PCD_EP_DB_Transmit+0x738>
 8002942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002944:	3301      	adds	r3, #1
 8002946:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29a      	uxth	r2, r3
 800294e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002950:	b29b      	uxth	r3, r3
 8002952:	029b      	lsls	r3, r3, #10
 8002954:	b29b      	uxth	r3, r3
 8002956:	4313      	orrs	r3, r2
 8002958:	b29a      	uxth	r2, r3
 800295a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800295c:	801a      	strh	r2, [r3, #0]
 800295e:	e019      	b.n	8002994 <HAL_PCD_EP_DB_Transmit+0x784>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d115      	bne.n	8002994 <HAL_PCD_EP_DB_Transmit+0x784>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002976:	4413      	add	r3, r2
 8002978:	657b      	str	r3, [r7, #84]	@ 0x54
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	011a      	lsls	r2, r3, #4
 8002980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002982:	4413      	add	r3, r2
 8002984:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002988:	653b      	str	r3, [r7, #80]	@ 0x50
 800298a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800298e:	b29a      	uxth	r2, r3
 8002990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002992:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6959      	ldr	r1, [r3, #20]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	895a      	ldrh	r2, [r3, #10]
 80029a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f004 f99a 	bl	8006cde <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029c4:	82bb      	strh	r3, [r7, #20]
 80029c6:	8abb      	ldrh	r3, [r7, #20]
 80029c8:	f083 0310 	eor.w	r3, r3, #16
 80029cc:	82bb      	strh	r3, [r7, #20]
 80029ce:	8abb      	ldrh	r3, [r7, #20]
 80029d0:	f083 0320 	eor.w	r3, r3, #32
 80029d4:	82bb      	strh	r3, [r7, #20]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	441a      	add	r2, r3
 80029e4:	8abb      	ldrh	r3, [r7, #20]
 80029e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3790      	adds	r7, #144	@ 0x90
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	817b      	strh	r3, [r7, #10]
 8002a12:	4613      	mov	r3, r2
 8002a14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a16:	897b      	ldrh	r3, [r7, #10]
 8002a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	f003 0207 	and.w	r2, r3, #7
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	3310      	adds	r3, #16
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4413      	add	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	e009      	b.n	8002a4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a3a:	897a      	ldrh	r2, [r7, #10]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2200      	movs	r2, #0
 8002a58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	80da      	strh	r2, [r3, #6]
 8002a62:	e00b      	b.n	8002a7c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2201      	movs	r2, #1
 8002a68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e272      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8087 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa8:	4b92      	ldr	r3, [pc, #584]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d00c      	beq.n	8002ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab4:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d112      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x5e>
 8002ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002acc:	d10b      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ace:	4b89      	ldr	r3, [pc, #548]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d06c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x12c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d168      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e24c      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x76>
 8002af0:	4b80      	ldr	r3, [pc, #512]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a7f      	ldr	r2, [pc, #508]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e02e      	b.n	8002b5c <HAL_RCC_OscConfig+0xd4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x98>
 8002b06:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7a      	ldr	r2, [pc, #488]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b78      	ldr	r3, [pc, #480]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a77      	ldr	r2, [pc, #476]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e01d      	b.n	8002b5c <HAL_RCC_OscConfig+0xd4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0xbc>
 8002b2a:	4b72      	ldr	r3, [pc, #456]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a71      	ldr	r2, [pc, #452]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0xd4>
 8002b44:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b68      	ldr	r3, [pc, #416]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a67      	ldr	r2, [pc, #412]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fd fee2 	bl	800092c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fd fede 	bl	800092c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e200      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0xe4>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fd fece 	bl	800092c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fd feca 	bl	800092c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1ec      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x10c>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d063      	beq.n	8002c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bce:	4b49      	ldr	r3, [pc, #292]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x18c>
 8002bda:	4b46      	ldr	r3, [pc, #280]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x176>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e1c0      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4939      	ldr	r1, [pc, #228]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	e03a      	b.n	8002c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1c:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fd fe83 	bl	800092c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fd fe7f 	bl	800092c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1a1      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4927      	ldr	r1, [pc, #156]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b26      	ldr	r3, [pc, #152]	@ (8002cf8 <HAL_RCC_OscConfig+0x270>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fd fe62 	bl	800092c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7fd fe5e 	bl	800092c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e180      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d03a      	beq.n	8002d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d019      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_RCC_OscConfig+0x274>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca4:	f7fd fe42 	bl	800092c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fd fe3e 	bl	800092c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e160      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f000 face 	bl	800326c <RCC_Delay>
 8002cd0:	e01c      	b.n	8002d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HAL_RCC_OscConfig+0x274>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd8:	f7fd fe28 	bl	800092c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cde:	e00f      	b.n	8002d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7fd fe24 	bl	800092c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d908      	bls.n	8002d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e146      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	42420000 	.word	0x42420000
 8002cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	4b92      	ldr	r3, [pc, #584]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e9      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80a6 	beq.w	8002e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b88      	ldr	r3, [pc, #544]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a87      	ldr	r2, [pc, #540]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	61d3      	str	r3, [r2, #28]
 8002d36:	4b85      	ldr	r3, [pc, #532]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4b82      	ldr	r3, [pc, #520]	@ (8002f50 <HAL_RCC_OscConfig+0x4c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4b7f      	ldr	r3, [pc, #508]	@ (8002f50 <HAL_RCC_OscConfig+0x4c8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7e      	ldr	r2, [pc, #504]	@ (8002f50 <HAL_RCC_OscConfig+0x4c8>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7fd fde5 	bl	800092c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fd fde1 	bl	800092c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	@ 0x64
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e103      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b75      	ldr	r3, [pc, #468]	@ (8002f50 <HAL_RCC_OscConfig+0x4c8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x312>
 8002d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a6e      	ldr	r2, [pc, #440]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	e02d      	b.n	8002df6 <HAL_RCC_OscConfig+0x36e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x334>
 8002da2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a69      	ldr	r2, [pc, #420]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6213      	str	r3, [r2, #32]
 8002dae:	4b67      	ldr	r3, [pc, #412]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4a66      	ldr	r2, [pc, #408]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f023 0304 	bic.w	r3, r3, #4
 8002db8:	6213      	str	r3, [r2, #32]
 8002dba:	e01c      	b.n	8002df6 <HAL_RCC_OscConfig+0x36e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCC_OscConfig+0x356>
 8002dc4:	4b61      	ldr	r3, [pc, #388]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4a60      	ldr	r2, [pc, #384]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	f043 0304 	orr.w	r3, r3, #4
 8002dce:	6213      	str	r3, [r2, #32]
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6213      	str	r3, [r2, #32]
 8002ddc:	e00b      	b.n	8002df6 <HAL_RCC_OscConfig+0x36e>
 8002dde:	4b5b      	ldr	r3, [pc, #364]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a5a      	ldr	r2, [pc, #360]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	4b58      	ldr	r3, [pc, #352]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a57      	ldr	r2, [pc, #348]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d015      	beq.n	8002e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7fd fd95 	bl	800092c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fd fd91 	bl	800092c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0b1      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ee      	beq.n	8002e06 <HAL_RCC_OscConfig+0x37e>
 8002e28:	e014      	b.n	8002e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7fd fd7f 	bl	800092c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fd fd7b 	bl	800092c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e09b      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	4b40      	ldr	r3, [pc, #256]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ee      	bne.n	8002e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8087 	beq.w	8002f7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d061      	beq.n	8002f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d146      	bne.n	8002f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b33      	ldr	r3, [pc, #204]	@ (8002f54 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fd fd4f 	bl	800092c <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fd fd4b 	bl	800092c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e06d      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea4:	4b29      	ldr	r3, [pc, #164]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb8:	d108      	bne.n	8002ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eba:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4921      	ldr	r1, [pc, #132]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a19      	ldr	r1, [r3, #32]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	430b      	orrs	r3, r1
 8002ede:	491b      	ldr	r1, [pc, #108]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fd fd1f 	bl	800092c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7fd fd1b 	bl	800092c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e03d      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x46a>
 8002f10:	e035      	b.n	8002f7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fd fd08 	bl	800092c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fd fd04 	bl	800092c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e026      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x498>
 8002f3e:	e01e      	b.n	8002f7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e019      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_RCC_OscConfig+0x500>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0d0      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d910      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b67      	ldr	r3, [pc, #412]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	4965      	ldr	r1, [pc, #404]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b63      	ldr	r3, [pc, #396]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0b8      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe8:	4b59      	ldr	r3, [pc, #356]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a58      	ldr	r2, [pc, #352]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003000:	4b53      	ldr	r3, [pc, #332]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a52      	ldr	r2, [pc, #328]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800300a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300c:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	494d      	ldr	r1, [pc, #308]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d040      	beq.n	80030ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d115      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e07f      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e073      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	4b3d      	ldr	r3, [pc, #244]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06b      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306a:	4b39      	ldr	r3, [pc, #228]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f023 0203 	bic.w	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4936      	ldr	r1, [pc, #216]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800307c:	f7fd fc56 	bl	800092c <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	e00a      	b.n	800309a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003084:	f7fd fc52 	bl	800092c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e053      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b2d      	ldr	r3, [pc, #180]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 020c 	and.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1eb      	bne.n	8003084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b27      	ldr	r3, [pc, #156]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d210      	bcs.n	80030dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b24      	ldr	r3, [pc, #144]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4922      	ldr	r1, [pc, #136]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e032      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4916      	ldr	r1, [pc, #88]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003106:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	490e      	ldr	r1, [pc, #56]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800311a:	f000 f821 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 800311e:	4602      	mov	r2, r0
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	490a      	ldr	r1, [pc, #40]	@ (8003154 <HAL_RCC_ClockConfig+0x1c8>)
 800312c:	5ccb      	ldrb	r3, [r1, r3]
 800312e:	fa22 f303 	lsr.w	r3, r2, r3
 8003132:	4a09      	ldr	r2, [pc, #36]	@ (8003158 <HAL_RCC_ClockConfig+0x1cc>)
 8003134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003136:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_RCC_ClockConfig+0x1d0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fbb4 	bl	80008a8 <HAL_InitTick>

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40022000 	.word	0x40022000
 8003150:	40021000 	.word	0x40021000
 8003154:	08008f3c 	.word	0x08008f3c
 8003158:	20000000 	.word	0x20000000
 800315c:	20000004 	.word	0x20000004

08003160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800317a:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d002      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x30>
 800318a:	2b08      	cmp	r3, #8
 800318c:	d003      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x36>
 800318e:	e027      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003190:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003192:	613b      	str	r3, [r7, #16]
      break;
 8003194:	e027      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0c9b      	lsrs	r3, r3, #18
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ae:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0c5b      	lsrs	r3, r3, #17
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	4a11      	ldr	r2, [pc, #68]	@ (8003200 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a0d      	ldr	r2, [pc, #52]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031c2:	fb03 f202 	mul.w	r2, r3, r2
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e004      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003204 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	613b      	str	r3, [r7, #16]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031e2:	613b      	str	r3, [r7, #16]
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	693b      	ldr	r3, [r7, #16]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	007a1200 	.word	0x007a1200
 80031fc:	08008f54 	.word	0x08008f54
 8003200:	08008f64 	.word	0x08008f64
 8003204:	003d0900 	.word	0x003d0900

08003208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800320c:	4b02      	ldr	r3, [pc, #8]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x10>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	20000000 	.word	0x20000000

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003220:	f7ff fff2 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b05      	ldr	r3, [pc, #20]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4903      	ldr	r1, [pc, #12]	@ (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	08008f4c 	.word	0x08008f4c

08003244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003248:	f7ff ffde 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0adb      	lsrs	r3, r3, #11
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4903      	ldr	r1, [pc, #12]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	08008f4c 	.word	0x08008f4c

0800326c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003274:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <RCC_Delay+0x34>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <RCC_Delay+0x38>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0a5b      	lsrs	r3, r3, #9
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003288:	bf00      	nop
  }
  while (Delay --);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	60fa      	str	r2, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f9      	bne.n	8003288 <RCC_Delay+0x1c>
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	20000000 	.word	0x20000000
 80032a4:	10624dd3 	.word	0x10624dd3

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d07d      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10d      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032de:	61d3      	str	r3, [r2, #28]
 80032e0:	4b49      	ldr	r3, [pc, #292]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b46      	ldr	r3, [pc, #280]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d118      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fc:	4b43      	ldr	r3, [pc, #268]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a42      	ldr	r2, [pc, #264]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003306:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003308:	f7fd fb10 	bl	800092c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	e008      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003310:	f7fd fb0c 	bl	800092c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	@ 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e06d      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b3a      	ldr	r3, [pc, #232]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332e:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003336:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d02e      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	429a      	cmp	r2, r3
 800334a:	d027      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800334c:	4b2e      	ldr	r3, [pc, #184]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003354:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003356:	4b2e      	ldr	r3, [pc, #184]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800335c:	4b2c      	ldr	r3, [pc, #176]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003362:	4a29      	ldr	r2, [pc, #164]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d014      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fd fadb 	bl	800092c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd fad7 	bl	800092c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e036      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	4b1d      	ldr	r3, [pc, #116]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ee      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800339c:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4917      	ldr	r1, [pc, #92]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b4:	4b14      	ldr	r3, [pc, #80]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4a13      	ldr	r2, [pc, #76]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	490b      	ldr	r1, [pc, #44]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ea:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	4904      	ldr	r1, [pc, #16]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	40007000 	.word	0x40007000
 8003410:	42420440 	.word	0x42420440

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd f942 	bl	80006c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 f976 	bl	8003744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e03a      	b.n	8003542 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_TIM_Base_Start_IT+0x98>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f6:	d009      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_TIM_Base_Start_IT+0x9c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <HAL_TIM_Base_Start_IT+0xa0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d010      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	e007      	b.n	8003540 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a1a      	ldr	r2, [r3, #32]
 8003576:	f241 1311 	movw	r3, #4369	@ 0x1111
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <HAL_TIM_Base_Stop_IT+0x48>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6a1a      	ldr	r2, [r3, #32]
 8003586:	f240 4344 	movw	r3, #1092	@ 0x444
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_Base_Stop_IT+0x48>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_TIM_ConfigClockSource+0x1c>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e0b4      	b.n	800373a <HAL_TIM_ConfigClockSource+0x186>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003608:	d03e      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0xd4>
 800360a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800360e:	f200 8087 	bhi.w	8003720 <HAL_TIM_ConfigClockSource+0x16c>
 8003612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003616:	f000 8086 	beq.w	8003726 <HAL_TIM_ConfigClockSource+0x172>
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800361e:	d87f      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b70      	cmp	r3, #112	@ 0x70
 8003622:	d01a      	beq.n	800365a <HAL_TIM_ConfigClockSource+0xa6>
 8003624:	2b70      	cmp	r3, #112	@ 0x70
 8003626:	d87b      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b60      	cmp	r3, #96	@ 0x60
 800362a:	d050      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x11a>
 800362c:	2b60      	cmp	r3, #96	@ 0x60
 800362e:	d877      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x16c>
 8003630:	2b50      	cmp	r3, #80	@ 0x50
 8003632:	d03c      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0xfa>
 8003634:	2b50      	cmp	r3, #80	@ 0x50
 8003636:	d873      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b40      	cmp	r3, #64	@ 0x40
 800363a:	d058      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x13a>
 800363c:	2b40      	cmp	r3, #64	@ 0x40
 800363e:	d86f      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x16c>
 8003640:	2b30      	cmp	r3, #48	@ 0x30
 8003642:	d064      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x15a>
 8003644:	2b30      	cmp	r3, #48	@ 0x30
 8003646:	d86b      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x16c>
 8003648:	2b20      	cmp	r3, #32
 800364a:	d060      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x15a>
 800364c:	2b20      	cmp	r3, #32
 800364e:	d867      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x16c>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d05c      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x15a>
 8003654:	2b10      	cmp	r3, #16
 8003656:	d05a      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x15a>
 8003658:	e062      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800366a:	f000 f950 	bl	800390e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800367c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	609a      	str	r2, [r3, #8]
      break;
 8003686:	e04f      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003698:	f000 f939 	bl	800390e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036aa:	609a      	str	r2, [r3, #8]
      break;
 80036ac:	e03c      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ba:	461a      	mov	r2, r3
 80036bc:	f000 f8b0 	bl	8003820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2150      	movs	r1, #80	@ 0x50
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f907 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 80036cc:	e02c      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036da:	461a      	mov	r2, r3
 80036dc:	f000 f8ce 	bl	800387c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2160      	movs	r1, #96	@ 0x60
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f8f7 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 80036ec:	e01c      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fa:	461a      	mov	r2, r3
 80036fc:	f000 f890 	bl	8003820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2140      	movs	r1, #64	@ 0x40
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f8e7 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 800370c:	e00c      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f000 f8de 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 800371e:	e003      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e000      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a2f      	ldr	r2, [pc, #188]	@ (8003814 <TIM_Base_SetConfig+0xd0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003762:	d007      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a2c      	ldr	r2, [pc, #176]	@ (8003818 <TIM_Base_SetConfig+0xd4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2b      	ldr	r2, [pc, #172]	@ (800381c <TIM_Base_SetConfig+0xd8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a22      	ldr	r2, [pc, #136]	@ (8003814 <TIM_Base_SetConfig+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1f      	ldr	r2, [pc, #124]	@ (8003818 <TIM_Base_SetConfig+0xd4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <TIM_Base_SetConfig+0xd8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0d      	ldr	r2, [pc, #52]	@ (8003814 <TIM_Base_SetConfig+0xd0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f023 0201 	bic.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]
  }
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800

08003820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800384a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 030a 	bic.w	r3, r3, #10
 800385c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0210 	bic.w	r2, r3, #16
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	031b      	lsls	r3, r3, #12
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	621a      	str	r2, [r3, #32]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038da:	b480      	push	{r7}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f043 0307 	orr.w	r3, r3, #7
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	609a      	str	r2, [r3, #8]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr

0800390e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800390e:	b480      	push	{r7}
 8003910:	b087      	sub	sp, #28
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003928:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	021a      	lsls	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	431a      	orrs	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	609a      	str	r2, [r3, #8]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003960:	2302      	movs	r3, #2
 8003962:	e046      	b.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a16      	ldr	r2, [pc, #88]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b0:	d009      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a12      	ldr	r2, [pc, #72]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a10      	ldr	r2, [pc, #64]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10c      	bne.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800

08003a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e042      	b.n	8003aa0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fc fe64 	bl	80006fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	@ 0x24
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fdb7 	bl	80045c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	@ 0x28
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d175      	bne.n	8003bb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_UART_Transmit+0x2c>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e06e      	b.n	8003bb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2221      	movs	r2, #33	@ 0x21
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ae6:	f7fc ff21 	bl	800092c <HAL_GetTick>
 8003aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	88fa      	ldrh	r2, [r7, #6]
 8003af6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b00:	d108      	bne.n	8003b14 <HAL_UART_Transmit+0x6c>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e003      	b.n	8003b1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b1c:	e02e      	b.n	8003b7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2180      	movs	r1, #128	@ 0x80
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fb1c 	bl	8004166 <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e03a      	b.n	8003bb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	3302      	adds	r3, #2
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	e007      	b.n	8003b6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1cb      	bne.n	8003b1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2140      	movs	r1, #64	@ 0x40
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fae8 	bl	8004166 <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e006      	b.n	8003bb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d112      	bne.n	8003bfe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_UART_Receive_IT+0x26>
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e00b      	b.n	8003c00 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fb0f 	bl	8004218 <UART_Start_Receive_IT>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	e000      	b.n	8003c00 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b0ba      	sub	sp, #232	@ 0xe8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_UART_IRQHandler+0x66>
 8003c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fbec 	bl	8004444 <UART_Receive_IT>
      return;
 8003c6c:	e25b      	b.n	8004126 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80de 	beq.w	8003e34 <HAL_UART_IRQHandler+0x22c>
 8003c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80d1 	beq.w	8003e34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_UART_IRQHandler+0xae>
 8003c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_UART_IRQHandler+0xd2>
 8003cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd2:	f043 0202 	orr.w	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_UART_IRQHandler+0xf6>
 8003ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d011      	beq.n	8003d2e <HAL_UART_IRQHandler+0x126>
 8003d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	f043 0208 	orr.w	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 81f2 	beq.w	800411c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_UART_IRQHandler+0x14e>
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fb77 	bl	8004444 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <HAL_UART_IRQHandler+0x17a>
 8003d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04f      	beq.n	8003e22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa81 	bl	800428a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d041      	beq.n	8003e1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1d9      	bne.n	8003d96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d013      	beq.n	8003e12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dee:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe8 <HAL_UART_IRQHandler+0x3e0>)
 8003df0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc feea 	bl	8000bd0 <HAL_DMA_Abort_IT>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	e00e      	b.n	8003e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f993 	bl	800413e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e00a      	b.n	8003e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f98f 	bl	800413e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e006      	b.n	8003e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f98b 	bl	800413e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e2e:	e175      	b.n	800411c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	bf00      	nop
    return;
 8003e32:	e173      	b.n	800411c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	f040 814f 	bne.w	80040dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8148 	beq.w	80040dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8141 	beq.w	80040dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80b6 	beq.w	8003fec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8145 	beq.w	8004120 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	f080 813e 	bcs.w	8004120 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	f000 8088 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ed2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ee4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ee8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ef0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1d9      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3314      	adds	r3, #20
 8003f24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f28:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e1      	bne.n	8003f04 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f64:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e3      	bne.n	8003f40 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f98:	f023 0310 	bic.w	r3, r3, #16
 8003f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003faa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e3      	bne.n	8003f86 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fdc9 	bl	8000b5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8b6 	bl	8004150 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fe4:	e09c      	b.n	8004120 <HAL_UART_IRQHandler+0x518>
 8003fe6:	bf00      	nop
 8003fe8:	0800434f 	.word	0x0800434f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 808e 	beq.w	8004124 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8089 	beq.w	8004124 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004036:	647a      	str	r2, [r7, #68]	@ 0x44
 8004038:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800403c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e3      	bne.n	8004012 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3314      	adds	r3, #20
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	623b      	str	r3, [r7, #32]
   return(result);
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3314      	adds	r3, #20
 800406a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800406e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e3      	bne.n	800404a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0310 	bic.w	r3, r3, #16
 80040a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040b4:	61fa      	str	r2, [r7, #28]
 80040b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	69b9      	ldr	r1, [r7, #24]
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	617b      	str	r3, [r7, #20]
   return(result);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e3      	bne.n	8004090 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f83b 	bl	8004150 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040da:	e023      	b.n	8004124 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_UART_IRQHandler+0x4f4>
 80040e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f93e 	bl	8004376 <UART_Transmit_IT>
    return;
 80040fa:	e014      	b.n	8004126 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <HAL_UART_IRQHandler+0x51e>
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800410c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f97d 	bl	8004414 <UART_EndTransmit_IT>
    return;
 800411a:	e004      	b.n	8004126 <HAL_UART_IRQHandler+0x51e>
    return;
 800411c:	bf00      	nop
 800411e:	e002      	b.n	8004126 <HAL_UART_IRQHandler+0x51e>
      return;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <HAL_UART_IRQHandler+0x51e>
      return;
 8004124:	bf00      	nop
  }
}
 8004126:	37e8      	adds	r7, #232	@ 0xe8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	4613      	mov	r3, r2
 8004174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004176:	e03b      	b.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d037      	beq.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004180:	f7fc fbd4 	bl	800092c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	6a3a      	ldr	r2, [r7, #32]
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <UART_WaitOnFlagUntilTimeout+0x30>
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e03a      	b.n	8004210 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d023      	beq.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b80      	cmp	r3, #128	@ 0x80
 80041ac:	d020      	beq.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d01d      	beq.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d116      	bne.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f856 	bl	800428a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2208      	movs	r2, #8
 80041e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e00f      	b.n	8004210 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	429a      	cmp	r2, r3
 800420c:	d0b4      	beq.n	8004178 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2222      	movs	r2, #34	@ 0x22
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800425c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0220 	orr.w	r2, r2, #32
 800427c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428a:	b480      	push	{r7}
 800428c:	b095      	sub	sp, #84	@ 0x54
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80042b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d119      	bne.n	8004336 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	60bb      	str	r3, [r7, #8]
   return(result);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0310 	bic.w	r3, r3, #16
 8004318:	647b      	str	r3, [r7, #68]	@ 0x44
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004322:	61ba      	str	r2, [r7, #24]
 8004324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	613b      	str	r3, [r7, #16]
   return(result);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e5      	bne.n	8004302 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004344:	bf00      	nop
 8004346:	3754      	adds	r7, #84	@ 0x54
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff fee8 	bl	800413e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b21      	cmp	r3, #33	@ 0x21
 8004388:	d13e      	bne.n	8004408 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004392:	d114      	bne.n	80043be <UART_Transmit_IT+0x48>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d110      	bne.n	80043be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	1c9a      	adds	r2, r3, #2
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	621a      	str	r2, [r3, #32]
 80043bc:	e008      	b.n	80043d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	1c59      	adds	r1, r3, #1
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6211      	str	r1, [r2, #32]
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29b      	uxth	r3, r3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	4619      	mov	r1, r3
 80043de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10f      	bne.n	8004404 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004402:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe79 	bl	800412c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	@ 0x30
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b22      	cmp	r3, #34	@ 0x22
 8004456:	f040 80ae 	bne.w	80045b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004462:	d117      	bne.n	8004494 <UART_Receive_IT+0x50>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d113      	bne.n	8004494 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	b29a      	uxth	r2, r3
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	1c9a      	adds	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	629a      	str	r2, [r3, #40]	@ 0x28
 8004492:	e026      	b.n	80044e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a6:	d007      	beq.n	80044b8 <UART_Receive_IT+0x74>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <UART_Receive_IT+0x82>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e008      	b.n	80044d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4619      	mov	r1, r3
 80044f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d15d      	bne.n	80045b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0220 	bic.w	r2, r2, #32
 8004504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004514:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d135      	bne.n	80045a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	613b      	str	r3, [r7, #16]
   return(result);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004562:	623a      	str	r2, [r7, #32]
 8004564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d10a      	bne.n	800459a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff fdd5 	bl	8004150 <HAL_UARTEx_RxEventCallback>
 80045a6:	e002      	b.n	80045ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fb ff0f 	bl	80003cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e002      	b.n	80045b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3730      	adds	r7, #48	@ 0x30
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045fa:	f023 030c 	bic.w	r3, r3, #12
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	430b      	orrs	r3, r1
 8004606:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2c      	ldr	r2, [pc, #176]	@ (80046d4 <UART_SetConfig+0x114>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7fe fe0c 	bl	8003244 <HAL_RCC_GetPCLK2Freq>
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	e002      	b.n	8004636 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fe fdf4 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8004634:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	4a22      	ldr	r2, [pc, #136]	@ (80046d8 <UART_SetConfig+0x118>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	0119      	lsls	r1, r3, #4
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009a      	lsls	r2, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	fbb2 f2f3 	udiv	r2, r2, r3
 800466c:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <UART_SetConfig+0x118>)
 800466e:	fba3 0302 	umull	r0, r3, r3, r2
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2064      	movs	r0, #100	@ 0x64
 8004676:	fb00 f303 	mul.w	r3, r0, r3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	3332      	adds	r3, #50	@ 0x32
 8004680:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <UART_SetConfig+0x118>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800468c:	4419      	add	r1, r3
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009a      	lsls	r2, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a4:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <UART_SetConfig+0x118>)
 80046a6:	fba3 0302 	umull	r0, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2064      	movs	r0, #100	@ 0x64
 80046ae:	fb00 f303 	mul.w	r3, r0, r3
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	3332      	adds	r3, #50	@ 0x32
 80046b8:	4a07      	ldr	r2, [pc, #28]	@ (80046d8 <UART_SetConfig+0x118>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	440a      	add	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40013800 	.word	0x40013800
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	4638      	mov	r0, r7
 80046e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004706:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800470a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800472a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800472e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	b29b      	uxth	r3, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	b29b      	uxth	r3, r3
 8004740:	4013      	ands	r3, r2
 8004742:	b29a      	uxth	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	4638      	mov	r0, r7
 8004778:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b09d      	sub	sp, #116	@ 0x74
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80047ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	78db      	ldrb	r3, [r3, #3]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d81f      	bhi.n	800481a <USB_ActivateEndpoint+0x72>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <USB_ActivateEndpoint+0x38>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004823 	.word	0x08004823
 80047ec:	080047ff 	.word	0x080047ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047fc:	e012      	b.n	8004824 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004802:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004806:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800480a:	e00b      	b.n	8004824 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800480c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004814:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004818:	e004      	b.n	8004824 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004820:	e000      	b.n	8004824 <USB_ActivateEndpoint+0x7c>
      break;
 8004822:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800483a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800483e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004842:	b29b      	uxth	r3, r3
 8004844:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485c:	b29b      	uxth	r3, r3
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	4313      	orrs	r3, r2
 8004864:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800487a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800487e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004886:	b29b      	uxth	r3, r3
 8004888:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	7b1b      	ldrb	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 8178 	bne.w	8004b84 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8084 	beq.w	80049a6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4413      	add	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	011a      	lsls	r2, r3, #4
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	88db      	ldrh	r3, [r3, #6]
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	827b      	strh	r3, [r7, #18]
 80048e0:	8a7b      	ldrh	r3, [r7, #18]
 80048e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01b      	beq.n	8004922 <USB_ActivateEndpoint+0x17a>
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004900:	823b      	strh	r3, [r7, #16]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	8a3b      	ldrh	r3, [r7, #16]
 800490e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800491a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800491e:	b29b      	uxth	r3, r3
 8004920:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	78db      	ldrb	r3, [r3, #3]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d020      	beq.n	800496c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004940:	81bb      	strh	r3, [r7, #12]
 8004942:	89bb      	ldrh	r3, [r7, #12]
 8004944:	f083 0320 	eor.w	r3, r3, #32
 8004948:	81bb      	strh	r3, [r7, #12]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	89bb      	ldrh	r3, [r7, #12]
 8004956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800495a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800495e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004966:	b29b      	uxth	r3, r3
 8004968:	8013      	strh	r3, [r2, #0]
 800496a:	e2d5      	b.n	8004f18 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800497e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004982:	81fb      	strh	r3, [r7, #14]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	89fb      	ldrh	r3, [r7, #14]
 8004990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	8013      	strh	r3, [r2, #0]
 80049a4:	e2b8      	b.n	8004f18 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	4413      	add	r3, r2
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	011a      	lsls	r2, r3, #4
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	88db      	ldrh	r3, [r3, #6]
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	4413      	add	r3, r2
 80049ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	011a      	lsls	r2, r3, #4
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	4413      	add	r3, r2
 80049f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a14:	d91d      	bls.n	8004a52 <USB_ActivateEndpoint+0x2aa>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <USB_ActivateEndpoint+0x288>
 8004a2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	029b      	lsls	r3, r3, #10
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	e026      	b.n	8004aa0 <USB_ActivateEndpoint+0x2f8>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <USB_ActivateEndpoint+0x2c8>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	801a      	strh	r2, [r3, #0]
 8004a6e:	e017      	b.n	8004aa0 <USB_ActivateEndpoint+0x2f8>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <USB_ActivateEndpoint+0x2e2>
 8004a84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a86:	3301      	adds	r3, #1
 8004a88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	029b      	lsls	r3, r3, #10
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004aae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <USB_ActivateEndpoint+0x348>
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ace:	843b      	strh	r3, [r7, #32]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	8c3b      	ldrh	r3, [r7, #32]
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d124      	bne.n	8004b42 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0e:	83bb      	strh	r3, [r7, #28]
 8004b10:	8bbb      	ldrh	r3, [r7, #28]
 8004b12:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b16:	83bb      	strh	r3, [r7, #28]
 8004b18:	8bbb      	ldrh	r3, [r7, #28]
 8004b1a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b1e:	83bb      	strh	r3, [r7, #28]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	8bbb      	ldrh	r3, [r7, #28]
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
 8004b40:	e1ea      	b.n	8004f18 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b58:	83fb      	strh	r3, [r7, #30]
 8004b5a:	8bfb      	ldrh	r3, [r7, #30]
 8004b5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b60:	83fb      	strh	r3, [r7, #30]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	8bfb      	ldrh	r3, [r7, #30]
 8004b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8013      	strh	r3, [r2, #0]
 8004b82:	e1c9      	b.n	8004f18 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	78db      	ldrb	r3, [r3, #3]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d11e      	bne.n	8004bca <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bbc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]
 8004bc8:	e01d      	b.n	8004c06 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c16:	4413      	add	r3, r2
 8004c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	011a      	lsls	r2, r3, #4
 8004c20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	891b      	ldrh	r3, [r3, #8]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4a:	4413      	add	r3, r2
 8004c4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	011a      	lsls	r2, r3, #4
 8004c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004c5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	895b      	ldrh	r3, [r3, #10]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c6c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 8093 	bne.w	8004d9e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004c88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01b      	beq.n	8004ccc <USB_ActivateEndpoint+0x524>
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004caa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	441a      	add	r2, r3
 8004cb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004cda:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01b      	beq.n	8004d1c <USB_ActivateEndpoint+0x574>
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d32:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004d34:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d3a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004d3c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d42:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	8013      	strh	r3, [r2, #0]
 8004d9c:	e0bc      	b.n	8004f18 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004dae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01d      	beq.n	8004df6 <USB_ActivateEndpoint+0x64e>
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004e06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01d      	beq.n	8004e4e <USB_ActivateEndpoint+0x6a6>
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e28:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	78db      	ldrb	r3, [r3, #3]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d024      	beq.n	8004ea0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e6c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e74:	f083 0320 	eor.w	r3, r3, #32
 8004e78:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]
 8004e9e:	e01d      	b.n	8004edc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ed0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	441a      	add	r2, r3
 8004f00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004f04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004f18:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3774      	adds	r7, #116	@ 0x74
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b08d      	sub	sp, #52	@ 0x34
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	7b1b      	ldrb	r3, [r3, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f040 808e 	bne.w	8005058 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d044      	beq.n	8004fce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	81bb      	strh	r3, [r7, #12]
 8004f52:	89bb      	ldrh	r3, [r7, #12]
 8004f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01b      	beq.n	8004f94 <USB_DeactivateEndpoint+0x6c>
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f72:	817b      	strh	r3, [r7, #10]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	897b      	ldrh	r3, [r7, #10]
 8004f80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004faa:	813b      	strh	r3, [r7, #8]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	893b      	ldrh	r3, [r7, #8]
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
 8004fcc:	e192      	b.n	80052f4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	827b      	strh	r3, [r7, #18]
 8004fdc:	8a7b      	ldrh	r3, [r7, #18]
 8004fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01b      	beq.n	800501e <USB_DeactivateEndpoint+0xf6>
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffc:	823b      	strh	r3, [r7, #16]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	441a      	add	r2, r3
 8005008:	8a3b      	ldrh	r3, [r7, #16]
 800500a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800500e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005012:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501a:	b29b      	uxth	r3, r3
 800501c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005034:	81fb      	strh	r3, [r7, #14]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	441a      	add	r2, r3
 8005040:	89fb      	ldrh	r3, [r7, #14]
 8005042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800504a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800504e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005052:	b29b      	uxth	r3, r3
 8005054:	8013      	strh	r3, [r2, #0]
 8005056:	e14d      	b.n	80052f4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f040 80a5 	bne.w	80051ac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	843b      	strh	r3, [r7, #32]
 8005070:	8c3b      	ldrh	r3, [r7, #32]
 8005072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01b      	beq.n	80050b2 <USB_DeactivateEndpoint+0x18a>
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800508c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005090:	83fb      	strh	r3, [r7, #30]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	441a      	add	r2, r3
 800509c:	8bfb      	ldrh	r3, [r7, #30]
 800509e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	83bb      	strh	r3, [r7, #28]
 80050c0:	8bbb      	ldrh	r3, [r7, #28]
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01b      	beq.n	8005102 <USB_DeactivateEndpoint+0x1da>
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e0:	837b      	strh	r3, [r7, #26]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	8b7b      	ldrh	r3, [r7, #26]
 80050ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050fe:	b29b      	uxth	r3, r3
 8005100:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005118:	833b      	strh	r3, [r7, #24]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	8b3b      	ldrh	r3, [r7, #24]
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800512e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005132:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800514c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005150:	82fb      	strh	r3, [r7, #22]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	8afb      	ldrh	r3, [r7, #22]
 800515e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800516a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800516e:	b29b      	uxth	r3, r3
 8005170:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005188:	82bb      	strh	r3, [r7, #20]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	441a      	add	r2, r3
 8005194:	8abb      	ldrh	r3, [r7, #20]
 8005196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800519a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800519e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8013      	strh	r3, [r2, #0]
 80051aa:	e0a3      	b.n	80052f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80051ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80051bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <USB_DeactivateEndpoint+0x2d4>
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051da:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80051e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800520a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800520c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <USB_DeactivateEndpoint+0x324>
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005244:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800525e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005262:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005278:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800527c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800529a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3734      	adds	r7, #52	@ 0x34
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b0c2      	sub	sp, #264	@ 0x108
 8005304:	af00      	add	r7, sp, #0
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800530e:	6018      	str	r0, [r3, #0]
 8005310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005318:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800531a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	2b01      	cmp	r3, #1
 8005328:	f040 86b7 	bne.w	800609a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800532c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800533c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d908      	bls.n	800535a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005358:	e007      	b.n	800536a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800535a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800536a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	7b1b      	ldrb	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d13a      	bne.n	80053f0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800537a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6959      	ldr	r1, [r3, #20]
 8005386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	88da      	ldrh	r2, [r3, #6]
 8005392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005396:	b29b      	uxth	r3, r3
 8005398:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800539c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053a0:	6800      	ldr	r0, [r0, #0]
 80053a2:	f001 fc9c 	bl	8006cde <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4413      	add	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	011a      	lsls	r2, r3, #4
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4413      	add	r3, r2
 80053dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	f000 be1f 	b.w	800602e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80053f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	78db      	ldrb	r3, [r3, #3]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	f040 8462 	bne.w	8005cc6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	f240 83df 	bls.w	8005bde <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800544a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	441a      	add	r2, r3
 8005464:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800546c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005470:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800547c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800548c:	1ad2      	subs	r2, r2, r3
 800548e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800549a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 81c7 	beq.w	8005850 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d177      	bne.n	80055ce <USB_EPStartXfer+0x2ce>
 80054de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	4413      	add	r3, r2
 8005500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	011a      	lsls	r2, r3, #4
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	4413      	add	r3, r2
 8005514:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005524:	b29a      	uxth	r2, r3
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005530:	d921      	bls.n	8005576 <USB_EPStartXfer+0x276>
 8005532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800553c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005540:	f003 031f 	and.w	r3, r3, #31
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <USB_EPStartXfer+0x252>
 8005548:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800554c:	3b01      	subs	r3, #1
 800554e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29a      	uxth	r2, r3
 8005558:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800555c:	b29b      	uxth	r3, r3
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	b29b      	uxth	r3, r3
 8005562:	4313      	orrs	r3, r2
 8005564:	b29b      	uxth	r3, r3
 8005566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556e:	b29a      	uxth	r2, r3
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	e050      	b.n	8005618 <USB_EPStartXfer+0x318>
 8005576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <USB_EPStartXfer+0x294>
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558c:	b29a      	uxth	r2, r3
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e041      	b.n	8005618 <USB_EPStartXfer+0x318>
 8005594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <USB_EPStartXfer+0x2b4>
 80055aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80055ae:	3301      	adds	r3, #1
 80055b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80055be:	b29b      	uxth	r3, r3
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e024      	b.n	8005618 <USB_EPStartXfer+0x318>
 80055ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d11c      	bne.n	8005618 <USB_EPStartXfer+0x318>
 80055de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	4413      	add	r3, r2
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	011a      	lsls	r2, r3, #4
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	4413      	add	r3, r2
 8005608:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800560c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005612:	b29a      	uxth	r2, r3
 8005614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005616:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	895b      	ldrh	r3, [r3, #10]
 8005624:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6959      	ldr	r1, [r3, #20]
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005638:	b29b      	uxth	r3, r3
 800563a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800563e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005642:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005646:	6800      	ldr	r0, [r0, #0]
 8005648:	f001 fb49 	bl	8006cde <USB_WritePMA>
            ep->xfer_buff += len;
 800564c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565c:	441a      	add	r2, r3
 800565e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800566a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a1a      	ldr	r2, [r3, #32]
 8005676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	429a      	cmp	r2, r3
 8005684:	d90f      	bls.n	80056a6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6a1a      	ldr	r2, [r3, #32]
 8005692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005696:	1ad2      	subs	r2, r2, r3
 8005698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800569c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	621a      	str	r2, [r3, #32]
 80056a4:	e00e      	b.n	80056c4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80056a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80056b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2200      	movs	r2, #0
 80056c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d177      	bne.n	80057c4 <USB_EPStartXfer+0x4c4>
 80056d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	4413      	add	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	011a      	lsls	r2, r3, #4
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	4413      	add	r3, r2
 800570a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800571a:	b29a      	uxth	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005724:	2b3e      	cmp	r3, #62	@ 0x3e
 8005726:	d921      	bls.n	800576c <USB_EPStartXfer+0x46c>
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005736:	f003 031f 	and.w	r3, r3, #31
 800573a:	2b00      	cmp	r3, #0
 800573c:	d104      	bne.n	8005748 <USB_EPStartXfer+0x448>
 800573e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005742:	3b01      	subs	r3, #1
 8005744:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29a      	uxth	r2, r3
 800574e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005752:	b29b      	uxth	r3, r3
 8005754:	029b      	lsls	r3, r3, #10
 8005756:	b29b      	uxth	r3, r3
 8005758:	4313      	orrs	r3, r2
 800575a:	b29b      	uxth	r3, r3
 800575c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005764:	b29a      	uxth	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	801a      	strh	r2, [r3, #0]
 800576a:	e056      	b.n	800581a <USB_EPStartXfer+0x51a>
 800576c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <USB_EPStartXfer+0x48a>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005782:	b29a      	uxth	r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e047      	b.n	800581a <USB_EPStartXfer+0x51a>
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <USB_EPStartXfer+0x4aa>
 80057a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a4:	3301      	adds	r3, #1
 80057a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	4313      	orrs	r3, r2
 80057bc:	b29a      	uxth	r2, r3
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	e02a      	b.n	800581a <USB_EPStartXfer+0x51a>
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d122      	bne.n	800581a <USB_EPStartXfer+0x51a>
 80057d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	4413      	add	r3, r2
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	011a      	lsls	r2, r3, #4
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	4413      	add	r3, r2
 800580a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	b29a      	uxth	r2, r3
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800581a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	891b      	ldrh	r3, [r3, #8]
 8005826:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800582a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6959      	ldr	r1, [r3, #20]
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583a:	b29b      	uxth	r3, r3
 800583c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005840:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005844:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005848:	6800      	ldr	r0, [r0, #0]
 800584a:	f001 fa48 	bl	8006cde <USB_WritePMA>
 800584e:	e3ee      	b.n	800602e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d177      	bne.n	8005950 <USB_EPStartXfer+0x650>
 8005860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800586c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005880:	4413      	add	r3, r2
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	011a      	lsls	r2, r3, #4
 8005892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005894:	4413      	add	r3, r2
 8005896:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800589a:	647b      	str	r3, [r7, #68]	@ 0x44
 800589c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80058b2:	d921      	bls.n	80058f8 <USB_EPStartXfer+0x5f8>
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <USB_EPStartXfer+0x5d4>
 80058ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ce:	3b01      	subs	r3, #1
 80058d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29a      	uxth	r2, r3
 80058da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058de:	b29b      	uxth	r3, r3
 80058e0:	029b      	lsls	r3, r3, #10
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	4313      	orrs	r3, r2
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e056      	b.n	80059a6 <USB_EPStartXfer+0x6a6>
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10a      	bne.n	8005916 <USB_EPStartXfer+0x616>
 8005900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29a      	uxth	r2, r3
 8005910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e047      	b.n	80059a6 <USB_EPStartXfer+0x6a6>
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <USB_EPStartXfer+0x636>
 800592c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005930:	3301      	adds	r3, #1
 8005932:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29a      	uxth	r2, r3
 800593c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005940:	b29b      	uxth	r3, r3
 8005942:	029b      	lsls	r3, r3, #10
 8005944:	b29b      	uxth	r3, r3
 8005946:	4313      	orrs	r3, r2
 8005948:	b29a      	uxth	r2, r3
 800594a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	e02a      	b.n	80059a6 <USB_EPStartXfer+0x6a6>
 8005950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d122      	bne.n	80059a6 <USB_EPStartXfer+0x6a6>
 8005960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	653b      	str	r3, [r7, #80]	@ 0x50
 800596c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005980:	4413      	add	r3, r2
 8005982:	653b      	str	r3, [r7, #80]	@ 0x50
 8005984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	011a      	lsls	r2, r3, #4
 8005992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005994:	4413      	add	r3, r2
 8005996:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800599a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	891b      	ldrh	r3, [r3, #8]
 80059b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6959      	ldr	r1, [r3, #20]
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059d4:	6800      	ldr	r0, [r0, #0]
 80059d6:	f001 f982 	bl	8006cde <USB_WritePMA>
            ep->xfer_buff += len;
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ea:	441a      	add	r2, r3
 80059ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d90f      	bls.n	8005a34 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a24:	1ad2      	subs	r2, r2, r3
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	621a      	str	r2, [r3, #32]
 8005a32:	e00e      	b.n	8005a52 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d177      	bne.n	8005b5e <USB_EPStartXfer+0x85e>
 8005a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	4413      	add	r3, r2
 8005a90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	011a      	lsls	r2, r3, #4
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005abe:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ac0:	d921      	bls.n	8005b06 <USB_EPStartXfer+0x806>
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <USB_EPStartXfer+0x7e2>
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	3b01      	subs	r3, #1
 8005ade:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e050      	b.n	8005ba8 <USB_EPStartXfer+0x8a8>
 8005b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <USB_EPStartXfer+0x824>
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e041      	b.n	8005ba8 <USB_EPStartXfer+0x8a8>
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <USB_EPStartXfer+0x844>
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	e024      	b.n	8005ba8 <USB_EPStartXfer+0x8a8>
 8005b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d11c      	bne.n	8005ba8 <USB_EPStartXfer+0x8a8>
 8005b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b82:	4413      	add	r3, r2
 8005b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	895b      	ldrh	r3, [r3, #10]
 8005bb4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6959      	ldr	r1, [r3, #20]
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bd2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bd6:	6800      	ldr	r0, [r0, #0]
 8005bd8:	f001 f881 	bl	8006cde <USB_WritePMA>
 8005bdc:	e227      	b.n	800602e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c14:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c6a:	4413      	add	r3, r2
 8005c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	011a      	lsls	r2, r3, #4
 8005c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	891b      	ldrh	r3, [r3, #8]
 8005c9c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6959      	ldr	r1, [r3, #20]
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005cb6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005cba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005cbe:	6800      	ldr	r0, [r0, #0]
 8005cc0:	f001 f80d 	bl	8006cde <USB_WritePMA>
 8005cc4:	e1b3      	b.n	800602e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd6:	1ad2      	subs	r2, r2, r3
 8005cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80c6 	beq.w	8005e98 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d177      	bne.n	8005e18 <USB_EPStartXfer+0xb18>
 8005d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d48:	4413      	add	r3, r2
 8005d4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	011a      	lsls	r2, r3, #4
 8005d5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d62:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d78:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d7a:	d921      	bls.n	8005dc0 <USB_EPStartXfer+0xac0>
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <USB_EPStartXfer+0xa9c>
 8005d92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d96:	3b01      	subs	r3, #1
 8005d98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4313      	orrs	r3, r2
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e050      	b.n	8005e62 <USB_EPStartXfer+0xb62>
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <USB_EPStartXfer+0xade>
 8005dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	e041      	b.n	8005e62 <USB_EPStartXfer+0xb62>
 8005dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <USB_EPStartXfer+0xafe>
 8005df4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005df8:	3301      	adds	r3, #1
 8005dfa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e024      	b.n	8005e62 <USB_EPStartXfer+0xb62>
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d11c      	bne.n	8005e62 <USB_EPStartXfer+0xb62>
 8005e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e3c:	4413      	add	r3, r2
 8005e3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e50:	4413      	add	r3, r2
 8005e52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	895b      	ldrh	r3, [r3, #10]
 8005e6e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6959      	ldr	r1, [r3, #20]
 8005e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e88:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e8c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e90:	6800      	ldr	r0, [r0, #0]
 8005e92:	f000 ff24 	bl	8006cde <USB_WritePMA>
 8005e96:	e0ca      	b.n	800602e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d177      	bne.n	8005f98 <USB_EPStartXfer+0xc98>
 8005ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ec8:	4413      	add	r3, r2
 8005eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	011a      	lsls	r2, r3, #4
 8005eda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005efa:	d921      	bls.n	8005f40 <USB_EPStartXfer+0xc40>
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <USB_EPStartXfer+0xc1c>
 8005f12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f16:	3b01      	subs	r3, #1
 8005f18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	029b      	lsls	r3, r3, #10
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e05c      	b.n	8005ffa <USB_EPStartXfer+0xcfa>
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <USB_EPStartXfer+0xc5e>
 8005f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e04d      	b.n	8005ffa <USB_EPStartXfer+0xcfa>
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <USB_EPStartXfer+0xc7e>
 8005f74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f78:	3301      	adds	r3, #1
 8005f7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	029b      	lsls	r3, r3, #10
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e030      	b.n	8005ffa <USB_EPStartXfer+0xcfa>
 8005f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d128      	bne.n	8005ffa <USB_EPStartXfer+0xcfa>
 8005fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fcc:	4413      	add	r3, r2
 8005fce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	011a      	lsls	r2, r3, #4
 8005fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ff8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	891b      	ldrh	r3, [r3, #8]
 8006006:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800600a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6959      	ldr	r1, [r3, #20]
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601a:	b29b      	uxth	r3, r3
 800601c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006020:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006024:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006028:	6800      	ldr	r0, [r0, #0]
 800602a:	f000 fe58 	bl	8006cde <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800602e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006054:	817b      	strh	r3, [r7, #10]
 8006056:	897b      	ldrh	r3, [r7, #10]
 8006058:	f083 0310 	eor.w	r3, r3, #16
 800605c:	817b      	strh	r3, [r7, #10]
 800605e:	897b      	ldrh	r3, [r7, #10]
 8006060:	f083 0320 	eor.w	r3, r3, #32
 8006064:	817b      	strh	r3, [r7, #10]
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	897b      	ldrh	r3, [r7, #10]
 8006082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006092:	b29b      	uxth	r3, r3
 8006094:	8013      	strh	r3, [r2, #0]
 8006096:	f000 bcde 	b.w	8006a56 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800609a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	7b1b      	ldrb	r3, [r3, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 80bb 	bne.w	8006222 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d917      	bls.n	80060f8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80060c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80060d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e8:	1ad2      	subs	r2, r2, r3
 80060ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	619a      	str	r2, [r3, #24]
 80060f6:	e00e      	b.n	8006116 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80060f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006132:	b29b      	uxth	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800613a:	4413      	add	r3, r2
 800613c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	011a      	lsls	r2, r3, #4
 800614e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006152:	4413      	add	r3, r2
 8006154:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006158:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800615c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006168:	b29a      	uxth	r2, r3
 800616a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006174:	2b3e      	cmp	r3, #62	@ 0x3e
 8006176:	d924      	bls.n	80061c2 <USB_EPStartXfer+0xec2>
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <USB_EPStartXfer+0xe98>
 800618e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006192:	3b01      	subs	r3, #1
 8006194:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29a      	uxth	r2, r3
 80061a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	029b      	lsls	r3, r3, #10
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	4313      	orrs	r3, r2
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	f000 bc10 	b.w	80069e2 <USB_EPStartXfer+0x16e2>
 80061c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10c      	bne.n	80061e4 <USB_EPStartXfer+0xee4>
 80061ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e3fe      	b.n	80069e2 <USB_EPStartXfer+0x16e2>
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d004      	beq.n	8006204 <USB_EPStartXfer+0xf04>
 80061fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80061fe:	3301      	adds	r3, #1
 8006200:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29a      	uxth	r2, r3
 800620c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006210:	b29b      	uxth	r3, r3
 8006212:	029b      	lsls	r3, r3, #10
 8006214:	b29b      	uxth	r3, r3
 8006216:	4313      	orrs	r3, r2
 8006218:	b29a      	uxth	r2, r3
 800621a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800621e:	801a      	strh	r2, [r3, #0]
 8006220:	e3df      	b.n	80069e2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	78db      	ldrb	r3, [r3, #3]
 800622e:	2b02      	cmp	r3, #2
 8006230:	f040 8218 	bne.w	8006664 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	785b      	ldrb	r3, [r3, #1]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f040 809d 	bne.w	8006380 <USB_EPStartXfer+0x1080>
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006262:	b29b      	uxth	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800626a:	4413      	add	r3, r2
 800626c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	011a      	lsls	r2, r3, #4
 800627e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006282:	4413      	add	r3, r2
 8006284:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800628c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006298:	b29a      	uxth	r2, r3
 800629a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80062ae:	d92b      	bls.n	8006308 <USB_EPStartXfer+0x1008>
 80062b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <USB_EPStartXfer+0xfe0>
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	3b01      	subs	r3, #1
 80062dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fe:	b29a      	uxth	r2, r3
 8006300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e070      	b.n	80063ea <USB_EPStartXfer+0x10ea>
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10c      	bne.n	8006332 <USB_EPStartXfer+0x1032>
 8006318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006328:	b29a      	uxth	r2, r3
 800632a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	e05b      	b.n	80063ea <USB_EPStartXfer+0x10ea>
 8006332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <USB_EPStartXfer+0x1062>
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635c:	3301      	adds	r3, #1
 800635e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636e:	b29b      	uxth	r3, r3
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	b29b      	uxth	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e034      	b.n	80063ea <USB_EPStartXfer+0x10ea>
 8006380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d12c      	bne.n	80063ea <USB_EPStartXfer+0x10ea>
 8006390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800639e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063b4:	4413      	add	r3, r2
 80063b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	011a      	lsls	r2, r3, #4
 80063c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063cc:	4413      	add	r3, r2
 80063ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b00      	cmp	r3, #0
 8006406:	f040 809d 	bne.w	8006544 <USB_EPStartXfer+0x1244>
 800640a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006426:	b29b      	uxth	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800642e:	4413      	add	r3, r2
 8006430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	011a      	lsls	r2, r3, #4
 8006442:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006446:	4413      	add	r3, r2
 8006448:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800644c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b3e      	cmp	r3, #62	@ 0x3e
 8006472:	d92b      	bls.n	80064cc <USB_EPStartXfer+0x11cc>
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	2b00      	cmp	r3, #0
 8006498:	d104      	bne.n	80064a4 <USB_EPStartXfer+0x11a4>
 800649a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649e:	3b01      	subs	r3, #1
 80064a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	029b      	lsls	r3, r3, #10
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	4313      	orrs	r3, r2
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e069      	b.n	80065a0 <USB_EPStartXfer+0x12a0>
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10c      	bne.n	80064f6 <USB_EPStartXfer+0x11f6>
 80064dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e054      	b.n	80065a0 <USB_EPStartXfer+0x12a0>
 80064f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <USB_EPStartXfer+0x1226>
 800651c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006520:	3301      	adds	r3, #1
 8006522:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006526:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29a      	uxth	r2, r3
 800652e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006532:	b29b      	uxth	r3, r3
 8006534:	029b      	lsls	r3, r3, #10
 8006536:	b29b      	uxth	r3, r3
 8006538:	4313      	orrs	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006540:	801a      	strh	r2, [r3, #0]
 8006542:	e02d      	b.n	80065a0 <USB_EPStartXfer+0x12a0>
 8006544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d125      	bne.n	80065a0 <USB_EPStartXfer+0x12a0>
 8006554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006562:	b29b      	uxth	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800656a:	4413      	add	r3, r2
 800656c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006582:	4413      	add	r3, r2
 8006584:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006588:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	b29a      	uxth	r2, r3
 800659a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800659e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8218 	beq.w	80069e2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <USB_EPStartXfer+0x12ea>
 80065de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f040 81f5 	bne.w	80069e2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	f040 81ee 	bne.w	80069e2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]
 8006662:	e1be      	b.n	80069e2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	78db      	ldrb	r3, [r3, #3]
 8006670:	2b01      	cmp	r3, #1
 8006672:	f040 81b4 	bne.w	80069de <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d917      	bls.n	80066c2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80066a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	1ad2      	subs	r2, r2, r3
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	619a      	str	r2, [r3, #24]
 80066c0:	e00e      	b.n	80066e0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80066c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80066d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2200      	movs	r2, #0
 80066de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8085 	bne.w	80067fc <USB_EPStartXfer+0x14fc>
 80066f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800670e:	b29b      	uxth	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006716:	4413      	add	r3, r2
 8006718:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800671c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	011a      	lsls	r2, r3, #4
 800672a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800672e:	4413      	add	r3, r2
 8006730:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006734:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006744:	b29a      	uxth	r2, r3
 8006746:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	2b3e      	cmp	r3, #62	@ 0x3e
 8006752:	d923      	bls.n	800679c <USB_EPStartXfer+0x149c>
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <USB_EPStartXfer+0x1474>
 800676a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800676e:	3b01      	subs	r3, #1
 8006770:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29a      	uxth	r2, r3
 800677c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006780:	b29b      	uxth	r3, r3
 8006782:	029b      	lsls	r3, r3, #10
 8006784:	b29b      	uxth	r3, r3
 8006786:	4313      	orrs	r3, r2
 8006788:	b29b      	uxth	r3, r3
 800678a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006792:	b29a      	uxth	r2, r3
 8006794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	e060      	b.n	800685e <USB_EPStartXfer+0x155e>
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10c      	bne.n	80067be <USB_EPStartXfer+0x14be>
 80067a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	e04f      	b.n	800685e <USB_EPStartXfer+0x155e>
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <USB_EPStartXfer+0x14de>
 80067d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067d8:	3301      	adds	r3, #1
 80067da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	4313      	orrs	r3, r2
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e030      	b.n	800685e <USB_EPStartXfer+0x155e>
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d128      	bne.n	800685e <USB_EPStartXfer+0x155e>
 800680c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006828:	b29b      	uxth	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006830:	4413      	add	r3, r2
 8006832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	011a      	lsls	r2, r3, #4
 8006844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006848:	4413      	add	r3, r2
 800684a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800684e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006856:	b29a      	uxth	r2, r3
 8006858:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800685c:	801a      	strh	r2, [r3, #0]
 800685e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800686c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	785b      	ldrb	r3, [r3, #1]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f040 8085 	bne.w	8006988 <USB_EPStartXfer+0x1688>
 800687e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800688c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006890:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689a:	b29b      	uxth	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80068a2:	4413      	add	r3, r2
 80068a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	011a      	lsls	r2, r3, #4
 80068b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80068ba:	4413      	add	r3, r2
 80068bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80068de:	d923      	bls.n	8006928 <USB_EPStartXfer+0x1628>
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <USB_EPStartXfer+0x1600>
 80068f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068fa:	3b01      	subs	r3, #1
 80068fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29a      	uxth	r2, r3
 8006908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800690c:	b29b      	uxth	r3, r3
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	b29b      	uxth	r3, r3
 8006912:	4313      	orrs	r3, r2
 8006914:	b29b      	uxth	r3, r3
 8006916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691e:	b29a      	uxth	r2, r3
 8006920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	e05c      	b.n	80069e2 <USB_EPStartXfer+0x16e2>
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10c      	bne.n	800694a <USB_EPStartXfer+0x164a>
 8006930:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006940:	b29a      	uxth	r2, r3
 8006942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e04b      	b.n	80069e2 <USB_EPStartXfer+0x16e2>
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <USB_EPStartXfer+0x166a>
 8006960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006964:	3301      	adds	r3, #1
 8006966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800696a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29a      	uxth	r2, r3
 8006972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006976:	b29b      	uxth	r3, r3
 8006978:	029b      	lsls	r3, r3, #10
 800697a:	b29b      	uxth	r3, r3
 800697c:	4313      	orrs	r3, r2
 800697e:	b29a      	uxth	r2, r3
 8006980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006984:	801a      	strh	r2, [r3, #0]
 8006986:	e02c      	b.n	80069e2 <USB_EPStartXfer+0x16e2>
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d124      	bne.n	80069e2 <USB_EPStartXfer+0x16e2>
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069ae:	4413      	add	r3, r2
 80069b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	011a      	lsls	r2, r3, #4
 80069c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069c6:	4413      	add	r3, r2
 80069c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e001      	b.n	80069e2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e03a      	b.n	8006a58 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a08:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006a0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006a18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	441a      	add	r2, r3
 8006a3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d020      	beq.n	8006ab6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a8a:	81bb      	strh	r3, [r7, #12]
 8006a8c:	89bb      	ldrh	r3, [r7, #12]
 8006a8e:	f083 0310 	eor.w	r3, r3, #16
 8006a92:	81bb      	strh	r3, [r7, #12]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	441a      	add	r2, r3
 8006a9e:	89bb      	ldrh	r3, [r7, #12]
 8006aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	8013      	strh	r3, [r2, #0]
 8006ab4:	e01f      	b.n	8006af6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006acc:	81fb      	strh	r3, [r7, #14]
 8006ace:	89fb      	ldrh	r3, [r7, #14]
 8006ad0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ad4:	81fb      	strh	r3, [r7, #14]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	89fb      	ldrh	r3, [r7, #14]
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	7b1b      	ldrb	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f040 809d 	bne.w	8006c50 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	785b      	ldrb	r3, [r3, #1]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d04c      	beq.n	8006bb8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	823b      	strh	r3, [r7, #16]
 8006b2c:	8a3b      	ldrh	r3, [r7, #16]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01b      	beq.n	8006b6e <USB_EPClearStall+0x6c>
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4c:	81fb      	strh	r3, [r7, #14]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	441a      	add	r2, r3
 8006b58:	89fb      	ldrh	r3, [r7, #14]
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	78db      	ldrb	r3, [r3, #3]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d06c      	beq.n	8006c50 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b8c:	81bb      	strh	r3, [r7, #12]
 8006b8e:	89bb      	ldrh	r3, [r7, #12]
 8006b90:	f083 0320 	eor.w	r3, r3, #32
 8006b94:	81bb      	strh	r3, [r7, #12]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	89bb      	ldrh	r3, [r7, #12]
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	8013      	strh	r3, [r2, #0]
 8006bb6:	e04b      	b.n	8006c50 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	82fb      	strh	r3, [r7, #22]
 8006bc6:	8afb      	ldrh	r3, [r7, #22]
 8006bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01b      	beq.n	8006c08 <USB_EPClearStall+0x106>
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be6:	82bb      	strh	r3, [r7, #20]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	8abb      	ldrh	r3, [r7, #20]
 8006bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c1e:	827b      	strh	r3, [r7, #18]
 8006c20:	8a7b      	ldrh	r3, [r7, #18]
 8006c22:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c26:	827b      	strh	r3, [r7, #18]
 8006c28:	8a7b      	ldrh	r3, [r7, #18]
 8006c2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c2e:	827b      	strh	r3, [r7, #18]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	441a      	add	r2, r3
 8006c3a:	8a7b      	ldrh	r3, [r7, #18]
 8006c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2280      	movs	r2, #128	@ 0x80
 8006c72:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bc80      	pop	{r7}
 8006c80:	4770      	bx	lr

08006c82 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr

08006c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr

08006caa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr

08006cc8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bc80      	pop	{r7}
 8006cdc:	4770      	bx	lr

08006cde <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b08b      	sub	sp, #44	@ 0x2c
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	461a      	mov	r2, r3
 8006cec:	460b      	mov	r3, r1
 8006cee:	80fb      	strh	r3, [r7, #6]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006cf4:	88bb      	ldrh	r3, [r7, #4]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	005a      	lsls	r2, r3, #1
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d16:	e01e      	b.n	8006d56 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3301      	adds	r3, #1
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	b21a      	sxth	r2, r3
 8006d28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	b21b      	sxth	r3, r3
 8006d30:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	8a7a      	ldrh	r2, [r7, #18]
 8006d36:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	3302      	adds	r3, #2
 8006d3c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	3302      	adds	r3, #2
 8006d42:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	3301      	adds	r3, #1
 8006d48:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	3b01      	subs	r3, #1
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1dd      	bne.n	8006d18 <USB_WritePMA+0x3a>
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	372c      	adds	r7, #44	@ 0x2c
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b08b      	sub	sp, #44	@ 0x2c
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	460b      	mov	r3, r1
 8006d78:	80fb      	strh	r3, [r7, #6]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d7e:	88bb      	ldrh	r3, [r7, #4]
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	005a      	lsls	r2, r3, #1
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d9a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da0:	e01b      	b.n	8006dda <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	3302      	adds	r3, #2
 8006dae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	0a1b      	lsrs	r3, r3, #8
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e0      	bne.n	8006da2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006de0:	88bb      	ldrh	r3, [r7, #4]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	701a      	strb	r2, [r3, #0]
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	372c      	adds	r7, #44	@ 0x2c
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7c1b      	ldrb	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d115      	bne.n	8006e4a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e22:	2202      	movs	r2, #2
 8006e24:	2181      	movs	r1, #129	@ 0x81
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fe2b 	bl	8008a82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e36:	2202      	movs	r2, #2
 8006e38:	2101      	movs	r1, #1
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fe21 	bl	8008a82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006e48:	e012      	b.n	8006e70 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e4a:	2340      	movs	r3, #64	@ 0x40
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	2181      	movs	r1, #129	@ 0x81
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fe16 	bl	8008a82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e5c:	2340      	movs	r3, #64	@ 0x40
 8006e5e:	2202      	movs	r2, #2
 8006e60:	2101      	movs	r1, #1
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fe0d 	bl	8008a82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e70:	2308      	movs	r3, #8
 8006e72:	2203      	movs	r2, #3
 8006e74:	2182      	movs	r1, #130	@ 0x82
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fe03 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e82:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e86:	f001 ff23 	bl	8008cd0 <USBD_static_malloc>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d102      	bne.n	8006ea2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
 8006ea0:	e026      	b.n	8006ef0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7c1b      	ldrb	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d109      	bne.n	8006ee0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 fec2 	bl	8008c62 <USBD_LL_PrepareReceive>
 8006ede:	e007      	b.n	8006ef0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ee6:	2340      	movs	r3, #64	@ 0x40
 8006ee8:	2101      	movs	r1, #1
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 feb9 	bl	8008c62 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f0a:	2181      	movs	r1, #129	@ 0x81
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 fdde 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f18:	2101      	movs	r1, #1
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fdd7 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f28:	2182      	movs	r1, #130	@ 0x82
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 fdcf 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00e      	beq.n	8006f5e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f50:	4618      	mov	r0, r3
 8006f52:	f001 fec9 	bl	8008ce8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d039      	beq.n	8007006 <USBD_CDC_Setup+0x9e>
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	d17f      	bne.n	8007096 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	88db      	ldrh	r3, [r3, #6]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d029      	beq.n	8006ff2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b25b      	sxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	da11      	bge.n	8006fcc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006fb4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	88d2      	ldrh	r2, [r2, #6]
 8006fba:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fbc:	6939      	ldr	r1, [r7, #16]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	88db      	ldrh	r3, [r3, #6]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 f9d5 	bl	8008374 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006fca:	e06b      	b.n	80070a4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	785a      	ldrb	r2, [r3, #1]
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	88db      	ldrh	r3, [r3, #6]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fe2:	6939      	ldr	r1, [r7, #16]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	88db      	ldrh	r3, [r3, #6]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 f9f0 	bl	80083d0 <USBD_CtlPrepareRx>
      break;
 8006ff0:	e058      	b.n	80070a4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	7850      	ldrb	r0, [r2, #1]
 8006ffe:	2200      	movs	r2, #0
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	4798      	blx	r3
      break;
 8007004:	e04e      	b.n	80070a4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	2b0b      	cmp	r3, #11
 800700c:	d02e      	beq.n	800706c <USBD_CDC_Setup+0x104>
 800700e:	2b0b      	cmp	r3, #11
 8007010:	dc38      	bgt.n	8007084 <USBD_CDC_Setup+0x11c>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <USBD_CDC_Setup+0xb4>
 8007016:	2b0a      	cmp	r3, #10
 8007018:	d014      	beq.n	8007044 <USBD_CDC_Setup+0xdc>
 800701a:	e033      	b.n	8007084 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007022:	2b03      	cmp	r3, #3
 8007024:	d107      	bne.n	8007036 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007026:	f107 030c 	add.w	r3, r7, #12
 800702a:	2202      	movs	r2, #2
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 f9a0 	bl	8008374 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007034:	e02e      	b.n	8007094 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 f931 	bl	80082a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800703e:	2302      	movs	r3, #2
 8007040:	75fb      	strb	r3, [r7, #23]
          break;
 8007042:	e027      	b.n	8007094 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800704a:	2b03      	cmp	r3, #3
 800704c:	d107      	bne.n	800705e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800704e:	f107 030f 	add.w	r3, r7, #15
 8007052:	2201      	movs	r2, #1
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 f98c 	bl	8008374 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800705c:	e01a      	b.n	8007094 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f91d 	bl	80082a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007066:	2302      	movs	r3, #2
 8007068:	75fb      	strb	r3, [r7, #23]
          break;
 800706a:	e013      	b.n	8007094 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007072:	2b03      	cmp	r3, #3
 8007074:	d00d      	beq.n	8007092 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f911 	bl	80082a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800707e:	2302      	movs	r3, #2
 8007080:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007082:	e006      	b.n	8007092 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 f90a 	bl	80082a0 <USBD_CtlError>
          ret = USBD_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	75fb      	strb	r3, [r7, #23]
          break;
 8007090:	e000      	b.n	8007094 <USBD_CDC_Setup+0x12c>
          break;
 8007092:	bf00      	nop
      }
      break;
 8007094:	e006      	b.n	80070a4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 f901 	bl	80082a0 <USBD_CtlError>
      ret = USBD_FAIL;
 800709e:	2302      	movs	r3, #2
 80070a0:	75fb      	strb	r3, [r7, #23]
      break;
 80070a2:	bf00      	nop
  }

  return ret;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070c0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80070c8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d03a      	beq.n	800714a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	331c      	adds	r3, #28
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d029      	beq.n	800713e <USBD_CDC_DataIn+0x90>
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	331c      	adds	r3, #28
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	78f9      	ldrb	r1, [r7, #3]
 80070fe:	68b8      	ldr	r0, [r7, #8]
 8007100:	460b      	mov	r3, r1
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4403      	add	r3, r0
 800710a:	3320      	adds	r3, #32
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007112:	fb01 f303 	mul.w	r3, r1, r3
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d110      	bne.n	800713e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	331c      	adds	r3, #28
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007130:	78f9      	ldrb	r1, [r7, #3]
 8007132:	2300      	movs	r3, #0
 8007134:	2200      	movs	r2, #0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fd70 	bl	8008c1c <USBD_LL_Transmit>
 800713c:	e003      	b.n	8007146 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e000      	b.n	800714c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800714a:	2302      	movs	r3, #2
  }
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007166:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fd9b 	bl	8008ca8 <USBD_LL_GetRxDataSize>
 8007172:	4602      	mov	r2, r0
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00d      	beq.n	80071a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007198:	4611      	mov	r1, r2
 800719a:	4798      	blx	r3

    return USBD_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071b8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d014      	beq.n	80071ee <USBD_CDC_EP0_RxReady+0x44>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80071ca:	2bff      	cmp	r3, #255	@ 0xff
 80071cc:	d00f      	beq.n	80071ee <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80071dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	22ff      	movs	r2, #255	@ 0xff
 80071ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2243      	movs	r2, #67	@ 0x43
 8007204:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007206:	4b03      	ldr	r3, [pc, #12]	@ (8007214 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000094 	.word	0x20000094

08007218 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2243      	movs	r2, #67	@ 0x43
 8007224:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007226:	4b03      	ldr	r3, [pc, #12]	@ (8007234 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000050 	.word	0x20000050

08007238 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2243      	movs	r2, #67	@ 0x43
 8007244:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007246:	4b03      	ldr	r3, [pc, #12]	@ (8007254 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	200000d8 	.word	0x200000d8

08007258 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	220a      	movs	r2, #10
 8007264:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007266:	4b03      	ldr	r3, [pc, #12]	@ (8007274 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	2000000c 	.word	0x2000000c

08007278 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007282:	2302      	movs	r3, #2
 8007284:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr

080072a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800730a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7c1b      	ldrb	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007324:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007328:	2101      	movs	r1, #1
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fc99 	bl	8008c62 <USBD_LL_PrepareReceive>
 8007330:	e007      	b.n	8007342 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007338:	2340      	movs	r3, #64	@ 0x40
 800733a:	2101      	movs	r1, #1
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 fc90 	bl	8008c62 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e000      	b.n	8007348 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007346:	2302      	movs	r3, #2
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007364:	2302      	movs	r3, #2
 8007366:	e01a      	b.n	800739e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	79fa      	ldrb	r2, [r7, #7]
 8007394:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f001 fafe 	bl	8008998 <USBD_LL_Init>

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d006      	beq.n	80073c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
 80073c6:	e001      	b.n	80073cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073c8:	2302      	movs	r3, #2
 80073ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fb33 	bl	8008a4c <USBD_LL_Start>

  return USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007410:	2302      	movs	r3, #2
 8007412:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	4611      	mov	r1, r2
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	4611      	mov	r1, r2
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3

  return USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fed7 	bl	800822e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d016      	beq.n	80074d2 <USBD_LL_SetupStage+0x6a>
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d81c      	bhi.n	80074e2 <USBD_LL_SetupStage+0x7a>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <USBD_LL_SetupStage+0x4a>
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d008      	beq.n	80074c2 <USBD_LL_SetupStage+0x5a>
 80074b0:	e017      	b.n	80074e2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f9ca 	bl	8007854 <USBD_StdDevReq>
      break;
 80074c0:	e01a      	b.n	80074f8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa2c 	bl	8007928 <USBD_StdItfReq>
      break;
 80074d0:	e012      	b.n	80074f8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa6c 	bl	80079b8 <USBD_StdEPReq>
      break;
 80074e0:	e00a      	b.n	80074f8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 fb0b 	bl	8008b0c <USBD_LL_StallEP>
      break;
 80074f6:	bf00      	nop
  }

  return USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b086      	sub	sp, #24
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	460b      	mov	r3, r1
 800750c:	607a      	str	r2, [r7, #4]
 800750e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d14b      	bne.n	80075ae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800751c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007524:	2b03      	cmp	r3, #3
 8007526:	d134      	bne.n	8007592 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	429a      	cmp	r2, r3
 8007532:	d919      	bls.n	8007568 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	1ad2      	subs	r2, r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800754a:	429a      	cmp	r2, r3
 800754c:	d203      	bcs.n	8007556 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007552:	b29b      	uxth	r3, r3
 8007554:	e002      	b.n	800755c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 ff53 	bl	800840c <USBD_CtlContinueRx>
 8007566:	e038      	b.n	80075da <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800757a:	2b03      	cmp	r3, #3
 800757c:	d105      	bne.n	800758a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 ff50 	bl	8008430 <USBD_CtlSendStatus>
 8007590:	e023      	b.n	80075da <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007598:	2b05      	cmp	r3, #5
 800759a:	d11e      	bne.n	80075da <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80075a4:	2100      	movs	r1, #0
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f001 fab0 	bl	8008b0c <USBD_LL_StallEP>
 80075ac:	e015      	b.n	80075da <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d108      	bne.n	80075d6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	7afa      	ldrb	r2, [r7, #11]
 80075ce:	4611      	mov	r1, r2
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	4798      	blx	r3
 80075d4:	e001      	b.n	80075da <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075d6:	2302      	movs	r3, #2
 80075d8:	e000      	b.n	80075dc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	460b      	mov	r3, r1
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d17f      	bne.n	80076f8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3314      	adds	r3, #20
 80075fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007604:	2b02      	cmp	r3, #2
 8007606:	d15c      	bne.n	80076c2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	429a      	cmp	r2, r3
 8007612:	d915      	bls.n	8007640 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	1ad2      	subs	r2, r2, r3
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	b29b      	uxth	r3, r3
 8007628:	461a      	mov	r2, r3
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 febd 	bl	80083ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007632:	2300      	movs	r3, #0
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f001 fb12 	bl	8008c62 <USBD_LL_PrepareReceive>
 800763e:	e04e      	b.n	80076de <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	6912      	ldr	r2, [r2, #16]
 8007648:	fbb3 f1f2 	udiv	r1, r3, r2
 800764c:	fb01 f202 	mul.w	r2, r1, r2
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d11c      	bne.n	8007690 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800765e:	429a      	cmp	r2, r3
 8007660:	d316      	bcc.n	8007690 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800766c:	429a      	cmp	r2, r3
 800766e:	d20f      	bcs.n	8007690 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fe99 	bl	80083ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007682:	2300      	movs	r3, #0
 8007684:	2200      	movs	r2, #0
 8007686:	2100      	movs	r1, #0
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f001 faea 	bl	8008c62 <USBD_LL_PrepareReceive>
 800768e:	e026      	b.n	80076de <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d105      	bne.n	80076b2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076b2:	2180      	movs	r1, #128	@ 0x80
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f001 fa29 	bl	8008b0c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fecb 	bl	8008456 <USBD_CtlReceiveStatus>
 80076c0:	e00d      	b.n	80076de <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d004      	beq.n	80076d6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076d6:	2180      	movs	r1, #128	@ 0x80
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 fa17 	bl	8008b0c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d11d      	bne.n	8007724 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff fe81 	bl	80073f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076f6:	e015      	b.n	8007724 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00d      	beq.n	8007720 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800770a:	2b03      	cmp	r3, #3
 800770c:	d108      	bne.n	8007720 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	7afa      	ldrb	r2, [r7, #11]
 8007718:	4611      	mov	r1, r2
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	4798      	blx	r3
 800771e:	e001      	b.n	8007724 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007720:	2302      	movs	r3, #2
 8007722:	e000      	b.n	8007726 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007736:	2340      	movs	r3, #64	@ 0x40
 8007738:	2200      	movs	r2, #0
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 f9a0 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2240      	movs	r2, #64	@ 0x40
 800774e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007752:	2340      	movs	r3, #64	@ 0x40
 8007754:	2200      	movs	r2, #0
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f992 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2240      	movs	r2, #64	@ 0x40
 8007768:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6852      	ldr	r2, [r2, #4]
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	4611      	mov	r1, r2
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
  }

  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr

080077ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2204      	movs	r2, #4
 80077e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007804:	2b04      	cmp	r3, #4
 8007806:	d105      	bne.n	8007814 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800782e:	2b03      	cmp	r3, #3
 8007830:	d10b      	bne.n	800784a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d005      	beq.n	800784a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d005      	beq.n	800787a <USBD_StdDevReq+0x26>
 800786e:	2b40      	cmp	r3, #64	@ 0x40
 8007870:	d84f      	bhi.n	8007912 <USBD_StdDevReq+0xbe>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <USBD_StdDevReq+0x36>
 8007876:	2b20      	cmp	r3, #32
 8007878:	d14b      	bne.n	8007912 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	4798      	blx	r3
      break;
 8007888:	e048      	b.n	800791c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b09      	cmp	r3, #9
 8007890:	d839      	bhi.n	8007906 <USBD_StdDevReq+0xb2>
 8007892:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <USBD_StdDevReq+0x44>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078e9 	.word	0x080078e9
 800789c:	080078fd 	.word	0x080078fd
 80078a0:	08007907 	.word	0x08007907
 80078a4:	080078f3 	.word	0x080078f3
 80078a8:	08007907 	.word	0x08007907
 80078ac:	080078cb 	.word	0x080078cb
 80078b0:	080078c1 	.word	0x080078c1
 80078b4:	08007907 	.word	0x08007907
 80078b8:	080078df 	.word	0x080078df
 80078bc:	080078d5 	.word	0x080078d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9dc 	bl	8007c80 <USBD_GetDescriptor>
          break;
 80078c8:	e022      	b.n	8007910 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fb3f 	bl	8007f50 <USBD_SetAddress>
          break;
 80078d2:	e01d      	b.n	8007910 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fb7e 	bl	8007fd8 <USBD_SetConfig>
          break;
 80078dc:	e018      	b.n	8007910 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc07 	bl	80080f4 <USBD_GetConfig>
          break;
 80078e6:	e013      	b.n	8007910 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fc37 	bl	800815e <USBD_GetStatus>
          break;
 80078f0:	e00e      	b.n	8007910 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fc65 	bl	80081c4 <USBD_SetFeature>
          break;
 80078fa:	e009      	b.n	8007910 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fc74 	bl	80081ec <USBD_ClrFeature>
          break;
 8007904:	e004      	b.n	8007910 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fcc9 	bl	80082a0 <USBD_CtlError>
          break;
 800790e:	bf00      	nop
      }
      break;
 8007910:	e004      	b.n	800791c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fcc3 	bl	80082a0 <USBD_CtlError>
      break;
 800791a:	bf00      	nop
  }

  return ret;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop

08007928 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800793e:	2b40      	cmp	r3, #64	@ 0x40
 8007940:	d005      	beq.n	800794e <USBD_StdItfReq+0x26>
 8007942:	2b40      	cmp	r3, #64	@ 0x40
 8007944:	d82e      	bhi.n	80079a4 <USBD_StdItfReq+0x7c>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <USBD_StdItfReq+0x26>
 800794a:	2b20      	cmp	r3, #32
 800794c:	d12a      	bne.n	80079a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007954:	3b01      	subs	r3, #1
 8007956:	2b02      	cmp	r3, #2
 8007958:	d81d      	bhi.n	8007996 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	889b      	ldrh	r3, [r3, #4]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b01      	cmp	r3, #1
 8007962:	d813      	bhi.n	800798c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	88db      	ldrh	r3, [r3, #6]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d110      	bne.n	80079a0 <USBD_StdItfReq+0x78>
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10d      	bne.n	80079a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fd53 	bl	8008430 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800798a:	e009      	b.n	80079a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fc86 	bl	80082a0 <USBD_CtlError>
          break;
 8007994:	e004      	b.n	80079a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fc81 	bl	80082a0 <USBD_CtlError>
          break;
 800799e:	e000      	b.n	80079a2 <USBD_StdItfReq+0x7a>
          break;
 80079a0:	bf00      	nop
      }
      break;
 80079a2:	e004      	b.n	80079ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fc7a 	bl	80082a0 <USBD_CtlError>
      break;
 80079ac:	bf00      	nop
  }

  return USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	889b      	ldrh	r3, [r3, #4]
 80079ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079d4:	2b40      	cmp	r3, #64	@ 0x40
 80079d6:	d007      	beq.n	80079e8 <USBD_StdEPReq+0x30>
 80079d8:	2b40      	cmp	r3, #64	@ 0x40
 80079da:	f200 8146 	bhi.w	8007c6a <USBD_StdEPReq+0x2b2>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <USBD_StdEPReq+0x40>
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	f040 8141 	bne.w	8007c6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
      break;
 80079f6:	e13d      	b.n	8007c74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d10a      	bne.n	8007a1a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	e12d      	b.n	8007c76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	785b      	ldrb	r3, [r3, #1]
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d007      	beq.n	8007a32 <USBD_StdEPReq+0x7a>
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	f300 811b 	bgt.w	8007c5e <USBD_StdEPReq+0x2a6>
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d072      	beq.n	8007b12 <USBD_StdEPReq+0x15a>
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d03a      	beq.n	8007aa6 <USBD_StdEPReq+0xee>
 8007a30:	e115      	b.n	8007c5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d002      	beq.n	8007a42 <USBD_StdEPReq+0x8a>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d015      	beq.n	8007a6c <USBD_StdEPReq+0xb4>
 8007a40:	e02b      	b.n	8007a9a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00c      	beq.n	8007a62 <USBD_StdEPReq+0xaa>
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b80      	cmp	r3, #128	@ 0x80
 8007a4c:	d009      	beq.n	8007a62 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 f85a 	bl	8008b0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a58:	2180      	movs	r1, #128	@ 0x80
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 f856 	bl	8008b0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a60:	e020      	b.n	8007aa4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fc1b 	bl	80082a0 <USBD_CtlError>
              break;
 8007a6a:	e01b      	b.n	8007aa4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	885b      	ldrh	r3, [r3, #2]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10e      	bne.n	8007a92 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <USBD_StdEPReq+0xda>
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b80      	cmp	r3, #128	@ 0x80
 8007a7e:	d008      	beq.n	8007a92 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	88db      	ldrh	r3, [r3, #6]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d104      	bne.n	8007a92 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 f83d 	bl	8008b0c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fccc 	bl	8008430 <USBD_CtlSendStatus>

              break;
 8007a98:	e004      	b.n	8007aa4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fbff 	bl	80082a0 <USBD_CtlError>
              break;
 8007aa2:	bf00      	nop
          }
          break;
 8007aa4:	e0e0      	b.n	8007c68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d002      	beq.n	8007ab6 <USBD_StdEPReq+0xfe>
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d015      	beq.n	8007ae0 <USBD_StdEPReq+0x128>
 8007ab4:	e026      	b.n	8007b04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00c      	beq.n	8007ad6 <USBD_StdEPReq+0x11e>
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b80      	cmp	r3, #128	@ 0x80
 8007ac0:	d009      	beq.n	8007ad6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f820 	bl	8008b0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007acc:	2180      	movs	r1, #128	@ 0x80
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 f81c 	bl	8008b0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ad4:	e01c      	b.n	8007b10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fbe1 	bl	80082a0 <USBD_CtlError>
              break;
 8007ade:	e017      	b.n	8007b10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	885b      	ldrh	r3, [r3, #2]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d112      	bne.n	8007b0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 f827 	bl	8008b4a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc97 	bl	8008430 <USBD_CtlSendStatus>
              }
              break;
 8007b02:	e004      	b.n	8007b0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fbca 	bl	80082a0 <USBD_CtlError>
              break;
 8007b0c:	e000      	b.n	8007b10 <USBD_StdEPReq+0x158>
              break;
 8007b0e:	bf00      	nop
          }
          break;
 8007b10:	e0aa      	b.n	8007c68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d002      	beq.n	8007b22 <USBD_StdEPReq+0x16a>
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d032      	beq.n	8007b86 <USBD_StdEPReq+0x1ce>
 8007b20:	e097      	b.n	8007c52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d007      	beq.n	8007b38 <USBD_StdEPReq+0x180>
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b80      	cmp	r3, #128	@ 0x80
 8007b2c:	d004      	beq.n	8007b38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fbb5 	bl	80082a0 <USBD_CtlError>
                break;
 8007b36:	e091      	b.n	8007c5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	da0b      	bge.n	8007b58 <USBD_StdEPReq+0x1a0>
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	3310      	adds	r3, #16
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	3304      	adds	r3, #4
 8007b56:	e00b      	b.n	8007b70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3304      	adds	r3, #4
 8007b70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fbf8 	bl	8008374 <USBD_CtlSendData>
              break;
 8007b84:	e06a      	b.n	8007c5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da11      	bge.n	8007bb2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d117      	bne.n	8007bd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fb78 	bl	80082a0 <USBD_CtlError>
                  break;
 8007bb0:	e054      	b.n	8007c5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	f003 020f 	and.w	r2, r3, #15
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fb65 	bl	80082a0 <USBD_CtlError>
                  break;
 8007bd6:	e041      	b.n	8007c5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da0b      	bge.n	8007bf8 <USBD_StdEPReq+0x240>
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	3310      	adds	r3, #16
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	e00b      	b.n	8007c10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3304      	adds	r3, #4
 8007c10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <USBD_StdEPReq+0x266>
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b80      	cmp	r3, #128	@ 0x80
 8007c1c:	d103      	bne.n	8007c26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	e00e      	b.n	8007c44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 ffac 	bl	8008b88 <USBD_LL_IsStallEP>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e002      	b.n	8007c44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2202      	movs	r2, #2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb92 	bl	8008374 <USBD_CtlSendData>
              break;
 8007c50:	e004      	b.n	8007c5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fb23 	bl	80082a0 <USBD_CtlError>
              break;
 8007c5a:	bf00      	nop
          }
          break;
 8007c5c:	e004      	b.n	8007c68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fb1d 	bl	80082a0 <USBD_CtlError>
          break;
 8007c66:	bf00      	nop
      }
      break;
 8007c68:	e004      	b.n	8007c74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb17 	bl	80082a0 <USBD_CtlError>
      break;
 8007c72:	bf00      	nop
  }

  return ret;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	885b      	ldrh	r3, [r3, #2]
 8007c9a:	0a1b      	lsrs	r3, r3, #8
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	2b06      	cmp	r3, #6
 8007ca2:	f200 8128 	bhi.w	8007ef6 <USBD_GetDescriptor+0x276>
 8007ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <USBD_GetDescriptor+0x2c>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cc9 	.word	0x08007cc9
 8007cb0:	08007ce1 	.word	0x08007ce1
 8007cb4:	08007d21 	.word	0x08007d21
 8007cb8:	08007ef7 	.word	0x08007ef7
 8007cbc:	08007ef7 	.word	0x08007ef7
 8007cc0:	08007e97 	.word	0x08007e97
 8007cc4:	08007ec3 	.word	0x08007ec3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
      break;
 8007cde:	e112      	b.n	8007f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7c1b      	ldrb	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10d      	bne.n	8007d04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf0:	f107 0208 	add.w	r2, r7, #8
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4798      	blx	r3
 8007cf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	2202      	movs	r2, #2
 8007d00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d02:	e100      	b.n	8007f06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0c:	f107 0208 	add.w	r2, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	701a      	strb	r2, [r3, #0]
      break;
 8007d1e:	e0f2      	b.n	8007f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	885b      	ldrh	r3, [r3, #2]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	f200 80ac 	bhi.w	8007e84 <USBD_GetDescriptor+0x204>
 8007d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <USBD_GetDescriptor+0xb4>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d4d 	.word	0x08007d4d
 8007d38:	08007d81 	.word	0x08007d81
 8007d3c:	08007db5 	.word	0x08007db5
 8007d40:	08007de9 	.word	0x08007de9
 8007d44:	08007e1d 	.word	0x08007e1d
 8007d48:	08007e51 	.word	0x08007e51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	7c12      	ldrb	r2, [r2, #16]
 8007d64:	f107 0108 	add.w	r1, r7, #8
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
 8007d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d6e:	e091      	b.n	8007e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa94 	bl	80082a0 <USBD_CtlError>
            err++;
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d7e:	e089      	b.n	8007e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	7c12      	ldrb	r2, [r2, #16]
 8007d98:	f107 0108 	add.w	r1, r7, #8
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da2:	e077      	b.n	8007e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa7a 	bl	80082a0 <USBD_CtlError>
            err++;
 8007dac:	7afb      	ldrb	r3, [r7, #11]
 8007dae:	3301      	adds	r3, #1
 8007db0:	72fb      	strb	r3, [r7, #11]
          break;
 8007db2:	e06f      	b.n	8007e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	7c12      	ldrb	r2, [r2, #16]
 8007dcc:	f107 0108 	add.w	r1, r7, #8
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4798      	blx	r3
 8007dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd6:	e05d      	b.n	8007e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fa60 	bl	80082a0 <USBD_CtlError>
            err++;
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	3301      	adds	r3, #1
 8007de4:	72fb      	strb	r3, [r7, #11]
          break;
 8007de6:	e055      	b.n	8007e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7c12      	ldrb	r2, [r2, #16]
 8007e00:	f107 0108 	add.w	r1, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0a:	e043      	b.n	8007e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa46 	bl	80082a0 <USBD_CtlError>
            err++;
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	3301      	adds	r3, #1
 8007e18:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1a:	e03b      	b.n	8007e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	7c12      	ldrb	r2, [r2, #16]
 8007e34:	f107 0108 	add.w	r1, r7, #8
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3e:	e029      	b.n	8007e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa2c 	bl	80082a0 <USBD_CtlError>
            err++;
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4e:	e021      	b.n	8007e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7c12      	ldrb	r2, [r2, #16]
 8007e68:	f107 0108 	add.w	r1, r7, #8
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e72:	e00f      	b.n	8007e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa12 	bl	80082a0 <USBD_CtlError>
            err++;
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	72fb      	strb	r3, [r7, #11]
          break;
 8007e82:	e007      	b.n	8007e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa0a 	bl	80082a0 <USBD_CtlError>
          err++;
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e92:	e038      	b.n	8007f06 <USBD_GetDescriptor+0x286>
 8007e94:	e037      	b.n	8007f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	7c1b      	ldrb	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea6:	f107 0208 	add.w	r2, r7, #8
 8007eaa:	4610      	mov	r0, r2
 8007eac:	4798      	blx	r3
 8007eae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eb0:	e029      	b.n	8007f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f9f3 	bl	80082a0 <USBD_CtlError>
        err++;
 8007eba:	7afb      	ldrb	r3, [r7, #11]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8007ec0:	e021      	b.n	8007f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	7c1b      	ldrb	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10d      	bne.n	8007ee6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed2:	f107 0208 	add.w	r2, r7, #8
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	4798      	blx	r3
 8007eda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	2207      	movs	r2, #7
 8007ee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ee4:	e00f      	b.n	8007f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f9d9 	bl	80082a0 <USBD_CtlError>
        err++;
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef4:	e007      	b.n	8007f06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f9d1 	bl	80082a0 <USBD_CtlError>
      err++;
 8007efe:	7afb      	ldrb	r3, [r7, #11]
 8007f00:	3301      	adds	r3, #1
 8007f02:	72fb      	strb	r3, [r7, #11]
      break;
 8007f04:	bf00      	nop
  }

  if (err != 0U)
 8007f06:	7afb      	ldrb	r3, [r7, #11]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d11c      	bne.n	8007f46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f0c:	893b      	ldrh	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d011      	beq.n	8007f36 <USBD_GetDescriptor+0x2b6>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	88db      	ldrh	r3, [r3, #6]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00d      	beq.n	8007f36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	88da      	ldrh	r2, [r3, #6]
 8007f1e:	893b      	ldrh	r3, [r7, #8]
 8007f20:	4293      	cmp	r3, r2
 8007f22:	bf28      	it	cs
 8007f24:	4613      	movcs	r3, r2
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f2a:	893b      	ldrh	r3, [r7, #8]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa1f 	bl	8008374 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	88db      	ldrh	r3, [r3, #6]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa76 	bl	8008430 <USBD_CtlSendStatus>
 8007f44:	e000      	b.n	8007f48 <USBD_GetDescriptor+0x2c8>
    return;
 8007f46:	bf00      	nop
    }
  }
}
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop

08007f50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	889b      	ldrh	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d130      	bne.n	8007fc4 <USBD_SetAddress+0x74>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	88db      	ldrh	r3, [r3, #6]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d12c      	bne.n	8007fc4 <USBD_SetAddress+0x74>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	885b      	ldrh	r3, [r3, #2]
 8007f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f70:	d828      	bhi.n	8007fc4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	885b      	ldrh	r3, [r3, #2]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d104      	bne.n	8007f92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f988 	bl	80082a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f90:	e01d      	b.n	8007fce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7bfa      	ldrb	r2, [r7, #15]
 8007f96:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fe1d 	bl	8008bde <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa43 	bl	8008430 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb8:	e009      	b.n	8007fce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc2:	e004      	b.n	8007fce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f96a 	bl	80082a0 <USBD_CtlError>
  }
}
 8007fcc:	bf00      	nop
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	885b      	ldrh	r3, [r3, #2]
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	4b41      	ldr	r3, [pc, #260]	@ (80080f0 <USBD_SetConfig+0x118>)
 8007fea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fec:	4b40      	ldr	r3, [pc, #256]	@ (80080f0 <USBD_SetConfig+0x118>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d904      	bls.n	8007ffe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f952 	bl	80082a0 <USBD_CtlError>
 8007ffc:	e075      	b.n	80080ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008004:	2b02      	cmp	r3, #2
 8008006:	d002      	beq.n	800800e <USBD_SetConfig+0x36>
 8008008:	2b03      	cmp	r3, #3
 800800a:	d023      	beq.n	8008054 <USBD_SetConfig+0x7c>
 800800c:	e062      	b.n	80080d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800800e:	4b38      	ldr	r3, [pc, #224]	@ (80080f0 <USBD_SetConfig+0x118>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01a      	beq.n	800804c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008016:	4b36      	ldr	r3, [pc, #216]	@ (80080f0 <USBD_SetConfig+0x118>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2203      	movs	r2, #3
 8008024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008028:	4b31      	ldr	r3, [pc, #196]	@ (80080f0 <USBD_SetConfig+0x118>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff f9e8 	bl	8007404 <USBD_SetClassConfig>
 8008034:	4603      	mov	r3, r0
 8008036:	2b02      	cmp	r3, #2
 8008038:	d104      	bne.n	8008044 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f92f 	bl	80082a0 <USBD_CtlError>
            return;
 8008042:	e052      	b.n	80080ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f9f3 	bl	8008430 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800804a:	e04e      	b.n	80080ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f9ef 	bl	8008430 <USBD_CtlSendStatus>
        break;
 8008052:	e04a      	b.n	80080ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008054:	4b26      	ldr	r3, [pc, #152]	@ (80080f0 <USBD_SetConfig+0x118>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d112      	bne.n	8008082 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008064:	4b22      	ldr	r3, [pc, #136]	@ (80080f0 <USBD_SetConfig+0x118>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800806e:	4b20      	ldr	r3, [pc, #128]	@ (80080f0 <USBD_SetConfig+0x118>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff f9e4 	bl	8007442 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f9d8 	bl	8008430 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008080:	e033      	b.n	80080ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008082:	4b1b      	ldr	r3, [pc, #108]	@ (80080f0 <USBD_SetConfig+0x118>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	429a      	cmp	r2, r3
 800808e:	d01d      	beq.n	80080cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff f9d2 	bl	8007442 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800809e:	4b14      	ldr	r3, [pc, #80]	@ (80080f0 <USBD_SetConfig+0x118>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080a8:	4b11      	ldr	r3, [pc, #68]	@ (80080f0 <USBD_SetConfig+0x118>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff f9a8 	bl	8007404 <USBD_SetClassConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d104      	bne.n	80080c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f8ef 	bl	80082a0 <USBD_CtlError>
            return;
 80080c2:	e012      	b.n	80080ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f9b3 	bl	8008430 <USBD_CtlSendStatus>
        break;
 80080ca:	e00e      	b.n	80080ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9af 	bl	8008430 <USBD_CtlSendStatus>
        break;
 80080d2:	e00a      	b.n	80080ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f8e2 	bl	80082a0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80080dc:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <USBD_SetConfig+0x118>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff f9ad 	bl	8007442 <USBD_ClrClassConfig>
        break;
 80080e8:	bf00      	nop
    }
  }
}
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	200002c4 	.word	0x200002c4

080080f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	88db      	ldrh	r3, [r3, #6]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d004      	beq.n	8008110 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f8c9 	bl	80082a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800810e:	e022      	b.n	8008156 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008116:	2b02      	cmp	r3, #2
 8008118:	dc02      	bgt.n	8008120 <USBD_GetConfig+0x2c>
 800811a:	2b00      	cmp	r3, #0
 800811c:	dc03      	bgt.n	8008126 <USBD_GetConfig+0x32>
 800811e:	e015      	b.n	800814c <USBD_GetConfig+0x58>
 8008120:	2b03      	cmp	r3, #3
 8008122:	d00b      	beq.n	800813c <USBD_GetConfig+0x48>
 8008124:	e012      	b.n	800814c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3308      	adds	r3, #8
 8008130:	2201      	movs	r2, #1
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f91d 	bl	8008374 <USBD_CtlSendData>
        break;
 800813a:	e00c      	b.n	8008156 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	2201      	movs	r2, #1
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f915 	bl	8008374 <USBD_CtlSendData>
        break;
 800814a:	e004      	b.n	8008156 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f8a6 	bl	80082a0 <USBD_CtlError>
        break;
 8008154:	bf00      	nop
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800816e:	3b01      	subs	r3, #1
 8008170:	2b02      	cmp	r3, #2
 8008172:	d81e      	bhi.n	80081b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	88db      	ldrh	r3, [r3, #6]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d004      	beq.n	8008186 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f88e 	bl	80082a0 <USBD_CtlError>
        break;
 8008184:	e01a      	b.n	80081bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d005      	beq.n	80081a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f043 0202 	orr.w	r2, r3, #2
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	330c      	adds	r3, #12
 80081a6:	2202      	movs	r2, #2
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f8e2 	bl	8008374 <USBD_CtlSendData>
      break;
 80081b0:	e004      	b.n	80081bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f873 	bl	80082a0 <USBD_CtlError>
      break;
 80081ba:	bf00      	nop
  }
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d106      	bne.n	80081e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f926 	bl	8008430 <USBD_CtlSendStatus>
  }
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081fc:	3b01      	subs	r3, #1
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d80b      	bhi.n	800821a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d10c      	bne.n	8008224 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f90c 	bl	8008430 <USBD_CtlSendStatus>
      }
      break;
 8008218:	e004      	b.n	8008224 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f83f 	bl	80082a0 <USBD_CtlError>
      break;
 8008222:	e000      	b.n	8008226 <USBD_ClrFeature+0x3a>
      break;
 8008224:	bf00      	nop
  }
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781a      	ldrb	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	785a      	ldrb	r2, [r3, #1]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	3302      	adds	r3, #2
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	3303      	adds	r3, #3
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	b29b      	uxth	r3, r3
 800825a:	4413      	add	r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	3304      	adds	r3, #4
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	3305      	adds	r3, #5
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	b29b      	uxth	r3, r3
 8008274:	4413      	add	r3, r2
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	3306      	adds	r3, #6
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	3307      	adds	r3, #7
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	b29b      	uxth	r3, r3
 800828e:	4413      	add	r3, r2
 8008290:	b29a      	uxth	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	80da      	strh	r2, [r3, #6]

}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80082aa:	2180      	movs	r1, #128	@ 0x80
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc2d 	bl	8008b0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082b2:	2100      	movs	r1, #0
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc29 	bl	8008b0c <USBD_LL_StallEP>
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b086      	sub	sp, #24
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d032      	beq.n	800833e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f834 	bl	8008346 <USBD_GetLen>
 80082de:	4603      	mov	r3, r0
 80082e0:	3301      	adds	r3, #1
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	75fa      	strb	r2, [r7, #23]
 80082f2:	461a      	mov	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4413      	add	r3, r2
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	7812      	ldrb	r2, [r2, #0]
 80082fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	75fa      	strb	r2, [r7, #23]
 8008304:	461a      	mov	r2, r3
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	4413      	add	r3, r2
 800830a:	2203      	movs	r2, #3
 800830c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800830e:	e012      	b.n	8008336 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	60fa      	str	r2, [r7, #12]
 8008316:	7dfa      	ldrb	r2, [r7, #23]
 8008318:	1c51      	adds	r1, r2, #1
 800831a:	75f9      	strb	r1, [r7, #23]
 800831c:	4611      	mov	r1, r2
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	440a      	add	r2, r1
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	75fa      	strb	r2, [r7, #23]
 800832c:	461a      	mov	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	4413      	add	r3, r2
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e8      	bne.n	8008310 <USBD_GetString+0x4e>
    }
  }
}
 800833e:	bf00      	nop
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008352:	e005      	b.n	8008360 <USBD_GetLen+0x1a>
  {
    len++;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	3301      	adds	r3, #1
 8008358:	73fb      	strb	r3, [r7, #15]
    buf++;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3301      	adds	r3, #1
 800835e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1f5      	bne.n	8008354 <USBD_GetLen+0xe>
  }

  return len;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2202      	movs	r2, #2
 8008386:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008390:	88fa      	ldrh	r2, [r7, #6]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	2100      	movs	r1, #0
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fc3d 	bl	8008c1c <USBD_LL_Transmit>

  return USBD_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	2100      	movs	r1, #0
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 fc2b 	bl	8008c1c <USBD_LL_Transmit>

  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2203      	movs	r2, #3
 80083e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80083e6:	88fa      	ldrh	r2, [r7, #6]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80083ee:	88fa      	ldrh	r2, [r7, #6]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083f6:	88fb      	ldrh	r3, [r7, #6]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	2100      	movs	r1, #0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fc30 	bl	8008c62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	2100      	movs	r1, #0
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fc1e 	bl	8008c62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2204      	movs	r2, #4
 800843c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008440:	2300      	movs	r3, #0
 8008442:	2200      	movs	r2, #0
 8008444:	2100      	movs	r1, #0
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fbe8 	bl	8008c1c <USBD_LL_Transmit>

  return USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2205      	movs	r2, #5
 8008462:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008466:	2300      	movs	r3, #0
 8008468:	2200      	movs	r2, #0
 800846a:	2100      	movs	r1, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fbf8 	bl	8008c62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008480:	2200      	movs	r2, #0
 8008482:	4912      	ldr	r1, [pc, #72]	@ (80084cc <MX_USB_DEVICE_Init+0x50>)
 8008484:	4812      	ldr	r0, [pc, #72]	@ (80084d0 <MX_USB_DEVICE_Init+0x54>)
 8008486:	f7fe ff63 	bl	8007350 <USBD_Init>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008490:	f7f8 f8e0 	bl	8000654 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008494:	490f      	ldr	r1, [pc, #60]	@ (80084d4 <MX_USB_DEVICE_Init+0x58>)
 8008496:	480e      	ldr	r0, [pc, #56]	@ (80084d0 <MX_USB_DEVICE_Init+0x54>)
 8008498:	f7fe ff85 	bl	80073a6 <USBD_RegisterClass>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084a2:	f7f8 f8d7 	bl	8000654 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084a6:	490c      	ldr	r1, [pc, #48]	@ (80084d8 <MX_USB_DEVICE_Init+0x5c>)
 80084a8:	4809      	ldr	r0, [pc, #36]	@ (80084d0 <MX_USB_DEVICE_Init+0x54>)
 80084aa:	f7fe fee5 	bl	8007278 <USBD_CDC_RegisterInterface>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084b4:	f7f8 f8ce 	bl	8000654 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084b8:	4805      	ldr	r0, [pc, #20]	@ (80084d0 <MX_USB_DEVICE_Init+0x54>)
 80084ba:	f7fe ff8d 	bl	80073d8 <USBD_Start>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084c4:	f7f8 f8c6 	bl	8000654 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084c8:	bf00      	nop
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	2000012c 	.word	0x2000012c
 80084d0:	200002c8 	.word	0x200002c8
 80084d4:	20000018 	.word	0x20000018
 80084d8:	2000011c 	.word	0x2000011c

080084dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084e0:	2200      	movs	r2, #0
 80084e2:	4905      	ldr	r1, [pc, #20]	@ (80084f8 <CDC_Init_FS+0x1c>)
 80084e4:	4805      	ldr	r0, [pc, #20]	@ (80084fc <CDC_Init_FS+0x20>)
 80084e6:	f7fe fedd 	bl	80072a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084ea:	4905      	ldr	r1, [pc, #20]	@ (8008500 <CDC_Init_FS+0x24>)
 80084ec:	4803      	ldr	r0, [pc, #12]	@ (80084fc <CDC_Init_FS+0x20>)
 80084ee:	f7fe fef2 	bl	80072d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	2000098c 	.word	0x2000098c
 80084fc:	200002c8 	.word	0x200002c8
 8008500:	2000058c 	.word	0x2000058c

08008504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008504:	b480      	push	{r7}
 8008506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800850a:	4618      	mov	r0, r3
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
	...

08008514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
 8008520:	4613      	mov	r3, r2
 8008522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	2b23      	cmp	r3, #35	@ 0x23
 8008528:	d84a      	bhi.n	80085c0 <CDC_Control_FS+0xac>
 800852a:	a201      	add	r2, pc, #4	@ (adr r2, 8008530 <CDC_Control_FS+0x1c>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	080085c1 	.word	0x080085c1
 8008534:	080085c1 	.word	0x080085c1
 8008538:	080085c1 	.word	0x080085c1
 800853c:	080085c1 	.word	0x080085c1
 8008540:	080085c1 	.word	0x080085c1
 8008544:	080085c1 	.word	0x080085c1
 8008548:	080085c1 	.word	0x080085c1
 800854c:	080085c1 	.word	0x080085c1
 8008550:	080085c1 	.word	0x080085c1
 8008554:	080085c1 	.word	0x080085c1
 8008558:	080085c1 	.word	0x080085c1
 800855c:	080085c1 	.word	0x080085c1
 8008560:	080085c1 	.word	0x080085c1
 8008564:	080085c1 	.word	0x080085c1
 8008568:	080085c1 	.word	0x080085c1
 800856c:	080085c1 	.word	0x080085c1
 8008570:	080085c1 	.word	0x080085c1
 8008574:	080085c1 	.word	0x080085c1
 8008578:	080085c1 	.word	0x080085c1
 800857c:	080085c1 	.word	0x080085c1
 8008580:	080085c1 	.word	0x080085c1
 8008584:	080085c1 	.word	0x080085c1
 8008588:	080085c1 	.word	0x080085c1
 800858c:	080085c1 	.word	0x080085c1
 8008590:	080085c1 	.word	0x080085c1
 8008594:	080085c1 	.word	0x080085c1
 8008598:	080085c1 	.word	0x080085c1
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085c1 	.word	0x080085c1
 80085a4:	080085c1 	.word	0x080085c1
 80085a8:	080085c1 	.word	0x080085c1
 80085ac:	080085c1 	.word	0x080085c1
 80085b0:	080085c1 	.word	0x080085c1
 80085b4:	080085c1 	.word	0x080085c1
 80085b8:	080085c1 	.word	0x080085c1
 80085bc:	080085c1 	.word	0x080085c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085c0:	bf00      	nop
  }

  return (USBD_OK);
 80085c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop

080085d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4805      	ldr	r0, [pc, #20]	@ (80085f4 <CDC_Receive_FS+0x24>)
 80085de:	f7fe fe7a 	bl	80072d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085e2:	4804      	ldr	r0, [pc, #16]	@ (80085f4 <CDC_Receive_FS+0x24>)
 80085e4:	f7fe fe8a 	bl	80072fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	200002c8 	.word	0x200002c8

080085f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2212      	movs	r2, #18
 8008608:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800860a:	4b03      	ldr	r3, [pc, #12]	@ (8008618 <USBD_FS_DeviceDescriptor+0x20>)
}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20000148 	.word	0x20000148

0800861c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2204      	movs	r2, #4
 800862c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800862e:	4b03      	ldr	r3, [pc, #12]	@ (800863c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	2000015c 	.word	0x2000015c

08008640 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d105      	bne.n	800865e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	4907      	ldr	r1, [pc, #28]	@ (8008674 <USBD_FS_ProductStrDescriptor+0x34>)
 8008656:	4808      	ldr	r0, [pc, #32]	@ (8008678 <USBD_FS_ProductStrDescriptor+0x38>)
 8008658:	f7ff fe33 	bl	80082c2 <USBD_GetString>
 800865c:	e004      	b.n	8008668 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	4904      	ldr	r1, [pc, #16]	@ (8008674 <USBD_FS_ProductStrDescriptor+0x34>)
 8008662:	4805      	ldr	r0, [pc, #20]	@ (8008678 <USBD_FS_ProductStrDescriptor+0x38>)
 8008664:	f7ff fe2d 	bl	80082c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008668:	4b02      	ldr	r3, [pc, #8]	@ (8008674 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20000d8c 	.word	0x20000d8c
 8008678:	08008ef4 	.word	0x08008ef4

0800867c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	6039      	str	r1, [r7, #0]
 8008686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	4904      	ldr	r1, [pc, #16]	@ (800869c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800868c:	4804      	ldr	r0, [pc, #16]	@ (80086a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800868e:	f7ff fe18 	bl	80082c2 <USBD_GetString>
  return USBD_StrDesc;
 8008692:	4b02      	ldr	r3, [pc, #8]	@ (800869c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	20000d8c 	.word	0x20000d8c
 80086a0:	08008f0c 	.word	0x08008f0c

080086a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	6039      	str	r1, [r7, #0]
 80086ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	221a      	movs	r2, #26
 80086b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086b6:	f000 f843 	bl	8008740 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086ba:	4b02      	ldr	r3, [pc, #8]	@ (80086c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000160 	.word	0x20000160

080086c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d105      	bne.n	80086e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4907      	ldr	r1, [pc, #28]	@ (80086fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80086de:	4808      	ldr	r0, [pc, #32]	@ (8008700 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086e0:	f7ff fdef 	bl	80082c2 <USBD_GetString>
 80086e4:	e004      	b.n	80086f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4904      	ldr	r1, [pc, #16]	@ (80086fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ea:	4805      	ldr	r0, [pc, #20]	@ (8008700 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086ec:	f7ff fde9 	bl	80082c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086f0:	4b02      	ldr	r3, [pc, #8]	@ (80086fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000d8c 	.word	0x20000d8c
 8008700:	08008f20 	.word	0x08008f20

08008704 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d105      	bne.n	8008722 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4907      	ldr	r1, [pc, #28]	@ (8008738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800871a:	4808      	ldr	r0, [pc, #32]	@ (800873c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800871c:	f7ff fdd1 	bl	80082c2 <USBD_GetString>
 8008720:	e004      	b.n	800872c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	4904      	ldr	r1, [pc, #16]	@ (8008738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008726:	4805      	ldr	r0, [pc, #20]	@ (800873c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008728:	f7ff fdcb 	bl	80082c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800872c:	4b02      	ldr	r3, [pc, #8]	@ (8008738 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20000d8c 	.word	0x20000d8c
 800873c:	08008f2c 	.word	0x08008f2c

08008740 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008746:	4b0f      	ldr	r3, [pc, #60]	@ (8008784 <Get_SerialNum+0x44>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800874c:	4b0e      	ldr	r3, [pc, #56]	@ (8008788 <Get_SerialNum+0x48>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008752:	4b0e      	ldr	r3, [pc, #56]	@ (800878c <Get_SerialNum+0x4c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008766:	2208      	movs	r2, #8
 8008768:	4909      	ldr	r1, [pc, #36]	@ (8008790 <Get_SerialNum+0x50>)
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f814 	bl	8008798 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008770:	2204      	movs	r2, #4
 8008772:	4908      	ldr	r1, [pc, #32]	@ (8008794 <Get_SerialNum+0x54>)
 8008774:	68b8      	ldr	r0, [r7, #8]
 8008776:	f000 f80f 	bl	8008798 <IntToUnicode>
  }
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	1ffff7e8 	.word	0x1ffff7e8
 8008788:	1ffff7ec 	.word	0x1ffff7ec
 800878c:	1ffff7f0 	.word	0x1ffff7f0
 8008790:	20000162 	.word	0x20000162
 8008794:	20000172 	.word	0x20000172

08008798 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	4613      	mov	r3, r2
 80087a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087aa:	2300      	movs	r3, #0
 80087ac:	75fb      	strb	r3, [r7, #23]
 80087ae:	e027      	b.n	8008800 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	0f1b      	lsrs	r3, r3, #28
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d80b      	bhi.n	80087d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	0f1b      	lsrs	r3, r3, #28
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	4619      	mov	r1, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	440b      	add	r3, r1
 80087c8:	3230      	adds	r2, #48	@ 0x30
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	e00a      	b.n	80087e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	0f1b      	lsrs	r3, r3, #28
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	4619      	mov	r1, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	440b      	add	r3, r1
 80087e0:	3237      	adds	r2, #55	@ 0x37
 80087e2:	b2d2      	uxtb	r2, r2
 80087e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	3301      	adds	r3, #1
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	4413      	add	r3, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	3301      	adds	r3, #1
 80087fe:	75fb      	strb	r3, [r7, #23]
 8008800:	7dfa      	ldrb	r2, [r7, #23]
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	429a      	cmp	r2, r3
 8008806:	d3d3      	bcc.n	80087b0 <IntToUnicode+0x18>
  }
}
 8008808:	bf00      	nop
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr

08008814 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a0d      	ldr	r2, [pc, #52]	@ (8008858 <HAL_PCD_MspInit+0x44>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d113      	bne.n	800884e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008826:	4b0d      	ldr	r3, [pc, #52]	@ (800885c <HAL_PCD_MspInit+0x48>)
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	4a0c      	ldr	r2, [pc, #48]	@ (800885c <HAL_PCD_MspInit+0x48>)
 800882c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008830:	61d3      	str	r3, [r2, #28]
 8008832:	4b0a      	ldr	r3, [pc, #40]	@ (800885c <HAL_PCD_MspInit+0x48>)
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	2014      	movs	r0, #20
 8008844:	f7f8 f953 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008848:	2014      	movs	r0, #20
 800884a:	f7f8 f96c 	bl	8000b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40005c00 	.word	0x40005c00
 800885c:	40021000 	.word	0x40021000

08008860 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f7fe fdf6 	bl	8007468 <USBD_LL_SetupStage>
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	440b      	add	r3, r1
 80088a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	4619      	mov	r1, r3
 80088ae:	f7fe fe28 	bl	8007502 <USBD_LL_DataOutStage>
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088cc:	78fa      	ldrb	r2, [r7, #3]
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	440b      	add	r3, r1
 80088da:	3324      	adds	r3, #36	@ 0x24
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	4619      	mov	r1, r3
 80088e2:	f7fe fe7f 	bl	80075e4 <USBD_LL_DataInStage>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe ff8f 	bl	8007820 <USBD_LL_SOF>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008912:	2301      	movs	r3, #1
 8008914:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	799b      	ldrb	r3, [r3, #6]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d001      	beq.n	8008922 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800891e:	f7f7 fe99 	bl	8000654 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008928:	7bfa      	ldrb	r2, [r7, #15]
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe ff3f 	bl	80077b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe fef8 	bl	800772e <USBD_LL_Reset>
}
 800893e:	bf00      	nop
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe ff39 	bl	80077ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7a9b      	ldrb	r3, [r3, #10]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008964:	4b04      	ldr	r3, [pc, #16]	@ (8008978 <HAL_PCD_SuspendCallback+0x30>)
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	4a03      	ldr	r2, [pc, #12]	@ (8008978 <HAL_PCD_SuspendCallback+0x30>)
 800896a:	f043 0306 	orr.w	r3, r3, #6
 800896e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	e000ed00 	.word	0xe000ed00

0800897c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe ff33 	bl	80077f6 <USBD_LL_Resume>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089a0:	4a28      	ldr	r2, [pc, #160]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a26      	ldr	r2, [pc, #152]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089ac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089b0:	4b24      	ldr	r3, [pc, #144]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089b2:	4a25      	ldr	r2, [pc, #148]	@ (8008a48 <USBD_LL_Init+0xb0>)
 80089b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089b6:	4b23      	ldr	r3, [pc, #140]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089b8:	2208      	movs	r2, #8
 80089ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089bc:	4b21      	ldr	r3, [pc, #132]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089be:	2202      	movs	r2, #2
 80089c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089c2:	4b20      	ldr	r3, [pc, #128]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089c8:	4b1e      	ldr	r3, [pc, #120]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089d4:	481b      	ldr	r0, [pc, #108]	@ (8008a44 <USBD_LL_Init+0xac>)
 80089d6:	f7f8 faf7 	bl	8000fc8 <HAL_PCD_Init>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80089e0:	f7f7 fe38 	bl	8000654 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80089ea:	2318      	movs	r3, #24
 80089ec:	2200      	movs	r2, #0
 80089ee:	2100      	movs	r1, #0
 80089f0:	f7fa f808 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80089fa:	2358      	movs	r3, #88	@ 0x58
 80089fc:	2200      	movs	r2, #0
 80089fe:	2180      	movs	r1, #128	@ 0x80
 8008a00:	f7fa f800 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a0a:	23c0      	movs	r3, #192	@ 0xc0
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2181      	movs	r1, #129	@ 0x81
 8008a10:	f7f9 fff8 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a1a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2101      	movs	r1, #1
 8008a22:	f7f9 ffef 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a30:	2200      	movs	r2, #0
 8008a32:	2182      	movs	r1, #130	@ 0x82
 8008a34:	f7f9 ffe6 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000f8c 	.word	0x20000f8c
 8008a48:	40005c00 	.word	0x40005c00

08008a4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7f8 fba6 	bl	80011b4 <HAL_PCD_Start>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f94e 	bl	8008d10 <USBD_Get_USB_Status>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	70fb      	strb	r3, [r7, #3]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70bb      	strb	r3, [r7, #2]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008aaa:	78bb      	ldrb	r3, [r7, #2]
 8008aac:	883a      	ldrh	r2, [r7, #0]
 8008aae:	78f9      	ldrb	r1, [r7, #3]
 8008ab0:	f7f8 fcfa 	bl	80014a8 <HAL_PCD_EP_Open>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f928 	bl	8008d10 <USBD_Get_USB_Status>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7f8 fd38 	bl	8001562 <HAL_PCD_EP_Close>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f909 	bl	8008d10 <USBD_Get_USB_Status>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f8 fde0 	bl	80016f0 <HAL_PCD_EP_SetStall>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f8ea 	bl	8008d10 <USBD_Get_USB_Status>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	4611      	mov	r1, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7f8 fe21 	bl	80017b0 <HAL_PCD_EP_ClrStall>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f8cb 	bl	8008d10 <USBD_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da0b      	bge.n	8008bbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	440b      	add	r3, r1
 8008bb6:	3312      	adds	r3, #18
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	e00b      	b.n	8008bd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	440b      	add	r3, r1
 8008bce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr

08008bde <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f8 fc2f 	bl	8001460 <HAL_PCD_SetAddress>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f881 	bl	8008d10 <USBD_Get_USB_Status>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	461a      	mov	r2, r3
 8008c28:	460b      	mov	r3, r1
 8008c2a:	72fb      	strb	r3, [r7, #11]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c3e:	893b      	ldrh	r3, [r7, #8]
 8008c40:	7af9      	ldrb	r1, [r7, #11]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	f7f8 fd1d 	bl	8001682 <HAL_PCD_EP_Transmit>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f85e 	bl	8008d10 <USBD_Get_USB_Status>
 8008c54:	4603      	mov	r3, r0
 8008c56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c58:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	460b      	mov	r3, r1
 8008c70:	72fb      	strb	r3, [r7, #11]
 8008c72:	4613      	mov	r3, r2
 8008c74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c84:	893b      	ldrh	r3, [r7, #8]
 8008c86:	7af9      	ldrb	r1, [r7, #11]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	f7f8 fcb2 	bl	80015f2 <HAL_PCD_EP_Receive>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f83b 	bl	8008d10 <USBD_Get_USB_Status>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f8 fcc8 	bl	8001654 <HAL_PCD_EP_GetRxCount>
 8008cc4:	4603      	mov	r3, r0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cd8:	4b02      	ldr	r3, [pc, #8]	@ (8008ce4 <USBD_static_malloc+0x14>)
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr
 8008ce4:	20001264 	.word	0x20001264

08008ce8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bc80      	pop	{r7}
 8008cf8:	4770      	bx	lr

08008cfa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d817      	bhi.n	8008d54 <USBD_Get_USB_Status+0x44>
 8008d24:	a201      	add	r2, pc, #4	@ (adr r2, 8008d2c <USBD_Get_USB_Status+0x1c>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008d3d 	.word	0x08008d3d
 8008d30:	08008d43 	.word	0x08008d43
 8008d34:	08008d49 	.word	0x08008d49
 8008d38:	08008d4f 	.word	0x08008d4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d40:	e00b      	b.n	8008d5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d42:	2302      	movs	r3, #2
 8008d44:	73fb      	strb	r3, [r7, #15]
    break;
 8008d46:	e008      	b.n	8008d5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4c:	e005      	b.n	8008d5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	73fb      	strb	r3, [r7, #15]
    break;
 8008d52:	e002      	b.n	8008d5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d54:	2302      	movs	r3, #2
 8008d56:	73fb      	strb	r3, [r7, #15]
    break;
 8008d58:	bf00      	nop
  }
  return usb_status;
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bc80      	pop	{r7}
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop

08008d68 <atoi>:
 8008d68:	220a      	movs	r2, #10
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	f000 b87a 	b.w	8008e64 <strtol>

08008d70 <_strtol_l.constprop.0>:
 8008d70:	2b24      	cmp	r3, #36	@ 0x24
 8008d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d76:	4686      	mov	lr, r0
 8008d78:	4690      	mov	r8, r2
 8008d7a:	d801      	bhi.n	8008d80 <_strtol_l.constprop.0+0x10>
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d106      	bne.n	8008d8e <_strtol_l.constprop.0+0x1e>
 8008d80:	f000 f882 	bl	8008e88 <__errno>
 8008d84:	2316      	movs	r3, #22
 8008d86:	6003      	str	r3, [r0, #0]
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8e:	460d      	mov	r5, r1
 8008d90:	4833      	ldr	r0, [pc, #204]	@ (8008e60 <_strtol_l.constprop.0+0xf0>)
 8008d92:	462a      	mov	r2, r5
 8008d94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d98:	5d06      	ldrb	r6, [r0, r4]
 8008d9a:	f016 0608 	ands.w	r6, r6, #8
 8008d9e:	d1f8      	bne.n	8008d92 <_strtol_l.constprop.0+0x22>
 8008da0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008da2:	d12d      	bne.n	8008e00 <_strtol_l.constprop.0+0x90>
 8008da4:	2601      	movs	r6, #1
 8008da6:	782c      	ldrb	r4, [r5, #0]
 8008da8:	1c95      	adds	r5, r2, #2
 8008daa:	f033 0210 	bics.w	r2, r3, #16
 8008dae:	d109      	bne.n	8008dc4 <_strtol_l.constprop.0+0x54>
 8008db0:	2c30      	cmp	r4, #48	@ 0x30
 8008db2:	d12a      	bne.n	8008e0a <_strtol_l.constprop.0+0x9a>
 8008db4:	782a      	ldrb	r2, [r5, #0]
 8008db6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008dba:	2a58      	cmp	r2, #88	@ 0x58
 8008dbc:	d125      	bne.n	8008e0a <_strtol_l.constprop.0+0x9a>
 8008dbe:	2310      	movs	r3, #16
 8008dc0:	786c      	ldrb	r4, [r5, #1]
 8008dc2:	3502      	adds	r5, #2
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008dca:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008dce:	fbbc f9f3 	udiv	r9, ip, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008dd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ddc:	2f09      	cmp	r7, #9
 8008dde:	d81b      	bhi.n	8008e18 <_strtol_l.constprop.0+0xa8>
 8008de0:	463c      	mov	r4, r7
 8008de2:	42a3      	cmp	r3, r4
 8008de4:	dd27      	ble.n	8008e36 <_strtol_l.constprop.0+0xc6>
 8008de6:	1c57      	adds	r7, r2, #1
 8008de8:	d007      	beq.n	8008dfa <_strtol_l.constprop.0+0x8a>
 8008dea:	4581      	cmp	r9, r0
 8008dec:	d320      	bcc.n	8008e30 <_strtol_l.constprop.0+0xc0>
 8008dee:	d101      	bne.n	8008df4 <_strtol_l.constprop.0+0x84>
 8008df0:	45a2      	cmp	sl, r4
 8008df2:	db1d      	blt.n	8008e30 <_strtol_l.constprop.0+0xc0>
 8008df4:	2201      	movs	r2, #1
 8008df6:	fb00 4003 	mla	r0, r0, r3, r4
 8008dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dfe:	e7eb      	b.n	8008dd8 <_strtol_l.constprop.0+0x68>
 8008e00:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e02:	bf04      	itt	eq
 8008e04:	782c      	ldrbeq	r4, [r5, #0]
 8008e06:	1c95      	addeq	r5, r2, #2
 8008e08:	e7cf      	b.n	8008daa <_strtol_l.constprop.0+0x3a>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1da      	bne.n	8008dc4 <_strtol_l.constprop.0+0x54>
 8008e0e:	2c30      	cmp	r4, #48	@ 0x30
 8008e10:	bf0c      	ite	eq
 8008e12:	2308      	moveq	r3, #8
 8008e14:	230a      	movne	r3, #10
 8008e16:	e7d5      	b.n	8008dc4 <_strtol_l.constprop.0+0x54>
 8008e18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e1c:	2f19      	cmp	r7, #25
 8008e1e:	d801      	bhi.n	8008e24 <_strtol_l.constprop.0+0xb4>
 8008e20:	3c37      	subs	r4, #55	@ 0x37
 8008e22:	e7de      	b.n	8008de2 <_strtol_l.constprop.0+0x72>
 8008e24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e28:	2f19      	cmp	r7, #25
 8008e2a:	d804      	bhi.n	8008e36 <_strtol_l.constprop.0+0xc6>
 8008e2c:	3c57      	subs	r4, #87	@ 0x57
 8008e2e:	e7d8      	b.n	8008de2 <_strtol_l.constprop.0+0x72>
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295
 8008e34:	e7e1      	b.n	8008dfa <_strtol_l.constprop.0+0x8a>
 8008e36:	1c53      	adds	r3, r2, #1
 8008e38:	d108      	bne.n	8008e4c <_strtol_l.constprop.0+0xdc>
 8008e3a:	2322      	movs	r3, #34	@ 0x22
 8008e3c:	4660      	mov	r0, ip
 8008e3e:	f8ce 3000 	str.w	r3, [lr]
 8008e42:	f1b8 0f00 	cmp.w	r8, #0
 8008e46:	d0a0      	beq.n	8008d8a <_strtol_l.constprop.0+0x1a>
 8008e48:	1e69      	subs	r1, r5, #1
 8008e4a:	e006      	b.n	8008e5a <_strtol_l.constprop.0+0xea>
 8008e4c:	b106      	cbz	r6, 8008e50 <_strtol_l.constprop.0+0xe0>
 8008e4e:	4240      	negs	r0, r0
 8008e50:	f1b8 0f00 	cmp.w	r8, #0
 8008e54:	d099      	beq.n	8008d8a <_strtol_l.constprop.0+0x1a>
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	d1f6      	bne.n	8008e48 <_strtol_l.constprop.0+0xd8>
 8008e5a:	f8c8 1000 	str.w	r1, [r8]
 8008e5e:	e794      	b.n	8008d8a <_strtol_l.constprop.0+0x1a>
 8008e60:	08008f67 	.word	0x08008f67

08008e64 <strtol>:
 8008e64:	4613      	mov	r3, r2
 8008e66:	460a      	mov	r2, r1
 8008e68:	4601      	mov	r1, r0
 8008e6a:	4802      	ldr	r0, [pc, #8]	@ (8008e74 <strtol+0x10>)
 8008e6c:	6800      	ldr	r0, [r0, #0]
 8008e6e:	f7ff bf7f 	b.w	8008d70 <_strtol_l.constprop.0>
 8008e72:	bf00      	nop
 8008e74:	2000017c 	.word	0x2000017c

08008e78 <memset>:
 8008e78:	4603      	mov	r3, r0
 8008e7a:	4402      	add	r2, r0
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d100      	bne.n	8008e82 <memset+0xa>
 8008e80:	4770      	bx	lr
 8008e82:	f803 1b01 	strb.w	r1, [r3], #1
 8008e86:	e7f9      	b.n	8008e7c <memset+0x4>

08008e88 <__errno>:
 8008e88:	4b01      	ldr	r3, [pc, #4]	@ (8008e90 <__errno+0x8>)
 8008e8a:	6818      	ldr	r0, [r3, #0]
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	2000017c 	.word	0x2000017c

08008e94 <__libc_init_array>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	2600      	movs	r6, #0
 8008e98:	4d0c      	ldr	r5, [pc, #48]	@ (8008ecc <__libc_init_array+0x38>)
 8008e9a:	4c0d      	ldr	r4, [pc, #52]	@ (8008ed0 <__libc_init_array+0x3c>)
 8008e9c:	1b64      	subs	r4, r4, r5
 8008e9e:	10a4      	asrs	r4, r4, #2
 8008ea0:	42a6      	cmp	r6, r4
 8008ea2:	d109      	bne.n	8008eb8 <__libc_init_array+0x24>
 8008ea4:	f000 f81a 	bl	8008edc <_init>
 8008ea8:	2600      	movs	r6, #0
 8008eaa:	4d0a      	ldr	r5, [pc, #40]	@ (8008ed4 <__libc_init_array+0x40>)
 8008eac:	4c0a      	ldr	r4, [pc, #40]	@ (8008ed8 <__libc_init_array+0x44>)
 8008eae:	1b64      	subs	r4, r4, r5
 8008eb0:	10a4      	asrs	r4, r4, #2
 8008eb2:	42a6      	cmp	r6, r4
 8008eb4:	d105      	bne.n	8008ec2 <__libc_init_array+0x2e>
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebc:	4798      	blx	r3
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	e7ee      	b.n	8008ea0 <__libc_init_array+0xc>
 8008ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec6:	4798      	blx	r3
 8008ec8:	3601      	adds	r6, #1
 8008eca:	e7f2      	b.n	8008eb2 <__libc_init_array+0x1e>
 8008ecc:	08009068 	.word	0x08009068
 8008ed0:	08009068 	.word	0x08009068
 8008ed4:	08009068 	.word	0x08009068
 8008ed8:	0800906c 	.word	0x0800906c

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	bf00      	nop
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr
