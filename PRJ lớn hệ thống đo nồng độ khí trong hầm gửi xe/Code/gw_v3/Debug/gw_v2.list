
gw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009320  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800942c  0800942c  0000a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095a0  080095a0  0000b1d0  2**0
                  CONTENTS
  4 .ARM          00000000  080095a0  080095a0  0000b1d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095a0  080095a0  0000b1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095a0  080095a0  0000a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095a4  080095a4  0000a5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  080095a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  200001d0  08009778  0000b1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e0  08009778  0000b5e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015487  00000000  00000000  0000b1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d9  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00023c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e51  00000000  00000000  00024f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5af  00000000  00000000  00025d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a9a  00000000  00000000  00040300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f342  00000000  00000000  00058d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e80dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f58  00000000  00000000  000e8120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ed078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009414 	.word	0x08009414

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	08009414 	.word	0x08009414

0800014c <RS485_SendCommand>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void RS485_SendCommand(uint8_t slaveID, uint8_t command)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
    RS_txBuffer[0] = slaveID;  // �?ịa chỉ Slave
 800015c:	4a09      	ldr	r2, [pc, #36]	@ (8000184 <RS485_SendCommand+0x38>)
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	7013      	strb	r3, [r2, #0]
    RS_txBuffer[1] = command;  // Lệnh
 8000162:	4a08      	ldr	r2, [pc, #32]	@ (8000184 <RS485_SendCommand+0x38>)
 8000164:	79bb      	ldrb	r3, [r7, #6]
 8000166:	7053      	strb	r3, [r2, #1]
    RS_txBuffer[2] = '\n';     // Ký tự kết thúc
 8000168:	4b06      	ldr	r3, [pc, #24]	@ (8000184 <RS485_SendCommand+0x38>)
 800016a:	220a      	movs	r2, #10
 800016c:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart1, RS_txBuffer, 10, HAL_MAX_DELAY);
 800016e:	f04f 33ff 	mov.w	r3, #4294967295
 8000172:	220a      	movs	r2, #10
 8000174:	4903      	ldr	r1, [pc, #12]	@ (8000184 <RS485_SendCommand+0x38>)
 8000176:	4804      	ldr	r0, [pc, #16]	@ (8000188 <RS485_SendCommand+0x3c>)
 8000178:	f003 fe88 	bl	8003e8c <HAL_UART_Transmit>
}
 800017c:	bf00      	nop
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	200001f8 	.word	0x200001f8
 8000188:	2000029c 	.word	0x2000029c

0800018c <decode_ppm_2_ver2>:

void decode_ppm_2_ver2 (char *RS_rxBuffer,PPM *ppm1,PPM *ppm2)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	@ 0x40
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
	char time_buf_1[7] = {0}; // Lưu chuỗi th�?i gian
 8000198:	2300      	movs	r3, #0
 800019a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800019c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001a0:	2100      	movs	r1, #0
 80001a2:	460a      	mov	r2, r1
 80001a4:	801a      	strh	r2, [r3, #0]
 80001a6:	460a      	mov	r2, r1
 80001a8:	709a      	strb	r2, [r3, #2]
	char co_1[6] = {0};   // Lưu chuỗi giá trị CO
 80001aa:	2300      	movs	r3, #0
 80001ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80001ae:	2300      	movs	r3, #0
 80001b0:	86bb      	strh	r3, [r7, #52]	@ 0x34
	char co2_1[6] = {0};  // Lưu chuỗi giá trị CO2
 80001b2:	2300      	movs	r3, #0
 80001b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80001b6:	2300      	movs	r3, #0
 80001b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	char time_buf_2[7] = {0}; // Lưu chuỗi th�?i gian
 80001ba:	2300      	movs	r3, #0
 80001bc:	623b      	str	r3, [r7, #32]
 80001be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80001c2:	2100      	movs	r1, #0
 80001c4:	460a      	mov	r2, r1
 80001c6:	801a      	strh	r2, [r3, #0]
 80001c8:	460a      	mov	r2, r1
 80001ca:	709a      	strb	r2, [r3, #2]
	char co_2[6] = {0};   // Lưu chuỗi giá trị CO
 80001cc:	2300      	movs	r3, #0
 80001ce:	61bb      	str	r3, [r7, #24]
 80001d0:	2300      	movs	r3, #0
 80001d2:	83bb      	strh	r3, [r7, #28]
	char co2_2[6] = {0};  // Lưu chuỗi giá trị CO2
 80001d4:	2300      	movs	r3, #0
 80001d6:	613b      	str	r3, [r7, #16]
 80001d8:	2300      	movs	r3, #0
 80001da:	82bb      	strh	r3, [r7, #20]
	// Tách chuỗi từ buffer
	strncpy(time_buf_1, (char*)&RS_rxBuffer[2], 6);   // Tách phần tử 2-7
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	1c99      	adds	r1, r3, #2
 80001e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80001e4:	2206      	movs	r2, #6
 80001e6:	4618      	mov	r0, r3
 80001e8:	f009 f8c0 	bl	800936c <strncpy>
	strncpy(co_1, (char*)&RS_rxBuffer[8], 5);     // Tách phần tử
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	f103 0108 	add.w	r1, r3, #8
 80001f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001f6:	2205      	movs	r2, #5
 80001f8:	4618      	mov	r0, r3
 80001fa:	f009 f8b7 	bl	800936c <strncpy>
	strncpy(co2_1, (char*)&RS_rxBuffer[13], 5);   // Tách phần tử
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	f103 010d 	add.w	r1, r3, #13
 8000204:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000208:	2205      	movs	r2, #5
 800020a:	4618      	mov	r0, r3
 800020c:	f009 f8ae 	bl	800936c <strncpy>
	strncpy(time_buf_2, (char*)&RS_rxBuffer[18], 6);   // Tách phần tử
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f103 0112 	add.w	r1, r3, #18
 8000216:	f107 0320 	add.w	r3, r7, #32
 800021a:	2206      	movs	r2, #6
 800021c:	4618      	mov	r0, r3
 800021e:	f009 f8a5 	bl	800936c <strncpy>
	strncpy(co_2, (char*)&RS_rxBuffer[24], 5);     // Tách phần tử
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f103 0118 	add.w	r1, r3, #24
 8000228:	f107 0318 	add.w	r3, r7, #24
 800022c:	2205      	movs	r2, #5
 800022e:	4618      	mov	r0, r3
 8000230:	f009 f89c 	bl	800936c <strncpy>
	strncpy(co2_2, (char*)&RS_rxBuffer[29], 5);   // Tách phần tử
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	f103 011d 	add.w	r1, r3, #29
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	2205      	movs	r2, #5
 8000240:	4618      	mov	r0, r3
 8000242:	f009 f893 	bl	800936c <strncpy>

	ppm1->CO_ppm = atoi(co_1);
 8000246:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800024a:	4618      	mov	r0, r3
 800024c:	f008 fffe 	bl	800924c <atoi>
 8000250:	4602      	mov	r2, r0
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	605a      	str	r2, [r3, #4]
    ppm1->CO2_ppm = atoi(co2_1);
 8000256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800025a:	4618      	mov	r0, r3
 800025c:	f008 fff6 	bl	800924c <atoi>
 8000260:	4602      	mov	r2, r0
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	609a      	str	r2, [r3, #8]
	ppm1->time= atoi(time_buf_1);
 8000266:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800026a:	4618      	mov	r0, r3
 800026c:	f008 ffee 	bl	800924c <atoi>
 8000270:	4602      	mov	r2, r0
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]

	ppm2->CO_ppm = atoi(co_2);
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	4618      	mov	r0, r3
 800027c:	f008 ffe6 	bl	800924c <atoi>
 8000280:	4602      	mov	r2, r0
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	605a      	str	r2, [r3, #4]
    ppm2->CO2_ppm = atoi(co2_2);
 8000286:	f107 0310 	add.w	r3, r7, #16
 800028a:	4618      	mov	r0, r3
 800028c:	f008 ffde 	bl	800924c <atoi>
 8000290:	4602      	mov	r2, r0
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]
	ppm2->time= atoi(time_buf_2);
 8000296:	f107 0320 	add.w	r3, r7, #32
 800029a:	4618      	mov	r0, r3
 800029c:	f008 ffd6 	bl	800924c <atoi>
 80002a0:	4602      	mov	r2, r0
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	@ 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <check_disconnected>:
int check_disconnected (int node)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	if(node==1)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d109      	bne.n	80002d2 <check_disconnected+0x22>
	{
		if(ppm_data_1.time -ppm1_time_temp ==0)
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <check_disconnected+0x48>)
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <check_disconnected+0x4c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d101      	bne.n	80002ce <check_disconnected+0x1e>
		{
			return 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	e00e      	b.n	80002ec <check_disconnected+0x3c>
		}
		else
		{
			return 1;
 80002ce:	2301      	movs	r3, #1
 80002d0:	e00c      	b.n	80002ec <check_disconnected+0x3c>
		}
	}
	if(node==2)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d109      	bne.n	80002ec <check_disconnected+0x3c>
	{
		if(ppm_data_2.time - ppm2_time_temp ==0)
 80002d8:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <check_disconnected+0x50>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <check_disconnected+0x54>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d101      	bne.n	80002e8 <check_disconnected+0x38>
		{
			return 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	e001      	b.n	80002ec <check_disconnected+0x3c>
		}
		else
		{
			return 1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	e7ff      	b.n	80002ec <check_disconnected+0x3c>
		}
	}
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	2000022c 	.word	0x2000022c
 80002fc:	20000250 	.word	0x20000250
 8000300:	20000238 	.word	0x20000238
 8000304:	2000024c 	.word	0x2000024c

08000308 <Change_Time_Read_Data>:
void Change_Time_Read_Data()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 800030c:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <Change_Time_Read_Data+0xb0>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000314:	dc1c      	bgt.n	8000350 <Change_Time_Read_Data+0x48>
 8000316:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <Change_Time_Read_Data+0xb0>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	2b19      	cmp	r3, #25
 800031c:	dc18      	bgt.n	8000350 <Change_Time_Read_Data+0x48>
 800031e:	4b27      	ldr	r3, [pc, #156]	@ (80003bc <Change_Time_Read_Data+0xb4>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000326:	dc13      	bgt.n	8000350 <Change_Time_Read_Data+0x48>
 8000328:	4b24      	ldr	r3, [pc, #144]	@ (80003bc <Change_Time_Read_Data+0xb4>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	2b19      	cmp	r3, #25
 800032e:	dc0f      	bgt.n	8000350 <Change_Time_Read_Data+0x48>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8000330:	4823      	ldr	r0, [pc, #140]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 8000332:	f003 f9dd 	bl	80036f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, T3);     // Cập nhật chu kỳ
 8000336:	4b22      	ldr	r3, [pc, #136]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f241 7270 	movw	r2, #6000	@ 0x1770
 800033e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000340:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 8000342:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000346:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 8000348:	481d      	ldr	r0, [pc, #116]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 800034a:	f003 f97f 	bl	800364c <HAL_TIM_Base_Start_IT>
 800034e:	e031      	b.n	80003b4 <Change_Time_Read_Data+0xac>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=25 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 8000350:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <Change_Time_Read_Data+0xb0>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000358:	da0c      	bge.n	8000374 <Change_Time_Read_Data+0x6c>
 800035a:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <Change_Time_Read_Data+0xb0>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	2b18      	cmp	r3, #24
 8000360:	dc08      	bgt.n	8000374 <Change_Time_Read_Data+0x6c>
 8000362:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <Change_Time_Read_Data+0xb4>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800036a:	da03      	bge.n	8000374 <Change_Time_Read_Data+0x6c>
 800036c:	4b13      	ldr	r3, [pc, #76]	@ (80003bc <Change_Time_Read_Data+0xb4>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	2b31      	cmp	r3, #49	@ 0x31
 8000372:	dd0f      	ble.n	8000394 <Change_Time_Read_Data+0x8c>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8000374:	4812      	ldr	r0, [pc, #72]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 8000376:	f003 f9bb 	bl	80036f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, T1);     // Cập nhật chu kỳ
 800037a:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000382:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 8000386:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800038a:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 800038c:	480c      	ldr	r0, [pc, #48]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 800038e:	f003 f95d 	bl	800364c <HAL_TIM_Base_Start_IT>
 8000392:	e00f      	b.n	80003b4 <Change_Time_Read_Data+0xac>
	}
	else
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8000394:	480a      	ldr	r0, [pc, #40]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 8000396:	f003 f9ab 	bl	80036f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, T2);     // Cập nhật chu kỳ
 800039a:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80003a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 80003a6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80003aa:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 80003ac:	4804      	ldr	r0, [pc, #16]	@ (80003c0 <Change_Time_Read_Data+0xb8>)
 80003ae:	f003 f94d 	bl	800364c <HAL_TIM_Base_Start_IT>
	}
}
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000022c 	.word	0x2000022c
 80003bc:	20000238 	.word	0x20000238
 80003c0:	20000254 	.word	0x20000254

080003c4 <HAL_TIM_PeriodElapsedCallback>:
// gửi lệnh đ�?c v�? node đo theo th�?i gian
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80003d4:	d147      	bne.n	8000466 <HAL_TIM_PeriodElapsedCallback+0xa2>
    {
    	if(receive_node_tong_flag==1)
 80003d6:	4b26      	ldr	r3, [pc, #152]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d137      	bne.n	800044e <HAL_TIM_PeriodElapsedCallback+0x8a>
    	{
			if(node_tong_to_node_1_error==1 && node_tong_to_node_2_error==0)
 80003de:	4b25      	ldr	r3, [pc, #148]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d10b      	bne.n	80003fe <HAL_TIM_PeriodElapsedCallback+0x3a>
 80003e6:	4b24      	ldr	r3, [pc, #144]	@ (8000478 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d107      	bne.n	80003fe <HAL_TIM_PeriodElapsedCallback+0x3a>
			{
				RS485_SendCommand(0x11, 0x21);  // Gửi lệnh "21" tới
 80003ee:	2121      	movs	r1, #33	@ 0x21
 80003f0:	2011      	movs	r0, #17
 80003f2:	f7ff feab 	bl	800014c <RS485_SendCommand>
				receive_node_tong_flag=0;
 80003f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	e033      	b.n	8000466 <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
			else if (node_tong_to_node_1_error==0 && node_tong_to_node_2_error==1)
 80003fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d10b      	bne.n	800041e <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000406:	4b1c      	ldr	r3, [pc, #112]	@ (8000478 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d107      	bne.n	800041e <HAL_TIM_PeriodElapsedCallback+0x5a>
			{
				RS485_SendCommand(0x11, 0x22);  // Gửi lệnh "22" tới
 800040e:	2122      	movs	r1, #34	@ 0x22
 8000410:	2011      	movs	r0, #17
 8000412:	f7ff fe9b 	bl	800014c <RS485_SendCommand>
				receive_node_tong_flag=0;
 8000416:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e023      	b.n	8000466 <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
			else if (node_tong_to_node_1_error==1 && node_tong_to_node_2_error==1)
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10b      	bne.n	800043e <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000426:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d107      	bne.n	800043e <HAL_TIM_PeriodElapsedCallback+0x7a>
			{
				RS485_SendCommand(0x11, 0x23);  // Gửi lệnh "22" tới
 800042e:	2123      	movs	r1, #35	@ 0x23
 8000430:	2011      	movs	r0, #17
 8000432:	f7ff fe8b 	bl	800014c <RS485_SendCommand>
				receive_node_tong_flag=0;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	e013      	b.n	8000466 <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
			else
			{
				RS485_SendCommand(0x11, 0x02);  // Gửi lệnh "02" tới
 800043e:	2102      	movs	r1, #2
 8000440:	2011      	movs	r0, #17
 8000442:	f7ff fe83 	bl	800014c <RS485_SendCommand>
				receive_node_tong_flag=0;
 8000446:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
		{
        	RS485_SendCommand(0x11, 0x03);  // Gửi lệnh "03"
        	receive_node_tong_flag=0;
		}
    }
}
 800044c:	e00b      	b.n	8000466 <HAL_TIM_PeriodElapsedCallback+0xa2>
    	else if(receive_node_tong_flag==0)
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d107      	bne.n	8000466 <HAL_TIM_PeriodElapsedCallback+0xa2>
        	RS485_SendCommand(0x11, 0x03);  // Gửi lệnh "03"
 8000456:	2103      	movs	r1, #3
 8000458:	2011      	movs	r0, #17
 800045a:	f7ff fe77 	bl	800014c <RS485_SendCommand>
        	receive_node_tong_flag=0;
 800045e:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
}
 8000464:	e7ff      	b.n	8000466 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000000 	.word	0x20000000
 8000474:	20000244 	.word	0x20000244
 8000478:	20000248 	.word	0x20000248

0800047c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	// Nhận dữ liệu từ node tổng
    if (huart->Instance == USART1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a3b      	ldr	r2, [pc, #236]	@ (8000578 <HAL_UART_RxCpltCallback+0xfc>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d16a      	bne.n	8000564 <HAL_UART_RxCpltCallback+0xe8>
    {
        if (RS_rxBuffer[0] == 0x11)
 800048e:	4b3b      	ldr	r3, [pc, #236]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b11      	cmp	r3, #17
 8000494:	d166      	bne.n	8000564 <HAL_UART_RxCpltCallback+0xe8>
           { // Kiểm tra địa chỉ node tong
        	 if(RS_rxBuffer[1] == 0x02)
 8000496:	4b39      	ldr	r3, [pc, #228]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 8000498:	785b      	ldrb	r3, [r3, #1]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d13c      	bne.n	8000518 <HAL_UART_RxCpltCallback+0x9c>
        	 {
				 ppm1_time_temp= ppm_data_1.time;
 800049e:	4b38      	ldr	r3, [pc, #224]	@ (8000580 <HAL_UART_RxCpltCallback+0x104>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a38      	ldr	r2, [pc, #224]	@ (8000584 <HAL_UART_RxCpltCallback+0x108>)
 80004a4:	6013      	str	r3, [r2, #0]
				 ppm2_time_temp=ppm_data_2.time;
 80004a6:	4b38      	ldr	r3, [pc, #224]	@ (8000588 <HAL_UART_RxCpltCallback+0x10c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a38      	ldr	r2, [pc, #224]	@ (800058c <HAL_UART_RxCpltCallback+0x110>)
 80004ac:	6013      	str	r3, [r2, #0]
				decode_ppm_2_ver2((char*)RS_rxBuffer,&ppm_data_1,&ppm_data_2);
 80004ae:	4a36      	ldr	r2, [pc, #216]	@ (8000588 <HAL_UART_RxCpltCallback+0x10c>)
 80004b0:	4933      	ldr	r1, [pc, #204]	@ (8000580 <HAL_UART_RxCpltCallback+0x104>)
 80004b2:	4832      	ldr	r0, [pc, #200]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 80004b4:	f7ff fe6a 	bl	800018c <decode_ppm_2_ver2>
				Change_Time_Read_Data();
 80004b8:	f7ff ff26 	bl	8000308 <Change_Time_Read_Data>
				receive_node_tong_flag=1; // c�? nhận được dữ liệu từ node tong
 80004bc:	4b34      	ldr	r3, [pc, #208]	@ (8000590 <HAL_UART_RxCpltCallback+0x114>)
 80004be:	2201      	movs	r2, #1
 80004c0:	601a      	str	r2, [r3, #0]
				RS485_SendCommand(0x01, 0xFF); //FF = OK
 80004c2:	21ff      	movs	r1, #255	@ 0xff
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff fe41 	bl	800014c <RS485_SendCommand>
				CDC_Transmit_FS(RS_rxBuffer, 40); // gui qua USB thang chuoi RS_rx
 80004ca:	2128      	movs	r1, #40	@ 0x28
 80004cc:	482b      	ldr	r0, [pc, #172]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 80004ce:	f008 fadf 	bl	8008a90 <CDC_Transmit_FS>
				if(check_disconnected (1)==0 && ppm1_time_temp!=0) // ppm1_time_temp khác 0 mới lỗi vì khi gửi các chuỗi của node 2 thì các số liệu node 1=0 hết
 80004d2:	2001      	movs	r0, #1
 80004d4:	f7ff feec 	bl	80002b0 <check_disconnected>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d107      	bne.n	80004ee <HAL_UART_RxCpltCallback+0x72>
 80004de:	4b29      	ldr	r3, [pc, #164]	@ (8000584 <HAL_UART_RxCpltCallback+0x108>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d003      	beq.n	80004ee <HAL_UART_RxCpltCallback+0x72>
				{
					node_tong_to_node_1_error =1;
 80004e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000594 <HAL_UART_RxCpltCallback+0x118>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	e002      	b.n	80004f4 <HAL_UART_RxCpltCallback+0x78>
				}
				else
				{
					node_tong_to_node_1_error=0;
 80004ee:	4b29      	ldr	r3, [pc, #164]	@ (8000594 <HAL_UART_RxCpltCallback+0x118>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
				}
				if(check_disconnected (2)==0 && ppm1_time_temp!=0)
 80004f4:	2002      	movs	r0, #2
 80004f6:	f7ff fedb 	bl	80002b0 <check_disconnected>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d107      	bne.n	8000510 <HAL_UART_RxCpltCallback+0x94>
 8000500:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <HAL_UART_RxCpltCallback+0x108>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d003      	beq.n	8000510 <HAL_UART_RxCpltCallback+0x94>
				{
					node_tong_to_node_2_error =1;
 8000508:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <HAL_UART_RxCpltCallback+0x11c>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e029      	b.n	8000564 <HAL_UART_RxCpltCallback+0xe8>
				}
				else
				{
					node_tong_to_node_2_error=0;
 8000510:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <HAL_UART_RxCpltCallback+0x11c>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e025      	b.n	8000564 <HAL_UART_RxCpltCallback+0xe8>
				}
				// gui qua USB thang chuoi RS_rx
        	 }
        	 else if(RS_rxBuffer[1] == 0x03) // nhan nhieu du lieu
 8000518:	4b18      	ldr	r3, [pc, #96]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 800051a:	785b      	ldrb	r3, [r3, #1]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d108      	bne.n	8000532 <HAL_UART_RxCpltCallback+0xb6>
        	 {
        		 CDC_Transmit_FS(RS_rxBuffer, 40); // gui qua USB thang chuoi RS_rx
 8000520:	2128      	movs	r1, #40	@ 0x28
 8000522:	4816      	ldr	r0, [pc, #88]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 8000524:	f008 fab4 	bl	8008a90 <CDC_Transmit_FS>
         		RS485_SendCommand(0x01, 0xEE); // gui ve node do la da luu thanh cong
 8000528:	21ee      	movs	r1, #238	@ 0xee
 800052a:	2001      	movs	r0, #1
 800052c:	f7ff fe0e 	bl	800014c <RS485_SendCommand>
 8000530:	e018      	b.n	8000564 <HAL_UART_RxCpltCallback+0xe8>
        	 }
        	 else if(RS_rxBuffer[1] == 0x21)
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 8000534:	785b      	ldrb	r3, [r3, #1]
 8000536:	2b21      	cmp	r3, #33	@ 0x21
 8000538:	d108      	bne.n	800054c <HAL_UART_RxCpltCallback+0xd0>
        	 {
        		 CDC_Transmit_FS(RS_rxBuffer, 40); // gui qua USB thang chuoi RS_rx
 800053a:	2128      	movs	r1, #40	@ 0x28
 800053c:	480f      	ldr	r0, [pc, #60]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 800053e:	f008 faa7 	bl	8008a90 <CDC_Transmit_FS>
        		 RS485_SendCommand(0x01, 0xDD); // gui ve node do la da gui thanh cong 1 chuoi de con gui tiep
 8000542:	21dd      	movs	r1, #221	@ 0xdd
 8000544:	2001      	movs	r0, #1
 8000546:	f7ff fe01 	bl	800014c <RS485_SendCommand>
 800054a:	e00b      	b.n	8000564 <HAL_UART_RxCpltCallback+0xe8>
        	 }
        	 else if(RS_rxBuffer[1] == 0x22)
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 800054e:	785b      	ldrb	r3, [r3, #1]
 8000550:	2b22      	cmp	r3, #34	@ 0x22
 8000552:	d107      	bne.n	8000564 <HAL_UART_RxCpltCallback+0xe8>
        	 {
        		 CDC_Transmit_FS(RS_rxBuffer, 40); // gui qua USB thang chuoi RS_rx
 8000554:	2128      	movs	r1, #40	@ 0x28
 8000556:	4809      	ldr	r0, [pc, #36]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 8000558:	f008 fa9a 	bl	8008a90 <CDC_Transmit_FS>
        		 RS485_SendCommand(0x01, 0xCC); // gui ve node do la da gui thanh cong 1 chuoi de con gui tiep
 800055c:	21cc      	movs	r1, #204	@ 0xcc
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fdf4 	bl	800014c <RS485_SendCommand>
//        		 RS485_SendCommand(0x01, 0xBB); // gui ve node do la da gui thanh cong 1 chuoi de con gui tiep
//        	 }
           }
     }
        // Tiếp tục nhận
        HAL_UART_Receive_IT(&huart1, RS_rxBuffer, 40);
 8000564:	2228      	movs	r2, #40	@ 0x28
 8000566:	4905      	ldr	r1, [pc, #20]	@ (800057c <HAL_UART_RxCpltCallback+0x100>)
 8000568:	480c      	ldr	r0, [pc, #48]	@ (800059c <HAL_UART_RxCpltCallback+0x120>)
 800056a:	f003 fd1a 	bl	8003fa2 <HAL_UART_Receive_IT>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40013800 	.word	0x40013800
 800057c:	20000204 	.word	0x20000204
 8000580:	2000022c 	.word	0x2000022c
 8000584:	20000250 	.word	0x20000250
 8000588:	20000238 	.word	0x20000238
 800058c:	2000024c 	.word	0x2000024c
 8000590:	20000000 	.word	0x20000000
 8000594:	20000244 	.word	0x20000244
 8000598:	20000248 	.word	0x20000248
 800059c:	2000029c 	.word	0x2000029c

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fa36 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f818 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f8ea 	bl	8000784 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f8be 	bl	8000730 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f008 f984 	bl	80088c0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80005b8:	f000 f86c 	bl	8000694 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, RS_rxBuffer, 40); // nhận dữ liệu từ node đo
 80005bc:	2228      	movs	r2, #40	@ 0x28
 80005be:	4904      	ldr	r1, [pc, #16]	@ (80005d0 <main+0x30>)
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <main+0x34>)
 80005c2:	f003 fcee 	bl	8003fa2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <main+0x38>)
 80005c8:	f003 f840 	bl	800364c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x2c>
 80005d0:	20000204 	.word	0x20000204
 80005d4:	2000029c 	.word	0x2000029c
 80005d8:	20000254 	.word	0x20000254

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e6:	2228      	movs	r2, #40	@ 0x28
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f008 feb6 	bl	800935c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000628:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800062c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000632:	4618      	mov	r0, r3
 8000634:	f002 faf4 	bl	8002c20 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800063e:	f000 f8c3 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000652:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fd60 	bl	8003124 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800066a:	f000 f8ad 	bl	80007c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800066e:	2310      	movs	r3, #16
 8000670:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000676:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fee0 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000686:	f000 f89f 	bl	80007c8 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_TIM2_Init+0x98>)
 80006b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <MX_TIM2_Init+0x98>)
 80006ba:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80006be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_TIM2_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000;
 80006c6:	4b19      	ldr	r3, [pc, #100]	@ (800072c <MX_TIM2_Init+0x98>)
 80006c8:	f241 7270 	movw	r2, #6000	@ 0x1770
 80006cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_TIM2_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_TIM2_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006da:	4814      	ldr	r0, [pc, #80]	@ (800072c <MX_TIM2_Init+0x98>)
 80006dc:	f002 ff66 	bl	80035ac <HAL_TIM_Base_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006e6:	f000 f86f 	bl	80007c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4619      	mov	r1, r3
 80006f6:	480d      	ldr	r0, [pc, #52]	@ (800072c <MX_TIM2_Init+0x98>)
 80006f8:	f003 f918 	bl	800392c <HAL_TIM_ConfigClockSource>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000702:	f000 f861 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	@ (800072c <MX_TIM2_Init+0x98>)
 8000714:	f003 fafa 	bl	8003d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800071e:	f000 f853 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000254 	.word	0x20000254

08000730 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_USART1_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000768:	f003 fb40 	bl	8003dec <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f829 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000029c 	.word	0x2000029c
 8000780:	40013800 	.word	0x40013800

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_GPIO_Init+0x40>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <MX_GPIO_Init+0x40>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_GPIO_Init+0x40>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_GPIO_Init+0x40>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a07      	ldr	r2, [pc, #28]	@ (80007c4 <MX_GPIO_Init+0x40>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <MX_GPIO_Init+0x40>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_MspInit+0x5c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <HAL_MspInit+0x5c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_MspInit+0x5c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_MspInit+0x5c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <HAL_MspInit+0x5c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_MspInit+0x5c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_MspInit+0x60>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <HAL_MspInit+0x60>)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000

08000838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000848:	d113      	bne.n	8000872 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_TIM_Base_MspInit+0x44>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <HAL_TIM_Base_MspInit+0x44>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_TIM_Base_MspInit+0x44>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2103      	movs	r1, #3
 8000866:	201c      	movs	r0, #28
 8000868:	f000 fa0d 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800086c:	201c      	movs	r0, #28
 800086e:	f000 fa26 	bl	8000cbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a20      	ldr	r2, [pc, #128]	@ (800091c <HAL_UART_MspInit+0x9c>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d139      	bne.n	8000914 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <HAL_UART_MspInit+0xa0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000920 <HAL_UART_MspInit+0xa0>)
 80008a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <HAL_UART_MspInit+0xa0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <HAL_UART_MspInit+0xa0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_UART_MspInit+0xa0>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <HAL_UART_MspInit+0xa0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4619      	mov	r1, r3
 80008e4:	480f      	ldr	r0, [pc, #60]	@ (8000924 <HAL_UART_MspInit+0xa4>)
 80008e6:	f000 fab7 	bl	8000e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	4809      	ldr	r0, [pc, #36]	@ (8000924 <HAL_UART_MspInit+0xa4>)
 8000900:	f000 faaa 	bl	8000e58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2025      	movs	r0, #37	@ 0x25
 800090a:	f000 f9bc 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800090e:	2025      	movs	r0, #37	@ 0x25
 8000910:	f000 f9d5 	bl	8000cbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40013800 	.word	0x40013800
 8000920:	40021000 	.word	0x40021000
 8000924:	40010800 	.word	0x40010800

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f892 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000986:	f000 fd07 	bl	8001398 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000fb0 	.word	0x20000fb0

08000994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <TIM2_IRQHandler+0x10>)
 800099a:	f002 fed7 	bl	800374c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000254 	.word	0x20000254

080009a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <USART1_IRQHandler+0x10>)
 80009ae:	f003 fb1d 	bl	8003fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000029c 	.word	0x2000029c

080009bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c8:	f7ff fff8 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480b      	ldr	r0, [pc, #44]	@ (80009fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ce:	490c      	ldr	r1, [pc, #48]	@ (8000a00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000a04 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a09      	ldr	r2, [pc, #36]	@ (8000a08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009e4:	4c09      	ldr	r4, [pc, #36]	@ (8000a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f008 fcd5 	bl	80093a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fdd3 	bl	80005a0 <main>
  bx lr
 80009fa:	4770      	bx	lr
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000a04:	080095a8 	.word	0x080095a8
  ldr r2, =_sbss
 8000a08:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000a0c:	200015e0 	.word	0x200015e0

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <HAL_Init+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <HAL_Init+0x28>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f923 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff fed0 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f93b 	bl	8000cda <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 f903 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	@ (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000004 	.word	0x20000004
 8000a98:	2000000c 	.word	0x2000000c
 8000a9c:	20000008 	.word	0x20000008

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	2000000c 	.word	0x2000000c
 8000ac0:	200002e4 	.word	0x200002e4

08000ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	@ (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	200002e4 	.word	0x200002e4

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4906      	ldr	r1, [pc, #24]	@ (8000b70 <__NVIC_EnableIRQ+0x34>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff90 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff2d 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff42 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5f 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff35 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa2 	bl	8000c2c <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d008      	beq.n	8000d1c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e020      	b.n	8000d5e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 020e 	bic.w	r2, r2, #14
 8000d2a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0201 	bic.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d005      	beq.n	8000d8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2204      	movs	r2, #4
 8000d84:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e051      	b.n	8000e30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 020e 	bic.w	r2, r2, #14
 8000d9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0201 	bic.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a22      	ldr	r2, [pc, #136]	@ (8000e3c <HAL_DMA_Abort_IT+0xd4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d029      	beq.n	8000e0a <HAL_DMA_Abort_IT+0xa2>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a21      	ldr	r2, [pc, #132]	@ (8000e40 <HAL_DMA_Abort_IT+0xd8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d022      	beq.n	8000e06 <HAL_DMA_Abort_IT+0x9e>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e44 <HAL_DMA_Abort_IT+0xdc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d01a      	beq.n	8000e00 <HAL_DMA_Abort_IT+0x98>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1e      	ldr	r2, [pc, #120]	@ (8000e48 <HAL_DMA_Abort_IT+0xe0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d012      	beq.n	8000dfa <HAL_DMA_Abort_IT+0x92>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <HAL_DMA_Abort_IT+0xe4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00a      	beq.n	8000df4 <HAL_DMA_Abort_IT+0x8c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <HAL_DMA_Abort_IT+0xe8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d102      	bne.n	8000dee <HAL_DMA_Abort_IT+0x86>
 8000de8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dec:	e00e      	b.n	8000e0c <HAL_DMA_Abort_IT+0xa4>
 8000dee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000df2:	e00b      	b.n	8000e0c <HAL_DMA_Abort_IT+0xa4>
 8000df4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df8:	e008      	b.n	8000e0c <HAL_DMA_Abort_IT+0xa4>
 8000dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfe:	e005      	b.n	8000e0c <HAL_DMA_Abort_IT+0xa4>
 8000e00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e04:	e002      	b.n	8000e0c <HAL_DMA_Abort_IT+0xa4>
 8000e06:	2310      	movs	r3, #16
 8000e08:	e000      	b.n	8000e0c <HAL_DMA_Abort_IT+0xa4>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	4a11      	ldr	r2, [pc, #68]	@ (8000e54 <HAL_DMA_Abort_IT+0xec>)
 8000e0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
    } 
  }
  return status;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020008 	.word	0x40020008
 8000e40:	4002001c 	.word	0x4002001c
 8000e44:	40020030 	.word	0x40020030
 8000e48:	40020044 	.word	0x40020044
 8000e4c:	40020058 	.word	0x40020058
 8000e50:	4002006c 	.word	0x4002006c
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b08b      	sub	sp, #44	@ 0x2c
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e169      	b.n	8001140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	f040 8158 	bne.w	800113a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4a9a      	ldr	r2, [pc, #616]	@ (80010f8 <HAL_GPIO_Init+0x2a0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d05e      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000e94:	4a98      	ldr	r2, [pc, #608]	@ (80010f8 <HAL_GPIO_Init+0x2a0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d875      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000e9a:	4a98      	ldr	r2, [pc, #608]	@ (80010fc <HAL_GPIO_Init+0x2a4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d058      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000ea0:	4a96      	ldr	r2, [pc, #600]	@ (80010fc <HAL_GPIO_Init+0x2a4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d86f      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ea6:	4a96      	ldr	r2, [pc, #600]	@ (8001100 <HAL_GPIO_Init+0x2a8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d052      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000eac:	4a94      	ldr	r2, [pc, #592]	@ (8001100 <HAL_GPIO_Init+0x2a8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d869      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000eb2:	4a94      	ldr	r2, [pc, #592]	@ (8001104 <HAL_GPIO_Init+0x2ac>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d04c      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a92      	ldr	r2, [pc, #584]	@ (8001104 <HAL_GPIO_Init+0x2ac>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d863      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ebe:	4a92      	ldr	r2, [pc, #584]	@ (8001108 <HAL_GPIO_Init+0x2b0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d046      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000ec4:	4a90      	ldr	r2, [pc, #576]	@ (8001108 <HAL_GPIO_Init+0x2b0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d85d      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d82a      	bhi.n	8000f24 <HAL_GPIO_Init+0xcc>
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d859      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <HAL_GPIO_Init+0x80>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f2d 	.word	0x08000f2d
 8000ee0:	08000f3f 	.word	0x08000f3f
 8000ee4:	08000f81 	.word	0x08000f81
 8000ee8:	08000f87 	.word	0x08000f87
 8000eec:	08000f87 	.word	0x08000f87
 8000ef0:	08000f87 	.word	0x08000f87
 8000ef4:	08000f87 	.word	0x08000f87
 8000ef8:	08000f87 	.word	0x08000f87
 8000efc:	08000f87 	.word	0x08000f87
 8000f00:	08000f87 	.word	0x08000f87
 8000f04:	08000f87 	.word	0x08000f87
 8000f08:	08000f87 	.word	0x08000f87
 8000f0c:	08000f87 	.word	0x08000f87
 8000f10:	08000f87 	.word	0x08000f87
 8000f14:	08000f87 	.word	0x08000f87
 8000f18:	08000f87 	.word	0x08000f87
 8000f1c:	08000f35 	.word	0x08000f35
 8000f20:	08000f49 	.word	0x08000f49
 8000f24:	4a79      	ldr	r2, [pc, #484]	@ (800110c <HAL_GPIO_Init+0x2b4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f2a:	e02c      	b.n	8000f86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e029      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	623b      	str	r3, [r7, #32]
          break;
 8000f3c:	e024      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	3308      	adds	r3, #8
 8000f44:	623b      	str	r3, [r7, #32]
          break;
 8000f46:	e01f      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	330c      	adds	r3, #12
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e01a      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e013      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d105      	bne.n	8000f74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	611a      	str	r2, [r3, #16]
          break;
 8000f72:	e009      	b.n	8000f88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f74:	2308      	movs	r3, #8
 8000f76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	615a      	str	r2, [r3, #20]
          break;
 8000f7e:	e003      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          break;
 8000f86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2bff      	cmp	r3, #255	@ 0xff
 8000f8c:	d801      	bhi.n	8000f92 <HAL_GPIO_Init+0x13a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	e001      	b.n	8000f96 <HAL_GPIO_Init+0x13e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2bff      	cmp	r3, #255	@ 0xff
 8000f9c:	d802      	bhi.n	8000fa4 <HAL_GPIO_Init+0x14c>
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x152>
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa6:	3b08      	subs	r3, #8
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	401a      	ands	r2, r3
 8000fbc:	6a39      	ldr	r1, [r7, #32]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80b1 	beq.w	800113a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	@ (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ff0:	4a48      	ldr	r2, [pc, #288]	@ (8001114 <HAL_GPIO_Init+0x2bc>)
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a40      	ldr	r2, [pc, #256]	@ (8001118 <HAL_GPIO_Init+0x2c0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d013      	beq.n	8001044 <HAL_GPIO_Init+0x1ec>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a3f      	ldr	r2, [pc, #252]	@ (800111c <HAL_GPIO_Init+0x2c4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00d      	beq.n	8001040 <HAL_GPIO_Init+0x1e8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a3e      	ldr	r2, [pc, #248]	@ (8001120 <HAL_GPIO_Init+0x2c8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x1e4>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3d      	ldr	r2, [pc, #244]	@ (8001124 <HAL_GPIO_Init+0x2cc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <HAL_GPIO_Init+0x1e0>
 8001034:	2303      	movs	r3, #3
 8001036:	e006      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001038:	2304      	movs	r3, #4
 800103a:	e004      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 800103c:	2302      	movs	r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001044:	2300      	movs	r3, #0
 8001046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001048:	f002 0203 	and.w	r2, r2, #3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4093      	lsls	r3, r2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001056:	492f      	ldr	r1, [pc, #188]	@ (8001114 <HAL_GPIO_Init+0x2bc>)
 8001058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001070:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	492c      	ldr	r1, [pc, #176]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	608b      	str	r3, [r1, #8]
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800107e:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	43db      	mvns	r3, r3
 8001086:	4928      	ldr	r1, [pc, #160]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 8001088:	4013      	ands	r3, r2
 800108a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001098:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	4922      	ldr	r1, [pc, #136]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	60cb      	str	r3, [r1, #12]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	491e      	ldr	r1, [pc, #120]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4918      	ldr	r1, [pc, #96]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4914      	ldr	r1, [pc, #80]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d021      	beq.n	800112c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	490e      	ldr	r1, [pc, #56]	@ (8001128 <HAL_GPIO_Init+0x2d0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	e021      	b.n	800113a <HAL_GPIO_Init+0x2e2>
 80010f6:	bf00      	nop
 80010f8:	10320000 	.word	0x10320000
 80010fc:	10310000 	.word	0x10310000
 8001100:	10220000 	.word	0x10220000
 8001104:	10210000 	.word	0x10210000
 8001108:	10120000 	.word	0x10120000
 800110c:	10110000 	.word	0x10110000
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40011000 	.word	0x40011000
 8001124:	40011400 	.word	0x40011400
 8001128:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <HAL_GPIO_Init+0x304>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	43db      	mvns	r3, r3
 8001134:	4909      	ldr	r1, [pc, #36]	@ (800115c <HAL_GPIO_Init+0x304>)
 8001136:	4013      	ands	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	3301      	adds	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	f47f ae8e 	bne.w	8000e6c <HAL_GPIO_Init+0x14>
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	372c      	adds	r7, #44	@ 0x2c
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e0e8      	b.n	8001344 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f007 fdb6 	bl	8008cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2203      	movs	r2, #3
 8001190:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fcb1 	bl	8004b06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3304      	adds	r3, #4
 80011ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ae:	f003 fc87 	bl	8004ac0 <USB_CoreInit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2202      	movs	r2, #2
 80011bc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0bf      	b.n	8001344 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fcb5 	bl	8004b3a <USB_SetCurrentMode>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2202      	movs	r2, #2
 80011da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0b0      	b.n	8001344 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e03e      	b.n	8001266 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3311      	adds	r3, #17
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3310      	adds	r3, #16
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	3313      	adds	r3, #19
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3320      	adds	r3, #32
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	3324      	adds	r3, #36	@ 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	3301      	adds	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	791b      	ldrb	r3, [r3, #4]
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3bb      	bcc.n	80011e8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e044      	b.n	8001300 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	440b      	add	r3, r1
 80012f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	3301      	adds	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	429a      	cmp	r2, r3
 8001308:	d3b5      	bcc.n	8001276 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001314:	f003 fc1d 	bl	8004b52 <USB_DevInit>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2202      	movs	r2, #2
 8001322:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00c      	b.n	8001344 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f005 fe9c 	bl	800707a <USB_DevDisconnect>

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_PCD_Start+0x16>
 800135e:	2302      	movs	r3, #2
 8001360:	e016      	b.n	8001390 <HAL_PCD_Start+0x44>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fbb3 	bl	8004ada <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001374:	2101      	movs	r1, #1
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f007 ff31 	bl	80091de <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fe70 	bl	8007066 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 fe72 	bl	800708e <USB_ReadInterrupts>
 80013aa:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fb1a 	bl	80019f0 <PCD_EP_ISR_Handler>

    return;
 80013bc:	e119      	b.n	80015f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013da:	b292      	uxth	r2, r2
 80013dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f007 fd04 	bl	8008dee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013e6:	2100      	movs	r1, #0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f905 	bl	80015f8 <HAL_PCD_SetAddress>

    return;
 80013ee:	e100      	b.n	80015f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00c      	beq.n	8001414 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800140c:	b292      	uxth	r2, r2
 800140e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001412:	e0ee      	b.n	80015f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00c      	beq.n	8001438 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001426:	b29a      	uxth	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001430:	b292      	uxth	r2, r2
 8001432:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001436:	e0dc      	b.n	80015f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d027      	beq.n	8001492 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0204 	bic.w	r2, r2, #4
 8001454:	b292      	uxth	r2, r2
 8001456:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0208 	bic.w	r2, r2, #8
 800146c:	b292      	uxth	r2, r2
 800146e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f007 fcf4 	bl	8008e60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800148a:	b292      	uxth	r2, r2
 800148c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001490:	e0af      	b.n	80015f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8083 	beq.w	80015a4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	77fb      	strb	r3, [r7, #31]
 80014a2:	e010      	b.n	80014c6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	441a      	add	r2, r3
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	8812      	ldrh	r2, [r2, #0]
 80014b4:	b292      	uxth	r2, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	3320      	adds	r3, #32
 80014ba:	443b      	add	r3, r7
 80014bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	3301      	adds	r3, #1
 80014c4:	77fb      	strb	r3, [r7, #31]
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	2b07      	cmp	r3, #7
 80014ca:	d9eb      	bls.n	80014a4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	b292      	uxth	r2, r2
 80014f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80014fc:	bf00      	nop
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001506:	b29b      	uxth	r3, r3
 8001508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f6      	beq.n	80014fe <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001518:	b29a      	uxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001522:	b292      	uxth	r2, r2
 8001524:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001528:	2300      	movs	r3, #0
 800152a:	77fb      	strb	r3, [r7, #31]
 800152c:	e00f      	b.n	800154e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800152e:	7ffb      	ldrb	r3, [r7, #31]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	4611      	mov	r1, r2
 8001536:	7ffa      	ldrb	r2, [r7, #31]
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	440a      	add	r2, r1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	3320      	adds	r3, #32
 8001540:	443b      	add	r3, r7
 8001542:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001546:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	3301      	adds	r3, #1
 800154c:	77fb      	strb	r3, [r7, #31]
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	2b07      	cmp	r3, #7
 8001552:	d9ec      	bls.n	800152e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0208 	orr.w	r2, r2, #8
 8001566:	b292      	uxth	r2, r2
 8001568:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800157e:	b292      	uxth	r2, r2
 8001580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0204 	orr.w	r2, r2, #4
 8001596:	b292      	uxth	r2, r2
 8001598:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f007 fc45 	bl	8008e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015a2:	e026      	b.n	80015f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00f      	beq.n	80015ce <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015c0:	b292      	uxth	r2, r2
 80015c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f007 fc03 	bl	8008dd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015cc:	e011      	b.n	80015f2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00c      	beq.n	80015f2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015f0:	bf00      	nop
  }
}
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_PCD_SetAddress+0x1a>
 800160e:	2302      	movs	r3, #2
 8001610:	e012      	b.n	8001638 <HAL_PCD_SetAddress+0x40>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f005 fd09 	bl	8007040 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	70fb      	strb	r3, [r7, #3]
 8001652:	460b      	mov	r3, r1
 8001654:	803b      	strh	r3, [r7, #0]
 8001656:	4613      	mov	r3, r2
 8001658:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800165e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001662:	2b00      	cmp	r3, #0
 8001664:	da0e      	bge.n	8001684 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	f003 0207 	and.w	r2, r3, #7
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	3310      	adds	r3, #16
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	705a      	strb	r2, [r3, #1]
 8001682:	e00e      	b.n	80016a2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	f003 0207 	and.w	r2, r3, #7
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016ae:	883a      	ldrh	r2, [r7, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	78ba      	ldrb	r2, [r7, #2]
 80016b8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016ba:	78bb      	ldrb	r3, [r7, #2]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d102      	bne.n	80016c6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_PCD_EP_Open+0x94>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e00e      	b.n	80016f2 <HAL_PCD_EP_Open+0xb2>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fa52 	bl	8004b8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80016f0:	7afb      	ldrb	r3, [r7, #11]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800170a:	2b00      	cmp	r3, #0
 800170c:	da0e      	bge.n	800172c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	f003 0207 	and.w	r2, r3, #7
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	3310      	adds	r3, #16
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2201      	movs	r2, #1
 8001728:	705a      	strb	r2, [r3, #1]
 800172a:	e00e      	b.n	800174a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0207 	and.w	r2, r3, #7
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	b2da      	uxtb	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_PCD_EP_Close+0x6a>
 8001760:	2302      	movs	r3, #2
 8001762:	e00e      	b.n	8001782 <HAL_PCD_EP_Close+0x88>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fdca 	bl	800530c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	460b      	mov	r3, r1
 8001798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	f003 0207 	and.w	r2, r3, #7
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2200      	movs	r2, #0
 80017c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6979      	ldr	r1, [r7, #20]
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 ff81 	bl	80056e4 <USB_EPStartXfer>

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	f003 0207 	and.w	r2, r3, #7
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	460b      	mov	r3, r1
 8001828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182a:	7afb      	ldrb	r3, [r7, #11]
 800182c:	f003 0207 	and.w	r2, r3, #7
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	3310      	adds	r3, #16
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2201      	movs	r2, #1
 8001864:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	b2da      	uxtb	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6979      	ldr	r1, [r7, #20]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 ff33 	bl	80056e4 <USB_EPStartXfer>

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	7912      	ldrb	r2, [r2, #4]
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e04c      	b.n	8001940 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da0e      	bge.n	80018cc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0207 	and.w	r2, r3, #7
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	3310      	adds	r3, #16
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	705a      	strb	r2, [r3, #1]
 80018ca:	e00c      	b.n	80018e6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_PCD_EP_SetStall+0x7e>
 8001902:	2302      	movs	r3, #2
 8001904:	e01c      	b.n	8001940 <HAL_PCD_EP_SetStall+0xb8>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68f9      	ldr	r1, [r7, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	f005 fa96 	bl	8006e46 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	2b00      	cmp	r3, #0
 8001922:	d108      	bne.n	8001936 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f005 fbbb 	bl	80070ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	7912      	ldrb	r2, [r2, #4]
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e040      	b.n	80019e8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	da0e      	bge.n	800198c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 0207 	and.w	r2, r3, #7
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	3310      	adds	r3, #16
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]
 800198a:	e00e      	b.n	80019aa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f003 0207 	and.w	r2, r3, #7
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_PCD_EP_ClrStall+0x82>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e00e      	b.n	80019e8 <HAL_PCD_EP_ClrStall+0xa0>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68f9      	ldr	r1, [r7, #12]
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 fa84 	bl	8006ee6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b096      	sub	sp, #88	@ 0x58
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019f8:	e3bb      	b.n	8002172 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001a14:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 8175 	bne.w	8001d08 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d14e      	bne.n	8001ac8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a3a:	81fb      	strh	r3, [r7, #14]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3310      	adds	r3, #16
 8001a52:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	441a      	add	r2, r3
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f007 f984 	bl	8008d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7b5b      	ldrb	r3, [r3, #13]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8368 	beq.w	8002172 <PCD_EP_ISR_Handler+0x782>
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 8363 	bne.w	8002172 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7b5b      	ldrb	r3, [r3, #13]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	735a      	strb	r2, [r3, #13]
 8001ac6:	e354      	b.n	8002172 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ace:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ada:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d034      	beq.n	8001b50 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	3306      	adds	r3, #6
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b10:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b22:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f005 fb11 	bl	800714c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b36:	4013      	ands	r3, r2
 8001b38:	823b      	strh	r3, [r7, #16]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	8a3a      	ldrh	r2, [r7, #16]
 8001b40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b44:	b292      	uxth	r2, r2
 8001b46:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f007 f8fb 	bl	8008d44 <HAL_PCD_SetupStageCallback>
 8001b4e:	e310      	b.n	8002172 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b50:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f280 830c 	bge.w	8002172 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b66:	4013      	ands	r3, r2
 8001b68:	83fb      	strh	r3, [r7, #30]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	8bfa      	ldrh	r2, [r7, #30]
 8001b70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b74:	b292      	uxth	r2, r2
 8001b76:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3306      	adds	r3, #6
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d019      	beq.n	8001be0 <PCD_EP_ISR_Handler+0x1f0>
 8001bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d015      	beq.n	8001be0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bba:	6959      	ldr	r1, [r3, #20]
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f005 fac1 	bl	800714c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	441a      	add	r2, r3
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f007 f8c4 	bl	8008d68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001bea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 82bd 	bne.w	8002172 <PCD_EP_ISR_Handler+0x782>
 8001bf8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bfc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001c00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001c04:	f000 82b5 	beq.w	8002172 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c3e:	d91d      	bls.n	8001c7c <PCD_EP_ISR_Handler+0x28c>
 8001c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <PCD_EP_ISR_Handler+0x26a>
 8001c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c56:	3b01      	subs	r3, #1
 8001c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	e026      	b.n	8001cca <PCD_EP_ISR_Handler+0x2da>
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <PCD_EP_ISR_Handler+0x2aa>
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	801a      	strh	r2, [r3, #0]
 8001c98:	e017      	b.n	8001cca <PCD_EP_ISR_Handler+0x2da>
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <PCD_EP_ISR_Handler+0x2c4>
 8001cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	029b      	lsls	r3, r3, #10
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cda:	827b      	strh	r3, [r7, #18]
 8001cdc:	8a7b      	ldrh	r3, [r7, #18]
 8001cde:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001ce2:	827b      	strh	r3, [r7, #18]
 8001ce4:	8a7b      	ldrh	r3, [r7, #18]
 8001ce6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001cea:	827b      	strh	r3, [r7, #18]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	8a7b      	ldrh	r3, [r7, #18]
 8001cf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	8013      	strh	r3, [r2, #0]
 8001d06:	e234      	b.n	8002172 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d1c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f280 80fc 	bge.w	8001f1e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001d54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d58:	b292      	uxth	r2, r2
 8001d5a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d5c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d74:	7b1b      	ldrb	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d125      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3306      	adds	r3, #6
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001da6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8092 	beq.w	8001ed4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db6:	6959      	ldr	r1, [r3, #20]
 8001db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dba:	88da      	ldrh	r2, [r3, #6]
 8001dbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dc0:	f005 f9c4 	bl	800714c <USB_ReadPMA>
 8001dc4:	e086      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc8:	78db      	ldrb	r3, [r3, #3]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d10a      	bne.n	8001de4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f9d9 	bl	800218e <HAL_PCD_EP_DB_Receive>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001de2:	e077      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dfe:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	441a      	add	r2, r3
 8001e10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d024      	beq.n	8001e8c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	3302      	adds	r3, #2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d02e      	beq.n	8001ed4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e7c:	6959      	ldr	r1, [r3, #20]
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e80:	891a      	ldrh	r2, [r3, #8]
 8001e82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e86:	f005 f961 	bl	800714c <USB_ReadPMA>
 8001e8a:	e023      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3306      	adds	r3, #6
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001eb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d009      	beq.n	8001ed4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	6959      	ldr	r1, [r3, #20]
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	895a      	ldrh	r2, [r3, #10]
 8001ecc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ed0:	f005 f93c 	bl	800714c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001edc:	441a      	add	r2, r3
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001eea:	441a      	add	r2, r3
 8001eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <PCD_EP_ISR_Handler+0x514>
 8001ef8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d206      	bcs.n	8001f12 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f006 ff2c 	bl	8008d68 <HAL_PCD_DataOutStageCallback>
 8001f10:	e005      	b.n	8001f1e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fbe3 	bl	80056e4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8123 	beq.w	8002172 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f2c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	3310      	adds	r3, #16
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7e:	78db      	ldrb	r3, [r3, #3]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	f040 80a2 	bne.w	80020ca <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8e:	7b1b      	ldrb	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8093 	beq.w	80020bc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d046      	beq.n	8002030 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d126      	bne.n	8001ff8 <PCD_EP_ISR_Handler+0x608>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	4413      	add	r3, r2
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	011a      	lsls	r2, r3, #4
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	4413      	add	r3, r2
 8001fcc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	e061      	b.n	80020bc <PCD_EP_ISR_Handler+0x6cc>
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d15d      	bne.n	80020bc <PCD_EP_ISR_Handler+0x6cc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800200e:	b29b      	uxth	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002014:	4413      	add	r3, r2
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	011a      	lsls	r2, r3, #4
 800201e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002020:	4413      	add	r3, r2
 8002022:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002026:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	e045      	b.n	80020bc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	785b      	ldrb	r3, [r3, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d126      	bne.n	800208c <PCD_EP_ISR_Handler+0x69c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800204c:	b29b      	uxth	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002052:	4413      	add	r3, r2
 8002054:	637b      	str	r3, [r7, #52]	@ 0x34
 8002056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	011a      	lsls	r2, r3, #4
 800205c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205e:	4413      	add	r3, r2
 8002060:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
 8002066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002070:	b29a      	uxth	r2, r3
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002084:	b29a      	uxth	r2, r3
 8002086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002088:	801a      	strh	r2, [r3, #0]
 800208a:	e017      	b.n	80020bc <PCD_EP_ISR_Handler+0x6cc>
 800208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d113      	bne.n	80020bc <PCD_EP_ISR_Handler+0x6cc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800209c:	b29b      	uxth	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020a2:	4413      	add	r3, r2
 80020a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	011a      	lsls	r2, r3, #4
 80020ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ae:	4413      	add	r3, r2
 80020b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80020b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b8:	2200      	movs	r2, #0
 80020ba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f006 fe6b 	bl	8008d9e <HAL_PCD_DataInStageCallback>
 80020c8:	e053      	b.n	8002172 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d146      	bne.n	8002164 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	3302      	adds	r3, #2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800210a:	429a      	cmp	r2, r3
 800210c:	d907      	bls.n	800211e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211a:	619a      	str	r2, [r3, #24]
 800211c:	e002      	b.n	8002124 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800211e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d106      	bne.n	800213a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800212c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f006 fe33 	bl	8008d9e <HAL_PCD_DataInStageCallback>
 8002138:	e01b      	b.n	8002172 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800213a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002142:	441a      	add	r2, r3
 8002144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002146:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002150:	441a      	add	r2, r3
 8002152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002154:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fac1 	bl	80056e4 <USB_EPStartXfer>
 8002162:	e006      	b.n	8002172 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002164:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002168:	461a      	mov	r2, r3
 800216a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f91b 	bl	80023a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800217a:	b29b      	uxth	r3, r3
 800217c:	b21b      	sxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	f6ff ac3b 	blt.w	80019fa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3758      	adds	r7, #88	@ 0x58
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b088      	sub	sp, #32
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	4613      	mov	r3, r2
 800219a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d07e      	beq.n	80022a4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	3302      	adds	r3, #2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d306      	bcc.n	80021e8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	8b7b      	ldrh	r3, [r7, #26]
 80021e0:	1ad2      	subs	r2, r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	619a      	str	r2, [r3, #24]
 80021e6:	e002      	b.n	80021ee <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d123      	bne.n	800223e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800220c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002210:	833b      	strh	r3, [r7, #24]
 8002212:	8b3b      	ldrh	r3, [r7, #24]
 8002214:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002218:	833b      	strh	r3, [r7, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	441a      	add	r2, r3
 8002228:	8b3b      	ldrh	r3, [r7, #24]
 800222a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800222e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800223a:	b29b      	uxth	r3, r3
 800223c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01f      	beq.n	8002288 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800225e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002262:	82fb      	strh	r3, [r7, #22]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	8afb      	ldrh	r3, [r7, #22]
 8002274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800227c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002280:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002284:	b29b      	uxth	r3, r3
 8002286:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002288:	8b7b      	ldrh	r3, [r7, #26]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8087 	beq.w	800239e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6959      	ldr	r1, [r3, #20]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	891a      	ldrh	r2, [r3, #8]
 800229c:	8b7b      	ldrh	r3, [r7, #26]
 800229e:	f004 ff55 	bl	800714c <USB_ReadPMA>
 80022a2:	e07c      	b.n	800239e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	3306      	adds	r3, #6
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	8b7b      	ldrh	r3, [r7, #26]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d306      	bcc.n	80022e6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	8b7b      	ldrh	r3, [r7, #26]
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	619a      	str	r2, [r3, #24]
 80022e4:	e002      	b.n	80022ec <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d123      	bne.n	800233c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800230a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800230e:	83fb      	strh	r3, [r7, #30]
 8002310:	8bfb      	ldrh	r3, [r7, #30]
 8002312:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002316:	83fb      	strh	r3, [r7, #30]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	441a      	add	r2, r3
 8002326:	8bfb      	ldrh	r3, [r7, #30]
 8002328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800232c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002338:	b29b      	uxth	r3, r3
 800233a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11f      	bne.n	8002386 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800235c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002360:	83bb      	strh	r3, [r7, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	441a      	add	r2, r3
 8002370:	8bbb      	ldrh	r3, [r7, #28]
 8002372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800237a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800237e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002382:	b29b      	uxth	r3, r3
 8002384:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6959      	ldr	r1, [r3, #20]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	895a      	ldrh	r2, [r3, #10]
 8002398:	8b7b      	ldrh	r3, [r7, #26]
 800239a:	f004 fed7 	bl	800714c <USB_ReadPMA>
    }
  }

  return count;
 800239e:	8b7b      	ldrh	r3, [r7, #26]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0a4      	sub	sp, #144	@ 0x90
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 81dd 	beq.w	800277c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	3302      	adds	r3, #2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d907      	bls.n	800240a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	e002      	b.n	8002410 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 80b9 	bne.w	800258c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	785b      	ldrb	r3, [r3, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d126      	bne.n	8002470 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	4413      	add	r3, r2
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	011a      	lsls	r2, r3, #4
 8002440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002442:	4413      	add	r3, r2
 8002444:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002454:	b29a      	uxth	r2, r3
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002468:	b29a      	uxth	r2, r3
 800246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	e01a      	b.n	80024a6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d116      	bne.n	80024a6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	637b      	str	r3, [r7, #52]	@ 0x34
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248c:	4413      	add	r3, r2
 800248e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	011a      	lsls	r2, r3, #4
 8002496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002498:	4413      	add	r3, r2
 800249a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	2200      	movs	r2, #0
 80024a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d126      	bne.n	8002502 <HAL_PCD_EP_DB_Transmit+0x15a>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	011a      	lsls	r2, r3, #4
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	e017      	b.n	8002532 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d113      	bne.n	8002532 <HAL_PCD_EP_DB_Transmit+0x18a>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002512:	b29b      	uxth	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	4413      	add	r3, r2
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	011a      	lsls	r2, r3, #4
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	4413      	add	r3, r2
 8002526:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f006 fc30 	bl	8008d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 82fc 	beq.w	8002b42 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002564:	82fb      	strh	r3, [r7, #22]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	441a      	add	r2, r3
 8002574:	8afb      	ldrh	r3, [r7, #22]
 8002576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800257a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800257e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002586:	b29b      	uxth	r3, r3
 8002588:	8013      	strh	r3, [r2, #0]
 800258a:	e2da      	b.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d021      	beq.n	80025da <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80025c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	f040 82ae 	bne.w	8002b42 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025ee:	441a      	add	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025fc:	441a      	add	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	429a      	cmp	r2, r3
 800260c:	d30b      	bcc.n	8002626 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	6a1a      	ldr	r2, [r3, #32]
 800261a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	621a      	str	r2, [r3, #32]
 8002624:	e017      	b.n	8002656 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800262e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800263e:	e00a      	b.n	8002656 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d165      	bne.n	800272a <HAL_PCD_EP_DB_Transmit+0x382>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002672:	4413      	add	r3, r2
 8002674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	011a      	lsls	r2, r3, #4
 800267c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800267e:	4413      	add	r3, r2
 8002680:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002684:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002690:	b29a      	uxth	r2, r3
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800269a:	2b3e      	cmp	r3, #62	@ 0x3e
 800269c:	d91d      	bls.n	80026da <HAL_PCD_EP_DB_Transmit+0x332>
 800269e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x310>
 80026b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026b4:	3b01      	subs	r3, #1
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	e044      	b.n	8002764 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x350>
 80026e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	e035      	b.n	8002764 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002700:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_PCD_EP_DB_Transmit+0x36a>
 800270c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800270e:	3301      	adds	r3, #1
 8002710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29a      	uxth	r2, r3
 8002718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800271a:	b29b      	uxth	r3, r3
 800271c:	029b      	lsls	r3, r3, #10
 800271e:	b29b      	uxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b29a      	uxth	r2, r3
 8002724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002726:	801a      	strh	r2, [r3, #0]
 8002728:	e01c      	b.n	8002764 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	785b      	ldrb	r3, [r3, #1]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d118      	bne.n	8002764 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	647b      	str	r3, [r7, #68]	@ 0x44
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002746:	4413      	add	r3, r2
 8002748:	647b      	str	r3, [r7, #68]	@ 0x44
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	011a      	lsls	r2, r3, #4
 8002750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002752:	4413      	add	r3, r2
 8002754:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002758:	643b      	str	r3, [r7, #64]	@ 0x40
 800275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800275e:	b29a      	uxth	r2, r3
 8002760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002762:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	6959      	ldr	r1, [r3, #20]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	891a      	ldrh	r2, [r3, #8]
 8002770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002774:	b29b      	uxth	r3, r3
 8002776:	f004 fca4 	bl	80070c2 <USB_WritePMA>
 800277a:	e1e2      	b.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	3306      	adds	r3, #6
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d307      	bcc.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027bc:	1ad2      	subs	r2, r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	619a      	str	r2, [r3, #24]
 80027c2:	e002      	b.n	80027ca <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 80c0 	bne.w	8002954 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d126      	bne.n	800282a <HAL_PCD_EP_DB_Transmit+0x482>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027f0:	4413      	add	r3, r2
 80027f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	011a      	lsls	r2, r3, #4
 80027fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027fc:	4413      	add	r3, r2
 80027fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002802:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	b29a      	uxth	r2, r3
 8002810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002822:	b29a      	uxth	r2, r3
 8002824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002826:	801a      	strh	r2, [r3, #0]
 8002828:	e01a      	b.n	8002860 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d116      	bne.n	8002860 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	667b      	str	r3, [r7, #100]	@ 0x64
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002840:	b29b      	uxth	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002846:	4413      	add	r3, r2
 8002848:	667b      	str	r3, [r7, #100]	@ 0x64
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	011a      	lsls	r2, r3, #4
 8002850:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002852:	4413      	add	r3, r2
 8002854:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002858:	663b      	str	r3, [r7, #96]	@ 0x60
 800285a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800285c:	2200      	movs	r2, #0
 800285e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	677b      	str	r3, [r7, #116]	@ 0x74
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d12b      	bne.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002882:	4413      	add	r3, r2
 8002884:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	011a      	lsls	r2, r3, #4
 800288c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800288e:	4413      	add	r3, r2
 8002890:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002894:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002898:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028bc:	b29a      	uxth	r2, r3
 80028be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	e017      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d113      	bne.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028dc:	4413      	add	r3, r2
 80028de:	677b      	str	r3, [r7, #116]	@ 0x74
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	011a      	lsls	r2, r3, #4
 80028e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80028f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f006 fa4e 	bl	8008d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 811a 	bne.w	8002b42 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002928:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800293e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800294a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800294e:	b29b      	uxth	r3, r3
 8002950:	8013      	strh	r3, [r2, #0]
 8002952:	e0f6      	b.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d121      	bne.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002978:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800298e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800299a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800299e:	b29b      	uxth	r3, r3
 80029a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 80ca 	bne.w	8002b42 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029b6:	441a      	add	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029c4:	441a      	add	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d30b      	bcc.n	80029ee <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	621a      	str	r2, [r3, #32]
 80029ec:	e017      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80029f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a06:	e00a      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d165      	bne.n	8002af8 <HAL_PCD_EP_DB_Transmit+0x750>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a40:	4413      	add	r3, r2
 8002a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	011a      	lsls	r2, r3, #4
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a68:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a6a:	d91d      	bls.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x700>
 8002a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002a80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a82:	3b01      	subs	r3, #1
 8002a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	e041      	b.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x784>
 8002aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	e032      	b.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x784>
 8002ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_PCD_EP_DB_Transmit+0x738>
 8002ada:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002adc:	3301      	adds	r3, #1
 8002ade:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	029b      	lsls	r3, r3, #10
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	e019      	b.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x784>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d115      	bne.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x784>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0e:	4413      	add	r3, r2
 8002b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	011a      	lsls	r2, r3, #4
 8002b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b20:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b2a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6959      	ldr	r1, [r3, #20]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	895a      	ldrh	r2, [r3, #10]
 8002b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f004 fac0 	bl	80070c2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b5c:	82bb      	strh	r3, [r7, #20]
 8002b5e:	8abb      	ldrh	r3, [r7, #20]
 8002b60:	f083 0310 	eor.w	r3, r3, #16
 8002b64:	82bb      	strh	r3, [r7, #20]
 8002b66:	8abb      	ldrh	r3, [r7, #20]
 8002b68:	f083 0320 	eor.w	r3, r3, #32
 8002b6c:	82bb      	strh	r3, [r7, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	441a      	add	r2, r3
 8002b7c:	8abb      	ldrh	r3, [r7, #20]
 8002b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3790      	adds	r7, #144	@ 0x90
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	817b      	strh	r3, [r7, #10]
 8002baa:	4613      	mov	r3, r2
 8002bac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	f003 0207 	and.w	r2, r3, #7
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	3310      	adds	r3, #16
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	e009      	b.n	8002be6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bd2:	897a      	ldrh	r2, [r7, #10]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002be6:	893b      	ldrh	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	80da      	strh	r2, [r3, #6]
 8002bfa:	e00b      	b.n	8002c14 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e272      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8087 	beq.w	8002d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c40:	4b92      	ldr	r3, [pc, #584]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d112      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
 8002c58:	4b8c      	ldr	r3, [pc, #560]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	d10b      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c66:	4b89      	ldr	r3, [pc, #548]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d06c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x12c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d168      	bne.n	8002d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e24c      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x76>
 8002c88:	4b80      	ldr	r3, [pc, #512]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7f      	ldr	r2, [pc, #508]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e02e      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x98>
 8002c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7a      	ldr	r2, [pc, #488]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b78      	ldr	r3, [pc, #480]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a77      	ldr	r2, [pc, #476]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0xbc>
 8002cc2:	4b72      	ldr	r3, [pc, #456]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a71      	ldr	r2, [pc, #452]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b6f      	ldr	r3, [pc, #444]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b68      	ldr	r3, [pc, #416]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a67      	ldr	r2, [pc, #412]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fd fee2 	bl	8000ac4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fd fede 	bl	8000ac4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e200      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b5d      	ldr	r3, [pc, #372]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe4>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fd fece 	bl	8000ac4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fd feca 	bl	8000ac4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	@ 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1ec      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	4b53      	ldr	r3, [pc, #332]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x10c>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d66:	4b49      	ldr	r3, [pc, #292]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
 8002d72:	4b46      	ldr	r3, [pc, #280]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b43      	ldr	r3, [pc, #268]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1c0      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b3d      	ldr	r3, [pc, #244]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4939      	ldr	r1, [pc, #228]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fd fe83 	bl	8000ac4 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fd fe7f 	bl	8000ac4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1a1      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4927      	ldr	r1, [pc, #156]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b26      	ldr	r3, [pc, #152]	@ (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fd fe62 	bl	8000ac4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fd fe5e 	bl	8000ac4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e180      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d03a      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d019      	beq.n	8002e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7fd fe42 	bl	8000ac4 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fd fe3e 	bl	8000ac4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e160      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f000 face 	bl	8003404 <RCC_Delay>
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fd fe28 	bl	8000ac4 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e76:	e00f      	b.n	8002e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fd fe24 	bl	8000ac4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d908      	bls.n	8002e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e146      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	42420000 	.word	0x42420000
 8002e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b92      	ldr	r3, [pc, #584]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e9      	bne.n	8002e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a6 	beq.w	8002ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b88      	ldr	r3, [pc, #544]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4a87      	ldr	r2, [pc, #540]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	61d3      	str	r3, [r2, #28]
 8002ece:	4b85      	ldr	r3, [pc, #532]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b82      	ldr	r3, [pc, #520]	@ (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eea:	4b7f      	ldr	r3, [pc, #508]	@ (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7e      	ldr	r2, [pc, #504]	@ (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef6:	f7fd fde5 	bl	8000ac4 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fd fde1 	bl	8000ac4 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	@ 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e103      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b75      	ldr	r3, [pc, #468]	@ (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x312>
 8002f24:	4b6f      	ldr	r3, [pc, #444]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e02d      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x334>
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a69      	ldr	r2, [pc, #420]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b67      	ldr	r3, [pc, #412]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a66      	ldr	r2, [pc, #408]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
 8002f52:	e01c      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x356>
 8002f5c:	4b61      	ldr	r3, [pc, #388]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a60      	ldr	r2, [pc, #384]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	4b5e      	ldr	r3, [pc, #376]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6213      	str	r3, [r2, #32]
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f76:	4b5b      	ldr	r3, [pc, #364]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	4b58      	ldr	r3, [pc, #352]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a57      	ldr	r2, [pc, #348]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fd fd95 	bl	8000ac4 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fd fd91 	bl	8000ac4 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0b1      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RCC_OscConfig+0x37e>
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fd fd7f 	bl	8000ac4 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fd7b 	bl	8000ac4 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e09b      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	4b40      	ldr	r3, [pc, #256]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8087 	beq.w	8003116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003008:	4b36      	ldr	r3, [pc, #216]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d061      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d146      	bne.n	80030aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b33      	ldr	r3, [pc, #204]	@ (80030ec <HAL_RCC_OscConfig+0x4cc>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fd fd4f 	bl	8000ac4 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302a:	f7fd fd4b 	bl	8000ac4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e06d      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303c:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003052:	4b24      	ldr	r3, [pc, #144]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4921      	ldr	r1, [pc, #132]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003064:	4b1f      	ldr	r3, [pc, #124]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a19      	ldr	r1, [r3, #32]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	430b      	orrs	r3, r1
 8003076:	491b      	ldr	r1, [pc, #108]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_RCC_OscConfig+0x4cc>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fd fd1f 	bl	8000ac4 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308a:	f7fd fd1b 	bl	8000ac4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e03d      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800309c:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x46a>
 80030a8:	e035      	b.n	8003116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030aa:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <HAL_RCC_OscConfig+0x4cc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fd fd08 	bl	8000ac4 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd fd04 	bl	8000ac4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e026      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x498>
 80030d6:	e01e      	b.n	8003116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e019      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40007000 	.word	0x40007000
 80030ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_RCC_OscConfig+0x500>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	429a      	cmp	r2, r3
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0d0      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b67      	ldr	r3, [pc, #412]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	4965      	ldr	r1, [pc, #404]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a58      	ldr	r2, [pc, #352]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800318a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a52      	ldr	r2, [pc, #328]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d040      	beq.n	8003244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b41      	ldr	r3, [pc, #260]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e073      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b3d      	ldr	r3, [pc, #244]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06b      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4936      	ldr	r1, [pc, #216]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003214:	f7fd fc56 	bl	8000ac4 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fd fc52 	bl	8000ac4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e053      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b27      	ldr	r3, [pc, #156]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d210      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b24      	ldr	r3, [pc, #144]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0207 	bic.w	r2, r3, #7
 800325a:	4922      	ldr	r1, [pc, #136]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800329e:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	@ (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <HAL_RCC_ClockConfig+0x1cc>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_RCC_ClockConfig+0x1d0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fbb4 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08009474 	.word	0x08009474
 80032f0:	20000004 	.word	0x20000004
 80032f4:	20000008 	.word	0x20000008

080032f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003312:	4b1e      	ldr	r3, [pc, #120]	@ (800338c <HAL_RCC_GetSysClockFreq+0x94>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d002      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x30>
 8003322:	2b08      	cmp	r3, #8
 8003324:	d003      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x36>
 8003326:	e027      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800332a:	613b      	str	r3, [r7, #16]
      break;
 800332c:	e027      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0c9b      	lsrs	r3, r3, #18
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_RCC_GetSysClockFreq+0x94>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c5b      	lsrs	r3, r3, #17
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	4a11      	ldr	r2, [pc, #68]	@ (8003398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800335a:	fb03 f202 	mul.w	r2, r3, r2
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e004      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0c      	ldr	r2, [pc, #48]	@ (800339c <HAL_RCC_GetSysClockFreq+0xa4>)
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	613b      	str	r3, [r7, #16]
      break;
 8003376:	e002      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800337a:	613b      	str	r3, [r7, #16]
      break;
 800337c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337e:	693b      	ldr	r3, [r7, #16]
}
 8003380:	4618      	mov	r0, r3
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	007a1200 	.word	0x007a1200
 8003394:	0800948c 	.word	0x0800948c
 8003398:	0800949c 	.word	0x0800949c
 800339c:	003d0900 	.word	0x003d0900

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b02      	ldr	r3, [pc, #8]	@ (80033b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000004 	.word	0x20000004

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff2 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	@ (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	08009484 	.word	0x08009484

080033dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033e0:	f7ff ffde 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0adb      	lsrs	r3, r3, #11
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	@ (8003400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	08009484 	.word	0x08009484

08003404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800340c:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <RCC_Delay+0x34>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	@ (800343c <RCC_Delay+0x38>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0a5b      	lsrs	r3, r3, #9
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003420:	bf00      	nop
  }
  while (Delay --);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1e5a      	subs	r2, r3, #1
 8003426:	60fa      	str	r2, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f9      	bne.n	8003420 <RCC_Delay+0x1c>
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	20000004 	.word	0x20000004
 800343c:	10624dd3 	.word	0x10624dd3

08003440 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d07d      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003460:	4b4f      	ldr	r3, [pc, #316]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4a4b      	ldr	r2, [pc, #300]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003476:	61d3      	str	r3, [r2, #28]
 8003478:	4b49      	ldr	r3, [pc, #292]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b46      	ldr	r3, [pc, #280]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d118      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003494:	4b43      	ldr	r3, [pc, #268]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a42      	ldr	r2, [pc, #264]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a0:	f7fd fb10 	bl	8000ac4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	e008      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a8:	f7fd fb0c 	bl	8000ac4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	@ 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e06d      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	4b3a      	ldr	r3, [pc, #232]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034c6:	4b36      	ldr	r3, [pc, #216]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02e      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d027      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034e4:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ee:	4b2e      	ldr	r3, [pc, #184]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034f4:	4b2c      	ldr	r3, [pc, #176]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034fa:	4a29      	ldr	r2, [pc, #164]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d014      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fd fadb 	bl	8000ac4 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fd fad7 	bl	8000ac4 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e036      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ee      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003534:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4917      	ldr	r1, [pc, #92]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	4313      	orrs	r3, r2
 8003544:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354c:	4b14      	ldr	r3, [pc, #80]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	4a13      	ldr	r2, [pc, #76]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003556:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003564:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	490b      	ldr	r1, [pc, #44]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003582:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4904      	ldr	r1, [pc, #16]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40007000 	.word	0x40007000
 80035a8:	42420440 	.word	0x42420440

080035ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e041      	b.n	8003642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd f930 	bl	8000838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 fa8a 	bl	8003b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d001      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e03a      	b.n	80036da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a18      	ldr	r2, [pc, #96]	@ (80036e4 <HAL_TIM_Base_Start_IT+0x98>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x58>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800368e:	d009      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x58>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x58>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a13      	ldr	r2, [pc, #76]	@ (80036ec <HAL_TIM_Base_Start_IT+0xa0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d111      	bne.n	80036c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d010      	beq.n	80036d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c6:	e007      	b.n	80036d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800

080036f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a1a      	ldr	r2, [r3, #32]
 800370e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10f      	bne.n	8003738 <HAL_TIM_Base_Stop_IT+0x48>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_TIM_Base_Stop_IT+0x48>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0202 	mvn.w	r2, #2
 8003780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f998 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f98b 	bl	8003aba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f99a 	bl	8003ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0204 	mvn.w	r2, #4
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f972 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f965 	bl	8003aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f974 	bl	8003ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0208 	mvn.w	r2, #8
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2204      	movs	r2, #4
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f94c 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f93f 	bl	8003aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f94e 	bl	8003ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0210 	mvn.w	r2, #16
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2208      	movs	r2, #8
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f926 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f919 	bl	8003aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f928 	bl	8003ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0201 	mvn.w	r2, #1
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fc fd86 	bl	80003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa7f 	bl	8003dda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8f8 	bl	8003af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0220 	mvn.w	r2, #32
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fa52 	bl	8003dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_TIM_ConfigClockSource+0x1c>
 8003944:	2302      	movs	r3, #2
 8003946:	e0b4      	b.n	8003ab2 <HAL_TIM_ConfigClockSource+0x186>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800396e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003980:	d03e      	beq.n	8003a00 <HAL_TIM_ConfigClockSource+0xd4>
 8003982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003986:	f200 8087 	bhi.w	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398e:	f000 8086 	beq.w	8003a9e <HAL_TIM_ConfigClockSource+0x172>
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003996:	d87f      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 8003998:	2b70      	cmp	r3, #112	@ 0x70
 800399a:	d01a      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0xa6>
 800399c:	2b70      	cmp	r3, #112	@ 0x70
 800399e:	d87b      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039a0:	2b60      	cmp	r3, #96	@ 0x60
 80039a2:	d050      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x11a>
 80039a4:	2b60      	cmp	r3, #96	@ 0x60
 80039a6:	d877      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039a8:	2b50      	cmp	r3, #80	@ 0x50
 80039aa:	d03c      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0xfa>
 80039ac:	2b50      	cmp	r3, #80	@ 0x50
 80039ae:	d873      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	d058      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x13a>
 80039b4:	2b40      	cmp	r3, #64	@ 0x40
 80039b6:	d86f      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b30      	cmp	r3, #48	@ 0x30
 80039ba:	d064      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x15a>
 80039bc:	2b30      	cmp	r3, #48	@ 0x30
 80039be:	d86b      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d060      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x15a>
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d867      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d05c      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x15a>
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d05a      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x15a>
 80039d0:	e062      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039e2:	f000 f974 	bl	8003cce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	609a      	str	r2, [r3, #8]
      break;
 80039fe:	e04f      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a10:	f000 f95d 	bl	8003cce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a22:	609a      	str	r2, [r3, #8]
      break;
 8003a24:	e03c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	461a      	mov	r2, r3
 8003a34:	f000 f8d4 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2150      	movs	r1, #80	@ 0x50
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f92b 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 8003a44:	e02c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 f8f2 	bl	8003c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2160      	movs	r1, #96	@ 0x60
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f91b 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 8003a64:	e01c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	461a      	mov	r2, r3
 8003a74:	f000 f8b4 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2140      	movs	r1, #64	@ 0x40
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f90b 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 8003a84:	e00c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f000 f902 	bl	8003c9a <TIM_ITRx_SetConfig>
      break;
 8003a96:	e003      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
	...

08003b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd4 <TIM_Base_SetConfig+0xd0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <TIM_Base_SetConfig+0x30>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b22:	d007      	beq.n	8003b34 <TIM_Base_SetConfig+0x30>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd8 <TIM_Base_SetConfig+0xd4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_Base_SetConfig+0x30>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <TIM_Base_SetConfig+0xd8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d108      	bne.n	8003b46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a22      	ldr	r2, [pc, #136]	@ (8003bd4 <TIM_Base_SetConfig+0xd0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00b      	beq.n	8003b66 <TIM_Base_SetConfig+0x62>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b54:	d007      	beq.n	8003b66 <TIM_Base_SetConfig+0x62>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd8 <TIM_Base_SetConfig+0xd4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_Base_SetConfig+0x62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1e      	ldr	r2, [pc, #120]	@ (8003bdc <TIM_Base_SetConfig+0xd8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <TIM_Base_SetConfig+0xd0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d103      	bne.n	8003bac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800

08003be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 030a 	bic.w	r3, r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0210 	bic.w	r2, r3, #16
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	031b      	lsls	r3, r3, #12
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f043 0307 	orr.w	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	609a      	str	r2, [r3, #8]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b087      	sub	sp, #28
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	021a      	lsls	r2, r3, #8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	609a      	str	r2, [r3, #8]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e046      	b.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d70:	d009      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a12      	ldr	r2, [pc, #72]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a10      	ldr	r2, [pc, #64]	@ (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10c      	bne.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800

08003dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e042      	b.n	8003e84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fc fd34 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	@ 0x24
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fdb7 	bl	80049a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	@ 0x28
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d175      	bne.n	8003f98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_UART_Transmit+0x2c>
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e06e      	b.n	8003f9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2221      	movs	r2, #33	@ 0x21
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fc fdfb 	bl	8000ac4 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee4:	d108      	bne.n	8003ef8 <HAL_UART_Transmit+0x6c>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e003      	b.n	8003f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f00:	e02e      	b.n	8003f60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2180      	movs	r1, #128	@ 0x80
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fb1c 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e03a      	b.n	8003f9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	e007      	b.n	8003f52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1cb      	bne.n	8003f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2140      	movs	r1, #64	@ 0x40
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fae8 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e006      	b.n	8003f9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e000      	b.n	8003f9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	4613      	mov	r3, r2
 8003fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d112      	bne.n	8003fe2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Receive_IT+0x26>
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e00b      	b.n	8003fe4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fb0f 	bl	80045fc <UART_Start_Receive_IT>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	e000      	b.n	8003fe4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b0ba      	sub	sp, #232	@ 0xe8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800402a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_UART_IRQHandler+0x66>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fbec 	bl	8004828 <UART_Receive_IT>
      return;
 8004050:	e25b      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80de 	beq.w	8004218 <HAL_UART_IRQHandler+0x22c>
 800405c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800406c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80d1 	beq.w	8004218 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_UART_IRQHandler+0xae>
 8004082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_UART_IRQHandler+0xd2>
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_UART_IRQHandler+0xf6>
 80040ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d011      	beq.n	8004112 <HAL_UART_IRQHandler+0x126>
 80040ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	f043 0208 	orr.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 81f2 	beq.w	8004500 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_UART_IRQHandler+0x14e>
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fb77 	bl	8004828 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_UART_IRQHandler+0x17a>
 800415e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04f      	beq.n	8004206 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa81 	bl	800466e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d041      	beq.n	80041fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1d9      	bne.n	800417a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d013      	beq.n	80041f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d2:	4a7e      	ldr	r2, [pc, #504]	@ (80043cc <HAL_UART_IRQHandler+0x3e0>)
 80041d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc fdc4 	bl	8000d68 <HAL_DMA_Abort_IT>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041f0:	4610      	mov	r0, r2
 80041f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	e00e      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f993 	bl	8004522 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	e00a      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f98f 	bl	8004522 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	e006      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f98b 	bl	8004522 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004212:	e175      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	bf00      	nop
    return;
 8004216:	e173      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	2b01      	cmp	r3, #1
 800421e:	f040 814f 	bne.w	80044c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8148 	beq.w	80044c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8141 	beq.w	80044c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80b6 	beq.w	80043d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8145 	beq.w	8004504 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800427e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004282:	429a      	cmp	r2, r3
 8004284:	f080 813e 	bcs.w	8004504 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800428e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b20      	cmp	r3, #32
 8004298:	f000 8088 	beq.w	80043ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1d9      	bne.n	800429c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3314      	adds	r3, #20
 8004308:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800430c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004310:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004314:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800431e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e1      	bne.n	80042e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800433a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3314      	adds	r3, #20
 8004344:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004348:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800434a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800434e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004356:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e3      	bne.n	8004324 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800437a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800438e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004390:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800439c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e3      	bne.n	800436a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc fca3 	bl	8000cf2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	b29b      	uxth	r3, r3
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8b6 	bl	8004534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043c8:	e09c      	b.n	8004504 <HAL_UART_IRQHandler+0x518>
 80043ca:	bf00      	nop
 80043cc:	08004733 	.word	0x08004733
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 808e 	beq.w	8004508 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8089 	beq.w	8004508 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800440c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800441a:	647a      	str	r2, [r7, #68]	@ 0x44
 800441c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004420:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e3      	bne.n	80043f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	623b      	str	r3, [r7, #32]
   return(result);
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3314      	adds	r3, #20
 800444e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004452:	633a      	str	r2, [r7, #48]	@ 0x30
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e3      	bne.n	800442e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60fb      	str	r3, [r7, #12]
   return(result);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004498:	61fa      	str	r2, [r7, #28]
 800449a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	69b9      	ldr	r1, [r7, #24]
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	617b      	str	r3, [r7, #20]
   return(result);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e3      	bne.n	8004474 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f83b 	bl	8004534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044be:	e023      	b.n	8004508 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_UART_IRQHandler+0x4f4>
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f93e 	bl	800475a <UART_Transmit_IT>
    return;
 80044de:	e014      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <HAL_UART_IRQHandler+0x51e>
 80044ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f97d 	bl	80047f8 <UART_EndTransmit_IT>
    return;
 80044fe:	e004      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
    return;
 8004500:	bf00      	nop
 8004502:	e002      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
      return;
 8004504:	bf00      	nop
 8004506:	e000      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
      return;
 8004508:	bf00      	nop
  }
}
 800450a:	37e8      	adds	r7, #232	@ 0xe8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr

0800454a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455a:	e03b      	b.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d037      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004564:	f7fc faae 	bl	8000ac4 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	429a      	cmp	r2, r3
 8004572:	d302      	bcc.n	800457a <UART_WaitOnFlagUntilTimeout+0x30>
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e03a      	b.n	80045f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b80      	cmp	r3, #128	@ 0x80
 8004590:	d020      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d01d      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d116      	bne.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f856 	bl	800466e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2208      	movs	r2, #8
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e00f      	b.n	80045f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4013      	ands	r3, r2
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d0b4      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	88fa      	ldrh	r2, [r7, #6]
 800461a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2222      	movs	r2, #34	@ 0x22
 8004626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004640:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0220 	orr.w	r2, r2, #32
 8004660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800466e:	b480      	push	{r7}
 8004670:	b095      	sub	sp, #84	@ 0x54
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800468c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004696:	643a      	str	r2, [r7, #64]	@ 0x40
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800469c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3314      	adds	r3, #20
 80046c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d119      	bne.n	800471a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f023 0310 	bic.w	r3, r3, #16
 80046fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004706:	61ba      	str	r2, [r7, #24]
 8004708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6979      	ldr	r1, [r7, #20]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	613b      	str	r3, [r7, #16]
   return(result);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e5      	bne.n	80046e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004728:	bf00      	nop
 800472a:	3754      	adds	r7, #84	@ 0x54
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff fee8 	bl	8004522 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b21      	cmp	r3, #33	@ 0x21
 800476c:	d13e      	bne.n	80047ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004776:	d114      	bne.n	80047a2 <UART_Transmit_IT+0x48>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d110      	bne.n	80047a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004794:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	1c9a      	adds	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	621a      	str	r2, [r3, #32]
 80047a0:	e008      	b.n	80047b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	1c59      	adds	r1, r3, #1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6211      	str	r1, [r2, #32]
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29b      	uxth	r3, r3
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4619      	mov	r1, r3
 80047c2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10f      	bne.n	80047e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800480e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fe79 	bl	8004510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08c      	sub	sp, #48	@ 0x30
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b22      	cmp	r3, #34	@ 0x22
 800483a:	f040 80ae 	bne.w	800499a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004846:	d117      	bne.n	8004878 <UART_Receive_IT+0x50>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d113      	bne.n	8004878 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004850:	2300      	movs	r3, #0
 8004852:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	b29a      	uxth	r2, r3
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	629a      	str	r2, [r3, #40]	@ 0x28
 8004876:	e026      	b.n	80048c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488a:	d007      	beq.n	800489c <UART_Receive_IT+0x74>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <UART_Receive_IT+0x82>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e008      	b.n	80048bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4619      	mov	r1, r3
 80048d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d15d      	bne.n	8004996 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0220 	bic.w	r2, r2, #32
 80048e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	2b01      	cmp	r3, #1
 800491e:	d135      	bne.n	800498c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	613b      	str	r3, [r7, #16]
   return(result);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f023 0310 	bic.w	r3, r3, #16
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004946:	623a      	str	r2, [r7, #32]
 8004948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	69f9      	ldr	r1, [r7, #28]
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	61bb      	str	r3, [r7, #24]
   return(result);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d10a      	bne.n	800497e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fdd5 	bl	8004534 <HAL_UARTEx_RxEventCallback>
 800498a:	e002      	b.n	8004992 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fb fd75 	bl	800047c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e002      	b.n	800499c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3730      	adds	r7, #48	@ 0x30
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049de:	f023 030c 	bic.w	r3, r3, #12
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab8 <UART_SetConfig+0x114>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a0c:	f7fe fce6 	bl	80033dc <HAL_RCC_GetPCLK2Freq>
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	e002      	b.n	8004a1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7fe fcce 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8004a18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009a      	lsls	r2, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	4a22      	ldr	r2, [pc, #136]	@ (8004abc <UART_SetConfig+0x118>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	0119      	lsls	r1, r3, #4
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009a      	lsls	r2, r3, #2
 8004a44:	441a      	add	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a50:	4b1a      	ldr	r3, [pc, #104]	@ (8004abc <UART_SetConfig+0x118>)
 8004a52:	fba3 0302 	umull	r0, r3, r3, r2
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	2064      	movs	r0, #100	@ 0x64
 8004a5a:	fb00 f303 	mul.w	r3, r0, r3
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	3332      	adds	r3, #50	@ 0x32
 8004a64:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <UART_SetConfig+0x118>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a70:	4419      	add	r1, r3
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009a      	lsls	r2, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a88:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <UART_SetConfig+0x118>)
 8004a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2064      	movs	r0, #100	@ 0x64
 8004a92:	fb00 f303 	mul.w	r3, r0, r3
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	3332      	adds	r3, #50	@ 0x32
 8004a9c:	4a07      	ldr	r2, [pc, #28]	@ (8004abc <UART_SetConfig+0x118>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	f003 020f 	and.w	r2, r3, #15
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	440a      	add	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40013800 	.word	0x40013800
 8004abc:	51eb851f 	.word	0x51eb851f

08004ac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	4638      	mov	r0, r7
 8004aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004aea:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004aee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b0e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004b12:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	4013      	ands	r3, r2
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b09d      	sub	sp, #116	@ 0x74
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	78db      	ldrb	r3, [r3, #3]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d81f      	bhi.n	8004bfe <USB_ActivateEndpoint+0x72>
 8004bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <USB_ActivateEndpoint+0x38>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004c07 	.word	0x08004c07
 8004bd0:	08004be3 	.word	0x08004be3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004bd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bdc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004be0:	e012      	b.n	8004c08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004be2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004be6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004bea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004bee:	e00b      	b.n	8004c08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004bf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004bfc:	e004      	b.n	8004c08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004c04:	e000      	b.n	8004c08 <USB_ActivateEndpoint+0x7c>
      break;
 8004c06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	7b1b      	ldrb	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 8178 	bne.w	8004f68 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8084 	beq.w	8004d8a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	4413      	add	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	011a      	lsls	r2, r3, #4
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	88db      	ldrh	r3, [r3, #6]
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	827b      	strh	r3, [r7, #18]
 8004cc4:	8a7b      	ldrh	r3, [r7, #18]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01b      	beq.n	8004d06 <USB_ActivateEndpoint+0x17a>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce4:	823b      	strh	r3, [r7, #16]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	8a3b      	ldrh	r3, [r7, #16]
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cfe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	78db      	ldrb	r3, [r3, #3]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d020      	beq.n	8004d50 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d24:	81bb      	strh	r3, [r7, #12]
 8004d26:	89bb      	ldrh	r3, [r7, #12]
 8004d28:	f083 0320 	eor.w	r3, r3, #32
 8004d2c:	81bb      	strh	r3, [r7, #12]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	89bb      	ldrh	r3, [r7, #12]
 8004d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]
 8004d4e:	e2d5      	b.n	80052fc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d66:	81fb      	strh	r3, [r7, #14]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	89fb      	ldrh	r3, [r7, #14]
 8004d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]
 8004d88:	e2b8      	b.n	80052fc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	4413      	add	r3, r2
 8004d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	011a      	lsls	r2, r3, #4
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	88db      	ldrh	r3, [r3, #6]
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	4413      	add	r3, r2
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	011a      	lsls	r2, r3, #4
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	4413      	add	r3, r2
 8004ddc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004df8:	d91d      	bls.n	8004e36 <USB_ActivateEndpoint+0x2aa>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <USB_ActivateEndpoint+0x288>
 8004e0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e10:	3b01      	subs	r3, #1
 8004e12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	4313      	orrs	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	801a      	strh	r2, [r3, #0]
 8004e34:	e026      	b.n	8004e84 <USB_ActivateEndpoint+0x2f8>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <USB_ActivateEndpoint+0x2c8>
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	801a      	strh	r2, [r3, #0]
 8004e52:	e017      	b.n	8004e84 <USB_ActivateEndpoint+0x2f8>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <USB_ActivateEndpoint+0x2e2>
 8004e68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	029b      	lsls	r3, r3, #10
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <USB_ActivateEndpoint+0x348>
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	843b      	strh	r3, [r7, #32]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	441a      	add	r2, r3
 8004ebe:	8c3b      	ldrh	r3, [r7, #32]
 8004ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d124      	bne.n	8004f26 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef2:	83bb      	strh	r3, [r7, #28]
 8004ef4:	8bbb      	ldrh	r3, [r7, #28]
 8004ef6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004efa:	83bb      	strh	r3, [r7, #28]
 8004efc:	8bbb      	ldrh	r3, [r7, #28]
 8004efe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f02:	83bb      	strh	r3, [r7, #28]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	8bbb      	ldrh	r3, [r7, #28]
 8004f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8013      	strh	r3, [r2, #0]
 8004f24:	e1ea      	b.n	80052fc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3c:	83fb      	strh	r3, [r7, #30]
 8004f3e:	8bfb      	ldrh	r3, [r7, #30]
 8004f40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f44:	83fb      	strh	r3, [r7, #30]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	8bfb      	ldrh	r3, [r7, #30]
 8004f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	8013      	strh	r3, [r2, #0]
 8004f66:	e1c9      	b.n	80052fc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	78db      	ldrb	r3, [r3, #3]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d11e      	bne.n	8004fae <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f86:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004f98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fa0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	8013      	strh	r3, [r2, #0]
 8004fac:	e01d      	b.n	8004fea <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	441a      	add	r2, r3
 8004fd2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ffa:	4413      	add	r3, r2
 8004ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	011a      	lsls	r2, r3, #4
 8005004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005006:	4413      	add	r3, r2
 8005008:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800500c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	891b      	ldrh	r3, [r3, #8]
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	b29b      	uxth	r3, r3
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	657b      	str	r3, [r7, #84]	@ 0x54
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005028:	b29b      	uxth	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502e:	4413      	add	r3, r2
 8005030:	657b      	str	r3, [r7, #84]	@ 0x54
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	011a      	lsls	r2, r3, #4
 8005038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503a:	4413      	add	r3, r2
 800503c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005040:	653b      	str	r3, [r7, #80]	@ 0x50
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	895b      	ldrh	r3, [r3, #10]
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	b29b      	uxth	r3, r3
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005050:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 8093 	bne.w	8005182 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800506c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01b      	beq.n	80050b0 <USB_ActivateEndpoint+0x524>
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800508a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800509c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80050be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <USB_ActivateEndpoint+0x574>
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80050ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005116:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005118:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800511a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800511e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005120:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005122:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005126:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800513c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005144:	b29b      	uxth	r3, r3
 8005146:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800515e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	441a      	add	r2, r3
 800516a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800516c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517c:	b29b      	uxth	r3, r3
 800517e:	8013      	strh	r3, [r2, #0]
 8005180:	e0bc      	b.n	80052fc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005192:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01d      	beq.n	80051da <USB_ActivateEndpoint+0x64e>
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80051c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80051ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80051ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01d      	beq.n	8005232 <USB_ActivateEndpoint+0x6a6>
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	441a      	add	r2, r3
 800521a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	78db      	ldrb	r3, [r3, #3]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d024      	beq.n	8005284 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800524c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005250:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005254:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005258:	f083 0320 	eor.w	r3, r3, #32
 800525c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	441a      	add	r2, r3
 800526a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800526e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800527a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800527e:	b29b      	uxth	r3, r3
 8005280:	8013      	strh	r3, [r2, #0]
 8005282:	e01d      	b.n	80052c0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800529a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	441a      	add	r2, r3
 80052e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80052e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80052fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005300:	4618      	mov	r0, r3
 8005302:	3774      	adds	r7, #116	@ 0x74
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop

0800530c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800530c:	b480      	push	{r7}
 800530e:	b08d      	sub	sp, #52	@ 0x34
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	7b1b      	ldrb	r3, [r3, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f040 808e 	bne.w	800543c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d044      	beq.n	80053b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	81bb      	strh	r3, [r7, #12]
 8005336:	89bb      	ldrh	r3, [r7, #12]
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01b      	beq.n	8005378 <USB_DeactivateEndpoint+0x6c>
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005356:	817b      	strh	r3, [r7, #10]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	441a      	add	r2, r3
 8005362:	897b      	ldrh	r3, [r7, #10]
 8005364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800536c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005370:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005374:	b29b      	uxth	r3, r3
 8005376:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800538a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800538e:	813b      	strh	r3, [r7, #8]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	893b      	ldrh	r3, [r7, #8]
 800539c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8013      	strh	r3, [r2, #0]
 80053b0:	e192      	b.n	80056d8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	827b      	strh	r3, [r7, #18]
 80053c0:	8a7b      	ldrh	r3, [r7, #18]
 80053c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01b      	beq.n	8005402 <USB_DeactivateEndpoint+0xf6>
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e0:	823b      	strh	r3, [r7, #16]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	8a3b      	ldrh	r3, [r7, #16]
 80053ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005418:	81fb      	strh	r3, [r7, #14]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	441a      	add	r2, r3
 8005424:	89fb      	ldrh	r3, [r7, #14]
 8005426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800542a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005436:	b29b      	uxth	r3, r3
 8005438:	8013      	strh	r3, [r2, #0]
 800543a:	e14d      	b.n	80056d8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f040 80a5 	bne.w	8005590 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	843b      	strh	r3, [r7, #32]
 8005454:	8c3b      	ldrh	r3, [r7, #32]
 8005456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01b      	beq.n	8005496 <USB_DeactivateEndpoint+0x18a>
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005474:	83fb      	strh	r3, [r7, #30]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	8bfb      	ldrh	r3, [r7, #30]
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800548a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800548e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	83bb      	strh	r3, [r7, #28]
 80054a4:	8bbb      	ldrh	r3, [r7, #28]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01b      	beq.n	80054e6 <USB_DeactivateEndpoint+0x1da>
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	837b      	strh	r3, [r7, #26]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8b7b      	ldrh	r3, [r7, #26]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fc:	833b      	strh	r3, [r7, #24]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	8b3b      	ldrh	r3, [r7, #24]
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005516:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005534:	82fb      	strh	r3, [r7, #22]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	441a      	add	r2, r3
 8005540:	8afb      	ldrh	r3, [r7, #22]
 8005542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800554a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800554e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800556c:	82bb      	strh	r3, [r7, #20]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	441a      	add	r2, r3
 8005578:	8abb      	ldrh	r3, [r7, #20]
 800557a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800557e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800558a:	b29b      	uxth	r3, r3
 800558c:	8013      	strh	r3, [r2, #0]
 800558e:	e0a3      	b.n	80056d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800559e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80055a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01b      	beq.n	80055e0 <USB_DeactivateEndpoint+0x2d4>
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80055cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80055ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80055f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01b      	beq.n	8005630 <USB_DeactivateEndpoint+0x324>
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800560a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005628:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005646:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	441a      	add	r2, r3
 8005652:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800565c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005664:	b29b      	uxth	r3, r3
 8005666:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800567a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800567e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3734      	adds	r7, #52	@ 0x34
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b0c2      	sub	sp, #264	@ 0x108
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056f2:	6018      	str	r0, [r3, #0]
 80056f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b01      	cmp	r3, #1
 800570c:	f040 86b7 	bne.w	800647e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	429a      	cmp	r2, r3
 800572a:	d908      	bls.n	800573e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800572c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800573c:	e007      	b.n	800574e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800573e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800574e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	7b1b      	ldrb	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d13a      	bne.n	80057d4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800575e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6959      	ldr	r1, [r3, #20]
 800576a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	88da      	ldrh	r2, [r3, #6]
 8005776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577a:	b29b      	uxth	r3, r3
 800577c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005780:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005784:	6800      	ldr	r0, [r0, #0]
 8005786:	f001 fc9c 	bl	80070c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800578a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	011a      	lsls	r2, r3, #4
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	801a      	strh	r2, [r3, #0]
 80057d0:	f000 be1f 	b.w	8006412 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	f040 8462 	bne.w	80060aa <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80057e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	f240 83df 	bls.w	8005fc2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800582e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800584c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005854:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800585c:	b29b      	uxth	r3, r3
 800585e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005870:	1ad2      	subs	r2, r2, r3
 8005872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800587e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 81c7 	beq.w	8005c34 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d177      	bne.n	80059b2 <USB_EPStartXfer+0x2ce>
 80058c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058dc:	b29b      	uxth	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	4413      	add	r3, r2
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	011a      	lsls	r2, r3, #4
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	4413      	add	r3, r2
 80058f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005908:	b29a      	uxth	r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	2b3e      	cmp	r3, #62	@ 0x3e
 8005914:	d921      	bls.n	800595a <USB_EPStartXfer+0x276>
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <USB_EPStartXfer+0x252>
 800592c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005930:	3b01      	subs	r3, #1
 8005932:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29a      	uxth	r2, r3
 800593c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005940:	b29b      	uxth	r3, r3
 8005942:	029b      	lsls	r3, r3, #10
 8005944:	b29b      	uxth	r3, r3
 8005946:	4313      	orrs	r3, r2
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005952:	b29a      	uxth	r2, r3
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	e050      	b.n	80059fc <USB_EPStartXfer+0x318>
 800595a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <USB_EPStartXfer+0x294>
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005970:	b29a      	uxth	r2, r3
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	e041      	b.n	80059fc <USB_EPStartXfer+0x318>
 8005978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <USB_EPStartXfer+0x2b4>
 800598e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005992:	3301      	adds	r3, #1
 8005994:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29a      	uxth	r2, r3
 800599e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	029b      	lsls	r3, r3, #10
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	e024      	b.n	80059fc <USB_EPStartXfer+0x318>
 80059b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d11c      	bne.n	80059fc <USB_EPStartXfer+0x318>
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	4413      	add	r3, r2
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	011a      	lsls	r2, r3, #4
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	4413      	add	r3, r2
 80059ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	895b      	ldrh	r3, [r3, #10]
 8005a08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6959      	ldr	r1, [r3, #20]
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	f001 fb49 	bl	80070c2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695a      	ldr	r2, [r3, #20]
 8005a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a40:	441a      	add	r2, r3
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a1a      	ldr	r2, [r3, #32]
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d90f      	bls.n	8005a8a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	621a      	str	r2, [r3, #32]
 8005a88:	e00e      	b.n	8005aa8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d177      	bne.n	8005ba8 <USB_EPStartXfer+0x4c4>
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	4413      	add	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	011a      	lsls	r2, r3, #4
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	4413      	add	r3, r2
 8005aee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b08:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b0a:	d921      	bls.n	8005b50 <USB_EPStartXfer+0x46c>
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1a:	f003 031f 	and.w	r3, r3, #31
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <USB_EPStartXfer+0x448>
 8005b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b26:	3b01      	subs	r3, #1
 8005b28:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e056      	b.n	8005bfe <USB_EPStartXfer+0x51a>
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <USB_EPStartXfer+0x48a>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	e047      	b.n	8005bfe <USB_EPStartXfer+0x51a>
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <USB_EPStartXfer+0x4aa>
 8005b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b88:	3301      	adds	r3, #1
 8005b8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	029b      	lsls	r3, r3, #10
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e02a      	b.n	8005bfe <USB_EPStartXfer+0x51a>
 8005ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d122      	bne.n	8005bfe <USB_EPStartXfer+0x51a>
 8005bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	623b      	str	r3, [r7, #32]
 8005bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	4413      	add	r3, r2
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	011a      	lsls	r2, r3, #4
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	891b      	ldrh	r3, [r3, #8]
 8005c0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6959      	ldr	r1, [r3, #20]
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	f001 fa48 	bl	80070c2 <USB_WritePMA>
 8005c32:	e3ee      	b.n	8006412 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d177      	bne.n	8005d34 <USB_EPStartXfer+0x650>
 8005c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c64:	4413      	add	r3, r2
 8005c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c78:	4413      	add	r3, r2
 8005c7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c94:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c96:	d921      	bls.n	8005cdc <USB_EPStartXfer+0x5f8>
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <USB_EPStartXfer+0x5d4>
 8005cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	e056      	b.n	8005d8a <USB_EPStartXfer+0x6a6>
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <USB_EPStartXfer+0x616>
 8005ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e047      	b.n	8005d8a <USB_EPStartXfer+0x6a6>
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <USB_EPStartXfer+0x636>
 8005d10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d14:	3301      	adds	r3, #1
 8005d16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	e02a      	b.n	8005d8a <USB_EPStartXfer+0x6a6>
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d122      	bne.n	8005d8a <USB_EPStartXfer+0x6a6>
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d64:	4413      	add	r3, r2
 8005d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	011a      	lsls	r2, r3, #4
 8005d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	891b      	ldrh	r3, [r3, #8]
 8005d96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005db0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005db4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005db8:	6800      	ldr	r0, [r0, #0]
 8005dba:	f001 f982 	bl	80070c2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dce:	441a      	add	r2, r3
 8005dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d90f      	bls.n	8005e18 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6a1a      	ldr	r2, [r3, #32]
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	1ad2      	subs	r2, r2, r3
 8005e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	621a      	str	r2, [r3, #32]
 8005e16:	e00e      	b.n	8005e36 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d177      	bne.n	8005f42 <USB_EPStartXfer+0x85e>
 8005e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	4413      	add	r3, r2
 8005e74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	011a      	lsls	r2, r3, #4
 8005e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e86:	4413      	add	r3, r2
 8005e88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ea4:	d921      	bls.n	8005eea <USB_EPStartXfer+0x806>
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <USB_EPStartXfer+0x7e2>
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	029b      	lsls	r3, r3, #10
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	e050      	b.n	8005f8c <USB_EPStartXfer+0x8a8>
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <USB_EPStartXfer+0x824>
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e041      	b.n	8005f8c <USB_EPStartXfer+0x8a8>
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0c:	085b      	lsrs	r3, r3, #1
 8005f0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <USB_EPStartXfer+0x844>
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f22:	3301      	adds	r3, #1
 8005f24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	029b      	lsls	r3, r3, #10
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3e:	801a      	strh	r2, [r3, #0]
 8005f40:	e024      	b.n	8005f8c <USB_EPStartXfer+0x8a8>
 8005f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d11c      	bne.n	8005f8c <USB_EPStartXfer+0x8a8>
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f66:	4413      	add	r3, r2
 8005f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	011a      	lsls	r2, r3, #4
 8005f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	895b      	ldrh	r3, [r3, #10]
 8005f98:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6959      	ldr	r1, [r3, #20]
 8005fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005fb2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fb6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	f001 f881 	bl	80070c2 <USB_WritePMA>
 8005fc0:	e227      	b.n	8006412 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	441a      	add	r2, r3
 8006016:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800601a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800601e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800602a:	b29b      	uxth	r3, r3
 800602c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800602e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006048:	b29b      	uxth	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800604e:	4413      	add	r3, r2
 8006050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	011a      	lsls	r2, r3, #4
 8006060:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006062:	4413      	add	r3, r2
 8006064:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006068:	65bb      	str	r3, [r7, #88]	@ 0x58
 800606a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606e:	b29a      	uxth	r2, r3
 8006070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006072:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	891b      	ldrh	r3, [r3, #8]
 8006080:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6959      	ldr	r1, [r3, #20]
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006094:	b29b      	uxth	r3, r3
 8006096:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800609a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800609e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	f001 f80d 	bl	80070c2 <USB_WritePMA>
 80060a8:	e1b3      	b.n	8006412 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80c6 	beq.w	800627c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80060fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d177      	bne.n	80061fc <USB_EPStartXfer+0xb18>
 800610c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006126:	b29b      	uxth	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800612c:	4413      	add	r3, r2
 800612e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	011a      	lsls	r2, r3, #4
 800613e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006140:	4413      	add	r3, r2
 8006142:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006146:	667b      	str	r3, [r7, #100]	@ 0x64
 8006148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006152:	b29a      	uxth	r2, r3
 8006154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615c:	2b3e      	cmp	r3, #62	@ 0x3e
 800615e:	d921      	bls.n	80061a4 <USB_EPStartXfer+0xac0>
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <USB_EPStartXfer+0xa9c>
 8006176:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800617a:	3b01      	subs	r3, #1
 800617c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29a      	uxth	r2, r3
 8006186:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800618a:	b29b      	uxth	r3, r3
 800618c:	029b      	lsls	r3, r3, #10
 800618e:	b29b      	uxth	r3, r3
 8006190:	4313      	orrs	r3, r2
 8006192:	b29b      	uxth	r3, r3
 8006194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619c:	b29a      	uxth	r2, r3
 800619e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e050      	b.n	8006246 <USB_EPStartXfer+0xb62>
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <USB_EPStartXfer+0xade>
 80061ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e041      	b.n	8006246 <USB_EPStartXfer+0xb62>
 80061c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <USB_EPStartXfer+0xafe>
 80061d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80061dc:	3301      	adds	r3, #1
 80061de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80061e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	029b      	lsls	r3, r3, #10
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	e024      	b.n	8006246 <USB_EPStartXfer+0xb62>
 80061fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d11c      	bne.n	8006246 <USB_EPStartXfer+0xb62>
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621a:	b29b      	uxth	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006220:	4413      	add	r3, r2
 8006222:	673b      	str	r3, [r7, #112]	@ 0x70
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	011a      	lsls	r2, r3, #4
 8006232:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006234:	4413      	add	r3, r2
 8006236:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800623a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006240:	b29a      	uxth	r2, r3
 8006242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006244:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	895b      	ldrh	r3, [r3, #10]
 8006252:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6959      	ldr	r1, [r3, #20]
 8006262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006266:	b29b      	uxth	r3, r3
 8006268:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800626c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006270:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006274:	6800      	ldr	r0, [r0, #0]
 8006276:	f000 ff24 	bl	80070c2 <USB_WritePMA>
 800627a:	e0ca      	b.n	8006412 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d177      	bne.n	800637c <USB_EPStartXfer+0xc98>
 800628c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062ac:	4413      	add	r3, r2
 80062ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	011a      	lsls	r2, r3, #4
 80062be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062c0:	4413      	add	r3, r2
 80062c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80062de:	d921      	bls.n	8006324 <USB_EPStartXfer+0xc40>
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <USB_EPStartXfer+0xc1c>
 80062f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80062fa:	3b01      	subs	r3, #1
 80062fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29a      	uxth	r2, r3
 8006306:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800630a:	b29b      	uxth	r3, r3
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	b29b      	uxth	r3, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	b29b      	uxth	r3, r3
 8006314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631c:	b29a      	uxth	r2, r3
 800631e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	e05c      	b.n	80063de <USB_EPStartXfer+0xcfa>
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <USB_EPStartXfer+0xc5e>
 800632c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633a:	b29a      	uxth	r2, r3
 800633c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	e04d      	b.n	80063de <USB_EPStartXfer+0xcfa>
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <USB_EPStartXfer+0xc7e>
 8006358:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800635c:	3301      	adds	r3, #1
 800635e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29a      	uxth	r2, r3
 8006368:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800636c:	b29b      	uxth	r3, r3
 800636e:	029b      	lsls	r3, r3, #10
 8006370:	b29b      	uxth	r3, r3
 8006372:	4313      	orrs	r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	e030      	b.n	80063de <USB_EPStartXfer+0xcfa>
 800637c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d128      	bne.n	80063de <USB_EPStartXfer+0xcfa>
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800639a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063b0:	4413      	add	r3, r2
 80063b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	011a      	lsls	r2, r3, #4
 80063c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063c8:	4413      	add	r3, r2
 80063ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80063dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	891b      	ldrh	r3, [r3, #8]
 80063ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6959      	ldr	r1, [r3, #20]
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006404:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006408:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	f000 fe58 	bl	80070c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006438:	817b      	strh	r3, [r7, #10]
 800643a:	897b      	ldrh	r3, [r7, #10]
 800643c:	f083 0310 	eor.w	r3, r3, #16
 8006440:	817b      	strh	r3, [r7, #10]
 8006442:	897b      	ldrh	r3, [r7, #10]
 8006444:	f083 0320 	eor.w	r3, r3, #32
 8006448:	817b      	strh	r3, [r7, #10]
 800644a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	897b      	ldrh	r3, [r7, #10]
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]
 800647a:	f000 bcde 	b.w	8006e3a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	7b1b      	ldrb	r3, [r3, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f040 80bb 	bne.w	8006606 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d917      	bls.n	80064dc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80064ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80064bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	619a      	str	r2, [r3, #24]
 80064da:	e00e      	b.n	80064fa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80064dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80064ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2200      	movs	r2, #0
 80064f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006516:	b29b      	uxth	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800651e:	4413      	add	r3, r2
 8006520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	011a      	lsls	r2, r3, #4
 8006532:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006536:	4413      	add	r3, r2
 8006538:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800653c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800654c:	b29a      	uxth	r2, r3
 800654e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	2b3e      	cmp	r3, #62	@ 0x3e
 800655a:	d924      	bls.n	80065a6 <USB_EPStartXfer+0xec2>
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <USB_EPStartXfer+0xe98>
 8006572:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006576:	3b01      	subs	r3, #1
 8006578:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800657c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29a      	uxth	r2, r3
 8006584:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006588:	b29b      	uxth	r3, r3
 800658a:	029b      	lsls	r3, r3, #10
 800658c:	b29b      	uxth	r3, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	f000 bc10 	b.w	8006dc6 <USB_EPStartXfer+0x16e2>
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10c      	bne.n	80065c8 <USB_EPStartXfer+0xee4>
 80065ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065be:	b29a      	uxth	r2, r3
 80065c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	e3fe      	b.n	8006dc6 <USB_EPStartXfer+0x16e2>
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <USB_EPStartXfer+0xf04>
 80065de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80065e2:	3301      	adds	r3, #1
 80065e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	4313      	orrs	r3, r2
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e3df      	b.n	8006dc6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	78db      	ldrb	r3, [r3, #3]
 8006612:	2b02      	cmp	r3, #2
 8006614:	f040 8218 	bne.w	8006a48 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 809d 	bne.w	8006764 <USB_EPStartXfer+0x1080>
 800662a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006646:	b29b      	uxth	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800664e:	4413      	add	r3, r2
 8006650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	011a      	lsls	r2, r3, #4
 8006662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006666:	4413      	add	r3, r2
 8006668:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800666c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800667c:	b29a      	uxth	r2, r3
 800667e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b3e      	cmp	r3, #62	@ 0x3e
 8006692:	d92b      	bls.n	80066ec <USB_EPStartXfer+0x1008>
 8006694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <USB_EPStartXfer+0xfe0>
 80066ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066be:	3b01      	subs	r3, #1
 80066c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	029b      	lsls	r3, r3, #10
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	4313      	orrs	r3, r2
 80066d8:	b29b      	uxth	r3, r3
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e070      	b.n	80067ce <USB_EPStartXfer+0x10ea>
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10c      	bne.n	8006716 <USB_EPStartXfer+0x1032>
 80066fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e05b      	b.n	80067ce <USB_EPStartXfer+0x10ea>
 8006716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <USB_EPStartXfer+0x1062>
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006740:	3301      	adds	r3, #1
 8006742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006752:	b29b      	uxth	r3, r3
 8006754:	029b      	lsls	r3, r3, #10
 8006756:	b29b      	uxth	r3, r3
 8006758:	4313      	orrs	r3, r2
 800675a:	b29a      	uxth	r2, r3
 800675c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	e034      	b.n	80067ce <USB_EPStartXfer+0x10ea>
 8006764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d12c      	bne.n	80067ce <USB_EPStartXfer+0x10ea>
 8006774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006798:	4413      	add	r3, r2
 800679a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800679e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	011a      	lsls	r2, r3, #4
 80067ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 809d 	bne.w	8006928 <USB_EPStartXfer+0x1244>
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800680a:	b29b      	uxth	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006812:	4413      	add	r3, r2
 8006814:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	011a      	lsls	r2, r3, #4
 8006826:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800682a:	4413      	add	r3, r2
 800682c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006834:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006840:	b29a      	uxth	r2, r3
 8006842:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	2b3e      	cmp	r3, #62	@ 0x3e
 8006856:	d92b      	bls.n	80068b0 <USB_EPStartXfer+0x11cc>
 8006858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800686a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2b00      	cmp	r3, #0
 800687c:	d104      	bne.n	8006888 <USB_EPStartXfer+0x11a4>
 800687e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006882:	3b01      	subs	r3, #1
 8006884:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006888:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29a      	uxth	r2, r3
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006894:	b29b      	uxth	r3, r3
 8006896:	029b      	lsls	r3, r3, #10
 8006898:	b29b      	uxth	r3, r3
 800689a:	4313      	orrs	r3, r2
 800689c:	b29b      	uxth	r3, r3
 800689e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	e069      	b.n	8006984 <USB_EPStartXfer+0x12a0>
 80068b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10c      	bne.n	80068da <USB_EPStartXfer+0x11f6>
 80068c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	e054      	b.n	8006984 <USB_EPStartXfer+0x12a0>
 80068da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <USB_EPStartXfer+0x1226>
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	3301      	adds	r3, #1
 8006906:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800690a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29a      	uxth	r2, r3
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006916:	b29b      	uxth	r3, r3
 8006918:	029b      	lsls	r3, r3, #10
 800691a:	b29b      	uxth	r3, r3
 800691c:	4313      	orrs	r3, r2
 800691e:	b29a      	uxth	r2, r3
 8006920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	e02d      	b.n	8006984 <USB_EPStartXfer+0x12a0>
 8006928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d125      	bne.n	8006984 <USB_EPStartXfer+0x12a0>
 8006938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800694e:	4413      	add	r3, r2
 8006950:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	011a      	lsls	r2, r3, #4
 8006962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006966:	4413      	add	r3, r2
 8006968:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800696c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	b29a      	uxth	r2, r3
 800697e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006982:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8218 	beq.w	8006dc6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <USB_EPStartXfer+0x12ea>
 80069c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10d      	bne.n	80069ea <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f040 81f5 	bne.w	8006dc6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 81ee 	bne.w	8006dc6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80069ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a10:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]
 8006a46:	e1be      	b.n	8006dc6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	78db      	ldrb	r3, [r3, #3]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	f040 81b4 	bne.w	8006dc2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d917      	bls.n	8006aa6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	619a      	str	r2, [r3, #24]
 8006aa4:	e00e      	b.n	8006ac4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f040 8085 	bne.w	8006be0 <USB_EPStartXfer+0x14fc>
 8006ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ada:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006afa:	4413      	add	r3, r2
 8006afc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	011a      	lsls	r2, r3, #4
 8006b0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b12:	4413      	add	r3, r2
 8006b14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b34:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b36:	d923      	bls.n	8006b80 <USB_EPStartXfer+0x149c>
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <USB_EPStartXfer+0x1474>
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b52:	3b01      	subs	r3, #1
 8006b54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	029b      	lsls	r3, r3, #10
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b7c:	801a      	strh	r2, [r3, #0]
 8006b7e:	e060      	b.n	8006c42 <USB_EPStartXfer+0x155e>
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10c      	bne.n	8006ba2 <USB_EPStartXfer+0x14be>
 8006b88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e04f      	b.n	8006c42 <USB_EPStartXfer+0x155e>
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <USB_EPStartXfer+0x14de>
 8006bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	e030      	b.n	8006c42 <USB_EPStartXfer+0x155e>
 8006be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d128      	bne.n	8006c42 <USB_EPStartXfer+0x155e>
 8006bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c14:	4413      	add	r3, r2
 8006c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	011a      	lsls	r2, r3, #4
 8006c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f040 8085 	bne.w	8006d6c <USB_EPStartXfer+0x1688>
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c86:	4413      	add	r3, r2
 8006c88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	011a      	lsls	r2, r3, #4
 8006c9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ca8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cc2:	d923      	bls.n	8006d0c <USB_EPStartXfer+0x1628>
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d104      	bne.n	8006ce4 <USB_EPStartXfer+0x1600>
 8006cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	029b      	lsls	r3, r3, #10
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	e05c      	b.n	8006dc6 <USB_EPStartXfer+0x16e2>
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10c      	bne.n	8006d2e <USB_EPStartXfer+0x164a>
 8006d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	e04b      	b.n	8006dc6 <USB_EPStartXfer+0x16e2>
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d004      	beq.n	8006d4e <USB_EPStartXfer+0x166a>
 8006d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d48:	3301      	adds	r3, #1
 8006d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	4313      	orrs	r3, r2
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	e02c      	b.n	8006dc6 <USB_EPStartXfer+0x16e2>
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d124      	bne.n	8006dc6 <USB_EPStartXfer+0x16e2>
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d92:	4413      	add	r3, r2
 8006d94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	011a      	lsls	r2, r3, #4
 8006da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006daa:	4413      	add	r3, r2
 8006dac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006db0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e001      	b.n	8006dc6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e03a      	b.n	8006e3c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006df0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006df4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006df8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006dfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006e00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d020      	beq.n	8006e9a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e6e:	81bb      	strh	r3, [r7, #12]
 8006e70:	89bb      	ldrh	r3, [r7, #12]
 8006e72:	f083 0310 	eor.w	r3, r3, #16
 8006e76:	81bb      	strh	r3, [r7, #12]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	441a      	add	r2, r3
 8006e82:	89bb      	ldrh	r3, [r7, #12]
 8006e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]
 8006e98:	e01f      	b.n	8006eda <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb0:	81fb      	strh	r3, [r7, #14]
 8006eb2:	89fb      	ldrh	r3, [r7, #14]
 8006eb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006eb8:	81fb      	strh	r3, [r7, #14]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr

08006ee6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b087      	sub	sp, #28
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	7b1b      	ldrb	r3, [r3, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 809d 	bne.w	8007034 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d04c      	beq.n	8006f9c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	823b      	strh	r3, [r7, #16]
 8006f10:	8a3b      	ldrh	r3, [r7, #16]
 8006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01b      	beq.n	8006f52 <USB_EPClearStall+0x6c>
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f30:	81fb      	strh	r3, [r7, #14]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	441a      	add	r2, r3
 8006f3c:	89fb      	ldrh	r3, [r7, #14]
 8006f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	78db      	ldrb	r3, [r3, #3]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d06c      	beq.n	8007034 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f70:	81bb      	strh	r3, [r7, #12]
 8006f72:	89bb      	ldrh	r3, [r7, #12]
 8006f74:	f083 0320 	eor.w	r3, r3, #32
 8006f78:	81bb      	strh	r3, [r7, #12]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	441a      	add	r2, r3
 8006f84:	89bb      	ldrh	r3, [r7, #12]
 8006f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	8013      	strh	r3, [r2, #0]
 8006f9a:	e04b      	b.n	8007034 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	82fb      	strh	r3, [r7, #22]
 8006faa:	8afb      	ldrh	r3, [r7, #22]
 8006fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01b      	beq.n	8006fec <USB_EPClearStall+0x106>
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fca:	82bb      	strh	r3, [r7, #20]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	441a      	add	r2, r3
 8006fd6:	8abb      	ldrh	r3, [r7, #20]
 8006fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007002:	827b      	strh	r3, [r7, #18]
 8007004:	8a7b      	ldrh	r3, [r7, #18]
 8007006:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800700a:	827b      	strh	r3, [r7, #18]
 800700c:	8a7b      	ldrh	r3, [r7, #18]
 800700e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007012:	827b      	strh	r3, [r7, #18]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	8a7b      	ldrh	r3, [r7, #18]
 8007020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800702c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007030:	b29b      	uxth	r3, r3
 8007032:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr

08007040 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2280      	movs	r2, #128	@ 0x80
 8007056:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr

08007066 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr

0800707a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr

0800708e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800709c:	b29b      	uxth	r3, r3
 800709e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80070a0:	68fb      	ldr	r3, [r7, #12]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b08b      	sub	sp, #44	@ 0x2c
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	4611      	mov	r1, r2
 80070ce:	461a      	mov	r2, r3
 80070d0:	460b      	mov	r3, r1
 80070d2:	80fb      	strh	r3, [r7, #6]
 80070d4:	4613      	mov	r3, r2
 80070d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070d8:	88bb      	ldrh	r3, [r7, #4]
 80070da:	3301      	adds	r3, #1
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070e8:	88fb      	ldrh	r3, [r7, #6]
 80070ea:	005a      	lsls	r2, r3, #1
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80070fa:	e01e      	b.n	800713a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	3301      	adds	r3, #1
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	b21a      	sxth	r2, r3
 800710c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007110:	4313      	orrs	r3, r2
 8007112:	b21b      	sxth	r3, r3
 8007114:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	8a7a      	ldrh	r2, [r7, #18]
 800711a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	3302      	adds	r3, #2
 8007120:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	3302      	adds	r3, #2
 8007126:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	3301      	adds	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	3301      	adds	r3, #1
 8007132:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	3b01      	subs	r3, #1
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1dd      	bne.n	80070fc <USB_WritePMA+0x3a>
  }
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	372c      	adds	r7, #44	@ 0x2c
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800714c:	b480      	push	{r7}
 800714e:	b08b      	sub	sp, #44	@ 0x2c
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4611      	mov	r1, r2
 8007158:	461a      	mov	r2, r3
 800715a:	460b      	mov	r3, r1
 800715c:	80fb      	strh	r3, [r7, #6]
 800715e:	4613      	mov	r3, r2
 8007160:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007162:	88bb      	ldrh	r3, [r7, #4]
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	005a      	lsls	r2, r3, #1
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800717e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
 8007184:	e01b      	b.n	80071be <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	3302      	adds	r3, #2
 8007192:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	3301      	adds	r3, #1
 80071a0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	0a1b      	lsrs	r3, r3, #8
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	3301      	adds	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	3302      	adds	r3, #2
 80071b6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	3b01      	subs	r3, #1
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e0      	bne.n	8007186 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80071c4:	88bb      	ldrh	r3, [r7, #4]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d007      	beq.n	80071e0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	701a      	strb	r2, [r3, #0]
  }
}
 80071e0:	bf00      	nop
 80071e2:	372c      	adds	r7, #44	@ 0x2c
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr

080071ea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	460b      	mov	r3, r1
 80071f4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7c1b      	ldrb	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d115      	bne.n	800722e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007206:	2202      	movs	r2, #2
 8007208:	2181      	movs	r1, #129	@ 0x81
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 feab 	bl	8008f66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800721a:	2202      	movs	r2, #2
 800721c:	2101      	movs	r1, #1
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fea1 	bl	8008f66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800722c:	e012      	b.n	8007254 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800722e:	2340      	movs	r3, #64	@ 0x40
 8007230:	2202      	movs	r2, #2
 8007232:	2181      	movs	r1, #129	@ 0x81
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fe96 	bl	8008f66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007240:	2340      	movs	r3, #64	@ 0x40
 8007242:	2202      	movs	r2, #2
 8007244:	2101      	movs	r1, #1
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fe8d 	bl	8008f66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007254:	2308      	movs	r3, #8
 8007256:	2203      	movs	r2, #3
 8007258:	2182      	movs	r1, #130	@ 0x82
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fe83 	bl	8008f66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007266:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800726a:	f001 ffa3 	bl	80091b4 <USBD_static_malloc>
 800726e:	4602      	mov	r2, r0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007280:	2301      	movs	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
 8007284:	e026      	b.n	80072d4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800728c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7c1b      	ldrb	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d109      	bne.n	80072c4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072ba:	2101      	movs	r1, #1
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 ff42 	bl	8009146 <USBD_LL_PrepareReceive>
 80072c2:	e007      	b.n	80072d4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072ca:	2340      	movs	r3, #64	@ 0x40
 80072cc:	2101      	movs	r1, #1
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 ff39 	bl	8009146 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072ee:	2181      	movs	r1, #129	@ 0x81
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fe5e 	bl	8008fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072fc:	2101      	movs	r1, #1
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 fe57 	bl	8008fb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800730c:	2182      	movs	r1, #130	@ 0x82
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fe4f 	bl	8008fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00e      	beq.n	8007342 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007334:	4618      	mov	r0, r3
 8007336:	f001 ff49 	bl	80091cc <USBD_static_free>
    pdev->pClassData = NULL;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800735c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007372:	2b00      	cmp	r3, #0
 8007374:	d039      	beq.n	80073ea <USBD_CDC_Setup+0x9e>
 8007376:	2b20      	cmp	r3, #32
 8007378:	d17f      	bne.n	800747a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	88db      	ldrh	r3, [r3, #6]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d029      	beq.n	80073d6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	b25b      	sxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	da11      	bge.n	80073b0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007398:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	88d2      	ldrh	r2, [r2, #6]
 800739e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80073a0:	6939      	ldr	r1, [r7, #16]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	88db      	ldrh	r3, [r3, #6]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 fa05 	bl	80087b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80073ae:	e06b      	b.n	8007488 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	785a      	ldrb	r2, [r3, #1]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	88db      	ldrh	r3, [r3, #6]
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80073c6:	6939      	ldr	r1, [r7, #16]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	88db      	ldrh	r3, [r3, #6]
 80073cc:	461a      	mov	r2, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 fa20 	bl	8008814 <USBD_CtlPrepareRx>
      break;
 80073d4:	e058      	b.n	8007488 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	7850      	ldrb	r0, [r2, #1]
 80073e2:	2200      	movs	r2, #0
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	4798      	blx	r3
      break;
 80073e8:	e04e      	b.n	8007488 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b0b      	cmp	r3, #11
 80073f0:	d02e      	beq.n	8007450 <USBD_CDC_Setup+0x104>
 80073f2:	2b0b      	cmp	r3, #11
 80073f4:	dc38      	bgt.n	8007468 <USBD_CDC_Setup+0x11c>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <USBD_CDC_Setup+0xb4>
 80073fa:	2b0a      	cmp	r3, #10
 80073fc:	d014      	beq.n	8007428 <USBD_CDC_Setup+0xdc>
 80073fe:	e033      	b.n	8007468 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007406:	2b03      	cmp	r3, #3
 8007408:	d107      	bne.n	800741a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800740a:	f107 030c 	add.w	r3, r7, #12
 800740e:	2202      	movs	r2, #2
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f9d0 	bl	80087b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007418:	e02e      	b.n	8007478 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 f961 	bl	80086e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007422:	2302      	movs	r3, #2
 8007424:	75fb      	strb	r3, [r7, #23]
          break;
 8007426:	e027      	b.n	8007478 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800742e:	2b03      	cmp	r3, #3
 8007430:	d107      	bne.n	8007442 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007432:	f107 030f 	add.w	r3, r7, #15
 8007436:	2201      	movs	r2, #1
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 f9bc 	bl	80087b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007440:	e01a      	b.n	8007478 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f94d 	bl	80086e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800744a:	2302      	movs	r3, #2
 800744c:	75fb      	strb	r3, [r7, #23]
          break;
 800744e:	e013      	b.n	8007478 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007456:	2b03      	cmp	r3, #3
 8007458:	d00d      	beq.n	8007476 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 f941 	bl	80086e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007462:	2302      	movs	r3, #2
 8007464:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007466:	e006      	b.n	8007476 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f93a 	bl	80086e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007470:	2302      	movs	r3, #2
 8007472:	75fb      	strb	r3, [r7, #23]
          break;
 8007474:	e000      	b.n	8007478 <USBD_CDC_Setup+0x12c>
          break;
 8007476:	bf00      	nop
      }
      break;
 8007478:	e006      	b.n	8007488 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f931 	bl	80086e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007482:	2302      	movs	r3, #2
 8007484:	75fb      	strb	r3, [r7, #23]
      break;
 8007486:	bf00      	nop
  }

  return ret;
 8007488:	7dfb      	ldrb	r3, [r7, #23]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80074ac:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d03a      	beq.n	800752e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	331c      	adds	r3, #28
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d029      	beq.n	8007522 <USBD_CDC_DataIn+0x90>
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	331c      	adds	r3, #28
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	78f9      	ldrb	r1, [r7, #3]
 80074e2:	68b8      	ldr	r0, [r7, #8]
 80074e4:	460b      	mov	r3, r1
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4403      	add	r3, r0
 80074ee:	3320      	adds	r3, #32
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d110      	bne.n	8007522 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007500:	78fa      	ldrb	r2, [r7, #3]
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	331c      	adds	r3, #28
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007514:	78f9      	ldrb	r1, [r7, #3]
 8007516:	2300      	movs	r3, #0
 8007518:	2200      	movs	r2, #0
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 fdf0 	bl	8009100 <USBD_LL_Transmit>
 8007520:	e003      	b.n	800752a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e000      	b.n	8007530 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800752e:	2302      	movs	r3, #2
  }
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800754a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fe1b 	bl	800918c <USBD_LL_GetRxDataSize>
 8007556:	4602      	mov	r2, r0
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00d      	beq.n	8007584 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800757c:	4611      	mov	r1, r2
 800757e:	4798      	blx	r3

    return USBD_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	e000      	b.n	8007586 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007584:	2302      	movs	r3, #2
  }
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800759c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d014      	beq.n	80075d2 <USBD_CDC_EP0_RxReady+0x44>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80075ae:	2bff      	cmp	r3, #255	@ 0xff
 80075b0:	d00f      	beq.n	80075d2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80075c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	22ff      	movs	r2, #255	@ 0xff
 80075ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2243      	movs	r2, #67	@ 0x43
 80075e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80075ea:	4b03      	ldr	r3, [pc, #12]	@ (80075f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	20000098 	.word	0x20000098

080075fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2243      	movs	r2, #67	@ 0x43
 8007608:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800760a:	4b03      	ldr	r3, [pc, #12]	@ (8007618 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000054 	.word	0x20000054

0800761c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2243      	movs	r2, #67	@ 0x43
 8007628:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800762a:	4b03      	ldr	r3, [pc, #12]	@ (8007638 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	200000dc 	.word	0x200000dc

0800763c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	220a      	movs	r2, #10
 8007648:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800764a:	4b03      	ldr	r3, [pc, #12]	@ (8007658 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20000010 	.word	0x20000010

0800765c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007666:	2302      	movs	r3, #2
 8007668:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800769c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80076a6:	88fa      	ldrh	r2, [r7, #6]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr

080076ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr

080076e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01c      	beq.n	8007734 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007700:	2b00      	cmp	r3, #0
 8007702:	d115      	bne.n	8007730 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007722:	b29b      	uxth	r3, r3
 8007724:	2181      	movs	r1, #129	@ 0x81
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fcea 	bl	8009100 <USBD_LL_Transmit>

      return USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	e002      	b.n	8007736 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800774c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007754:	2b00      	cmp	r3, #0
 8007756:	d017      	beq.n	8007788 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	7c1b      	ldrb	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800776a:	2101      	movs	r1, #1
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fcea 	bl	8009146 <USBD_LL_PrepareReceive>
 8007772:	e007      	b.n	8007784 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800777a:	2340      	movs	r3, #64	@ 0x40
 800777c:	2101      	movs	r1, #1
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fce1 	bl	8009146 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	4613      	mov	r3, r2
 800779e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80077a6:	2302      	movs	r3, #2
 80077a8:	e01a      	b.n	80077e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	79fa      	ldrb	r2, [r7, #7]
 80077d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f001 fb4f 	bl	8008e7c <USBD_LL_Init>

  return USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
 8007808:	e001      	b.n	800780e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800780a:	2302      	movs	r3, #2
 800780c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fb84 	bl	8008f30 <USBD_LL_Start>

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr

08007846 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007852:	2302      	movs	r3, #2
 8007854:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00c      	beq.n	800787a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	78fa      	ldrb	r2, [r7, #3]
 800786a:	4611      	mov	r1, r2
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	4611      	mov	r1, r2
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	4798      	blx	r3

  return USBD_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fed8 	bl	8008672 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80078d0:	461a      	mov	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d016      	beq.n	8007914 <USBD_LL_SetupStage+0x6a>
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d81c      	bhi.n	8007924 <USBD_LL_SetupStage+0x7a>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <USBD_LL_SetupStage+0x4a>
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d008      	beq.n	8007904 <USBD_LL_SetupStage+0x5a>
 80078f2:	e017      	b.n	8007924 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f9cb 	bl	8007c98 <USBD_StdDevReq>
      break;
 8007902:	e01a      	b.n	800793a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa2d 	bl	8007d6c <USBD_StdItfReq>
      break;
 8007912:	e012      	b.n	800793a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa6d 	bl	8007dfc <USBD_StdEPReq>
      break;
 8007922:	e00a      	b.n	800793a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800792a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800792e:	b2db      	uxtb	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fb5c 	bl	8008ff0 <USBD_LL_StallEP>
      break;
 8007938:	bf00      	nop
  }

  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	460b      	mov	r3, r1
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d14b      	bne.n	80079f0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800795e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007966:	2b03      	cmp	r3, #3
 8007968:	d134      	bne.n	80079d4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	429a      	cmp	r2, r3
 8007974:	d919      	bls.n	80079aa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800798c:	429a      	cmp	r2, r3
 800798e:	d203      	bcs.n	8007998 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007994:	b29b      	uxth	r3, r3
 8007996:	e002      	b.n	800799e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800799c:	b29b      	uxth	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 ff54 	bl	8008850 <USBD_CtlContinueRx>
 80079a8:	e038      	b.n	8007a1c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d105      	bne.n	80079cc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 ff51 	bl	8008874 <USBD_CtlSendStatus>
 80079d2:	e023      	b.n	8007a1c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079da:	2b05      	cmp	r3, #5
 80079dc:	d11e      	bne.n	8007a1c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80079e6:	2100      	movs	r1, #0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f001 fb01 	bl	8008ff0 <USBD_LL_StallEP>
 80079ee:	e015      	b.n	8007a1c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00d      	beq.n	8007a18 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d108      	bne.n	8007a18 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	7afa      	ldrb	r2, [r7, #11]
 8007a10:	4611      	mov	r1, r2
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	4798      	blx	r3
 8007a16:	e001      	b.n	8007a1c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e000      	b.n	8007a1e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d17f      	bne.n	8007b3a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3314      	adds	r3, #20
 8007a3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d15c      	bne.n	8007b04 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d915      	bls.n	8007a82 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 febe 	bl	80087f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a74:	2300      	movs	r3, #0
 8007a76:	2200      	movs	r2, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f001 fb63 	bl	8009146 <USBD_LL_PrepareReceive>
 8007a80:	e04e      	b.n	8007b20 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	6912      	ldr	r2, [r2, #16]
 8007a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a8e:	fb01 f202 	mul.w	r2, r1, r2
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11c      	bne.n	8007ad2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d316      	bcc.n	8007ad2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d20f      	bcs.n	8007ad2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fe9a 	bl	80087f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f001 fb3b 	bl	8009146 <USBD_LL_PrepareReceive>
 8007ad0:	e026      	b.n	8007b20 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d105      	bne.n	8007af4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007af4:	2180      	movs	r1, #128	@ 0x80
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f001 fa7a 	bl	8008ff0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fecc 	bl	800889a <USBD_CtlReceiveStatus>
 8007b02:	e00d      	b.n	8007b20 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d004      	beq.n	8007b18 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007b18:	2180      	movs	r1, #128	@ 0x80
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 fa68 	bl	8008ff0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d11d      	bne.n	8007b66 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff fe81 	bl	8007832 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b38:	e015      	b.n	8007b66 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00d      	beq.n	8007b62 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d108      	bne.n	8007b62 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	7afa      	ldrb	r2, [r7, #11]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	4798      	blx	r3
 8007b60:	e001      	b.n	8007b66 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b62:	2302      	movs	r3, #2
 8007b64:	e000      	b.n	8007b68 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b78:	2340      	movs	r3, #64	@ 0x40
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 f9f1 	bl	8008f66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2240      	movs	r2, #64	@ 0x40
 8007b90:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b94:	2340      	movs	r3, #64	@ 0x40
 8007b96:	2200      	movs	r2, #0
 8007b98:	2180      	movs	r1, #128	@ 0x80
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 f9e3 	bl	8008f66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2240      	movs	r2, #64	@ 0x40
 8007baa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d009      	beq.n	8007be8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6852      	ldr	r2, [r2, #4]
 8007be0:	b2d2      	uxtb	r2, r2
 8007be2:	4611      	mov	r1, r2
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4798      	blx	r3
  }

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc80      	pop	{r7}
 8007c0e:	4770      	bx	lr

08007c10 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2204      	movs	r2, #4
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d105      	bne.n	8007c56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr

08007c62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d10b      	bne.n	8007c8c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cae:	2b40      	cmp	r3, #64	@ 0x40
 8007cb0:	d005      	beq.n	8007cbe <USBD_StdDevReq+0x26>
 8007cb2:	2b40      	cmp	r3, #64	@ 0x40
 8007cb4:	d84f      	bhi.n	8007d56 <USBD_StdDevReq+0xbe>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <USBD_StdDevReq+0x36>
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d14b      	bne.n	8007d56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
      break;
 8007ccc:	e048      	b.n	8007d60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	d839      	bhi.n	8007d4a <USBD_StdDevReq+0xb2>
 8007cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <USBD_StdDevReq+0x44>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007d2d 	.word	0x08007d2d
 8007ce0:	08007d41 	.word	0x08007d41
 8007ce4:	08007d4b 	.word	0x08007d4b
 8007ce8:	08007d37 	.word	0x08007d37
 8007cec:	08007d4b 	.word	0x08007d4b
 8007cf0:	08007d0f 	.word	0x08007d0f
 8007cf4:	08007d05 	.word	0x08007d05
 8007cf8:	08007d4b 	.word	0x08007d4b
 8007cfc:	08007d23 	.word	0x08007d23
 8007d00:	08007d19 	.word	0x08007d19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9dc 	bl	80080c4 <USBD_GetDescriptor>
          break;
 8007d0c:	e022      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fb3f 	bl	8008394 <USBD_SetAddress>
          break;
 8007d16:	e01d      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fb7e 	bl	800841c <USBD_SetConfig>
          break;
 8007d20:	e018      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc07 	bl	8008538 <USBD_GetConfig>
          break;
 8007d2a:	e013      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fc37 	bl	80085a2 <USBD_GetStatus>
          break;
 8007d34:	e00e      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fc65 	bl	8008608 <USBD_SetFeature>
          break;
 8007d3e:	e009      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fc74 	bl	8008630 <USBD_ClrFeature>
          break;
 8007d48:	e004      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fcc9 	bl	80086e4 <USBD_CtlError>
          break;
 8007d52:	bf00      	nop
      }
      break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fcc3 	bl	80086e4 <USBD_CtlError>
      break;
 8007d5e:	bf00      	nop
  }

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop

08007d6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d82:	2b40      	cmp	r3, #64	@ 0x40
 8007d84:	d005      	beq.n	8007d92 <USBD_StdItfReq+0x26>
 8007d86:	2b40      	cmp	r3, #64	@ 0x40
 8007d88:	d82e      	bhi.n	8007de8 <USBD_StdItfReq+0x7c>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <USBD_StdItfReq+0x26>
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d12a      	bne.n	8007de8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d81d      	bhi.n	8007dda <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	889b      	ldrh	r3, [r3, #4]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d813      	bhi.n	8007dd0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88db      	ldrh	r3, [r3, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d110      	bne.n	8007de4 <USBD_StdItfReq+0x78>
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10d      	bne.n	8007de4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fd53 	bl	8008874 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dce:	e009      	b.n	8007de4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fc86 	bl	80086e4 <USBD_CtlError>
          break;
 8007dd8:	e004      	b.n	8007de4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fc81 	bl	80086e4 <USBD_CtlError>
          break;
 8007de2:	e000      	b.n	8007de6 <USBD_StdItfReq+0x7a>
          break;
 8007de4:	bf00      	nop
      }
      break;
 8007de6:	e004      	b.n	8007df2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fc7a 	bl	80086e4 <USBD_CtlError>
      break;
 8007df0:	bf00      	nop
  }

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	889b      	ldrh	r3, [r3, #4]
 8007e0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e18:	2b40      	cmp	r3, #64	@ 0x40
 8007e1a:	d007      	beq.n	8007e2c <USBD_StdEPReq+0x30>
 8007e1c:	2b40      	cmp	r3, #64	@ 0x40
 8007e1e:	f200 8146 	bhi.w	80080ae <USBD_StdEPReq+0x2b2>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <USBD_StdEPReq+0x40>
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	f040 8141 	bne.w	80080ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
      break;
 8007e3a:	e13d      	b.n	80080b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	d10a      	bne.n	8007e5e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	e12d      	b.n	80080ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d007      	beq.n	8007e76 <USBD_StdEPReq+0x7a>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	f300 811b 	bgt.w	80080a2 <USBD_StdEPReq+0x2a6>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d072      	beq.n	8007f56 <USBD_StdEPReq+0x15a>
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d03a      	beq.n	8007eea <USBD_StdEPReq+0xee>
 8007e74:	e115      	b.n	80080a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d002      	beq.n	8007e86 <USBD_StdEPReq+0x8a>
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d015      	beq.n	8007eb0 <USBD_StdEPReq+0xb4>
 8007e84:	e02b      	b.n	8007ede <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00c      	beq.n	8007ea6 <USBD_StdEPReq+0xaa>
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	2b80      	cmp	r3, #128	@ 0x80
 8007e90:	d009      	beq.n	8007ea6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 f8aa 	bl	8008ff0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e9c:	2180      	movs	r1, #128	@ 0x80
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f8a6 	bl	8008ff0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ea4:	e020      	b.n	8007ee8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fc1b 	bl	80086e4 <USBD_CtlError>
              break;
 8007eae:	e01b      	b.n	8007ee8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	885b      	ldrh	r3, [r3, #2]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10e      	bne.n	8007ed6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <USBD_StdEPReq+0xda>
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b80      	cmp	r3, #128	@ 0x80
 8007ec2:	d008      	beq.n	8007ed6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	88db      	ldrh	r3, [r3, #6]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f88d 	bl	8008ff0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fccc 	bl	8008874 <USBD_CtlSendStatus>

              break;
 8007edc:	e004      	b.n	8007ee8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fbff 	bl	80086e4 <USBD_CtlError>
              break;
 8007ee6:	bf00      	nop
          }
          break;
 8007ee8:	e0e0      	b.n	80080ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d002      	beq.n	8007efa <USBD_StdEPReq+0xfe>
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d015      	beq.n	8007f24 <USBD_StdEPReq+0x128>
 8007ef8:	e026      	b.n	8007f48 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00c      	beq.n	8007f1a <USBD_StdEPReq+0x11e>
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b80      	cmp	r3, #128	@ 0x80
 8007f04:	d009      	beq.n	8007f1a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 f870 	bl	8008ff0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f10:	2180      	movs	r1, #128	@ 0x80
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 f86c 	bl	8008ff0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f18:	e01c      	b.n	8007f54 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fbe1 	bl	80086e4 <USBD_CtlError>
              break;
 8007f22:	e017      	b.n	8007f54 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	885b      	ldrh	r3, [r3, #2]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d112      	bne.n	8007f52 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 f877 	bl	800902e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fc97 	bl	8008874 <USBD_CtlSendStatus>
              }
              break;
 8007f46:	e004      	b.n	8007f52 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fbca 	bl	80086e4 <USBD_CtlError>
              break;
 8007f50:	e000      	b.n	8007f54 <USBD_StdEPReq+0x158>
              break;
 8007f52:	bf00      	nop
          }
          break;
 8007f54:	e0aa      	b.n	80080ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d002      	beq.n	8007f66 <USBD_StdEPReq+0x16a>
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d032      	beq.n	8007fca <USBD_StdEPReq+0x1ce>
 8007f64:	e097      	b.n	8008096 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <USBD_StdEPReq+0x180>
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b80      	cmp	r3, #128	@ 0x80
 8007f70:	d004      	beq.n	8007f7c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fbb5 	bl	80086e4 <USBD_CtlError>
                break;
 8007f7a:	e091      	b.n	80080a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da0b      	bge.n	8007f9c <USBD_StdEPReq+0x1a0>
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	3310      	adds	r3, #16
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	4413      	add	r3, r2
 8007f98:	3304      	adds	r3, #4
 8007f9a:	e00b      	b.n	8007fb4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fbf8 	bl	80087b8 <USBD_CtlSendData>
              break;
 8007fc8:	e06a      	b.n	80080a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da11      	bge.n	8007ff6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	f003 020f 	and.w	r2, r3, #15
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	3318      	adds	r3, #24
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d117      	bne.n	800801c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fb78 	bl	80086e4 <USBD_CtlError>
                  break;
 8007ff4:	e054      	b.n	80080a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	f003 020f 	and.w	r2, r3, #15
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fb65 	bl	80086e4 <USBD_CtlError>
                  break;
 800801a:	e041      	b.n	80080a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800801c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008020:	2b00      	cmp	r3, #0
 8008022:	da0b      	bge.n	800803c <USBD_StdEPReq+0x240>
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	3310      	adds	r3, #16
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	3304      	adds	r3, #4
 800803a:	e00b      	b.n	8008054 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	3304      	adds	r3, #4
 8008054:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <USBD_StdEPReq+0x266>
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b80      	cmp	r3, #128	@ 0x80
 8008060:	d103      	bne.n	800806a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	e00e      	b.n	8008088 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fffc 	bl	800906c <USBD_LL_IsStallEP>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2201      	movs	r2, #1
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	e002      	b.n	8008088 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2202      	movs	r2, #2
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb92 	bl	80087b8 <USBD_CtlSendData>
              break;
 8008094:	e004      	b.n	80080a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fb23 	bl	80086e4 <USBD_CtlError>
              break;
 800809e:	bf00      	nop
          }
          break;
 80080a0:	e004      	b.n	80080ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fb1d 	bl	80086e4 <USBD_CtlError>
          break;
 80080aa:	bf00      	nop
      }
      break;
 80080ac:	e004      	b.n	80080b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fb17 	bl	80086e4 <USBD_CtlError>
      break;
 80080b6:	bf00      	nop
  }

  return ret;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	885b      	ldrh	r3, [r3, #2]
 80080de:	0a1b      	lsrs	r3, r3, #8
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2b06      	cmp	r3, #6
 80080e6:	f200 8128 	bhi.w	800833a <USBD_GetDescriptor+0x276>
 80080ea:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <USBD_GetDescriptor+0x2c>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	0800810d 	.word	0x0800810d
 80080f4:	08008125 	.word	0x08008125
 80080f8:	08008165 	.word	0x08008165
 80080fc:	0800833b 	.word	0x0800833b
 8008100:	0800833b 	.word	0x0800833b
 8008104:	080082db 	.word	0x080082db
 8008108:	08008307 	.word	0x08008307
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7c12      	ldrb	r2, [r2, #16]
 8008118:	f107 0108 	add.w	r1, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
      break;
 8008122:	e112      	b.n	800834a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7c1b      	ldrb	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10d      	bne.n	8008148 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008134:	f107 0208 	add.w	r2, r7, #8
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
 800813c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3301      	adds	r3, #1
 8008142:	2202      	movs	r2, #2
 8008144:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008146:	e100      	b.n	800834a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800814e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008150:	f107 0208 	add.w	r2, r7, #8
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	2202      	movs	r2, #2
 8008160:	701a      	strb	r2, [r3, #0]
      break;
 8008162:	e0f2      	b.n	800834a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	885b      	ldrh	r3, [r3, #2]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b05      	cmp	r3, #5
 800816c:	f200 80ac 	bhi.w	80082c8 <USBD_GetDescriptor+0x204>
 8008170:	a201      	add	r2, pc, #4	@ (adr r2, 8008178 <USBD_GetDescriptor+0xb4>)
 8008172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008176:	bf00      	nop
 8008178:	08008191 	.word	0x08008191
 800817c:	080081c5 	.word	0x080081c5
 8008180:	080081f9 	.word	0x080081f9
 8008184:	0800822d 	.word	0x0800822d
 8008188:	08008261 	.word	0x08008261
 800818c:	08008295 	.word	0x08008295
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	7c12      	ldrb	r2, [r2, #16]
 80081a8:	f107 0108 	add.w	r1, r7, #8
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
 80081b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081b2:	e091      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa94 	bl	80086e4 <USBD_CtlError>
            err++;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	3301      	adds	r3, #1
 80081c0:	72fb      	strb	r3, [r7, #11]
          break;
 80081c2:	e089      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	7c12      	ldrb	r2, [r2, #16]
 80081dc:	f107 0108 	add.w	r1, r7, #8
 80081e0:	4610      	mov	r0, r2
 80081e2:	4798      	blx	r3
 80081e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081e6:	e077      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa7a 	bl	80086e4 <USBD_CtlError>
            err++;
 80081f0:	7afb      	ldrb	r3, [r7, #11]
 80081f2:	3301      	adds	r3, #1
 80081f4:	72fb      	strb	r3, [r7, #11]
          break;
 80081f6:	e06f      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00b      	beq.n	800821c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	7c12      	ldrb	r2, [r2, #16]
 8008210:	f107 0108 	add.w	r1, r7, #8
 8008214:	4610      	mov	r0, r2
 8008216:	4798      	blx	r3
 8008218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800821a:	e05d      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa60 	bl	80086e4 <USBD_CtlError>
            err++;
 8008224:	7afb      	ldrb	r3, [r7, #11]
 8008226:	3301      	adds	r3, #1
 8008228:	72fb      	strb	r3, [r7, #11]
          break;
 800822a:	e055      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	7c12      	ldrb	r2, [r2, #16]
 8008244:	f107 0108 	add.w	r1, r7, #8
 8008248:	4610      	mov	r0, r2
 800824a:	4798      	blx	r3
 800824c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800824e:	e043      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fa46 	bl	80086e4 <USBD_CtlError>
            err++;
 8008258:	7afb      	ldrb	r3, [r7, #11]
 800825a:	3301      	adds	r3, #1
 800825c:	72fb      	strb	r3, [r7, #11]
          break;
 800825e:	e03b      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	7c12      	ldrb	r2, [r2, #16]
 8008278:	f107 0108 	add.w	r1, r7, #8
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008282:	e029      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa2c 	bl	80086e4 <USBD_CtlError>
            err++;
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	3301      	adds	r3, #1
 8008290:	72fb      	strb	r3, [r7, #11]
          break;
 8008292:	e021      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00b      	beq.n	80082b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7c12      	ldrb	r2, [r2, #16]
 80082ac:	f107 0108 	add.w	r1, r7, #8
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082b6:	e00f      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa12 	bl	80086e4 <USBD_CtlError>
            err++;
 80082c0:	7afb      	ldrb	r3, [r7, #11]
 80082c2:	3301      	adds	r3, #1
 80082c4:	72fb      	strb	r3, [r7, #11]
          break;
 80082c6:	e007      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa0a 	bl	80086e4 <USBD_CtlError>
          err++;
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	3301      	adds	r3, #1
 80082d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80082d6:	e038      	b.n	800834a <USBD_GetDescriptor+0x286>
 80082d8:	e037      	b.n	800834a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	7c1b      	ldrb	r3, [r3, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ea:	f107 0208 	add.w	r2, r7, #8
 80082ee:	4610      	mov	r0, r2
 80082f0:	4798      	blx	r3
 80082f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082f4:	e029      	b.n	800834a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f9f3 	bl	80086e4 <USBD_CtlError>
        err++;
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	3301      	adds	r3, #1
 8008302:	72fb      	strb	r3, [r7, #11]
      break;
 8008304:	e021      	b.n	800834a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	7c1b      	ldrb	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10d      	bne.n	800832a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008316:	f107 0208 	add.w	r2, r7, #8
 800831a:	4610      	mov	r0, r2
 800831c:	4798      	blx	r3
 800831e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	2207      	movs	r2, #7
 8008326:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008328:	e00f      	b.n	800834a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f9d9 	bl	80086e4 <USBD_CtlError>
        err++;
 8008332:	7afb      	ldrb	r3, [r7, #11]
 8008334:	3301      	adds	r3, #1
 8008336:	72fb      	strb	r3, [r7, #11]
      break;
 8008338:	e007      	b.n	800834a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f9d1 	bl	80086e4 <USBD_CtlError>
      err++;
 8008342:	7afb      	ldrb	r3, [r7, #11]
 8008344:	3301      	adds	r3, #1
 8008346:	72fb      	strb	r3, [r7, #11]
      break;
 8008348:	bf00      	nop
  }

  if (err != 0U)
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d11c      	bne.n	800838a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008350:	893b      	ldrh	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d011      	beq.n	800837a <USBD_GetDescriptor+0x2b6>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	88db      	ldrh	r3, [r3, #6]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00d      	beq.n	800837a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88da      	ldrh	r2, [r3, #6]
 8008362:	893b      	ldrh	r3, [r7, #8]
 8008364:	4293      	cmp	r3, r2
 8008366:	bf28      	it	cs
 8008368:	4613      	movcs	r3, r2
 800836a:	b29b      	uxth	r3, r3
 800836c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800836e:	893b      	ldrh	r3, [r7, #8]
 8008370:	461a      	mov	r2, r3
 8008372:	68f9      	ldr	r1, [r7, #12]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa1f 	bl	80087b8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88db      	ldrh	r3, [r3, #6]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d104      	bne.n	800838c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa76 	bl	8008874 <USBD_CtlSendStatus>
 8008388:	e000      	b.n	800838c <USBD_GetDescriptor+0x2c8>
    return;
 800838a:	bf00      	nop
    }
  }
}
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop

08008394 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	889b      	ldrh	r3, [r3, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d130      	bne.n	8008408 <USBD_SetAddress+0x74>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	88db      	ldrh	r3, [r3, #6]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d12c      	bne.n	8008408 <USBD_SetAddress+0x74>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	885b      	ldrh	r3, [r3, #2]
 80083b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80083b4:	d828      	bhi.n	8008408 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	885b      	ldrh	r3, [r3, #2]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d104      	bne.n	80083d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f988 	bl	80086e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d4:	e01d      	b.n	8008412 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	7bfa      	ldrb	r2, [r7, #15]
 80083da:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fe6d 	bl	80090c2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa43 	bl	8008874 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d004      	beq.n	80083fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fc:	e009      	b.n	8008412 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008406:	e004      	b.n	8008412 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f96a 	bl	80086e4 <USBD_CtlError>
  }
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	885b      	ldrh	r3, [r3, #2]
 800842a:	b2da      	uxtb	r2, r3
 800842c:	4b41      	ldr	r3, [pc, #260]	@ (8008534 <USBD_SetConfig+0x118>)
 800842e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008430:	4b40      	ldr	r3, [pc, #256]	@ (8008534 <USBD_SetConfig+0x118>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d904      	bls.n	8008442 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f952 	bl	80086e4 <USBD_CtlError>
 8008440:	e075      	b.n	800852e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008448:	2b02      	cmp	r3, #2
 800844a:	d002      	beq.n	8008452 <USBD_SetConfig+0x36>
 800844c:	2b03      	cmp	r3, #3
 800844e:	d023      	beq.n	8008498 <USBD_SetConfig+0x7c>
 8008450:	e062      	b.n	8008518 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008452:	4b38      	ldr	r3, [pc, #224]	@ (8008534 <USBD_SetConfig+0x118>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01a      	beq.n	8008490 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800845a:	4b36      	ldr	r3, [pc, #216]	@ (8008534 <USBD_SetConfig+0x118>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2203      	movs	r2, #3
 8008468:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800846c:	4b31      	ldr	r3, [pc, #196]	@ (8008534 <USBD_SetConfig+0x118>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff f9e7 	bl	8007846 <USBD_SetClassConfig>
 8008478:	4603      	mov	r3, r0
 800847a:	2b02      	cmp	r3, #2
 800847c:	d104      	bne.n	8008488 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f92f 	bl	80086e4 <USBD_CtlError>
            return;
 8008486:	e052      	b.n	800852e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f9f3 	bl	8008874 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800848e:	e04e      	b.n	800852e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f9ef 	bl	8008874 <USBD_CtlSendStatus>
        break;
 8008496:	e04a      	b.n	800852e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008498:	4b26      	ldr	r3, [pc, #152]	@ (8008534 <USBD_SetConfig+0x118>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d112      	bne.n	80084c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80084a8:	4b22      	ldr	r3, [pc, #136]	@ (8008534 <USBD_SetConfig+0x118>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80084b2:	4b20      	ldr	r3, [pc, #128]	@ (8008534 <USBD_SetConfig+0x118>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff f9e3 	bl	8007884 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f9d8 	bl	8008874 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80084c4:	e033      	b.n	800852e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80084c6:	4b1b      	ldr	r3, [pc, #108]	@ (8008534 <USBD_SetConfig+0x118>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d01d      	beq.n	8008510 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff f9d1 	bl	8007884 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80084e2:	4b14      	ldr	r3, [pc, #80]	@ (8008534 <USBD_SetConfig+0x118>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084ec:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <USBD_SetConfig+0x118>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff f9a7 	bl	8007846 <USBD_SetClassConfig>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d104      	bne.n	8008508 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f8ef 	bl	80086e4 <USBD_CtlError>
            return;
 8008506:	e012      	b.n	800852e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f9b3 	bl	8008874 <USBD_CtlSendStatus>
        break;
 800850e:	e00e      	b.n	800852e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f9af 	bl	8008874 <USBD_CtlSendStatus>
        break;
 8008516:	e00a      	b.n	800852e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f8e2 	bl	80086e4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008520:	4b04      	ldr	r3, [pc, #16]	@ (8008534 <USBD_SetConfig+0x118>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff f9ac 	bl	8007884 <USBD_ClrClassConfig>
        break;
 800852c:	bf00      	nop
    }
  }
}
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200002e8 	.word	0x200002e8

08008538 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	88db      	ldrh	r3, [r3, #6]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d004      	beq.n	8008554 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8c9 	bl	80086e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008552:	e022      	b.n	800859a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855a:	2b02      	cmp	r3, #2
 800855c:	dc02      	bgt.n	8008564 <USBD_GetConfig+0x2c>
 800855e:	2b00      	cmp	r3, #0
 8008560:	dc03      	bgt.n	800856a <USBD_GetConfig+0x32>
 8008562:	e015      	b.n	8008590 <USBD_GetConfig+0x58>
 8008564:	2b03      	cmp	r3, #3
 8008566:	d00b      	beq.n	8008580 <USBD_GetConfig+0x48>
 8008568:	e012      	b.n	8008590 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3308      	adds	r3, #8
 8008574:	2201      	movs	r2, #1
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f91d 	bl	80087b8 <USBD_CtlSendData>
        break;
 800857e:	e00c      	b.n	800859a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3304      	adds	r3, #4
 8008584:	2201      	movs	r2, #1
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f915 	bl	80087b8 <USBD_CtlSendData>
        break;
 800858e:	e004      	b.n	800859a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8a6 	bl	80086e4 <USBD_CtlError>
        break;
 8008598:	bf00      	nop
}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b2:	3b01      	subs	r3, #1
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d81e      	bhi.n	80085f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	88db      	ldrh	r3, [r3, #6]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d004      	beq.n	80085ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f88e 	bl	80086e4 <USBD_CtlError>
        break;
 80085c8:	e01a      	b.n	8008600 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f043 0202 	orr.w	r2, r3, #2
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	330c      	adds	r3, #12
 80085ea:	2202      	movs	r2, #2
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f8e2 	bl	80087b8 <USBD_CtlSendData>
      break;
 80085f4:	e004      	b.n	8008600 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f873 	bl	80086e4 <USBD_CtlError>
      break;
 80085fe:	bf00      	nop
  }
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	885b      	ldrh	r3, [r3, #2]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d106      	bne.n	8008628 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f926 	bl	8008874 <USBD_CtlSendStatus>
  }
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008640:	3b01      	subs	r3, #1
 8008642:	2b02      	cmp	r3, #2
 8008644:	d80b      	bhi.n	800865e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d10c      	bne.n	8008668 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f90c 	bl	8008874 <USBD_CtlSendStatus>
      }
      break;
 800865c:	e004      	b.n	8008668 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f83f 	bl	80086e4 <USBD_CtlError>
      break;
 8008666:	e000      	b.n	800866a <USBD_ClrFeature+0x3a>
      break;
 8008668:	bf00      	nop
  }
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	785a      	ldrb	r2, [r3, #1]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	3302      	adds	r3, #2
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	3303      	adds	r3, #3
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	b29b      	uxth	r3, r3
 800869e:	4413      	add	r3, r2
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	3304      	adds	r3, #4
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	3305      	adds	r3, #5
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	4413      	add	r3, r2
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	3306      	adds	r3, #6
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	3307      	adds	r3, #7
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	80da      	strh	r2, [r3, #6]

}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr

080086e4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086ee:	2180      	movs	r1, #128	@ 0x80
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fc7d 	bl	8008ff0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086f6:	2100      	movs	r1, #0
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fc79 	bl	8008ff0 <USBD_LL_StallEP>
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b086      	sub	sp, #24
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d032      	beq.n	8008782 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f834 	bl	800878a <USBD_GetLen>
 8008722:	4603      	mov	r3, r0
 8008724:	3301      	adds	r3, #1
 8008726:	b29b      	uxth	r3, r3
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	75fa      	strb	r2, [r7, #23]
 8008736:	461a      	mov	r2, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4413      	add	r3, r2
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7812      	ldrb	r2, [r2, #0]
 8008740:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	75fa      	strb	r2, [r7, #23]
 8008748:	461a      	mov	r2, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	2203      	movs	r2, #3
 8008750:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008752:	e012      	b.n	800877a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	60fa      	str	r2, [r7, #12]
 800875a:	7dfa      	ldrb	r2, [r7, #23]
 800875c:	1c51      	adds	r1, r2, #1
 800875e:	75f9      	strb	r1, [r7, #23]
 8008760:	4611      	mov	r1, r2
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	440a      	add	r2, r1
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	75fa      	strb	r2, [r7, #23]
 8008770:	461a      	mov	r2, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4413      	add	r3, r2
 8008776:	2200      	movs	r2, #0
 8008778:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e8      	bne.n	8008754 <USBD_GetString+0x4e>
    }
  }
}
 8008782:	bf00      	nop
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008796:	e005      	b.n	80087a4 <USBD_GetLen+0x1a>
  {
    len++;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	3301      	adds	r3, #1
 800879c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3301      	adds	r3, #1
 80087a2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1f5      	bne.n	8008798 <USBD_GetLen+0xe>
  }

  return len;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2202      	movs	r2, #2
 80087ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80087ce:	88fa      	ldrh	r2, [r7, #6]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80087d4:	88fa      	ldrh	r2, [r7, #6]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	2100      	movs	r1, #0
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 fc8d 	bl	8009100 <USBD_LL_Transmit>

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087fe:	88fb      	ldrh	r3, [r7, #6]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	2100      	movs	r1, #0
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fc7b 	bl	8009100 <USBD_LL_Transmit>

  return USBD_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2203      	movs	r2, #3
 8008826:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	2100      	movs	r1, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fc80 	bl	8009146 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	2100      	movs	r1, #0
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fc6e 	bl	8009146 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2204      	movs	r2, #4
 8008880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008884:	2300      	movs	r3, #0
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fc38 	bl	8009100 <USBD_LL_Transmit>

  return USBD_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2205      	movs	r2, #5
 80088a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088aa:	2300      	movs	r3, #0
 80088ac:	2200      	movs	r2, #0
 80088ae:	2100      	movs	r1, #0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fc48 	bl	8009146 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088c4:	2200      	movs	r2, #0
 80088c6:	4912      	ldr	r1, [pc, #72]	@ (8008910 <MX_USB_DEVICE_Init+0x50>)
 80088c8:	4812      	ldr	r0, [pc, #72]	@ (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088ca:	f7fe ff62 	bl	8007792 <USBD_Init>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088d4:	f7f7 ff78 	bl	80007c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088d8:	490f      	ldr	r1, [pc, #60]	@ (8008918 <MX_USB_DEVICE_Init+0x58>)
 80088da:	480e      	ldr	r0, [pc, #56]	@ (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088dc:	f7fe ff84 	bl	80077e8 <USBD_RegisterClass>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088e6:	f7f7 ff6f 	bl	80007c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088ea:	490c      	ldr	r1, [pc, #48]	@ (800891c <MX_USB_DEVICE_Init+0x5c>)
 80088ec:	4809      	ldr	r0, [pc, #36]	@ (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088ee:	f7fe feb5 	bl	800765c <USBD_CDC_RegisterInterface>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088f8:	f7f7 ff66 	bl	80007c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088fc:	4805      	ldr	r0, [pc, #20]	@ (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088fe:	f7fe ff8c 	bl	800781a <USBD_Start>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008908:	f7f7 ff5e 	bl	80007c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800890c:	bf00      	nop
 800890e:	bd80      	pop	{r7, pc}
 8008910:	20000130 	.word	0x20000130
 8008914:	200002ec 	.word	0x200002ec
 8008918:	2000001c 	.word	0x2000001c
 800891c:	20000120 	.word	0x20000120

08008920 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008924:	2200      	movs	r2, #0
 8008926:	4905      	ldr	r1, [pc, #20]	@ (800893c <CDC_Init_FS+0x1c>)
 8008928:	4805      	ldr	r0, [pc, #20]	@ (8008940 <CDC_Init_FS+0x20>)
 800892a:	f7fe fead 	bl	8007688 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800892e:	4905      	ldr	r1, [pc, #20]	@ (8008944 <CDC_Init_FS+0x24>)
 8008930:	4803      	ldr	r0, [pc, #12]	@ (8008940 <CDC_Init_FS+0x20>)
 8008932:	f7fe fec2 	bl	80076ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008936:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	200009b0 	.word	0x200009b0
 8008940:	200002ec 	.word	0x200002ec
 8008944:	200005b0 	.word	0x200005b0

08008948 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800894c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800894e:	4618      	mov	r0, r3
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr
	...

08008958 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
 8008964:	4613      	mov	r3, r2
 8008966:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2b23      	cmp	r3, #35	@ 0x23
 800896c:	d84a      	bhi.n	8008a04 <CDC_Control_FS+0xac>
 800896e:	a201      	add	r2, pc, #4	@ (adr r2, 8008974 <CDC_Control_FS+0x1c>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	08008a05 	.word	0x08008a05
 8008978:	08008a05 	.word	0x08008a05
 800897c:	08008a05 	.word	0x08008a05
 8008980:	08008a05 	.word	0x08008a05
 8008984:	08008a05 	.word	0x08008a05
 8008988:	08008a05 	.word	0x08008a05
 800898c:	08008a05 	.word	0x08008a05
 8008990:	08008a05 	.word	0x08008a05
 8008994:	08008a05 	.word	0x08008a05
 8008998:	08008a05 	.word	0x08008a05
 800899c:	08008a05 	.word	0x08008a05
 80089a0:	08008a05 	.word	0x08008a05
 80089a4:	08008a05 	.word	0x08008a05
 80089a8:	08008a05 	.word	0x08008a05
 80089ac:	08008a05 	.word	0x08008a05
 80089b0:	08008a05 	.word	0x08008a05
 80089b4:	08008a05 	.word	0x08008a05
 80089b8:	08008a05 	.word	0x08008a05
 80089bc:	08008a05 	.word	0x08008a05
 80089c0:	08008a05 	.word	0x08008a05
 80089c4:	08008a05 	.word	0x08008a05
 80089c8:	08008a05 	.word	0x08008a05
 80089cc:	08008a05 	.word	0x08008a05
 80089d0:	08008a05 	.word	0x08008a05
 80089d4:	08008a05 	.word	0x08008a05
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	08008a05 	.word	0x08008a05
 80089e0:	08008a05 	.word	0x08008a05
 80089e4:	08008a05 	.word	0x08008a05
 80089e8:	08008a05 	.word	0x08008a05
 80089ec:	08008a05 	.word	0x08008a05
 80089f0:	08008a05 	.word	0x08008a05
 80089f4:	08008a05 	.word	0x08008a05
 80089f8:	08008a05 	.word	0x08008a05
 80089fc:	08008a05 	.word	0x08008a05
 8008a00:	08008a05 	.word	0x08008a05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a04:	bf00      	nop
  }

  return (USBD_OK);
 8008a06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop

08008a14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	4816      	ldr	r0, [pc, #88]	@ (8008a7c <CDC_Receive_FS+0x68>)
 8008a22:	f7fe fe4a 	bl	80076ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a26:	4815      	ldr	r0, [pc, #84]	@ (8008a7c <CDC_Receive_FS+0x68>)
 8008a28:	f7fe fe89 	bl	800773e <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	73fb      	strb	r3, [r7, #15]
  memset(USB_rxbuffer, '\0',10);
 8008a32:	220a      	movs	r2, #10
 8008a34:	2100      	movs	r1, #0
 8008a36:	4812      	ldr	r0, [pc, #72]	@ (8008a80 <CDC_Receive_FS+0x6c>)
 8008a38:	f000 fc90 	bl	800935c <memset>
  memcpy(USB_rxbuffer, Buf,len);
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	480f      	ldr	r0, [pc, #60]	@ (8008a80 <CDC_Receive_FS+0x6c>)
 8008a44:	f000 fcd8 	bl	80093f8 <memcpy>
  RS_txBuffer[0] = 0x77;
 8008a48:	4b0e      	ldr	r3, [pc, #56]	@ (8008a84 <CDC_Receive_FS+0x70>)
 8008a4a:	2277      	movs	r2, #119	@ 0x77
 8008a4c:	701a      	strb	r2, [r3, #0]
  strcpy((char *)(RS_txBuffer+1),(char *)USB_rxbuffer);
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a88 <CDC_Receive_FS+0x74>)
 8008a50:	490b      	ldr	r1, [pc, #44]	@ (8008a80 <CDC_Receive_FS+0x6c>)
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fcc8 	bl	80093e8 <strcpy>
  HAL_UART_Transmit(&huart1, RS_txBuffer, 10, HAL_MAX_DELAY);
 8008a58:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5c:	220a      	movs	r2, #10
 8008a5e:	4909      	ldr	r1, [pc, #36]	@ (8008a84 <CDC_Receive_FS+0x70>)
 8008a60:	480a      	ldr	r0, [pc, #40]	@ (8008a8c <CDC_Receive_FS+0x78>)
 8008a62:	f7fb fa13 	bl	8003e8c <HAL_UART_Transmit>
  memset(Buf, '\0',len);
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fc75 	bl	800935c <memset>
  return (USBD_OK);
 8008a72:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	200002ec 	.word	0x200002ec
 8008a80:	200001ec 	.word	0x200001ec
 8008a84:	200001f8 	.word	0x200001f8
 8008a88:	200001f9 	.word	0x200001f9
 8008a8c:	2000029c 	.word	0x2000029c

08008a90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad8 <CDC_Transmit_FS+0x48>)
 8008aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e00b      	b.n	8008ace <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ab6:	887b      	ldrh	r3, [r7, #2]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	4806      	ldr	r0, [pc, #24]	@ (8008ad8 <CDC_Transmit_FS+0x48>)
 8008abe:	f7fe fde3 	bl	8007688 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ac2:	4805      	ldr	r0, [pc, #20]	@ (8008ad8 <CDC_Transmit_FS+0x48>)
 8008ac4:	f7fe fe0c 	bl	80076e0 <USBD_CDC_TransmitPacket>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	200002ec 	.word	0x200002ec

08008adc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6039      	str	r1, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2212      	movs	r2, #18
 8008aec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008aee:	4b03      	ldr	r3, [pc, #12]	@ (8008afc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	2000014c 	.word	0x2000014c

08008b00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	6039      	str	r1, [r7, #0]
 8008b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2204      	movs	r2, #4
 8008b10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b12:	4b03      	ldr	r3, [pc, #12]	@ (8008b20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000160 	.word	0x20000160

08008b24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	6039      	str	r1, [r7, #0]
 8008b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d105      	bne.n	8008b42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4907      	ldr	r1, [pc, #28]	@ (8008b58 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b3a:	4808      	ldr	r0, [pc, #32]	@ (8008b5c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b3c:	f7ff fde3 	bl	8008706 <USBD_GetString>
 8008b40:	e004      	b.n	8008b4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4904      	ldr	r1, [pc, #16]	@ (8008b58 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b46:	4805      	ldr	r0, [pc, #20]	@ (8008b5c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b48:	f7ff fddd 	bl	8008706 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b4c:	4b02      	ldr	r3, [pc, #8]	@ (8008b58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000db0 	.word	0x20000db0
 8008b5c:	0800942c 	.word	0x0800942c

08008b60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	4904      	ldr	r1, [pc, #16]	@ (8008b80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b70:	4804      	ldr	r0, [pc, #16]	@ (8008b84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b72:	f7ff fdc8 	bl	8008706 <USBD_GetString>
  return USBD_StrDesc;
 8008b76:	4b02      	ldr	r3, [pc, #8]	@ (8008b80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000db0 	.word	0x20000db0
 8008b84:	08009444 	.word	0x08009444

08008b88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	6039      	str	r1, [r7, #0]
 8008b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	221a      	movs	r2, #26
 8008b98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b9a:	f000 f843 	bl	8008c24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b9e:	4b02      	ldr	r3, [pc, #8]	@ (8008ba8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20000164 	.word	0x20000164

08008bac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	6039      	str	r1, [r7, #0]
 8008bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bb8:	79fb      	ldrb	r3, [r7, #7]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d105      	bne.n	8008bca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	4907      	ldr	r1, [pc, #28]	@ (8008be0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bc2:	4808      	ldr	r0, [pc, #32]	@ (8008be4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bc4:	f7ff fd9f 	bl	8008706 <USBD_GetString>
 8008bc8:	e004      	b.n	8008bd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	4904      	ldr	r1, [pc, #16]	@ (8008be0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bce:	4805      	ldr	r0, [pc, #20]	@ (8008be4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bd0:	f7ff fd99 	bl	8008706 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd4:	4b02      	ldr	r3, [pc, #8]	@ (8008be0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000db0 	.word	0x20000db0
 8008be4:	08009458 	.word	0x08009458

08008be8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	6039      	str	r1, [r7, #0]
 8008bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d105      	bne.n	8008c06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4907      	ldr	r1, [pc, #28]	@ (8008c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bfe:	4808      	ldr	r0, [pc, #32]	@ (8008c20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c00:	f7ff fd81 	bl	8008706 <USBD_GetString>
 8008c04:	e004      	b.n	8008c10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	4904      	ldr	r1, [pc, #16]	@ (8008c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c0a:	4805      	ldr	r0, [pc, #20]	@ (8008c20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c0c:	f7ff fd7b 	bl	8008706 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c10:	4b02      	ldr	r3, [pc, #8]	@ (8008c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000db0 	.word	0x20000db0
 8008c20:	08009464 	.word	0x08009464

08008c24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c68 <Get_SerialNum+0x44>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c30:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <Get_SerialNum+0x48>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c36:	4b0e      	ldr	r3, [pc, #56]	@ (8008c70 <Get_SerialNum+0x4c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4413      	add	r3, r2
 8008c42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c4a:	2208      	movs	r2, #8
 8008c4c:	4909      	ldr	r1, [pc, #36]	@ (8008c74 <Get_SerialNum+0x50>)
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 f814 	bl	8008c7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c54:	2204      	movs	r2, #4
 8008c56:	4908      	ldr	r1, [pc, #32]	@ (8008c78 <Get_SerialNum+0x54>)
 8008c58:	68b8      	ldr	r0, [r7, #8]
 8008c5a:	f000 f80f 	bl	8008c7c <IntToUnicode>
  }
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	1ffff7e8 	.word	0x1ffff7e8
 8008c6c:	1ffff7ec 	.word	0x1ffff7ec
 8008c70:	1ffff7f0 	.word	0x1ffff7f0
 8008c74:	20000166 	.word	0x20000166
 8008c78:	20000176 	.word	0x20000176

08008c7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c8e:	2300      	movs	r3, #0
 8008c90:	75fb      	strb	r3, [r7, #23]
 8008c92:	e027      	b.n	8008ce4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	0f1b      	lsrs	r3, r3, #28
 8008c98:	2b09      	cmp	r3, #9
 8008c9a:	d80b      	bhi.n	8008cb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	0f1b      	lsrs	r3, r3, #28
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	440b      	add	r3, r1
 8008cac:	3230      	adds	r2, #48	@ 0x30
 8008cae:	b2d2      	uxtb	r2, r2
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	e00a      	b.n	8008cca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	0f1b      	lsrs	r3, r3, #28
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	440b      	add	r3, r1
 8008cc4:	3237      	adds	r2, #55	@ 0x37
 8008cc6:	b2d2      	uxtb	r2, r2
 8008cc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	4413      	add	r3, r2
 8008cda:	2200      	movs	r2, #0
 8008cdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]
 8008ce4:	7dfa      	ldrb	r2, [r7, #23]
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d3d3      	bcc.n	8008c94 <IntToUnicode+0x18>
  }
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	371c      	adds	r7, #28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a0d      	ldr	r2, [pc, #52]	@ (8008d3c <HAL_PCD_MspInit+0x44>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d113      	bne.n	8008d32 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d40 <HAL_PCD_MspInit+0x48>)
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8008d40 <HAL_PCD_MspInit+0x48>)
 8008d10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d14:	61d3      	str	r3, [r2, #28]
 8008d16:	4b0a      	ldr	r3, [pc, #40]	@ (8008d40 <HAL_PCD_MspInit+0x48>)
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	2014      	movs	r0, #20
 8008d28:	f7f7 ffad 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d2c:	2014      	movs	r0, #20
 8008d2e:	f7f7 ffc6 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	40005c00 	.word	0x40005c00
 8008d40:	40021000 	.word	0x40021000

08008d44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f7fe fda5 	bl	80078aa <USBD_LL_SetupStage>
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008d7a:	78fa      	ldrb	r2, [r7, #3]
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	440b      	add	r3, r1
 8008d88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	4619      	mov	r1, r3
 8008d92:	f7fe fdd7 	bl	8007944 <USBD_LL_DataOutStage>
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008db0:	78fa      	ldrb	r2, [r7, #3]
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	440b      	add	r3, r1
 8008dbe:	3324      	adds	r3, #36	@ 0x24
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f7fe fe2e 	bl	8007a26 <USBD_LL_DataInStage>
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe ff3e 	bl	8007c62 <USBD_LL_SOF>
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008df6:	2301      	movs	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	799b      	ldrb	r3, [r3, #6]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d001      	beq.n	8008e06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e02:	f7f7 fce1 	bl	80007c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e0c:	7bfa      	ldrb	r2, [r7, #15]
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe feee 	bl	8007bf2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fea7 	bl	8007b70 <USBD_LL_Reset>
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fee8 	bl	8007c10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	7a9b      	ldrb	r3, [r3, #10]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e48:	4b04      	ldr	r3, [pc, #16]	@ (8008e5c <HAL_PCD_SuspendCallback+0x30>)
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	4a03      	ldr	r2, [pc, #12]	@ (8008e5c <HAL_PCD_SuspendCallback+0x30>)
 8008e4e:	f043 0306 	orr.w	r3, r3, #6
 8008e52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	e000ed00 	.word	0xe000ed00

08008e60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fee2 	bl	8007c38 <USBD_LL_Resume>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e84:	4a28      	ldr	r2, [pc, #160]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a26      	ldr	r2, [pc, #152]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008e90:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008e94:	4b24      	ldr	r3, [pc, #144]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008e96:	4a25      	ldr	r2, [pc, #148]	@ (8008f2c <USBD_LL_Init+0xb0>)
 8008e98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e9a:	4b23      	ldr	r3, [pc, #140]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ea0:	4b21      	ldr	r3, [pc, #132]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ea6:	4b20      	ldr	r3, [pc, #128]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008eac:	4b1e      	ldr	r3, [pc, #120]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008eb8:	481b      	ldr	r0, [pc, #108]	@ (8008f28 <USBD_LL_Init+0xac>)
 8008eba:	f7f8 f951 	bl	8001160 <HAL_PCD_Init>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008ec4:	f7f7 fc80 	bl	80007c8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ece:	2318      	movs	r3, #24
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	f7f9 fe62 	bl	8002b9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ede:	2358      	movs	r3, #88	@ 0x58
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2180      	movs	r1, #128	@ 0x80
 8008ee4:	f7f9 fe5a 	bl	8002b9c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008eee:	23c0      	movs	r3, #192	@ 0xc0
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2181      	movs	r1, #129	@ 0x81
 8008ef4:	f7f9 fe52 	bl	8002b9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008efe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008f02:	2200      	movs	r2, #0
 8008f04:	2101      	movs	r1, #1
 8008f06:	f7f9 fe49 	bl	8002b9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f14:	2200      	movs	r2, #0
 8008f16:	2182      	movs	r1, #130	@ 0x82
 8008f18:	f7f9 fe40 	bl	8002b9c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000fb0 	.word	0x20000fb0
 8008f2c:	40005c00 	.word	0x40005c00

08008f30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f8 fa00 	bl	800134c <HAL_PCD_Start>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f94e 	bl	80091f4 <USBD_Get_USB_Status>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	4608      	mov	r0, r1
 8008f70:	4611      	mov	r1, r2
 8008f72:	461a      	mov	r2, r3
 8008f74:	4603      	mov	r3, r0
 8008f76:	70fb      	strb	r3, [r7, #3]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70bb      	strb	r3, [r7, #2]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f8e:	78bb      	ldrb	r3, [r7, #2]
 8008f90:	883a      	ldrh	r2, [r7, #0]
 8008f92:	78f9      	ldrb	r1, [r7, #3]
 8008f94:	f7f8 fb54 	bl	8001640 <HAL_PCD_EP_Open>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 f928 	bl	80091f4 <USBD_Get_USB_Status>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fcc:	78fa      	ldrb	r2, [r7, #3]
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f8 fb92 	bl	80016fa <HAL_PCD_EP_Close>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 f909 	bl	80091f4 <USBD_Get_USB_Status>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f7f8 fc3a 	bl	8001888 <HAL_PCD_EP_SetStall>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f8ea 	bl	80091f4 <USBD_Get_USB_Status>
 8009020:	4603      	mov	r3, r0
 8009022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009024:	7bbb      	ldrb	r3, [r7, #14]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7f8 fc7b 	bl	8001948 <HAL_PCD_EP_ClrStall>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f8cb 	bl	80091f4 <USBD_Get_USB_Status>
 800905e:	4603      	mov	r3, r0
 8009060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009062:	7bbb      	ldrb	r3, [r7, #14]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800907e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009084:	2b00      	cmp	r3, #0
 8009086:	da0b      	bge.n	80090a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800908e:	68f9      	ldr	r1, [r7, #12]
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	440b      	add	r3, r1
 800909a:	3312      	adds	r3, #18
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	e00b      	b.n	80090b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	440b      	add	r3, r1
 80090b2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80090b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc80      	pop	{r7}
 80090c0:	4770      	bx	lr

080090c2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	460b      	mov	r3, r1
 80090cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7f8 fa89 	bl	80015f8 <HAL_PCD_SetAddress>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f881 	bl	80091f4 <USBD_Get_USB_Status>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	461a      	mov	r2, r3
 800910c:	460b      	mov	r3, r1
 800910e:	72fb      	strb	r3, [r7, #11]
 8009110:	4613      	mov	r3, r2
 8009112:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009122:	893b      	ldrh	r3, [r7, #8]
 8009124:	7af9      	ldrb	r1, [r7, #11]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	f7f8 fb77 	bl	800181a <HAL_PCD_EP_Transmit>
 800912c:	4603      	mov	r3, r0
 800912e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009130:	7dfb      	ldrb	r3, [r7, #23]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f85e 	bl	80091f4 <USBD_Get_USB_Status>
 8009138:	4603      	mov	r3, r0
 800913a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800913c:	7dbb      	ldrb	r3, [r7, #22]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b086      	sub	sp, #24
 800914a:	af00      	add	r7, sp, #0
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	461a      	mov	r2, r3
 8009152:	460b      	mov	r3, r1
 8009154:	72fb      	strb	r3, [r7, #11]
 8009156:	4613      	mov	r3, r2
 8009158:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009168:	893b      	ldrh	r3, [r7, #8]
 800916a:	7af9      	ldrb	r1, [r7, #11]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	f7f8 fb0c 	bl	800178a <HAL_PCD_EP_Receive>
 8009172:	4603      	mov	r3, r0
 8009174:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 f83b 	bl	80091f4 <USBD_Get_USB_Status>
 800917e:	4603      	mov	r3, r0
 8009180:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009182:	7dbb      	ldrb	r3, [r7, #22]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7f8 fb22 	bl	80017ec <HAL_PCD_EP_GetRxCount>
 80091a8:	4603      	mov	r3, r0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091bc:	4b02      	ldr	r3, [pc, #8]	@ (80091c8 <USBD_static_malloc+0x14>)
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr
 80091c8:	20001288 	.word	0x20001288

080091cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]

}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	bc80      	pop	{r7}
 80091dc:	4770      	bx	lr

080091de <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bc80      	pop	{r7}
 80091f2:	4770      	bx	lr

080091f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d817      	bhi.n	8009238 <USBD_Get_USB_Status+0x44>
 8009208:	a201      	add	r2, pc, #4	@ (adr r2, 8009210 <USBD_Get_USB_Status+0x1c>)
 800920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920e:	bf00      	nop
 8009210:	08009221 	.word	0x08009221
 8009214:	08009227 	.word	0x08009227
 8009218:	0800922d 	.word	0x0800922d
 800921c:	08009233 	.word	0x08009233
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]
    break;
 8009224:	e00b      	b.n	800923e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009226:	2302      	movs	r3, #2
 8009228:	73fb      	strb	r3, [r7, #15]
    break;
 800922a:	e008      	b.n	800923e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800922c:	2301      	movs	r3, #1
 800922e:	73fb      	strb	r3, [r7, #15]
    break;
 8009230:	e005      	b.n	800923e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009232:	2302      	movs	r3, #2
 8009234:	73fb      	strb	r3, [r7, #15]
    break;
 8009236:	e002      	b.n	800923e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009238:	2302      	movs	r3, #2
 800923a:	73fb      	strb	r3, [r7, #15]
    break;
 800923c:	bf00      	nop
  }
  return usb_status;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	bc80      	pop	{r7}
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop

0800924c <atoi>:
 800924c:	220a      	movs	r2, #10
 800924e:	2100      	movs	r1, #0
 8009250:	f000 b87a 	b.w	8009348 <strtol>

08009254 <_strtol_l.constprop.0>:
 8009254:	2b24      	cmp	r3, #36	@ 0x24
 8009256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925a:	4686      	mov	lr, r0
 800925c:	4690      	mov	r8, r2
 800925e:	d801      	bhi.n	8009264 <_strtol_l.constprop.0+0x10>
 8009260:	2b01      	cmp	r3, #1
 8009262:	d106      	bne.n	8009272 <_strtol_l.constprop.0+0x1e>
 8009264:	f000 f896 	bl	8009394 <__errno>
 8009268:	2316      	movs	r3, #22
 800926a:	6003      	str	r3, [r0, #0]
 800926c:	2000      	movs	r0, #0
 800926e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009272:	460d      	mov	r5, r1
 8009274:	4833      	ldr	r0, [pc, #204]	@ (8009344 <_strtol_l.constprop.0+0xf0>)
 8009276:	462a      	mov	r2, r5
 8009278:	f815 4b01 	ldrb.w	r4, [r5], #1
 800927c:	5d06      	ldrb	r6, [r0, r4]
 800927e:	f016 0608 	ands.w	r6, r6, #8
 8009282:	d1f8      	bne.n	8009276 <_strtol_l.constprop.0+0x22>
 8009284:	2c2d      	cmp	r4, #45	@ 0x2d
 8009286:	d12d      	bne.n	80092e4 <_strtol_l.constprop.0+0x90>
 8009288:	2601      	movs	r6, #1
 800928a:	782c      	ldrb	r4, [r5, #0]
 800928c:	1c95      	adds	r5, r2, #2
 800928e:	f033 0210 	bics.w	r2, r3, #16
 8009292:	d109      	bne.n	80092a8 <_strtol_l.constprop.0+0x54>
 8009294:	2c30      	cmp	r4, #48	@ 0x30
 8009296:	d12a      	bne.n	80092ee <_strtol_l.constprop.0+0x9a>
 8009298:	782a      	ldrb	r2, [r5, #0]
 800929a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800929e:	2a58      	cmp	r2, #88	@ 0x58
 80092a0:	d125      	bne.n	80092ee <_strtol_l.constprop.0+0x9a>
 80092a2:	2310      	movs	r3, #16
 80092a4:	786c      	ldrb	r4, [r5, #1]
 80092a6:	3502      	adds	r5, #2
 80092a8:	2200      	movs	r2, #0
 80092aa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80092ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80092b2:	fbbc f9f3 	udiv	r9, ip, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80092bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80092c0:	2f09      	cmp	r7, #9
 80092c2:	d81b      	bhi.n	80092fc <_strtol_l.constprop.0+0xa8>
 80092c4:	463c      	mov	r4, r7
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	dd27      	ble.n	800931a <_strtol_l.constprop.0+0xc6>
 80092ca:	1c57      	adds	r7, r2, #1
 80092cc:	d007      	beq.n	80092de <_strtol_l.constprop.0+0x8a>
 80092ce:	4581      	cmp	r9, r0
 80092d0:	d320      	bcc.n	8009314 <_strtol_l.constprop.0+0xc0>
 80092d2:	d101      	bne.n	80092d8 <_strtol_l.constprop.0+0x84>
 80092d4:	45a2      	cmp	sl, r4
 80092d6:	db1d      	blt.n	8009314 <_strtol_l.constprop.0+0xc0>
 80092d8:	2201      	movs	r2, #1
 80092da:	fb00 4003 	mla	r0, r0, r3, r4
 80092de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092e2:	e7eb      	b.n	80092bc <_strtol_l.constprop.0+0x68>
 80092e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80092e6:	bf04      	itt	eq
 80092e8:	782c      	ldrbeq	r4, [r5, #0]
 80092ea:	1c95      	addeq	r5, r2, #2
 80092ec:	e7cf      	b.n	800928e <_strtol_l.constprop.0+0x3a>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1da      	bne.n	80092a8 <_strtol_l.constprop.0+0x54>
 80092f2:	2c30      	cmp	r4, #48	@ 0x30
 80092f4:	bf0c      	ite	eq
 80092f6:	2308      	moveq	r3, #8
 80092f8:	230a      	movne	r3, #10
 80092fa:	e7d5      	b.n	80092a8 <_strtol_l.constprop.0+0x54>
 80092fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009300:	2f19      	cmp	r7, #25
 8009302:	d801      	bhi.n	8009308 <_strtol_l.constprop.0+0xb4>
 8009304:	3c37      	subs	r4, #55	@ 0x37
 8009306:	e7de      	b.n	80092c6 <_strtol_l.constprop.0+0x72>
 8009308:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800930c:	2f19      	cmp	r7, #25
 800930e:	d804      	bhi.n	800931a <_strtol_l.constprop.0+0xc6>
 8009310:	3c57      	subs	r4, #87	@ 0x57
 8009312:	e7d8      	b.n	80092c6 <_strtol_l.constprop.0+0x72>
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	e7e1      	b.n	80092de <_strtol_l.constprop.0+0x8a>
 800931a:	1c53      	adds	r3, r2, #1
 800931c:	d108      	bne.n	8009330 <_strtol_l.constprop.0+0xdc>
 800931e:	2322      	movs	r3, #34	@ 0x22
 8009320:	4660      	mov	r0, ip
 8009322:	f8ce 3000 	str.w	r3, [lr]
 8009326:	f1b8 0f00 	cmp.w	r8, #0
 800932a:	d0a0      	beq.n	800926e <_strtol_l.constprop.0+0x1a>
 800932c:	1e69      	subs	r1, r5, #1
 800932e:	e006      	b.n	800933e <_strtol_l.constprop.0+0xea>
 8009330:	b106      	cbz	r6, 8009334 <_strtol_l.constprop.0+0xe0>
 8009332:	4240      	negs	r0, r0
 8009334:	f1b8 0f00 	cmp.w	r8, #0
 8009338:	d099      	beq.n	800926e <_strtol_l.constprop.0+0x1a>
 800933a:	2a00      	cmp	r2, #0
 800933c:	d1f6      	bne.n	800932c <_strtol_l.constprop.0+0xd8>
 800933e:	f8c8 1000 	str.w	r1, [r8]
 8009342:	e794      	b.n	800926e <_strtol_l.constprop.0+0x1a>
 8009344:	0800949f 	.word	0x0800949f

08009348 <strtol>:
 8009348:	4613      	mov	r3, r2
 800934a:	460a      	mov	r2, r1
 800934c:	4601      	mov	r1, r0
 800934e:	4802      	ldr	r0, [pc, #8]	@ (8009358 <strtol+0x10>)
 8009350:	6800      	ldr	r0, [r0, #0]
 8009352:	f7ff bf7f 	b.w	8009254 <_strtol_l.constprop.0>
 8009356:	bf00      	nop
 8009358:	20000180 	.word	0x20000180

0800935c <memset>:
 800935c:	4603      	mov	r3, r0
 800935e:	4402      	add	r2, r0
 8009360:	4293      	cmp	r3, r2
 8009362:	d100      	bne.n	8009366 <memset+0xa>
 8009364:	4770      	bx	lr
 8009366:	f803 1b01 	strb.w	r1, [r3], #1
 800936a:	e7f9      	b.n	8009360 <memset+0x4>

0800936c <strncpy>:
 800936c:	4603      	mov	r3, r0
 800936e:	b510      	push	{r4, lr}
 8009370:	3901      	subs	r1, #1
 8009372:	b132      	cbz	r2, 8009382 <strncpy+0x16>
 8009374:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009378:	3a01      	subs	r2, #1
 800937a:	f803 4b01 	strb.w	r4, [r3], #1
 800937e:	2c00      	cmp	r4, #0
 8009380:	d1f7      	bne.n	8009372 <strncpy+0x6>
 8009382:	2100      	movs	r1, #0
 8009384:	441a      	add	r2, r3
 8009386:	4293      	cmp	r3, r2
 8009388:	d100      	bne.n	800938c <strncpy+0x20>
 800938a:	bd10      	pop	{r4, pc}
 800938c:	f803 1b01 	strb.w	r1, [r3], #1
 8009390:	e7f9      	b.n	8009386 <strncpy+0x1a>
	...

08009394 <__errno>:
 8009394:	4b01      	ldr	r3, [pc, #4]	@ (800939c <__errno+0x8>)
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000180 	.word	0x20000180

080093a0 <__libc_init_array>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	2600      	movs	r6, #0
 80093a4:	4d0c      	ldr	r5, [pc, #48]	@ (80093d8 <__libc_init_array+0x38>)
 80093a6:	4c0d      	ldr	r4, [pc, #52]	@ (80093dc <__libc_init_array+0x3c>)
 80093a8:	1b64      	subs	r4, r4, r5
 80093aa:	10a4      	asrs	r4, r4, #2
 80093ac:	42a6      	cmp	r6, r4
 80093ae:	d109      	bne.n	80093c4 <__libc_init_array+0x24>
 80093b0:	f000 f830 	bl	8009414 <_init>
 80093b4:	2600      	movs	r6, #0
 80093b6:	4d0a      	ldr	r5, [pc, #40]	@ (80093e0 <__libc_init_array+0x40>)
 80093b8:	4c0a      	ldr	r4, [pc, #40]	@ (80093e4 <__libc_init_array+0x44>)
 80093ba:	1b64      	subs	r4, r4, r5
 80093bc:	10a4      	asrs	r4, r4, #2
 80093be:	42a6      	cmp	r6, r4
 80093c0:	d105      	bne.n	80093ce <__libc_init_array+0x2e>
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c8:	4798      	blx	r3
 80093ca:	3601      	adds	r6, #1
 80093cc:	e7ee      	b.n	80093ac <__libc_init_array+0xc>
 80093ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d2:	4798      	blx	r3
 80093d4:	3601      	adds	r6, #1
 80093d6:	e7f2      	b.n	80093be <__libc_init_array+0x1e>
 80093d8:	080095a0 	.word	0x080095a0
 80093dc:	080095a0 	.word	0x080095a0
 80093e0:	080095a0 	.word	0x080095a0
 80093e4:	080095a4 	.word	0x080095a4

080093e8 <strcpy>:
 80093e8:	4603      	mov	r3, r0
 80093ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ee:	f803 2b01 	strb.w	r2, [r3], #1
 80093f2:	2a00      	cmp	r2, #0
 80093f4:	d1f9      	bne.n	80093ea <strcpy+0x2>
 80093f6:	4770      	bx	lr

080093f8 <memcpy>:
 80093f8:	440a      	add	r2, r1
 80093fa:	4291      	cmp	r1, r2
 80093fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009400:	d100      	bne.n	8009404 <memcpy+0xc>
 8009402:	4770      	bx	lr
 8009404:	b510      	push	{r4, lr}
 8009406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940a:	4291      	cmp	r1, r2
 800940c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009410:	d1f9      	bne.n	8009406 <memcpy+0xe>
 8009412:	bd10      	pop	{r4, pc}

08009414 <_init>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	bf00      	nop
 8009418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941a:	bc08      	pop	{r3}
 800941c:	469e      	mov	lr, r3
 800941e:	4770      	bx	lr

08009420 <_fini>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr
