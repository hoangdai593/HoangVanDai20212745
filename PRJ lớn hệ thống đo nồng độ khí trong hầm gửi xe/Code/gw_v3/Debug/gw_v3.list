
gw_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800a4cc  0800a4cc  0000b4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6a8  0800a6a8  0000c1d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6a8  0800a6a8  0000c1d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6a8  0800a6a8  0000c1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6a8  0800a6a8  0000b6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6ac  0800a6ac  0000b6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0800a6b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  200001d0  0800a880  0000c1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  0800a880  0000c620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159d9  00000000  00000000  0000c1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003742  00000000  00000000  00021bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00025318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8b  00000000  00000000  00026608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8ea  00000000  00000000  00027493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195a0  00000000  00000000  00041d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9bd  00000000  00000000  0005b31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eacda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005400  00000000  00000000  000ead20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f0120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a4b4 	.word	0x0800a4b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	0800a4b4 	.word	0x0800a4b4

0800014c <calculate_lrc>:
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
uint8_t calculate_lrc(uint8_t *ascii_data, uint16_t length) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
    uint8_t lrc = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	73fb      	strb	r3, [r7, #15]

    // Kiểm tra nếu chiều dài mảng là hợp lệ
    if (length < 2) {
 800015c:	887b      	ldrh	r3, [r7, #2]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d801      	bhi.n	8000166 <calculate_lrc+0x1a>
        return 0;  // Trả về 0 nếu chiều dài không hợp lệ
 8000162:	2300      	movs	r3, #0
 8000164:	e027      	b.n	80001b6 <calculate_lrc+0x6a>
    }

    // Mỗi byte nhị phân được biểu diễn bằng 2 ký tự ASCII
    for (uint16_t i = 0; i < length; i += 2) {
 8000166:	2300      	movs	r3, #0
 8000168:	81bb      	strh	r3, [r7, #12]
 800016a:	e01c      	b.n	80001a6 <calculate_lrc+0x5a>
        // Chuyển đổi 2 ký tự ASCII thành 1 byte nhị phân
        char hex_byte[3] = {ascii_data[i], ascii_data[i + 1], '\0'};
 800016c:	89bb      	ldrh	r3, [r7, #12]
 800016e:	687a      	ldr	r2, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	723b      	strb	r3, [r7, #8]
 8000176:	89bb      	ldrh	r3, [r7, #12]
 8000178:	3301      	adds	r3, #1
 800017a:	687a      	ldr	r2, [r7, #4]
 800017c:	4413      	add	r3, r2
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	727b      	strb	r3, [r7, #9]
 8000182:	2300      	movs	r3, #0
 8000184:	72bb      	strb	r3, [r7, #10]
        uint8_t byte_value = (uint8_t)strtol(hex_byte, NULL, 16);
 8000186:	f107 0308 	add.w	r3, r7, #8
 800018a:	2210      	movs	r2, #16
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f009 fcce 	bl	8009b30 <strtol>
 8000194:	4603      	mov	r3, r0
 8000196:	72fb      	strb	r3, [r7, #11]

        // Cộng giá trị vào tổng LRC
        lrc += byte_value;
 8000198:	7bfa      	ldrb	r2, [r7, #15]
 800019a:	7afb      	ldrb	r3, [r7, #11]
 800019c:	4413      	add	r3, r2
 800019e:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i += 2) {
 80001a0:	89bb      	ldrh	r3, [r7, #12]
 80001a2:	3302      	adds	r3, #2
 80001a4:	81bb      	strh	r3, [r7, #12]
 80001a6:	89ba      	ldrh	r2, [r7, #12]
 80001a8:	887b      	ldrh	r3, [r7, #2]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d3de      	bcc.n	800016c <calculate_lrc+0x20>
    }

    // Lấy phần bù 2 (2's complement)
    lrc = (uint8_t)(-((int8_t)lrc));
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	425b      	negs	r3, r3
 80001b2:	73fb      	strb	r3, [r7, #15]
    return lrc;
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}

080001be <check_lrc>:

uint8_t check_lrc(uint8_t *ascii_data, uint16_t length, char* ascii_lrc)
{
 80001be:	b580      	push	{r7, lr}
 80001c0:	b086      	sub	sp, #24
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	60f8      	str	r0, [r7, #12]
 80001c6:	460b      	mov	r3, r1
 80001c8:	607a      	str	r2, [r7, #4]
 80001ca:	817b      	strh	r3, [r7, #10]

    // Tính LRC từ dữ liệu
    uint8_t calculated_lrc = calculate_lrc(ascii_data, length);
 80001cc:	897b      	ldrh	r3, [r7, #10]
 80001ce:	4619      	mov	r1, r3
 80001d0:	68f8      	ldr	r0, [r7, #12]
 80001d2:	f7ff ffbb 	bl	800014c <calculate_lrc>
 80001d6:	4603      	mov	r3, r0
 80001d8:	75fb      	strb	r3, [r7, #23]

    char hex_byte[3] = {ascii_lrc[0], ascii_lrc[1], '\0'};
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	743b      	strb	r3, [r7, #16]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	785b      	ldrb	r3, [r3, #1]
 80001e4:	747b      	strb	r3, [r7, #17]
 80001e6:	2300      	movs	r3, #0
 80001e8:	74bb      	strb	r3, [r7, #18]
    uint8_t received_lrc = (uint8_t)strtol(hex_byte, NULL, 16);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	2210      	movs	r2, #16
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f009 fc9c 	bl	8009b30 <strtol>
 80001f8:	4603      	mov	r3, r0
 80001fa:	75bb      	strb	r3, [r7, #22]

    // So sánh LRC tính toán và LRC nhận được
    if (calculated_lrc == received_lrc)
 80001fc:	7dfa      	ldrb	r2, [r7, #23]
 80001fe:	7dbb      	ldrb	r3, [r7, #22]
 8000200:	429a      	cmp	r2, r3
 8000202:	d101      	bne.n	8000208 <check_lrc+0x4a>
    {
    	return 1;
 8000204:	2301      	movs	r3, #1
 8000206:	e000      	b.n	800020a <check_lrc+0x4c>
    }
    else
    	return 0;
 8000208:	2300      	movs	r3, #0
}
 800020a:	4618      	mov	r0, r3
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <hexdec_to_ascii>:
// Mã hóa LRC thành chuỗi ASCII
void hexdec_to_ascii(uint8_t hexdec, char *ascii_out)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
    sprintf(ascii_out, "%02X", hexdec); // Mã hóa thành 2 ký tự HEX ASCII
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	461a      	mov	r2, r3
 8000224:	4903      	ldr	r1, [pc, #12]	@ (8000234 <hexdec_to_ascii+0x20>)
 8000226:	6838      	ldr	r0, [r7, #0]
 8000228:	f009 fc8c 	bl	8009b44 <siprintf>
}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	0800a4cc 	.word	0x0800a4cc

08000238 <RS485_SendCommand>:
// Gửi lệnh tới Slave với địa chỉ ID
void RS485_SendCommand(uint8_t slaveID, uint8_t command)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	4613      	mov	r3, r2
 8000246:	71bb      	strb	r3, [r7, #6]
	RS_txBuffer[0] = ':';
 8000248:	4b14      	ldr	r3, [pc, #80]	@ (800029c <RS485_SendCommand+0x64>)
 800024a:	223a      	movs	r2, #58	@ 0x3a
 800024c:	701a      	strb	r2, [r3, #0]
	hexdec_to_ascii(slaveID,(char*)&RS_txBuffer[1]);
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4913      	ldr	r1, [pc, #76]	@ (80002a0 <RS485_SendCommand+0x68>)
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ffde 	bl	8000214 <hexdec_to_ascii>
	hexdec_to_ascii(command,(char*)&RS_txBuffer[3]);
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	4912      	ldr	r1, [pc, #72]	@ (80002a4 <RS485_SendCommand+0x6c>)
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ffd9 	bl	8000214 <hexdec_to_ascii>
	uint8_t lrc = calculate_lrc(&RS_txBuffer[1], 4);
 8000262:	2104      	movs	r1, #4
 8000264:	480e      	ldr	r0, [pc, #56]	@ (80002a0 <RS485_SendCommand+0x68>)
 8000266:	f7ff ff71 	bl	800014c <calculate_lrc>
 800026a:	4603      	mov	r3, r0
 800026c:	73fb      	strb	r3, [r7, #15]
	hexdec_to_ascii(lrc,(char*)&RS_txBuffer[5]);
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	490d      	ldr	r1, [pc, #52]	@ (80002a8 <RS485_SendCommand+0x70>)
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffce 	bl	8000214 <hexdec_to_ascii>
	RS_txBuffer[7]=0x0D ;
 8000278:	4b08      	ldr	r3, [pc, #32]	@ (800029c <RS485_SendCommand+0x64>)
 800027a:	220d      	movs	r2, #13
 800027c:	71da      	strb	r2, [r3, #7]
	RS_txBuffer[8]=0x0A ;
 800027e:	4b07      	ldr	r3, [pc, #28]	@ (800029c <RS485_SendCommand+0x64>)
 8000280:	220a      	movs	r2, #10
 8000282:	721a      	strb	r2, [r3, #8]
    HAL_UART_Transmit(&huart1, RS_txBuffer, 10, HAL_MAX_DELAY);
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
 8000288:	220a      	movs	r2, #10
 800028a:	4904      	ldr	r1, [pc, #16]	@ (800029c <RS485_SendCommand+0x64>)
 800028c:	4807      	ldr	r0, [pc, #28]	@ (80002ac <RS485_SendCommand+0x74>)
 800028e:	f004 f9e9 	bl	8004664 <HAL_UART_Transmit>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000220 	.word	0x20000220
 80002a0:	20000221 	.word	0x20000221
 80002a4:	20000223 	.word	0x20000223
 80002a8:	20000225 	.word	0x20000225
 80002ac:	200002c8 	.word	0x200002c8

080002b0 <decode_ppm2_ver3>:
void decode_ppm2_ver3 (char *RS_rxBuffer,PPM *ppm, uint8_t inx) // inx=5 (node1) inx=19(node2)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b08f      	sub	sp, #60	@ 0x3c
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	4613      	mov	r3, r2
 80002bc:	71fb      	strb	r3, [r7, #7]
	char hour_buf[3] = {0}; // Lưu chuỗi th�?i gian
 80002be:	4b7c      	ldr	r3, [pc, #496]	@ (80004b0 <decode_ppm2_ver3+0x200>)
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80002c4:	2300      	movs	r3, #0
 80002c6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	char min_buf[3] = {0};
 80002ca:	4b79      	ldr	r3, [pc, #484]	@ (80004b0 <decode_ppm2_ver3+0x200>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80002d0:	2300      	movs	r3, #0
 80002d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	char sec_buf[3] = {0};
 80002d6:	4b76      	ldr	r3, [pc, #472]	@ (80004b0 <decode_ppm2_ver3+0x200>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80002dc:	2300      	movs	r3, #0
 80002de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	char co_high[3] = {0};   // Lưu chuỗi giá trị CO
 80002e2:	4b73      	ldr	r3, [pc, #460]	@ (80004b0 <decode_ppm2_ver3+0x200>)
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	843b      	strh	r3, [r7, #32]
 80002e8:	2300      	movs	r3, #0
 80002ea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	char co_low[3] = {0};   // Lưu chuỗi giá trị CO
 80002ee:	4b70      	ldr	r3, [pc, #448]	@ (80004b0 <decode_ppm2_ver3+0x200>)
 80002f0:	881b      	ldrh	r3, [r3, #0]
 80002f2:	83bb      	strh	r3, [r7, #28]
 80002f4:	2300      	movs	r3, #0
 80002f6:	77bb      	strb	r3, [r7, #30]
	char co2_high[3] = {0};   // Lưu chuỗi giá trị CO
 80002f8:	4b6d      	ldr	r3, [pc, #436]	@ (80004b0 <decode_ppm2_ver3+0x200>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	833b      	strh	r3, [r7, #24]
 80002fe:	2300      	movs	r3, #0
 8000300:	76bb      	strb	r3, [r7, #26]
	char co2_low[3] = {0};  // Lưu chuỗi giá trị CO2
 8000302:	4b6b      	ldr	r3, [pc, #428]	@ (80004b0 <decode_ppm2_ver3+0x200>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	82bb      	strh	r3, [r7, #20]
 8000308:	2300      	movs	r3, #0
 800030a:	75bb      	strb	r3, [r7, #22]
	uint16_t CO2;
	uint8_t ho;
	uint8_t mi;
	uint8_t se;
	// Tách chuỗi từ buffer
    hour_buf[0] = RS_rxBuffer[inx];
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	4413      	add	r3, r2
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    hour_buf[1] = RS_rxBuffer[inx+1];
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	3301      	adds	r3, #1
 800031c:	68fa      	ldr	r2, [r7, #12]
 800031e:	4413      	add	r3, r2
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    hour_buf[2] = '\0';
 8000326:	2300      	movs	r3, #0
 8000328:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    min_buf[0] = RS_rxBuffer[inx+2];
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	3302      	adds	r3, #2
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	4413      	add	r3, r2
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    min_buf[1] = RS_rxBuffer[inx+3];
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	3303      	adds	r3, #3
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    min_buf[2] = '\0';
 8000348:	2300      	movs	r3, #0
 800034a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    sec_buf[0] = RS_rxBuffer[inx+4];
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	3304      	adds	r3, #4
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    sec_buf[1] = RS_rxBuffer[inx+5];
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	3305      	adds	r3, #5
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    sec_buf[2] = '\0';
 800036a:	2300      	movs	r3, #0
 800036c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    co_high[0] = RS_rxBuffer[inx+6];
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	3306      	adds	r3, #6
 8000374:	68fa      	ldr	r2, [r7, #12]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	f887 3020 	strb.w	r3, [r7, #32]
    co_high[1] = RS_rxBuffer[inx+7];
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	3307      	adds	r3, #7
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	4413      	add	r3, r2
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    co_high[2] = '\0';
 800038c:	2300      	movs	r3, #0
 800038e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    co_low[0] = RS_rxBuffer[inx+8];
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	3308      	adds	r3, #8
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	4413      	add	r3, r2
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	773b      	strb	r3, [r7, #28]
    co_low[1] = RS_rxBuffer[inx+9];
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	3309      	adds	r3, #9
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	4413      	add	r3, r2
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	777b      	strb	r3, [r7, #29]
    co_low[2] = '\0';
 80003aa:	2300      	movs	r3, #0
 80003ac:	77bb      	strb	r3, [r7, #30]

    co2_high[0] = RS_rxBuffer[inx+10];
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	330a      	adds	r3, #10
 80003b2:	68fa      	ldr	r2, [r7, #12]
 80003b4:	4413      	add	r3, r2
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	763b      	strb	r3, [r7, #24]
    co2_high[1] = RS_rxBuffer[inx+11];
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	330b      	adds	r3, #11
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	4413      	add	r3, r2
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	767b      	strb	r3, [r7, #25]
    co2_high[2] = '\0';
 80003c6:	2300      	movs	r3, #0
 80003c8:	76bb      	strb	r3, [r7, #26]

    co2_low[0] = RS_rxBuffer[inx+12];
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	330c      	adds	r3, #12
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	753b      	strb	r3, [r7, #20]
    co2_low[1] = RS_rxBuffer[inx+13];
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	330d      	adds	r3, #13
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	4413      	add	r3, r2
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	757b      	strb	r3, [r7, #21]
    co2_low[2] = '\0';
 80003e2:	2300      	movs	r3, #0
 80003e4:	75bb      	strb	r3, [r7, #22]

	ho = (uint8_t)strtol(hour_buf, NULL, 16);
 80003e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80003ea:	2210      	movs	r2, #16
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f009 fb9e 	bl	8009b30 <strtol>
 80003f4:	4603      	mov	r3, r0
 80003f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	mi = (uint8_t)strtol(min_buf, NULL, 16);
 80003fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003fe:	2210      	movs	r2, #16
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f009 fb94 	bl	8009b30 <strtol>
 8000408:	4603      	mov	r3, r0
 800040a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	se = (uint8_t)strtol(sec_buf, NULL, 16);
 800040e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000412:	2210      	movs	r2, #16
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f009 fb8a 	bl	8009b30 <strtol>
 800041c:	4603      	mov	r3, r0
 800041e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	CO = ((uint8_t)(strtol(co_high, NULL, 16)) << 8) | ((uint8_t)(strtol(co_low, NULL, 16)));
 8000422:	f107 0320 	add.w	r3, r7, #32
 8000426:	2210      	movs	r2, #16
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f009 fb80 	bl	8009b30 <strtol>
 8000430:	4603      	mov	r3, r0
 8000432:	b2db      	uxtb	r3, r3
 8000434:	021b      	lsls	r3, r3, #8
 8000436:	b21c      	sxth	r4, r3
 8000438:	f107 031c 	add.w	r3, r7, #28
 800043c:	2210      	movs	r2, #16
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f009 fb75 	bl	8009b30 <strtol>
 8000446:	4603      	mov	r3, r0
 8000448:	b2db      	uxtb	r3, r3
 800044a:	b21b      	sxth	r3, r3
 800044c:	4323      	orrs	r3, r4
 800044e:	b21b      	sxth	r3, r3
 8000450:	867b      	strh	r3, [r7, #50]	@ 0x32
	CO2 = ((uint8_t)(strtol(co2_high, NULL, 16)) << 8) | ((uint8_t)(strtol(co2_low, NULL, 16)));
 8000452:	f107 0318 	add.w	r3, r7, #24
 8000456:	2210      	movs	r2, #16
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f009 fb68 	bl	8009b30 <strtol>
 8000460:	4603      	mov	r3, r0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	b21c      	sxth	r4, r3
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2210      	movs	r2, #16
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f009 fb5d 	bl	8009b30 <strtol>
 8000476:	4603      	mov	r3, r0
 8000478:	b2db      	uxtb	r3, r3
 800047a:	b21b      	sxth	r3, r3
 800047c:	4323      	orrs	r3, r4
 800047e:	b21b      	sxth	r3, r3
 8000480:	863b      	strh	r3, [r7, #48]	@ 0x30

	ppm->hour = ho;
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000488:	701a      	strb	r2, [r3, #0]
    ppm->min = mi;
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000490:	705a      	strb	r2, [r3, #1]
	ppm->sec = se;
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8000498:	709a      	strb	r2, [r3, #2]
	ppm->CO_ppm = CO;
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800049e:	809a      	strh	r2, [r3, #4]
    ppm->CO2_ppm = CO2;
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80004a4:	80da      	strh	r2, [r3, #6]

}
 80004a6:	bf00      	nop
 80004a8:	373c      	adds	r7, #60	@ 0x3c
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd90      	pop	{r4, r7, pc}
 80004ae:	bf00      	nop
 80004b0:	0800a4d4 	.word	0x0800a4d4

080004b4 <make_time>:
void make_time(PPM *ppm, int *time_data)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
	*time_data = (ppm->hour)*10000 + (ppm->min)*100 + (ppm->sec);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	461a      	mov	r2, r3
 80004c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80004c8:	fb03 f202 	mul.w	r2, r3, r2
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	785b      	ldrb	r3, [r3, #1]
 80004d0:	4619      	mov	r1, r3
 80004d2:	2364      	movs	r3, #100	@ 0x64
 80004d4:	fb01 f303 	mul.w	r3, r1, r3
 80004d8:	4413      	add	r3, r2
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	7892      	ldrb	r2, [r2, #2]
 80004de:	441a      	add	r2, r3
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	601a      	str	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
	...

080004f0 <USB_data_to_send>:
void USB_data_to_send()
{
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	b08b      	sub	sp, #44	@ 0x2c
 80004f4:	af08      	add	r7, sp, #32
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
	,(int)ppm_data_1.hour, (int)ppm_data_1.min,(int) ppm_data_1.sec,(int) ppm_data_1.CO_ppm,ppm_data_1.CO2_ppm
 80004f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <USB_data_to_send+0x78>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 80004fa:	469c      	mov	ip, r3
	,(int)ppm_data_1.hour, (int)ppm_data_1.min,(int) ppm_data_1.sec,(int) ppm_data_1.CO_ppm,ppm_data_1.CO2_ppm
 80004fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <USB_data_to_send+0x78>)
 80004fe:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 8000500:	469e      	mov	lr, r3
	,(int)ppm_data_1.hour, (int)ppm_data_1.min,(int) ppm_data_1.sec,(int) ppm_data_1.CO_ppm,ppm_data_1.CO2_ppm
 8000502:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <USB_data_to_send+0x78>)
 8000504:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 8000506:	461a      	mov	r2, r3
	,(int)ppm_data_1.hour, (int)ppm_data_1.min,(int) ppm_data_1.sec,(int) ppm_data_1.CO_ppm,ppm_data_1.CO2_ppm
 8000508:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <USB_data_to_send+0x78>)
 800050a:	889b      	ldrh	r3, [r3, #4]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 800050c:	4619      	mov	r1, r3
	,(int)ppm_data_1.hour, (int)ppm_data_1.min,(int) ppm_data_1.sec,(int) ppm_data_1.CO_ppm,ppm_data_1.CO2_ppm
 800050e:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <USB_data_to_send+0x78>)
 8000510:	88db      	ldrh	r3, [r3, #6]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 8000512:	4618      	mov	r0, r3
	, (int)ppm_data_2.hour, (int)ppm_data_2.min, (int)ppm_data_2.sec, (int)ppm_data_2.CO_ppm, (int)ppm_data_2.CO2_ppm);
 8000514:	4b15      	ldr	r3, [pc, #84]	@ (800056c <USB_data_to_send+0x7c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 8000518:	461c      	mov	r4, r3
	, (int)ppm_data_2.hour, (int)ppm_data_2.min, (int)ppm_data_2.sec, (int)ppm_data_2.CO_ppm, (int)ppm_data_2.CO2_ppm);
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <USB_data_to_send+0x7c>)
 800051c:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 800051e:	461d      	mov	r5, r3
	, (int)ppm_data_2.hour, (int)ppm_data_2.min, (int)ppm_data_2.sec, (int)ppm_data_2.CO_ppm, (int)ppm_data_2.CO2_ppm);
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <USB_data_to_send+0x7c>)
 8000522:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 8000524:	461e      	mov	r6, r3
	, (int)ppm_data_2.hour, (int)ppm_data_2.min, (int)ppm_data_2.sec, (int)ppm_data_2.CO_ppm, (int)ppm_data_2.CO2_ppm);
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <USB_data_to_send+0x7c>)
 8000528:	889b      	ldrh	r3, [r3, #4]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 800052a:	607b      	str	r3, [r7, #4]
	, (int)ppm_data_2.hour, (int)ppm_data_2.min, (int)ppm_data_2.sec, (int)ppm_data_2.CO_ppm, (int)ppm_data_2.CO2_ppm);
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <USB_data_to_send+0x7c>)
 800052e:	88db      	ldrh	r3, [r3, #6]
	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 8000530:	9307      	str	r3, [sp, #28]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	9306      	str	r3, [sp, #24]
 8000536:	9605      	str	r6, [sp, #20]
 8000538:	9504      	str	r5, [sp, #16]
 800053a:	9403      	str	r4, [sp, #12]
 800053c:	9002      	str	r0, [sp, #8]
 800053e:	9101      	str	r1, [sp, #4]
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	4673      	mov	r3, lr
 8000544:	4662      	mov	r2, ip
 8000546:	490a      	ldr	r1, [pc, #40]	@ (8000570 <USB_data_to_send+0x80>)
 8000548:	480a      	ldr	r0, [pc, #40]	@ (8000574 <USB_data_to_send+0x84>)
 800054a:	f009 fafb 	bl	8009b44 <siprintf>
	USB_txbuffer[38]='\r';
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <USB_data_to_send+0x88>)
 8000550:	220d      	movs	r2, #13
 8000552:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	USB_txbuffer[39]='\n';
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <USB_data_to_send+0x88>)
 8000558:	220a      	movs	r2, #10
 800055a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000566:	bf00      	nop
 8000568:	20000258 	.word	0x20000258
 800056c:	20000260 	.word	0x20000260
 8000570:	0800a4d8 	.word	0x0800a4d8
 8000574:	200001fa 	.word	0x200001fa
 8000578:	200001f8 	.word	0x200001f8

0800057c <USB_data_miss_to_send>:
void USB_data_miss_to_send()
{
 800057c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000580:	b09a      	sub	sp, #104	@ 0x68
 8000582:	af08      	add	r7, sp, #32
	char hour_buf1[3] = {0}; // Lưu chuỗi th�?i gian
 8000584:	4bc1      	ldr	r3, [pc, #772]	@ (800088c <USB_data_miss_to_send+0x310>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800058a:	2300      	movs	r3, #0
 800058c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	char min_buf1[3] = {0};
 8000590:	4bbe      	ldr	r3, [pc, #760]	@ (800088c <USB_data_miss_to_send+0x310>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000596:	2300      	movs	r3, #0
 8000598:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	char sec_buf1[3] = {0};
 800059c:	4bbb      	ldr	r3, [pc, #748]	@ (800088c <USB_data_miss_to_send+0x310>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80005a2:	2300      	movs	r3, #0
 80005a4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	char co_high1[3] = {0};   // Lưu chuỗi giá trị CO
 80005a8:	4bb8      	ldr	r3, [pc, #736]	@ (800088c <USB_data_miss_to_send+0x310>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	853b      	strh	r3, [r7, #40]	@ 0x28
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	char co_low1[3] = {0};   // Lưu chuỗi giá trị CO
 80005b4:	4bb5      	ldr	r3, [pc, #724]	@ (800088c <USB_data_miss_to_send+0x310>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	char co2_high1[3] = {0};   // Lưu chuỗi giá trị CO
 80005c0:	4bb2      	ldr	r3, [pc, #712]	@ (800088c <USB_data_miss_to_send+0x310>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	843b      	strh	r3, [r7, #32]
 80005c6:	2300      	movs	r3, #0
 80005c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	char co2_low1[3] = {0};  // Lưu chuỗi giá trị CO2
 80005cc:	4baf      	ldr	r3, [pc, #700]	@ (800088c <USB_data_miss_to_send+0x310>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	83bb      	strh	r3, [r7, #28]
 80005d2:	2300      	movs	r3, #0
 80005d4:	77bb      	strb	r3, [r7, #30]
	uint16_t CO21;
	uint8_t ho1;
	uint8_t mi1;
	uint8_t se1;

	char hour_buf2[3] = {0}; // Lưu chuỗi th�?i gian
 80005d6:	4bad      	ldr	r3, [pc, #692]	@ (800088c <USB_data_miss_to_send+0x310>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	833b      	strh	r3, [r7, #24]
 80005dc:	2300      	movs	r3, #0
 80005de:	76bb      	strb	r3, [r7, #26]
	char min_buf2[3] = {0};
 80005e0:	4baa      	ldr	r3, [pc, #680]	@ (800088c <USB_data_miss_to_send+0x310>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	82bb      	strh	r3, [r7, #20]
 80005e6:	2300      	movs	r3, #0
 80005e8:	75bb      	strb	r3, [r7, #22]
	char sec_buf2[3] = {0};
 80005ea:	4ba8      	ldr	r3, [pc, #672]	@ (800088c <USB_data_miss_to_send+0x310>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	823b      	strh	r3, [r7, #16]
 80005f0:	2300      	movs	r3, #0
 80005f2:	74bb      	strb	r3, [r7, #18]
	char co_high2[3] = {0};   // Lưu chuỗi giá trị CO
 80005f4:	4ba5      	ldr	r3, [pc, #660]	@ (800088c <USB_data_miss_to_send+0x310>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	81bb      	strh	r3, [r7, #12]
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
	char co_low2[3] = {0};   // Lưu chuỗi giá trị CO
 80005fe:	4ba3      	ldr	r3, [pc, #652]	@ (800088c <USB_data_miss_to_send+0x310>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	813b      	strh	r3, [r7, #8]
 8000604:	2300      	movs	r3, #0
 8000606:	72bb      	strb	r3, [r7, #10]
	char co2_high2[3] = {0};   // Lưu chuỗi giá trị CO
 8000608:	4ba0      	ldr	r3, [pc, #640]	@ (800088c <USB_data_miss_to_send+0x310>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	80bb      	strh	r3, [r7, #4]
 800060e:	2300      	movs	r3, #0
 8000610:	71bb      	strb	r3, [r7, #6]
	char co2_low2[3] = {0};  // Lưu chuỗi giá trị CO2
 8000612:	4b9e      	ldr	r3, [pc, #632]	@ (800088c <USB_data_miss_to_send+0x310>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	803b      	strh	r3, [r7, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	70bb      	strb	r3, [r7, #2]
	uint8_t ho2;
	uint8_t mi2;
	uint8_t se2;

	// Tách chuỗi từ buffer
	hour_buf1[0] = RS_rxBuffer[5];
 800061c:	4b9c      	ldr	r3, [pc, #624]	@ (8000890 <USB_data_miss_to_send+0x314>)
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	hour_buf1[1] = RS_rxBuffer[5+1];
 8000624:	4b9a      	ldr	r3, [pc, #616]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000626:	799b      	ldrb	r3, [r3, #6]
 8000628:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	hour_buf1[2] = '\0';
 800062c:	2300      	movs	r3, #0
 800062e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	min_buf1[0] = RS_rxBuffer[5+2];
 8000632:	4b97      	ldr	r3, [pc, #604]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000634:	79db      	ldrb	r3, [r3, #7]
 8000636:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	min_buf1[1] = RS_rxBuffer[5+3];
 800063a:	4b95      	ldr	r3, [pc, #596]	@ (8000890 <USB_data_miss_to_send+0x314>)
 800063c:	7a1b      	ldrb	r3, [r3, #8]
 800063e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	min_buf1[2] = '\0';
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	sec_buf1[0] = RS_rxBuffer[5+4];
 8000648:	4b91      	ldr	r3, [pc, #580]	@ (8000890 <USB_data_miss_to_send+0x314>)
 800064a:	7a5b      	ldrb	r3, [r3, #9]
 800064c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	sec_buf1[1] = RS_rxBuffer[5+5];
 8000650:	4b8f      	ldr	r3, [pc, #572]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000652:	7a9b      	ldrb	r3, [r3, #10]
 8000654:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	sec_buf1[2] = '\0';
 8000658:	2300      	movs	r3, #0
 800065a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	co_high1[0] = RS_rxBuffer[5+6];
 800065e:	4b8c      	ldr	r3, [pc, #560]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000660:	7adb      	ldrb	r3, [r3, #11]
 8000662:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	co_high1[1] = RS_rxBuffer[5+7];
 8000666:	4b8a      	ldr	r3, [pc, #552]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000668:	7b1b      	ldrb	r3, [r3, #12]
 800066a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	co_high1[2] = '\0';
 800066e:	2300      	movs	r3, #0
 8000670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

	co_low1[0] = RS_rxBuffer[5+8];
 8000674:	4b86      	ldr	r3, [pc, #536]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000676:	7b5b      	ldrb	r3, [r3, #13]
 8000678:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	co_low1[1] = RS_rxBuffer[5+9];
 800067c:	4b84      	ldr	r3, [pc, #528]	@ (8000890 <USB_data_miss_to_send+0x314>)
 800067e:	7b9b      	ldrb	r3, [r3, #14]
 8000680:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	co_low1[2] = '\0';
 8000684:	2300      	movs	r3, #0
 8000686:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	co2_high1[0] = RS_rxBuffer[5+10];
 800068a:	4b81      	ldr	r3, [pc, #516]	@ (8000890 <USB_data_miss_to_send+0x314>)
 800068c:	7bdb      	ldrb	r3, [r3, #15]
 800068e:	f887 3020 	strb.w	r3, [r7, #32]
	co2_high1[1] = RS_rxBuffer[5+11];
 8000692:	4b7f      	ldr	r3, [pc, #508]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000694:	7c1b      	ldrb	r3, [r3, #16]
 8000696:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	co2_high1[2] = '\0';
 800069a:	2300      	movs	r3, #0
 800069c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	co2_low1[0] = RS_rxBuffer[5+12];
 80006a0:	4b7b      	ldr	r3, [pc, #492]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006a2:	7c5b      	ldrb	r3, [r3, #17]
 80006a4:	773b      	strb	r3, [r7, #28]
	co2_low1[1] = RS_rxBuffer[5+13];
 80006a6:	4b7a      	ldr	r3, [pc, #488]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006a8:	7c9b      	ldrb	r3, [r3, #18]
 80006aa:	777b      	strb	r3, [r7, #29]
	co2_low1[2] = '\0';
 80006ac:	2300      	movs	r3, #0
 80006ae:	77bb      	strb	r3, [r7, #30]
// Tách chuỗi từ buffer
	hour_buf2[0] = RS_rxBuffer[19];
 80006b0:	4b77      	ldr	r3, [pc, #476]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006b2:	7cdb      	ldrb	r3, [r3, #19]
 80006b4:	763b      	strb	r3, [r7, #24]
	hour_buf2[1] = RS_rxBuffer[19+1];
 80006b6:	4b76      	ldr	r3, [pc, #472]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006b8:	7d1b      	ldrb	r3, [r3, #20]
 80006ba:	767b      	strb	r3, [r7, #25]
	hour_buf2[2] = '\0';
 80006bc:	2300      	movs	r3, #0
 80006be:	76bb      	strb	r3, [r7, #26]

	min_buf2[0] = RS_rxBuffer[19+2];
 80006c0:	4b73      	ldr	r3, [pc, #460]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006c2:	7d5b      	ldrb	r3, [r3, #21]
 80006c4:	753b      	strb	r3, [r7, #20]
	min_buf2[1] = RS_rxBuffer[19+3];
 80006c6:	4b72      	ldr	r3, [pc, #456]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006c8:	7d9b      	ldrb	r3, [r3, #22]
 80006ca:	757b      	strb	r3, [r7, #21]
	min_buf2[2] = '\0';
 80006cc:	2300      	movs	r3, #0
 80006ce:	75bb      	strb	r3, [r7, #22]

	sec_buf2[0] = RS_rxBuffer[19+4];
 80006d0:	4b6f      	ldr	r3, [pc, #444]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006d2:	7ddb      	ldrb	r3, [r3, #23]
 80006d4:	743b      	strb	r3, [r7, #16]
	sec_buf2[1] = RS_rxBuffer[19+5];
 80006d6:	4b6e      	ldr	r3, [pc, #440]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006d8:	7e1b      	ldrb	r3, [r3, #24]
 80006da:	747b      	strb	r3, [r7, #17]
	sec_buf2[2] = '\0';
 80006dc:	2300      	movs	r3, #0
 80006de:	74bb      	strb	r3, [r7, #18]

	co_high2[0] = RS_rxBuffer[19+6];
 80006e0:	4b6b      	ldr	r3, [pc, #428]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006e2:	7e5b      	ldrb	r3, [r3, #25]
 80006e4:	733b      	strb	r3, [r7, #12]
	co_high2[1] = RS_rxBuffer[19+7];
 80006e6:	4b6a      	ldr	r3, [pc, #424]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006e8:	7e9b      	ldrb	r3, [r3, #26]
 80006ea:	737b      	strb	r3, [r7, #13]
	co_high2[2] = '\0';
 80006ec:	2300      	movs	r3, #0
 80006ee:	73bb      	strb	r3, [r7, #14]

	co_low2[0] = RS_rxBuffer[19+8];
 80006f0:	4b67      	ldr	r3, [pc, #412]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006f2:	7edb      	ldrb	r3, [r3, #27]
 80006f4:	723b      	strb	r3, [r7, #8]
	co_low2[1] = RS_rxBuffer[19+9];
 80006f6:	4b66      	ldr	r3, [pc, #408]	@ (8000890 <USB_data_miss_to_send+0x314>)
 80006f8:	7f1b      	ldrb	r3, [r3, #28]
 80006fa:	727b      	strb	r3, [r7, #9]
	co_low2[2] = '\0';
 80006fc:	2300      	movs	r3, #0
 80006fe:	72bb      	strb	r3, [r7, #10]

	co2_high2[0] = RS_rxBuffer[19+10];
 8000700:	4b63      	ldr	r3, [pc, #396]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000702:	7f5b      	ldrb	r3, [r3, #29]
 8000704:	713b      	strb	r3, [r7, #4]
	co2_high2[1] = RS_rxBuffer[19+11];
 8000706:	4b62      	ldr	r3, [pc, #392]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000708:	7f9b      	ldrb	r3, [r3, #30]
 800070a:	717b      	strb	r3, [r7, #5]
	co2_high2[2] = '\0';
 800070c:	2300      	movs	r3, #0
 800070e:	71bb      	strb	r3, [r7, #6]

	co2_low2[0] = RS_rxBuffer[19+12];
 8000710:	4b5f      	ldr	r3, [pc, #380]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000712:	7fdb      	ldrb	r3, [r3, #31]
 8000714:	703b      	strb	r3, [r7, #0]
	co2_low2[1] = RS_rxBuffer[19+13];
 8000716:	4b5e      	ldr	r3, [pc, #376]	@ (8000890 <USB_data_miss_to_send+0x314>)
 8000718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800071c:	707b      	strb	r3, [r7, #1]
	co2_low2[2] = '\0';
 800071e:	2300      	movs	r3, #0
 8000720:	70bb      	strb	r3, [r7, #2]
	ho1 = (uint8_t)strtol(hour_buf1, NULL, 16);
 8000722:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000726:	2210      	movs	r2, #16
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f009 fa00 	bl	8009b30 <strtol>
 8000730:	4603      	mov	r3, r0
 8000732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	mi1 = (uint8_t)strtol(min_buf1, NULL, 16);
 8000736:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800073a:	2210      	movs	r2, #16
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f009 f9f6 	bl	8009b30 <strtol>
 8000744:	4603      	mov	r3, r0
 8000746:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	se1 = (uint8_t)strtol(sec_buf1, NULL, 16);
 800074a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800074e:	2210      	movs	r2, #16
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f009 f9ec 	bl	8009b30 <strtol>
 8000758:	4603      	mov	r3, r0
 800075a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	CO1 = ((uint8_t)(strtol(co_high1, NULL, 16)) << 8) | ((uint8_t)(strtol(co_low1, NULL, 16)));
 800075e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000762:	2210      	movs	r2, #16
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f009 f9e2 	bl	8009b30 <strtol>
 800076c:	4603      	mov	r3, r0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21c      	sxth	r4, r3
 8000774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000778:	2210      	movs	r2, #16
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f009 f9d7 	bl	8009b30 <strtol>
 8000782:	4603      	mov	r3, r0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	b21b      	sxth	r3, r3
 8000788:	4323      	orrs	r3, r4
 800078a:	b21b      	sxth	r3, r3
 800078c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	CO21 = ((uint8_t)(strtol(co2_high1, NULL, 16)) << 8) | ((uint8_t)(strtol(co2_low1, NULL, 16)));
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	2210      	movs	r2, #16
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f009 f9c9 	bl	8009b30 <strtol>
 800079e:	4603      	mov	r3, r0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21c      	sxth	r4, r3
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2210      	movs	r2, #16
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f009 f9be 	bl	8009b30 <strtol>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4323      	orrs	r3, r4
 80007bc:	b21b      	sxth	r3, r3
 80007be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	ho2 = (uint8_t)strtol(hour_buf2, NULL, 16);
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2210      	movs	r2, #16
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f009 f9b0 	bl	8009b30 <strtol>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	mi2 = (uint8_t)strtol(min_buf2, NULL, 16);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2210      	movs	r2, #16
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f009 f9a6 	bl	8009b30 <strtol>
 80007e4:	4603      	mov	r3, r0
 80007e6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	se2 = (uint8_t)strtol(sec_buf2, NULL, 16);
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	2210      	movs	r2, #16
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 f99c 	bl	8009b30 <strtol>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	CO2 = ((uint8_t)(strtol(co_high2, NULL, 16)) << 8) | ((uint8_t)(strtol(co_low2, NULL, 16)));
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2210      	movs	r2, #16
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f009 f992 	bl	8009b30 <strtol>
 800080c:	4603      	mov	r3, r0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21c      	sxth	r4, r3
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2210      	movs	r2, #16
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f009 f987 	bl	8009b30 <strtol>
 8000822:	4603      	mov	r3, r0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	b21b      	sxth	r3, r3
 8000828:	4323      	orrs	r3, r4
 800082a:	b21b      	sxth	r3, r3
 800082c:	877b      	strh	r3, [r7, #58]	@ 0x3a
	CO22 = ((uint8_t)(strtol(co2_high2, NULL, 16)) << 8) | ((uint8_t)(strtol(co2_low2, NULL, 16)));
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2210      	movs	r2, #16
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f009 f97b 	bl	8009b30 <strtol>
 800083a:	4603      	mov	r3, r0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	b21c      	sxth	r4, r3
 8000842:	463b      	mov	r3, r7
 8000844:	2210      	movs	r2, #16
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f009 f971 	bl	8009b30 <strtol>
 800084e:	4603      	mov	r3, r0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	b21b      	sxth	r3, r3
 8000854:	4323      	orrs	r3, r4
 8000856:	b21b      	sxth	r3, r3
 8000858:	873b      	strh	r3, [r7, #56]	@ 0x38

	sprintf((char*)(&(USB_txbuffer[2])), "%02d%02d%02d%5d%5d%02d%02d%02d%5d%5d"
 800085a:	f897 c047 	ldrb.w	ip, [r7, #71]	@ 0x47
 800085e:	f897 e046 	ldrb.w	lr, [r7, #70]	@ 0x46
 8000862:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000866:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800086a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800086e:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 8000872:	f897 403e 	ldrb.w	r4, [r7, #62]	@ 0x3e
 8000876:	f897 503d 	ldrb.w	r5, [r7, #61]	@ 0x3d
 800087a:	8f7e      	ldrh	r6, [r7, #58]	@ 0x3a
 800087c:	f8b7 8038 	ldrh.w	r8, [r7, #56]	@ 0x38
 8000880:	f8cd 801c 	str.w	r8, [sp, #28]
 8000884:	9606      	str	r6, [sp, #24]
 8000886:	9505      	str	r5, [sp, #20]
 8000888:	e004      	b.n	8000894 <USB_data_miss_to_send+0x318>
 800088a:	bf00      	nop
 800088c:	0800a4d4 	.word	0x0800a4d4
 8000890:	2000022c 	.word	0x2000022c
 8000894:	9404      	str	r4, [sp, #16]
 8000896:	9003      	str	r0, [sp, #12]
 8000898:	9102      	str	r1, [sp, #8]
 800089a:	9201      	str	r2, [sp, #4]
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	4673      	mov	r3, lr
 80008a0:	4662      	mov	r2, ip
 80008a2:	4908      	ldr	r1, [pc, #32]	@ (80008c4 <USB_data_miss_to_send+0x348>)
 80008a4:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <USB_data_miss_to_send+0x34c>)
 80008a6:	f009 f94d 	bl	8009b44 <siprintf>
	,(int)ho1, (int)mi1,(int)se1,(int) CO1,CO21
	, (int)ho2, (int)mi2, (int)se2, (int)CO2, (int)CO22);
	USB_txbuffer[38]='\r';
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <USB_data_miss_to_send+0x350>)
 80008ac:	220d      	movs	r2, #13
 80008ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	USB_txbuffer[39]='\n';
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <USB_data_miss_to_send+0x350>)
 80008b4:	220a      	movs	r2, #10
 80008b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 80008ba:	bf00      	nop
 80008bc:	3748      	adds	r7, #72	@ 0x48
 80008be:	46bd      	mov	sp, r7
 80008c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008c4:	0800a4d8 	.word	0x0800a4d8
 80008c8:	200001fa 	.word	0x200001fa
 80008cc:	200001f8 	.word	0x200001f8

080008d0 <check_disconnected>:
int check_disconnected (int node)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if(node==1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d109      	bne.n	80008f2 <check_disconnected+0x22>
	{
		if(time_data_n1 -ppm1_time_temp ==0)
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <check_disconnected+0x40>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <check_disconnected+0x44>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d101      	bne.n	80008ee <check_disconnected+0x1e>
		{
			return 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e00a      	b.n	8000904 <check_disconnected+0x34>
		}
		else
		{
			return 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e008      	b.n	8000904 <check_disconnected+0x34>
		}
	}
	else
	{
		if(time_data_n2 - ppm2_time_temp ==0)
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <check_disconnected+0x48>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <check_disconnected+0x4c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d101      	bne.n	8000902 <check_disconnected+0x32>
		{
			return 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <check_disconnected+0x34>
		}
		else
		{
			return 1;
 8000902:	2301      	movs	r3, #1
		}
	}
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000268 	.word	0x20000268
 8000914:	2000027c 	.word	0x2000027c
 8000918:	2000026c 	.word	0x2000026c
 800091c:	20000278 	.word	0x20000278

08000920 <Change_Time_Read_Data>:
void Change_Time_Read_Data()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 8000924:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <Change_Time_Read_Data+0xb0>)
 8000926:	88db      	ldrh	r3, [r3, #6]
 8000928:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800092c:	d81c      	bhi.n	8000968 <Change_Time_Read_Data+0x48>
 800092e:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <Change_Time_Read_Data+0xb0>)
 8000930:	889b      	ldrh	r3, [r3, #4]
 8000932:	2b19      	cmp	r3, #25
 8000934:	d818      	bhi.n	8000968 <Change_Time_Read_Data+0x48>
 8000936:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <Change_Time_Read_Data+0xb4>)
 8000938:	88db      	ldrh	r3, [r3, #6]
 800093a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800093e:	d813      	bhi.n	8000968 <Change_Time_Read_Data+0x48>
 8000940:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <Change_Time_Read_Data+0xb4>)
 8000942:	889b      	ldrh	r3, [r3, #4]
 8000944:	2b19      	cmp	r3, #25
 8000946:	d80f      	bhi.n	8000968 <Change_Time_Read_Data+0x48>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8000948:	4823      	ldr	r0, [pc, #140]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 800094a:	f003 fabd 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, T3);     // Cập nhật chu kỳ
 800094e:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000956:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 800095a:	f241 7270 	movw	r2, #6000	@ 0x1770
 800095e:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 8000960:	481d      	ldr	r0, [pc, #116]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 8000962:	f003 fa5f 	bl	8003e24 <HAL_TIM_Base_Start_IT>
 8000966:	e031      	b.n	80009cc <Change_Time_Read_Data+0xac>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=50 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <Change_Time_Read_Data+0xb0>)
 800096a:	88db      	ldrh	r3, [r3, #6]
 800096c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000970:	d20c      	bcs.n	800098c <Change_Time_Read_Data+0x6c>
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <Change_Time_Read_Data+0xb0>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	2b31      	cmp	r3, #49	@ 0x31
 8000978:	d808      	bhi.n	800098c <Change_Time_Read_Data+0x6c>
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <Change_Time_Read_Data+0xb4>)
 800097c:	88db      	ldrh	r3, [r3, #6]
 800097e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000982:	d203      	bcs.n	800098c <Change_Time_Read_Data+0x6c>
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <Change_Time_Read_Data+0xb4>)
 8000986:	889b      	ldrh	r3, [r3, #4]
 8000988:	2b31      	cmp	r3, #49	@ 0x31
 800098a:	d90f      	bls.n	80009ac <Change_Time_Read_Data+0x8c>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 800098c:	4812      	ldr	r0, [pc, #72]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 800098e:	f003 fa9b 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, T1);     // Cập nhật chu kỳ
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 800099e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a2:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 80009a4:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 80009a6:	f003 fa3d 	bl	8003e24 <HAL_TIM_Base_Start_IT>
 80009aa:	e00f      	b.n	80009cc <Change_Time_Read_Data+0xac>
	}
	else
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 80009ac:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 80009ae:	f003 fa8b 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, T2);     // Cập nhật chu kỳ
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80009ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 80009be:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80009c2:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <Change_Time_Read_Data+0xb8>)
 80009c6:	f003 fa2d 	bl	8003e24 <HAL_TIM_Base_Start_IT>
	}
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000258 	.word	0x20000258
 80009d4:	20000260 	.word	0x20000260
 80009d8:	20000280 	.word	0x20000280

080009dc <HAL_TIM_PeriodElapsedCallback>:
// gửi lệnh đ�?c v�? node đo theo th�?i gian
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009ec:	d147      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xa2>
    {
    	if(receive_node_tong_flag==1)
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d137      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x8a>
    	{
			if(node_tong_to_node_1_error==1 && node_tong_to_node_2_error==0)
 80009f6:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d10b      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x3a>
 80009fe:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d107      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x3a>
			{
				RS485_SendCommand(0x11, 0x21);  // Gửi lệnh 0x21 tới
 8000a06:	2121      	movs	r1, #33	@ 0x21
 8000a08:	2011      	movs	r0, #17
 8000a0a:	f7ff fc15 	bl	8000238 <RS485_SendCommand>
				receive_node_tong_flag=0;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	e033      	b.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
			else if (node_tong_to_node_1_error==0 && node_tong_to_node_2_error==1)
 8000a16:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10b      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d107      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x5a>
			{
				RS485_SendCommand(0x11, 0x22);  // Gửi lệnh "22" tới
 8000a26:	2122      	movs	r1, #34	@ 0x22
 8000a28:	2011      	movs	r0, #17
 8000a2a:	f7ff fc05 	bl	8000238 <RS485_SendCommand>
				receive_node_tong_flag=0;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	e023      	b.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
			else if (node_tong_to_node_1_error==1 && node_tong_to_node_2_error==1)
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d10b      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d107      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x7a>
			{
				RS485_SendCommand(0x11, 0x23);  // Gửi lệnh "23" tới
 8000a46:	2123      	movs	r1, #35	@ 0x23
 8000a48:	2011      	movs	r0, #17
 8000a4a:	f7ff fbf5 	bl	8000238 <RS485_SendCommand>
				receive_node_tong_flag=0;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e013      	b.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
			else
			{
				RS485_SendCommand(0x11, 0x02);  // Gửi lệnh "02" tới
 8000a56:	2102      	movs	r1, #2
 8000a58:	2011      	movs	r0, #17
 8000a5a:	f7ff fbed 	bl	8000238 <RS485_SendCommand>
				receive_node_tong_flag=0;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
		{
        	RS485_SendCommand(0x11, 0x03);  // Gửi lệnh "03"
        	receive_node_tong_flag=0;
		}
    }
}
 8000a64:	e00b      	b.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xa2>
    	else if(receive_node_tong_flag==0) // mất kết nối với node tổng
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d107      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xa2>
        	RS485_SendCommand(0x11, 0x03);  // Gửi lệnh "03"
 8000a6e:	2103      	movs	r1, #3
 8000a70:	2011      	movs	r0, #17
 8000a72:	f7ff fbe1 	bl	8000238 <RS485_SendCommand>
        	receive_node_tong_flag=0;
 8000a76:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	e7ff      	b.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000270 	.word	0x20000270
 8000a90:	20000274 	.word	0x20000274

08000a94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	// Nhận dữ liệu từ node tổng
    if (huart->Instance == USART1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a88      	ldr	r2, [pc, #544]	@ (8000cc4 <HAL_UART_RxCpltCallback+0x230>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	f040 810a 	bne.w	8000cbc <HAL_UART_RxCpltCallback+0x228>
    {
       	// nhận chuỗi từ : đến \n
    	if(rs_temp[0] != '\n')
 8000aa8:	4b87      	ldr	r3, [pc, #540]	@ (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b0a      	cmp	r3, #10
 8000aae:	d017      	beq.n	8000ae0 <HAL_UART_RxCpltCallback+0x4c>
    	{
    		if(rs_temp[0]==':')
 8000ab0:	4b85      	ldr	r3, [pc, #532]	@ (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b3a      	cmp	r3, #58	@ 0x3a
 8000ab6:	d107      	bne.n	8000ac8 <HAL_UART_RxCpltCallback+0x34>
    		{
    			RS_rxBuffer[0]=rs_temp[0];
 8000ab8:	4b83      	ldr	r3, [pc, #524]	@ (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	4b83      	ldr	r3, [pc, #524]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000abe:	701a      	strb	r2, [r3, #0]
    			rs_inx=1;
 8000ac0:	4b83      	ldr	r3, [pc, #524]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e0f4      	b.n	8000cb2 <HAL_UART_RxCpltCallback+0x21e>
    		}
    		else
    		{
    			RS_rxBuffer[rs_inx++]=rs_temp[0];
 8000ac8:	4b81      	ldr	r3, [pc, #516]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	b2d1      	uxtb	r1, r2
 8000ad0:	4a7f      	ldr	r2, [pc, #508]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000ad2:	7011      	strb	r1, [r2, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b7c      	ldr	r3, [pc, #496]	@ (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000ad8:	7819      	ldrb	r1, [r3, #0]
 8000ada:	4b7c      	ldr	r3, [pc, #496]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000adc:	5499      	strb	r1, [r3, r2]
 8000ade:	e0e8      	b.n	8000cb2 <HAL_UART_RxCpltCallback+0x21e>
    		}
    	}
    	else
    	{
    	RS_rxBuffer[rs_inx++]='\n';
 8000ae0:	4b7b      	ldr	r3, [pc, #492]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	b2d1      	uxtb	r1, r2
 8000ae8:	4a79      	ldr	r2, [pc, #484]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000aea:	7011      	strb	r1, [r2, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b77      	ldr	r3, [pc, #476]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000af0:	210a      	movs	r1, #10
 8000af2:	5499      	strb	r1, [r3, r2]
    	if(check_lrc(&RS_rxBuffer[1],32,(char*)&RS_rxBuffer[33]) == 1)
 8000af4:	4a77      	ldr	r2, [pc, #476]	@ (8000cd4 <HAL_UART_RxCpltCallback+0x240>)
 8000af6:	2120      	movs	r1, #32
 8000af8:	4877      	ldr	r0, [pc, #476]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x244>)
 8000afa:	f7ff fb60 	bl	80001be <check_lrc>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	f040 80ce 	bne.w	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
    	{
    	 if (RS_rxBuffer[1] == '1' && RS_rxBuffer[2] == '1')
 8000b06:	4b71      	ldr	r3, [pc, #452]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	2b31      	cmp	r3, #49	@ 0x31
 8000b0c:	f040 80c9 	bne.w	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
 8000b10:	4b6e      	ldr	r3, [pc, #440]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000b12:	789b      	ldrb	r3, [r3, #2]
 8000b14:	2b31      	cmp	r3, #49	@ 0x31
 8000b16:	f040 80c4 	bne.w	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
		 { // Kiểm tra địa chỉ
			receive_node_tong_flag=1; // c�? nhận được dữ liệu từ node tong
 8000b1a:	4b70      	ldr	r3, [pc, #448]	@ (8000cdc <HAL_UART_RxCpltCallback+0x248>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
			if (RS_rxBuffer[3] == '0' && RS_rxBuffer[4] == '2')
 8000b20:	4b6a      	ldr	r3, [pc, #424]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	2b30      	cmp	r3, #48	@ 0x30
 8000b26:	d163      	bne.n	8000bf0 <HAL_UART_RxCpltCallback+0x15c>
 8000b28:	4b68      	ldr	r3, [pc, #416]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	2b32      	cmp	r3, #50	@ 0x32
 8000b2e:	d15f      	bne.n	8000bf0 <HAL_UART_RxCpltCallback+0x15c>
			{
				HAL_TIM_Base_Start_IT(&htim2);
 8000b30:	486b      	ldr	r0, [pc, #428]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x24c>)
 8000b32:	f003 f977 	bl	8003e24 <HAL_TIM_Base_Start_IT>
				ppm1_time_temp= time_data_n1;
 8000b36:	4b6b      	ldr	r3, [pc, #428]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x250>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8000ce8 <HAL_UART_RxCpltCallback+0x254>)
 8000b3c:	6013      	str	r3, [r2, #0]
				ppm2_time_temp=time_data_n2;
 8000b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8000cec <HAL_UART_RxCpltCallback+0x258>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a6b      	ldr	r2, [pc, #428]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x25c>)
 8000b44:	6013      	str	r3, [r2, #0]
				decode_ppm2_ver3((char*)RS_rxBuffer, &ppm_data_1, 5);
 8000b46:	2205      	movs	r2, #5
 8000b48:	496a      	ldr	r1, [pc, #424]	@ (8000cf4 <HAL_UART_RxCpltCallback+0x260>)
 8000b4a:	4860      	ldr	r0, [pc, #384]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000b4c:	f7ff fbb0 	bl	80002b0 <decode_ppm2_ver3>
				decode_ppm2_ver3((char*)RS_rxBuffer, &ppm_data_2, 19);
 8000b50:	2213      	movs	r2, #19
 8000b52:	4969      	ldr	r1, [pc, #420]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x264>)
 8000b54:	485d      	ldr	r0, [pc, #372]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000b56:	f7ff fbab 	bl	80002b0 <decode_ppm2_ver3>
				Change_Time_Read_Data();
 8000b5a:	f7ff fee1 	bl	8000920 <Change_Time_Read_Data>
				USB_data_to_send();
 8000b5e:	f7ff fcc7 	bl	80004f0 <USB_data_to_send>
				CDC_Transmit_FS(USB_txbuffer, 40); // gui qua USB
 8000b62:	2128      	movs	r1, #40	@ 0x28
 8000b64:	4865      	ldr	r0, [pc, #404]	@ (8000cfc <HAL_UART_RxCpltCallback+0x268>)
 8000b66:	f008 fb8b 	bl	8009280 <CDC_Transmit_FS>
				make_time(&ppm_data_1, &time_data_n1);
 8000b6a:	495e      	ldr	r1, [pc, #376]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x250>)
 8000b6c:	4861      	ldr	r0, [pc, #388]	@ (8000cf4 <HAL_UART_RxCpltCallback+0x260>)
 8000b6e:	f7ff fca1 	bl	80004b4 <make_time>
				make_time(&ppm_data_2, &time_data_n2);
 8000b72:	495e      	ldr	r1, [pc, #376]	@ (8000cec <HAL_UART_RxCpltCallback+0x258>)
 8000b74:	4860      	ldr	r0, [pc, #384]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x264>)
 8000b76:	f7ff fc9d 	bl	80004b4 <make_time>
				if(check_disconnected (1)==0 && ppm1_time_temp!=0) // ppm1_time_temp khác 0 mới lỗi vì khi gửi các chuỗi của node 1 thì các số liệu node 2=0 hết
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fea8 	bl	80008d0 <check_disconnected>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d107      	bne.n	8000b96 <HAL_UART_RxCpltCallback+0x102>
 8000b86:	4b58      	ldr	r3, [pc, #352]	@ (8000ce8 <HAL_UART_RxCpltCallback+0x254>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_UART_RxCpltCallback+0x102>
				{
  					node_tong_to_node_1_error =1;
 8000b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8000d00 <HAL_UART_RxCpltCallback+0x26c>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	e002      	b.n	8000b9c <HAL_UART_RxCpltCallback+0x108>
				}
				else
				{
					node_tong_to_node_1_error=0;
 8000b96:	4b5a      	ldr	r3, [pc, #360]	@ (8000d00 <HAL_UART_RxCpltCallback+0x26c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
				}
				if(check_disconnected (2)==0 && ppm2_time_temp!=0)
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f7ff fe97 	bl	80008d0 <check_disconnected>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d107      	bne.n	8000bb8 <HAL_UART_RxCpltCallback+0x124>
 8000ba8:	4b51      	ldr	r3, [pc, #324]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x25c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_UART_RxCpltCallback+0x124>
				{
					node_tong_to_node_2_error =1;
 8000bb0:	4b54      	ldr	r3, [pc, #336]	@ (8000d04 <HAL_UART_RxCpltCallback+0x270>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e002      	b.n	8000bbe <HAL_UART_RxCpltCallback+0x12a>
				}
				else
				{
					node_tong_to_node_2_error=0;
 8000bb8:	4b52      	ldr	r3, [pc, #328]	@ (8000d04 <HAL_UART_RxCpltCallback+0x270>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
				}
				// Dữ liệu phải cập nhật (tức là không có lỗi đươgnf truyền từ node đo lên node tổng) thì mới gửi AA
				if((check_disconnected (1)==1 || ppm1_time_temp==0) && (check_disconnected (2)==1 || ppm2_time_temp==0))  // 1 trong 2 đúng ( cập nhật)
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fe86 	bl	80008d0 <check_disconnected>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d003      	beq.n	8000bd2 <HAL_UART_RxCpltCallback+0x13e>
 8000bca:	4b47      	ldr	r3, [pc, #284]	@ (8000ce8 <HAL_UART_RxCpltCallback+0x254>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d166      	bne.n	8000ca0 <HAL_UART_RxCpltCallback+0x20c>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff fe7c 	bl	80008d0 <check_disconnected>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d003      	beq.n	8000be6 <HAL_UART_RxCpltCallback+0x152>
 8000bde:	4b44      	ldr	r3, [pc, #272]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x25c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d15c      	bne.n	8000ca0 <HAL_UART_RxCpltCallback+0x20c>
				{
					RS485_SendCommand(0x11, 0xAA);
 8000be6:	21aa      	movs	r1, #170	@ 0xaa
 8000be8:	2011      	movs	r0, #17
 8000bea:	f7ff fb25 	bl	8000238 <RS485_SendCommand>
				if((check_disconnected (1)==1 || ppm1_time_temp==0) && (check_disconnected (2)==1 || ppm2_time_temp==0))  // 1 trong 2 đúng ( cập nhật)
 8000bee:	e057      	b.n	8000ca0 <HAL_UART_RxCpltCallback+0x20c>
				}
        	 }
        	 else if(RS_rxBuffer[3] == '0' && RS_rxBuffer[4] == '3') // nhan nhieu du lieu
 8000bf0:	4b36      	ldr	r3, [pc, #216]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000bf2:	78db      	ldrb	r3, [r3, #3]
 8000bf4:	2b30      	cmp	r3, #48	@ 0x30
 8000bf6:	d111      	bne.n	8000c1c <HAL_UART_RxCpltCallback+0x188>
 8000bf8:	4b34      	ldr	r3, [pc, #208]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	2b33      	cmp	r3, #51	@ 0x33
 8000bfe:	d10d      	bne.n	8000c1c <HAL_UART_RxCpltCallback+0x188>
        	 {
        		 HAL_TIM_Base_Stop_IT(&htim2);
 8000c00:	4837      	ldr	r0, [pc, #220]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x24c>)
 8000c02:	f003 f961 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
        		 USB_data_miss_to_send();
 8000c06:	f7ff fcb9 	bl	800057c <USB_data_miss_to_send>
				CDC_Transmit_FS(USB_txbuffer, 40); // gui qua USB
 8000c0a:	2128      	movs	r1, #40	@ 0x28
 8000c0c:	483b      	ldr	r0, [pc, #236]	@ (8000cfc <HAL_UART_RxCpltCallback+0x268>)
 8000c0e:	f008 fb37 	bl	8009280 <CDC_Transmit_FS>
         		RS485_SendCommand(0x11, 0xBB); // gui ve node do la da luu thanh cong
 8000c12:	21bb      	movs	r1, #187	@ 0xbb
 8000c14:	2011      	movs	r0, #17
 8000c16:	f7ff fb0f 	bl	8000238 <RS485_SendCommand>
 8000c1a:	e042      	b.n	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
        	 }
        	 else if(RS_rxBuffer[3] == '2' && RS_rxBuffer[4] == '1')
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c1e:	78db      	ldrb	r3, [r3, #3]
 8000c20:	2b32      	cmp	r3, #50	@ 0x32
 8000c22:	d111      	bne.n	8000c48 <HAL_UART_RxCpltCallback+0x1b4>
 8000c24:	4b29      	ldr	r3, [pc, #164]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c26:	791b      	ldrb	r3, [r3, #4]
 8000c28:	2b31      	cmp	r3, #49	@ 0x31
 8000c2a:	d10d      	bne.n	8000c48 <HAL_UART_RxCpltCallback+0x1b4>
        	 {
        		 HAL_TIM_Base_Stop_IT(&htim2);
 8000c2c:	482c      	ldr	r0, [pc, #176]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x24c>)
 8000c2e:	f003 f94b 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
        		 USB_data_miss_to_send();
 8000c32:	f7ff fca3 	bl	800057c <USB_data_miss_to_send>
				CDC_Transmit_FS(USB_txbuffer, 40); // gui qua USB
 8000c36:	2128      	movs	r1, #40	@ 0x28
 8000c38:	4830      	ldr	r0, [pc, #192]	@ (8000cfc <HAL_UART_RxCpltCallback+0x268>)
 8000c3a:	f008 fb21 	bl	8009280 <CDC_Transmit_FS>
        		 RS485_SendCommand(0x11, 0xCC); // gui ve node do la da gui thanh cong 1 chuoi de con gui tiep
 8000c3e:	21cc      	movs	r1, #204	@ 0xcc
 8000c40:	2011      	movs	r0, #17
 8000c42:	f7ff faf9 	bl	8000238 <RS485_SendCommand>
 8000c46:	e02c      	b.n	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
        	 }
        	 else if(RS_rxBuffer[3] == '2' && RS_rxBuffer[4] == '2')
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c4a:	78db      	ldrb	r3, [r3, #3]
 8000c4c:	2b32      	cmp	r3, #50	@ 0x32
 8000c4e:	d111      	bne.n	8000c74 <HAL_UART_RxCpltCallback+0x1e0>
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	2b32      	cmp	r3, #50	@ 0x32
 8000c56:	d10d      	bne.n	8000c74 <HAL_UART_RxCpltCallback+0x1e0>
        	 {
        		 HAL_TIM_Base_Stop_IT(&htim2);
 8000c58:	4821      	ldr	r0, [pc, #132]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x24c>)
 8000c5a:	f003 f935 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
        		 USB_data_miss_to_send();
 8000c5e:	f7ff fc8d 	bl	800057c <USB_data_miss_to_send>
				CDC_Transmit_FS(USB_txbuffer,40 ); // gui qua USB
 8000c62:	2128      	movs	r1, #40	@ 0x28
 8000c64:	4825      	ldr	r0, [pc, #148]	@ (8000cfc <HAL_UART_RxCpltCallback+0x268>)
 8000c66:	f008 fb0b 	bl	8009280 <CDC_Transmit_FS>
        		 RS485_SendCommand(0x11, 0xDD); // gui ve node do la da gui thanh cong 1 chuoi de con gui tiep
 8000c6a:	21dd      	movs	r1, #221	@ 0xdd
 8000c6c:	2011      	movs	r0, #17
 8000c6e:	f7ff fae3 	bl	8000238 <RS485_SendCommand>
 8000c72:	e016      	b.n	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
        	 }
        	 else if(RS_rxBuffer[3] == '2' && RS_rxBuffer[4] == '3')
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c76:	78db      	ldrb	r3, [r3, #3]
 8000c78:	2b32      	cmp	r3, #50	@ 0x32
 8000c7a:	d112      	bne.n	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	2b33      	cmp	r3, #51	@ 0x33
 8000c82:	d10e      	bne.n	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
        	 {
        		 HAL_TIM_Base_Stop_IT(&htim2);
 8000c84:	4816      	ldr	r0, [pc, #88]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x24c>)
 8000c86:	f003 f91f 	bl	8003ec8 <HAL_TIM_Base_Stop_IT>
        		 USB_data_miss_to_send();
 8000c8a:	f7ff fc77 	bl	800057c <USB_data_miss_to_send>
				CDC_Transmit_FS(USB_txbuffer,40 ); // gui qua USB
 8000c8e:	2128      	movs	r1, #40	@ 0x28
 8000c90:	481a      	ldr	r0, [pc, #104]	@ (8000cfc <HAL_UART_RxCpltCallback+0x268>)
 8000c92:	f008 faf5 	bl	8009280 <CDC_Transmit_FS>
        		 RS485_SendCommand(0x11, 0xDD); // gui ve node do la da gui thanh cong 1 chuoi de con gui tiep
 8000c96:	21dd      	movs	r1, #221	@ 0xdd
 8000c98:	2011      	movs	r0, #17
 8000c9a:	f7ff facd 	bl	8000238 <RS485_SendCommand>
 8000c9e:	e000      	b.n	8000ca2 <HAL_UART_RxCpltCallback+0x20e>
				if((check_disconnected (1)==1 || ppm1_time_temp==0) && (check_disconnected (2)==1 || ppm2_time_temp==0))  // 1 trong 2 đúng ( cập nhật)
 8000ca0:	bf00      	nop
        	 }
           }
    	}
 		rs_inx=0;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
 		memset(RS_rxBuffer,0,sizeof(RS_rxBuffer));
 8000ca8:	2228      	movs	r2, #40	@ 0x28
 8000caa:	2100      	movs	r1, #0
 8000cac:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000cae:	f008 ff69 	bl	8009b84 <memset>
     }
        // Tiếp tục nhận
        HAL_UART_Receive_IT(&huart1,rs_temp, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4904      	ldr	r1, [pc, #16]	@ (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000cb6:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <HAL_UART_RxCpltCallback+0x274>)
 8000cb8:	f003 fd5f 	bl	800477a <HAL_UART_Receive_IT>
    }
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	20000254 	.word	0x20000254
 8000ccc:	2000022c 	.word	0x2000022c
 8000cd0:	20000256 	.word	0x20000256
 8000cd4:	2000024d 	.word	0x2000024d
 8000cd8:	2000022d 	.word	0x2000022d
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000280 	.word	0x20000280
 8000ce4:	20000268 	.word	0x20000268
 8000ce8:	2000027c 	.word	0x2000027c
 8000cec:	2000026c 	.word	0x2000026c
 8000cf0:	20000278 	.word	0x20000278
 8000cf4:	20000258 	.word	0x20000258
 8000cf8:	20000260 	.word	0x20000260
 8000cfc:	200001f8 	.word	0x200001f8
 8000d00:	20000270 	.word	0x20000270
 8000d04:	20000274 	.word	0x20000274
 8000d08:	200002c8 	.word	0x200002c8

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fa6c 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f818 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 f8ea 	bl	8000ef0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d1c:	f000 f8be 	bl	8000e9c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000d20:	f008 f9ba 	bl	8009098 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000d24:	f000 f86c 	bl	8000e00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rs_temp, 1); // nhận dữ liệu từ node đo
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4904      	ldr	r1, [pc, #16]	@ (8000d3c <main+0x30>)
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <main+0x34>)
 8000d2e:	f003 fd24 	bl	800477a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d32:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <main+0x38>)
 8000d34:	f003 f876 	bl	8003e24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <main+0x2c>
 8000d3c:	20000254 	.word	0x20000254
 8000d40:	200002c8 	.word	0x200002c8
 8000d44:	20000280 	.word	0x20000280

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	@ 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d52:	2228      	movs	r2, #40	@ 0x28
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f008 ff14 	bl	8009b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d94:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fb2a 	bl	80033f8 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000daa:	f000 f8c3 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 fd96 	bl	80038fc <HAL_RCC_ClockConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dd6:	f000 f8ad 	bl	8000f34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000dde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000de2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 ff16 	bl	8003c18 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000df2:	f000 f89f 	bl	8000f34 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3750      	adds	r7, #80	@ 0x50
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e26:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e34:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000e38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e46:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e48:	f002 ff9c 	bl	8003d84 <HAL_TIM_Base_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e52:	f000 f86f 	bl	8000f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e64:	f003 f94e 	bl	8004104 <HAL_TIM_ConfigClockSource>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e6e:	f000 f861 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <MX_TIM2_Init+0x98>)
 8000e80:	f003 fb30 	bl	80044e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e8a:	f000 f853 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000280 	.word	0x20000280

08000e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <MX_USART1_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	f003 fb76 	bl	80045c4 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 f829 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200002c8 	.word	0x200002c8
 8000eec:	40013800 	.word	0x40013800

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <MX_GPIO_Init+0x40>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <MX_GPIO_Init+0x40>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <MX_GPIO_Init+0x40>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <MX_GPIO_Init+0x40>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <MX_GPIO_Init+0x40>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <MX_GPIO_Init+0x40>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <HAL_MspInit+0x5c>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <HAL_MspInit+0x5c>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6193      	str	r3, [r2, #24]
 8000f52:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_MspInit+0x5c>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <HAL_MspInit+0x5c>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <HAL_MspInit+0x5c>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <HAL_MspInit+0x5c>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_MspInit+0x60>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <HAL_MspInit+0x60>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000

08000fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fb4:	d113      	bne.n	8000fde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	201c      	movs	r0, #28
 8000fd4:	f000 fa43 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd8:	201c      	movs	r0, #28
 8000fda:	f000 fa5c 	bl	8001496 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a20      	ldr	r2, [pc, #128]	@ (8001088 <HAL_UART_MspInit+0x9c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d139      	bne.n	8001080 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HAL_UART_MspInit+0xa0>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a1e      	ldr	r2, [pc, #120]	@ (800108c <HAL_UART_MspInit+0xa0>)
 8001012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <HAL_UART_MspInit+0xa0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_UART_MspInit+0xa0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a18      	ldr	r2, [pc, #96]	@ (800108c <HAL_UART_MspInit+0xa0>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_UART_MspInit+0xa0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800103c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001040:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	480f      	ldr	r0, [pc, #60]	@ (8001090 <HAL_UART_MspInit+0xa4>)
 8001052:	f000 faed 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	4809      	ldr	r0, [pc, #36]	@ (8001090 <HAL_UART_MspInit+0xa4>)
 800106c:	f000 fae0 	bl	8001630 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2025      	movs	r0, #37	@ 0x25
 8001076:	f000 f9f2 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800107a:	2025      	movs	r0, #37	@ 0x25
 800107c:	f000 fa0b 	bl	8001496 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40013800 	.word	0x40013800
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <MemManage_Handler+0x4>

080010ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <UsageFault_Handler+0x4>

080010bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 f8c8 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010f2:	f000 fd3d 	bl	8001b70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000fe0 	.word	0x20000fe0

08001100 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <TIM2_IRQHandler+0x10>)
 8001106:	f002 ff0d 	bl	8003f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000280 	.word	0x20000280

08001114 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <USART1_IRQHandler+0x10>)
 800111a:	f003 fb53 	bl	80047c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002c8 	.word	0x200002c8

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f008 fd1c 	bl	8009b94 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	@ (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20005000 	.word	0x20005000
 8001188:	00000400 	.word	0x00000400
 800118c:	20000310 	.word	0x20000310
 8001190:	20001620 	.word	0x20001620

08001194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a0:	f7ff fff8 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011a6:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011a8:	4a0c      	ldr	r2, [pc, #48]	@ (80011dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a09      	ldr	r2, [pc, #36]	@ (80011e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011bc:	4c09      	ldr	r4, [pc, #36]	@ (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f008 fce9 	bl	8009ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ce:	f7ff fd9d 	bl	8000d0c <main>
  bx lr
 80011d2:	4770      	bx	lr
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80011dc:	0800a6b0 	.word	0x0800a6b0
  ldr r2, =_sbss
 80011e0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80011e4:	20001620 	.word	0x20001620

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_2_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_Init+0x28>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_Init+0x28>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f923 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fe9a 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f93b 	bl	80014b2 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 f903 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000004 	.word	0x20000004
 8001270:	2000000c 	.word	0x2000000c
 8001274:	20000008 	.word	0x20000008

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_IncTick+0x1c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_IncTick+0x20>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a03      	ldr	r2, [pc, #12]	@ (8001298 <HAL_IncTick+0x20>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20000314 	.word	0x20000314

0800129c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b02      	ldr	r3, [pc, #8]	@ (80012ac <HAL_GetTick+0x10>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000314 	.word	0x20000314

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4906      	ldr	r1, [pc, #24]	@ (8001348 <__NVIC_EnableIRQ+0x34>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	@ (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff90 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff2d 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff42 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff90 	bl	80013a0 <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5f 	bl	800134c <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff35 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa2 	bl	8001404 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d008      	beq.n	80014f4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2204      	movs	r2, #4
 80014e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e020      	b.n	8001536 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 020e 	bic.w	r2, r2, #14
 8001502:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800151c:	2101      	movs	r1, #1
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d005      	beq.n	8001564 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e051      	b.n	8001608 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020e 	bic.w	r2, r2, #14
 8001572:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a22      	ldr	r2, [pc, #136]	@ (8001614 <HAL_DMA_Abort_IT+0xd4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d029      	beq.n	80015e2 <HAL_DMA_Abort_IT+0xa2>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a21      	ldr	r2, [pc, #132]	@ (8001618 <HAL_DMA_Abort_IT+0xd8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d022      	beq.n	80015de <HAL_DMA_Abort_IT+0x9e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1f      	ldr	r2, [pc, #124]	@ (800161c <HAL_DMA_Abort_IT+0xdc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01a      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x98>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <HAL_DMA_Abort_IT+0xe0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d012      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x92>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <HAL_DMA_Abort_IT+0xe4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00a      	beq.n	80015cc <HAL_DMA_Abort_IT+0x8c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <HAL_DMA_Abort_IT+0xe8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d102      	bne.n	80015c6 <HAL_DMA_Abort_IT+0x86>
 80015c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015c4:	e00e      	b.n	80015e4 <HAL_DMA_Abort_IT+0xa4>
 80015c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015ca:	e00b      	b.n	80015e4 <HAL_DMA_Abort_IT+0xa4>
 80015cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d0:	e008      	b.n	80015e4 <HAL_DMA_Abort_IT+0xa4>
 80015d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d6:	e005      	b.n	80015e4 <HAL_DMA_Abort_IT+0xa4>
 80015d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015dc:	e002      	b.n	80015e4 <HAL_DMA_Abort_IT+0xa4>
 80015de:	2310      	movs	r3, #16
 80015e0:	e000      	b.n	80015e4 <HAL_DMA_Abort_IT+0xa4>
 80015e2:	2301      	movs	r3, #1
 80015e4:	4a11      	ldr	r2, [pc, #68]	@ (800162c <HAL_DMA_Abort_IT+0xec>)
 80015e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
    } 
  }
  return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40020008 	.word	0x40020008
 8001618:	4002001c 	.word	0x4002001c
 800161c:	40020030 	.word	0x40020030
 8001620:	40020044 	.word	0x40020044
 8001624:	40020058 	.word	0x40020058
 8001628:	4002006c 	.word	0x4002006c
 800162c:	40020000 	.word	0x40020000

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b08b      	sub	sp, #44	@ 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	e169      	b.n	8001918 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001644:	2201      	movs	r2, #1
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8158 	bne.w	8001912 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a9a      	ldr	r2, [pc, #616]	@ (80018d0 <HAL_GPIO_Init+0x2a0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d05e      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800166c:	4a98      	ldr	r2, [pc, #608]	@ (80018d0 <HAL_GPIO_Init+0x2a0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d875      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001672:	4a98      	ldr	r2, [pc, #608]	@ (80018d4 <HAL_GPIO_Init+0x2a4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d058      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001678:	4a96      	ldr	r2, [pc, #600]	@ (80018d4 <HAL_GPIO_Init+0x2a4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d86f      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800167e:	4a96      	ldr	r2, [pc, #600]	@ (80018d8 <HAL_GPIO_Init+0x2a8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d052      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001684:	4a94      	ldr	r2, [pc, #592]	@ (80018d8 <HAL_GPIO_Init+0x2a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d869      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800168a:	4a94      	ldr	r2, [pc, #592]	@ (80018dc <HAL_GPIO_Init+0x2ac>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d04c      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001690:	4a92      	ldr	r2, [pc, #584]	@ (80018dc <HAL_GPIO_Init+0x2ac>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d863      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001696:	4a92      	ldr	r2, [pc, #584]	@ (80018e0 <HAL_GPIO_Init+0x2b0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d046      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800169c:	4a90      	ldr	r2, [pc, #576]	@ (80018e0 <HAL_GPIO_Init+0x2b0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d85d      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d82a      	bhi.n	80016fc <HAL_GPIO_Init+0xcc>
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d859      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016aa:	a201      	add	r2, pc, #4	@ (adr r2, 80016b0 <HAL_GPIO_Init+0x80>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	0800172b 	.word	0x0800172b
 80016b4:	08001705 	.word	0x08001705
 80016b8:	08001717 	.word	0x08001717
 80016bc:	08001759 	.word	0x08001759
 80016c0:	0800175f 	.word	0x0800175f
 80016c4:	0800175f 	.word	0x0800175f
 80016c8:	0800175f 	.word	0x0800175f
 80016cc:	0800175f 	.word	0x0800175f
 80016d0:	0800175f 	.word	0x0800175f
 80016d4:	0800175f 	.word	0x0800175f
 80016d8:	0800175f 	.word	0x0800175f
 80016dc:	0800175f 	.word	0x0800175f
 80016e0:	0800175f 	.word	0x0800175f
 80016e4:	0800175f 	.word	0x0800175f
 80016e8:	0800175f 	.word	0x0800175f
 80016ec:	0800175f 	.word	0x0800175f
 80016f0:	0800175f 	.word	0x0800175f
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	08001721 	.word	0x08001721
 80016fc:	4a79      	ldr	r2, [pc, #484]	@ (80018e4 <HAL_GPIO_Init+0x2b4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001702:	e02c      	b.n	800175e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e029      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e024      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	3308      	adds	r3, #8
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e01f      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	330c      	adds	r3, #12
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	e01a      	b.n	8001760 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001732:	2304      	movs	r3, #4
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e013      	b.n	8001760 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001740:	2308      	movs	r3, #8
 8001742:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	611a      	str	r2, [r3, #16]
          break;
 800174a:	e009      	b.n	8001760 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	615a      	str	r2, [r3, #20]
          break;
 8001756:	e003      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x130>
          break;
 800175e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2bff      	cmp	r3, #255	@ 0xff
 8001764:	d801      	bhi.n	800176a <HAL_GPIO_Init+0x13a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	e001      	b.n	800176e <HAL_GPIO_Init+0x13e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	@ 0xff
 8001774:	d802      	bhi.n	800177c <HAL_GPIO_Init+0x14c>
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0x152>
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	3b08      	subs	r3, #8
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	210f      	movs	r1, #15
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	401a      	ands	r2, r3
 8001794:	6a39      	ldr	r1, [r7, #32]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	431a      	orrs	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80b1 	beq.w	8001912 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017b0:	4b4d      	ldr	r3, [pc, #308]	@ (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	@ (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b4a      	ldr	r3, [pc, #296]	@ (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c8:	4a48      	ldr	r2, [pc, #288]	@ (80018ec <HAL_GPIO_Init+0x2bc>)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a40      	ldr	r2, [pc, #256]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_GPIO_Init+0x1ec>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3f      	ldr	r2, [pc, #252]	@ (80018f4 <HAL_GPIO_Init+0x2c4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00d      	beq.n	8001818 <HAL_GPIO_Init+0x1e8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3e      	ldr	r2, [pc, #248]	@ (80018f8 <HAL_GPIO_Init+0x2c8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d007      	beq.n	8001814 <HAL_GPIO_Init+0x1e4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3d      	ldr	r2, [pc, #244]	@ (80018fc <HAL_GPIO_Init+0x2cc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_GPIO_Init+0x1e0>
 800180c:	2303      	movs	r3, #3
 800180e:	e006      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001810:	2304      	movs	r3, #4
 8001812:	e004      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001814:	2302      	movs	r3, #2
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 800181c:	2300      	movs	r3, #0
 800181e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001820:	f002 0203 	and.w	r2, r2, #3
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	4093      	lsls	r3, r2
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182e:	492f      	ldr	r1, [pc, #188]	@ (80018ec <HAL_GPIO_Init+0x2bc>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001848:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	492c      	ldr	r1, [pc, #176]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001856:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	4928      	ldr	r1, [pc, #160]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 8001860:	4013      	ands	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001870:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4922      	ldr	r1, [pc, #136]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	491e      	ldr	r1, [pc, #120]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 8001888:	4013      	ands	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4918      	ldr	r1, [pc, #96]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4914      	ldr	r1, [pc, #80]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d021      	beq.n	8001904 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	490e      	ldr	r1, [pc, #56]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e021      	b.n	8001912 <HAL_GPIO_Init+0x2e2>
 80018ce:	bf00      	nop
 80018d0:	10320000 	.word	0x10320000
 80018d4:	10310000 	.word	0x10310000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	10210000 	.word	0x10210000
 80018e0:	10120000 	.word	0x10120000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40011400 	.word	0x40011400
 8001900:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_GPIO_Init+0x304>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43db      	mvns	r3, r3
 800190c:	4909      	ldr	r1, [pc, #36]	@ (8001934 <HAL_GPIO_Init+0x304>)
 800190e:	4013      	ands	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	3301      	adds	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f47f ae8e 	bne.w	8001644 <HAL_GPIO_Init+0x14>
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	372c      	adds	r7, #44	@ 0x2c
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0e8      	b.n	8001b1c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f007 fdc2 	bl	80094e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fcb1 	bl	80052de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001986:	f003 fc87 	bl	8005298 <USB_CoreInit>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0bf      	b.n	8001b1c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fcb5 	bl	8005312 <USB_SetCurrentMode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0b0      	b.n	8001b1c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	e03e      	b.n	8001a3e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3311      	adds	r3, #17
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	3310      	adds	r3, #16
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3313      	adds	r3, #19
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3320      	adds	r3, #32
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3324      	adds	r3, #36	@ 0x24
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3bb      	bcc.n	80019c0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e044      	b.n	8001ad8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d3b5      	bcc.n	8001a4e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aec:	f003 fc1d 	bl	800532a <USB_DevInit>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00c      	b.n	8001b1c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f005 fe9c 	bl	8007852 <USB_DevDisconnect>

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_PCD_Start+0x16>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e016      	b.n	8001b68 <HAL_PCD_Start+0x44>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fbb3 	bl	80052b2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f007 ff3d 	bl	80099ce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f005 fe70 	bl	800783e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 fe72 	bl	8007866 <USB_ReadInterrupts>
 8001b82:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fb1a 	bl	80021c8 <PCD_EP_ISR_Handler>

    return;
 8001b94:	e119      	b.n	8001dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bb2:	b292      	uxth	r2, r2
 8001bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f007 fd10 	bl	80095de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f905 	bl	8001dd0 <HAL_PCD_SetAddress>

    return;
 8001bc6:	e100      	b.n	8001dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001be4:	b292      	uxth	r2, r2
 8001be6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001bea:	e0ee      	b.n	8001dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00c      	beq.n	8001c10 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c0e:	e0dc      	b.n	8001dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d027      	beq.n	8001c6a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0204 	bic.w	r2, r2, #4
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0208 	bic.w	r2, r2, #8
 8001c44:	b292      	uxth	r2, r2
 8001c46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f007 fd00 	bl	8009650 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c62:	b292      	uxth	r2, r2
 8001c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c68:	e0af      	b.n	8001dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8083 	beq.w	8001d7c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	77fb      	strb	r3, [r7, #31]
 8001c7a:	e010      	b.n	8001c9e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	441a      	add	r2, r3
 8001c88:	7ffb      	ldrb	r3, [r7, #31]
 8001c8a:	8812      	ldrh	r2, [r2, #0]
 8001c8c:	b292      	uxth	r2, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	3320      	adds	r3, #32
 8001c92:	443b      	add	r3, r7
 8001c94:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001c98:	7ffb      	ldrb	r3, [r7, #31]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	77fb      	strb	r3, [r7, #31]
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	2b07      	cmp	r3, #7
 8001ca2:	d9eb      	bls.n	8001c7c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	b292      	uxth	r2, r2
 8001cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	b292      	uxth	r2, r2
 8001cd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cd4:	bf00      	nop
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f6      	beq.n	8001cd6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	77fb      	strb	r3, [r7, #31]
 8001d04:	e00f      	b.n	8001d26 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	7ffa      	ldrb	r2, [r7, #31]
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	440a      	add	r2, r1
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	3320      	adds	r3, #32
 8001d18:	443b      	add	r3, r7
 8001d1a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d1e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d20:	7ffb      	ldrb	r3, [r7, #31]
 8001d22:	3301      	adds	r3, #1
 8001d24:	77fb      	strb	r3, [r7, #31]
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b07      	cmp	r3, #7
 8001d2a:	d9ec      	bls.n	8001d06 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0208 	orr.w	r2, r2, #8
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d56:	b292      	uxth	r2, r2
 8001d58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0204 	orr.w	r2, r2, #4
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f007 fc51 	bl	800961c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d7a:	e026      	b.n	8001dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00f      	beq.n	8001da6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f007 fc0f 	bl	80095c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001da4:	e011      	b.n	8001dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00c      	beq.n	8001dca <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc2:	b292      	uxth	r2, r2
 8001dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001dc8:	bf00      	nop
  }
}
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_PCD_SetAddress+0x1a>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e012      	b.n	8001e10 <HAL_PCD_SetAddress+0x40>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f005 fd09 	bl	8007818 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	4608      	mov	r0, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	70fb      	strb	r3, [r7, #3]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	803b      	strh	r3, [r7, #0]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da0e      	bge.n	8001e5c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 0207 	and.w	r2, r3, #7
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	3310      	adds	r3, #16
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	705a      	strb	r2, [r3, #1]
 8001e5a:	e00e      	b.n	8001e7a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 0207 	and.w	r2, r3, #7
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e86:	883a      	ldrh	r2, [r7, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	78ba      	ldrb	r2, [r7, #2]
 8001e90:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e92:	78bb      	ldrb	r3, [r7, #2]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_PCD_EP_Open+0x94>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e00e      	b.n	8001eca <HAL_PCD_EP_Open+0xb2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68f9      	ldr	r1, [r7, #12]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fa52 	bl	8005364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da0e      	bge.n	8001f04 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 0207 	and.w	r2, r3, #7
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	705a      	strb	r2, [r3, #1]
 8001f02:	e00e      	b.n	8001f22 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 0207 	and.w	r2, r3, #7
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_PCD_EP_Close+0x6a>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e00e      	b.n	8001f5a <HAL_PCD_EP_Close+0x88>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fdca 	bl	8005ae4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f72:	7afb      	ldrb	r3, [r7, #11]
 8001f74:	f003 0207 	and.w	r2, r3, #7
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6979      	ldr	r1, [r7, #20]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f003 ff81 	bl	8005ebc <USB_EPStartXfer>

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 0207 	and.w	r2, r3, #7
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	460b      	mov	r3, r1
 8002000:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002002:	7afb      	ldrb	r3, [r7, #11]
 8002004:	f003 0207 	and.w	r2, r3, #7
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	3310      	adds	r3, #16
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4413      	add	r3, r2
 8002016:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2200      	movs	r2, #0
 8002036:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2201      	movs	r2, #1
 800203c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203e:	7afb      	ldrb	r3, [r7, #11]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	b2da      	uxtb	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	4618      	mov	r0, r3
 8002052:	f003 ff33 	bl	8005ebc <USB_EPStartXfer>

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	7912      	ldrb	r2, [r2, #4]
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e04c      	b.n	8002118 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800207e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002082:	2b00      	cmp	r3, #0
 8002084:	da0e      	bge.n	80020a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 0207 	and.w	r2, r3, #7
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	3310      	adds	r3, #16
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	705a      	strb	r2, [r3, #1]
 80020a2:	e00c      	b.n	80020be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_PCD_EP_SetStall+0x7e>
 80020da:	2302      	movs	r3, #2
 80020dc:	e01c      	b.n	8002118 <HAL_PCD_EP_SetStall+0xb8>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f005 fa96 	bl	800761e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f005 fbbb 	bl	8007884 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	7912      	ldrb	r2, [r2, #4]
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e040      	b.n	80021c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800213e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da0e      	bge.n	8002164 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 0207 	and.w	r2, r3, #7
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	3310      	adds	r3, #16
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	705a      	strb	r2, [r3, #1]
 8002162:	e00e      	b.n	8002182 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	f003 0207 	and.w	r2, r3, #7
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_PCD_EP_ClrStall+0x82>
 800219e:	2302      	movs	r3, #2
 80021a0:	e00e      	b.n	80021c0 <HAL_PCD_EP_ClrStall+0xa0>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f005 fa84 	bl	80076be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b096      	sub	sp, #88	@ 0x58
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021d0:	e3bb      	b.n	800294a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80021ec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 8175 	bne.w	80024e0 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d14e      	bne.n	80022a0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800220e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002212:	81fb      	strh	r3, [r7, #14]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29b      	uxth	r3, r3
 8002224:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3310      	adds	r3, #16
 800222a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	3302      	adds	r3, #2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002256:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	441a      	add	r2, r3
 8002262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002264:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f007 f990 	bl	800958e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7b5b      	ldrb	r3, [r3, #13]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8368 	beq.w	800294a <PCD_EP_ISR_Handler+0x782>
 800227a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 8363 	bne.w	800294a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7b5b      	ldrb	r3, [r3, #13]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800228e:	b2da      	uxtb	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	735a      	strb	r2, [r3, #13]
 800229e:	e354      	b.n	800294a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022a6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d034      	beq.n	8002328 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	3306      	adds	r3, #6
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80022f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f005 fb11 	bl	8007924 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29a      	uxth	r2, r3
 800230a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800230e:	4013      	ands	r3, r2
 8002310:	823b      	strh	r3, [r7, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	8a3a      	ldrh	r2, [r7, #16]
 8002318:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800231c:	b292      	uxth	r2, r2
 800231e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f007 f907 	bl	8009534 <HAL_PCD_SetupStageCallback>
 8002326:	e310      	b.n	800294a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002328:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800232c:	2b00      	cmp	r3, #0
 800232e:	f280 830c 	bge.w	800294a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29a      	uxth	r2, r3
 800233a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800233e:	4013      	ands	r3, r2
 8002340:	83fb      	strh	r3, [r7, #30]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	8bfa      	ldrh	r2, [r7, #30]
 8002348:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800234c:	b292      	uxth	r2, r2
 800234e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	3306      	adds	r3, #6
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800237c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d019      	beq.n	80023b8 <PCD_EP_ISR_Handler+0x1f0>
 8002384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002392:	6959      	ldr	r1, [r3, #20]
 8002394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002396:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800239a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800239c:	b29b      	uxth	r3, r3
 800239e:	f005 fac1 	bl	8007924 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	441a      	add	r2, r3
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023b0:	2100      	movs	r1, #0
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f007 f8d0 	bl	8009558 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80023c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 82bd 	bne.w	800294a <PCD_EP_ISR_Handler+0x782>
 80023d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023d4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80023d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80023dc:	f000 82b5 	beq.w	800294a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4413      	add	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240a:	b29a      	uxth	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	801a      	strh	r2, [r3, #0]
 8002410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b3e      	cmp	r3, #62	@ 0x3e
 8002416:	d91d      	bls.n	8002454 <PCD_EP_ISR_Handler+0x28c>
 8002418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <PCD_EP_ISR_Handler+0x26a>
 800242c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800242e:	3b01      	subs	r3, #1
 8002430:	647b      	str	r3, [r7, #68]	@ 0x44
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29a      	uxth	r2, r3
 8002438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800243a:	b29b      	uxth	r3, r3
 800243c:	029b      	lsls	r3, r3, #10
 800243e:	b29b      	uxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b29b      	uxth	r3, r3
 8002444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244c:	b29a      	uxth	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	e026      	b.n	80024a2 <PCD_EP_ISR_Handler+0x2da>
 8002454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <PCD_EP_ISR_Handler+0x2aa>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800246a:	b29a      	uxth	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	801a      	strh	r2, [r3, #0]
 8002470:	e017      	b.n	80024a2 <PCD_EP_ISR_Handler+0x2da>
 8002472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	647b      	str	r3, [r7, #68]	@ 0x44
 800247a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <PCD_EP_ISR_Handler+0x2c4>
 8002486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002488:	3301      	adds	r3, #1
 800248a:	647b      	str	r3, [r7, #68]	@ 0x44
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29a      	uxth	r2, r3
 8002492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002494:	b29b      	uxth	r3, r3
 8002496:	029b      	lsls	r3, r3, #10
 8002498:	b29b      	uxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b29a      	uxth	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024b2:	827b      	strh	r3, [r7, #18]
 80024b4:	8a7b      	ldrh	r3, [r7, #18]
 80024b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80024ba:	827b      	strh	r3, [r7, #18]
 80024bc:	8a7b      	ldrh	r3, [r7, #18]
 80024be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80024c2:	827b      	strh	r3, [r7, #18]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	8a7b      	ldrh	r3, [r7, #18]
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]
 80024de:	e234      	b.n	800294a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f280 80fc 	bge.w	80026f6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29a      	uxth	r2, r3
 8002510:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002514:	4013      	ands	r3, r2
 8002516:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800252c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002530:	b292      	uxth	r2, r2
 8002532:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002534:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800254a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254c:	7b1b      	ldrb	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d125      	bne.n	800259e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	3306      	adds	r3, #6
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800257e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8092 	beq.w	80026ac <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258e:	6959      	ldr	r1, [r3, #20]
 8002590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002592:	88da      	ldrh	r2, [r3, #6]
 8002594:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002598:	f005 f9c4 	bl	8007924 <USB_ReadPMA>
 800259c:	e086      	b.n	80026ac <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800259e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a0:	78db      	ldrb	r3, [r3, #3]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d10a      	bne.n	80025bc <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025aa:	461a      	mov	r2, r3
 80025ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f9d9 	bl	8002966 <HAL_PCD_EP_DB_Receive>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80025ba:	e077      	b.n	80026ac <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025d6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	441a      	add	r2, r3
 80025e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80025ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d024      	beq.n	8002664 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	3302      	adds	r3, #2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002642:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002646:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800264a:	2b00      	cmp	r3, #0
 800264c:	d02e      	beq.n	80026ac <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002654:	6959      	ldr	r1, [r3, #20]
 8002656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002658:	891a      	ldrh	r2, [r3, #8]
 800265a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800265e:	f005 f961 	bl	8007924 <USB_ReadPMA>
 8002662:	e023      	b.n	80026ac <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	3306      	adds	r3, #6
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002690:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269e:	6959      	ldr	r1, [r3, #20]
 80026a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a2:	895a      	ldrh	r2, [r3, #10]
 80026a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80026a8:	f005 f93c 	bl	8007924 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80026b4:	441a      	add	r2, r3
 80026b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80026c2:	441a      	add	r2, r3
 80026c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <PCD_EP_ISR_Handler+0x514>
 80026d0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80026d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d206      	bcs.n	80026ea <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f006 ff38 	bl	8009558 <HAL_PCD_DataOutStageCallback>
 80026e8:	e005      	b.n	80026f6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 fbe3 	bl	8005ebc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8123 	beq.w	800294a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002704:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	3310      	adds	r3, #16
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800272e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002732:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	441a      	add	r2, r3
 8002744:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002756:	78db      	ldrb	r3, [r3, #3]
 8002758:	2b01      	cmp	r3, #1
 800275a:	f040 80a2 	bne.w	80028a2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800275e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002766:	7b1b      	ldrb	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8093 	beq.w	8002894 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800276e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d046      	beq.n	8002808 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800277a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d126      	bne.n	80027d0 <PCD_EP_ISR_Handler+0x608>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	627b      	str	r3, [r7, #36]	@ 0x24
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	4413      	add	r3, r2
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
 800279a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	011a      	lsls	r2, r3, #4
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	4413      	add	r3, r2
 80027a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027a8:	623b      	str	r3, [r7, #32]
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	e061      	b.n	8002894 <PCD_EP_ISR_Handler+0x6cc>
 80027d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d15d      	bne.n	8002894 <PCD_EP_ISR_Handler+0x6cc>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	4413      	add	r3, r2
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	011a      	lsls	r2, r3, #4
 80027f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f8:	4413      	add	r3, r2
 80027fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	2200      	movs	r2, #0
 8002804:	801a      	strh	r2, [r3, #0]
 8002806:	e045      	b.n	8002894 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800280e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d126      	bne.n	8002864 <PCD_EP_ISR_Handler+0x69c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	637b      	str	r3, [r7, #52]	@ 0x34
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282a:	4413      	add	r3, r2
 800282c:	637b      	str	r3, [r7, #52]	@ 0x34
 800282e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	011a      	lsls	r2, r3, #4
 8002834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002836:	4413      	add	r3, r2
 8002838:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800283c:	633b      	str	r3, [r7, #48]	@ 0x30
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	b29a      	uxth	r2, r3
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285c:	b29a      	uxth	r2, r3
 800285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002860:	801a      	strh	r2, [r3, #0]
 8002862:	e017      	b.n	8002894 <PCD_EP_ISR_Handler+0x6cc>
 8002864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d113      	bne.n	8002894 <PCD_EP_ISR_Handler+0x6cc>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287a:	4413      	add	r3, r2
 800287c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800287e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	011a      	lsls	r2, r3, #4
 8002884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002886:	4413      	add	r3, r2
 8002888:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800288c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	2200      	movs	r2, #0
 8002892:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f006 fe77 	bl	800958e <HAL_PCD_DataInStageCallback>
 80028a0:	e053      	b.n	800294a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80028a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d146      	bne.n	800293c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	3302      	adds	r3, #2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80028da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d907      	bls.n	80028f6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80028e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80028ee:	1ad2      	subs	r2, r2, r3
 80028f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f2:	619a      	str	r2, [r3, #24]
 80028f4:	e002      	b.n	80028fc <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80028f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80028fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f006 fe3f 	bl	800958e <HAL_PCD_DataInStageCallback>
 8002910:	e01b      	b.n	800294a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800291a:	441a      	add	r2, r3
 800291c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002928:	441a      	add	r2, r3
 800292a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002934:	4618      	mov	r0, r3
 8002936:	f003 fac1 	bl	8005ebc <USB_EPStartXfer>
 800293a:	e006      	b.n	800294a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800293c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002940:	461a      	mov	r2, r3
 8002942:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f91b 	bl	8002b80 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002952:	b29b      	uxth	r3, r3
 8002954:	b21b      	sxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	f6ff ac3b 	blt.w	80021d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3758      	adds	r7, #88	@ 0x58
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b088      	sub	sp, #32
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	4613      	mov	r3, r2
 8002972:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d07e      	beq.n	8002a7c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002986:	b29b      	uxth	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	3302      	adds	r3, #2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	8b7b      	ldrh	r3, [r7, #26]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d306      	bcc.n	80029c0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	8b7b      	ldrh	r3, [r7, #26]
 80029b8:	1ad2      	subs	r2, r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	619a      	str	r2, [r3, #24]
 80029be:	e002      	b.n	80029c6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d123      	bne.n	8002a16 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029e8:	833b      	strh	r3, [r7, #24]
 80029ea:	8b3b      	ldrh	r3, [r7, #24]
 80029ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80029f0:	833b      	strh	r3, [r7, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	8b3b      	ldrh	r3, [r7, #24]
 8002a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01f      	beq.n	8002a60 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3a:	82fb      	strh	r3, [r7, #22]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	441a      	add	r2, r3
 8002a4a:	8afb      	ldrh	r3, [r7, #22]
 8002a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a60:	8b7b      	ldrh	r3, [r7, #26]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8087 	beq.w	8002b76 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6959      	ldr	r1, [r3, #20]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	891a      	ldrh	r2, [r3, #8]
 8002a74:	8b7b      	ldrh	r3, [r7, #26]
 8002a76:	f004 ff55 	bl	8007924 <USB_ReadPMA>
 8002a7a:	e07c      	b.n	8002b76 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3306      	adds	r3, #6
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	8b7b      	ldrh	r3, [r7, #26]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d306      	bcc.n	8002abe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	8b7b      	ldrh	r3, [r7, #26]
 8002ab6:	1ad2      	subs	r2, r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	619a      	str	r2, [r3, #24]
 8002abc:	e002      	b.n	8002ac4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d123      	bne.n	8002b14 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae6:	83fb      	strh	r3, [r7, #30]
 8002ae8:	8bfb      	ldrh	r3, [r7, #30]
 8002aea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002aee:	83fb      	strh	r3, [r7, #30]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	8bfb      	ldrh	r3, [r7, #30]
 8002b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11f      	bne.n	8002b5e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b38:	83bb      	strh	r3, [r7, #28]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	441a      	add	r2, r3
 8002b48:	8bbb      	ldrh	r3, [r7, #28]
 8002b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b5e:	8b7b      	ldrh	r3, [r7, #26]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	6959      	ldr	r1, [r3, #20]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	895a      	ldrh	r2, [r3, #10]
 8002b70:	8b7b      	ldrh	r3, [r7, #26]
 8002b72:	f004 fed7 	bl	8007924 <USB_ReadPMA>
    }
  }

  return count;
 8002b76:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b0a4      	sub	sp, #144	@ 0x90
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 81dd 	beq.w	8002f54 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d907      	bls.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bda:	1ad2      	subs	r2, r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	619a      	str	r2, [r3, #24]
 8002be0:	e002      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 80b9 	bne.w	8002d64 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d126      	bne.n	8002c48 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0e:	4413      	add	r3, r2
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	011a      	lsls	r2, r3, #4
 8002c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c30:	801a      	strh	r2, [r3, #0]
 8002c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c44:	801a      	strh	r2, [r3, #0]
 8002c46:	e01a      	b.n	8002c7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d116      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	4413      	add	r3, r2
 8002c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	011a      	lsls	r2, r3, #4
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c70:	4413      	add	r3, r2
 8002c72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d126      	bne.n	8002cda <HAL_PCD_EP_DB_Transmit+0x15a>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	011a      	lsls	r2, r3, #4
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	801a      	strh	r2, [r3, #0]
 8002cd8:	e017      	b.n	8002d0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	785b      	ldrb	r3, [r3, #1]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d113      	bne.n	8002d0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	4413      	add	r3, r2
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	011a      	lsls	r2, r3, #4
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2200      	movs	r2, #0
 8002d08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f006 fc3c 	bl	800958e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 82fc 	beq.w	800331a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d3c:	82fb      	strh	r3, [r7, #22]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	441a      	add	r2, r3
 8002d4c:	8afb      	ldrh	r3, [r7, #22]
 8002d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	8013      	strh	r3, [r2, #0]
 8002d62:	e2da      	b.n	800331a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d021      	beq.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002da6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	f040 82ae 	bne.w	800331a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002dc6:	441a      	add	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002dd4:	441a      	add	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6a1a      	ldr	r2, [r3, #32]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d30b      	bcc.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002df6:	1ad2      	subs	r2, r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	621a      	str	r2, [r3, #32]
 8002dfc:	e017      	b.n	8002e2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d108      	bne.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002e06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e16:	e00a      	b.n	8002e2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d165      	bne.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x382>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4a:	4413      	add	r3, r2
 8002e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	011a      	lsls	r2, r3, #4
 8002e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e56:	4413      	add	r3, r2
 8002e58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e72:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e74:	d91d      	bls.n	8002eb2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x310>
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eae:	801a      	strh	r2, [r3, #0]
 8002eb0:	e044      	b.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x350>
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	801a      	strh	r2, [r3, #0]
 8002ece:	e035      	b.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_PCD_EP_DB_Transmit+0x36a>
 8002ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	029b      	lsls	r3, r3, #10
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	e01c      	b.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d118      	bne.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f1e:	4413      	add	r3, r2
 8002f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	011a      	lsls	r2, r3, #4
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6959      	ldr	r1, [r3, #20]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	891a      	ldrh	r2, [r3, #8]
 8002f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f004 fca4 	bl	800789a <USB_WritePMA>
 8002f52:	e1e2      	b.n	800331a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	3306      	adds	r3, #6
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d307      	bcc.n	8002f9c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f94:	1ad2      	subs	r2, r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	619a      	str	r2, [r3, #24]
 8002f9a:	e002      	b.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 80c0 	bne.w	800312c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d126      	bne.n	8003002 <HAL_PCD_EP_DB_Transmit+0x482>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fc8:	4413      	add	r3, r2
 8002fca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	011a      	lsls	r2, r3, #4
 8002fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	e01a      	b.n	8003038 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	785b      	ldrb	r3, [r3, #1]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d116      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003018:	b29b      	uxth	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800301e:	4413      	add	r3, r2
 8003020:	667b      	str	r3, [r7, #100]	@ 0x64
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	011a      	lsls	r2, r3, #4
 8003028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800302a:	4413      	add	r3, r2
 800302c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003030:	663b      	str	r3, [r7, #96]	@ 0x60
 8003032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003034:	2200      	movs	r2, #0
 8003036:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	677b      	str	r3, [r7, #116]	@ 0x74
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12b      	bne.n	800309e <HAL_PCD_EP_DB_Transmit+0x51e>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003054:	b29b      	uxth	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305a:	4413      	add	r3, r2
 800305c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	011a      	lsls	r2, r3, #4
 8003064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003066:	4413      	add	r3, r2
 8003068:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800306c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003070:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800307c:	b29a      	uxth	r2, r3
 800307e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003094:	b29a      	uxth	r2, r3
 8003096:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800309a:	801a      	strh	r2, [r3, #0]
 800309c:	e017      	b.n	80030ce <HAL_PCD_EP_DB_Transmit+0x54e>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d113      	bne.n	80030ce <HAL_PCD_EP_DB_Transmit+0x54e>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b4:	4413      	add	r3, r2
 80030b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	011a      	lsls	r2, r3, #4
 80030be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c0:	4413      	add	r3, r2
 80030c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80030c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ca:	2200      	movs	r2, #0
 80030cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f006 fa5a 	bl	800958e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 811a 	bne.w	800331a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003100:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800311a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800311e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003126:	b29b      	uxth	r3, r3
 8003128:	8013      	strh	r3, [r2, #0]
 800312a:	e0f6      	b.n	800331a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d121      	bne.n	800317a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800314c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003150:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	441a      	add	r2, r3
 8003162:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800316a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800316e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003176:	b29b      	uxth	r3, r3
 8003178:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 80ca 	bne.w	800331a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800318e:	441a      	add	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800319c:	441a      	add	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d30b      	bcc.n	80031c6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031be:	1ad2      	subs	r2, r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	621a      	str	r2, [r3, #32]
 80031c4:	e017      	b.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80031ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80031de:	e00a      	b.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d165      	bne.n	80032d0 <HAL_PCD_EP_DB_Transmit+0x750>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003218:	4413      	add	r3, r2
 800321a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	011a      	lsls	r2, r3, #4
 8003222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003224:	4413      	add	r3, r2
 8003226:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800322a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800322c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003236:	b29a      	uxth	r2, r3
 8003238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800323a:	801a      	strh	r2, [r3, #0]
 800323c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003240:	2b3e      	cmp	r3, #62	@ 0x3e
 8003242:	d91d      	bls.n	8003280 <HAL_PCD_EP_DB_Transmit+0x700>
 8003244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800324c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800325a:	3b01      	subs	r3, #1
 800325c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800325e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29a      	uxth	r2, r3
 8003264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003266:	b29b      	uxth	r3, r3
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	b29b      	uxth	r3, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003278:	b29a      	uxth	r2, r3
 800327a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	e041      	b.n	8003304 <HAL_PCD_EP_DB_Transmit+0x784>
 8003280:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003288:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003296:	b29a      	uxth	r2, r3
 8003298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	e032      	b.n	8003304 <HAL_PCD_EP_DB_Transmit+0x784>
 800329e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x738>
 80032b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032b4:	3301      	adds	r3, #1
 80032b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	029b      	lsls	r3, r3, #10
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	e019      	b.n	8003304 <HAL_PCD_EP_DB_Transmit+0x784>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d115      	bne.n	8003304 <HAL_PCD_EP_DB_Transmit+0x784>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e6:	4413      	add	r3, r2
 80032e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	011a      	lsls	r2, r3, #4
 80032f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f2:	4413      	add	r3, r2
 80032f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80032fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032fe:	b29a      	uxth	r2, r3
 8003300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003302:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6959      	ldr	r1, [r3, #20]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	895a      	ldrh	r2, [r3, #10]
 8003310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003314:	b29b      	uxth	r3, r3
 8003316:	f004 fac0 	bl	800789a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003334:	82bb      	strh	r3, [r7, #20]
 8003336:	8abb      	ldrh	r3, [r7, #20]
 8003338:	f083 0310 	eor.w	r3, r3, #16
 800333c:	82bb      	strh	r3, [r7, #20]
 800333e:	8abb      	ldrh	r3, [r7, #20]
 8003340:	f083 0320 	eor.w	r3, r3, #32
 8003344:	82bb      	strh	r3, [r7, #20]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	8abb      	ldrh	r3, [r7, #20]
 8003356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800335a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800335e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3790      	adds	r7, #144	@ 0x90
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	817b      	strh	r3, [r7, #10]
 8003382:	4613      	mov	r3, r2
 8003384:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	f003 0207 	and.w	r2, r3, #7
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	3310      	adds	r3, #16
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e009      	b.n	80033be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033aa:	897a      	ldrh	r2, [r7, #10]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033be:	893b      	ldrh	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2200      	movs	r2, #0
 80033c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	80da      	strh	r2, [r3, #6]
 80033d2:	e00b      	b.n	80033ec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2201      	movs	r2, #1
 80033d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e272      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8087 	beq.w	8003526 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003418:	4b92      	ldr	r3, [pc, #584]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b04      	cmp	r3, #4
 8003422:	d00c      	beq.n	800343e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003424:	4b8f      	ldr	r3, [pc, #572]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d112      	bne.n	8003456 <HAL_RCC_OscConfig+0x5e>
 8003430:	4b8c      	ldr	r3, [pc, #560]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343c:	d10b      	bne.n	8003456 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343e:	4b89      	ldr	r3, [pc, #548]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d06c      	beq.n	8003524 <HAL_RCC_OscConfig+0x12c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d168      	bne.n	8003524 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e24c      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345e:	d106      	bne.n	800346e <HAL_RCC_OscConfig+0x76>
 8003460:	4b80      	ldr	r3, [pc, #512]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a7f      	ldr	r2, [pc, #508]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	e02e      	b.n	80034cc <HAL_RCC_OscConfig+0xd4>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x98>
 8003476:	4b7b      	ldr	r3, [pc, #492]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7a      	ldr	r2, [pc, #488]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 800347c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b78      	ldr	r3, [pc, #480]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a77      	ldr	r2, [pc, #476]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e01d      	b.n	80034cc <HAL_RCC_OscConfig+0xd4>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0xbc>
 800349a:	4b72      	ldr	r3, [pc, #456]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a71      	ldr	r2, [pc, #452]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0xd4>
 80034b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b68      	ldr	r3, [pc, #416]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a67      	ldr	r2, [pc, #412]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fd fee2 	bl	800129c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fd fede 	bl	800129c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e200      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0xe4>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fd fece 	bl	800129c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003504:	f7fd feca 	bl	800129c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	@ 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e1ec      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	4b53      	ldr	r3, [pc, #332]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x10c>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d063      	beq.n	80035fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003532:	4b4c      	ldr	r3, [pc, #304]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800353e:	4b49      	ldr	r3, [pc, #292]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b08      	cmp	r3, #8
 8003548:	d11c      	bne.n	8003584 <HAL_RCC_OscConfig+0x18c>
 800354a:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	4b43      	ldr	r3, [pc, #268]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_RCC_OscConfig+0x176>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e1c0      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b3d      	ldr	r3, [pc, #244]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4939      	ldr	r1, [pc, #228]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	e03a      	b.n	80035fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358c:	4b36      	ldr	r3, [pc, #216]	@ (8003668 <HAL_RCC_OscConfig+0x270>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003592:	f7fd fe83 	bl	800129c <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359a:	f7fd fe7f 	bl	800129c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1a1      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4927      	ldr	r1, [pc, #156]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	e015      	b.n	80035fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ce:	4b26      	ldr	r3, [pc, #152]	@ (8003668 <HAL_RCC_OscConfig+0x270>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fd fe62 	bl	800129c <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035dc:	f7fd fe5e 	bl	800129c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e180      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03a      	beq.n	800367c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d019      	beq.n	8003642 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360e:	4b17      	ldr	r3, [pc, #92]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003610:	2201      	movs	r2, #1
 8003612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7fd fe42 	bl	800129c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361c:	f7fd fe3e 	bl	800129c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e160      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <HAL_RCC_OscConfig+0x26c>)
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800363a:	2001      	movs	r0, #1
 800363c:	f000 face 	bl	8003bdc <RCC_Delay>
 8003640:	e01c      	b.n	800367c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003648:	f7fd fe28 	bl	800129c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364e:	e00f      	b.n	8003670 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003650:	f7fd fe24 	bl	800129c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d908      	bls.n	8003670 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e146      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	42420000 	.word	0x42420000
 800366c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	4b92      	ldr	r3, [pc, #584]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e9      	bne.n	8003650 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80a6 	beq.w	80037d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368e:	4b8b      	ldr	r3, [pc, #556]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10d      	bne.n	80036b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	4b88      	ldr	r3, [pc, #544]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a87      	ldr	r2, [pc, #540]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a4:	61d3      	str	r3, [r2, #28]
 80036a6:	4b85      	ldr	r3, [pc, #532]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b6:	4b82      	ldr	r3, [pc, #520]	@ (80038c0 <HAL_RCC_OscConfig+0x4c8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d118      	bne.n	80036f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c2:	4b7f      	ldr	r3, [pc, #508]	@ (80038c0 <HAL_RCC_OscConfig+0x4c8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7e      	ldr	r2, [pc, #504]	@ (80038c0 <HAL_RCC_OscConfig+0x4c8>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ce:	f7fd fde5 	bl	800129c <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d6:	f7fd fde1 	bl	800129c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b64      	cmp	r3, #100	@ 0x64
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e103      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	4b75      	ldr	r3, [pc, #468]	@ (80038c0 <HAL_RCC_OscConfig+0x4c8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x312>
 80036fc:	4b6f      	ldr	r3, [pc, #444]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4a6e      	ldr	r2, [pc, #440]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6213      	str	r3, [r2, #32]
 8003708:	e02d      	b.n	8003766 <HAL_RCC_OscConfig+0x36e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x334>
 8003712:	4b6a      	ldr	r3, [pc, #424]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4a69      	ldr	r2, [pc, #420]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6213      	str	r3, [r2, #32]
 800371e:	4b67      	ldr	r3, [pc, #412]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4a66      	ldr	r2, [pc, #408]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	6213      	str	r3, [r2, #32]
 800372a:	e01c      	b.n	8003766 <HAL_RCC_OscConfig+0x36e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b05      	cmp	r3, #5
 8003732:	d10c      	bne.n	800374e <HAL_RCC_OscConfig+0x356>
 8003734:	4b61      	ldr	r3, [pc, #388]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4a60      	ldr	r2, [pc, #384]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 800373a:	f043 0304 	orr.w	r3, r3, #4
 800373e:	6213      	str	r3, [r2, #32]
 8003740:	4b5e      	ldr	r3, [pc, #376]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4a5d      	ldr	r2, [pc, #372]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6213      	str	r3, [r2, #32]
 800374c:	e00b      	b.n	8003766 <HAL_RCC_OscConfig+0x36e>
 800374e:	4b5b      	ldr	r3, [pc, #364]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4a5a      	ldr	r2, [pc, #360]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	6213      	str	r3, [r2, #32]
 800375a:	4b58      	ldr	r3, [pc, #352]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4a57      	ldr	r2, [pc, #348]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d015      	beq.n	800379a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376e:	f7fd fd95 	bl	800129c <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fd fd91 	bl	800129c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0b1      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378c:	4b4b      	ldr	r3, [pc, #300]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ee      	beq.n	8003776 <HAL_RCC_OscConfig+0x37e>
 8003798:	e014      	b.n	80037c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379a:	f7fd fd7f 	bl	800129c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fd fd7b 	bl	800129c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e09b      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b8:	4b40      	ldr	r3, [pc, #256]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ee      	bne.n	80037a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ca:	4b3c      	ldr	r3, [pc, #240]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4a3b      	ldr	r2, [pc, #236]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8087 	beq.w	80038ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e0:	4b36      	ldr	r3, [pc, #216]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d061      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d146      	bne.n	8003882 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f4:	4b33      	ldr	r3, [pc, #204]	@ (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fd fd4f 	bl	800129c <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003802:	f7fd fd4b 	bl	800129c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e06d      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003814:	4b29      	ldr	r3, [pc, #164]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003828:	d108      	bne.n	800383c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800382a:	4b24      	ldr	r3, [pc, #144]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4921      	ldr	r1, [pc, #132]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383c:	4b1f      	ldr	r3, [pc, #124]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a19      	ldr	r1, [r3, #32]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	430b      	orrs	r3, r1
 800384e:	491b      	ldr	r1, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003854:	4b1b      	ldr	r3, [pc, #108]	@ (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fd fd1f 	bl	800129c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003862:	f7fd fd1b 	bl	800129c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e03d      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003874:	4b11      	ldr	r3, [pc, #68]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x46a>
 8003880:	e035      	b.n	80038ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <HAL_RCC_OscConfig+0x4cc>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fd fd08 	bl	800129c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fd fd04 	bl	800129c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e026      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x498>
 80038ae:	e01e      	b.n	80038ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e019      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40007000 	.word	0x40007000
 80038c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038c8:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <HAL_RCC_OscConfig+0x500>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000

080038fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0d0      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003910:	4b6a      	ldr	r3, [pc, #424]	@ (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d910      	bls.n	8003940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b67      	ldr	r3, [pc, #412]	@ (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 0207 	bic.w	r2, r3, #7
 8003926:	4965      	ldr	r1, [pc, #404]	@ (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b63      	ldr	r3, [pc, #396]	@ (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0b8      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003958:	4b59      	ldr	r3, [pc, #356]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4a58      	ldr	r2, [pc, #352]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003970:	4b53      	ldr	r3, [pc, #332]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a52      	ldr	r2, [pc, #328]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800397a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397c:	4b50      	ldr	r3, [pc, #320]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	494d      	ldr	r1, [pc, #308]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d040      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b47      	ldr	r3, [pc, #284]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d115      	bne.n	80039da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e07f      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4b41      	ldr	r3, [pc, #260]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e073      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ca:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e06b      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039da:	4b39      	ldr	r3, [pc, #228]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f023 0203 	bic.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4936      	ldr	r1, [pc, #216]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039ec:	f7fd fc56 	bl	800129c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f4:	f7fd fc52 	bl	800129c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e053      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 020c 	and.w	r2, r3, #12
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d1eb      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b27      	ldr	r3, [pc, #156]	@ (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d210      	bcs.n	8003a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b24      	ldr	r3, [pc, #144]	@ (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 0207 	bic.w	r2, r3, #7
 8003a32:	4922      	ldr	r1, [pc, #136]	@ (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e032      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4916      	ldr	r1, [pc, #88]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	490e      	ldr	r1, [pc, #56]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a8a:	f000 f821 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	490a      	ldr	r1, [pc, #40]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	5ccb      	ldrb	r3, [r1, r3]
 8003a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa2:	4a09      	ldr	r2, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8003aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_RCC_ClockConfig+0x1d0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd fbb4 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40022000 	.word	0x40022000
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	0800a548 	.word	0x0800a548
 8003ac8:	20000004 	.word	0x20000004
 8003acc:	20000008 	.word	0x20000008

08003ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aea:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d002      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x30>
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x36>
 8003afe:	e027      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b00:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b02:	613b      	str	r3, [r7, #16]
      break;
 8003b04:	e027      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	0c9b      	lsrs	r3, r3, #18
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b10:	5cd3      	ldrb	r3, [r2, r3]
 8003b12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d010      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b1e:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	0c5b      	lsrs	r3, r3, #17
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	4a11      	ldr	r2, [pc, #68]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b32:	fb03 f202 	mul.w	r2, r3, r2
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e004      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a0c      	ldr	r2, [pc, #48]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b44:	fb02 f303 	mul.w	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	613b      	str	r3, [r7, #16]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b52:	613b      	str	r3, [r7, #16]
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	693b      	ldr	r3, [r7, #16]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	007a1200 	.word	0x007a1200
 8003b6c:	0800a560 	.word	0x0800a560
 8003b70:	0800a570 	.word	0x0800a570
 8003b74:	003d0900 	.word	0x003d0900

08003b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b7c:	4b02      	ldr	r3, [pc, #8]	@ (8003b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	20000004 	.word	0x20000004

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff2 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	@ (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800a558 	.word	0x0800a558

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffde 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	0adb      	lsrs	r3, r3, #11
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	@ (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	0800a558 	.word	0x0800a558

08003bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003be4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <RCC_Delay+0x34>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c14 <RCC_Delay+0x38>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0a5b      	lsrs	r3, r3, #9
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bf8:	bf00      	nop
  }
  while (Delay --);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f9      	bne.n	8003bf8 <RCC_Delay+0x1c>
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	20000004 	.word	0x20000004
 8003c14:	10624dd3 	.word	0x10624dd3

08003c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d07d      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c38:	4b4f      	ldr	r3, [pc, #316]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10d      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4b4c      	ldr	r3, [pc, #304]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	4a4b      	ldr	r2, [pc, #300]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	61d3      	str	r3, [r2, #28]
 8003c50:	4b49      	ldr	r3, [pc, #292]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c60:	4b46      	ldr	r3, [pc, #280]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d118      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6c:	4b43      	ldr	r3, [pc, #268]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a42      	ldr	r2, [pc, #264]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c78:	f7fd fb10 	bl	800129c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	e008      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c80:	f7fd fb0c 	bl	800129c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e06d      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	4b3a      	ldr	r3, [pc, #232]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c9e:	4b36      	ldr	r3, [pc, #216]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d02e      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d027      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cd2:	4a29      	ldr	r2, [pc, #164]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d014      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fd fadb 	bl	800129c <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fd fad7 	bl	800129c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ee      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4917      	ldr	r1, [pc, #92]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b14      	ldr	r3, [pc, #80]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4a13      	ldr	r2, [pc, #76]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	490b      	ldr	r1, [pc, #44]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5a:	4b07      	ldr	r3, [pc, #28]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4904      	ldr	r1, [pc, #16]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42420440 	.word	0x42420440

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e041      	b.n	8003e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd f8fa 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 fa8a 	bl	80042dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d001      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e03a      	b.n	8003eb2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <HAL_TIM_Base_Start_IT+0x98>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00e      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0x58>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e66:	d009      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0x58>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ec0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0x58>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a13      	ldr	r2, [pc, #76]	@ (8003ec4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d111      	bne.n	8003ea0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d010      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9e:	e007      	b.n	8003eb0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800

08003ec8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <HAL_TIM_Base_Stop_IT+0x48>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a1a      	ldr	r2, [r3, #32]
 8003ef6:	f240 4344 	movw	r3, #1092	@ 0x444
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_Base_Stop_IT+0x48>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d020      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0202 	mvn.w	r2, #2
 8003f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f998 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f98b 	bl	8004292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f99a 	bl	80042b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d020      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01b      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0204 	mvn.w	r2, #4
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f972 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f965 	bl	8004292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f974 	bl	80042b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d020      	beq.n	8004020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01b      	beq.n	8004020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0208 	mvn.w	r2, #8
 8003ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f94c 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 800400c:	e005      	b.n	800401a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f93f 	bl	8004292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f94e 	bl	80042b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	d020      	beq.n	800406c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01b      	beq.n	800406c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0210 	mvn.w	r2, #16
 800403c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2208      	movs	r2, #8
 8004042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f926 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f919 	bl	8004292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f928 	bl	80042b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0201 	mvn.w	r2, #1
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fca6 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa7f 	bl	80045b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00c      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8f8 	bl	80042c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0220 	mvn.w	r2, #32
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fa52 	bl	80045a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_TIM_ConfigClockSource+0x1c>
 800411c:	2302      	movs	r3, #2
 800411e:	e0b4      	b.n	800428a <HAL_TIM_ConfigClockSource+0x186>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800413e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004146:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004158:	d03e      	beq.n	80041d8 <HAL_TIM_ConfigClockSource+0xd4>
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800415e:	f200 8087 	bhi.w	8004270 <HAL_TIM_ConfigClockSource+0x16c>
 8004162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004166:	f000 8086 	beq.w	8004276 <HAL_TIM_ConfigClockSource+0x172>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800416e:	d87f      	bhi.n	8004270 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b70      	cmp	r3, #112	@ 0x70
 8004172:	d01a      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0xa6>
 8004174:	2b70      	cmp	r3, #112	@ 0x70
 8004176:	d87b      	bhi.n	8004270 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b60      	cmp	r3, #96	@ 0x60
 800417a:	d050      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x11a>
 800417c:	2b60      	cmp	r3, #96	@ 0x60
 800417e:	d877      	bhi.n	8004270 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b50      	cmp	r3, #80	@ 0x50
 8004182:	d03c      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0xfa>
 8004184:	2b50      	cmp	r3, #80	@ 0x50
 8004186:	d873      	bhi.n	8004270 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b40      	cmp	r3, #64	@ 0x40
 800418a:	d058      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x13a>
 800418c:	2b40      	cmp	r3, #64	@ 0x40
 800418e:	d86f      	bhi.n	8004270 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b30      	cmp	r3, #48	@ 0x30
 8004192:	d064      	beq.n	800425e <HAL_TIM_ConfigClockSource+0x15a>
 8004194:	2b30      	cmp	r3, #48	@ 0x30
 8004196:	d86b      	bhi.n	8004270 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b20      	cmp	r3, #32
 800419a:	d060      	beq.n	800425e <HAL_TIM_ConfigClockSource+0x15a>
 800419c:	2b20      	cmp	r3, #32
 800419e:	d867      	bhi.n	8004270 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d05c      	beq.n	800425e <HAL_TIM_ConfigClockSource+0x15a>
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d05a      	beq.n	800425e <HAL_TIM_ConfigClockSource+0x15a>
 80041a8:	e062      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ba:	f000 f974 	bl	80044a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	609a      	str	r2, [r3, #8]
      break;
 80041d6:	e04f      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041e8:	f000 f95d 	bl	80044a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041fa:	609a      	str	r2, [r3, #8]
      break;
 80041fc:	e03c      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800420a:	461a      	mov	r2, r3
 800420c:	f000 f8d4 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2150      	movs	r1, #80	@ 0x50
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f92b 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 800421c:	e02c      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800422a:	461a      	mov	r2, r3
 800422c:	f000 f8f2 	bl	8004414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2160      	movs	r1, #96	@ 0x60
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f91b 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 800423c:	e01c      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800424a:	461a      	mov	r2, r3
 800424c:	f000 f8b4 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2140      	movs	r1, #64	@ 0x40
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f90b 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 800425c:	e00c      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f000 f902 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 800426e:	e003      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      break;
 8004274:	e000      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
	...

080042dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a2f      	ldr	r2, [pc, #188]	@ (80043ac <TIM_Base_SetConfig+0xd0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0x30>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0x30>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a2c      	ldr	r2, [pc, #176]	@ (80043b0 <TIM_Base_SetConfig+0xd4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0x30>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <TIM_Base_SetConfig+0xd8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d108      	bne.n	800431e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a22      	ldr	r2, [pc, #136]	@ (80043ac <TIM_Base_SetConfig+0xd0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_Base_SetConfig+0x62>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432c:	d007      	beq.n	800433e <TIM_Base_SetConfig+0x62>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1f      	ldr	r2, [pc, #124]	@ (80043b0 <TIM_Base_SetConfig+0xd4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_Base_SetConfig+0x62>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <TIM_Base_SetConfig+0xd8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d108      	bne.n	8004350 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0d      	ldr	r2, [pc, #52]	@ (80043ac <TIM_Base_SetConfig+0xd0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d103      	bne.n	8004384 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f023 0201 	bic.w	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	611a      	str	r2, [r3, #16]
  }
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0210 	bic.w	r2, r3, #16
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800443e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	031b      	lsls	r3, r3, #12
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004450:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	f043 0307 	orr.w	r3, r3, #7
 8004494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	021a      	lsls	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	609a      	str	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e046      	b.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a16      	ldr	r2, [pc, #88]	@ (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004548:	d009      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a10      	ldr	r2, [pc, #64]	@ (800459c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10c      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	4313      	orrs	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800

080045a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e042      	b.n	800465c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fcfe 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	@ 0x24
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fdb7 	bl	800517c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800461c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800462c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800463c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	@ 0x28
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b20      	cmp	r3, #32
 8004682:	d175      	bne.n	8004770 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_UART_Transmit+0x2c>
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e06e      	b.n	8004772 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2221      	movs	r2, #33	@ 0x21
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046a2:	f7fc fdfb 	bl	800129c <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	88fa      	ldrh	r2, [r7, #6]
 80046b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046bc:	d108      	bne.n	80046d0 <HAL_UART_Transmit+0x6c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e003      	b.n	80046d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046d8:	e02e      	b.n	8004738 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2180      	movs	r1, #128	@ 0x80
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fb1c 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e03a      	b.n	8004772 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	3302      	adds	r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e007      	b.n	800472a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	3301      	adds	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1cb      	bne.n	80046da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	2140      	movs	r1, #64	@ 0x40
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fae8 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e006      	b.n	8004772 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	4613      	mov	r3, r2
 8004786:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b20      	cmp	r3, #32
 8004792:	d112      	bne.n	80047ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_UART_Receive_IT+0x26>
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e00b      	b.n	80047bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	461a      	mov	r2, r3
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fb0f 	bl	8004dd4 <UART_Start_Receive_IT>
 80047b6:	4603      	mov	r3, r0
 80047b8:	e000      	b.n	80047bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b0ba      	sub	sp, #232	@ 0xe8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_UART_IRQHandler+0x66>
 8004816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fbec 	bl	8005000 <UART_Receive_IT>
      return;
 8004828:	e25b      	b.n	8004ce2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800482a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80de 	beq.w	80049f0 <HAL_UART_IRQHandler+0x22c>
 8004834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004844:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80d1 	beq.w	80049f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_UART_IRQHandler+0xae>
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <HAL_UART_IRQHandler+0xd2>
 800487e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_UART_IRQHandler+0xf6>
 80048a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	f043 0204 	orr.w	r2, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d011      	beq.n	80048ea <HAL_UART_IRQHandler+0x126>
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	f043 0208 	orr.w	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 81f2 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_UART_IRQHandler+0x14e>
 8004900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fb77 	bl	8005000 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_UART_IRQHandler+0x17a>
 8004936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d04f      	beq.n	80049de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa81 	bl	8004e46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d041      	beq.n	80049d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800496c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3314      	adds	r3, #20
 800497a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800497e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800498a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1d9      	bne.n	8004952 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d013      	beq.n	80049ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049aa:	4a7e      	ldr	r2, [pc, #504]	@ (8004ba4 <HAL_UART_IRQHandler+0x3e0>)
 80049ac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc fdc4 	bl	8001540 <HAL_DMA_Abort_IT>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d016      	beq.n	80049ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049c8:	4610      	mov	r0, r2
 80049ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	e00e      	b.n	80049ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f993 	bl	8004cfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	e00a      	b.n	80049ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f98f 	bl	8004cfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049dc:	e006      	b.n	80049ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f98b 	bl	8004cfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80049ea:	e175      	b.n	8004cd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	bf00      	nop
    return;
 80049ee:	e173      	b.n	8004cd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	f040 814f 	bne.w	8004c98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8148 	beq.w	8004c98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8141 	beq.w	8004c98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80b6 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8145 	beq.w	8004cdc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	f080 813e 	bcs.w	8004cdc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	f000 8088 	beq.w	8004b84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004aa0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004aa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004aac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1d9      	bne.n	8004a74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ae4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004aec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004af6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e1      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3314      	adds	r3, #20
 8004b02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e3      	bne.n	8004afc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b54:	f023 0310 	bic.w	r3, r3, #16
 8004b58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b68:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e3      	bne.n	8004b42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fc fca3 	bl	80014ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8b6 	bl	8004d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ba0:	e09c      	b.n	8004cdc <HAL_UART_IRQHandler+0x518>
 8004ba2:	bf00      	nop
 8004ba4:	08004f0b 	.word	0x08004f0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 808e 	beq.w	8004ce0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8089 	beq.w	8004ce0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004bf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e3      	bne.n	8004bce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3314      	adds	r3, #20
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	623b      	str	r3, [r7, #32]
   return(result);
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3314      	adds	r3, #20
 8004c26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e3      	bne.n	8004c06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0310 	bic.w	r3, r3, #16
 8004c62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c70:	61fa      	str	r2, [r7, #28]
 8004c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e3      	bne.n	8004c4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f83b 	bl	8004d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c96:	e023      	b.n	8004ce0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x4f4>
 8004ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f93e 	bl	8004f32 <UART_Transmit_IT>
    return;
 8004cb6:	e014      	b.n	8004ce2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x51e>
 8004cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f97d 	bl	8004fd0 <UART_EndTransmit_IT>
    return;
 8004cd6:	e004      	b.n	8004ce2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004cd8:	bf00      	nop
 8004cda:	e002      	b.n	8004ce2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004cdc:	bf00      	nop
 8004cde:	e000      	b.n	8004ce2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ce0:	bf00      	nop
  }
}
 8004ce2:	37e8      	adds	r7, #232	@ 0xe8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr

08004d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d32:	e03b      	b.n	8004dac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	d037      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3c:	f7fc faae 	bl	800129c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	6a3a      	ldr	r2, [r7, #32]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e03a      	b.n	8004dcc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d023      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b80      	cmp	r3, #128	@ 0x80
 8004d68:	d020      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b40      	cmp	r3, #64	@ 0x40
 8004d6e:	d01d      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d116      	bne.n	8004dac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f856 	bl	8004e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e00f      	b.n	8004dcc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d0b4      	beq.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	4613      	mov	r3, r2
 8004de0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2222      	movs	r2, #34	@ 0x22
 8004dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0220 	orr.w	r2, r2, #32
 8004e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b095      	sub	sp, #84	@ 0x54
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3314      	adds	r3, #20
 8004e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d119      	bne.n	8004ef2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 0310 	bic.w	r3, r3, #16
 8004ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ede:	61ba      	str	r2, [r7, #24]
 8004ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	613b      	str	r3, [r7, #16]
   return(result);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f00:	bf00      	nop
 8004f02:	3754      	adds	r7, #84	@ 0x54
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr

08004f0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff fee8 	bl	8004cfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b21      	cmp	r3, #33	@ 0x21
 8004f44:	d13e      	bne.n	8004fc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4e:	d114      	bne.n	8004f7a <UART_Transmit_IT+0x48>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	621a      	str	r2, [r3, #32]
 8004f78:	e008      	b.n	8004f8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	1c59      	adds	r1, r3, #1
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6211      	str	r1, [r2, #32]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10f      	bne.n	8004fc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e000      	b.n	8004fc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
  }
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fe79 	bl	8004ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	@ 0x30
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b22      	cmp	r3, #34	@ 0x22
 8005012:	f040 80ae 	bne.w	8005172 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501e:	d117      	bne.n	8005050 <UART_Receive_IT+0x50>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d113      	bne.n	8005050 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503e:	b29a      	uxth	r2, r3
 8005040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005042:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28
 800504e:	e026      	b.n	800509e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005062:	d007      	beq.n	8005074 <UART_Receive_IT+0x74>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <UART_Receive_IT+0x82>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e008      	b.n	8005094 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800508e:	b2da      	uxtb	r2, r3
 8005090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005092:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4619      	mov	r1, r3
 80050ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d15d      	bne.n	800516e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0220 	bic.w	r2, r2, #32
 80050c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d135      	bne.n	8005164 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	613b      	str	r3, [r7, #16]
   return(result);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f023 0310 	bic.w	r3, r3, #16
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511e:	623a      	str	r2, [r7, #32]
 8005120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	69f9      	ldr	r1, [r7, #28]
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	61bb      	str	r3, [r7, #24]
   return(result);
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b10      	cmp	r3, #16
 800513e:	d10a      	bne.n	8005156 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800515a:	4619      	mov	r1, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff fdd5 	bl	8004d0c <HAL_UARTEx_RxEventCallback>
 8005162:	e002      	b.n	800516a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fb fc95 	bl	8000a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e002      	b.n	8005174 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e000      	b.n	8005174 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3730      	adds	r7, #48	@ 0x30
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80051b6:	f023 030c 	bic.w	r3, r3, #12
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	430b      	orrs	r3, r1
 80051c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2c      	ldr	r2, [pc, #176]	@ (8005290 <UART_SetConfig+0x114>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d103      	bne.n	80051ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051e4:	f7fe fce6 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	e002      	b.n	80051f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051ec:	f7fe fcce 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80051f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009a      	lsls	r2, r3, #2
 80051fc:	441a      	add	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	4a22      	ldr	r2, [pc, #136]	@ (8005294 <UART_SetConfig+0x118>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	0119      	lsls	r1, r3, #4
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009a      	lsls	r2, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	fbb2 f2f3 	udiv	r2, r2, r3
 8005228:	4b1a      	ldr	r3, [pc, #104]	@ (8005294 <UART_SetConfig+0x118>)
 800522a:	fba3 0302 	umull	r0, r3, r3, r2
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2064      	movs	r0, #100	@ 0x64
 8005232:	fb00 f303 	mul.w	r3, r0, r3
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	3332      	adds	r3, #50	@ 0x32
 800523c:	4a15      	ldr	r2, [pc, #84]	@ (8005294 <UART_SetConfig+0x118>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005248:	4419      	add	r1, r3
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <UART_SetConfig+0x118>)
 8005262:	fba3 0302 	umull	r0, r3, r3, r2
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2064      	movs	r0, #100	@ 0x64
 800526a:	fb00 f303 	mul.w	r3, r0, r3
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	3332      	adds	r3, #50	@ 0x32
 8005274:	4a07      	ldr	r2, [pc, #28]	@ (8005294 <UART_SetConfig+0x118>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	f003 020f 	and.w	r2, r3, #15
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	440a      	add	r2, r1
 8005286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40013800 	.word	0x40013800
 8005294:	51eb851f 	.word	0x51eb851f

08005298 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	4638      	mov	r0, r7
 80052a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052c2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80052c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052e6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80052ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	4013      	ands	r3, r2
 80052fe:	b29a      	uxth	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	4638      	mov	r0, r7
 8005334:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005364:	b480      	push	{r7}
 8005366:	b09d      	sub	sp, #116	@ 0x74
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800538a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	78db      	ldrb	r3, [r3, #3]
 8005392:	2b03      	cmp	r3, #3
 8005394:	d81f      	bhi.n	80053d6 <USB_ActivateEndpoint+0x72>
 8005396:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <USB_ActivateEndpoint+0x38>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053df 	.word	0x080053df
 80053a8:	080053bb 	.word	0x080053bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80053b8:	e012      	b.n	80053e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80053c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80053c6:	e00b      	b.n	80053e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80053c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80053d4:	e004      	b.n	80053e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80053dc:	e000      	b.n	80053e0 <USB_ActivateEndpoint+0x7c>
      break;
 80053de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	441a      	add	r2, r3
 80053ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005418:	b29b      	uxth	r3, r3
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	7812      	ldrb	r2, [r2, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	441a      	add	r2, r3
 800542e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800543a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800543e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	7b1b      	ldrb	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f040 8178 	bne.w	8005740 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8084 	beq.w	8005562 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	4413      	add	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	011a      	lsls	r2, r3, #4
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	88db      	ldrh	r3, [r3, #6]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	b29b      	uxth	r3, r3
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	827b      	strh	r3, [r7, #18]
 800549c:	8a7b      	ldrh	r3, [r7, #18]
 800549e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01b      	beq.n	80054de <USB_ActivateEndpoint+0x17a>
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054bc:	823b      	strh	r3, [r7, #16]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	8a3b      	ldrh	r3, [r7, #16]
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	78db      	ldrb	r3, [r3, #3]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d020      	beq.n	8005528 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fc:	81bb      	strh	r3, [r7, #12]
 80054fe:	89bb      	ldrh	r3, [r7, #12]
 8005500:	f083 0320 	eor.w	r3, r3, #32
 8005504:	81bb      	strh	r3, [r7, #12]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	441a      	add	r2, r3
 8005510:	89bb      	ldrh	r3, [r7, #12]
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]
 8005526:	e2d5      	b.n	8005ad4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800553e:	81fb      	strh	r3, [r7, #14]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	89fb      	ldrh	r3, [r7, #14]
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]
 8005560:	e2b8      	b.n	8005ad4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	633b      	str	r3, [r7, #48]	@ 0x30
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	4413      	add	r3, r2
 8005574:	633b      	str	r3, [r7, #48]	@ 0x30
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	011a      	lsls	r2, r3, #4
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	4413      	add	r3, r2
 8005580:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	88db      	ldrh	r3, [r3, #6]
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	b29b      	uxth	r3, r3
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	4413      	add	r3, r2
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	011a      	lsls	r2, r3, #4
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	4413      	add	r3, r2
 80055b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80055d0:	d91d      	bls.n	800560e <USB_ActivateEndpoint+0x2aa>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <USB_ActivateEndpoint+0x288>
 80055e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055e8:	3b01      	subs	r3, #1
 80055ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	4313      	orrs	r3, r2
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005606:	b29a      	uxth	r2, r3
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	e026      	b.n	800565c <USB_ActivateEndpoint+0x2f8>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <USB_ActivateEndpoint+0x2c8>
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005624:	b29a      	uxth	r2, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e017      	b.n	800565c <USB_ActivateEndpoint+0x2f8>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <USB_ActivateEndpoint+0x2e2>
 8005640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005642:	3301      	adds	r3, #1
 8005644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29a      	uxth	r2, r3
 800564c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800564e:	b29b      	uxth	r3, r3
 8005650:	029b      	lsls	r3, r3, #10
 8005652:	b29b      	uxth	r3, r3
 8005654:	4313      	orrs	r3, r2
 8005656:	b29a      	uxth	r2, r3
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	847b      	strh	r3, [r7, #34]	@ 0x22
 800566a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800566c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01b      	beq.n	80056ac <USB_ActivateEndpoint+0x348>
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800568a:	843b      	strh	r3, [r7, #32]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	8c3b      	ldrh	r3, [r7, #32]
 8005698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d124      	bne.n	80056fe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ca:	83bb      	strh	r3, [r7, #28]
 80056cc:	8bbb      	ldrh	r3, [r7, #28]
 80056ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80056d2:	83bb      	strh	r3, [r7, #28]
 80056d4:	8bbb      	ldrh	r3, [r7, #28]
 80056d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056da:	83bb      	strh	r3, [r7, #28]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	8bbb      	ldrh	r3, [r7, #28]
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]
 80056fc:	e1ea      	b.n	8005ad4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005714:	83fb      	strh	r3, [r7, #30]
 8005716:	8bfb      	ldrh	r3, [r7, #30]
 8005718:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800571c:	83fb      	strh	r3, [r7, #30]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	8bfb      	ldrh	r3, [r7, #30]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
 800573e:	e1c9      	b.n	8005ad4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d11e      	bne.n	8005786 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005778:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800577c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]
 8005784:	e01d      	b.n	80057c2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80057ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057d2:	4413      	add	r3, r2
 80057d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	011a      	lsls	r2, r3, #4
 80057dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	891b      	ldrh	r3, [r3, #8]
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005806:	4413      	add	r3, r2
 8005808:	657b      	str	r3, [r7, #84]	@ 0x54
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005812:	4413      	add	r3, r2
 8005814:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005818:	653b      	str	r3, [r7, #80]	@ 0x50
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	895b      	ldrh	r3, [r3, #10]
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	b29b      	uxth	r3, r3
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005828:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 8093 	bne.w	800595a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005844:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <USB_ActivateEndpoint+0x524>
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005866:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005896:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <USB_ActivateEndpoint+0x574>
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80058c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80058f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80058f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80058f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80058f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80058fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	441a      	add	r2, r3
 800590a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800590c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005936:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	441a      	add	r2, r3
 8005942:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800594c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005954:	b29b      	uxth	r3, r3
 8005956:	8013      	strh	r3, [r2, #0]
 8005958:	e0bc      	b.n	8005ad4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800596a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800596e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01d      	beq.n	80059b2 <USB_ActivateEndpoint+0x64e>
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80059c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01d      	beq.n	8005a0a <USB_ActivateEndpoint+0x6a6>
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80059f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	78db      	ldrb	r3, [r3, #3]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d024      	beq.n	8005a5c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005a2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005a30:	f083 0320 	eor.w	r3, r3, #32
 8005a34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	441a      	add	r2, r3
 8005a42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]
 8005a5a:	e01d      	b.n	8005a98 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	441a      	add	r2, r3
 8005a80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	441a      	add	r2, r3
 8005abc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005ad4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3774      	adds	r7, #116	@ 0x74
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop

08005ae4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b08d      	sub	sp, #52	@ 0x34
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	7b1b      	ldrb	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f040 808e 	bne.w	8005c14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d044      	beq.n	8005b8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	81bb      	strh	r3, [r7, #12]
 8005b0e:	89bb      	ldrh	r3, [r7, #12]
 8005b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01b      	beq.n	8005b50 <USB_DeactivateEndpoint+0x6c>
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2e:	817b      	strh	r3, [r7, #10]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	897b      	ldrh	r3, [r7, #10]
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b66:	813b      	strh	r3, [r7, #8]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	893b      	ldrh	r3, [r7, #8]
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
 8005b88:	e192      	b.n	8005eb0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	827b      	strh	r3, [r7, #18]
 8005b98:	8a7b      	ldrh	r3, [r7, #18]
 8005b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01b      	beq.n	8005bda <USB_DeactivateEndpoint+0xf6>
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb8:	823b      	strh	r3, [r7, #16]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	8a3b      	ldrh	r3, [r7, #16]
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf0:	81fb      	strh	r3, [r7, #14]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	89fb      	ldrh	r3, [r7, #14]
 8005bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8013      	strh	r3, [r2, #0]
 8005c12:	e14d      	b.n	8005eb0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f040 80a5 	bne.w	8005d68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	843b      	strh	r3, [r7, #32]
 8005c2c:	8c3b      	ldrh	r3, [r7, #32]
 8005c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01b      	beq.n	8005c6e <USB_DeactivateEndpoint+0x18a>
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4c:	83fb      	strh	r3, [r7, #30]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	441a      	add	r2, r3
 8005c58:	8bfb      	ldrh	r3, [r7, #30]
 8005c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	83bb      	strh	r3, [r7, #28]
 8005c7c:	8bbb      	ldrh	r3, [r7, #28]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01b      	beq.n	8005cbe <USB_DeactivateEndpoint+0x1da>
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c9c:	837b      	strh	r3, [r7, #26]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	441a      	add	r2, r3
 8005ca8:	8b7b      	ldrh	r3, [r7, #26]
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd4:	833b      	strh	r3, [r7, #24]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	8b3b      	ldrh	r3, [r7, #24]
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0c:	82fb      	strh	r3, [r7, #22]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8afb      	ldrh	r3, [r7, #22]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d44:	82bb      	strh	r3, [r7, #20]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	441a      	add	r2, r3
 8005d50:	8abb      	ldrh	r3, [r7, #20]
 8005d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	8013      	strh	r3, [r2, #0]
 8005d66:	e0a3      	b.n	8005eb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005d76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01b      	beq.n	8005db8 <USB_DeactivateEndpoint+0x2d4>
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d96:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005dc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01b      	beq.n	8005e08 <USB_DeactivateEndpoint+0x324>
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3734      	adds	r7, #52	@ 0x34
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b0c2      	sub	sp, #264	@ 0x108
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eca:	6018      	str	r0, [r3, #0]
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	f040 86b7 	bne.w	8006c56 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d908      	bls.n	8005f16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f14:	e007      	b.n	8005f26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	7b1b      	ldrb	r3, [r3, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d13a      	bne.n	8005fac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6959      	ldr	r1, [r3, #20]
 8005f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	88da      	ldrh	r2, [r3, #6]
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f5c:	6800      	ldr	r0, [r0, #0]
 8005f5e:	f001 fc9c 	bl	800789a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	011a      	lsls	r2, r3, #4
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4413      	add	r3, r2
 8005f98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	f000 be1f 	b.w	8006bea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	78db      	ldrb	r3, [r3, #3]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	f040 8462 	bne.w	8006882 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a1a      	ldr	r2, [r3, #32]
 8005fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	f240 83df 	bls.w	800679a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006002:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800602c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006034:	b29b      	uxth	r3, r3
 8006036:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1a      	ldr	r2, [r3, #32]
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 81c7 	beq.w	800640c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800607e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006082:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	633b      	str	r3, [r7, #48]	@ 0x30
 800608a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d177      	bne.n	800618a <USB_EPStartXfer+0x2ce>
 800609a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	4413      	add	r3, r2
 80060bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	011a      	lsls	r2, r3, #4
 80060cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ce:	4413      	add	r3, r2
 80060d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80060ec:	d921      	bls.n	8006132 <USB_EPStartXfer+0x276>
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <USB_EPStartXfer+0x252>
 8006104:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006108:	3b01      	subs	r3, #1
 800610a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29a      	uxth	r2, r3
 8006114:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006118:	b29b      	uxth	r3, r3
 800611a:	029b      	lsls	r3, r3, #10
 800611c:	b29b      	uxth	r3, r3
 800611e:	4313      	orrs	r3, r2
 8006120:	b29b      	uxth	r3, r3
 8006122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612a:	b29a      	uxth	r2, r3
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	e050      	b.n	80061d4 <USB_EPStartXfer+0x318>
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <USB_EPStartXfer+0x294>
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006148:	b29a      	uxth	r2, r3
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	e041      	b.n	80061d4 <USB_EPStartXfer+0x318>
 8006150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <USB_EPStartXfer+0x2b4>
 8006166:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800616a:	3301      	adds	r3, #1
 800616c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29a      	uxth	r2, r3
 8006176:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29b      	uxth	r3, r3
 8006180:	4313      	orrs	r3, r2
 8006182:	b29a      	uxth	r2, r3
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e024      	b.n	80061d4 <USB_EPStartXfer+0x318>
 800618a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d11c      	bne.n	80061d4 <USB_EPStartXfer+0x318>
 800619a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	4413      	add	r3, r2
 80061b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	011a      	lsls	r2, r3, #4
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	4413      	add	r3, r2
 80061c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	895b      	ldrh	r3, [r3, #10]
 80061e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6959      	ldr	r1, [r3, #20]
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006202:	6800      	ldr	r0, [r0, #0]
 8006204:	f001 fb49 	bl	800789a <USB_WritePMA>
            ep->xfer_buff += len;
 8006208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006218:	441a      	add	r2, r3
 800621a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a1a      	ldr	r2, [r3, #32]
 8006232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	429a      	cmp	r2, r3
 8006240:	d90f      	bls.n	8006262 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6a1a      	ldr	r2, [r3, #32]
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	621a      	str	r2, [r3, #32]
 8006260:	e00e      	b.n	8006280 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d177      	bne.n	8006380 <USB_EPStartXfer+0x4c4>
 8006290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	4413      	add	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	011a      	lsls	r2, r3, #4
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80062e2:	d921      	bls.n	8006328 <USB_EPStartXfer+0x46c>
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USB_EPStartXfer+0x448>
 80062fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062fe:	3b01      	subs	r3, #1
 8006300:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800630e:	b29b      	uxth	r3, r3
 8006310:	029b      	lsls	r3, r3, #10
 8006312:	b29b      	uxth	r3, r3
 8006314:	4313      	orrs	r3, r2
 8006316:	b29b      	uxth	r3, r3
 8006318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006320:	b29a      	uxth	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	e056      	b.n	80063d6 <USB_EPStartXfer+0x51a>
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <USB_EPStartXfer+0x48a>
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633e:	b29a      	uxth	r2, r3
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e047      	b.n	80063d6 <USB_EPStartXfer+0x51a>
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <USB_EPStartXfer+0x4aa>
 800635c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006360:	3301      	adds	r3, #1
 8006362:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006370:	b29b      	uxth	r3, r3
 8006372:	029b      	lsls	r3, r3, #10
 8006374:	b29b      	uxth	r3, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e02a      	b.n	80063d6 <USB_EPStartXfer+0x51a>
 8006380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d122      	bne.n	80063d6 <USB_EPStartXfer+0x51a>
 8006390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	623b      	str	r3, [r7, #32]
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	4413      	add	r3, r2
 80063b2:	623b      	str	r3, [r7, #32]
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	011a      	lsls	r2, r3, #4
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	891b      	ldrh	r3, [r3, #8]
 80063e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6959      	ldr	r1, [r3, #20]
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006400:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006404:	6800      	ldr	r0, [r0, #0]
 8006406:	f001 fa48 	bl	800789a <USB_WritePMA>
 800640a:	e3ee      	b.n	8006bea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800640c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d177      	bne.n	800650c <USB_EPStartXfer+0x650>
 800641c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006436:	b29b      	uxth	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800643c:	4413      	add	r3, r2
 800643e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	011a      	lsls	r2, r3, #4
 800644e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006450:	4413      	add	r3, r2
 8006452:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006456:	647b      	str	r3, [r7, #68]	@ 0x44
 8006458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006462:	b29a      	uxth	r2, r3
 8006464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646c:	2b3e      	cmp	r3, #62	@ 0x3e
 800646e:	d921      	bls.n	80064b4 <USB_EPStartXfer+0x5f8>
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800647a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <USB_EPStartXfer+0x5d4>
 8006486:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800648a:	3b01      	subs	r3, #1
 800648c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29a      	uxth	r2, r3
 8006496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800649a:	b29b      	uxth	r3, r3
 800649c:	029b      	lsls	r3, r3, #10
 800649e:	b29b      	uxth	r3, r3
 80064a0:	4313      	orrs	r3, r2
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	e056      	b.n	8006562 <USB_EPStartXfer+0x6a6>
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <USB_EPStartXfer+0x616>
 80064bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	e047      	b.n	8006562 <USB_EPStartXfer+0x6a6>
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d004      	beq.n	80064f2 <USB_EPStartXfer+0x636>
 80064e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064ec:	3301      	adds	r3, #1
 80064ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	029b      	lsls	r3, r3, #10
 8006500:	b29b      	uxth	r3, r3
 8006502:	4313      	orrs	r3, r2
 8006504:	b29a      	uxth	r2, r3
 8006506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e02a      	b.n	8006562 <USB_EPStartXfer+0x6a6>
 800650c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d122      	bne.n	8006562 <USB_EPStartXfer+0x6a6>
 800651c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	653b      	str	r3, [r7, #80]	@ 0x50
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006536:	b29b      	uxth	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800653c:	4413      	add	r3, r2
 800653e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	011a      	lsls	r2, r3, #4
 800654e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006550:	4413      	add	r3, r2
 8006552:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655c:	b29a      	uxth	r2, r3
 800655e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006560:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	891b      	ldrh	r3, [r3, #8]
 800656e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6959      	ldr	r1, [r3, #20]
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	b29b      	uxth	r3, r3
 8006584:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006588:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800658c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006590:	6800      	ldr	r0, [r0, #0]
 8006592:	f001 f982 	bl	800789a <USB_WritePMA>
            ep->xfer_buff += len;
 8006596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a6:	441a      	add	r2, r3
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d90f      	bls.n	80065f0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80065d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	621a      	str	r2, [r3, #32]
 80065ee:	e00e      	b.n	800660e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80065f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800660e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	643b      	str	r3, [r7, #64]	@ 0x40
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d177      	bne.n	800671a <USB_EPStartXfer+0x85e>
 800662a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006644:	b29b      	uxth	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	4413      	add	r3, r2
 800664c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800664e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	011a      	lsls	r2, r3, #4
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	4413      	add	r3, r2
 8006660:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
 8006666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006670:	b29a      	uxth	r2, r3
 8006672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667a:	2b3e      	cmp	r3, #62	@ 0x3e
 800667c:	d921      	bls.n	80066c2 <USB_EPStartXfer+0x806>
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <USB_EPStartXfer+0x7e2>
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006698:	3b01      	subs	r3, #1
 800669a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800669e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	029b      	lsls	r3, r3, #10
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4313      	orrs	r3, r2
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	e050      	b.n	8006764 <USB_EPStartXfer+0x8a8>
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <USB_EPStartXfer+0x824>
 80066ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d8:	b29a      	uxth	r2, r3
 80066da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066dc:	801a      	strh	r2, [r3, #0]
 80066de:	e041      	b.n	8006764 <USB_EPStartXfer+0x8a8>
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d004      	beq.n	8006700 <USB_EPStartXfer+0x844>
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fa:	3301      	adds	r3, #1
 80066fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29a      	uxth	r2, r3
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670a:	b29b      	uxth	r3, r3
 800670c:	029b      	lsls	r3, r3, #10
 800670e:	b29b      	uxth	r3, r3
 8006710:	4313      	orrs	r3, r2
 8006712:	b29a      	uxth	r2, r3
 8006714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e024      	b.n	8006764 <USB_EPStartXfer+0x8a8>
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d11c      	bne.n	8006764 <USB_EPStartXfer+0x8a8>
 800672a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006738:	b29b      	uxth	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800673e:	4413      	add	r3, r2
 8006740:	643b      	str	r3, [r7, #64]	@ 0x40
 8006742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	011a      	lsls	r2, r3, #4
 8006750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006752:	4413      	add	r3, r2
 8006754:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	b29a      	uxth	r2, r3
 8006760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006762:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	895b      	ldrh	r3, [r3, #10]
 8006770:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6959      	ldr	r1, [r3, #20]
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006784:	b29b      	uxth	r3, r3
 8006786:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800678a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800678e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006792:	6800      	ldr	r0, [r0, #0]
 8006794:	f001 f881 	bl	800789a <USB_WritePMA>
 8006798:	e227      	b.n	8006bea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800679a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80067aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80067cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80067d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80067f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006802:	b29b      	uxth	r3, r3
 8006804:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006826:	4413      	add	r3, r2
 8006828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800682a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	011a      	lsls	r2, r3, #4
 8006838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800683a:	4413      	add	r3, r2
 800683c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006840:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	b29a      	uxth	r2, r3
 8006848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800684a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800684c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	891b      	ldrh	r3, [r3, #8]
 8006858:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6959      	ldr	r1, [r3, #20]
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	b29b      	uxth	r3, r3
 800686e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006872:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006876:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	f001 f80d 	bl	800789a <USB_WritePMA>
 8006880:	e1b3      	b.n	8006bea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	1ad2      	subs	r2, r2, r3
 8006894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 80c6 	beq.w	8006a54 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80068d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d177      	bne.n	80069d4 <USB_EPStartXfer+0xb18>
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068fe:	b29b      	uxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006904:	4413      	add	r3, r2
 8006906:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	011a      	lsls	r2, r3, #4
 8006916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006918:	4413      	add	r3, r2
 800691a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800691e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800692a:	b29a      	uxth	r2, r3
 800692c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006934:	2b3e      	cmp	r3, #62	@ 0x3e
 8006936:	d921      	bls.n	800697c <USB_EPStartXfer+0xac0>
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693c:	095b      	lsrs	r3, r3, #5
 800693e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <USB_EPStartXfer+0xa9c>
 800694e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006952:	3b01      	subs	r3, #1
 8006954:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006962:	b29b      	uxth	r3, r3
 8006964:	029b      	lsls	r3, r3, #10
 8006966:	b29b      	uxth	r3, r3
 8006968:	4313      	orrs	r3, r2
 800696a:	b29b      	uxth	r3, r3
 800696c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006974:	b29a      	uxth	r2, r3
 8006976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	e050      	b.n	8006a1e <USB_EPStartXfer+0xb62>
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <USB_EPStartXfer+0xade>
 8006984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800698e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006992:	b29a      	uxth	r2, r3
 8006994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	e041      	b.n	8006a1e <USB_EPStartXfer+0xb62>
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <USB_EPStartXfer+0xafe>
 80069b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069b4:	3301      	adds	r3, #1
 80069b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	029b      	lsls	r3, r3, #10
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069d0:	801a      	strh	r2, [r3, #0]
 80069d2:	e024      	b.n	8006a1e <USB_EPStartXfer+0xb62>
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d11c      	bne.n	8006a1e <USB_EPStartXfer+0xb62>
 80069e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069f8:	4413      	add	r3, r2
 80069fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80069fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	011a      	lsls	r2, r3, #4
 8006a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	895b      	ldrh	r3, [r3, #10]
 8006a2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6959      	ldr	r1, [r3, #20]
 8006a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f000 ff24 	bl	800789a <USB_WritePMA>
 8006a52:	e0ca      	b.n	8006bea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d177      	bne.n	8006b54 <USB_EPStartXfer+0xc98>
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a84:	4413      	add	r3, r2
 8006a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	011a      	lsls	r2, r3, #4
 8006a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ab6:	d921      	bls.n	8006afc <USB_EPStartXfer+0xc40>
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <USB_EPStartXfer+0xc1c>
 8006ace:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	029b      	lsls	r3, r3, #10
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	e05c      	b.n	8006bb6 <USB_EPStartXfer+0xcfa>
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <USB_EPStartXfer+0xc5e>
 8006b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	e04d      	b.n	8006bb6 <USB_EPStartXfer+0xcfa>
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <USB_EPStartXfer+0xc7e>
 8006b30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b34:	3301      	adds	r3, #1
 8006b36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	029b      	lsls	r3, r3, #10
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b50:	801a      	strh	r2, [r3, #0]
 8006b52:	e030      	b.n	8006bb6 <USB_EPStartXfer+0xcfa>
 8006b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d128      	bne.n	8006bb6 <USB_EPStartXfer+0xcfa>
 8006b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b88:	4413      	add	r3, r2
 8006b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	011a      	lsls	r2, r3, #4
 8006b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006bb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	891b      	ldrh	r3, [r3, #8]
 8006bc2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6959      	ldr	r1, [r3, #20]
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006bdc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006be0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006be4:	6800      	ldr	r0, [r0, #0]
 8006be6:	f000 fe58 	bl	800789a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c10:	817b      	strh	r3, [r7, #10]
 8006c12:	897b      	ldrh	r3, [r7, #10]
 8006c14:	f083 0310 	eor.w	r3, r3, #16
 8006c18:	817b      	strh	r3, [r7, #10]
 8006c1a:	897b      	ldrh	r3, [r7, #10]
 8006c1c:	f083 0320 	eor.w	r3, r3, #32
 8006c20:	817b      	strh	r3, [r7, #10]
 8006c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	441a      	add	r2, r3
 8006c3c:	897b      	ldrh	r3, [r7, #10]
 8006c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	8013      	strh	r3, [r2, #0]
 8006c52:	f000 bcde 	b.w	8007612 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	7b1b      	ldrb	r3, [r3, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 80bb 	bne.w	8006dde <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d917      	bls.n	8006cb4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	619a      	str	r2, [r3, #24]
 8006cb2:	e00e      	b.n	8006cd2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	011a      	lsls	r2, r3, #4
 8006d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d0e:	4413      	add	r3, r2
 8006d10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d30:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d32:	d924      	bls.n	8006d7e <USB_EPStartXfer+0xec2>
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d104      	bne.n	8006d54 <USB_EPStartXfer+0xe98>
 8006d4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	029b      	lsls	r3, r3, #10
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	4313      	orrs	r3, r2
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	f000 bc10 	b.w	800759e <USB_EPStartXfer+0x16e2>
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <USB_EPStartXfer+0xee4>
 8006d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e3fe      	b.n	800759e <USB_EPStartXfer+0x16e2>
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <USB_EPStartXfer+0xf04>
 8006db6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006dba:	3301      	adds	r3, #1
 8006dbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	029b      	lsls	r3, r3, #10
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dda:	801a      	strh	r2, [r3, #0]
 8006ddc:	e3df      	b.n	800759e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	78db      	ldrb	r3, [r3, #3]
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	f040 8218 	bne.w	8007220 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f040 809d 	bne.w	8006f3c <USB_EPStartXfer+0x1080>
 8006e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e26:	4413      	add	r3, r2
 8006e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	011a      	lsls	r2, r3, #4
 8006e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e3e:	4413      	add	r3, r2
 8006e40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e6a:	d92b      	bls.n	8006ec4 <USB_EPStartXfer+0x1008>
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d104      	bne.n	8006e9c <USB_EPStartXfer+0xfe0>
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e96:	3b01      	subs	r3, #1
 8006e98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	029b      	lsls	r3, r3, #10
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e070      	b.n	8006fa6 <USB_EPStartXfer+0x10ea>
 8006ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10c      	bne.n	8006eee <USB_EPStartXfer+0x1032>
 8006ed4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	e05b      	b.n	8006fa6 <USB_EPStartXfer+0x10ea>
 8006eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <USB_EPStartXfer+0x1062>
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f18:	3301      	adds	r3, #1
 8006f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	029b      	lsls	r3, r3, #10
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4313      	orrs	r3, r2
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	e034      	b.n	8006fa6 <USB_EPStartXfer+0x10ea>
 8006f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d12c      	bne.n	8006fa6 <USB_EPStartXfer+0x10ea>
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f70:	4413      	add	r3, r2
 8006f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	011a      	lsls	r2, r3, #4
 8006f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f88:	4413      	add	r3, r2
 8006f8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f040 809d 	bne.w	8007100 <USB_EPStartXfer+0x1244>
 8006fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fea:	4413      	add	r3, r2
 8006fec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	011a      	lsls	r2, r3, #4
 8006ffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007002:	4413      	add	r3, r2
 8007004:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800700c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b3e      	cmp	r3, #62	@ 0x3e
 800702e:	d92b      	bls.n	8007088 <USB_EPStartXfer+0x11cc>
 8007030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 031f 	and.w	r3, r3, #31
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <USB_EPStartXfer+0x11a4>
 8007056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800705a:	3b01      	subs	r3, #1
 800705c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800706c:	b29b      	uxth	r3, r3
 800706e:	029b      	lsls	r3, r3, #10
 8007070:	b29b      	uxth	r3, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	b29b      	uxth	r3, r3
 8007076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707e:	b29a      	uxth	r2, r3
 8007080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	e069      	b.n	800715c <USB_EPStartXfer+0x12a0>
 8007088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10c      	bne.n	80070b2 <USB_EPStartXfer+0x11f6>
 8007098:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e054      	b.n	800715c <USB_EPStartXfer+0x12a0>
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <USB_EPStartXfer+0x1226>
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070dc:	3301      	adds	r3, #1
 80070de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	4313      	orrs	r3, r2
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	e02d      	b.n	800715c <USB_EPStartXfer+0x12a0>
 8007100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d125      	bne.n	800715c <USB_EPStartXfer+0x12a0>
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800711e:	b29b      	uxth	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007126:	4413      	add	r3, r2
 8007128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	011a      	lsls	r2, r3, #4
 800713a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800713e:	4413      	add	r3, r2
 8007140:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007144:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	b29a      	uxth	r2, r3
 8007156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800715a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 8218 	beq.w	800759e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800716e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800718e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <USB_EPStartXfer+0x12ea>
 800719a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800719e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f040 81f5 	bne.w	800759e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 81ee 	bne.w	800759e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80071c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80071ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800720a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800720e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007216:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800721a:	b29b      	uxth	r3, r3
 800721c:	8013      	strh	r3, [r2, #0]
 800721e:	e1be      	b.n	800759e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	78db      	ldrb	r3, [r3, #3]
 800722c:	2b01      	cmp	r3, #1
 800722e:	f040 81b4 	bne.w	800759a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	429a      	cmp	r2, r3
 800724c:	d917      	bls.n	800727e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	619a      	str	r2, [r3, #24]
 800727c:	e00e      	b.n	800729c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800728e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2200      	movs	r2, #0
 800729a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800729c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f040 8085 	bne.w	80073b8 <USB_EPStartXfer+0x14fc>
 80072ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072d2:	4413      	add	r3, r2
 80072d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	011a      	lsls	r2, r3, #4
 80072e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007300:	b29a      	uxth	r2, r3
 8007302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	2b3e      	cmp	r3, #62	@ 0x3e
 800730e:	d923      	bls.n	8007358 <USB_EPStartXfer+0x149c>
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <USB_EPStartXfer+0x1474>
 8007326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800732a:	3b01      	subs	r3, #1
 800732c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29a      	uxth	r2, r3
 8007338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800733c:	b29b      	uxth	r3, r3
 800733e:	029b      	lsls	r3, r3, #10
 8007340:	b29b      	uxth	r3, r3
 8007342:	4313      	orrs	r3, r2
 8007344:	b29b      	uxth	r3, r3
 8007346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	e060      	b.n	800741a <USB_EPStartXfer+0x155e>
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10c      	bne.n	800737a <USB_EPStartXfer+0x14be>
 8007360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007370:	b29a      	uxth	r2, r3
 8007372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	e04f      	b.n	800741a <USB_EPStartXfer+0x155e>
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <USB_EPStartXfer+0x14de>
 8007390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007394:	3301      	adds	r3, #1
 8007396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800739a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	029b      	lsls	r3, r3, #10
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e030      	b.n	800741a <USB_EPStartXfer+0x155e>
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d128      	bne.n	800741a <USB_EPStartXfer+0x155e>
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073ec:	4413      	add	r3, r2
 80073ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80073f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	011a      	lsls	r2, r3, #4
 8007400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007404:	4413      	add	r3, r2
 8007406:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800740a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	b29a      	uxth	r2, r3
 8007414:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007418:	801a      	strh	r2, [r3, #0]
 800741a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 8085 	bne.w	8007544 <USB_EPStartXfer+0x1688>
 800743a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800745e:	4413      	add	r3, r2
 8007460:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	011a      	lsls	r2, r3, #4
 8007472:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007476:	4413      	add	r3, r2
 8007478:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800747c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800748c:	b29a      	uxth	r2, r3
 800748e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007492:	801a      	strh	r2, [r3, #0]
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007498:	2b3e      	cmp	r3, #62	@ 0x3e
 800749a:	d923      	bls.n	80074e4 <USB_EPStartXfer+0x1628>
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <USB_EPStartXfer+0x1600>
 80074b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074b6:	3b01      	subs	r3, #1
 80074b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	029b      	lsls	r3, r3, #10
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	4313      	orrs	r3, r2
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074da:	b29a      	uxth	r2, r3
 80074dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	e05c      	b.n	800759e <USB_EPStartXfer+0x16e2>
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10c      	bne.n	8007506 <USB_EPStartXfer+0x164a>
 80074ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007502:	801a      	strh	r2, [r3, #0]
 8007504:	e04b      	b.n	800759e <USB_EPStartXfer+0x16e2>
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	085b      	lsrs	r3, r3, #1
 800750c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <USB_EPStartXfer+0x166a>
 800751c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007520:	3301      	adds	r3, #1
 8007522:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007532:	b29b      	uxth	r3, r3
 8007534:	029b      	lsls	r3, r3, #10
 8007536:	b29b      	uxth	r3, r3
 8007538:	4313      	orrs	r3, r2
 800753a:	b29a      	uxth	r2, r3
 800753c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	e02c      	b.n	800759e <USB_EPStartXfer+0x16e2>
 8007544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d124      	bne.n	800759e <USB_EPStartXfer+0x16e2>
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007562:	b29b      	uxth	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800756a:	4413      	add	r3, r2
 800756c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	011a      	lsls	r2, r3, #4
 800757e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007582:	4413      	add	r3, r2
 8007584:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007588:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007590:	b29a      	uxth	r2, r3
 8007592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	e001      	b.n	800759e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e03a      	b.n	8007614 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80075c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80075cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80075d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80075d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80075d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80075dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	441a      	add	r2, r3
 80075fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80075fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800760a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800760e:	b29b      	uxth	r3, r3
 8007610:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d020      	beq.n	8007672 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007646:	81bb      	strh	r3, [r7, #12]
 8007648:	89bb      	ldrh	r3, [r7, #12]
 800764a:	f083 0310 	eor.w	r3, r3, #16
 800764e:	81bb      	strh	r3, [r7, #12]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	89bb      	ldrh	r3, [r7, #12]
 800765c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007664:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800766c:	b29b      	uxth	r3, r3
 800766e:	8013      	strh	r3, [r2, #0]
 8007670:	e01f      	b.n	80076b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007688:	81fb      	strh	r3, [r7, #14]
 800768a:	89fb      	ldrh	r3, [r7, #14]
 800768c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007690:	81fb      	strh	r3, [r7, #14]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	441a      	add	r2, r3
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr

080076be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076be:	b480      	push	{r7}
 80076c0:	b087      	sub	sp, #28
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	7b1b      	ldrb	r3, [r3, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 809d 	bne.w	800780c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04c      	beq.n	8007774 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	823b      	strh	r3, [r7, #16]
 80076e8:	8a3b      	ldrh	r3, [r7, #16]
 80076ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01b      	beq.n	800772a <USB_EPClearStall+0x6c>
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007708:	81fb      	strh	r3, [r7, #14]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	441a      	add	r2, r3
 8007714:	89fb      	ldrh	r3, [r7, #14]
 8007716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800771a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800771e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007722:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007726:	b29b      	uxth	r3, r3
 8007728:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	78db      	ldrb	r3, [r3, #3]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d06c      	beq.n	800780c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007748:	81bb      	strh	r3, [r7, #12]
 800774a:	89bb      	ldrh	r3, [r7, #12]
 800774c:	f083 0320 	eor.w	r3, r3, #32
 8007750:	81bb      	strh	r3, [r7, #12]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	441a      	add	r2, r3
 800775c:	89bb      	ldrh	r3, [r7, #12]
 800775e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800776a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800776e:	b29b      	uxth	r3, r3
 8007770:	8013      	strh	r3, [r2, #0]
 8007772:	e04b      	b.n	800780c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	82fb      	strh	r3, [r7, #22]
 8007782:	8afb      	ldrh	r3, [r7, #22]
 8007784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01b      	beq.n	80077c4 <USB_EPClearStall+0x106>
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800779e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a2:	82bb      	strh	r3, [r7, #20]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	441a      	add	r2, r3
 80077ae:	8abb      	ldrh	r3, [r7, #20]
 80077b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077da:	827b      	strh	r3, [r7, #18]
 80077dc:	8a7b      	ldrh	r3, [r7, #18]
 80077de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077e2:	827b      	strh	r3, [r7, #18]
 80077e4:	8a7b      	ldrh	r3, [r7, #18]
 80077e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077ea:	827b      	strh	r3, [r7, #18]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	8a7b      	ldrh	r3, [r7, #18]
 80077f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007808:	b29b      	uxth	r3, r3
 800780a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr

08007818 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d103      	bne.n	8007832 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2280      	movs	r2, #128	@ 0x80
 800782e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	bc80      	pop	{r7}
 800783c:	4770      	bx	lr

0800783e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr

08007852 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr

08007866 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007874:	b29b      	uxth	r3, r3
 8007876:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007878:	68fb      	ldr	r3, [r7, #12]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	bc80      	pop	{r7}
 8007898:	4770      	bx	lr

0800789a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800789a:	b480      	push	{r7}
 800789c:	b08b      	sub	sp, #44	@ 0x2c
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	4611      	mov	r1, r2
 80078a6:	461a      	mov	r2, r3
 80078a8:	460b      	mov	r3, r1
 80078aa:	80fb      	strh	r3, [r7, #6]
 80078ac:	4613      	mov	r3, r2
 80078ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80078b0:	88bb      	ldrh	r3, [r7, #4]
 80078b2:	3301      	adds	r3, #1
 80078b4:	085b      	lsrs	r3, r3, #1
 80078b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078c0:	88fb      	ldrh	r3, [r7, #6]
 80078c2:	005a      	lsls	r2, r3, #1
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d2:	e01e      	b.n	8007912 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	3301      	adds	r3, #1
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	b21a      	sxth	r2, r3
 80078e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	8a7a      	ldrh	r2, [r7, #18]
 80078f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	3302      	adds	r3, #2
 80078f8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	3302      	adds	r3, #2
 80078fe:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	3301      	adds	r3, #1
 8007904:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	3301      	adds	r3, #1
 800790a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	3b01      	subs	r3, #1
 8007910:	627b      	str	r3, [r7, #36]	@ 0x24
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1dd      	bne.n	80078d4 <USB_WritePMA+0x3a>
  }
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	372c      	adds	r7, #44	@ 0x2c
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr

08007924 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007924:	b480      	push	{r7}
 8007926:	b08b      	sub	sp, #44	@ 0x2c
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4611      	mov	r1, r2
 8007930:	461a      	mov	r2, r3
 8007932:	460b      	mov	r3, r1
 8007934:	80fb      	strh	r3, [r7, #6]
 8007936:	4613      	mov	r3, r2
 8007938:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800793a:	88bb      	ldrh	r3, [r7, #4]
 800793c:	085b      	lsrs	r3, r3, #1
 800793e:	b29b      	uxth	r3, r3
 8007940:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	005a      	lsls	r2, r3, #1
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007956:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	627b      	str	r3, [r7, #36]	@ 0x24
 800795c:	e01b      	b.n	8007996 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	3302      	adds	r3, #2
 800796a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	b2da      	uxtb	r2, r3
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	3301      	adds	r3, #1
 8007978:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	0a1b      	lsrs	r3, r3, #8
 800797e:	b2da      	uxtb	r2, r3
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	3301      	adds	r3, #1
 8007988:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	3302      	adds	r3, #2
 800798e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	3b01      	subs	r3, #1
 8007994:	627b      	str	r3, [r7, #36]	@ 0x24
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e0      	bne.n	800795e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800799c:	88bb      	ldrh	r3, [r7, #4]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d007      	beq.n	80079b8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	701a      	strb	r2, [r3, #0]
  }
}
 80079b8:	bf00      	nop
 80079ba:	372c      	adds	r7, #44	@ 0x2c
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7c1b      	ldrb	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d115      	bne.n	8007a06 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079de:	2202      	movs	r2, #2
 80079e0:	2181      	movs	r1, #129	@ 0x81
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 feb7 	bl	8009756 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079f2:	2202      	movs	r2, #2
 80079f4:	2101      	movs	r1, #1
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 fead 	bl	8009756 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007a04:	e012      	b.n	8007a2c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a06:	2340      	movs	r3, #64	@ 0x40
 8007a08:	2202      	movs	r2, #2
 8007a0a:	2181      	movs	r1, #129	@ 0x81
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fea2 	bl	8009756 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a18:	2340      	movs	r3, #64	@ 0x40
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fe99 	bl	8009756 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	2203      	movs	r2, #3
 8007a30:	2182      	movs	r1, #130	@ 0x82
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 fe8f 	bl	8009756 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a3e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007a42:	f001 ffaf 	bl	80099a4 <USBD_static_malloc>
 8007a46:	4602      	mov	r2, r0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	e026      	b.n	8007aac <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a64:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	7c1b      	ldrb	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d109      	bne.n	8007a9c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a92:	2101      	movs	r1, #1
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 ff4e 	bl	8009936 <USBD_LL_PrepareReceive>
 8007a9a:	e007      	b.n	8007aac <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007aa2:	2340      	movs	r3, #64	@ 0x40
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 ff45 	bl	8009936 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ac6:	2181      	movs	r1, #129	@ 0x81
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fe6a 	bl	80097a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fe63 	bl	80097a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ae4:	2182      	movs	r1, #130	@ 0x82
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fe5b 	bl	80097a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00e      	beq.n	8007b1a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 ff55 	bl	80099bc <USBD_static_free>
    pdev->pClassData = NULL;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d039      	beq.n	8007bc2 <USBD_CDC_Setup+0x9e>
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d17f      	bne.n	8007c52 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	88db      	ldrh	r3, [r3, #6]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d029      	beq.n	8007bae <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b25b      	sxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da11      	bge.n	8007b88 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007b70:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	88d2      	ldrh	r2, [r2, #6]
 8007b76:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b78:	6939      	ldr	r1, [r7, #16]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	88db      	ldrh	r3, [r3, #6]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 fa05 	bl	8008f90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007b86:	e06b      	b.n	8007c60 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	785a      	ldrb	r2, [r3, #1]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	88db      	ldrh	r3, [r3, #6]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b9e:	6939      	ldr	r1, [r7, #16]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	88db      	ldrh	r3, [r3, #6]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fa20 	bl	8008fec <USBD_CtlPrepareRx>
      break;
 8007bac:	e058      	b.n	8007c60 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	7850      	ldrb	r0, [r2, #1]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	4798      	blx	r3
      break;
 8007bc0:	e04e      	b.n	8007c60 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b0b      	cmp	r3, #11
 8007bc8:	d02e      	beq.n	8007c28 <USBD_CDC_Setup+0x104>
 8007bca:	2b0b      	cmp	r3, #11
 8007bcc:	dc38      	bgt.n	8007c40 <USBD_CDC_Setup+0x11c>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <USBD_CDC_Setup+0xb4>
 8007bd2:	2b0a      	cmp	r3, #10
 8007bd4:	d014      	beq.n	8007c00 <USBD_CDC_Setup+0xdc>
 8007bd6:	e033      	b.n	8007c40 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d107      	bne.n	8007bf2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007be2:	f107 030c 	add.w	r3, r7, #12
 8007be6:	2202      	movs	r2, #2
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 f9d0 	bl	8008f90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bf0:	e02e      	b.n	8007c50 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 f961 	bl	8008ebc <USBD_CtlError>
            ret = USBD_FAIL;
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8007bfe:	e027      	b.n	8007c50 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d107      	bne.n	8007c1a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c0a:	f107 030f 	add.w	r3, r7, #15
 8007c0e:	2201      	movs	r2, #1
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 f9bc 	bl	8008f90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c18:	e01a      	b.n	8007c50 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 f94d 	bl	8008ebc <USBD_CtlError>
            ret = USBD_FAIL;
 8007c22:	2302      	movs	r3, #2
 8007c24:	75fb      	strb	r3, [r7, #23]
          break;
 8007c26:	e013      	b.n	8007c50 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d00d      	beq.n	8007c4e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 f941 	bl	8008ebc <USBD_CtlError>
            ret = USBD_FAIL;
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c3e:	e006      	b.n	8007c4e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 f93a 	bl	8008ebc <USBD_CtlError>
          ret = USBD_FAIL;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	75fb      	strb	r3, [r7, #23]
          break;
 8007c4c:	e000      	b.n	8007c50 <USBD_CDC_Setup+0x12c>
          break;
 8007c4e:	bf00      	nop
      }
      break;
 8007c50:	e006      	b.n	8007c60 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f931 	bl	8008ebc <USBD_CtlError>
      ret = USBD_FAIL;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5e:	bf00      	nop
  }

  return ret;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c7c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c84:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d03a      	beq.n	8007d06 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c90:	78fa      	ldrb	r2, [r7, #3]
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	331c      	adds	r3, #28
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d029      	beq.n	8007cfa <USBD_CDC_DataIn+0x90>
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	331c      	adds	r3, #28
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	78f9      	ldrb	r1, [r7, #3]
 8007cba:	68b8      	ldr	r0, [r7, #8]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	4403      	add	r3, r0
 8007cc6:	3320      	adds	r3, #32
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cce:	fb01 f303 	mul.w	r3, r1, r3
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d110      	bne.n	8007cfa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	331c      	adds	r3, #28
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cec:	78f9      	ldrb	r1, [r7, #3]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 fdfc 	bl	80098f0 <USBD_LL_Transmit>
 8007cf8:	e003      	b.n	8007d02 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	e000      	b.n	8007d08 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007d06:	2302      	movs	r3, #2
  }
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 fe27 	bl	800997c <USBD_LL_GetRxDataSize>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00d      	beq.n	8007d5c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d54:	4611      	mov	r1, r2
 8007d56:	4798      	blx	r3

    return USBD_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e000      	b.n	8007d5e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007d5c:	2302      	movs	r3, #2
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d74:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d014      	beq.n	8007daa <USBD_CDC_EP0_RxReady+0x44>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007d86:	2bff      	cmp	r3, #255	@ 0xff
 8007d88:	d00f      	beq.n	8007daa <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007d98:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007da0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	22ff      	movs	r2, #255	@ 0xff
 8007da6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2243      	movs	r2, #67	@ 0x43
 8007dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007dc2:	4b03      	ldr	r3, [pc, #12]	@ (8007dd0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000098 	.word	0x20000098

08007dd4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2243      	movs	r2, #67	@ 0x43
 8007de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007de2:	4b03      	ldr	r3, [pc, #12]	@ (8007df0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20000054 	.word	0x20000054

08007df4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2243      	movs	r2, #67	@ 0x43
 8007e00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007e02:	4b03      	ldr	r3, [pc, #12]	@ (8007e10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	200000dc 	.word	0x200000dc

08007e14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	220a      	movs	r2, #10
 8007e20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e22:	4b03      	ldr	r3, [pc, #12]	@ (8007e30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000010 	.word	0x20000010

08007e34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr

08007e60 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e74:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007e7e:	88fa      	ldrh	r2, [r7, #6]
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr

08007e92 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr

08007eb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01c      	beq.n	8007f0c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d115      	bne.n	8007f08 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2181      	movs	r1, #129	@ 0x81
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 fcf6 	bl	80098f0 <USBD_LL_Transmit>

      return USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e002      	b.n	8007f0e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007f0c:	2302      	movs	r3, #2
  }
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d017      	beq.n	8007f60 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	7c1b      	ldrb	r3, [r3, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d109      	bne.n	8007f4c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f42:	2101      	movs	r1, #1
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fcf6 	bl	8009936 <USBD_LL_PrepareReceive>
 8007f4a:	e007      	b.n	8007f5c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f52:	2340      	movs	r3, #64	@ 0x40
 8007f54:	2101      	movs	r1, #1
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fced 	bl	8009936 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e000      	b.n	8007f62 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f60:	2302      	movs	r3, #2
  }
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	4613      	mov	r3, r2
 8007f76:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e01a      	b.n	8007fb8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	79fa      	ldrb	r2, [r7, #7]
 8007fae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f001 fb5b 	bl	800966c <USBD_LL_Init>

  return USBD_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d006      	beq.n	8007fe2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	e001      	b.n	8007fe6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr

08007ff2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 fb90 	bl	8009720 <USBD_LL_Start>

  return USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr

0800801e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	460b      	mov	r3, r1
 8008028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800802a:	2302      	movs	r3, #2
 800802c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00c      	beq.n	8008052 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	4611      	mov	r1, r2
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	4798      	blx	r3
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	78fa      	ldrb	r2, [r7, #3]
 8008072:	4611      	mov	r1, r2
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fed8 	bl	8008e4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80080a8:	461a      	mov	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d016      	beq.n	80080ec <USBD_LL_SetupStage+0x6a>
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d81c      	bhi.n	80080fc <USBD_LL_SetupStage+0x7a>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <USBD_LL_SetupStage+0x4a>
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d008      	beq.n	80080dc <USBD_LL_SetupStage+0x5a>
 80080ca:	e017      	b.n	80080fc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f9cb 	bl	8008470 <USBD_StdDevReq>
      break;
 80080da:	e01a      	b.n	8008112 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fa2d 	bl	8008544 <USBD_StdItfReq>
      break;
 80080ea:	e012      	b.n	8008112 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa6d 	bl	80085d4 <USBD_StdEPReq>
      break;
 80080fa:	e00a      	b.n	8008112 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008102:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008106:	b2db      	uxtb	r3, r3
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fb68 	bl	80097e0 <USBD_LL_StallEP>
      break;
 8008110:	bf00      	nop
  }

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	460b      	mov	r3, r1
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d14b      	bne.n	80081c8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008136:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800813e:	2b03      	cmp	r3, #3
 8008140:	d134      	bne.n	80081ac <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	429a      	cmp	r2, r3
 800814c:	d919      	bls.n	8008182 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008164:	429a      	cmp	r2, r3
 8008166:	d203      	bcs.n	8008170 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800816c:	b29b      	uxth	r3, r3
 800816e:	e002      	b.n	8008176 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008174:	b29b      	uxth	r3, r3
 8008176:	461a      	mov	r2, r3
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 ff54 	bl	8009028 <USBD_CtlContinueRx>
 8008180:	e038      	b.n	80081f4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008194:	2b03      	cmp	r3, #3
 8008196:	d105      	bne.n	80081a4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 ff51 	bl	800904c <USBD_CtlSendStatus>
 80081aa:	e023      	b.n	80081f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081b2:	2b05      	cmp	r3, #5
 80081b4:	d11e      	bne.n	80081f4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081be:	2100      	movs	r1, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f001 fb0d 	bl	80097e0 <USBD_LL_StallEP>
 80081c6:	e015      	b.n	80081f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00d      	beq.n	80081f0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d108      	bne.n	80081f0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	7afa      	ldrb	r2, [r7, #11]
 80081e8:	4611      	mov	r1, r2
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	4798      	blx	r3
 80081ee:	e001      	b.n	80081f4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081f0:	2302      	movs	r3, #2
 80081f2:	e000      	b.n	80081f6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b086      	sub	sp, #24
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	460b      	mov	r3, r1
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d17f      	bne.n	8008312 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3314      	adds	r3, #20
 8008216:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800821e:	2b02      	cmp	r3, #2
 8008220:	d15c      	bne.n	80082dc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	d915      	bls.n	800825a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	1ad2      	subs	r2, r2, r3
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	b29b      	uxth	r3, r3
 8008242:	461a      	mov	r2, r3
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 febe 	bl	8008fc8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800824c:	2300      	movs	r3, #0
 800824e:	2200      	movs	r2, #0
 8008250:	2100      	movs	r1, #0
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f001 fb6f 	bl	8009936 <USBD_LL_PrepareReceive>
 8008258:	e04e      	b.n	80082f8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	6912      	ldr	r2, [r2, #16]
 8008262:	fbb3 f1f2 	udiv	r1, r3, r2
 8008266:	fb01 f202 	mul.w	r2, r1, r2
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d11c      	bne.n	80082aa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008278:	429a      	cmp	r2, r3
 800827a:	d316      	bcc.n	80082aa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008286:	429a      	cmp	r2, r3
 8008288:	d20f      	bcs.n	80082aa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fe9a 	bl	8008fc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800829c:	2300      	movs	r3, #0
 800829e:	2200      	movs	r2, #0
 80082a0:	2100      	movs	r1, #0
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f001 fb47 	bl	8009936 <USBD_LL_PrepareReceive>
 80082a8:	e026      	b.n	80082f8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d105      	bne.n	80082cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082cc:	2180      	movs	r1, #128	@ 0x80
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f001 fa86 	bl	80097e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 fecc 	bl	8009072 <USBD_CtlReceiveStatus>
 80082da:	e00d      	b.n	80082f8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d004      	beq.n	80082f0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d103      	bne.n	80082f8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082f0:	2180      	movs	r1, #128	@ 0x80
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f001 fa74 	bl	80097e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d11d      	bne.n	800833e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff fe81 	bl	800800a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008310:	e015      	b.n	800833e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00d      	beq.n	800833a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008324:	2b03      	cmp	r3, #3
 8008326:	d108      	bne.n	800833a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	7afa      	ldrb	r2, [r7, #11]
 8008332:	4611      	mov	r1, r2
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	4798      	blx	r3
 8008338:	e001      	b.n	800833e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800833a:	2302      	movs	r3, #2
 800833c:	e000      	b.n	8008340 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008350:	2340      	movs	r3, #64	@ 0x40
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 f9fd 	bl	8009756 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2240      	movs	r2, #64	@ 0x40
 8008368:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800836c:	2340      	movs	r3, #64	@ 0x40
 800836e:	2200      	movs	r2, #0
 8008370:	2180      	movs	r1, #128	@ 0x80
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 f9ef 	bl	8009756 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2240      	movs	r2, #64	@ 0x40
 8008382:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d009      	beq.n	80083c0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6852      	ldr	r2, [r2, #4]
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	4611      	mov	r1, r2
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
  }

  return USBD_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr

080083e8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2204      	movs	r2, #4
 8008400:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr

08008410 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800841e:	2b04      	cmp	r3, #4
 8008420:	d105      	bne.n	800842e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	bc80      	pop	{r7}
 8008438:	4770      	bx	lr

0800843a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008448:	2b03      	cmp	r3, #3
 800844a:	d10b      	bne.n	8008464 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d005      	beq.n	8008464 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008486:	2b40      	cmp	r3, #64	@ 0x40
 8008488:	d005      	beq.n	8008496 <USBD_StdDevReq+0x26>
 800848a:	2b40      	cmp	r3, #64	@ 0x40
 800848c:	d84f      	bhi.n	800852e <USBD_StdDevReq+0xbe>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d009      	beq.n	80084a6 <USBD_StdDevReq+0x36>
 8008492:	2b20      	cmp	r3, #32
 8008494:	d14b      	bne.n	800852e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
      break;
 80084a4:	e048      	b.n	8008538 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	2b09      	cmp	r3, #9
 80084ac:	d839      	bhi.n	8008522 <USBD_StdDevReq+0xb2>
 80084ae:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <USBD_StdDevReq+0x44>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	08008505 	.word	0x08008505
 80084b8:	08008519 	.word	0x08008519
 80084bc:	08008523 	.word	0x08008523
 80084c0:	0800850f 	.word	0x0800850f
 80084c4:	08008523 	.word	0x08008523
 80084c8:	080084e7 	.word	0x080084e7
 80084cc:	080084dd 	.word	0x080084dd
 80084d0:	08008523 	.word	0x08008523
 80084d4:	080084fb 	.word	0x080084fb
 80084d8:	080084f1 	.word	0x080084f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f9dc 	bl	800889c <USBD_GetDescriptor>
          break;
 80084e4:	e022      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fb3f 	bl	8008b6c <USBD_SetAddress>
          break;
 80084ee:	e01d      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fb7e 	bl	8008bf4 <USBD_SetConfig>
          break;
 80084f8:	e018      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fc07 	bl	8008d10 <USBD_GetConfig>
          break;
 8008502:	e013      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fc37 	bl	8008d7a <USBD_GetStatus>
          break;
 800850c:	e00e      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fc65 	bl	8008de0 <USBD_SetFeature>
          break;
 8008516:	e009      	b.n	800852c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fc74 	bl	8008e08 <USBD_ClrFeature>
          break;
 8008520:	e004      	b.n	800852c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fcc9 	bl	8008ebc <USBD_CtlError>
          break;
 800852a:	bf00      	nop
      }
      break;
 800852c:	e004      	b.n	8008538 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fcc3 	bl	8008ebc <USBD_CtlError>
      break;
 8008536:	bf00      	nop
  }

  return ret;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop

08008544 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800855a:	2b40      	cmp	r3, #64	@ 0x40
 800855c:	d005      	beq.n	800856a <USBD_StdItfReq+0x26>
 800855e:	2b40      	cmp	r3, #64	@ 0x40
 8008560:	d82e      	bhi.n	80085c0 <USBD_StdItfReq+0x7c>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <USBD_StdItfReq+0x26>
 8008566:	2b20      	cmp	r3, #32
 8008568:	d12a      	bne.n	80085c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008570:	3b01      	subs	r3, #1
 8008572:	2b02      	cmp	r3, #2
 8008574:	d81d      	bhi.n	80085b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	889b      	ldrh	r3, [r3, #4]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b01      	cmp	r3, #1
 800857e:	d813      	bhi.n	80085a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	4798      	blx	r3
 800858e:	4603      	mov	r3, r0
 8008590:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d110      	bne.n	80085bc <USBD_StdItfReq+0x78>
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10d      	bne.n	80085bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fd53 	bl	800904c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085a6:	e009      	b.n	80085bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fc86 	bl	8008ebc <USBD_CtlError>
          break;
 80085b0:	e004      	b.n	80085bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fc81 	bl	8008ebc <USBD_CtlError>
          break;
 80085ba:	e000      	b.n	80085be <USBD_StdItfReq+0x7a>
          break;
 80085bc:	bf00      	nop
      }
      break;
 80085be:	e004      	b.n	80085ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fc7a 	bl	8008ebc <USBD_CtlError>
      break;
 80085c8:	bf00      	nop
  }

  return USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	889b      	ldrh	r3, [r3, #4]
 80085e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085f0:	2b40      	cmp	r3, #64	@ 0x40
 80085f2:	d007      	beq.n	8008604 <USBD_StdEPReq+0x30>
 80085f4:	2b40      	cmp	r3, #64	@ 0x40
 80085f6:	f200 8146 	bhi.w	8008886 <USBD_StdEPReq+0x2b2>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <USBD_StdEPReq+0x40>
 80085fe:	2b20      	cmp	r3, #32
 8008600:	f040 8141 	bne.w	8008886 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
      break;
 8008612:	e13d      	b.n	8008890 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800861c:	2b20      	cmp	r3, #32
 800861e:	d10a      	bne.n	8008636 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	e12d      	b.n	8008892 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	2b03      	cmp	r3, #3
 800863c:	d007      	beq.n	800864e <USBD_StdEPReq+0x7a>
 800863e:	2b03      	cmp	r3, #3
 8008640:	f300 811b 	bgt.w	800887a <USBD_StdEPReq+0x2a6>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d072      	beq.n	800872e <USBD_StdEPReq+0x15a>
 8008648:	2b01      	cmp	r3, #1
 800864a:	d03a      	beq.n	80086c2 <USBD_StdEPReq+0xee>
 800864c:	e115      	b.n	800887a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008654:	2b02      	cmp	r3, #2
 8008656:	d002      	beq.n	800865e <USBD_StdEPReq+0x8a>
 8008658:	2b03      	cmp	r3, #3
 800865a:	d015      	beq.n	8008688 <USBD_StdEPReq+0xb4>
 800865c:	e02b      	b.n	80086b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00c      	beq.n	800867e <USBD_StdEPReq+0xaa>
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b80      	cmp	r3, #128	@ 0x80
 8008668:	d009      	beq.n	800867e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 f8b6 	bl	80097e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008674:	2180      	movs	r1, #128	@ 0x80
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f001 f8b2 	bl	80097e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800867c:	e020      	b.n	80086c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc1b 	bl	8008ebc <USBD_CtlError>
              break;
 8008686:	e01b      	b.n	80086c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	885b      	ldrh	r3, [r3, #2]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10e      	bne.n	80086ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00b      	beq.n	80086ae <USBD_StdEPReq+0xda>
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b80      	cmp	r3, #128	@ 0x80
 800869a:	d008      	beq.n	80086ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	88db      	ldrh	r3, [r3, #6]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f899 	bl	80097e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fccc 	bl	800904c <USBD_CtlSendStatus>

              break;
 80086b4:	e004      	b.n	80086c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fbff 	bl	8008ebc <USBD_CtlError>
              break;
 80086be:	bf00      	nop
          }
          break;
 80086c0:	e0e0      	b.n	8008884 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d002      	beq.n	80086d2 <USBD_StdEPReq+0xfe>
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d015      	beq.n	80086fc <USBD_StdEPReq+0x128>
 80086d0:	e026      	b.n	8008720 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <USBD_StdEPReq+0x11e>
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b80      	cmp	r3, #128	@ 0x80
 80086dc:	d009      	beq.n	80086f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 f87c 	bl	80097e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086e8:	2180      	movs	r1, #128	@ 0x80
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f001 f878 	bl	80097e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086f0:	e01c      	b.n	800872c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fbe1 	bl	8008ebc <USBD_CtlError>
              break;
 80086fa:	e017      	b.n	800872c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	885b      	ldrh	r3, [r3, #2]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d112      	bne.n	800872a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 f883 	bl	800981e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fc97 	bl	800904c <USBD_CtlSendStatus>
              }
              break;
 800871e:	e004      	b.n	800872a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fbca 	bl	8008ebc <USBD_CtlError>
              break;
 8008728:	e000      	b.n	800872c <USBD_StdEPReq+0x158>
              break;
 800872a:	bf00      	nop
          }
          break;
 800872c:	e0aa      	b.n	8008884 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008734:	2b02      	cmp	r3, #2
 8008736:	d002      	beq.n	800873e <USBD_StdEPReq+0x16a>
 8008738:	2b03      	cmp	r3, #3
 800873a:	d032      	beq.n	80087a2 <USBD_StdEPReq+0x1ce>
 800873c:	e097      	b.n	800886e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d007      	beq.n	8008754 <USBD_StdEPReq+0x180>
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b80      	cmp	r3, #128	@ 0x80
 8008748:	d004      	beq.n	8008754 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fbb5 	bl	8008ebc <USBD_CtlError>
                break;
 8008752:	e091      	b.n	8008878 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008758:	2b00      	cmp	r3, #0
 800875a:	da0b      	bge.n	8008774 <USBD_StdEPReq+0x1a0>
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	3310      	adds	r3, #16
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4413      	add	r3, r2
 8008770:	3304      	adds	r3, #4
 8008772:	e00b      	b.n	800878c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	3304      	adds	r3, #4
 800878c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2202      	movs	r2, #2
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fbf8 	bl	8008f90 <USBD_CtlSendData>
              break;
 80087a0:	e06a      	b.n	8008878 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	da11      	bge.n	80087ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	f003 020f 	and.w	r2, r3, #15
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	3318      	adds	r3, #24
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d117      	bne.n	80087f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fb78 	bl	8008ebc <USBD_CtlError>
                  break;
 80087cc:	e054      	b.n	8008878 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	f003 020f 	and.w	r2, r3, #15
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d104      	bne.n	80087f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fb65 	bl	8008ebc <USBD_CtlError>
                  break;
 80087f2:	e041      	b.n	8008878 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	da0b      	bge.n	8008814 <USBD_StdEPReq+0x240>
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	3310      	adds	r3, #16
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4413      	add	r3, r2
 8008810:	3304      	adds	r3, #4
 8008812:	e00b      	b.n	800882c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	4413      	add	r3, r2
 800882a:	3304      	adds	r3, #4
 800882c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <USBD_StdEPReq+0x266>
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b80      	cmp	r3, #128	@ 0x80
 8008838:	d103      	bne.n	8008842 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e00e      	b.n	8008860 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 f808 	bl	800985c <USBD_LL_IsStallEP>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2201      	movs	r2, #1
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e002      	b.n	8008860 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2202      	movs	r2, #2
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fb92 	bl	8008f90 <USBD_CtlSendData>
              break;
 800886c:	e004      	b.n	8008878 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fb23 	bl	8008ebc <USBD_CtlError>
              break;
 8008876:	bf00      	nop
          }
          break;
 8008878:	e004      	b.n	8008884 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fb1d 	bl	8008ebc <USBD_CtlError>
          break;
 8008882:	bf00      	nop
      }
      break;
 8008884:	e004      	b.n	8008890 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fb17 	bl	8008ebc <USBD_CtlError>
      break;
 800888e:	bf00      	nop
  }

  return ret;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	885b      	ldrh	r3, [r3, #2]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	2b06      	cmp	r3, #6
 80088be:	f200 8128 	bhi.w	8008b12 <USBD_GetDescriptor+0x276>
 80088c2:	a201      	add	r2, pc, #4	@ (adr r2, 80088c8 <USBD_GetDescriptor+0x2c>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088fd 	.word	0x080088fd
 80088d0:	0800893d 	.word	0x0800893d
 80088d4:	08008b13 	.word	0x08008b13
 80088d8:	08008b13 	.word	0x08008b13
 80088dc:	08008ab3 	.word	0x08008ab3
 80088e0:	08008adf 	.word	0x08008adf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	7c12      	ldrb	r2, [r2, #16]
 80088f0:	f107 0108 	add.w	r1, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
      break;
 80088fa:	e112      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	7c1b      	ldrb	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10d      	bne.n	8008920 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890c:	f107 0208 	add.w	r2, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	2202      	movs	r2, #2
 800891c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800891e:	e100      	b.n	8008b22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	f107 0208 	add.w	r2, r7, #8
 800892c:	4610      	mov	r0, r2
 800892e:	4798      	blx	r3
 8008930:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3301      	adds	r3, #1
 8008936:	2202      	movs	r2, #2
 8008938:	701a      	strb	r2, [r3, #0]
      break;
 800893a:	e0f2      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	885b      	ldrh	r3, [r3, #2]
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b05      	cmp	r3, #5
 8008944:	f200 80ac 	bhi.w	8008aa0 <USBD_GetDescriptor+0x204>
 8008948:	a201      	add	r2, pc, #4	@ (adr r2, 8008950 <USBD_GetDescriptor+0xb4>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	08008969 	.word	0x08008969
 8008954:	0800899d 	.word	0x0800899d
 8008958:	080089d1 	.word	0x080089d1
 800895c:	08008a05 	.word	0x08008a05
 8008960:	08008a39 	.word	0x08008a39
 8008964:	08008a6d 	.word	0x08008a6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898a:	e091      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa94 	bl	8008ebc <USBD_CtlError>
            err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
          break;
 800899a:	e089      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089be:	e077      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa7a 	bl	8008ebc <USBD_CtlError>
            err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
          break;
 80089ce:	e06f      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e05d      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa60 	bl	8008ebc <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e055      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e043      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa46 	bl	8008ebc <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e03b      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5a:	e029      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa2c 	bl	8008ebc <USBD_CtlError>
            err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6a:	e021      	b.n	8008ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8e:	e00f      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa12 	bl	8008ebc <USBD_CtlError>
            err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9e:	e007      	b.n	8008ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa0a 	bl	8008ebc <USBD_CtlError>
          err++;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008aae:	e038      	b.n	8008b22 <USBD_GetDescriptor+0x286>
 8008ab0:	e037      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7c1b      	ldrb	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d109      	bne.n	8008ace <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac2:	f107 0208 	add.w	r2, r7, #8
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4798      	blx	r3
 8008aca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008acc:	e029      	b.n	8008b22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f9f3 	bl	8008ebc <USBD_CtlError>
        err++;
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	72fb      	strb	r3, [r7, #11]
      break;
 8008adc:	e021      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	7c1b      	ldrb	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10d      	bne.n	8008b02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aee:	f107 0208 	add.w	r2, r7, #8
 8008af2:	4610      	mov	r0, r2
 8008af4:	4798      	blx	r3
 8008af6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	2207      	movs	r2, #7
 8008afe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b00:	e00f      	b.n	8008b22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f9d9 	bl	8008ebc <USBD_CtlError>
        err++;
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b10:	e007      	b.n	8008b22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f9d1 	bl	8008ebc <USBD_CtlError>
      err++;
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b20:	bf00      	nop
  }

  if (err != 0U)
 8008b22:	7afb      	ldrb	r3, [r7, #11]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11c      	bne.n	8008b62 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d011      	beq.n	8008b52 <USBD_GetDescriptor+0x2b6>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	88db      	ldrh	r3, [r3, #6]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00d      	beq.n	8008b52 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	88da      	ldrh	r2, [r3, #6]
 8008b3a:	893b      	ldrh	r3, [r7, #8]
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	bf28      	it	cs
 8008b40:	4613      	movcs	r3, r2
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b46:	893b      	ldrh	r3, [r7, #8]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fa1f 	bl	8008f90 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	88db      	ldrh	r3, [r3, #6]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d104      	bne.n	8008b64 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fa76 	bl	800904c <USBD_CtlSendStatus>
 8008b60:	e000      	b.n	8008b64 <USBD_GetDescriptor+0x2c8>
    return;
 8008b62:	bf00      	nop
    }
  }
}
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop

08008b6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	889b      	ldrh	r3, [r3, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d130      	bne.n	8008be0 <USBD_SetAddress+0x74>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	88db      	ldrh	r3, [r3, #6]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d12c      	bne.n	8008be0 <USBD_SetAddress+0x74>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b8c:	d828      	bhi.n	8008be0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d104      	bne.n	8008bae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f988 	bl	8008ebc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bac:	e01d      	b.n	8008bea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7bfa      	ldrb	r2, [r7, #15]
 8008bb2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fe79 	bl	80098b2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fa43 	bl	800904c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd4:	e009      	b.n	8008bea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bde:	e004      	b.n	8008bea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f96a 	bl	8008ebc <USBD_CtlError>
  }
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	885b      	ldrh	r3, [r3, #2]
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	4b41      	ldr	r3, [pc, #260]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008c06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c08:	4b40      	ldr	r3, [pc, #256]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d904      	bls.n	8008c1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f952 	bl	8008ebc <USBD_CtlError>
 8008c18:	e075      	b.n	8008d06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d002      	beq.n	8008c2a <USBD_SetConfig+0x36>
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d023      	beq.n	8008c70 <USBD_SetConfig+0x7c>
 8008c28:	e062      	b.n	8008cf0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c2a:	4b38      	ldr	r3, [pc, #224]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01a      	beq.n	8008c68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c32:	4b36      	ldr	r3, [pc, #216]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2203      	movs	r2, #3
 8008c40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c44:	4b31      	ldr	r3, [pc, #196]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff f9e7 	bl	800801e <USBD_SetClassConfig>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d104      	bne.n	8008c60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f92f 	bl	8008ebc <USBD_CtlError>
            return;
 8008c5e:	e052      	b.n	8008d06 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f9f3 	bl	800904c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c66:	e04e      	b.n	8008d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f9ef 	bl	800904c <USBD_CtlSendStatus>
        break;
 8008c6e:	e04a      	b.n	8008d06 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c70:	4b26      	ldr	r3, [pc, #152]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d112      	bne.n	8008c9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008c80:	4b22      	ldr	r3, [pc, #136]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c8a:	4b20      	ldr	r3, [pc, #128]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff f9e3 	bl	800805c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f9d8 	bl	800904c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c9c:	e033      	b.n	8008d06 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d01d      	beq.n	8008ce8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff f9d1 	bl	800805c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008cba:	4b14      	ldr	r3, [pc, #80]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008cc4:	4b11      	ldr	r3, [pc, #68]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff f9a7 	bl	800801e <USBD_SetClassConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d104      	bne.n	8008ce0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f8ef 	bl	8008ebc <USBD_CtlError>
            return;
 8008cde:	e012      	b.n	8008d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f9b3 	bl	800904c <USBD_CtlSendStatus>
        break;
 8008ce6:	e00e      	b.n	8008d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f9af 	bl	800904c <USBD_CtlSendStatus>
        break;
 8008cee:	e00a      	b.n	8008d06 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f8e2 	bl	8008ebc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cf8:	4b04      	ldr	r3, [pc, #16]	@ (8008d0c <USBD_SetConfig+0x118>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff f9ac 	bl	800805c <USBD_ClrClassConfig>
        break;
 8008d04:	bf00      	nop
    }
  }
}
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000318 	.word	0x20000318

08008d10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	88db      	ldrh	r3, [r3, #6]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d004      	beq.n	8008d2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f8c9 	bl	8008ebc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d2a:	e022      	b.n	8008d72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	dc02      	bgt.n	8008d3c <USBD_GetConfig+0x2c>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dc03      	bgt.n	8008d42 <USBD_GetConfig+0x32>
 8008d3a:	e015      	b.n	8008d68 <USBD_GetConfig+0x58>
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetConfig+0x48>
 8008d40:	e012      	b.n	8008d68 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f91d 	bl	8008f90 <USBD_CtlSendData>
        break;
 8008d56:	e00c      	b.n	8008d72 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f915 	bl	8008f90 <USBD_CtlSendData>
        break;
 8008d66:	e004      	b.n	8008d72 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f8a6 	bl	8008ebc <USBD_CtlError>
        break;
 8008d70:	bf00      	nop
}
 8008d72:	bf00      	nop
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d81e      	bhi.n	8008dce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	88db      	ldrh	r3, [r3, #6]
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d004      	beq.n	8008da2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f88e 	bl	8008ebc <USBD_CtlError>
        break;
 8008da0:	e01a      	b.n	8008dd8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f043 0202 	orr.w	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8e2 	bl	8008f90 <USBD_CtlSendData>
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f873 	bl	8008ebc <USBD_CtlError>
      break;
 8008dd6:	bf00      	nop
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	885b      	ldrh	r3, [r3, #2]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d106      	bne.n	8008e00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f926 	bl	800904c <USBD_CtlSendStatus>
  }
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d80b      	bhi.n	8008e36 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	885b      	ldrh	r3, [r3, #2]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10c      	bne.n	8008e40 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f90c 	bl	800904c <USBD_CtlSendStatus>
      }
      break;
 8008e34:	e004      	b.n	8008e40 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f83f 	bl	8008ebc <USBD_CtlError>
      break;
 8008e3e:	e000      	b.n	8008e42 <USBD_ClrFeature+0x3a>
      break;
 8008e40:	bf00      	nop
  }
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	785a      	ldrb	r2, [r3, #1]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	3302      	adds	r3, #2
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	3303      	adds	r3, #3
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	021b      	lsls	r3, r3, #8
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	4413      	add	r3, r2
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	3304      	adds	r3, #4
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	3305      	adds	r3, #5
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	4413      	add	r3, r2
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	3306      	adds	r3, #6
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	4413      	add	r3, r2
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	80da      	strh	r2, [r3, #6]

}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ec6:	2180      	movs	r1, #128	@ 0x80
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fc89 	bl	80097e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ece:	2100      	movs	r1, #0
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fc85 	bl	80097e0 <USBD_LL_StallEP>
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b086      	sub	sp, #24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	60b9      	str	r1, [r7, #8]
 8008ee8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d032      	beq.n	8008f5a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 f834 	bl	8008f62 <USBD_GetLen>
 8008efa:	4603      	mov	r3, r0
 8008efc:	3301      	adds	r3, #1
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	75fa      	strb	r2, [r7, #23]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4413      	add	r3, r2
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	75fa      	strb	r2, [r7, #23]
 8008f20:	461a      	mov	r2, r3
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4413      	add	r3, r2
 8008f26:	2203      	movs	r2, #3
 8008f28:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f2a:	e012      	b.n	8008f52 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	60fa      	str	r2, [r7, #12]
 8008f32:	7dfa      	ldrb	r2, [r7, #23]
 8008f34:	1c51      	adds	r1, r2, #1
 8008f36:	75f9      	strb	r1, [r7, #23]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	440a      	add	r2, r1
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	75fa      	strb	r2, [r7, #23]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	2200      	movs	r2, #0
 8008f50:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e8      	bne.n	8008f2c <USBD_GetString+0x4e>
    }
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f6e:	e005      	b.n	8008f7c <USBD_GetLen+0x1a>
  {
    len++;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	3301      	adds	r3, #1
 8008f74:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1f5      	bne.n	8008f70 <USBD_GetLen+0xe>
  }

  return len;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bc80      	pop	{r7}
 8008f8e:	4770      	bx	lr

08008f90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008fa6:	88fa      	ldrh	r2, [r7, #6]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008fac:	88fa      	ldrh	r2, [r7, #6]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 fc99 	bl	80098f0 <USBD_LL_Transmit>

  return USBD_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	2100      	movs	r1, #0
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fc87 	bl	80098f0 <USBD_LL_Transmit>

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800900a:	88fa      	ldrh	r2, [r7, #6]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	2100      	movs	r1, #0
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fc8c 	bl	8009936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	2100      	movs	r1, #0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fc7a 	bl	8009936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2204      	movs	r2, #4
 8009058:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800905c:	2300      	movs	r3, #0
 800905e:	2200      	movs	r2, #0
 8009060:	2100      	movs	r1, #0
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fc44 	bl	80098f0 <USBD_LL_Transmit>

  return USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2205      	movs	r2, #5
 800907e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009082:	2300      	movs	r3, #0
 8009084:	2200      	movs	r2, #0
 8009086:	2100      	movs	r1, #0
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fc54 	bl	8009936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800909c:	2200      	movs	r2, #0
 800909e:	4912      	ldr	r1, [pc, #72]	@ (80090e8 <MX_USB_DEVICE_Init+0x50>)
 80090a0:	4812      	ldr	r0, [pc, #72]	@ (80090ec <MX_USB_DEVICE_Init+0x54>)
 80090a2:	f7fe ff62 	bl	8007f6a <USBD_Init>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090ac:	f7f7 ff42 	bl	8000f34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090b0:	490f      	ldr	r1, [pc, #60]	@ (80090f0 <MX_USB_DEVICE_Init+0x58>)
 80090b2:	480e      	ldr	r0, [pc, #56]	@ (80090ec <MX_USB_DEVICE_Init+0x54>)
 80090b4:	f7fe ff84 	bl	8007fc0 <USBD_RegisterClass>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090be:	f7f7 ff39 	bl	8000f34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090c2:	490c      	ldr	r1, [pc, #48]	@ (80090f4 <MX_USB_DEVICE_Init+0x5c>)
 80090c4:	4809      	ldr	r0, [pc, #36]	@ (80090ec <MX_USB_DEVICE_Init+0x54>)
 80090c6:	f7fe feb5 	bl	8007e34 <USBD_CDC_RegisterInterface>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090d0:	f7f7 ff30 	bl	8000f34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090d4:	4805      	ldr	r0, [pc, #20]	@ (80090ec <MX_USB_DEVICE_Init+0x54>)
 80090d6:	f7fe ff8c 	bl	8007ff2 <USBD_Start>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090e0:	f7f7 ff28 	bl	8000f34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090e4:	bf00      	nop
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000130 	.word	0x20000130
 80090ec:	2000031c 	.word	0x2000031c
 80090f0:	2000001c 	.word	0x2000001c
 80090f4:	20000120 	.word	0x20000120

080090f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090fc:	2200      	movs	r2, #0
 80090fe:	4905      	ldr	r1, [pc, #20]	@ (8009114 <CDC_Init_FS+0x1c>)
 8009100:	4805      	ldr	r0, [pc, #20]	@ (8009118 <CDC_Init_FS+0x20>)
 8009102:	f7fe fead 	bl	8007e60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009106:	4905      	ldr	r1, [pc, #20]	@ (800911c <CDC_Init_FS+0x24>)
 8009108:	4803      	ldr	r0, [pc, #12]	@ (8009118 <CDC_Init_FS+0x20>)
 800910a:	f7fe fec2 	bl	8007e92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800910e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009110:	4618      	mov	r0, r3
 8009112:	bd80      	pop	{r7, pc}
 8009114:	200009e0 	.word	0x200009e0
 8009118:	2000031c 	.word	0x2000031c
 800911c:	200005e0 	.word	0x200005e0

08009120 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009124:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009126:	4618      	mov	r0, r3
 8009128:	46bd      	mov	sp, r7
 800912a:	bc80      	pop	{r7}
 800912c:	4770      	bx	lr
	...

08009130 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
 800913c:	4613      	mov	r3, r2
 800913e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	2b23      	cmp	r3, #35	@ 0x23
 8009144:	d84a      	bhi.n	80091dc <CDC_Control_FS+0xac>
 8009146:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <CDC_Control_FS+0x1c>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	080091dd 	.word	0x080091dd
 8009150:	080091dd 	.word	0x080091dd
 8009154:	080091dd 	.word	0x080091dd
 8009158:	080091dd 	.word	0x080091dd
 800915c:	080091dd 	.word	0x080091dd
 8009160:	080091dd 	.word	0x080091dd
 8009164:	080091dd 	.word	0x080091dd
 8009168:	080091dd 	.word	0x080091dd
 800916c:	080091dd 	.word	0x080091dd
 8009170:	080091dd 	.word	0x080091dd
 8009174:	080091dd 	.word	0x080091dd
 8009178:	080091dd 	.word	0x080091dd
 800917c:	080091dd 	.word	0x080091dd
 8009180:	080091dd 	.word	0x080091dd
 8009184:	080091dd 	.word	0x080091dd
 8009188:	080091dd 	.word	0x080091dd
 800918c:	080091dd 	.word	0x080091dd
 8009190:	080091dd 	.word	0x080091dd
 8009194:	080091dd 	.word	0x080091dd
 8009198:	080091dd 	.word	0x080091dd
 800919c:	080091dd 	.word	0x080091dd
 80091a0:	080091dd 	.word	0x080091dd
 80091a4:	080091dd 	.word	0x080091dd
 80091a8:	080091dd 	.word	0x080091dd
 80091ac:	080091dd 	.word	0x080091dd
 80091b0:	080091dd 	.word	0x080091dd
 80091b4:	080091dd 	.word	0x080091dd
 80091b8:	080091dd 	.word	0x080091dd
 80091bc:	080091dd 	.word	0x080091dd
 80091c0:	080091dd 	.word	0x080091dd
 80091c4:	080091dd 	.word	0x080091dd
 80091c8:	080091dd 	.word	0x080091dd
 80091cc:	080091dd 	.word	0x080091dd
 80091d0:	080091dd 	.word	0x080091dd
 80091d4:	080091dd 	.word	0x080091dd
 80091d8:	080091dd 	.word	0x080091dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091dc:	bf00      	nop
  }

  return (USBD_OK);
 80091de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bc80      	pop	{r7}
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop

080091ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	481c      	ldr	r0, [pc, #112]	@ (800926c <CDC_Receive_FS+0x80>)
 80091fa:	f7fe fe4a 	bl	8007e92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091fe:	481b      	ldr	r0, [pc, #108]	@ (800926c <CDC_Receive_FS+0x80>)
 8009200:	f7fe fe89 	bl	8007f16 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	73fb      	strb	r3, [r7, #15]
  memset(USB_rxbuffer, '\0',10);
 800920a:	220a      	movs	r2, #10
 800920c:	2100      	movs	r1, #0
 800920e:	4818      	ldr	r0, [pc, #96]	@ (8009270 <CDC_Receive_FS+0x84>)
 8009210:	f000 fcb8 	bl	8009b84 <memset>
  memcpy(USB_rxbuffer, Buf,len);
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	461a      	mov	r2, r3
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	4815      	ldr	r0, [pc, #84]	@ (8009270 <CDC_Receive_FS+0x84>)
 800921c:	f000 fcee 	bl	8009bfc <memcpy>
  RS_txBuffer[0] = ':';
 8009220:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <CDC_Receive_FS+0x88>)
 8009222:	223a      	movs	r2, #58	@ 0x3a
 8009224:	701a      	strb	r2, [r3, #0]
  RS_txBuffer[1] = 0x20;
 8009226:	4b13      	ldr	r3, [pc, #76]	@ (8009274 <CDC_Receive_FS+0x88>)
 8009228:	2220      	movs	r2, #32
 800922a:	705a      	strb	r2, [r3, #1]
  RS_txBuffer[2] = 0x77;
 800922c:	4b11      	ldr	r3, [pc, #68]	@ (8009274 <CDC_Receive_FS+0x88>)
 800922e:	2277      	movs	r2, #119	@ 0x77
 8009230:	709a      	strb	r2, [r3, #2]
  strcpy((char *)(RS_txBuffer+3),(char *)USB_rxbuffer);
 8009232:	4b11      	ldr	r3, [pc, #68]	@ (8009278 <CDC_Receive_FS+0x8c>)
 8009234:	490e      	ldr	r1, [pc, #56]	@ (8009270 <CDC_Receive_FS+0x84>)
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fcd8 	bl	8009bec <strcpy>
  RS_txBuffer[9] = '\r';
 800923c:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <CDC_Receive_FS+0x88>)
 800923e:	220d      	movs	r2, #13
 8009240:	725a      	strb	r2, [r3, #9]
  RS_txBuffer[10] = '\n';
 8009242:	4b0c      	ldr	r3, [pc, #48]	@ (8009274 <CDC_Receive_FS+0x88>)
 8009244:	220a      	movs	r2, #10
 8009246:	729a      	strb	r2, [r3, #10]
  HAL_UART_Transmit(&huart1, RS_txBuffer, 11, HAL_MAX_DELAY);
 8009248:	f04f 33ff 	mov.w	r3, #4294967295
 800924c:	220b      	movs	r2, #11
 800924e:	4909      	ldr	r1, [pc, #36]	@ (8009274 <CDC_Receive_FS+0x88>)
 8009250:	480a      	ldr	r0, [pc, #40]	@ (800927c <CDC_Receive_FS+0x90>)
 8009252:	f7fb fa07 	bl	8004664 <HAL_UART_Transmit>
  memset(Buf, '\0',len);
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	461a      	mov	r2, r3
 800925a:	2100      	movs	r1, #0
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc91 	bl	8009b84 <memset>
  return (USBD_OK);
 8009262:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	2000031c 	.word	0x2000031c
 8009270:	200001ec 	.word	0x200001ec
 8009274:	20000220 	.word	0x20000220
 8009278:	20000223 	.word	0x20000223
 800927c:	200002c8 	.word	0x200002c8

08009280 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009290:	4b0d      	ldr	r3, [pc, #52]	@ (80092c8 <CDC_Transmit_FS+0x48>)
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009296:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e00b      	b.n	80092be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092a6:	887b      	ldrh	r3, [r7, #2]
 80092a8:	461a      	mov	r2, r3
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	4806      	ldr	r0, [pc, #24]	@ (80092c8 <CDC_Transmit_FS+0x48>)
 80092ae:	f7fe fdd7 	bl	8007e60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092b2:	4805      	ldr	r0, [pc, #20]	@ (80092c8 <CDC_Transmit_FS+0x48>)
 80092b4:	f7fe fe00 	bl	8007eb8 <USBD_CDC_TransmitPacket>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	2000031c 	.word	0x2000031c

080092cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	6039      	str	r1, [r7, #0]
 80092d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2212      	movs	r2, #18
 80092dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092de:	4b03      	ldr	r3, [pc, #12]	@ (80092ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bc80      	pop	{r7}
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	2000014c 	.word	0x2000014c

080092f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2204      	movs	r2, #4
 8009300:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009302:	4b03      	ldr	r3, [pc, #12]	@ (8009310 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000160 	.word	0x20000160

08009314 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	6039      	str	r1, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d105      	bne.n	8009332 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	4907      	ldr	r1, [pc, #28]	@ (8009348 <USBD_FS_ProductStrDescriptor+0x34>)
 800932a:	4808      	ldr	r0, [pc, #32]	@ (800934c <USBD_FS_ProductStrDescriptor+0x38>)
 800932c:	f7ff fdd7 	bl	8008ede <USBD_GetString>
 8009330:	e004      	b.n	800933c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	4904      	ldr	r1, [pc, #16]	@ (8009348 <USBD_FS_ProductStrDescriptor+0x34>)
 8009336:	4805      	ldr	r0, [pc, #20]	@ (800934c <USBD_FS_ProductStrDescriptor+0x38>)
 8009338:	f7ff fdd1 	bl	8008ede <USBD_GetString>
  }
  return USBD_StrDesc;
 800933c:	4b02      	ldr	r3, [pc, #8]	@ (8009348 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20000de0 	.word	0x20000de0
 800934c:	0800a500 	.word	0x0800a500

08009350 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	4603      	mov	r3, r0
 8009358:	6039      	str	r1, [r7, #0]
 800935a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	4904      	ldr	r1, [pc, #16]	@ (8009370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009360:	4804      	ldr	r0, [pc, #16]	@ (8009374 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009362:	f7ff fdbc 	bl	8008ede <USBD_GetString>
  return USBD_StrDesc;
 8009366:	4b02      	ldr	r3, [pc, #8]	@ (8009370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20000de0 	.word	0x20000de0
 8009374:	0800a518 	.word	0x0800a518

08009378 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	6039      	str	r1, [r7, #0]
 8009382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	221a      	movs	r2, #26
 8009388:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800938a:	f000 f843 	bl	8009414 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800938e:	4b02      	ldr	r3, [pc, #8]	@ (8009398 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	20000164 	.word	0x20000164

0800939c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	6039      	str	r1, [r7, #0]
 80093a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d105      	bne.n	80093ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	4907      	ldr	r1, [pc, #28]	@ (80093d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093b2:	4808      	ldr	r0, [pc, #32]	@ (80093d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093b4:	f7ff fd93 	bl	8008ede <USBD_GetString>
 80093b8:	e004      	b.n	80093c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4904      	ldr	r1, [pc, #16]	@ (80093d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093be:	4805      	ldr	r0, [pc, #20]	@ (80093d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093c0:	f7ff fd8d 	bl	8008ede <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c4:	4b02      	ldr	r3, [pc, #8]	@ (80093d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000de0 	.word	0x20000de0
 80093d4:	0800a52c 	.word	0x0800a52c

080093d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d105      	bne.n	80093f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	4907      	ldr	r1, [pc, #28]	@ (800940c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093ee:	4808      	ldr	r0, [pc, #32]	@ (8009410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093f0:	f7ff fd75 	bl	8008ede <USBD_GetString>
 80093f4:	e004      	b.n	8009400 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	4904      	ldr	r1, [pc, #16]	@ (800940c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093fa:	4805      	ldr	r0, [pc, #20]	@ (8009410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093fc:	f7ff fd6f 	bl	8008ede <USBD_GetString>
  }
  return USBD_StrDesc;
 8009400:	4b02      	ldr	r3, [pc, #8]	@ (800940c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000de0 	.word	0x20000de0
 8009410:	0800a538 	.word	0x0800a538

08009414 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800941a:	4b0f      	ldr	r3, [pc, #60]	@ (8009458 <Get_SerialNum+0x44>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009420:	4b0e      	ldr	r3, [pc, #56]	@ (800945c <Get_SerialNum+0x48>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009426:	4b0e      	ldr	r3, [pc, #56]	@ (8009460 <Get_SerialNum+0x4c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4413      	add	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d009      	beq.n	800944e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800943a:	2208      	movs	r2, #8
 800943c:	4909      	ldr	r1, [pc, #36]	@ (8009464 <Get_SerialNum+0x50>)
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 f814 	bl	800946c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009444:	2204      	movs	r2, #4
 8009446:	4908      	ldr	r1, [pc, #32]	@ (8009468 <Get_SerialNum+0x54>)
 8009448:	68b8      	ldr	r0, [r7, #8]
 800944a:	f000 f80f 	bl	800946c <IntToUnicode>
  }
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	1ffff7e8 	.word	0x1ffff7e8
 800945c:	1ffff7ec 	.word	0x1ffff7ec
 8009460:	1ffff7f0 	.word	0x1ffff7f0
 8009464:	20000166 	.word	0x20000166
 8009468:	20000176 	.word	0x20000176

0800946c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800947e:	2300      	movs	r3, #0
 8009480:	75fb      	strb	r3, [r7, #23]
 8009482:	e027      	b.n	80094d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	0f1b      	lsrs	r3, r3, #28
 8009488:	2b09      	cmp	r3, #9
 800948a:	d80b      	bhi.n	80094a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	0f1b      	lsrs	r3, r3, #28
 8009490:	b2da      	uxtb	r2, r3
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	4619      	mov	r1, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	440b      	add	r3, r1
 800949c:	3230      	adds	r2, #48	@ 0x30
 800949e:	b2d2      	uxtb	r2, r2
 80094a0:	701a      	strb	r2, [r3, #0]
 80094a2:	e00a      	b.n	80094ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	0f1b      	lsrs	r3, r3, #28
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	4619      	mov	r1, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	440b      	add	r3, r1
 80094b4:	3237      	adds	r2, #55	@ 0x37
 80094b6:	b2d2      	uxtb	r2, r2
 80094b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	3301      	adds	r3, #1
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	4413      	add	r3, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	3301      	adds	r3, #1
 80094d2:	75fb      	strb	r3, [r7, #23]
 80094d4:	7dfa      	ldrb	r2, [r7, #23]
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d3d3      	bcc.n	8009484 <IntToUnicode+0x18>
  }
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc80      	pop	{r7}
 80094e6:	4770      	bx	lr

080094e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a0d      	ldr	r2, [pc, #52]	@ (800952c <HAL_PCD_MspInit+0x44>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d113      	bne.n	8009522 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009530 <HAL_PCD_MspInit+0x48>)
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009530 <HAL_PCD_MspInit+0x48>)
 8009500:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009504:	61d3      	str	r3, [r2, #28]
 8009506:	4b0a      	ldr	r3, [pc, #40]	@ (8009530 <HAL_PCD_MspInit+0x48>)
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009512:	2200      	movs	r2, #0
 8009514:	2100      	movs	r1, #0
 8009516:	2014      	movs	r0, #20
 8009518:	f7f7 ffa1 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800951c:	2014      	movs	r0, #20
 800951e:	f7f7 ffba 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009522:	bf00      	nop
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	40005c00 	.word	0x40005c00
 8009530:	40021000 	.word	0x40021000

08009534 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009548:	4619      	mov	r1, r3
 800954a:	4610      	mov	r0, r2
 800954c:	f7fe fd99 	bl	8008082 <USBD_LL_SetupStage>
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	00db      	lsls	r3, r3, #3
 8009576:	440b      	add	r3, r1
 8009578:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	4619      	mov	r1, r3
 8009582:	f7fe fdcb 	bl	800811c <USBD_LL_DataOutStage>
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	440b      	add	r3, r1
 80095ae:	3324      	adds	r3, #36	@ 0x24
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	78fb      	ldrb	r3, [r7, #3]
 80095b4:	4619      	mov	r1, r3
 80095b6:	f7fe fe22 	bl	80081fe <USBD_LL_DataInStage>
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe ff32 	bl	800843a <USBD_LL_SOF>
}
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095e6:	2301      	movs	r3, #1
 80095e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	799b      	ldrb	r3, [r3, #6]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d001      	beq.n	80095f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095f2:	f7f7 fc9f 	bl	8000f34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095fc:	7bfa      	ldrb	r2, [r7, #15]
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fee2 	bl	80083ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fe9b 	bl	8008348 <USBD_LL_Reset>
}
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fedc 	bl	80083e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	7a9b      	ldrb	r3, [r3, #10]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009638:	4b04      	ldr	r3, [pc, #16]	@ (800964c <HAL_PCD_SuspendCallback+0x30>)
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	4a03      	ldr	r2, [pc, #12]	@ (800964c <HAL_PCD_SuspendCallback+0x30>)
 800963e:	f043 0306 	orr.w	r3, r3, #6
 8009642:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009644:	bf00      	nop
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	e000ed00 	.word	0xe000ed00

08009650 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe fed6 	bl	8008410 <USBD_LL_Resume>
}
 8009664:	bf00      	nop
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009674:	4a28      	ldr	r2, [pc, #160]	@ (8009718 <USBD_LL_Init+0xac>)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a26      	ldr	r2, [pc, #152]	@ (8009718 <USBD_LL_Init+0xac>)
 8009680:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009684:	4b24      	ldr	r3, [pc, #144]	@ (8009718 <USBD_LL_Init+0xac>)
 8009686:	4a25      	ldr	r2, [pc, #148]	@ (800971c <USBD_LL_Init+0xb0>)
 8009688:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800968a:	4b23      	ldr	r3, [pc, #140]	@ (8009718 <USBD_LL_Init+0xac>)
 800968c:	2208      	movs	r2, #8
 800968e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009690:	4b21      	ldr	r3, [pc, #132]	@ (8009718 <USBD_LL_Init+0xac>)
 8009692:	2202      	movs	r2, #2
 8009694:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009696:	4b20      	ldr	r3, [pc, #128]	@ (8009718 <USBD_LL_Init+0xac>)
 8009698:	2200      	movs	r2, #0
 800969a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800969c:	4b1e      	ldr	r3, [pc, #120]	@ (8009718 <USBD_LL_Init+0xac>)
 800969e:	2200      	movs	r2, #0
 80096a0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009718 <USBD_LL_Init+0xac>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096a8:	481b      	ldr	r0, [pc, #108]	@ (8009718 <USBD_LL_Init+0xac>)
 80096aa:	f7f8 f945 	bl	8001938 <HAL_PCD_Init>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80096b4:	f7f7 fc3e 	bl	8000f34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096be:	2318      	movs	r3, #24
 80096c0:	2200      	movs	r2, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	f7f9 fe56 	bl	8003374 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096ce:	2358      	movs	r3, #88	@ 0x58
 80096d0:	2200      	movs	r2, #0
 80096d2:	2180      	movs	r1, #128	@ 0x80
 80096d4:	f7f9 fe4e 	bl	8003374 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096de:	23c0      	movs	r3, #192	@ 0xc0
 80096e0:	2200      	movs	r2, #0
 80096e2:	2181      	movs	r1, #129	@ 0x81
 80096e4:	f7f9 fe46 	bl	8003374 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096ee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80096f2:	2200      	movs	r2, #0
 80096f4:	2101      	movs	r1, #1
 80096f6:	f7f9 fe3d 	bl	8003374 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009704:	2200      	movs	r2, #0
 8009706:	2182      	movs	r1, #130	@ 0x82
 8009708:	f7f9 fe34 	bl	8003374 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20000fe0 	.word	0x20000fe0
 800971c:	40005c00 	.word	0x40005c00

08009720 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009736:	4618      	mov	r0, r3
 8009738:	f7f8 f9f4 	bl	8001b24 <HAL_PCD_Start>
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 f94e 	bl	80099e4 <USBD_Get_USB_Status>
 8009748:	4603      	mov	r3, r0
 800974a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974c:	7bbb      	ldrb	r3, [r7, #14]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	461a      	mov	r2, r3
 8009764:	4603      	mov	r3, r0
 8009766:	70fb      	strb	r3, [r7, #3]
 8009768:	460b      	mov	r3, r1
 800976a:	70bb      	strb	r3, [r7, #2]
 800976c:	4613      	mov	r3, r2
 800976e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800977e:	78bb      	ldrb	r3, [r7, #2]
 8009780:	883a      	ldrh	r2, [r7, #0]
 8009782:	78f9      	ldrb	r1, [r7, #3]
 8009784:	f7f8 fb48 	bl	8001e18 <HAL_PCD_EP_Open>
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 f928 	bl	80099e4 <USBD_Get_USB_Status>
 8009794:	4603      	mov	r3, r0
 8009796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009798:	7bbb      	ldrb	r3, [r7, #14]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7f8 fb86 	bl	8001ed2 <HAL_PCD_EP_Close>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 f909 	bl	80099e4 <USBD_Get_USB_Status>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	4611      	mov	r1, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7f8 fc2e 	bl	8002060 <HAL_PCD_EP_SetStall>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f8ea 	bl	80099e4 <USBD_Get_USB_Status>
 8009810:	4603      	mov	r3, r0
 8009812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009814:	7bbb      	ldrb	r3, [r7, #14]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009838:	78fa      	ldrb	r2, [r7, #3]
 800983a:	4611      	mov	r1, r2
 800983c:	4618      	mov	r0, r3
 800983e:	f7f8 fc6f 	bl	8002120 <HAL_PCD_EP_ClrStall>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	4618      	mov	r0, r3
 800984a:	f000 f8cb 	bl	80099e4 <USBD_Get_USB_Status>
 800984e:	4603      	mov	r3, r0
 8009850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009852:	7bbb      	ldrb	r3, [r7, #14]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800986e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009874:	2b00      	cmp	r3, #0
 8009876:	da0b      	bge.n	8009890 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	4613      	mov	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	440b      	add	r3, r1
 800988a:	3312      	adds	r3, #18
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	e00b      	b.n	80098a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	440b      	add	r3, r1
 80098a2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80098a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bc80      	pop	{r7}
 80098b0:	4770      	bx	lr

080098b2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f8 fa7d 	bl	8001dd0 <HAL_PCD_SetAddress>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f881 	bl	80099e4 <USBD_Get_USB_Status>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	607a      	str	r2, [r7, #4]
 80098fa:	461a      	mov	r2, r3
 80098fc:	460b      	mov	r3, r1
 80098fe:	72fb      	strb	r3, [r7, #11]
 8009900:	4613      	mov	r3, r2
 8009902:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009912:	893b      	ldrh	r3, [r7, #8]
 8009914:	7af9      	ldrb	r1, [r7, #11]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	f7f8 fb6b 	bl	8001ff2 <HAL_PCD_EP_Transmit>
 800991c:	4603      	mov	r3, r0
 800991e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	4618      	mov	r0, r3
 8009924:	f000 f85e 	bl	80099e4 <USBD_Get_USB_Status>
 8009928:	4603      	mov	r3, r0
 800992a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800992c:	7dbb      	ldrb	r3, [r7, #22]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b086      	sub	sp, #24
 800993a:	af00      	add	r7, sp, #0
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	461a      	mov	r2, r3
 8009942:	460b      	mov	r3, r1
 8009944:	72fb      	strb	r3, [r7, #11]
 8009946:	4613      	mov	r3, r2
 8009948:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009958:	893b      	ldrh	r3, [r7, #8]
 800995a:	7af9      	ldrb	r1, [r7, #11]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	f7f8 fb00 	bl	8001f62 <HAL_PCD_EP_Receive>
 8009962:	4603      	mov	r3, r0
 8009964:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f83b 	bl	80099e4 <USBD_Get_USB_Status>
 800996e:	4603      	mov	r3, r0
 8009970:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009972:	7dbb      	ldrb	r3, [r7, #22]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f7f8 fb16 	bl	8001fc4 <HAL_PCD_EP_GetRxCount>
 8009998:	4603      	mov	r3, r0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099ac:	4b02      	ldr	r3, [pc, #8]	@ (80099b8 <USBD_static_malloc+0x14>)
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc80      	pop	{r7}
 80099b6:	4770      	bx	lr
 80099b8:	200012b8 	.word	0x200012b8

080099bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]

}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc80      	pop	{r7}
 80099cc:	4770      	bx	lr

080099ce <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	460b      	mov	r3, r1
 80099d8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	bc80      	pop	{r7}
 80099e2:	4770      	bx	lr

080099e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	d817      	bhi.n	8009a28 <USBD_Get_USB_Status+0x44>
 80099f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <USBD_Get_USB_Status+0x1c>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a11 	.word	0x08009a11
 8009a04:	08009a17 	.word	0x08009a17
 8009a08:	08009a1d 	.word	0x08009a1d
 8009a0c:	08009a23 	.word	0x08009a23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
    break;
 8009a14:	e00b      	b.n	8009a2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a16:	2302      	movs	r3, #2
 8009a18:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1a:	e008      	b.n	8009a2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a20:	e005      	b.n	8009a2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a22:	2302      	movs	r3, #2
 8009a24:	73fb      	strb	r3, [r7, #15]
    break;
 8009a26:	e002      	b.n	8009a2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a28:	2302      	movs	r3, #2
 8009a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a2c:	bf00      	nop
  }
  return usb_status;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop

08009a3c <_strtol_l.constprop.0>:
 8009a3c:	2b24      	cmp	r3, #36	@ 0x24
 8009a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a42:	4686      	mov	lr, r0
 8009a44:	4690      	mov	r8, r2
 8009a46:	d801      	bhi.n	8009a4c <_strtol_l.constprop.0+0x10>
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d106      	bne.n	8009a5a <_strtol_l.constprop.0+0x1e>
 8009a4c:	f000 f8a2 	bl	8009b94 <__errno>
 8009a50:	2316      	movs	r3, #22
 8009a52:	6003      	str	r3, [r0, #0]
 8009a54:	2000      	movs	r0, #0
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	4833      	ldr	r0, [pc, #204]	@ (8009b2c <_strtol_l.constprop.0+0xf0>)
 8009a5e:	462a      	mov	r2, r5
 8009a60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a64:	5d06      	ldrb	r6, [r0, r4]
 8009a66:	f016 0608 	ands.w	r6, r6, #8
 8009a6a:	d1f8      	bne.n	8009a5e <_strtol_l.constprop.0+0x22>
 8009a6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a6e:	d12d      	bne.n	8009acc <_strtol_l.constprop.0+0x90>
 8009a70:	2601      	movs	r6, #1
 8009a72:	782c      	ldrb	r4, [r5, #0]
 8009a74:	1c95      	adds	r5, r2, #2
 8009a76:	f033 0210 	bics.w	r2, r3, #16
 8009a7a:	d109      	bne.n	8009a90 <_strtol_l.constprop.0+0x54>
 8009a7c:	2c30      	cmp	r4, #48	@ 0x30
 8009a7e:	d12a      	bne.n	8009ad6 <_strtol_l.constprop.0+0x9a>
 8009a80:	782a      	ldrb	r2, [r5, #0]
 8009a82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a86:	2a58      	cmp	r2, #88	@ 0x58
 8009a88:	d125      	bne.n	8009ad6 <_strtol_l.constprop.0+0x9a>
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	786c      	ldrb	r4, [r5, #1]
 8009a8e:	3502      	adds	r5, #2
 8009a90:	2200      	movs	r2, #0
 8009a92:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a9a:	fbbc f9f3 	udiv	r9, ip, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009aa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009aa8:	2f09      	cmp	r7, #9
 8009aaa:	d81b      	bhi.n	8009ae4 <_strtol_l.constprop.0+0xa8>
 8009aac:	463c      	mov	r4, r7
 8009aae:	42a3      	cmp	r3, r4
 8009ab0:	dd27      	ble.n	8009b02 <_strtol_l.constprop.0+0xc6>
 8009ab2:	1c57      	adds	r7, r2, #1
 8009ab4:	d007      	beq.n	8009ac6 <_strtol_l.constprop.0+0x8a>
 8009ab6:	4581      	cmp	r9, r0
 8009ab8:	d320      	bcc.n	8009afc <_strtol_l.constprop.0+0xc0>
 8009aba:	d101      	bne.n	8009ac0 <_strtol_l.constprop.0+0x84>
 8009abc:	45a2      	cmp	sl, r4
 8009abe:	db1d      	blt.n	8009afc <_strtol_l.constprop.0+0xc0>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	fb00 4003 	mla	r0, r0, r3, r4
 8009ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009aca:	e7eb      	b.n	8009aa4 <_strtol_l.constprop.0+0x68>
 8009acc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ace:	bf04      	itt	eq
 8009ad0:	782c      	ldrbeq	r4, [r5, #0]
 8009ad2:	1c95      	addeq	r5, r2, #2
 8009ad4:	e7cf      	b.n	8009a76 <_strtol_l.constprop.0+0x3a>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1da      	bne.n	8009a90 <_strtol_l.constprop.0+0x54>
 8009ada:	2c30      	cmp	r4, #48	@ 0x30
 8009adc:	bf0c      	ite	eq
 8009ade:	2308      	moveq	r3, #8
 8009ae0:	230a      	movne	r3, #10
 8009ae2:	e7d5      	b.n	8009a90 <_strtol_l.constprop.0+0x54>
 8009ae4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ae8:	2f19      	cmp	r7, #25
 8009aea:	d801      	bhi.n	8009af0 <_strtol_l.constprop.0+0xb4>
 8009aec:	3c37      	subs	r4, #55	@ 0x37
 8009aee:	e7de      	b.n	8009aae <_strtol_l.constprop.0+0x72>
 8009af0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009af4:	2f19      	cmp	r7, #25
 8009af6:	d804      	bhi.n	8009b02 <_strtol_l.constprop.0+0xc6>
 8009af8:	3c57      	subs	r4, #87	@ 0x57
 8009afa:	e7d8      	b.n	8009aae <_strtol_l.constprop.0+0x72>
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	e7e1      	b.n	8009ac6 <_strtol_l.constprop.0+0x8a>
 8009b02:	1c53      	adds	r3, r2, #1
 8009b04:	d108      	bne.n	8009b18 <_strtol_l.constprop.0+0xdc>
 8009b06:	2322      	movs	r3, #34	@ 0x22
 8009b08:	4660      	mov	r0, ip
 8009b0a:	f8ce 3000 	str.w	r3, [lr]
 8009b0e:	f1b8 0f00 	cmp.w	r8, #0
 8009b12:	d0a0      	beq.n	8009a56 <_strtol_l.constprop.0+0x1a>
 8009b14:	1e69      	subs	r1, r5, #1
 8009b16:	e006      	b.n	8009b26 <_strtol_l.constprop.0+0xea>
 8009b18:	b106      	cbz	r6, 8009b1c <_strtol_l.constprop.0+0xe0>
 8009b1a:	4240      	negs	r0, r0
 8009b1c:	f1b8 0f00 	cmp.w	r8, #0
 8009b20:	d099      	beq.n	8009a56 <_strtol_l.constprop.0+0x1a>
 8009b22:	2a00      	cmp	r2, #0
 8009b24:	d1f6      	bne.n	8009b14 <_strtol_l.constprop.0+0xd8>
 8009b26:	f8c8 1000 	str.w	r1, [r8]
 8009b2a:	e794      	b.n	8009a56 <_strtol_l.constprop.0+0x1a>
 8009b2c:	0800a573 	.word	0x0800a573

08009b30 <strtol>:
 8009b30:	4613      	mov	r3, r2
 8009b32:	460a      	mov	r2, r1
 8009b34:	4601      	mov	r1, r0
 8009b36:	4802      	ldr	r0, [pc, #8]	@ (8009b40 <strtol+0x10>)
 8009b38:	6800      	ldr	r0, [r0, #0]
 8009b3a:	f7ff bf7f 	b.w	8009a3c <_strtol_l.constprop.0>
 8009b3e:	bf00      	nop
 8009b40:	20000180 	.word	0x20000180

08009b44 <siprintf>:
 8009b44:	b40e      	push	{r1, r2, r3}
 8009b46:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b4a:	b500      	push	{lr}
 8009b4c:	b09c      	sub	sp, #112	@ 0x70
 8009b4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b50:	9002      	str	r0, [sp, #8]
 8009b52:	9006      	str	r0, [sp, #24]
 8009b54:	9107      	str	r1, [sp, #28]
 8009b56:	9104      	str	r1, [sp, #16]
 8009b58:	4808      	ldr	r0, [pc, #32]	@ (8009b7c <siprintf+0x38>)
 8009b5a:	4909      	ldr	r1, [pc, #36]	@ (8009b80 <siprintf+0x3c>)
 8009b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b60:	9105      	str	r1, [sp, #20]
 8009b62:	6800      	ldr	r0, [r0, #0]
 8009b64:	a902      	add	r1, sp, #8
 8009b66:	9301      	str	r3, [sp, #4]
 8009b68:	f000 f9a8 	bl	8009ebc <_svfiprintf_r>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	9b02      	ldr	r3, [sp, #8]
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	b01c      	add	sp, #112	@ 0x70
 8009b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b78:	b003      	add	sp, #12
 8009b7a:	4770      	bx	lr
 8009b7c:	20000180 	.word	0x20000180
 8009b80:	ffff0208 	.word	0xffff0208

08009b84 <memset>:
 8009b84:	4603      	mov	r3, r0
 8009b86:	4402      	add	r2, r0
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d100      	bne.n	8009b8e <memset+0xa>
 8009b8c:	4770      	bx	lr
 8009b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b92:	e7f9      	b.n	8009b88 <memset+0x4>

08009b94 <__errno>:
 8009b94:	4b01      	ldr	r3, [pc, #4]	@ (8009b9c <__errno+0x8>)
 8009b96:	6818      	ldr	r0, [r3, #0]
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	20000180 	.word	0x20000180

08009ba0 <__libc_init_array>:
 8009ba0:	b570      	push	{r4, r5, r6, lr}
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	4d0c      	ldr	r5, [pc, #48]	@ (8009bd8 <__libc_init_array+0x38>)
 8009ba6:	4c0d      	ldr	r4, [pc, #52]	@ (8009bdc <__libc_init_array+0x3c>)
 8009ba8:	1b64      	subs	r4, r4, r5
 8009baa:	10a4      	asrs	r4, r4, #2
 8009bac:	42a6      	cmp	r6, r4
 8009bae:	d109      	bne.n	8009bc4 <__libc_init_array+0x24>
 8009bb0:	f000 fc80 	bl	800a4b4 <_init>
 8009bb4:	2600      	movs	r6, #0
 8009bb6:	4d0a      	ldr	r5, [pc, #40]	@ (8009be0 <__libc_init_array+0x40>)
 8009bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8009be4 <__libc_init_array+0x44>)
 8009bba:	1b64      	subs	r4, r4, r5
 8009bbc:	10a4      	asrs	r4, r4, #2
 8009bbe:	42a6      	cmp	r6, r4
 8009bc0:	d105      	bne.n	8009bce <__libc_init_array+0x2e>
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc8:	4798      	blx	r3
 8009bca:	3601      	adds	r6, #1
 8009bcc:	e7ee      	b.n	8009bac <__libc_init_array+0xc>
 8009bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd2:	4798      	blx	r3
 8009bd4:	3601      	adds	r6, #1
 8009bd6:	e7f2      	b.n	8009bbe <__libc_init_array+0x1e>
 8009bd8:	0800a6a8 	.word	0x0800a6a8
 8009bdc:	0800a6a8 	.word	0x0800a6a8
 8009be0:	0800a6a8 	.word	0x0800a6a8
 8009be4:	0800a6ac 	.word	0x0800a6ac

08009be8 <__retarget_lock_acquire_recursive>:
 8009be8:	4770      	bx	lr

08009bea <__retarget_lock_release_recursive>:
 8009bea:	4770      	bx	lr

08009bec <strcpy>:
 8009bec:	4603      	mov	r3, r0
 8009bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bf2:	f803 2b01 	strb.w	r2, [r3], #1
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	d1f9      	bne.n	8009bee <strcpy+0x2>
 8009bfa:	4770      	bx	lr

08009bfc <memcpy>:
 8009bfc:	440a      	add	r2, r1
 8009bfe:	4291      	cmp	r1, r2
 8009c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c04:	d100      	bne.n	8009c08 <memcpy+0xc>
 8009c06:	4770      	bx	lr
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c0e:	4291      	cmp	r1, r2
 8009c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c14:	d1f9      	bne.n	8009c0a <memcpy+0xe>
 8009c16:	bd10      	pop	{r4, pc}

08009c18 <_free_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	d040      	beq.n	8009ca2 <_free_r+0x8a>
 8009c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c24:	1f0c      	subs	r4, r1, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfb8      	it	lt
 8009c2a:	18e4      	addlt	r4, r4, r3
 8009c2c:	f000 f8de 	bl	8009dec <__malloc_lock>
 8009c30:	4a1c      	ldr	r2, [pc, #112]	@ (8009ca4 <_free_r+0x8c>)
 8009c32:	6813      	ldr	r3, [r2, #0]
 8009c34:	b933      	cbnz	r3, 8009c44 <_free_r+0x2c>
 8009c36:	6063      	str	r3, [r4, #4]
 8009c38:	6014      	str	r4, [r2, #0]
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c40:	f000 b8da 	b.w	8009df8 <__malloc_unlock>
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	d908      	bls.n	8009c5a <_free_r+0x42>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	1821      	adds	r1, r4, r0
 8009c4c:	428b      	cmp	r3, r1
 8009c4e:	bf01      	itttt	eq
 8009c50:	6819      	ldreq	r1, [r3, #0]
 8009c52:	685b      	ldreq	r3, [r3, #4]
 8009c54:	1809      	addeq	r1, r1, r0
 8009c56:	6021      	streq	r1, [r4, #0]
 8009c58:	e7ed      	b.n	8009c36 <_free_r+0x1e>
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	b10b      	cbz	r3, 8009c64 <_free_r+0x4c>
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	d9fa      	bls.n	8009c5a <_free_r+0x42>
 8009c64:	6811      	ldr	r1, [r2, #0]
 8009c66:	1850      	adds	r0, r2, r1
 8009c68:	42a0      	cmp	r0, r4
 8009c6a:	d10b      	bne.n	8009c84 <_free_r+0x6c>
 8009c6c:	6820      	ldr	r0, [r4, #0]
 8009c6e:	4401      	add	r1, r0
 8009c70:	1850      	adds	r0, r2, r1
 8009c72:	4283      	cmp	r3, r0
 8009c74:	6011      	str	r1, [r2, #0]
 8009c76:	d1e0      	bne.n	8009c3a <_free_r+0x22>
 8009c78:	6818      	ldr	r0, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	4408      	add	r0, r1
 8009c7e:	6010      	str	r0, [r2, #0]
 8009c80:	6053      	str	r3, [r2, #4]
 8009c82:	e7da      	b.n	8009c3a <_free_r+0x22>
 8009c84:	d902      	bls.n	8009c8c <_free_r+0x74>
 8009c86:	230c      	movs	r3, #12
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	e7d6      	b.n	8009c3a <_free_r+0x22>
 8009c8c:	6820      	ldr	r0, [r4, #0]
 8009c8e:	1821      	adds	r1, r4, r0
 8009c90:	428b      	cmp	r3, r1
 8009c92:	bf01      	itttt	eq
 8009c94:	6819      	ldreq	r1, [r3, #0]
 8009c96:	685b      	ldreq	r3, [r3, #4]
 8009c98:	1809      	addeq	r1, r1, r0
 8009c9a:	6021      	streq	r1, [r4, #0]
 8009c9c:	6063      	str	r3, [r4, #4]
 8009c9e:	6054      	str	r4, [r2, #4]
 8009ca0:	e7cb      	b.n	8009c3a <_free_r+0x22>
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	2000161c 	.word	0x2000161c

08009ca8 <sbrk_aligned>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	4e0f      	ldr	r6, [pc, #60]	@ (8009ce8 <sbrk_aligned+0x40>)
 8009cac:	460c      	mov	r4, r1
 8009cae:	6831      	ldr	r1, [r6, #0]
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	b911      	cbnz	r1, 8009cba <sbrk_aligned+0x12>
 8009cb4:	f000 fbaa 	bl	800a40c <_sbrk_r>
 8009cb8:	6030      	str	r0, [r6, #0]
 8009cba:	4621      	mov	r1, r4
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f000 fba5 	bl	800a40c <_sbrk_r>
 8009cc2:	1c43      	adds	r3, r0, #1
 8009cc4:	d103      	bne.n	8009cce <sbrk_aligned+0x26>
 8009cc6:	f04f 34ff 	mov.w	r4, #4294967295
 8009cca:	4620      	mov	r0, r4
 8009ccc:	bd70      	pop	{r4, r5, r6, pc}
 8009cce:	1cc4      	adds	r4, r0, #3
 8009cd0:	f024 0403 	bic.w	r4, r4, #3
 8009cd4:	42a0      	cmp	r0, r4
 8009cd6:	d0f8      	beq.n	8009cca <sbrk_aligned+0x22>
 8009cd8:	1a21      	subs	r1, r4, r0
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 fb96 	bl	800a40c <_sbrk_r>
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d1f2      	bne.n	8009cca <sbrk_aligned+0x22>
 8009ce4:	e7ef      	b.n	8009cc6 <sbrk_aligned+0x1e>
 8009ce6:	bf00      	nop
 8009ce8:	20001618 	.word	0x20001618

08009cec <_malloc_r>:
 8009cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf0:	1ccd      	adds	r5, r1, #3
 8009cf2:	f025 0503 	bic.w	r5, r5, #3
 8009cf6:	3508      	adds	r5, #8
 8009cf8:	2d0c      	cmp	r5, #12
 8009cfa:	bf38      	it	cc
 8009cfc:	250c      	movcc	r5, #12
 8009cfe:	2d00      	cmp	r5, #0
 8009d00:	4606      	mov	r6, r0
 8009d02:	db01      	blt.n	8009d08 <_malloc_r+0x1c>
 8009d04:	42a9      	cmp	r1, r5
 8009d06:	d904      	bls.n	8009d12 <_malloc_r+0x26>
 8009d08:	230c      	movs	r3, #12
 8009d0a:	6033      	str	r3, [r6, #0]
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009de8 <_malloc_r+0xfc>
 8009d16:	f000 f869 	bl	8009dec <__malloc_lock>
 8009d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d1e:	461c      	mov	r4, r3
 8009d20:	bb44      	cbnz	r4, 8009d74 <_malloc_r+0x88>
 8009d22:	4629      	mov	r1, r5
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7ff ffbf 	bl	8009ca8 <sbrk_aligned>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	d158      	bne.n	8009de2 <_malloc_r+0xf6>
 8009d30:	f8d8 4000 	ldr.w	r4, [r8]
 8009d34:	4627      	mov	r7, r4
 8009d36:	2f00      	cmp	r7, #0
 8009d38:	d143      	bne.n	8009dc2 <_malloc_r+0xd6>
 8009d3a:	2c00      	cmp	r4, #0
 8009d3c:	d04b      	beq.n	8009dd6 <_malloc_r+0xea>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	4639      	mov	r1, r7
 8009d42:	4630      	mov	r0, r6
 8009d44:	eb04 0903 	add.w	r9, r4, r3
 8009d48:	f000 fb60 	bl	800a40c <_sbrk_r>
 8009d4c:	4581      	cmp	r9, r0
 8009d4e:	d142      	bne.n	8009dd6 <_malloc_r+0xea>
 8009d50:	6821      	ldr	r1, [r4, #0]
 8009d52:	4630      	mov	r0, r6
 8009d54:	1a6d      	subs	r5, r5, r1
 8009d56:	4629      	mov	r1, r5
 8009d58:	f7ff ffa6 	bl	8009ca8 <sbrk_aligned>
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	d03a      	beq.n	8009dd6 <_malloc_r+0xea>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	442b      	add	r3, r5
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	f8d8 3000 	ldr.w	r3, [r8]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	bb62      	cbnz	r2, 8009dc8 <_malloc_r+0xdc>
 8009d6e:	f8c8 7000 	str.w	r7, [r8]
 8009d72:	e00f      	b.n	8009d94 <_malloc_r+0xa8>
 8009d74:	6822      	ldr	r2, [r4, #0]
 8009d76:	1b52      	subs	r2, r2, r5
 8009d78:	d420      	bmi.n	8009dbc <_malloc_r+0xd0>
 8009d7a:	2a0b      	cmp	r2, #11
 8009d7c:	d917      	bls.n	8009dae <_malloc_r+0xc2>
 8009d7e:	1961      	adds	r1, r4, r5
 8009d80:	42a3      	cmp	r3, r4
 8009d82:	6025      	str	r5, [r4, #0]
 8009d84:	bf18      	it	ne
 8009d86:	6059      	strne	r1, [r3, #4]
 8009d88:	6863      	ldr	r3, [r4, #4]
 8009d8a:	bf08      	it	eq
 8009d8c:	f8c8 1000 	streq.w	r1, [r8]
 8009d90:	5162      	str	r2, [r4, r5]
 8009d92:	604b      	str	r3, [r1, #4]
 8009d94:	4630      	mov	r0, r6
 8009d96:	f000 f82f 	bl	8009df8 <__malloc_unlock>
 8009d9a:	f104 000b 	add.w	r0, r4, #11
 8009d9e:	1d23      	adds	r3, r4, #4
 8009da0:	f020 0007 	bic.w	r0, r0, #7
 8009da4:	1ac2      	subs	r2, r0, r3
 8009da6:	bf1c      	itt	ne
 8009da8:	1a1b      	subne	r3, r3, r0
 8009daa:	50a3      	strne	r3, [r4, r2]
 8009dac:	e7af      	b.n	8009d0e <_malloc_r+0x22>
 8009dae:	6862      	ldr	r2, [r4, #4]
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	bf0c      	ite	eq
 8009db4:	f8c8 2000 	streq.w	r2, [r8]
 8009db8:	605a      	strne	r2, [r3, #4]
 8009dba:	e7eb      	b.n	8009d94 <_malloc_r+0xa8>
 8009dbc:	4623      	mov	r3, r4
 8009dbe:	6864      	ldr	r4, [r4, #4]
 8009dc0:	e7ae      	b.n	8009d20 <_malloc_r+0x34>
 8009dc2:	463c      	mov	r4, r7
 8009dc4:	687f      	ldr	r7, [r7, #4]
 8009dc6:	e7b6      	b.n	8009d36 <_malloc_r+0x4a>
 8009dc8:	461a      	mov	r2, r3
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	d1fb      	bne.n	8009dc8 <_malloc_r+0xdc>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	6053      	str	r3, [r2, #4]
 8009dd4:	e7de      	b.n	8009d94 <_malloc_r+0xa8>
 8009dd6:	230c      	movs	r3, #12
 8009dd8:	4630      	mov	r0, r6
 8009dda:	6033      	str	r3, [r6, #0]
 8009ddc:	f000 f80c 	bl	8009df8 <__malloc_unlock>
 8009de0:	e794      	b.n	8009d0c <_malloc_r+0x20>
 8009de2:	6005      	str	r5, [r0, #0]
 8009de4:	e7d6      	b.n	8009d94 <_malloc_r+0xa8>
 8009de6:	bf00      	nop
 8009de8:	2000161c 	.word	0x2000161c

08009dec <__malloc_lock>:
 8009dec:	4801      	ldr	r0, [pc, #4]	@ (8009df4 <__malloc_lock+0x8>)
 8009dee:	f7ff befb 	b.w	8009be8 <__retarget_lock_acquire_recursive>
 8009df2:	bf00      	nop
 8009df4:	20001614 	.word	0x20001614

08009df8 <__malloc_unlock>:
 8009df8:	4801      	ldr	r0, [pc, #4]	@ (8009e00 <__malloc_unlock+0x8>)
 8009dfa:	f7ff bef6 	b.w	8009bea <__retarget_lock_release_recursive>
 8009dfe:	bf00      	nop
 8009e00:	20001614 	.word	0x20001614

08009e04 <__ssputs_r>:
 8009e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	461f      	mov	r7, r3
 8009e0a:	688e      	ldr	r6, [r1, #8]
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	42be      	cmp	r6, r7
 8009e10:	460c      	mov	r4, r1
 8009e12:	4690      	mov	r8, r2
 8009e14:	680b      	ldr	r3, [r1, #0]
 8009e16:	d82d      	bhi.n	8009e74 <__ssputs_r+0x70>
 8009e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e20:	d026      	beq.n	8009e70 <__ssputs_r+0x6c>
 8009e22:	6965      	ldr	r5, [r4, #20]
 8009e24:	6909      	ldr	r1, [r1, #16]
 8009e26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e2a:	eba3 0901 	sub.w	r9, r3, r1
 8009e2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e32:	1c7b      	adds	r3, r7, #1
 8009e34:	444b      	add	r3, r9
 8009e36:	106d      	asrs	r5, r5, #1
 8009e38:	429d      	cmp	r5, r3
 8009e3a:	bf38      	it	cc
 8009e3c:	461d      	movcc	r5, r3
 8009e3e:	0553      	lsls	r3, r2, #21
 8009e40:	d527      	bpl.n	8009e92 <__ssputs_r+0x8e>
 8009e42:	4629      	mov	r1, r5
 8009e44:	f7ff ff52 	bl	8009cec <_malloc_r>
 8009e48:	4606      	mov	r6, r0
 8009e4a:	b360      	cbz	r0, 8009ea6 <__ssputs_r+0xa2>
 8009e4c:	464a      	mov	r2, r9
 8009e4e:	6921      	ldr	r1, [r4, #16]
 8009e50:	f7ff fed4 	bl	8009bfc <memcpy>
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	6126      	str	r6, [r4, #16]
 8009e62:	444e      	add	r6, r9
 8009e64:	6026      	str	r6, [r4, #0]
 8009e66:	463e      	mov	r6, r7
 8009e68:	6165      	str	r5, [r4, #20]
 8009e6a:	eba5 0509 	sub.w	r5, r5, r9
 8009e6e:	60a5      	str	r5, [r4, #8]
 8009e70:	42be      	cmp	r6, r7
 8009e72:	d900      	bls.n	8009e76 <__ssputs_r+0x72>
 8009e74:	463e      	mov	r6, r7
 8009e76:	4632      	mov	r2, r6
 8009e78:	4641      	mov	r1, r8
 8009e7a:	6820      	ldr	r0, [r4, #0]
 8009e7c:	f000 faac 	bl	800a3d8 <memmove>
 8009e80:	2000      	movs	r0, #0
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	1b9b      	subs	r3, r3, r6
 8009e86:	60a3      	str	r3, [r4, #8]
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	4433      	add	r3, r6
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	462a      	mov	r2, r5
 8009e94:	f000 fad8 	bl	800a448 <_realloc_r>
 8009e98:	4606      	mov	r6, r0
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d1e0      	bne.n	8009e60 <__ssputs_r+0x5c>
 8009e9e:	4650      	mov	r0, sl
 8009ea0:	6921      	ldr	r1, [r4, #16]
 8009ea2:	f7ff feb9 	bl	8009c18 <_free_r>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	f8ca 3000 	str.w	r3, [sl]
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eb6:	81a3      	strh	r3, [r4, #12]
 8009eb8:	e7e9      	b.n	8009e8e <__ssputs_r+0x8a>
	...

08009ebc <_svfiprintf_r>:
 8009ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec0:	4698      	mov	r8, r3
 8009ec2:	898b      	ldrh	r3, [r1, #12]
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	061b      	lsls	r3, r3, #24
 8009ec8:	460d      	mov	r5, r1
 8009eca:	4614      	mov	r4, r2
 8009ecc:	b09d      	sub	sp, #116	@ 0x74
 8009ece:	d510      	bpl.n	8009ef2 <_svfiprintf_r+0x36>
 8009ed0:	690b      	ldr	r3, [r1, #16]
 8009ed2:	b973      	cbnz	r3, 8009ef2 <_svfiprintf_r+0x36>
 8009ed4:	2140      	movs	r1, #64	@ 0x40
 8009ed6:	f7ff ff09 	bl	8009cec <_malloc_r>
 8009eda:	6028      	str	r0, [r5, #0]
 8009edc:	6128      	str	r0, [r5, #16]
 8009ede:	b930      	cbnz	r0, 8009eee <_svfiprintf_r+0x32>
 8009ee0:	230c      	movs	r3, #12
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	b01d      	add	sp, #116	@ 0x74
 8009eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eee:	2340      	movs	r3, #64	@ 0x40
 8009ef0:	616b      	str	r3, [r5, #20]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef6:	2320      	movs	r3, #32
 8009ef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009efc:	2330      	movs	r3, #48	@ 0x30
 8009efe:	f04f 0901 	mov.w	r9, #1
 8009f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a0a0 <_svfiprintf_r+0x1e4>
 8009f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f0e:	4623      	mov	r3, r4
 8009f10:	469a      	mov	sl, r3
 8009f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f16:	b10a      	cbz	r2, 8009f1c <_svfiprintf_r+0x60>
 8009f18:	2a25      	cmp	r2, #37	@ 0x25
 8009f1a:	d1f9      	bne.n	8009f10 <_svfiprintf_r+0x54>
 8009f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f20:	d00b      	beq.n	8009f3a <_svfiprintf_r+0x7e>
 8009f22:	465b      	mov	r3, fp
 8009f24:	4622      	mov	r2, r4
 8009f26:	4629      	mov	r1, r5
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f7ff ff6b 	bl	8009e04 <__ssputs_r>
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f000 80a7 	beq.w	800a082 <_svfiprintf_r+0x1c6>
 8009f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f36:	445a      	add	r2, fp
 8009f38:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 809f 	beq.w	800a082 <_svfiprintf_r+0x1c6>
 8009f44:	2300      	movs	r3, #0
 8009f46:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f4e:	f10a 0a01 	add.w	sl, sl, #1
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	9307      	str	r3, [sp, #28]
 8009f56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f5c:	4654      	mov	r4, sl
 8009f5e:	2205      	movs	r2, #5
 8009f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f64:	484e      	ldr	r0, [pc, #312]	@ (800a0a0 <_svfiprintf_r+0x1e4>)
 8009f66:	f000 fa61 	bl	800a42c <memchr>
 8009f6a:	9a04      	ldr	r2, [sp, #16]
 8009f6c:	b9d8      	cbnz	r0, 8009fa6 <_svfiprintf_r+0xea>
 8009f6e:	06d0      	lsls	r0, r2, #27
 8009f70:	bf44      	itt	mi
 8009f72:	2320      	movmi	r3, #32
 8009f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f78:	0711      	lsls	r1, r2, #28
 8009f7a:	bf44      	itt	mi
 8009f7c:	232b      	movmi	r3, #43	@ 0x2b
 8009f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f82:	f89a 3000 	ldrb.w	r3, [sl]
 8009f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f88:	d015      	beq.n	8009fb6 <_svfiprintf_r+0xfa>
 8009f8a:	4654      	mov	r4, sl
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f04f 0c0a 	mov.w	ip, #10
 8009f92:	9a07      	ldr	r2, [sp, #28]
 8009f94:	4621      	mov	r1, r4
 8009f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f9a:	3b30      	subs	r3, #48	@ 0x30
 8009f9c:	2b09      	cmp	r3, #9
 8009f9e:	d94b      	bls.n	800a038 <_svfiprintf_r+0x17c>
 8009fa0:	b1b0      	cbz	r0, 8009fd0 <_svfiprintf_r+0x114>
 8009fa2:	9207      	str	r2, [sp, #28]
 8009fa4:	e014      	b.n	8009fd0 <_svfiprintf_r+0x114>
 8009fa6:	eba0 0308 	sub.w	r3, r0, r8
 8009faa:	fa09 f303 	lsl.w	r3, r9, r3
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	46a2      	mov	sl, r4
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	e7d2      	b.n	8009f5c <_svfiprintf_r+0xa0>
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	1d19      	adds	r1, r3, #4
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	9103      	str	r1, [sp, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	bfbb      	ittet	lt
 8009fc2:	425b      	neglt	r3, r3
 8009fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fc8:	9307      	strge	r3, [sp, #28]
 8009fca:	9307      	strlt	r3, [sp, #28]
 8009fcc:	bfb8      	it	lt
 8009fce:	9204      	strlt	r2, [sp, #16]
 8009fd0:	7823      	ldrb	r3, [r4, #0]
 8009fd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fd4:	d10a      	bne.n	8009fec <_svfiprintf_r+0x130>
 8009fd6:	7863      	ldrb	r3, [r4, #1]
 8009fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fda:	d132      	bne.n	800a042 <_svfiprintf_r+0x186>
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	3402      	adds	r4, #2
 8009fe0:	1d1a      	adds	r2, r3, #4
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	9203      	str	r2, [sp, #12]
 8009fe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fea:	9305      	str	r3, [sp, #20]
 8009fec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a0a4 <_svfiprintf_r+0x1e8>
 8009ff0:	2203      	movs	r2, #3
 8009ff2:	4650      	mov	r0, sl
 8009ff4:	7821      	ldrb	r1, [r4, #0]
 8009ff6:	f000 fa19 	bl	800a42c <memchr>
 8009ffa:	b138      	cbz	r0, 800a00c <_svfiprintf_r+0x150>
 8009ffc:	2240      	movs	r2, #64	@ 0x40
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	eba0 000a 	sub.w	r0, r0, sl
 800a004:	4082      	lsls	r2, r0
 800a006:	4313      	orrs	r3, r2
 800a008:	3401      	adds	r4, #1
 800a00a:	9304      	str	r3, [sp, #16]
 800a00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a010:	2206      	movs	r2, #6
 800a012:	4825      	ldr	r0, [pc, #148]	@ (800a0a8 <_svfiprintf_r+0x1ec>)
 800a014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a018:	f000 fa08 	bl	800a42c <memchr>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d036      	beq.n	800a08e <_svfiprintf_r+0x1d2>
 800a020:	4b22      	ldr	r3, [pc, #136]	@ (800a0ac <_svfiprintf_r+0x1f0>)
 800a022:	bb1b      	cbnz	r3, 800a06c <_svfiprintf_r+0x1b0>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	3307      	adds	r3, #7
 800a028:	f023 0307 	bic.w	r3, r3, #7
 800a02c:	3308      	adds	r3, #8
 800a02e:	9303      	str	r3, [sp, #12]
 800a030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a032:	4433      	add	r3, r6
 800a034:	9309      	str	r3, [sp, #36]	@ 0x24
 800a036:	e76a      	b.n	8009f0e <_svfiprintf_r+0x52>
 800a038:	460c      	mov	r4, r1
 800a03a:	2001      	movs	r0, #1
 800a03c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a040:	e7a8      	b.n	8009f94 <_svfiprintf_r+0xd8>
 800a042:	2300      	movs	r3, #0
 800a044:	f04f 0c0a 	mov.w	ip, #10
 800a048:	4619      	mov	r1, r3
 800a04a:	3401      	adds	r4, #1
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	4620      	mov	r0, r4
 800a050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a054:	3a30      	subs	r2, #48	@ 0x30
 800a056:	2a09      	cmp	r2, #9
 800a058:	d903      	bls.n	800a062 <_svfiprintf_r+0x1a6>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0c6      	beq.n	8009fec <_svfiprintf_r+0x130>
 800a05e:	9105      	str	r1, [sp, #20]
 800a060:	e7c4      	b.n	8009fec <_svfiprintf_r+0x130>
 800a062:	4604      	mov	r4, r0
 800a064:	2301      	movs	r3, #1
 800a066:	fb0c 2101 	mla	r1, ip, r1, r2
 800a06a:	e7f0      	b.n	800a04e <_svfiprintf_r+0x192>
 800a06c:	ab03      	add	r3, sp, #12
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	462a      	mov	r2, r5
 800a072:	4638      	mov	r0, r7
 800a074:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b0 <_svfiprintf_r+0x1f4>)
 800a076:	a904      	add	r1, sp, #16
 800a078:	f3af 8000 	nop.w
 800a07c:	1c42      	adds	r2, r0, #1
 800a07e:	4606      	mov	r6, r0
 800a080:	d1d6      	bne.n	800a030 <_svfiprintf_r+0x174>
 800a082:	89ab      	ldrh	r3, [r5, #12]
 800a084:	065b      	lsls	r3, r3, #25
 800a086:	f53f af2d 	bmi.w	8009ee4 <_svfiprintf_r+0x28>
 800a08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a08c:	e72c      	b.n	8009ee8 <_svfiprintf_r+0x2c>
 800a08e:	ab03      	add	r3, sp, #12
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	462a      	mov	r2, r5
 800a094:	4638      	mov	r0, r7
 800a096:	4b06      	ldr	r3, [pc, #24]	@ (800a0b0 <_svfiprintf_r+0x1f4>)
 800a098:	a904      	add	r1, sp, #16
 800a09a:	f000 f87d 	bl	800a198 <_printf_i>
 800a09e:	e7ed      	b.n	800a07c <_svfiprintf_r+0x1c0>
 800a0a0:	0800a673 	.word	0x0800a673
 800a0a4:	0800a679 	.word	0x0800a679
 800a0a8:	0800a67d 	.word	0x0800a67d
 800a0ac:	00000000 	.word	0x00000000
 800a0b0:	08009e05 	.word	0x08009e05

0800a0b4 <_printf_common>:
 800a0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b8:	4616      	mov	r6, r2
 800a0ba:	4698      	mov	r8, r3
 800a0bc:	688a      	ldr	r2, [r1, #8]
 800a0be:	690b      	ldr	r3, [r1, #16]
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	bfb8      	it	lt
 800a0c6:	4613      	movlt	r3, r2
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0d4:	b10a      	cbz	r2, 800a0da <_printf_common+0x26>
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	6033      	str	r3, [r6, #0]
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	0699      	lsls	r1, r3, #26
 800a0de:	bf42      	ittt	mi
 800a0e0:	6833      	ldrmi	r3, [r6, #0]
 800a0e2:	3302      	addmi	r3, #2
 800a0e4:	6033      	strmi	r3, [r6, #0]
 800a0e6:	6825      	ldr	r5, [r4, #0]
 800a0e8:	f015 0506 	ands.w	r5, r5, #6
 800a0ec:	d106      	bne.n	800a0fc <_printf_common+0x48>
 800a0ee:	f104 0a19 	add.w	sl, r4, #25
 800a0f2:	68e3      	ldr	r3, [r4, #12]
 800a0f4:	6832      	ldr	r2, [r6, #0]
 800a0f6:	1a9b      	subs	r3, r3, r2
 800a0f8:	42ab      	cmp	r3, r5
 800a0fa:	dc2b      	bgt.n	800a154 <_printf_common+0xa0>
 800a0fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a100:	6822      	ldr	r2, [r4, #0]
 800a102:	3b00      	subs	r3, #0
 800a104:	bf18      	it	ne
 800a106:	2301      	movne	r3, #1
 800a108:	0692      	lsls	r2, r2, #26
 800a10a:	d430      	bmi.n	800a16e <_printf_common+0xba>
 800a10c:	4641      	mov	r1, r8
 800a10e:	4638      	mov	r0, r7
 800a110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a114:	47c8      	blx	r9
 800a116:	3001      	adds	r0, #1
 800a118:	d023      	beq.n	800a162 <_printf_common+0xae>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	6922      	ldr	r2, [r4, #16]
 800a11e:	f003 0306 	and.w	r3, r3, #6
 800a122:	2b04      	cmp	r3, #4
 800a124:	bf14      	ite	ne
 800a126:	2500      	movne	r5, #0
 800a128:	6833      	ldreq	r3, [r6, #0]
 800a12a:	f04f 0600 	mov.w	r6, #0
 800a12e:	bf08      	it	eq
 800a130:	68e5      	ldreq	r5, [r4, #12]
 800a132:	f104 041a 	add.w	r4, r4, #26
 800a136:	bf08      	it	eq
 800a138:	1aed      	subeq	r5, r5, r3
 800a13a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a13e:	bf08      	it	eq
 800a140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a144:	4293      	cmp	r3, r2
 800a146:	bfc4      	itt	gt
 800a148:	1a9b      	subgt	r3, r3, r2
 800a14a:	18ed      	addgt	r5, r5, r3
 800a14c:	42b5      	cmp	r5, r6
 800a14e:	d11a      	bne.n	800a186 <_printf_common+0xd2>
 800a150:	2000      	movs	r0, #0
 800a152:	e008      	b.n	800a166 <_printf_common+0xb2>
 800a154:	2301      	movs	r3, #1
 800a156:	4652      	mov	r2, sl
 800a158:	4641      	mov	r1, r8
 800a15a:	4638      	mov	r0, r7
 800a15c:	47c8      	blx	r9
 800a15e:	3001      	adds	r0, #1
 800a160:	d103      	bne.n	800a16a <_printf_common+0xb6>
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a16a:	3501      	adds	r5, #1
 800a16c:	e7c1      	b.n	800a0f2 <_printf_common+0x3e>
 800a16e:	2030      	movs	r0, #48	@ 0x30
 800a170:	18e1      	adds	r1, r4, r3
 800a172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a17c:	4422      	add	r2, r4
 800a17e:	3302      	adds	r3, #2
 800a180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a184:	e7c2      	b.n	800a10c <_printf_common+0x58>
 800a186:	2301      	movs	r3, #1
 800a188:	4622      	mov	r2, r4
 800a18a:	4641      	mov	r1, r8
 800a18c:	4638      	mov	r0, r7
 800a18e:	47c8      	blx	r9
 800a190:	3001      	adds	r0, #1
 800a192:	d0e6      	beq.n	800a162 <_printf_common+0xae>
 800a194:	3601      	adds	r6, #1
 800a196:	e7d9      	b.n	800a14c <_printf_common+0x98>

0800a198 <_printf_i>:
 800a198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a19c:	7e0f      	ldrb	r7, [r1, #24]
 800a19e:	4691      	mov	r9, r2
 800a1a0:	2f78      	cmp	r7, #120	@ 0x78
 800a1a2:	4680      	mov	r8, r0
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	469a      	mov	sl, r3
 800a1a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1ae:	d807      	bhi.n	800a1c0 <_printf_i+0x28>
 800a1b0:	2f62      	cmp	r7, #98	@ 0x62
 800a1b2:	d80a      	bhi.n	800a1ca <_printf_i+0x32>
 800a1b4:	2f00      	cmp	r7, #0
 800a1b6:	f000 80d3 	beq.w	800a360 <_printf_i+0x1c8>
 800a1ba:	2f58      	cmp	r7, #88	@ 0x58
 800a1bc:	f000 80ba 	beq.w	800a334 <_printf_i+0x19c>
 800a1c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1c8:	e03a      	b.n	800a240 <_printf_i+0xa8>
 800a1ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1ce:	2b15      	cmp	r3, #21
 800a1d0:	d8f6      	bhi.n	800a1c0 <_printf_i+0x28>
 800a1d2:	a101      	add	r1, pc, #4	@ (adr r1, 800a1d8 <_printf_i+0x40>)
 800a1d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1d8:	0800a231 	.word	0x0800a231
 800a1dc:	0800a245 	.word	0x0800a245
 800a1e0:	0800a1c1 	.word	0x0800a1c1
 800a1e4:	0800a1c1 	.word	0x0800a1c1
 800a1e8:	0800a1c1 	.word	0x0800a1c1
 800a1ec:	0800a1c1 	.word	0x0800a1c1
 800a1f0:	0800a245 	.word	0x0800a245
 800a1f4:	0800a1c1 	.word	0x0800a1c1
 800a1f8:	0800a1c1 	.word	0x0800a1c1
 800a1fc:	0800a1c1 	.word	0x0800a1c1
 800a200:	0800a1c1 	.word	0x0800a1c1
 800a204:	0800a347 	.word	0x0800a347
 800a208:	0800a26f 	.word	0x0800a26f
 800a20c:	0800a301 	.word	0x0800a301
 800a210:	0800a1c1 	.word	0x0800a1c1
 800a214:	0800a1c1 	.word	0x0800a1c1
 800a218:	0800a369 	.word	0x0800a369
 800a21c:	0800a1c1 	.word	0x0800a1c1
 800a220:	0800a26f 	.word	0x0800a26f
 800a224:	0800a1c1 	.word	0x0800a1c1
 800a228:	0800a1c1 	.word	0x0800a1c1
 800a22c:	0800a309 	.word	0x0800a309
 800a230:	6833      	ldr	r3, [r6, #0]
 800a232:	1d1a      	adds	r2, r3, #4
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6032      	str	r2, [r6, #0]
 800a238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a23c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a240:	2301      	movs	r3, #1
 800a242:	e09e      	b.n	800a382 <_printf_i+0x1ea>
 800a244:	6833      	ldr	r3, [r6, #0]
 800a246:	6820      	ldr	r0, [r4, #0]
 800a248:	1d19      	adds	r1, r3, #4
 800a24a:	6031      	str	r1, [r6, #0]
 800a24c:	0606      	lsls	r6, r0, #24
 800a24e:	d501      	bpl.n	800a254 <_printf_i+0xbc>
 800a250:	681d      	ldr	r5, [r3, #0]
 800a252:	e003      	b.n	800a25c <_printf_i+0xc4>
 800a254:	0645      	lsls	r5, r0, #25
 800a256:	d5fb      	bpl.n	800a250 <_printf_i+0xb8>
 800a258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a25c:	2d00      	cmp	r5, #0
 800a25e:	da03      	bge.n	800a268 <_printf_i+0xd0>
 800a260:	232d      	movs	r3, #45	@ 0x2d
 800a262:	426d      	negs	r5, r5
 800a264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a268:	230a      	movs	r3, #10
 800a26a:	4859      	ldr	r0, [pc, #356]	@ (800a3d0 <_printf_i+0x238>)
 800a26c:	e011      	b.n	800a292 <_printf_i+0xfa>
 800a26e:	6821      	ldr	r1, [r4, #0]
 800a270:	6833      	ldr	r3, [r6, #0]
 800a272:	0608      	lsls	r0, r1, #24
 800a274:	f853 5b04 	ldr.w	r5, [r3], #4
 800a278:	d402      	bmi.n	800a280 <_printf_i+0xe8>
 800a27a:	0649      	lsls	r1, r1, #25
 800a27c:	bf48      	it	mi
 800a27e:	b2ad      	uxthmi	r5, r5
 800a280:	2f6f      	cmp	r7, #111	@ 0x6f
 800a282:	6033      	str	r3, [r6, #0]
 800a284:	bf14      	ite	ne
 800a286:	230a      	movne	r3, #10
 800a288:	2308      	moveq	r3, #8
 800a28a:	4851      	ldr	r0, [pc, #324]	@ (800a3d0 <_printf_i+0x238>)
 800a28c:	2100      	movs	r1, #0
 800a28e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a292:	6866      	ldr	r6, [r4, #4]
 800a294:	2e00      	cmp	r6, #0
 800a296:	bfa8      	it	ge
 800a298:	6821      	ldrge	r1, [r4, #0]
 800a29a:	60a6      	str	r6, [r4, #8]
 800a29c:	bfa4      	itt	ge
 800a29e:	f021 0104 	bicge.w	r1, r1, #4
 800a2a2:	6021      	strge	r1, [r4, #0]
 800a2a4:	b90d      	cbnz	r5, 800a2aa <_printf_i+0x112>
 800a2a6:	2e00      	cmp	r6, #0
 800a2a8:	d04b      	beq.n	800a342 <_printf_i+0x1aa>
 800a2aa:	4616      	mov	r6, r2
 800a2ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2b0:	fb03 5711 	mls	r7, r3, r1, r5
 800a2b4:	5dc7      	ldrb	r7, [r0, r7]
 800a2b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2ba:	462f      	mov	r7, r5
 800a2bc:	42bb      	cmp	r3, r7
 800a2be:	460d      	mov	r5, r1
 800a2c0:	d9f4      	bls.n	800a2ac <_printf_i+0x114>
 800a2c2:	2b08      	cmp	r3, #8
 800a2c4:	d10b      	bne.n	800a2de <_printf_i+0x146>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	07df      	lsls	r7, r3, #31
 800a2ca:	d508      	bpl.n	800a2de <_printf_i+0x146>
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	6861      	ldr	r1, [r4, #4]
 800a2d0:	4299      	cmp	r1, r3
 800a2d2:	bfde      	ittt	le
 800a2d4:	2330      	movle	r3, #48	@ 0x30
 800a2d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2de:	1b92      	subs	r2, r2, r6
 800a2e0:	6122      	str	r2, [r4, #16]
 800a2e2:	464b      	mov	r3, r9
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4640      	mov	r0, r8
 800a2e8:	f8cd a000 	str.w	sl, [sp]
 800a2ec:	aa03      	add	r2, sp, #12
 800a2ee:	f7ff fee1 	bl	800a0b4 <_printf_common>
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d14a      	bne.n	800a38c <_printf_i+0x1f4>
 800a2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fa:	b004      	add	sp, #16
 800a2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	f043 0320 	orr.w	r3, r3, #32
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	2778      	movs	r7, #120	@ 0x78
 800a30a:	4832      	ldr	r0, [pc, #200]	@ (800a3d4 <_printf_i+0x23c>)
 800a30c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	6831      	ldr	r1, [r6, #0]
 800a314:	061f      	lsls	r7, r3, #24
 800a316:	f851 5b04 	ldr.w	r5, [r1], #4
 800a31a:	d402      	bmi.n	800a322 <_printf_i+0x18a>
 800a31c:	065f      	lsls	r7, r3, #25
 800a31e:	bf48      	it	mi
 800a320:	b2ad      	uxthmi	r5, r5
 800a322:	6031      	str	r1, [r6, #0]
 800a324:	07d9      	lsls	r1, r3, #31
 800a326:	bf44      	itt	mi
 800a328:	f043 0320 	orrmi.w	r3, r3, #32
 800a32c:	6023      	strmi	r3, [r4, #0]
 800a32e:	b11d      	cbz	r5, 800a338 <_printf_i+0x1a0>
 800a330:	2310      	movs	r3, #16
 800a332:	e7ab      	b.n	800a28c <_printf_i+0xf4>
 800a334:	4826      	ldr	r0, [pc, #152]	@ (800a3d0 <_printf_i+0x238>)
 800a336:	e7e9      	b.n	800a30c <_printf_i+0x174>
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	f023 0320 	bic.w	r3, r3, #32
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	e7f6      	b.n	800a330 <_printf_i+0x198>
 800a342:	4616      	mov	r6, r2
 800a344:	e7bd      	b.n	800a2c2 <_printf_i+0x12a>
 800a346:	6833      	ldr	r3, [r6, #0]
 800a348:	6825      	ldr	r5, [r4, #0]
 800a34a:	1d18      	adds	r0, r3, #4
 800a34c:	6961      	ldr	r1, [r4, #20]
 800a34e:	6030      	str	r0, [r6, #0]
 800a350:	062e      	lsls	r6, r5, #24
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	d501      	bpl.n	800a35a <_printf_i+0x1c2>
 800a356:	6019      	str	r1, [r3, #0]
 800a358:	e002      	b.n	800a360 <_printf_i+0x1c8>
 800a35a:	0668      	lsls	r0, r5, #25
 800a35c:	d5fb      	bpl.n	800a356 <_printf_i+0x1be>
 800a35e:	8019      	strh	r1, [r3, #0]
 800a360:	2300      	movs	r3, #0
 800a362:	4616      	mov	r6, r2
 800a364:	6123      	str	r3, [r4, #16]
 800a366:	e7bc      	b.n	800a2e2 <_printf_i+0x14a>
 800a368:	6833      	ldr	r3, [r6, #0]
 800a36a:	2100      	movs	r1, #0
 800a36c:	1d1a      	adds	r2, r3, #4
 800a36e:	6032      	str	r2, [r6, #0]
 800a370:	681e      	ldr	r6, [r3, #0]
 800a372:	6862      	ldr	r2, [r4, #4]
 800a374:	4630      	mov	r0, r6
 800a376:	f000 f859 	bl	800a42c <memchr>
 800a37a:	b108      	cbz	r0, 800a380 <_printf_i+0x1e8>
 800a37c:	1b80      	subs	r0, r0, r6
 800a37e:	6060      	str	r0, [r4, #4]
 800a380:	6863      	ldr	r3, [r4, #4]
 800a382:	6123      	str	r3, [r4, #16]
 800a384:	2300      	movs	r3, #0
 800a386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a38a:	e7aa      	b.n	800a2e2 <_printf_i+0x14a>
 800a38c:	4632      	mov	r2, r6
 800a38e:	4649      	mov	r1, r9
 800a390:	4640      	mov	r0, r8
 800a392:	6923      	ldr	r3, [r4, #16]
 800a394:	47d0      	blx	sl
 800a396:	3001      	adds	r0, #1
 800a398:	d0ad      	beq.n	800a2f6 <_printf_i+0x15e>
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	079b      	lsls	r3, r3, #30
 800a39e:	d413      	bmi.n	800a3c8 <_printf_i+0x230>
 800a3a0:	68e0      	ldr	r0, [r4, #12]
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	4298      	cmp	r0, r3
 800a3a6:	bfb8      	it	lt
 800a3a8:	4618      	movlt	r0, r3
 800a3aa:	e7a6      	b.n	800a2fa <_printf_i+0x162>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	47d0      	blx	sl
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d09d      	beq.n	800a2f6 <_printf_i+0x15e>
 800a3ba:	3501      	adds	r5, #1
 800a3bc:	68e3      	ldr	r3, [r4, #12]
 800a3be:	9903      	ldr	r1, [sp, #12]
 800a3c0:	1a5b      	subs	r3, r3, r1
 800a3c2:	42ab      	cmp	r3, r5
 800a3c4:	dcf2      	bgt.n	800a3ac <_printf_i+0x214>
 800a3c6:	e7eb      	b.n	800a3a0 <_printf_i+0x208>
 800a3c8:	2500      	movs	r5, #0
 800a3ca:	f104 0619 	add.w	r6, r4, #25
 800a3ce:	e7f5      	b.n	800a3bc <_printf_i+0x224>
 800a3d0:	0800a684 	.word	0x0800a684
 800a3d4:	0800a695 	.word	0x0800a695

0800a3d8 <memmove>:
 800a3d8:	4288      	cmp	r0, r1
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	eb01 0402 	add.w	r4, r1, r2
 800a3e0:	d902      	bls.n	800a3e8 <memmove+0x10>
 800a3e2:	4284      	cmp	r4, r0
 800a3e4:	4623      	mov	r3, r4
 800a3e6:	d807      	bhi.n	800a3f8 <memmove+0x20>
 800a3e8:	1e43      	subs	r3, r0, #1
 800a3ea:	42a1      	cmp	r1, r4
 800a3ec:	d008      	beq.n	800a400 <memmove+0x28>
 800a3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3f6:	e7f8      	b.n	800a3ea <memmove+0x12>
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	4402      	add	r2, r0
 800a3fc:	428a      	cmp	r2, r1
 800a3fe:	d100      	bne.n	800a402 <memmove+0x2a>
 800a400:	bd10      	pop	{r4, pc}
 800a402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a40a:	e7f7      	b.n	800a3fc <memmove+0x24>

0800a40c <_sbrk_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	2300      	movs	r3, #0
 800a410:	4d05      	ldr	r5, [pc, #20]	@ (800a428 <_sbrk_r+0x1c>)
 800a412:	4604      	mov	r4, r0
 800a414:	4608      	mov	r0, r1
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	f7f6 fe86 	bl	8001128 <_sbrk>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_sbrk_r+0x1a>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_sbrk_r+0x1a>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	20001610 	.word	0x20001610

0800a42c <memchr>:
 800a42c:	4603      	mov	r3, r0
 800a42e:	b510      	push	{r4, lr}
 800a430:	b2c9      	uxtb	r1, r1
 800a432:	4402      	add	r2, r0
 800a434:	4293      	cmp	r3, r2
 800a436:	4618      	mov	r0, r3
 800a438:	d101      	bne.n	800a43e <memchr+0x12>
 800a43a:	2000      	movs	r0, #0
 800a43c:	e003      	b.n	800a446 <memchr+0x1a>
 800a43e:	7804      	ldrb	r4, [r0, #0]
 800a440:	3301      	adds	r3, #1
 800a442:	428c      	cmp	r4, r1
 800a444:	d1f6      	bne.n	800a434 <memchr+0x8>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <_realloc_r>:
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	4680      	mov	r8, r0
 800a44e:	4615      	mov	r5, r2
 800a450:	460c      	mov	r4, r1
 800a452:	b921      	cbnz	r1, 800a45e <_realloc_r+0x16>
 800a454:	4611      	mov	r1, r2
 800a456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a45a:	f7ff bc47 	b.w	8009cec <_malloc_r>
 800a45e:	b92a      	cbnz	r2, 800a46c <_realloc_r+0x24>
 800a460:	f7ff fbda 	bl	8009c18 <_free_r>
 800a464:	2400      	movs	r4, #0
 800a466:	4620      	mov	r0, r4
 800a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a46c:	f000 f81a 	bl	800a4a4 <_malloc_usable_size_r>
 800a470:	4285      	cmp	r5, r0
 800a472:	4606      	mov	r6, r0
 800a474:	d802      	bhi.n	800a47c <_realloc_r+0x34>
 800a476:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a47a:	d8f4      	bhi.n	800a466 <_realloc_r+0x1e>
 800a47c:	4629      	mov	r1, r5
 800a47e:	4640      	mov	r0, r8
 800a480:	f7ff fc34 	bl	8009cec <_malloc_r>
 800a484:	4607      	mov	r7, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	d0ec      	beq.n	800a464 <_realloc_r+0x1c>
 800a48a:	42b5      	cmp	r5, r6
 800a48c:	462a      	mov	r2, r5
 800a48e:	4621      	mov	r1, r4
 800a490:	bf28      	it	cs
 800a492:	4632      	movcs	r2, r6
 800a494:	f7ff fbb2 	bl	8009bfc <memcpy>
 800a498:	4621      	mov	r1, r4
 800a49a:	4640      	mov	r0, r8
 800a49c:	f7ff fbbc 	bl	8009c18 <_free_r>
 800a4a0:	463c      	mov	r4, r7
 800a4a2:	e7e0      	b.n	800a466 <_realloc_r+0x1e>

0800a4a4 <_malloc_usable_size_r>:
 800a4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a8:	1f18      	subs	r0, r3, #4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bfbc      	itt	lt
 800a4ae:	580b      	ldrlt	r3, [r1, r0]
 800a4b0:	18c0      	addlt	r0, r0, r3
 800a4b2:	4770      	bx	lr

0800a4b4 <_init>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	bf00      	nop
 800a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ba:	bc08      	pop	{r3}
 800a4bc:	469e      	mov	lr, r3
 800a4be:	4770      	bx	lr

0800a4c0 <_fini>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr
