
node_do_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080090c0  080090c0  0000a0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d8  080092d8  0000b070  2**0
                  CONTENTS
  4 .ARM          00000000  080092d8  080092d8  0000b070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092d8  080092d8  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d8  080092d8  0000a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092dc  080092dc  0000a2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080092e0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f64  20000070  08009350  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fd4  08009350  0000bfd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014636  00000000  00000000  0000b099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f7  00000000  00000000  0001f6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  000229c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100f  00000000  00000000  00023e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a407  00000000  00000000  00024e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5b4  00000000  00000000  0003f266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095613  00000000  00000000  0005981a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eee2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000608c  00000000  00000000  000eee70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f4efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080090a8 	.word	0x080090a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080090a8 	.word	0x080090a8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <CCS811_ReadReg>:
extern I2C_HandleTypeDef hi2c2;

#define hi2cxc hi2c2
// Hàm đọc từ 1 thanh ghi (1byte)
uint8_t CCS811_ReadReg(uint8_t addr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &result, 1, 100);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	2364      	movs	r3, #100	@ 0x64
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	f107 030f 	add.w	r3, r7, #15
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	21b4      	movs	r1, #180	@ 0xb4
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <CCS811_ReadReg+0x34>)
 8000d5a:	f003 f8d5 	bl	8003f08 <HAL_I2C_Mem_Read>
    return result;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000110 	.word	0x20000110

08000d6c <CCS811_ReadRegMulti>:
// hàm đọc nhiều byte từ thanh ghi
void CCS811_ReadRegMulti(uint8_t addr, uint8_t * val,uint8_t size)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read( &hi2cxc, CCS811_ADDR, ( uint8_t )addr, I2C_MEMADD_SIZE_8BIT, val, size,100 );
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	2164      	movs	r1, #100	@ 0x64
 8000d86:	9102      	str	r1, [sp, #8]
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	21b4      	movs	r1, #180	@ 0xb4
 8000d92:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <CCS811_ReadRegMulti+0x34>)
 8000d94:	f003 f8b8 	bl	8003f08 <HAL_I2C_Mem_Read>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000110 	.word	0x20000110

08000da4 <CCS811_WriteReg>:

// Hàm viết vào 1 thanh ghi 1byte
void CCS811_WriteReg(uint8_t addr, uint8_t val)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	1dbb      	adds	r3, r7, #6
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	21b4      	movs	r1, #180	@ 0xb4
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <CCS811_WriteReg+0x34>)
 8000dca:	f002 ffa3 	bl	8003d14 <HAL_I2C_Mem_Write>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000110 	.word	0x20000110

08000ddc <CCS811_Init>:
void CCS811_WriteRegMulti(uint8_t addr, uint8_t *data, uint8_t length)
{
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
}
// Hàm khởi tạo CCS811
void CCS811_Init() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
    uint8_t status[1] = {0};
 8000de2:	2300      	movs	r3, #0
 8000de4:	723b      	strb	r3, [r7, #8]
    int Init_OK = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000dea:	e026      	b.n	8000e3a <CCS811_Init+0x5e>
    {
		// Kiểm tra trạng thái cảm biến
    	status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ffa1 	bl	8000d34 <CCS811_ReadReg>
 8000df2:	4603      	mov	r3, r0
 8000df4:	723b      	strb	r3, [r7, #8]
		if ((status[0] & 0x10) == 0)
 8000df6:	7a3b      	ldrb	r3, [r7, #8]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <CCS811_Init+0x2a>
		{  // Kiểm tra nếu chưa sẵn sàng (bit 4 là 0)
			Init_OK = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	e019      	b.n	8000e3a <CCS811_Init+0x5e>
		}
		else
		{
			// Gửi lệnh bắt đầu ứng dụng
			uint8_t app_start = CCS811_APP_START;
 8000e06:	23f4      	movs	r3, #244	@ 0xf4
 8000e08:	71fb      	strb	r3, [r7, #7]
			HAL_I2C_Master_Transmit(&hi2cxc, CCS811_ADDR, &app_start, 1, HAL_MAX_DELAY);
 8000e0a:	1dfa      	adds	r2, r7, #7
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	21b4      	movs	r1, #180	@ 0xb4
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <CCS811_Init+0x70>)
 8000e18:	f002 fe7e 	bl	8003b18 <HAL_I2C_Master_Transmit>
			// Kiểm tra lại trạng thái
			status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ff89 	bl	8000d34 <CCS811_ReadReg>
 8000e22:	4603      	mov	r3, r0
 8000e24:	723b      	strb	r3, [r7, #8]
			if ((status[0] & 0x90) != 0x90) //bit 7 và 4=1
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8000e2c:	2b90      	cmp	r3, #144	@ 0x90
 8000e2e:	d002      	beq.n	8000e36 <CCS811_Init+0x5a>
			{  // Kiểm tra nếu sẵn sàng và không có lỗi
				Init_OK = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e001      	b.n	8000e3a <CCS811_Init+0x5e>
			}
			else
			{
				Init_OK = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0d5      	beq.n	8000dec <CCS811_Init+0x10>
			}

		}
    }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000110 	.word	0x20000110

08000e50 <CCS811_Reset>:
void CCS811_Reset(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CCS_RST_GPIO_Port, CCS_RST_Pin, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <CCS811_Reset+0x20>)
 8000e5c:	f002 fce7 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CCS_RST_GPIO_Port, CCS_RST_Pin, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e66:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <CCS811_Reset+0x20>)
 8000e68:	f002 fce1 	bl	800382e <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40011000 	.word	0x40011000

08000e74 <CCS811_Set_Mode>:
void CCS811_Set_Mode(uint8_t mode)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
   // Chế độ đo
	mode = mode <<4;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	71fb      	strb	r3, [r7, #7]
    CCS811_WriteReg(CCS811_MEAS_MODE, mode);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4619      	mov	r1, r3
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f7ff ff8b 	bl	8000da4 <CCS811_WriteReg>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <CCS811_Read_Co2>:
	    //Mode 4 = RAW mode.
 */

//Hàm đọc giá trị Co2
void CCS811_Read_Co2(uint16_t *eCO2)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2208      	movs	r2, #8
 8000eac:	4619      	mov	r1, r3
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff ff5c 	bl	8000d6c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *eCO2 = (buf[0] << 8) | buf[1];
 8000eb4:	7a3b      	ldrb	r3, [r7, #8]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	7a7b      	ldrb	r3, [r7, #9]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	801a      	strh	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <CCS811_EnableInt>:
    }
}

//Enable the nINT signal
void CCS811_EnableInt(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
	uint8_t setting = CCS811_ReadReg(CCS811_MEAS_MODE); //đọc giá trị lúc trước
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff ff2c 	bl	8000d34 <CCS811_ReadReg>
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
	setting |= (1 << 3); //Set INTERRUPT bit ( chế độ khi có giá trị mới sẽ ngắt)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	71fb      	strb	r3, [r7, #7]
	CCS811_WriteReg(CCS811_MEAS_MODE, setting);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4619      	mov	r1, r3
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff ff59 	bl	8000da4 <CCS811_WriteReg>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <lcd_send_cmd>:
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f023 030f 	bic.w	r3, r3, #15
 8000f0c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	f043 030c 	orr.w	r3, r3, #12
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	f043 030c 	orr.w	r3, r3, #12
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000f3c:	f107 0208 	add.w	r2, r7, #8
 8000f40:	2364      	movs	r3, #100	@ 0x64
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2304      	movs	r3, #4
 8000f46:	214e      	movs	r1, #78	@ 0x4e
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <lcd_send_cmd+0x5c>)
 8000f4a:	f002 fde5 	bl	8003b18 <HAL_I2C_Master_Transmit>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000bc 	.word	0x200000bc

08000f5c <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f023 030f 	bic.w	r3, r3, #15
 8000f6c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f043 030d 	orr.w	r3, r3, #13
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	f043 0309 	orr.w	r3, r3, #9
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	f043 030d 	orr.w	r3, r3, #13
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	f043 0309 	orr.w	r3, r3, #9
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000f9c:	f107 0208 	add.w	r2, r7, #8
 8000fa0:	2364      	movs	r3, #100	@ 0x64
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	214e      	movs	r1, #78	@ 0x4e
 8000fa8:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <lcd_send_data+0x5c>)
 8000faa:	f002 fdb5 	bl	8003b18 <HAL_I2C_Master_Transmit>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000bc 	.word	0x200000bc

08000fbc <lcd_put_cur>:
		lcd_send_data(' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <lcd_put_cur+0x18>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <lcd_put_cur+0x22>
 8000fd2:	e009      	b.n	8000fe8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fda:	603b      	str	r3, [r7, #0]
            break;
 8000fdc:	e004      	b.n	8000fe8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fe4:	603b      	str	r3, [r7, #0]
            break;
 8000fe6:	bf00      	nop
    }

    lcd_send_cmd(col);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff85 	bl	8000efc <lcd_send_cmd>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <lcd_init>:

void lcd_init (void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 8000ffe:	2032      	movs	r0, #50	@ 0x32
 8001000:	f001 fc98 	bl	8002934 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001004:	2030      	movs	r0, #48	@ 0x30
 8001006:	f7ff ff79 	bl	8000efc <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 800100a:	2005      	movs	r0, #5
 800100c:	f001 fc92 	bl	8002934 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001010:	2030      	movs	r0, #48	@ 0x30
 8001012:	f7ff ff73 	bl	8000efc <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 8001016:	2001      	movs	r0, #1
 8001018:	f001 fc8c 	bl	8002934 <HAL_Delay>
	lcd_send_cmd(0x30);
 800101c:	2030      	movs	r0, #48	@ 0x30
 800101e:	f7ff ff6d 	bl	8000efc <lcd_send_cmd>
	HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f001 fc86 	bl	8002934 <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff ff67 	bl	8000efc <lcd_send_cmd>
	HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f001 fc80 	bl	8002934 <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 8001034:	2028      	movs	r0, #40	@ 0x28
 8001036:	f7ff ff61 	bl	8000efc <lcd_send_cmd>
	HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f001 fc7a 	bl	8002934 <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 8001040:	2008      	movs	r0, #8
 8001042:	f7ff ff5b 	bl	8000efc <lcd_send_cmd>
	HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f001 fc74 	bl	8002934 <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff ff55 	bl	8000efc <lcd_send_cmd>
	HAL_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f001 fc6e 	bl	8002934 <HAL_Delay>
	HAL_Delay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f001 fc6b 	bl	8002934 <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 800105e:	2006      	movs	r0, #6
 8001060:	f7ff ff4c 	bl	8000efc <lcd_send_cmd>
	HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f001 fc65 	bl	8002934 <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 800106a:	200c      	movs	r0, #12
 800106c:	f7ff ff46 	bl	8000efc <lcd_send_cmd>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 800107c:	e006      	b.n	800108c <lcd_send_string+0x18>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff68 	bl	8000f5c <lcd_send_data>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f4      	bne.n	800107e <lcd_send_string+0xa>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <set_time>:
RTC_TimeTypeDef gTime;



void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	460b      	mov	r3, r1
 80010ac:	71bb      	strb	r3, [r7, #6]
 80010ae:	4613      	mov	r3, r2
 80010b0:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime = {0};
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2100      	movs	r1, #0
 80010b8:	460a      	mov	r2, r1
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	460a      	mov	r2, r1
 80010be:	709a      	strb	r2, [r3, #2]

	sTime.Hours = hr;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4808      	ldr	r0, [pc, #32]	@ (80010f8 <set_time+0x58>)
 80010d6:	f004 fbd5 	bl	8005884 <HAL_RTC_SetTime>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <set_time+0x44>
	{
		Error_Handler();
 80010e0:	f000 ff9a 	bl	8002018 <Error_Handler>
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 80010e4:	f242 3245 	movw	r2, #9029	@ 0x2345
 80010e8:	2101      	movs	r1, #1
 80010ea:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <set_time+0x58>)
 80010ec:	f004 ffdc 	bl	80060a8 <HAL_RTCEx_BKUPWrite>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000164 	.word	0x20000164

080010fc <get_time>:

void get_time()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001100:	2200      	movs	r2, #0
 8001102:	4903      	ldr	r1, [pc, #12]	@ (8001110 <get_time+0x14>)
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <get_time+0x18>)
 8001106:	f004 fc55 	bl	80059b4 <HAL_RTC_GetTime>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000e80 	.word	0x20000e80
 8001114:	20000164 	.word	0x20000164

08001118 <CO_ppm_convert>:

int CO_ppm_convert(float CO_vol) {
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    float a = ((5.0 - CO_vol) / CO_vol) * (10/5);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff f979 	bl	8000418 <__aeabi_f2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4922      	ldr	r1, [pc, #136]	@ (80011b8 <CO_ppm_convert+0xa0>)
 8001130:	f7ff f812 	bl	8000158 <__aeabi_dsub>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4614      	mov	r4, r2
 800113a:	461d      	mov	r5, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f96b 	bl	8000418 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4620      	mov	r0, r4
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff fae7 	bl	800071c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	f7fe ffff 	bl	800015c <__adddf3>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fc87 	bl	8000a78 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	60fb      	str	r3, [r7, #12]
    return (int)round(100 * pow(a, -1.559));
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f7ff f952 	bl	8000418 <__aeabi_f2d>
 8001174:	a30e      	add	r3, pc, #56	@ (adr r3, 80011b0 <CO_ppm_convert+0x98>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f007 f841 	bl	8008200 <pow>
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <CO_ppm_convert+0xa4>)
 8001184:	f7ff f9a0 	bl	80004c8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f007 f8a4 	bl	80082dc <round>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fc44 	bl	8000a28 <__aeabi_d2iz>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bdb0      	pop	{r4, r5, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	fbe76c8b 	.word	0xfbe76c8b
 80011b4:	bff8f1a9 	.word	0xbff8f1a9
 80011b8:	40140000 	.word	0x40140000
 80011bc:	40590000 	.word	0x40590000

080011c0 <Change_Timer_Period>:

void Change_Timer_Period(TIM_HandleTypeDef *htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
if (CO2_ppm <= 1000 && CO_ppm <= 25)
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <Change_Timer_Period+0x94>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d0:	d813      	bhi.n	80011fa <Change_Timer_Period+0x3a>
 80011d2:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <Change_Timer_Period+0x98>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	2b19      	cmp	r3, #25
 80011d8:	d80f      	bhi.n	80011fa <Change_Timer_Period+0x3a>
   {
       HAL_TIM_Base_Stop_IT(htim);                  // Dừng timer
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f005 f83c 	bl	8006258 <HAL_TIM_Base_Stop_IT>
       __HAL_TIM_SET_AUTORELOAD(htim, T3);          // Cập nhật chu kỳ
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f241 7270 	movw	r2, #6000	@ 0x1770
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f241 7270 	movw	r2, #6000	@ 0x1770
 80011f0:	60da      	str	r2, [r3, #12]
       HAL_TIM_Base_Start_IT(htim);                 // Khởi động lại timer
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f004 ffde 	bl	80061b4 <HAL_TIM_Base_Start_IT>
 80011f8:	e028      	b.n	800124c <Change_Timer_Period+0x8c>
   }
   else if (CO2_ppm >= 2000 || CO_ppm >= 50)
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <Change_Timer_Period+0x94>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001202:	d203      	bcs.n	800120c <Change_Timer_Period+0x4c>
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <Change_Timer_Period+0x98>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b31      	cmp	r3, #49	@ 0x31
 800120a:	d90f      	bls.n	800122c <Change_Timer_Period+0x6c>
   {
       HAL_TIM_Base_Stop_IT(htim);                  // Dừng timer
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f005 f823 	bl	8006258 <HAL_TIM_Base_Stop_IT>
       __HAL_TIM_SET_AUTORELOAD(htim, T1);          // Cập nhật chu kỳ
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001222:	60da      	str	r2, [r3, #12]
       HAL_TIM_Base_Start_IT(htim);                 // Khởi động lại timer
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f004 ffc5 	bl	80061b4 <HAL_TIM_Base_Start_IT>
 800122a:	e00f      	b.n	800124c <Change_Timer_Period+0x8c>
   }
   else
   {
       HAL_TIM_Base_Stop_IT(htim);                  // Dừng timer
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f005 f813 	bl	8006258 <HAL_TIM_Base_Stop_IT>
       __HAL_TIM_SET_AUTORELOAD(htim, T2);          // Cập nhật chu kỳ
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001242:	60da      	str	r2, [r3, #12]
       HAL_TIM_Base_Start_IT(htim);                 // Khởi động lại timer
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f004 ffb5 	bl	80061b4 <HAL_TIM_Base_Start_IT>
   }
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200002a0 	.word	0x200002a0
 8001258:	200002ac 	.word	0x200002ac

0800125c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800126c:	d103      	bne.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
    	HAL_ADC_Start_IT(&hadc1);
 800126e:	4853      	ldr	r0, [pc, #332]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001270:	f001 fc5c 	bl	8002b2c <HAL_ADC_Start_IT>
		hexdec_to_ascii((uint8_t)(CO2_ppm>>8),&data_saved[miss_inx][15]);
		hexdec_to_ascii((uint8_t)(CO2_ppm),&data_saved[miss_inx][17]);
   		save_ok=1;
   	 }
    }
}
 8001274:	e09e      	b.n	80013b4 <HAL_TIM_PeriodElapsedCallback+0x158>
    else if (htim->Instance == TIM3)  // Kiểm tra nếu ngắt từ Timer 3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a51      	ldr	r2, [pc, #324]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800127c:	4293      	cmp	r3, r2
 800127e:	f040 8099 	bne.w	80013b4 <HAL_TIM_PeriodElapsedCallback+0x158>
    	Change_Timer_Period(&htim3);
 8001282:	4850      	ldr	r0, [pc, #320]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001284:	f7ff ff9c 	bl	80011c0 <Change_Timer_Period>
    	connect_error_flag++;
 8001288:	4b4f      	ldr	r3, [pc, #316]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b4d      	ldr	r3, [pc, #308]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001292:	701a      	strb	r2, [r3, #0]
    	save_ok=0;
 8001294:	4b4d      	ldr	r3, [pc, #308]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
   	 if(connect_error_flag>=2 && save_ok==0)
 800129a:	4b4b      	ldr	r3, [pc, #300]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	f240 8088 	bls.w	80013b4 <HAL_TIM_PeriodElapsedCallback+0x158>
 80012a4:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f040 8083 	bne.w	80013b4 <HAL_TIM_PeriodElapsedCallback+0x158>
   		miss_inx=connect_error_flag-2;
 80012ae:	4b46      	ldr	r3, [pc, #280]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	3b02      	subs	r3, #2
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b46      	ldr	r3, [pc, #280]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012b8:	701a      	strb	r2, [r3, #0]
   		get_time();
 80012ba:	f7ff ff1f 	bl	80010fc <get_time>
   		hexdec_to_ascii(gTime.Hours,&data_saved[miss_inx][5]);
 80012be:	4b45      	ldr	r3, [pc, #276]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	4b43      	ldr	r3, [pc, #268]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	460b      	mov	r3, r1
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	1a5b      	subs	r3, r3, r1
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3305      	adds	r3, #5
 80012d2:	4941      	ldr	r1, [pc, #260]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80012d4:	440b      	add	r3, r1
 80012d6:	4619      	mov	r1, r3
 80012d8:	4610      	mov	r0, r2
 80012da:	f000 ff07 	bl	80020ec <hexdec_to_ascii>
		hexdec_to_ascii(gTime.Minutes,&data_saved[miss_inx][7]);
 80012de:	4b3d      	ldr	r3, [pc, #244]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012e0:	785a      	ldrb	r2, [r3, #1]
 80012e2:	4b3b      	ldr	r3, [pc, #236]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	460b      	mov	r3, r1
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	1a5b      	subs	r3, r3, r1
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	3307      	adds	r3, #7
 80012f2:	4939      	ldr	r1, [pc, #228]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80012f4:	440b      	add	r3, r1
 80012f6:	4619      	mov	r1, r3
 80012f8:	4610      	mov	r0, r2
 80012fa:	f000 fef7 	bl	80020ec <hexdec_to_ascii>
		hexdec_to_ascii(gTime.Seconds,&data_saved[miss_inx][9]);
 80012fe:	4b35      	ldr	r3, [pc, #212]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001300:	789a      	ldrb	r2, [r3, #2]
 8001302:	4b33      	ldr	r3, [pc, #204]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	460b      	mov	r3, r1
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	3309      	adds	r3, #9
 8001312:	4931      	ldr	r1, [pc, #196]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001314:	440b      	add	r3, r1
 8001316:	4619      	mov	r1, r3
 8001318:	4610      	mov	r0, r2
 800131a:	f000 fee7 	bl	80020ec <hexdec_to_ascii>
		hexdec_to_ascii((uint8_t)(CO_ppm>>8),&data_saved[miss_inx][11]);
 800131e:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	b29b      	uxth	r3, r3
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	460b      	mov	r3, r1
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	330b      	adds	r3, #11
 8001338:	4927      	ldr	r1, [pc, #156]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800133a:	440b      	add	r3, r1
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f000 fed4 	bl	80020ec <hexdec_to_ascii>
		hexdec_to_ascii((uint8_t)(CO_ppm),&data_saved[miss_inx][13]);
 8001344:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	460b      	mov	r3, r1
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	1a5b      	subs	r3, r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	330d      	adds	r3, #13
 800135a:	491f      	ldr	r1, [pc, #124]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800135c:	440b      	add	r3, r1
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f000 fec3 	bl	80020ec <hexdec_to_ascii>
		hexdec_to_ascii((uint8_t)(CO2_ppm>>8),&data_saved[miss_inx][15]);
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	b29b      	uxth	r3, r3
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	460b      	mov	r3, r1
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	1a5b      	subs	r3, r3, r1
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	330f      	adds	r3, #15
 8001380:	4915      	ldr	r1, [pc, #84]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001382:	440b      	add	r3, r1
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f000 feb0 	bl	80020ec <hexdec_to_ascii>
		hexdec_to_ascii((uint8_t)(CO2_ppm),&data_saved[miss_inx][17]);
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	460b      	mov	r3, r1
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	1a5b      	subs	r3, r3, r1
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	3311      	adds	r3, #17
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80013a4:	440b      	add	r3, r1
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f000 fe9f 	bl	80020ec <hexdec_to_ascii>
   		save_ok=1;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x170>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000008c 	.word	0x2000008c
 80013c0:	40000400 	.word	0x40000400
 80013c4:	200001c0 	.word	0x200001c0
 80013c8:	200002c0 	.word	0x200002c0
 80013cc:	200002c1 	.word	0x200002c1
 80013d0:	200002be 	.word	0x200002be
 80013d4:	20000e80 	.word	0x20000e80
 80013d8:	200002c4 	.word	0x200002c4
 80013dc:	200002ac 	.word	0x200002ac
 80013e0:	200002a0 	.word	0x200002a0
 80013e4:	00000000 	.word	0x00000000

080013e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_ADC_ConvCpltCallback+0x148>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d105      	bne.n	8001406 <HAL_ADC_ConvCpltCallback+0x1e>
    CO_adc_val = HAL_ADC_GetValue(&hadc1);
 80013fa:	484e      	ldr	r0, [pc, #312]	@ (8001534 <HAL_ADC_ConvCpltCallback+0x14c>)
 80013fc:	f001 fc4c 	bl	8002c98 <HAL_ADC_GetValue>
 8001400:	4603      	mov	r3, r0
 8001402:	4a4d      	ldr	r2, [pc, #308]	@ (8001538 <HAL_ADC_ConvCpltCallback+0x150>)
 8001404:	6013      	str	r3, [r2, #0]
	CO_vol = ((float)CO_adc_val / 4095.0) * 5;
 8001406:	4b4c      	ldr	r3, [pc, #304]	@ (8001538 <HAL_ADC_ConvCpltCallback+0x150>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fc3a 	bl	8000c84 <__aeabi_ui2f>
 8001410:	4603      	mov	r3, r0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f800 	bl	8000418 <__aeabi_f2d>
 8001418:	a343      	add	r3, pc, #268	@ (adr r3, 8001528 <HAL_ADC_ConvCpltCallback+0x140>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f97d 	bl	800071c <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b43      	ldr	r3, [pc, #268]	@ (800153c <HAL_ADC_ConvCpltCallback+0x154>)
 8001430:	f7ff f84a 	bl	80004c8 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fb1c 	bl	8000a78 <__aeabi_d2f>
 8001440:	4603      	mov	r3, r0
 8001442:	4a3f      	ldr	r2, [pc, #252]	@ (8001540 <HAL_ADC_ConvCpltCallback+0x158>)
 8001444:	6013      	str	r3, [r2, #0]
	CO_ppm = (uint16_t)(CO_ppm_convert(CO_vol));
 8001446:	4b3e      	ldr	r3, [pc, #248]	@ (8001540 <HAL_ADC_ConvCpltCallback+0x158>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fe64 	bl	8001118 <CO_ppm_convert>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b3b      	ldr	r3, [pc, #236]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x15c>)
 8001456:	801a      	strh	r2, [r3, #0]
	sprintf(CO_ppm_buf, "%d",(int) CO_ppm);
 8001458:	4b3a      	ldr	r3, [pc, #232]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x15c>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	493a      	ldr	r1, [pc, #232]	@ (8001548 <HAL_ADC_ConvCpltCallback+0x160>)
 8001460:	483a      	ldr	r0, [pc, #232]	@ (800154c <HAL_ADC_ConvCpltCallback+0x164>)
 8001462:	f006 fa01 	bl	8007868 <siprintf>
	// Xóa vị trí hiện tại trên LCD trước khi ghi chuỗi mới
	lcd_put_cur(1, 4);
 8001466:	2104      	movs	r1, #4
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff fda7 	bl	8000fbc <lcd_put_cur>
	lcd_send_string("    ");  // Ghi đè 4f khoảng trắng tại vị trí đó
 800146e:	4838      	ldr	r0, [pc, #224]	@ (8001550 <HAL_ADC_ConvCpltCallback+0x168>)
 8001470:	f7ff fe00 	bl	8001074 <lcd_send_string>

	lcd_put_cur(1, 4);
 8001474:	2104      	movs	r1, #4
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff fda0 	bl	8000fbc <lcd_put_cur>
	lcd_send_string (CO_ppm_buf);
 800147c:	4833      	ldr	r0, [pc, #204]	@ (800154c <HAL_ADC_ConvCpltCallback+0x164>)
 800147e:	f7ff fdf9 	bl	8001074 <lcd_send_string>
	if(CO_ppm > 9999)
 8001482:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x15c>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	f242 720f 	movw	r2, #9999	@ 0x270f
 800148a:	4293      	cmp	r3, r2
 800148c:	d90d      	bls.n	80014aa <HAL_ADC_ConvCpltCallback+0xc2>
	{
	   lcd_put_cur(1, 8);
 800148e:	2108      	movs	r1, #8
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff fd93 	bl	8000fbc <lcd_put_cur>
	   lcd_send_string("        ");  // Ghi đè 8 khoảng trắng tại vị trí đó
 8001496:	482f      	ldr	r0, [pc, #188]	@ (8001554 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001498:	f7ff fdec 	bl	8001074 <lcd_send_string>
	   lcd_put_cur(1, 8);
 800149c:	2108      	movs	r1, #8
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fd8c 	bl	8000fbc <lcd_put_cur>
	   lcd_send_string ("ppm|AUTO");
 80014a4:	482c      	ldr	r0, [pc, #176]	@ (8001558 <HAL_ADC_ConvCpltCallback+0x170>)
 80014a6:	f7ff fde5 	bl	8001074 <lcd_send_string>
	}
	// đo và hiển thị LCD cho CO2
	CCS811_Read_Co2(&eCO2);
 80014aa:	482c      	ldr	r0, [pc, #176]	@ (800155c <HAL_ADC_ConvCpltCallback+0x174>)
 80014ac:	f7ff fcf3 	bl	8000e96 <CCS811_Read_Co2>
    CO2_ppm = (eCO2);
 80014b0:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <HAL_ADC_ConvCpltCallback+0x174>)
 80014b2:	881a      	ldrh	r2, [r3, #0]
 80014b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <HAL_ADC_ConvCpltCallback+0x178>)
 80014b6:	801a      	strh	r2, [r3, #0]
	sprintf(CO2_ppm_buf, "%d",(int) CO2_ppm);
 80014b8:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <HAL_ADC_ConvCpltCallback+0x178>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4922      	ldr	r1, [pc, #136]	@ (8001548 <HAL_ADC_ConvCpltCallback+0x160>)
 80014c0:	4828      	ldr	r0, [pc, #160]	@ (8001564 <HAL_ADC_ConvCpltCallback+0x17c>)
 80014c2:	f006 f9d1 	bl	8007868 <siprintf>
	// Xóa vị trí hiện tại trên LCD trước khi ghi chuỗi mới
	lcd_put_cur(0, 4);
 80014c6:	2104      	movs	r1, #4
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff fd77 	bl	8000fbc <lcd_put_cur>
	lcd_send_string("    ");  // Ghi đè 4 khoảng trắng tại vị trí đó
 80014ce:	4820      	ldr	r0, [pc, #128]	@ (8001550 <HAL_ADC_ConvCpltCallback+0x168>)
 80014d0:	f7ff fdd0 	bl	8001074 <lcd_send_string>
	// ghi vào vị trí này
	lcd_put_cur(0, 4);
 80014d4:	2104      	movs	r1, #4
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fd70 	bl	8000fbc <lcd_put_cur>
	lcd_send_string (CO2_ppm_buf);
 80014dc:	4821      	ldr	r0, [pc, #132]	@ (8001564 <HAL_ADC_ConvCpltCallback+0x17c>)
 80014de:	f7ff fdc9 	bl	8001074 <lcd_send_string>

	if(CO2_ppm > 9999)
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <HAL_ADC_ConvCpltCallback+0x178>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d90d      	bls.n	800150a <HAL_ADC_ConvCpltCallback+0x122>
	{
	   lcd_put_cur(0, 8);
 80014ee:	2108      	movs	r1, #8
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fd63 	bl	8000fbc <lcd_put_cur>
	   lcd_send_string("        ");
 80014f6:	4817      	ldr	r0, [pc, #92]	@ (8001554 <HAL_ADC_ConvCpltCallback+0x16c>)
 80014f8:	f7ff fdbc 	bl	8001074 <lcd_send_string>
	   lcd_put_cur(0, 8);
 80014fc:	2108      	movs	r1, #8
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fd5c 	bl	8000fbc <lcd_put_cur>
	   lcd_send_string ("ppm|MODE");
 8001504:	4818      	ldr	r0, [pc, #96]	@ (8001568 <HAL_ADC_ConvCpltCallback+0x180>)
 8001506:	f7ff fdb5 	bl	8001074 <lcd_send_string>
	}
	if(at_state==1)
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_ADC_ConvCpltCallback+0x184>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_ConvCpltCallback+0x12e>
	{
		Auto_Warning();
 8001512:	f001 f945 	bl	80027a0 <Auto_Warning>
	}
	Change_Timer_Period(&htim2);
 8001516:	4816      	ldr	r0, [pc, #88]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x188>)
 8001518:	f7ff fe52 	bl	80011c0 <Change_Timer_Period>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	f3af 8000 	nop.w
 8001528:	00000000 	.word	0x00000000
 800152c:	40affe00 	.word	0x40affe00
 8001530:	40012400 	.word	0x40012400
 8001534:	2000008c 	.word	0x2000008c
 8001538:	200002a4 	.word	0x200002a4
 800153c:	40140000 	.word	0x40140000
 8001540:	200002a8 	.word	0x200002a8
 8001544:	200002ac 	.word	0x200002ac
 8001548:	080090c0 	.word	0x080090c0
 800154c:	200002b0 	.word	0x200002b0
 8001550:	080090c4 	.word	0x080090c4
 8001554:	080090cc 	.word	0x080090cc
 8001558:	080090d8 	.word	0x080090d8
 800155c:	2000029e 	.word	0x2000029e
 8001560:	200002a0 	.word	0x200002a0
 8001564:	200002b8 	.word	0x200002b8
 8001568:	080090e4 	.word	0x080090e4
 800156c:	20000001 	.word	0x20000001
 8001570:	20000178 	.word	0x20000178

08001574 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
     if (GPIO_Pin == L1_BUT_Pin)
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2b10      	cmp	r3, #16
 8001582:	d11b      	bne.n	80015bc <HAL_GPIO_EXTI_Callback+0x48>
    {
        while(HAL_GPIO_ReadPin(L1_BUT_GPIO_Port,L1_BUT_Pin)==0)
 8001584:	bf00      	nop
 8001586:	2110      	movs	r1, #16
 8001588:	482d      	ldr	r0, [pc, #180]	@ (8001640 <HAL_GPIO_EXTI_Callback+0xcc>)
 800158a:	f002 f939 	bl	8003800 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f8      	beq.n	8001586 <HAL_GPIO_EXTI_Callback+0x12>
           {};
     l1_state = 1;
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
     l2_state = 0;
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <HAL_GPIO_EXTI_Callback+0xd4>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
     l3_state = 0;
 80015a0:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_GPIO_EXTI_Callback+0xd8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
     at_state = 0;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <HAL_GPIO_EXTI_Callback+0xdc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
	lcd_put_cur(1, 12);
 80015ac:	210c      	movs	r1, #12
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fd04 	bl	8000fbc <lcd_put_cur>
	lcd_send_string ("HAND");
 80015b4:	4827      	ldr	r0, [pc, #156]	@ (8001654 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015b6:	f7ff fd5d 	bl	8001074 <lcd_send_string>
     l3_state = 1;
     at_state = 0;
	lcd_put_cur(1, 12);
	lcd_send_string ("HAND");
    }
}
 80015ba:	e03c      	b.n	8001636 <HAL_GPIO_EXTI_Callback+0xc2>
    else if (GPIO_Pin == L2_BUT_Pin)
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d11b      	bne.n	80015fa <HAL_GPIO_EXTI_Callback+0x86>
      while(HAL_GPIO_ReadPin(L2_BUT_GPIO_Port,L2_BUT_Pin)==0)
 80015c2:	bf00      	nop
 80015c4:	2102      	movs	r1, #2
 80015c6:	4824      	ldr	r0, [pc, #144]	@ (8001658 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015c8:	f002 f91a 	bl	8003800 <HAL_GPIO_ReadPin>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f8      	beq.n	80015c4 <HAL_GPIO_EXTI_Callback+0x50>
     l1_state = 0;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <HAL_GPIO_EXTI_Callback+0xd0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
     l2_state = 1;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_GPIO_EXTI_Callback+0xd4>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
     l3_state = 0;
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_GPIO_EXTI_Callback+0xd8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
     at_state = 0;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <HAL_GPIO_EXTI_Callback+0xdc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
	lcd_put_cur(1, 12);
 80015ea:	210c      	movs	r1, #12
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff fce5 	bl	8000fbc <lcd_put_cur>
	lcd_send_string ("HAND");
 80015f2:	4818      	ldr	r0, [pc, #96]	@ (8001654 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015f4:	f7ff fd3e 	bl	8001074 <lcd_send_string>
}
 80015f8:	e01d      	b.n	8001636 <HAL_GPIO_EXTI_Callback+0xc2>
    else if (GPIO_Pin == L3_BUT_Pin)
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d11a      	bne.n	8001636 <HAL_GPIO_EXTI_Callback+0xc2>
     while(HAL_GPIO_ReadPin(L3_BUT_GPIO_Port,L3_BUT_Pin)==0)
 8001600:	bf00      	nop
 8001602:	2101      	movs	r1, #1
 8001604:	4814      	ldr	r0, [pc, #80]	@ (8001658 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001606:	f002 f8fb 	bl	8003800 <HAL_GPIO_ReadPin>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f8      	beq.n	8001602 <HAL_GPIO_EXTI_Callback+0x8e>
     l1_state = 0;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
     l2_state = 0;
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
     l3_state = 1;
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_GPIO_EXTI_Callback+0xd8>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
     at_state = 0;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
	lcd_put_cur(1, 12);
 8001628:	210c      	movs	r1, #12
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fcc6 	bl	8000fbc <lcd_put_cur>
	lcd_send_string ("HAND");
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001632:	f7ff fd1f 	bl	8001074 <lcd_send_string>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40010800 	.word	0x40010800
 8001644:	2000029b 	.word	0x2000029b
 8001648:	2000029c 	.word	0x2000029c
 800164c:	2000029d 	.word	0x2000029d
 8001650:	20000001 	.word	0x20000001
 8001654:	080090f0 	.word	0x080090f0
 8001658:	40010c00 	.word	0x40010c00

0800165c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a84      	ldr	r2, [pc, #528]	@ (800187c <HAL_UART_RxCpltCallback+0x220>)
 800166a:	4293      	cmp	r3, r2
 800166c:	f040 817d 	bne.w	800196a <HAL_UART_RxCpltCallback+0x30e>
    	// nhận chuỗi từ : đến \n
	if(rs_temp[0] != '\n')
 8001670:	4b83      	ldr	r3, [pc, #524]	@ (8001880 <HAL_UART_RxCpltCallback+0x224>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b0a      	cmp	r3, #10
 8001676:	d017      	beq.n	80016a8 <HAL_UART_RxCpltCallback+0x4c>
	{
		if(rs_temp[0]==':')
 8001678:	4b81      	ldr	r3, [pc, #516]	@ (8001880 <HAL_UART_RxCpltCallback+0x224>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b3a      	cmp	r3, #58	@ 0x3a
 800167e:	d107      	bne.n	8001690 <HAL_UART_RxCpltCallback+0x34>
		{
			RS_rxBuffer[0]=rs_temp[0];
 8001680:	4b7f      	ldr	r3, [pc, #508]	@ (8001880 <HAL_UART_RxCpltCallback+0x224>)
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	4b7f      	ldr	r3, [pc, #508]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 8001686:	701a      	strb	r2, [r3, #0]
			rs_inx=1;
 8001688:	4b7f      	ldr	r3, [pc, #508]	@ (8001888 <HAL_UART_RxCpltCallback+0x22c>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e167      	b.n	8001960 <HAL_UART_RxCpltCallback+0x304>
		}
		else
		{
			RS_rxBuffer[rs_inx++]=rs_temp[0];
 8001690:	4b7d      	ldr	r3, [pc, #500]	@ (8001888 <HAL_UART_RxCpltCallback+0x22c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	b2d1      	uxtb	r1, r2
 8001698:	4a7b      	ldr	r2, [pc, #492]	@ (8001888 <HAL_UART_RxCpltCallback+0x22c>)
 800169a:	7011      	strb	r1, [r2, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b78      	ldr	r3, [pc, #480]	@ (8001880 <HAL_UART_RxCpltCallback+0x224>)
 80016a0:	7819      	ldrb	r1, [r3, #0]
 80016a2:	4b78      	ldr	r3, [pc, #480]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 80016a4:	5499      	strb	r1, [r3, r2]
 80016a6:	e15b      	b.n	8001960 <HAL_UART_RxCpltCallback+0x304>
		}
	}
	else
	{
		RS_rxBuffer[rs_inx++]='\n';
 80016a8:	4b77      	ldr	r3, [pc, #476]	@ (8001888 <HAL_UART_RxCpltCallback+0x22c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	b2d1      	uxtb	r1, r2
 80016b0:	4a75      	ldr	r2, [pc, #468]	@ (8001888 <HAL_UART_RxCpltCallback+0x22c>)
 80016b2:	7011      	strb	r1, [r2, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b73      	ldr	r3, [pc, #460]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 80016b8:	210a      	movs	r1, #10
 80016ba:	5499      	strb	r1, [r3, r2]
    	if(check_lrc(&RS_rxBuffer[1],4,(char*)&RS_rxBuffer[5]) == 1) // check loi lrc
 80016bc:	4a73      	ldr	r2, [pc, #460]	@ (800188c <HAL_UART_RxCpltCallback+0x230>)
 80016be:	2104      	movs	r1, #4
 80016c0:	4873      	ldr	r0, [pc, #460]	@ (8001890 <HAL_UART_RxCpltCallback+0x234>)
 80016c2:	f000 fce8 	bl	8002096 <check_lrc>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 80fe 	bne.w	80018ca <HAL_UART_RxCpltCallback+0x26e>
    	{
    		//if (RS_rxBuffer[1] == '0' && RS_rxBuffer[2] == '2') // Kiểm tra địa chỉ node 2
			if (RS_rxBuffer[1] == '0' && RS_rxBuffer[2] == '1') // Kiểm tra địa chỉ
 80016ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	2b30      	cmp	r3, #48	@ 0x30
 80016d4:	f040 80f9 	bne.w	80018ca <HAL_UART_RxCpltCallback+0x26e>
 80016d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	2b31      	cmp	r3, #49	@ 0x31
 80016de:	f040 80f4 	bne.w	80018ca <HAL_UART_RxCpltCallback+0x26e>
			{
				if (RS_rxBuffer[3] == '0' && RS_rxBuffer[4] == '2')
 80016e2:	4b68      	ldr	r3, [pc, #416]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 80016e4:	78db      	ldrb	r3, [r3, #3]
 80016e6:	2b30      	cmp	r3, #48	@ 0x30
 80016e8:	d10f      	bne.n	800170a <HAL_UART_RxCpltCallback+0xae>
 80016ea:	4b66      	ldr	r3, [pc, #408]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 80016ec:	791b      	ldrb	r3, [r3, #4]
 80016ee:	2b32      	cmp	r3, #50	@ 0x32
 80016f0:	d10b      	bne.n	800170a <HAL_UART_RxCpltCallback+0xae>
				{
					get_time();
 80016f2:	f7ff fd03 	bl	80010fc <get_time>
					// Gửi phản hồi
					RS485_data_to_send();
 80016f6:	f000 fd0b 	bl	8002110 <RS485_data_to_send>
					HAL_UART_Transmit(&huart1, RS_txBuffer, 25, HAL_MAX_DELAY);
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	2219      	movs	r2, #25
 8001700:	4964      	ldr	r1, [pc, #400]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 8001702:	4865      	ldr	r0, [pc, #404]	@ (8001898 <HAL_UART_RxCpltCallback+0x23c>)
 8001704:	f005 f976 	bl	80069f4 <HAL_UART_Transmit>
 8001708:	e0df      	b.n	80018ca <HAL_UART_RxCpltCallback+0x26e>
				}
				else if(RS_rxBuffer[3] == '0' && RS_rxBuffer[4] == '3')
 800170a:	4b5e      	ldr	r3, [pc, #376]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	2b30      	cmp	r3, #48	@ 0x30
 8001710:	f040 809c 	bne.w	800184c <HAL_UART_RxCpltCallback+0x1f0>
 8001714:	4b5b      	ldr	r3, [pc, #364]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 8001716:	791b      	ldrb	r3, [r3, #4]
 8001718:	2b33      	cmp	r3, #51	@ 0x33
 800171a:	f040 8097 	bne.w	800184c <HAL_UART_RxCpltCallback+0x1f0>
				{
					 if( miss_inx!=0)
 800171e:	4b5f      	ldr	r3, [pc, #380]	@ (800189c <HAL_UART_RxCpltCallback+0x240>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80d0 	beq.w	80018c8 <HAL_UART_RxCpltCallback+0x26c>
					 {
						 while(send_inx<miss_inx)
 8001728:	e04b      	b.n	80017c2 <HAL_UART_RxCpltCallback+0x166>
						 {
							RS_txBuffer[0] = ':';
 800172a:	4b5a      	ldr	r3, [pc, #360]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 800172c:	223a      	movs	r2, #58	@ 0x3a
 800172e:	701a      	strb	r2, [r3, #0]
							hexdec_to_ascii(myID,(char*)&RS_txBuffer[1]);
 8001730:	4b5b      	ldr	r3, [pc, #364]	@ (80018a0 <HAL_UART_RxCpltCallback+0x244>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	495b      	ldr	r1, [pc, #364]	@ (80018a4 <HAL_UART_RxCpltCallback+0x248>)
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fcd8 	bl	80020ec <hexdec_to_ascii>
							RS_txBuffer[3] = '0';
 800173c:	4b55      	ldr	r3, [pc, #340]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 800173e:	2230      	movs	r2, #48	@ 0x30
 8001740:	70da      	strb	r2, [r3, #3]
							RS_txBuffer[4] = '3';
 8001742:	4b54      	ldr	r3, [pc, #336]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 8001744:	2233      	movs	r2, #51	@ 0x33
 8001746:	711a      	strb	r2, [r3, #4]
							strcpy((char*)&RS_txBuffer[5], &data_saved[send_inx][5]);
 8001748:	4b57      	ldr	r3, [pc, #348]	@ (80018a8 <HAL_UART_RxCpltCallback+0x24c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	3305      	adds	r3, #5
 8001758:	4a54      	ldr	r2, [pc, #336]	@ (80018ac <HAL_UART_RxCpltCallback+0x250>)
 800175a:	4413      	add	r3, r2
 800175c:	4619      	mov	r1, r3
 800175e:	4854      	ldr	r0, [pc, #336]	@ (80018b0 <HAL_UART_RxCpltCallback+0x254>)
 8001760:	f006 f8ea 	bl	8007938 <strcpy>
							lrc = calculate_lrc(&RS_txBuffer[1],18);
 8001764:	2112      	movs	r1, #18
 8001766:	484f      	ldr	r0, [pc, #316]	@ (80018a4 <HAL_UART_RxCpltCallback+0x248>)
 8001768:	f000 fc5c 	bl	8002024 <calculate_lrc>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <HAL_UART_RxCpltCallback+0x258>)
 8001772:	701a      	strb	r2, [r3, #0]
							hexdec_to_ascii(lrc,(char*)&RS_txBuffer[19]);
 8001774:	4b4f      	ldr	r3, [pc, #316]	@ (80018b4 <HAL_UART_RxCpltCallback+0x258>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	494f      	ldr	r1, [pc, #316]	@ (80018b8 <HAL_UART_RxCpltCallback+0x25c>)
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fcb6 	bl	80020ec <hexdec_to_ascii>
							RS_txBuffer[21]=0x0D ;
 8001780:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 8001782:	220d      	movs	r2, #13
 8001784:	755a      	strb	r2, [r3, #21]
							RS_txBuffer[22]=0x0A ;
 8001786:	4b43      	ldr	r3, [pc, #268]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 8001788:	220a      	movs	r2, #10
 800178a:	759a      	strb	r2, [r3, #22]
							 HAL_UART_Transmit(&huart1, RS_txBuffer, 25, HAL_MAX_DELAY);
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	2219      	movs	r2, #25
 8001792:	4940      	ldr	r1, [pc, #256]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 8001794:	4840      	ldr	r0, [pc, #256]	@ (8001898 <HAL_UART_RxCpltCallback+0x23c>)
 8001796:	f005 f92d 	bl	80069f4 <HAL_UART_Transmit>
							 HAL_UART_Receive(&huart1 ,RS_rx, 10, HAL_MAX_DELAY);
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	220a      	movs	r2, #10
 80017a0:	4946      	ldr	r1, [pc, #280]	@ (80018bc <HAL_UART_RxCpltCallback+0x260>)
 80017a2:	483d      	ldr	r0, [pc, #244]	@ (8001898 <HAL_UART_RxCpltCallback+0x23c>)
 80017a4:	f005 f9b1 	bl	8006b0a <HAL_UART_Receive>
							 if( RS_rx[4] == 'B')
 80017a8:	4b44      	ldr	r3, [pc, #272]	@ (80018bc <HAL_UART_RxCpltCallback+0x260>)
 80017aa:	791b      	ldrb	r3, [r3, #4]
 80017ac:	2b42      	cmp	r3, #66	@ 0x42
 80017ae:	d108      	bne.n	80017c2 <HAL_UART_RxCpltCallback+0x166>
							 {
								 HAL_TIM_Base_Stop_IT(&htim3);
 80017b0:	4843      	ldr	r0, [pc, #268]	@ (80018c0 <HAL_UART_RxCpltCallback+0x264>)
 80017b2:	f004 fd51 	bl	8006258 <HAL_TIM_Base_Stop_IT>
								 send_inx++;
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <HAL_UART_RxCpltCallback+0x24c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b3a      	ldr	r3, [pc, #232]	@ (80018a8 <HAL_UART_RxCpltCallback+0x24c>)
 80017c0:	701a      	strb	r2, [r3, #0]
						 while(send_inx<miss_inx)
 80017c2:	4b39      	ldr	r3, [pc, #228]	@ (80018a8 <HAL_UART_RxCpltCallback+0x24c>)
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	4b35      	ldr	r3, [pc, #212]	@ (800189c <HAL_UART_RxCpltCallback+0x240>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d3ad      	bcc.n	800172a <HAL_UART_RxCpltCallback+0xce>
							 }
						 }
						 if(send_inx==miss_inx)
 80017ce:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <HAL_UART_RxCpltCallback+0x24c>)
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	4b32      	ldr	r3, [pc, #200]	@ (800189c <HAL_UART_RxCpltCallback+0x240>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d176      	bne.n	80018c8 <HAL_UART_RxCpltCallback+0x26c>
						 {
							RS_txBuffer[0] = ':';
 80017da:	4b2e      	ldr	r3, [pc, #184]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 80017dc:	223a      	movs	r2, #58	@ 0x3a
 80017de:	701a      	strb	r2, [r3, #0]
							hexdec_to_ascii(myID,(char*)&RS_txBuffer[1]);
 80017e0:	4b2f      	ldr	r3, [pc, #188]	@ (80018a0 <HAL_UART_RxCpltCallback+0x244>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	492f      	ldr	r1, [pc, #188]	@ (80018a4 <HAL_UART_RxCpltCallback+0x248>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fc80 	bl	80020ec <hexdec_to_ascii>
							RS_txBuffer[3] = '0';
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 80017ee:	2230      	movs	r2, #48	@ 0x30
 80017f0:	70da      	strb	r2, [r3, #3]
							RS_txBuffer[4] = '2';
 80017f2:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 80017f4:	2232      	movs	r2, #50	@ 0x32
 80017f6:	711a      	strb	r2, [r3, #4]
							strcpy((char*)&RS_txBuffer[5], &data_saved[send_inx][5]);
 80017f8:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_UART_RxCpltCallback+0x24c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	3305      	adds	r3, #5
 8001808:	4a28      	ldr	r2, [pc, #160]	@ (80018ac <HAL_UART_RxCpltCallback+0x250>)
 800180a:	4413      	add	r3, r2
 800180c:	4619      	mov	r1, r3
 800180e:	4828      	ldr	r0, [pc, #160]	@ (80018b0 <HAL_UART_RxCpltCallback+0x254>)
 8001810:	f006 f892 	bl	8007938 <strcpy>
							lrc = calculate_lrc(&RS_txBuffer[1],18);
 8001814:	2112      	movs	r1, #18
 8001816:	4823      	ldr	r0, [pc, #140]	@ (80018a4 <HAL_UART_RxCpltCallback+0x248>)
 8001818:	f000 fc04 	bl	8002024 <calculate_lrc>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_UART_RxCpltCallback+0x258>)
 8001822:	701a      	strb	r2, [r3, #0]
							hexdec_to_ascii(lrc,(char*)&RS_txBuffer[19]);
 8001824:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_UART_RxCpltCallback+0x258>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4923      	ldr	r1, [pc, #140]	@ (80018b8 <HAL_UART_RxCpltCallback+0x25c>)
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fc5e 	bl	80020ec <hexdec_to_ascii>
							RS_txBuffer[21]=0x0D ;
 8001830:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 8001832:	220d      	movs	r2, #13
 8001834:	755a      	strb	r2, [r3, #21]
							RS_txBuffer[22]=0x0A ;
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 8001838:	220a      	movs	r2, #10
 800183a:	759a      	strb	r2, [r3, #22]
							 HAL_UART_Transmit(&huart1, RS_txBuffer, 25, HAL_MAX_DELAY);
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	2219      	movs	r2, #25
 8001842:	4914      	ldr	r1, [pc, #80]	@ (8001894 <HAL_UART_RxCpltCallback+0x238>)
 8001844:	4814      	ldr	r0, [pc, #80]	@ (8001898 <HAL_UART_RxCpltCallback+0x23c>)
 8001846:	f005 f8d5 	bl	80069f4 <HAL_UART_Transmit>
					 if( miss_inx!=0)
 800184a:	e03d      	b.n	80018c8 <HAL_UART_RxCpltCallback+0x26c>
						 }
					 }
				}
				else if(RS_rxBuffer[3] == 'A' && RS_rxBuffer[4] == 'A') // nhận lại oke
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	2b41      	cmp	r3, #65	@ 0x41
 8001852:	d13a      	bne.n	80018ca <HAL_UART_RxCpltCallback+0x26e>
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_UART_RxCpltCallback+0x228>)
 8001856:	791b      	ldrb	r3, [r3, #4]
 8001858:	2b41      	cmp	r3, #65	@ 0x41
 800185a:	d136      	bne.n	80018ca <HAL_UART_RxCpltCallback+0x26e>
				{
					memset(data_saved, 0, sizeof(data_saved));
 800185c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001860:	2100      	movs	r1, #0
 8001862:	4812      	ldr	r0, [pc, #72]	@ (80018ac <HAL_UART_RxCpltCallback+0x250>)
 8001864:	f006 f820 	bl	80078a8 <memset>
					HAL_TIM_Base_Start_IT(&htim3);
 8001868:	4815      	ldr	r0, [pc, #84]	@ (80018c0 <HAL_UART_RxCpltCallback+0x264>)
 800186a:	f004 fca3 	bl	80061b4 <HAL_TIM_Base_Start_IT>
					send_inx=0;
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <HAL_UART_RxCpltCallback+0x24c>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
					connect_error_flag=0;
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <HAL_UART_RxCpltCallback+0x268>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e026      	b.n	80018ca <HAL_UART_RxCpltCallback+0x26e>
 800187c:	40013800 	.word	0x40013800
 8001880:	20000298 	.word	0x20000298
 8001884:	20000250 	.word	0x20000250
 8001888:	2000029a 	.word	0x2000029a
 800188c:	20000255 	.word	0x20000255
 8001890:	20000251 	.word	0x20000251
 8001894:	20000278 	.word	0x20000278
 8001898:	20000208 	.word	0x20000208
 800189c:	200002be 	.word	0x200002be
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000279 	.word	0x20000279
 80018a8:	200002bf 	.word	0x200002bf
 80018ac:	200002c4 	.word	0x200002c4
 80018b0:	2000027d 	.word	0x2000027d
 80018b4:	20000e7c 	.word	0x20000e7c
 80018b8:	2000028b 	.word	0x2000028b
 80018bc:	20000264 	.word	0x20000264
 80018c0:	200001c0 	.word	0x200001c0
 80018c4:	200002c0 	.word	0x200002c0
					 if( miss_inx!=0)
 80018c8:	bf00      	nop
    	}
    	else
    	{}

        // nhận bản tin v�? th�?i gian
         if(RS_rxBuffer[2] == 0x77)
 80018ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <HAL_UART_RxCpltCallback+0x318>)
 80018cc:	789b      	ldrb	r3, [r3, #2]
 80018ce:	2b77      	cmp	r3, #119	@ 0x77
 80018d0:	d13e      	bne.n	8001950 <HAL_UART_RxCpltCallback+0x2f4>
        {
        	int h,m,s;
        	char ho[3] = {0};
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <HAL_UART_RxCpltCallback+0x31c>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	823b      	strh	r3, [r7, #16]
 80018d8:	2300      	movs	r3, #0
 80018da:	74bb      	strb	r3, [r7, #18]
        	char mi[3] = {0};
 80018dc:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_UART_RxCpltCallback+0x31c>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	81bb      	strh	r3, [r7, #12]
 80018e2:	2300      	movs	r3, #0
 80018e4:	73bb      	strb	r3, [r7, #14]
        	char se[3] = {0};
 80018e6:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <HAL_UART_RxCpltCallback+0x31c>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	813b      	strh	r3, [r7, #8]
 80018ec:	2300      	movs	r3, #0
 80018ee:	72bb      	strb	r3, [r7, #10]

        	strncpy(ho, (char*)&RS_rxBuffer[3], 2);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	2202      	movs	r2, #2
 80018f6:	4921      	ldr	r1, [pc, #132]	@ (800197c <HAL_UART_RxCpltCallback+0x320>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f005 ffdd 	bl	80078b8 <strncpy>
        	strncpy(mi, (char*)&RS_rxBuffer[5], 2);
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2202      	movs	r2, #2
 8001904:	491e      	ldr	r1, [pc, #120]	@ (8001980 <HAL_UART_RxCpltCallback+0x324>)
 8001906:	4618      	mov	r0, r3
 8001908:	f005 ffd6 	bl	80078b8 <strncpy>
        	strncpy(se, (char*)&RS_rxBuffer[7], 2);
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	2202      	movs	r2, #2
 8001912:	491c      	ldr	r1, [pc, #112]	@ (8001984 <HAL_UART_RxCpltCallback+0x328>)
 8001914:	4618      	mov	r0, r3
 8001916:	f005 ffcf 	bl	80078b8 <strncpy>

        	h= atoi(ho);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4618      	mov	r0, r3
 8001920:	f005 ff1a 	bl	8007758 <atoi>
 8001924:	61f8      	str	r0, [r7, #28]
        	m=atoi(mi);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4618      	mov	r0, r3
 800192c:	f005 ff14 	bl	8007758 <atoi>
 8001930:	61b8      	str	r0, [r7, #24]
        	s=atoi(se);
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	4618      	mov	r0, r3
 8001938:	f005 ff0e 	bl	8007758 <atoi>
 800193c:	6178      	str	r0, [r7, #20]
        	set_time((uint8_t)h,(uint8_t) m ,(uint8_t)s);
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	b2d1      	uxtb	r1, r2
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fba8 	bl	80010a0 <set_time>
        }
 		rs_inx=0;
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <HAL_UART_RxCpltCallback+0x32c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 		memset(RS_rxBuffer,0,sizeof(RS_rxBuffer));
 8001956:	2214      	movs	r2, #20
 8001958:	2100      	movs	r1, #0
 800195a:	4806      	ldr	r0, [pc, #24]	@ (8001974 <HAL_UART_RxCpltCallback+0x318>)
 800195c:	f005 ffa4 	bl	80078a8 <memset>
 	  }
        // Tiếp tục nhận
        HAL_UART_Receive_IT(&huart1, rs_temp, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	490a      	ldr	r1, [pc, #40]	@ (800198c <HAL_UART_RxCpltCallback+0x330>)
 8001964:	480a      	ldr	r0, [pc, #40]	@ (8001990 <HAL_UART_RxCpltCallback+0x334>)
 8001966:	f005 f967 	bl	8006c38 <HAL_UART_Receive_IT>
    }
}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000250 	.word	0x20000250
 8001978:	080090f8 	.word	0x080090f8
 800197c:	20000253 	.word	0x20000253
 8001980:	20000255 	.word	0x20000255
 8001984:	20000257 	.word	0x20000257
 8001988:	2000029a 	.word	0x2000029a
 800198c:	20000298 	.word	0x20000298
 8001990:	20000208 	.word	0x20000208

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001998:	f000 ff6a 	bl	8002870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199c:	f000 f87c 	bl	8001a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a0:	f000 fa5c 	bl	8001e5c <MX_GPIO_Init>
  MX_ADC1_Init();
 80019a4:	f000 f8d4 	bl	8001b50 <MX_ADC1_Init>
  MX_I2C1_Init();
 80019a8:	f000 f910 	bl	8001bcc <MX_I2C1_Init>
  MX_I2C2_Init();
 80019ac:	f000 f93c 	bl	8001c28 <MX_I2C2_Init>
  MX_TIM2_Init();
 80019b0:	f000 f98e 	bl	8001cd0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80019b4:	f000 fa28 	bl	8001e08 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80019b8:	f000 f964 	bl	8001c84 <MX_RTC_Init>
  MX_TIM3_Init();
 80019bc:	f000 f9d6 	bl	8001d6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //while(!CCS811_CheckHW_ID());
  CCS811_Init();
 80019c0:	f7ff fa0c 	bl	8000ddc <CCS811_Init>
  CCS811_Reset();
 80019c4:	f7ff fa44 	bl	8000e50 <CCS811_Reset>
  CCS811_Set_Mode(CCS811_MODE_1SEC);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fa53 	bl	8000e74 <CCS811_Set_Mode>
  CCS811_EnableInt();
 80019ce:	f7ff fa7f 	bl	8000ed0 <CCS811_EnableInt>
  //uint16_t baseline = CCS811_GetBaseline();
  lcd_init();
 80019d2:	f7ff fb12 	bl	8000ffa <lcd_init>
  lcd_put_cur(0, 0);
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff faef 	bl	8000fbc <lcd_put_cur>
  lcd_send_string ("CO2:");
 80019de:	4823      	ldr	r0, [pc, #140]	@ (8001a6c <main+0xd8>)
 80019e0:	f7ff fb48 	bl	8001074 <lcd_send_string>
  lcd_put_cur(0, 8);
 80019e4:	2108      	movs	r1, #8
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fae8 	bl	8000fbc <lcd_put_cur>
  lcd_send_string ("ppm|");
 80019ec:	4820      	ldr	r0, [pc, #128]	@ (8001a70 <main+0xdc>)
 80019ee:	f7ff fb41 	bl	8001074 <lcd_send_string>
  lcd_put_cur(0, 12);
 80019f2:	210c      	movs	r1, #12
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff fae1 	bl	8000fbc <lcd_put_cur>
  lcd_send_string ("MODE");
 80019fa:	481e      	ldr	r0, [pc, #120]	@ (8001a74 <main+0xe0>)
 80019fc:	f7ff fb3a 	bl	8001074 <lcd_send_string>
  lcd_put_cur(1, 0);
 8001a00:	2100      	movs	r1, #0
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff fada 	bl	8000fbc <lcd_put_cur>
  lcd_send_string("CO :");
 8001a08:	481b      	ldr	r0, [pc, #108]	@ (8001a78 <main+0xe4>)
 8001a0a:	f7ff fb33 	bl	8001074 <lcd_send_string>
  lcd_put_cur(1, 8);
 8001a0e:	2108      	movs	r1, #8
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff fad3 	bl	8000fbc <lcd_put_cur>
  lcd_send_string ("ppm|");
 8001a16:	4816      	ldr	r0, [pc, #88]	@ (8001a70 <main+0xdc>)
 8001a18:	f7ff fb2c 	bl	8001074 <lcd_send_string>
  lcd_put_cur(1, 12);
 8001a1c:	210c      	movs	r1, #12
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff facc 	bl	8000fbc <lcd_put_cur>
  lcd_send_string ("AUTO");
 8001a24:	4815      	ldr	r0, [pc, #84]	@ (8001a7c <main+0xe8>)
 8001a26:	f7ff fb25 	bl	8001074 <lcd_send_string>

  HAL_TIM_Base_Start_IT(&htim2);
 8001a2a:	4815      	ldr	r0, [pc, #84]	@ (8001a80 <main+0xec>)
 8001a2c:	f004 fbc2 	bl	80061b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a30:	4814      	ldr	r0, [pc, #80]	@ (8001a84 <main+0xf0>)
 8001a32:	f004 fbbf 	bl	80061b4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, rs_temp, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	4913      	ldr	r1, [pc, #76]	@ (8001a88 <main+0xf4>)
 8001a3a:	4814      	ldr	r0, [pc, #80]	@ (8001a8c <main+0xf8>)
 8001a3c:	f005 f8fc 	bl	8006c38 <HAL_UART_Receive_IT>

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2345)
 8001a40:	2101      	movs	r1, #1
 8001a42:	4813      	ldr	r0, [pc, #76]	@ (8001a90 <main+0xfc>)
 8001a44:	f004 fb4a 	bl	80060dc <HAL_RTCEx_BKUPRead>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f242 3245 	movw	r2, #9029	@ 0x2345
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d004      	beq.n	8001a5c <main+0xc8>
  {
	  set_time(12, 50, 50);
 8001a52:	2232      	movs	r2, #50	@ 0x32
 8001a54:	2132      	movs	r1, #50	@ 0x32
 8001a56:	200c      	movs	r0, #12
 8001a58:	f7ff fb22 	bl	80010a0 <set_time>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		  // khi tắt chế độ tự động
	  if(at_state==0)
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <main+0x100>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1fb      	bne.n	8001a5c <main+0xc8>
	 {
	  Manual_Warning();
 8001a64:	f000 fec0 	bl	80027e8 <Manual_Warning>
	  if(at_state==0)
 8001a68:	e7f8      	b.n	8001a5c <main+0xc8>
 8001a6a:	bf00      	nop
 8001a6c:	080090fc 	.word	0x080090fc
 8001a70:	08009104 	.word	0x08009104
 8001a74:	0800910c 	.word	0x0800910c
 8001a78:	08009114 	.word	0x08009114
 8001a7c:	0800911c 	.word	0x0800911c
 8001a80:	20000178 	.word	0x20000178
 8001a84:	200001c0 	.word	0x200001c0
 8001a88:	20000298 	.word	0x20000298
 8001a8c:	20000208 	.word	0x20000208
 8001a90:	20000164 	.word	0x20000164
 8001a94:	20000001 	.word	0x20000001

08001a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b094      	sub	sp, #80	@ 0x50
 8001a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa2:	2228      	movs	r2, #40	@ 0x28
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f005 fefe 	bl	80078a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001acc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ada:	2302      	movs	r3, #2
 8001adc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ade:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 f8c1 	bl	8004c74 <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001af8:	f000 fa8e 	bl	8002018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afc:	230f      	movs	r3, #15
 8001afe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fb2e 	bl	8005178 <HAL_RCC_ClockConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b22:	f000 fa79 	bl	8002018 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001b26:	2303      	movs	r3, #3
 8001b28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001b2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b2e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fcac 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b42:	f000 fa69 	bl	8002018 <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	@ 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b60:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001b62:	4a19      	ldr	r2, [pc, #100]	@ (8001bc8 <MX_ADC1_Init+0x78>)
 8001b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b66:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b72:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001b7a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b80:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8c:	480d      	ldr	r0, [pc, #52]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001b8e:	f000 fef5 	bl	800297c <HAL_ADC_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b98:	f000 fa3e 	bl	8002018 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_ADC1_Init+0x74>)
 8001bae:	f001 f947 	bl	8002e40 <HAL_ADC_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001bb8:	f000 fa2e 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2000008c 	.word	0x2000008c
 8001bc8:	40012400 	.word	0x40012400

08001bcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001bd2:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <MX_I2C1_Init+0x54>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001bd8:	4a12      	ldr	r2, [pc, #72]	@ (8001c24 <MX_I2C1_Init+0x58>)
 8001bda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001bea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c08:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <MX_I2C1_Init+0x50>)
 8001c0a:	f001 fe41 	bl	8003890 <HAL_I2C_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c14:	f000 fa00 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200000bc 	.word	0x200000bc
 8001c20:	40005400 	.word	0x40005400
 8001c24:	000186a0 	.word	0x000186a0

08001c28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c2e:	4a13      	ldr	r2, [pc, #76]	@ (8001c7c <MX_I2C2_Init+0x54>)
 8001c30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c32:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c34:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <MX_I2C2_Init+0x58>)
 8001c36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c64:	4804      	ldr	r0, [pc, #16]	@ (8001c78 <MX_I2C2_Init+0x50>)
 8001c66:	f001 fe13 	bl	8003890 <HAL_I2C_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c70:	f000 f9d2 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000110 	.word	0x20000110
 8001c7c:	40005800 	.word	0x40005800
 8001c80:	000186a0 	.word	0x000186a0

08001c84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	460a      	mov	r2, r1
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	460a      	mov	r2, r1
 8001c94:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <MX_RTC_Init+0x44>)
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <MX_RTC_Init+0x48>)
 8001c9e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <MX_RTC_Init+0x44>)
 8001ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <MX_RTC_Init+0x44>)
 8001caa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cae:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <MX_RTC_Init+0x44>)
 8001cb2:	f003 fd5b 	bl	800576c <HAL_RTC_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001cbc:	f000 f9ac 	bl	8002018 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000164 	.word	0x20000164
 8001ccc:	40002800 	.word	0x40002800

08001cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001cf6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000;
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001d04:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001d08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d16:	4814      	ldr	r0, [pc, #80]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001d18:	f004 f9fc 	bl	8006114 <HAL_TIM_Base_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d22:	f000 f979 	bl	8002018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	4619      	mov	r1, r3
 8001d32:	480d      	ldr	r0, [pc, #52]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001d34:	f004 fbae 	bl	8006494 <HAL_TIM_ConfigClockSource>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d3e:	f000 f96b 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <MX_TIM2_Init+0x98>)
 8001d50:	f004 fd90 	bl	8006874 <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d5a:	f000 f95d 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000178 	.word	0x20000178

08001d6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	463b      	mov	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <MX_TIM3_Init+0x98>)
 8001d8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001d90:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001d94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001d9e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001da2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db0:	4813      	ldr	r0, [pc, #76]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001db2:	f004 f9af 	bl	8006114 <HAL_TIM_Base_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001dbc:	f000 f92c 	bl	8002018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480c      	ldr	r0, [pc, #48]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001dce:	f004 fb61 	bl	8006494 <HAL_TIM_ConfigClockSource>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001dd8:	f000 f91e 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de4:	463b      	mov	r3, r7
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <MX_TIM3_Init+0x94>)
 8001dea:	f004 fd43 	bl	8006874 <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001df4:	f000 f910 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200001c0 	.word	0x200001c0
 8001e04:	40000400 	.word	0x40000400

08001e08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <MX_USART1_UART_Init+0x50>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e40:	f004 fd88 	bl	8006954 <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e4a:	f000 f8e5 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000208 	.word	0x20000208
 8001e58:	40013800 	.word	0x40013800

08001e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 0310 	add.w	r3, r7, #16
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e70:	4b64      	ldr	r3, [pc, #400]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a63      	ldr	r2, [pc, #396]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b61      	ldr	r3, [pc, #388]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e88:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b5b      	ldr	r3, [pc, #364]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b58      	ldr	r3, [pc, #352]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a57      	ldr	r2, [pc, #348]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b55      	ldr	r3, [pc, #340]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	4b52      	ldr	r3, [pc, #328]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a51      	ldr	r2, [pc, #324]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CCS_RST_GPIO_Port, CCS_RST_Pin, GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ed6:	484c      	ldr	r0, [pc, #304]	@ (8002008 <MX_GPIO_Init+0x1ac>)
 8001ed8:	f001 fca9 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZ_Pin|RL3_Pin|RL2_Pin|RL1_Pin, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	21e2      	movs	r1, #226	@ 0xe2
 8001ee0:	484a      	ldr	r0, [pc, #296]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001ee2:	f001 fca4 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001eec:	4848      	ldr	r0, [pc, #288]	@ (8002010 <MX_GPIO_Init+0x1b4>)
 8001eee:	f001 fc9e 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CCS_RSTA15_GPIO_Port, CCS_RSTA15_Pin, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ef8:	4844      	ldr	r0, [pc, #272]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001efa:	f001 fc98 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CCS_RST_Pin */
  GPIO_InitStruct.Pin = CCS_RST_Pin;
 8001efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CCS_RST_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	4619      	mov	r1, r3
 8001f16:	483c      	ldr	r0, [pc, #240]	@ (8002008 <MX_GPIO_Init+0x1ac>)
 8001f18:	f001 faee 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZ_Pin RL3_Pin RL2_Pin RL1_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin|RL3_Pin|RL2_Pin|RL1_Pin;
 8001f1c:	23e2      	movs	r3, #226	@ 0xe2
 8001f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	4836      	ldr	r0, [pc, #216]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001f34:	f001 fae0 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : L1_BUT_Pin */
  GPIO_InitStruct.Pin = L1_BUT_Pin;
 8001f38:	2310      	movs	r3, #16
 8001f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f3c:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <MX_GPIO_Init+0x1b8>)
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L1_BUT_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4830      	ldr	r0, [pc, #192]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001f4c:	f001 fad4 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : L3_BUT_Pin L2_BUT_Pin */
  GPIO_InitStruct.Pin = L3_BUT_Pin|L2_BUT_Pin;
 8001f50:	2303      	movs	r3, #3
 8001f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f54:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <MX_GPIO_Init+0x1b8>)
 8001f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	482b      	ldr	r0, [pc, #172]	@ (8002010 <MX_GPIO_Init+0x1b4>)
 8001f64:	f001 fac8 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin;
 8001f68:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4823      	ldr	r0, [pc, #140]	@ (8002010 <MX_GPIO_Init+0x1b4>)
 8001f82:	f001 fab9 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CCS_RSTA15_Pin */
  GPIO_InitStruct.Pin = CCS_RSTA15_Pin;
 8001f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CCS_RSTA15_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	481b      	ldr	r0, [pc, #108]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001fa0:	f001 faaa 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CCS811_INT_Pin */
  GPIO_InitStruct.Pin = CCS811_INT_Pin;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <MX_GPIO_Init+0x1b8>)
 8001faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CCS811_INT_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4816      	ldr	r0, [pc, #88]	@ (8002010 <MX_GPIO_Init+0x1b4>)
 8001fb8:	f001 fa9e 	bl	80034f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	2006      	movs	r0, #6
 8001fc2:	f001 f9b0 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fc6:	2006      	movs	r0, #6
 8001fc8:	f001 f9c9 	bl	800335e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2102      	movs	r1, #2
 8001fd0:	2007      	movs	r0, #7
 8001fd2:	f001 f9a8 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fd6:	2007      	movs	r0, #7
 8001fd8:	f001 f9c1 	bl	800335e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2103      	movs	r1, #3
 8001fe0:	2009      	movs	r0, #9
 8001fe2:	f001 f9a0 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001fe6:	2009      	movs	r0, #9
 8001fe8:	f001 f9b9 	bl	800335e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2102      	movs	r1, #2
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f001 f998 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ff6:	200a      	movs	r0, #10
 8001ff8:	f001 f9b1 	bl	800335e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	40011000 	.word	0x40011000
 800200c:	40010800 	.word	0x40010800
 8002010:	40010c00 	.word	0x40010c00
 8002014:	10210000 	.word	0x10210000

08002018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <Error_Handler+0x8>

08002024 <calculate_lrc>:
 *
 *  Created on: Dec 19, 2024
 *      Author: DELL
 */
#include <rs_related_node_do.h>
uint8_t calculate_lrc(uint8_t *ascii_data, uint16_t length) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
    uint8_t lrc = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]

    // Kiểm tra nếu chiều dài mảng là hợp lệ
    if (length < 2) {
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d801      	bhi.n	800203e <calculate_lrc+0x1a>
        return 0;  // Trả về 0 nếu chiều dài không hợp lệ
 800203a:	2300      	movs	r3, #0
 800203c:	e027      	b.n	800208e <calculate_lrc+0x6a>
    }

    // Mỗi byte nhị phân được biểu diễn bằng 2 ký tự ASCII
    for (uint16_t i = 0; i < length; i += 2) {
 800203e:	2300      	movs	r3, #0
 8002040:	81bb      	strh	r3, [r7, #12]
 8002042:	e01c      	b.n	800207e <calculate_lrc+0x5a>
        // Chuyển đổi 2 ký tự ASCII thành 1 byte nhị phân
        char hex_byte[3] = {ascii_data[i], ascii_data[i + 1], '\0'};
 8002044:	89bb      	ldrh	r3, [r7, #12]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	723b      	strb	r3, [r7, #8]
 800204e:	89bb      	ldrh	r3, [r7, #12]
 8002050:	3301      	adds	r3, #1
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	727b      	strb	r3, [r7, #9]
 800205a:	2300      	movs	r3, #0
 800205c:	72bb      	strb	r3, [r7, #10]
        uint8_t byte_value = (uint8_t)strtol(hex_byte, NULL, 16);
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	2210      	movs	r2, #16
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f005 fbf4 	bl	8007854 <strtol>
 800206c:	4603      	mov	r3, r0
 800206e:	72fb      	strb	r3, [r7, #11]

        // Cộng giá trị vào tổng LRC
        lrc += byte_value;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	7afb      	ldrb	r3, [r7, #11]
 8002074:	4413      	add	r3, r2
 8002076:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i += 2) {
 8002078:	89bb      	ldrh	r3, [r7, #12]
 800207a:	3302      	adds	r3, #2
 800207c:	81bb      	strh	r3, [r7, #12]
 800207e:	89ba      	ldrh	r2, [r7, #12]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	429a      	cmp	r2, r3
 8002084:	d3de      	bcc.n	8002044 <calculate_lrc+0x20>
    }

    // Lấy phần bù 2 (2's complement)
    lrc = (uint8_t)(-((int8_t)lrc));
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	425b      	negs	r3, r3
 800208a:	73fb      	strb	r3, [r7, #15]
    return lrc;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <check_lrc>:

uint8_t check_lrc(uint8_t *ascii_data, uint16_t length, char* ascii_lrc)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	460b      	mov	r3, r1
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	817b      	strh	r3, [r7, #10]

    // Tính LRC từ dữ liệu
    uint8_t calculated_lrc = calculate_lrc(ascii_data, length);
 80020a4:	897b      	ldrh	r3, [r7, #10]
 80020a6:	4619      	mov	r1, r3
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff ffbb 	bl	8002024 <calculate_lrc>
 80020ae:	4603      	mov	r3, r0
 80020b0:	75fb      	strb	r3, [r7, #23]

    char hex_byte[3] = {ascii_lrc[0], ascii_lrc[1], '\0'};
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	743b      	strb	r3, [r7, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	747b      	strb	r3, [r7, #17]
 80020be:	2300      	movs	r3, #0
 80020c0:	74bb      	strb	r3, [r7, #18]
    uint8_t received_lrc = (uint8_t)strtol(hex_byte, NULL, 16);
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	2210      	movs	r2, #16
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 fbc2 	bl	8007854 <strtol>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75bb      	strb	r3, [r7, #22]

    // So sánh LRC tính toán và LRC nhận được
    if (calculated_lrc == received_lrc)
 80020d4:	7dfa      	ldrb	r2, [r7, #23]
 80020d6:	7dbb      	ldrb	r3, [r7, #22]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d101      	bne.n	80020e0 <check_lrc+0x4a>
    {
    	return 1;
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <check_lrc+0x4c>
    }
    else
    	return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <hexdec_to_ascii>:

// Mã hóa LRC thành chuỗi ASCII
void hexdec_to_ascii(uint8_t hexdec, char *ascii_out)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
    sprintf(ascii_out, "%02X", hexdec); // Mã hóa thành 2 ký tự HEX ASCII
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4903      	ldr	r1, [pc, #12]	@ (800210c <hexdec_to_ascii+0x20>)
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f005 fbb2 	bl	8007868 <siprintf>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	08009124 	.word	0x08009124

08002110 <RS485_data_to_send>:
void dec_to_ascii(uint8_t decimal, char *ascii_out) {
    sprintf(ascii_out, "%02d", decimal); // Chuyển đổi số thập phân thành chuỗi ASCII
}
void RS485_data_to_send()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	RS_txBuffer[0] = ':';
 8002114:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <RS485_data_to_send+0xb4>)
 8002116:	223a      	movs	r2, #58	@ 0x3a
 8002118:	701a      	strb	r2, [r3, #0]
	hexdec_to_ascii(myID,(char*)&RS_txBuffer[1]);
 800211a:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <RS485_data_to_send+0xb8>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	492b      	ldr	r1, [pc, #172]	@ (80021cc <RS485_data_to_send+0xbc>)
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ffe3 	bl	80020ec <hexdec_to_ascii>
	RS_txBuffer[3] = '0';
 8002126:	4b27      	ldr	r3, [pc, #156]	@ (80021c4 <RS485_data_to_send+0xb4>)
 8002128:	2230      	movs	r2, #48	@ 0x30
 800212a:	70da      	strb	r2, [r3, #3]
	RS_txBuffer[4] = '2';
 800212c:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <RS485_data_to_send+0xb4>)
 800212e:	2232      	movs	r2, #50	@ 0x32
 8002130:	711a      	strb	r2, [r3, #4]

	hexdec_to_ascii(gTime.Hours,(char*)&RS_txBuffer[5]);
 8002132:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <RS485_data_to_send+0xc0>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4927      	ldr	r1, [pc, #156]	@ (80021d4 <RS485_data_to_send+0xc4>)
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffd7 	bl	80020ec <hexdec_to_ascii>
	hexdec_to_ascii(gTime.Minutes,(char*)&RS_txBuffer[7]);
 800213e:	4b24      	ldr	r3, [pc, #144]	@ (80021d0 <RS485_data_to_send+0xc0>)
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	4925      	ldr	r1, [pc, #148]	@ (80021d8 <RS485_data_to_send+0xc8>)
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ffd1 	bl	80020ec <hexdec_to_ascii>
	hexdec_to_ascii(gTime.Seconds,(char*)&RS_txBuffer[9]);
 800214a:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <RS485_data_to_send+0xc0>)
 800214c:	789b      	ldrb	r3, [r3, #2]
 800214e:	4923      	ldr	r1, [pc, #140]	@ (80021dc <RS485_data_to_send+0xcc>)
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ffcb 	bl	80020ec <hexdec_to_ascii>
	hexdec_to_ascii((uint8_t)(CO_ppm>>8),(char*)&RS_txBuffer[11]);
 8002156:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <RS485_data_to_send+0xd0>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b29b      	uxth	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4920      	ldr	r1, [pc, #128]	@ (80021e4 <RS485_data_to_send+0xd4>)
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ffc2 	bl	80020ec <hexdec_to_ascii>
	hexdec_to_ascii((uint8_t)(CO_ppm),(char*)&RS_txBuffer[13]);
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <RS485_data_to_send+0xd0>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	491e      	ldr	r1, [pc, #120]	@ (80021e8 <RS485_data_to_send+0xd8>)
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ffbb 	bl	80020ec <hexdec_to_ascii>
	hexdec_to_ascii((uint8_t)(CO2_ppm>>8),(char*)&RS_txBuffer[15]);
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <RS485_data_to_send+0xdc>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b29b      	uxth	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	491b      	ldr	r1, [pc, #108]	@ (80021f0 <RS485_data_to_send+0xe0>)
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ffb2 	bl	80020ec <hexdec_to_ascii>
	hexdec_to_ascii((uint8_t)(CO2_ppm),(char*)&RS_txBuffer[17]);
 8002188:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <RS485_data_to_send+0xdc>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4919      	ldr	r1, [pc, #100]	@ (80021f4 <RS485_data_to_send+0xe4>)
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ffab 	bl	80020ec <hexdec_to_ascii>

	lrc = calculate_lrc(&RS_txBuffer[1],18);
 8002196:	2112      	movs	r1, #18
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <RS485_data_to_send+0xbc>)
 800219a:	f7ff ff43 	bl	8002024 <calculate_lrc>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <RS485_data_to_send+0xe8>)
 80021a4:	701a      	strb	r2, [r3, #0]
	hexdec_to_ascii(lrc,(char*)&RS_txBuffer[19]);
 80021a6:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <RS485_data_to_send+0xe8>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	4914      	ldr	r1, [pc, #80]	@ (80021fc <RS485_data_to_send+0xec>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff9d 	bl	80020ec <hexdec_to_ascii>
	RS_txBuffer[21]=0x0D ;
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <RS485_data_to_send+0xb4>)
 80021b4:	220d      	movs	r2, #13
 80021b6:	755a      	strb	r2, [r3, #21]
	RS_txBuffer[22]=0x0A ;
 80021b8:	4b02      	ldr	r3, [pc, #8]	@ (80021c4 <RS485_data_to_send+0xb4>)
 80021ba:	220a      	movs	r2, #10
 80021bc:	759a      	strb	r2, [r3, #22]
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000278 	.word	0x20000278
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000279 	.word	0x20000279
 80021d0:	20000e80 	.word	0x20000e80
 80021d4:	2000027d 	.word	0x2000027d
 80021d8:	2000027f 	.word	0x2000027f
 80021dc:	20000281 	.word	0x20000281
 80021e0:	200002ac 	.word	0x200002ac
 80021e4:	20000283 	.word	0x20000283
 80021e8:	20000285 	.word	0x20000285
 80021ec:	200002a0 	.word	0x200002a0
 80021f0:	20000287 	.word	0x20000287
 80021f4:	20000289 	.word	0x20000289
 80021f8:	20000e7c 	.word	0x20000e7c
 80021fc:	2000028b 	.word	0x2000028b

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <HAL_MspInit+0x5c>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	4a14      	ldr	r2, [pc, #80]	@ (800225c <HAL_MspInit+0x5c>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6193      	str	r3, [r2, #24]
 8002212:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_MspInit+0x5c>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <HAL_MspInit+0x5c>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a0e      	ldr	r2, [pc, #56]	@ (800225c <HAL_MspInit+0x5c>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <HAL_MspInit+0x5c>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_MspInit+0x60>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_MspInit+0x60>)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000

08002264 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <HAL_ADC_MspInit+0x7c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d129      	bne.n	80022d8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <HAL_ADC_MspInit+0x80>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <HAL_ADC_MspInit+0x80>)
 800228a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <HAL_ADC_MspInit+0x80>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_ADC_MspInit+0x80>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <HAL_ADC_MspInit+0x80>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_ADC_MspInit+0x80>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022b4:	2301      	movs	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b8:	2303      	movs	r3, #3
 80022ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4619      	mov	r1, r3
 80022c2:	4809      	ldr	r0, [pc, #36]	@ (80022e8 <HAL_ADC_MspInit+0x84>)
 80022c4:	f001 f918 	bl	80034f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2105      	movs	r1, #5
 80022cc:	2012      	movs	r0, #18
 80022ce:	f001 f82a 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80022d2:	2012      	movs	r0, #18
 80022d4:	f001 f843 	bl	800335e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80022d8:	bf00      	nop
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40012400 	.word	0x40012400
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010800 	.word	0x40010800

080022ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0318 	add.w	r3, r7, #24
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2b      	ldr	r2, [pc, #172]	@ (80023b4 <HAL_I2C_MspInit+0xc8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d124      	bne.n	8002356 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a29      	ldr	r2, [pc, #164]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002324:	23c0      	movs	r3, #192	@ 0xc0
 8002326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002328:	2312      	movs	r3, #18
 800232a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	4619      	mov	r1, r3
 8002336:	4821      	ldr	r0, [pc, #132]	@ (80023bc <HAL_I2C_MspInit+0xd0>)
 8002338:	f001 f8de 	bl	80034f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800233c:	4b1e      	ldr	r3, [pc, #120]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	4a1d      	ldr	r2, [pc, #116]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 8002342:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002346:	61d3      	str	r3, [r2, #28]
 8002348:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002354:	e029      	b.n	80023aa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a19      	ldr	r2, [pc, #100]	@ (80023c0 <HAL_I2C_MspInit+0xd4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d124      	bne.n	80023aa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002378:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800237e:	2312      	movs	r3, #18
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0318 	add.w	r3, r7, #24
 800238a:	4619      	mov	r1, r3
 800238c:	480b      	ldr	r0, [pc, #44]	@ (80023bc <HAL_I2C_MspInit+0xd0>)
 800238e:	f001 f8b3 	bl	80034f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a08      	ldr	r2, [pc, #32]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 8002398:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800239c:	61d3      	str	r3, [r2, #28]
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_I2C_MspInit+0xcc>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	@ 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40005400 	.word	0x40005400
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010c00 	.word	0x40010c00
 80023c0:	40005800 	.word	0x40005800

080023c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002400 <HAL_RTC_MspInit+0x3c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d110      	bne.n	80023f8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80023d6:	f002 fc41 	bl	8004c5c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_RTC_MspInit+0x40>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a09      	ldr	r2, [pc, #36]	@ (8002404 <HAL_RTC_MspInit+0x40>)
 80023e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80023e4:	61d3      	str	r3, [r2, #28]
 80023e6:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <HAL_RTC_MspInit+0x40>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023f2:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <HAL_RTC_MspInit+0x44>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40002800 	.word	0x40002800
 8002404:	40021000 	.word	0x40021000
 8002408:	4242043c 	.word	0x4242043c

0800240c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241c:	d114      	bne.n	8002448 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_TIM_Base_MspInit+0x78>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_TIM_Base_MspInit+0x78>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_TIM_Base_MspInit+0x78>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2104      	movs	r1, #4
 800243a:	201c      	movs	r0, #28
 800243c:	f000 ff73 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002440:	201c      	movs	r0, #28
 8002442:	f000 ff8c 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002446:	e018      	b.n	800247a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0e      	ldr	r2, [pc, #56]	@ (8002488 <HAL_TIM_Base_MspInit+0x7c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d113      	bne.n	800247a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_TIM_Base_MspInit+0x78>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a0b      	ldr	r2, [pc, #44]	@ (8002484 <HAL_TIM_Base_MspInit+0x78>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	61d3      	str	r3, [r2, #28]
 800245e:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_TIM_Base_MspInit+0x78>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2106      	movs	r1, #6
 800246e:	201d      	movs	r0, #29
 8002470:	f000 ff59 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002474:	201d      	movs	r0, #29
 8002476:	f000 ff72 	bl	800335e <HAL_NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	40000400 	.word	0x40000400

0800248c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a20      	ldr	r2, [pc, #128]	@ (8002528 <HAL_UART_MspInit+0x9c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d139      	bne.n	8002520 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ac:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <HAL_UART_MspInit+0xa0>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a1e      	ldr	r2, [pc, #120]	@ (800252c <HAL_UART_MspInit+0xa0>)
 80024b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b1c      	ldr	r3, [pc, #112]	@ (800252c <HAL_UART_MspInit+0xa0>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_UART_MspInit+0xa0>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a18      	ldr	r2, [pc, #96]	@ (800252c <HAL_UART_MspInit+0xa0>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_UART_MspInit+0xa0>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	4619      	mov	r1, r3
 80024f0:	480f      	ldr	r0, [pc, #60]	@ (8002530 <HAL_UART_MspInit+0xa4>)
 80024f2:	f001 f801 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	4619      	mov	r1, r3
 800250a:	4809      	ldr	r0, [pc, #36]	@ (8002530 <HAL_UART_MspInit+0xa4>)
 800250c:	f000 fff4 	bl	80034f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	2025      	movs	r0, #37	@ 0x25
 8002516:	f000 ff06 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800251a:	2025      	movs	r0, #37	@ 0x25
 800251c:	f000 ff1f 	bl	800335e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002520:	bf00      	nop
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40013800 	.word	0x40013800
 800252c:	40021000 	.word	0x40021000
 8002530:	40010800 	.word	0x40010800

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <NMI_Handler+0x4>

0800253c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <HardFault_Handler+0x4>

08002544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <MemManage_Handler+0x4>

0800254c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <UsageFault_Handler+0x4>

0800255c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002584:	f000 f9ba 	bl	80028fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}

0800258c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L3_BUT_Pin);
 8002590:	2001      	movs	r0, #1
 8002592:	f001 f965 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}

0800259a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L2_BUT_Pin);
 800259e:	2002      	movs	r0, #2
 80025a0:	f001 f95e 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CCS811_INT_Pin);
 80025ac:	2008      	movs	r0, #8
 80025ae:	f001 f957 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L1_BUT_Pin);
 80025ba:	2010      	movs	r0, #16
 80025bc:	f001 f950 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <ADC1_2_IRQHandler+0x10>)
 80025ca:	f000 fb71 	bl	8002cb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000008c 	.word	0x2000008c

080025d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <TIM2_IRQHandler+0x10>)
 80025de:	f003 fe69 	bl	80062b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000178 	.word	0x20000178

080025ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025f0:	4802      	ldr	r0, [pc, #8]	@ (80025fc <TIM3_IRQHandler+0x10>)
 80025f2:	f003 fe5f 	bl	80062b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200001c0 	.word	0x200001c0

08002600 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002604:	4802      	ldr	r0, [pc, #8]	@ (8002610 <USART1_IRQHandler+0x10>)
 8002606:	f004 fb3d 	bl	8006c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000208 	.word	0x20000208

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	@ (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f005 f94c 	bl	80078e0 <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	@ (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20005000 	.word	0x20005000
 8002674:	00000400 	.word	0x00000400
 8002678:	20000e84 	.word	0x20000e84
 800267c:	20000fd8 	.word	0x20000fd8

08002680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <L2_Warning_On>:

#include "warning.h"


void L2_Warning_On ()
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL1_GPIO_Port,RL1_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <L2_Warning_On+0x54>)
 8002696:	f001 f8ca 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL2_GPIO_Port,RL2_Pin, GPIO_PIN_SET);
 800269a:	2201      	movs	r2, #1
 800269c:	2140      	movs	r1, #64	@ 0x40
 800269e:	4810      	ldr	r0, [pc, #64]	@ (80026e0 <L2_Warning_On+0x54>)
 80026a0:	f001 f8c5 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL3_GPIO_Port,RL3_Pin, GPIO_PIN_RESET);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2120      	movs	r1, #32
 80026a8:	480d      	ldr	r0, [pc, #52]	@ (80026e0 <L2_Warning_On+0x54>)
 80026aa:	f001 f8c0 	bl	800382e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026b4:	480b      	ldr	r0, [pc, #44]	@ (80026e4 <L2_Warning_On+0x58>)
 80026b6:	f001 f8ba 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026c0:	4808      	ldr	r0, [pc, #32]	@ (80026e4 <L2_Warning_On+0x58>)
 80026c2:	f001 f8b4 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 80026c6:	2201      	movs	r2, #1
 80026c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026cc:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <L2_Warning_On+0x58>)
 80026ce:	f001 f8ae 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2102      	movs	r1, #2
 80026d6:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <L2_Warning_On+0x54>)
 80026d8:	f001 f8a9 	bl	800382e <HAL_GPIO_WritePin>
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40010800 	.word	0x40010800
 80026e4:	40010c00 	.word	0x40010c00

080026e8 <L3_Warning_On>:
void L2_Warning_Off()
{
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
}
void L3_Warning_On ()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL1_GPIO_Port,RL1_Pin, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2180      	movs	r1, #128	@ 0x80
 80026f0:	4812      	ldr	r0, [pc, #72]	@ (800273c <L3_Warning_On+0x54>)
 80026f2:	f001 f89c 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL2_GPIO_Port,RL2_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2140      	movs	r1, #64	@ 0x40
 80026fa:	4810      	ldr	r0, [pc, #64]	@ (800273c <L3_Warning_On+0x54>)
 80026fc:	f001 f897 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL3_GPIO_Port,RL3_Pin, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2120      	movs	r1, #32
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <L3_Warning_On+0x54>)
 8002706:	f001 f892 	bl	800382e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 800270a:	2201      	movs	r2, #1
 800270c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002710:	480b      	ldr	r0, [pc, #44]	@ (8002740 <L3_Warning_On+0x58>)
 8002712:	f001 f88c 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8002716:	2201      	movs	r2, #1
 8002718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800271c:	4808      	ldr	r0, [pc, #32]	@ (8002740 <L3_Warning_On+0x58>)
 800271e:	f001 f886 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002728:	4805      	ldr	r0, [pc, #20]	@ (8002740 <L3_Warning_On+0x58>)
 800272a:	f001 f880 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_SET);
 800272e:	2201      	movs	r2, #1
 8002730:	2102      	movs	r1, #2
 8002732:	4802      	ldr	r0, [pc, #8]	@ (800273c <L3_Warning_On+0x54>)
 8002734:	f001 f87b 	bl	800382e <HAL_GPIO_WritePin>
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40010800 	.word	0x40010800
 8002740:	40010c00 	.word	0x40010c00

08002744 <L1_Warning_On>:
{
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
}
void L1_Warning_On()
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL1_GPIO_Port,RL1_Pin, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	2180      	movs	r1, #128	@ 0x80
 800274c:	4812      	ldr	r0, [pc, #72]	@ (8002798 <L1_Warning_On+0x54>)
 800274e:	f001 f86e 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL2_GPIO_Port,RL2_Pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	2140      	movs	r1, #64	@ 0x40
 8002756:	4810      	ldr	r0, [pc, #64]	@ (8002798 <L1_Warning_On+0x54>)
 8002758:	f001 f869 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL3_GPIO_Port,RL3_Pin, GPIO_PIN_RESET);
 800275c:	2200      	movs	r2, #0
 800275e:	2120      	movs	r1, #32
 8002760:	480d      	ldr	r0, [pc, #52]	@ (8002798 <L1_Warning_On+0x54>)
 8002762:	f001 f864 	bl	800382e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 8002766:	2200      	movs	r2, #0
 8002768:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800276c:	480b      	ldr	r0, [pc, #44]	@ (800279c <L1_Warning_On+0x58>)
 800276e:	f001 f85e 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8002772:	2201      	movs	r2, #1
 8002774:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002778:	4808      	ldr	r0, [pc, #32]	@ (800279c <L1_Warning_On+0x58>)
 800277a:	f001 f858 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 800277e:	2201      	movs	r2, #1
 8002780:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002784:	4805      	ldr	r0, [pc, #20]	@ (800279c <L1_Warning_On+0x58>)
 8002786:	f001 f852 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	2102      	movs	r1, #2
 800278e:	4802      	ldr	r0, [pc, #8]	@ (8002798 <L1_Warning_On+0x54>)
 8002790:	f001 f84d 	bl	800382e <HAL_GPIO_WritePin>
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40010800 	.word	0x40010800
 800279c:	40010c00 	.word	0x40010c00

080027a0 <Auto_Warning>:
void L1_Warning_Off()
{
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
}
void Auto_Warning ()
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	  // khi không ấn nút( cảnh báo tự đông)
	  if(CO2_ppm<=1000 && CO_ppm <= 25)
 80027a4:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <Auto_Warning+0x40>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027ac:	d806      	bhi.n	80027bc <Auto_Warning+0x1c>
 80027ae:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <Auto_Warning+0x44>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	2b19      	cmp	r3, #25
 80027b4:	d802      	bhi.n	80027bc <Auto_Warning+0x1c>
	  {
		  L1_Warning_On();
 80027b6:	f7ff ffc5 	bl	8002744 <L1_Warning_On>
 80027ba:	e00e      	b.n	80027da <Auto_Warning+0x3a>
	  }
	  else if((CO2_ppm>=2000) || (CO_ppm>=50))
 80027bc:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <Auto_Warning+0x40>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80027c4:	d203      	bcs.n	80027ce <Auto_Warning+0x2e>
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <Auto_Warning+0x44>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	2b31      	cmp	r3, #49	@ 0x31
 80027cc:	d902      	bls.n	80027d4 <Auto_Warning+0x34>
	  {
		  L3_Warning_On();
 80027ce:	f7ff ff8b 	bl	80026e8 <L3_Warning_On>
 80027d2:	e002      	b.n	80027da <Auto_Warning+0x3a>
	  }
	  else
	  {
		  L2_Warning_On();
 80027d4:	f7ff ff5a 	bl	800268c <L2_Warning_On>
	  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200002a0 	.word	0x200002a0
 80027e4:	200002ac 	.word	0x200002ac

080027e8 <Manual_Warning>:
void Manual_Warning ()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
    if(l1_state==1)
 80027ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <Manual_Warning+0x30>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d102      	bne.n	80027fa <Manual_Warning+0x12>
    {
      L1_Warning_On();
 80027f4:	f7ff ffa6 	bl	8002744 <L1_Warning_On>
    }
    else if(l3_state==1)
    {
      L3_Warning_On();
    }
}
 80027f8:	e00c      	b.n	8002814 <Manual_Warning+0x2c>
    else if (l2_state==1)
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <Manual_Warning+0x34>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d102      	bne.n	8002808 <Manual_Warning+0x20>
      L2_Warning_On();
 8002802:	f7ff ff43 	bl	800268c <L2_Warning_On>
}
 8002806:	e005      	b.n	8002814 <Manual_Warning+0x2c>
    else if(l3_state==1)
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <Manual_Warning+0x38>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <Manual_Warning+0x2c>
      L3_Warning_On();
 8002810:	f7ff ff6a 	bl	80026e8 <L3_Warning_On>
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	2000029b 	.word	0x2000029b
 800281c:	2000029c 	.word	0x2000029c
 8002820:	2000029d 	.word	0x2000029d

08002824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002824:	f7ff ff2c 	bl	8002680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002828:	480b      	ldr	r0, [pc, #44]	@ (8002858 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800282a:	490c      	ldr	r1, [pc, #48]	@ (800285c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800282c:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <LoopFillZerobss+0x16>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a09      	ldr	r2, [pc, #36]	@ (8002864 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002840:	4c09      	ldr	r4, [pc, #36]	@ (8002868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800284e:	f005 f84d 	bl	80078ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002852:	f7ff f89f 	bl	8001994 <main>
  bx lr
 8002856:	4770      	bx	lr
  ldr r0, =_sdata
 8002858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800285c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002860:	080092e0 	.word	0x080092e0
  ldr r2, =_sbss
 8002864:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002868:	20000fd4 	.word	0x20000fd4

0800286c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800286c:	e7fe      	b.n	800286c <CAN1_RX1_IRQHandler>
	...

08002870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <HAL_Init+0x28>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	@ (8002898 <HAL_Init+0x28>)
 800287a:	f043 0310 	orr.w	r3, r3, #16
 800287e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 fd45 	bl	8003310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	200f      	movs	r0, #15
 8002888:	f000 f808 	bl	800289c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f7ff fcb8 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40022000 	.word	0x40022000

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a4:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_InitTick+0x54>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <HAL_InitTick+0x58>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fd5d 	bl	800337a <HAL_SYSTICK_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00e      	b.n	80028e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d80a      	bhi.n	80028e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f000 fd25 	bl	8003326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4a06      	ldr	r2, [pc, #24]	@ (80028f8 <HAL_InitTick+0x5c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000004 	.word	0x20000004
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	20000008 	.word	0x20000008

080028fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_IncTick+0x1c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_IncTick+0x20>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a03      	ldr	r2, [pc, #12]	@ (800291c <HAL_IncTick+0x20>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	2000000c 	.word	0x2000000c
 800291c:	20000e88 	.word	0x20000e88

08002920 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b02      	ldr	r3, [pc, #8]	@ (8002930 <HAL_GetTick+0x10>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	20000e88 	.word	0x20000e88

08002934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff fff0 	bl	8002920 <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d005      	beq.n	800295a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294e:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <HAL_Delay+0x44>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295a:	bf00      	nop
 800295c:	f7ff ffe0 	bl	8002920 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	429a      	cmp	r2, r3
 800296a:	d8f7      	bhi.n	800295c <HAL_Delay+0x28>
  {
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	2000000c 	.word	0x2000000c

0800297c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0be      	b.n	8002b1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fc52 	bl	8002264 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fb8f 	bl	80030e4 <ADC_ConversionStop_Disable>
 80029c6:	4603      	mov	r3, r0
 80029c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 8099 	bne.w	8002b0a <HAL_ADC_Init+0x18e>
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 8095 	bne.w	8002b0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029e8:	f023 0302 	bic.w	r3, r3, #2
 80029ec:	f043 0202 	orr.w	r2, r3, #2
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7b1b      	ldrb	r3, [r3, #12]
 8002a02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a14:	d003      	beq.n	8002a1e <HAL_ADC_Init+0xa2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_ADC_Init+0xa8>
 8002a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a22:	e000      	b.n	8002a26 <HAL_ADC_Init+0xaa>
 8002a24:	2300      	movs	r3, #0
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7d1b      	ldrb	r3, [r3, #20]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d119      	bne.n	8002a68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7b1b      	ldrb	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	035a      	lsls	r2, r3, #13
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e00b      	b.n	8002a68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <HAL_ADC_Init+0x1a8>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a98:	d003      	beq.n	8002aa2 <HAL_ADC_Init+0x126>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d104      	bne.n	8002aac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <HAL_ADC_Init+0x1ac>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d10b      	bne.n	8002ae8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ae6:	e018      	b.n	8002b1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	f023 0312 	bic.w	r3, r3, #18
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b08:	e007      	b.n	8002b1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0e:	f043 0210 	orr.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	ffe1f7fd 	.word	0xffe1f7fd
 8002b28:	ff1f0efe 	.word	0xff1f0efe

08002b2c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_Start_IT+0x1a>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e0a0      	b.n	8002c88 <HAL_ADC_Start_IT+0x15c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa6e 	bl	8003030 <ADC_Enable>
 8002b54:	4603      	mov	r3, r0
 8002b56:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 808f 	bne.w	8002c7e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a45      	ldr	r2, [pc, #276]	@ (8002c90 <HAL_ADC_Start_IT+0x164>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_Start_IT+0x5e>
 8002b7e:	4b45      	ldr	r3, [pc, #276]	@ (8002c94 <HAL_ADC_Start_IT+0x168>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d026      	beq.n	8002bf2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bb4:	e01d      	b.n	8002bf2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a33      	ldr	r2, [pc, #204]	@ (8002c94 <HAL_ADC_Start_IT+0x168>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_ADC_Start_IT+0xaa>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002c90 <HAL_ADC_Start_IT+0x164>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_ADC_Start_IT+0xc6>
 8002bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002c94 <HAL_ADC_Start_IT+0x168>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	f023 0206 	bic.w	r2, r3, #6
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c0a:	e002      	b.n	8002c12 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0202 	mvn.w	r2, #2
 8002c22:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0220 	orr.w	r2, r2, #32
 8002c32:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002c3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002c42:	d113      	bne.n	8002c6c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c48:	4a11      	ldr	r2, [pc, #68]	@ (8002c90 <HAL_ADC_Start_IT+0x164>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d105      	bne.n	8002c5a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <HAL_ADC_Start_IT+0x168>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	e00c      	b.n	8002c86 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40012800 	.word	0x40012800
 8002c94:	40012400 	.word	0x40012400

08002c98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d03e      	beq.n	8002d50 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d039      	beq.n	8002d50 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cfe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d02:	d11d      	bne.n	8002d40 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d119      	bne.n	8002d40 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0220 	bic.w	r2, r2, #32
 8002d1a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fe fb51 	bl	80013e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0212 	mvn.w	r2, #18
 8002d4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d04d      	beq.n	8002df6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d048      	beq.n	8002df6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002d86:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002d8a:	d012      	beq.n	8002db2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d125      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002da4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002da8:	d11d      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d119      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dc0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9bd 	bl	8003166 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 020c 	mvn.w	r2, #12
 8002df4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d012      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f809 	bl	8002e2e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0201 	mvn.w	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x20>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0dc      	b.n	800301a <HAL_ADC_ConfigChannel+0x1da>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d81c      	bhi.n	8002eaa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b05      	subs	r3, #5
 8002e82:	221f      	movs	r2, #31
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	4019      	ands	r1, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	3b05      	subs	r3, #5
 8002e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ea8:	e03c      	b.n	8002f24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d81c      	bhi.n	8002eec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3b23      	subs	r3, #35	@ 0x23
 8002ec4:	221f      	movs	r2, #31
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	4019      	ands	r1, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	3b23      	subs	r3, #35	@ 0x23
 8002ede:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eea:	e01b      	b.n	8002f24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	3b41      	subs	r3, #65	@ 0x41
 8002efe:	221f      	movs	r2, #31
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	4019      	ands	r1, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	3b41      	subs	r3, #65	@ 0x41
 8002f18:	fa00 f203 	lsl.w	r2, r0, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b09      	cmp	r3, #9
 8002f2a:	d91c      	bls.n	8002f66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68d9      	ldr	r1, [r3, #12]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3b1e      	subs	r3, #30
 8002f3e:	2207      	movs	r2, #7
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	4019      	ands	r1, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6898      	ldr	r0, [r3, #8]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	3b1e      	subs	r3, #30
 8002f58:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	e019      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6919      	ldr	r1, [r3, #16]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	2207      	movs	r2, #7
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4019      	ands	r1, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6898      	ldr	r0, [r3, #8]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d003      	beq.n	8002faa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fa6:	2b11      	cmp	r3, #17
 8002fa8:	d132      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1d      	ldr	r2, [pc, #116]	@ (8003024 <HAL_ADC_ConfigChannel+0x1e4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d125      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d126      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002fd0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d11a      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fda:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a13      	ldr	r2, [pc, #76]	@ (800302c <HAL_ADC_ConfigChannel+0x1ec>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	0c9a      	lsrs	r2, r3, #18
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ff0:	e002      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f9      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x1b2>
 8002ffe:	e007      	b.n	8003010 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	40012400 	.word	0x40012400
 8003028:	20000004 	.word	0x20000004
 800302c:	431bde83 	.word	0x431bde83

08003030 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d040      	beq.n	80030d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800305e:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <ADC_Enable+0xac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1f      	ldr	r2, [pc, #124]	@ (80030e0 <ADC_Enable+0xb0>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	0c9b      	lsrs	r3, r3, #18
 800306a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800306c:	e002      	b.n	8003074 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3b01      	subs	r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f9      	bne.n	800306e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800307a:	f7ff fc51 	bl	8002920 <HAL_GetTick>
 800307e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003080:	e01f      	b.n	80030c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003082:	f7ff fc4d 	bl	8002920 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d918      	bls.n	80030c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d011      	beq.n	80030c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	f043 0210 	orr.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e007      	b.n	80030d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d1d8      	bne.n	8003082 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000004 	.word	0x20000004
 80030e0:	431bde83 	.word	0x431bde83

080030e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d12e      	bne.n	800315c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800310e:	f7ff fc07 	bl	8002920 <HAL_GetTick>
 8003112:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003114:	e01b      	b.n	800314e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003116:	f7ff fc03 	bl	8002920 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d914      	bls.n	800314e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10d      	bne.n	800314e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003136:	f043 0210 	orr.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e007      	b.n	800315e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d0dc      	beq.n	8003116 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031aa:	4a04      	ldr	r2, [pc, #16]	@ (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	60d3      	str	r3, [r2, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <__NVIC_GetPriorityGrouping+0x18>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	db0b      	blt.n	8003206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4906      	ldr	r1, [pc, #24]	@ (8003210 <__NVIC_EnableIRQ+0x34>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	e000e100 	.word	0xe000e100

08003214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	6039      	str	r1, [r7, #0]
 800321e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003224:	2b00      	cmp	r3, #0
 8003226:	db0a      	blt.n	800323e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	490c      	ldr	r1, [pc, #48]	@ (8003260 <__NVIC_SetPriority+0x4c>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	0112      	lsls	r2, r2, #4
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	440b      	add	r3, r1
 8003238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800323c:	e00a      	b.n	8003254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4908      	ldr	r1, [pc, #32]	@ (8003264 <__NVIC_SetPriority+0x50>)
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	3b04      	subs	r3, #4
 800324c:	0112      	lsls	r2, r2, #4
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	440b      	add	r3, r1
 8003252:	761a      	strb	r2, [r3, #24]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	@ 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f1c3 0307 	rsb	r3, r3, #7
 8003282:	2b04      	cmp	r3, #4
 8003284:	bf28      	it	cs
 8003286:	2304      	movcs	r3, #4
 8003288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3304      	adds	r3, #4
 800328e:	2b06      	cmp	r3, #6
 8003290:	d902      	bls.n	8003298 <NVIC_EncodePriority+0x30>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3b03      	subs	r3, #3
 8003296:	e000      	b.n	800329a <NVIC_EncodePriority+0x32>
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	f04f 32ff 	mov.w	r2, #4294967295
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	401a      	ands	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b0:	f04f 31ff 	mov.w	r1, #4294967295
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	43d9      	mvns	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	4313      	orrs	r3, r2
         );
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3724      	adds	r7, #36	@ 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032dc:	d301      	bcc.n	80032e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032de:	2301      	movs	r3, #1
 80032e0:	e00f      	b.n	8003302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <SysTick_Config+0x40>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ea:	210f      	movs	r1, #15
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f7ff ff90 	bl	8003214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <SysTick_Config+0x40>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032fa:	4b04      	ldr	r3, [pc, #16]	@ (800330c <SysTick_Config+0x40>)
 80032fc:	2207      	movs	r2, #7
 80032fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	e000e010 	.word	0xe000e010

08003310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff2d 	bl	8003178 <__NVIC_SetPriorityGrouping>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003338:	f7ff ff42 	bl	80031c0 <__NVIC_GetPriorityGrouping>
 800333c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f7ff ff90 	bl	8003268 <NVIC_EncodePriority>
 8003348:	4602      	mov	r2, r0
 800334a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff5f 	bl	8003214 <__NVIC_SetPriority>
}
 8003356:	bf00      	nop
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff35 	bl	80031dc <__NVIC_EnableIRQ>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ffa2 	bl	80032cc <SysTick_Config>
 8003388:	4603      	mov	r3, r0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d008      	beq.n	80033bc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2204      	movs	r2, #4
 80033ae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e020      	b.n	80033fe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020e 	bic.w	r2, r2, #14
 80033ca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d005      	beq.n	800342c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2204      	movs	r2, #4
 8003424:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	e051      	b.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020e 	bic.w	r2, r2, #14
 800343a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	@ (80034dc <HAL_DMA_Abort_IT+0xd4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d029      	beq.n	80034aa <HAL_DMA_Abort_IT+0xa2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	@ (80034e0 <HAL_DMA_Abort_IT+0xd8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x9e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1f      	ldr	r2, [pc, #124]	@ (80034e4 <HAL_DMA_Abort_IT+0xdc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01a      	beq.n	80034a0 <HAL_DMA_Abort_IT+0x98>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	@ (80034e8 <HAL_DMA_Abort_IT+0xe0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d012      	beq.n	800349a <HAL_DMA_Abort_IT+0x92>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1c      	ldr	r2, [pc, #112]	@ (80034ec <HAL_DMA_Abort_IT+0xe4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00a      	beq.n	8003494 <HAL_DMA_Abort_IT+0x8c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	@ (80034f0 <HAL_DMA_Abort_IT+0xe8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d102      	bne.n	800348e <HAL_DMA_Abort_IT+0x86>
 8003488:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800348c:	e00e      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 800348e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003492:	e00b      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 8003494:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003498:	e008      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 800349a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800349e:	e005      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 80034a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034a4:	e002      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 80034a6:	2310      	movs	r3, #16
 80034a8:	e000      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 80034aa:	2301      	movs	r3, #1
 80034ac:	4a11      	ldr	r2, [pc, #68]	@ (80034f4 <HAL_DMA_Abort_IT+0xec>)
 80034ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
    } 
  }
  return status;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40020008 	.word	0x40020008
 80034e0:	4002001c 	.word	0x4002001c
 80034e4:	40020030 	.word	0x40020030
 80034e8:	40020044 	.word	0x40020044
 80034ec:	40020058 	.word	0x40020058
 80034f0:	4002006c 	.word	0x4002006c
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b08b      	sub	sp, #44	@ 0x2c
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800350a:	e169      	b.n	80037e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800350c:	2201      	movs	r2, #1
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	429a      	cmp	r2, r3
 8003526:	f040 8158 	bne.w	80037da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a9a      	ldr	r2, [pc, #616]	@ (8003798 <HAL_GPIO_Init+0x2a0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d05e      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 8003534:	4a98      	ldr	r2, [pc, #608]	@ (8003798 <HAL_GPIO_Init+0x2a0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d875      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 800353a:	4a98      	ldr	r2, [pc, #608]	@ (800379c <HAL_GPIO_Init+0x2a4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d058      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 8003540:	4a96      	ldr	r2, [pc, #600]	@ (800379c <HAL_GPIO_Init+0x2a4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d86f      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 8003546:	4a96      	ldr	r2, [pc, #600]	@ (80037a0 <HAL_GPIO_Init+0x2a8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d052      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 800354c:	4a94      	ldr	r2, [pc, #592]	@ (80037a0 <HAL_GPIO_Init+0x2a8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d869      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 8003552:	4a94      	ldr	r2, [pc, #592]	@ (80037a4 <HAL_GPIO_Init+0x2ac>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d04c      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 8003558:	4a92      	ldr	r2, [pc, #584]	@ (80037a4 <HAL_GPIO_Init+0x2ac>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d863      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 800355e:	4a92      	ldr	r2, [pc, #584]	@ (80037a8 <HAL_GPIO_Init+0x2b0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d046      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
 8003564:	4a90      	ldr	r2, [pc, #576]	@ (80037a8 <HAL_GPIO_Init+0x2b0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d85d      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 800356a:	2b12      	cmp	r3, #18
 800356c:	d82a      	bhi.n	80035c4 <HAL_GPIO_Init+0xcc>
 800356e:	2b12      	cmp	r3, #18
 8003570:	d859      	bhi.n	8003626 <HAL_GPIO_Init+0x12e>
 8003572:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <HAL_GPIO_Init+0x80>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035f3 	.word	0x080035f3
 800357c:	080035cd 	.word	0x080035cd
 8003580:	080035df 	.word	0x080035df
 8003584:	08003621 	.word	0x08003621
 8003588:	08003627 	.word	0x08003627
 800358c:	08003627 	.word	0x08003627
 8003590:	08003627 	.word	0x08003627
 8003594:	08003627 	.word	0x08003627
 8003598:	08003627 	.word	0x08003627
 800359c:	08003627 	.word	0x08003627
 80035a0:	08003627 	.word	0x08003627
 80035a4:	08003627 	.word	0x08003627
 80035a8:	08003627 	.word	0x08003627
 80035ac:	08003627 	.word	0x08003627
 80035b0:	08003627 	.word	0x08003627
 80035b4:	08003627 	.word	0x08003627
 80035b8:	08003627 	.word	0x08003627
 80035bc:	080035d5 	.word	0x080035d5
 80035c0:	080035e9 	.word	0x080035e9
 80035c4:	4a79      	ldr	r2, [pc, #484]	@ (80037ac <HAL_GPIO_Init+0x2b4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035ca:	e02c      	b.n	8003626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	623b      	str	r3, [r7, #32]
          break;
 80035d2:	e029      	b.n	8003628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	3304      	adds	r3, #4
 80035da:	623b      	str	r3, [r7, #32]
          break;
 80035dc:	e024      	b.n	8003628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	3308      	adds	r3, #8
 80035e4:	623b      	str	r3, [r7, #32]
          break;
 80035e6:	e01f      	b.n	8003628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	330c      	adds	r3, #12
 80035ee:	623b      	str	r3, [r7, #32]
          break;
 80035f0:	e01a      	b.n	8003628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035fa:	2304      	movs	r3, #4
 80035fc:	623b      	str	r3, [r7, #32]
          break;
 80035fe:	e013      	b.n	8003628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003608:	2308      	movs	r3, #8
 800360a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	611a      	str	r2, [r3, #16]
          break;
 8003612:	e009      	b.n	8003628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003614:	2308      	movs	r3, #8
 8003616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	615a      	str	r2, [r3, #20]
          break;
 800361e:	e003      	b.n	8003628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003620:	2300      	movs	r3, #0
 8003622:	623b      	str	r3, [r7, #32]
          break;
 8003624:	e000      	b.n	8003628 <HAL_GPIO_Init+0x130>
          break;
 8003626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2bff      	cmp	r3, #255	@ 0xff
 800362c:	d801      	bhi.n	8003632 <HAL_GPIO_Init+0x13a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	e001      	b.n	8003636 <HAL_GPIO_Init+0x13e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2bff      	cmp	r3, #255	@ 0xff
 800363c:	d802      	bhi.n	8003644 <HAL_GPIO_Init+0x14c>
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	e002      	b.n	800364a <HAL_GPIO_Init+0x152>
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	3b08      	subs	r3, #8
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	210f      	movs	r1, #15
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	6a39      	ldr	r1, [r7, #32]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	431a      	orrs	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80b1 	beq.w	80037da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003678:	4b4d      	ldr	r3, [pc, #308]	@ (80037b0 <HAL_GPIO_Init+0x2b8>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	4a4c      	ldr	r2, [pc, #304]	@ (80037b0 <HAL_GPIO_Init+0x2b8>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6193      	str	r3, [r2, #24]
 8003684:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_GPIO_Init+0x2b8>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003690:	4a48      	ldr	r2, [pc, #288]	@ (80037b4 <HAL_GPIO_Init+0x2bc>)
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	3302      	adds	r3, #2
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4013      	ands	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a40      	ldr	r2, [pc, #256]	@ (80037b8 <HAL_GPIO_Init+0x2c0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <HAL_GPIO_Init+0x1ec>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3f      	ldr	r2, [pc, #252]	@ (80037bc <HAL_GPIO_Init+0x2c4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00d      	beq.n	80036e0 <HAL_GPIO_Init+0x1e8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3e      	ldr	r2, [pc, #248]	@ (80037c0 <HAL_GPIO_Init+0x2c8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <HAL_GPIO_Init+0x1e4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3d      	ldr	r2, [pc, #244]	@ (80037c4 <HAL_GPIO_Init+0x2cc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_GPIO_Init+0x1e0>
 80036d4:	2303      	movs	r3, #3
 80036d6:	e006      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036d8:	2304      	movs	r3, #4
 80036da:	e004      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036dc:	2302      	movs	r3, #2
 80036de:	e002      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036e4:	2300      	movs	r3, #0
 80036e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e8:	f002 0203 	and.w	r2, r2, #3
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	4093      	lsls	r3, r2
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036f6:	492f      	ldr	r1, [pc, #188]	@ (80037b4 <HAL_GPIO_Init+0x2bc>)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003710:	4b2d      	ldr	r3, [pc, #180]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	492c      	ldr	r1, [pc, #176]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]
 800371c:	e006      	b.n	800372c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800371e:	4b2a      	ldr	r3, [pc, #168]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	43db      	mvns	r3, r3
 8003726:	4928      	ldr	r1, [pc, #160]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003728:	4013      	ands	r3, r2
 800372a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003738:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4922      	ldr	r1, [pc, #136]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	60cb      	str	r3, [r1, #12]
 8003744:	e006      	b.n	8003754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003746:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	43db      	mvns	r3, r3
 800374e:	491e      	ldr	r1, [pc, #120]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003750:	4013      	ands	r3, r2
 8003752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003760:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	4918      	ldr	r1, [pc, #96]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800376e:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	43db      	mvns	r3, r3
 8003776:	4914      	ldr	r1, [pc, #80]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 8003778:	4013      	ands	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d021      	beq.n	80037cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003788:	4b0f      	ldr	r3, [pc, #60]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	490e      	ldr	r1, [pc, #56]	@ (80037c8 <HAL_GPIO_Init+0x2d0>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	e021      	b.n	80037da <HAL_GPIO_Init+0x2e2>
 8003796:	bf00      	nop
 8003798:	10320000 	.word	0x10320000
 800379c:	10310000 	.word	0x10310000
 80037a0:	10220000 	.word	0x10220000
 80037a4:	10210000 	.word	0x10210000
 80037a8:	10120000 	.word	0x10120000
 80037ac:	10110000 	.word	0x10110000
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40010800 	.word	0x40010800
 80037bc:	40010c00 	.word	0x40010c00
 80037c0:	40011000 	.word	0x40011000
 80037c4:	40011400 	.word	0x40011400
 80037c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_GPIO_Init+0x304>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	4909      	ldr	r1, [pc, #36]	@ (80037fc <HAL_GPIO_Init+0x304>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	3301      	adds	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f47f ae8e 	bne.w	800350c <HAL_GPIO_Init+0x14>
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	372c      	adds	r7, #44	@ 0x2c
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40010400 	.word	0x40010400

08003800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e001      	b.n	8003822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	807b      	strh	r3, [r7, #2]
 800383a:	4613      	mov	r3, r2
 800383c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383e:	787b      	ldrb	r3, [r7, #1]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003844:	887a      	ldrh	r2, [r7, #2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800384a:	e003      	b.n	8003854 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	041a      	lsls	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	611a      	str	r2, [r3, #16]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
	...

08003860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800386a:	4b08      	ldr	r3, [pc, #32]	@ (800388c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003876:	4a05      	ldr	r2, [pc, #20]	@ (800388c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fe78 	bl	8001574 <HAL_GPIO_EXTI_Callback>
  }
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40010400 	.word	0x40010400

08003890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e12b      	b.n	8003afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe fd18 	bl	80022ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	@ 0x24
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038f4:	f001 fd88 	bl	8005408 <HAL_RCC_GetPCLK1Freq>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a81      	ldr	r2, [pc, #516]	@ (8003b04 <HAL_I2C_Init+0x274>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d807      	bhi.n	8003914 <HAL_I2C_Init+0x84>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a80      	ldr	r2, [pc, #512]	@ (8003b08 <HAL_I2C_Init+0x278>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e006      	b.n	8003922 <HAL_I2C_Init+0x92>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a7d      	ldr	r2, [pc, #500]	@ (8003b0c <HAL_I2C_Init+0x27c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	bf94      	ite	ls
 800391c:	2301      	movls	r3, #1
 800391e:	2300      	movhi	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0e7      	b.n	8003afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a78      	ldr	r2, [pc, #480]	@ (8003b10 <HAL_I2C_Init+0x280>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9b      	lsrs	r3, r3, #18
 8003934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a6a      	ldr	r2, [pc, #424]	@ (8003b04 <HAL_I2C_Init+0x274>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d802      	bhi.n	8003964 <HAL_I2C_Init+0xd4>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3301      	adds	r3, #1
 8003962:	e009      	b.n	8003978 <HAL_I2C_Init+0xe8>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	4a69      	ldr	r2, [pc, #420]	@ (8003b14 <HAL_I2C_Init+0x284>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	3301      	adds	r3, #1
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	430b      	orrs	r3, r1
 800397e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800398a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	495c      	ldr	r1, [pc, #368]	@ (8003b04 <HAL_I2C_Init+0x274>)
 8003994:	428b      	cmp	r3, r1
 8003996:	d819      	bhi.n	80039cc <HAL_I2C_Init+0x13c>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e59      	subs	r1, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039a6:	1c59      	adds	r1, r3, #1
 80039a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039ac:	400b      	ands	r3, r1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_I2C_Init+0x138>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e59      	subs	r1, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c0:	3301      	adds	r3, #1
 80039c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c6:	e051      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 80039c8:	2304      	movs	r3, #4
 80039ca:	e04f      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d111      	bne.n	80039f8 <HAL_I2C_Init+0x168>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	440b      	add	r3, r1
 80039e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e012      	b.n	8003a1e <HAL_I2C_Init+0x18e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e58      	subs	r0, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	0099      	lsls	r1, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Init+0x196>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e022      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10e      	bne.n	8003a4c <HAL_I2C_Init+0x1bc>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1e58      	subs	r0, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	440b      	add	r3, r1
 8003a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4a:	e00f      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e58      	subs	r0, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	0099      	lsls	r1, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	6809      	ldr	r1, [r1, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6911      	ldr	r1, [r2, #16]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68d2      	ldr	r2, [r2, #12]
 8003aa6:	4311      	orrs	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	000186a0 	.word	0x000186a0
 8003b08:	001e847f 	.word	0x001e847f
 8003b0c:	003d08ff 	.word	0x003d08ff
 8003b10:	431bde83 	.word	0x431bde83
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	461a      	mov	r2, r3
 8003b24:	460b      	mov	r3, r1
 8003b26:	817b      	strh	r3, [r7, #10]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7fe fef8 	bl	8002920 <HAL_GetTick>
 8003b30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	f040 80e0 	bne.w	8003d00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2319      	movs	r3, #25
 8003b46:	2201      	movs	r2, #1
 8003b48:	4970      	ldr	r1, [pc, #448]	@ (8003d0c <HAL_I2C_Master_Transmit+0x1f4>)
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fe50 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
 8003b58:	e0d3      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_I2C_Master_Transmit+0x50>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0cc      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d007      	beq.n	8003b8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2221      	movs	r2, #33	@ 0x21
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	893a      	ldrh	r2, [r7, #8]
 8003bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a50      	ldr	r2, [pc, #320]	@ (8003d10 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bd0:	8979      	ldrh	r1, [r7, #10]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fc0a 	bl	80043f0 <I2C_MasterRequestWrite>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e08d      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bfc:	e066      	b.n	8003ccc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	6a39      	ldr	r1, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 ff0e 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06b      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d11b      	bne.n	8003ca0 <HAL_I2C_Master_Transmit+0x188>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	6a39      	ldr	r1, [r7, #32]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 ff05 	bl	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d107      	bne.n	8003cc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e01a      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d194      	bne.n	8003bfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	00100002 	.word	0x00100002
 8003d10:	ffff0000 	.word	0xffff0000

08003d14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	817b      	strh	r3, [r7, #10]
 8003d26:	460b      	mov	r3, r1
 8003d28:	813b      	strh	r3, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d2e:	f7fe fdf7 	bl	8002920 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	f040 80d9 	bne.w	8003ef4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	2319      	movs	r3, #25
 8003d48:	2201      	movs	r2, #1
 8003d4a:	496d      	ldr	r1, [pc, #436]	@ (8003f00 <HAL_I2C_Mem_Write+0x1ec>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fd4f 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0cc      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_I2C_Mem_Write+0x56>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0c5      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d007      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2221      	movs	r2, #33	@ 0x21
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2240      	movs	r2, #64	@ 0x40
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a4d      	ldr	r2, [pc, #308]	@ (8003f04 <HAL_I2C_Mem_Write+0x1f0>)
 8003dd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd2:	88f8      	ldrh	r0, [r7, #6]
 8003dd4:	893a      	ldrh	r2, [r7, #8]
 8003dd6:	8979      	ldrh	r1, [r7, #10]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4603      	mov	r3, r0
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fb86 	bl	80044f4 <I2C_RequestMemoryWrite>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d052      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e081      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fe14 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d107      	bne.n	8003e1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06b      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d11b      	bne.n	8003e94 <HAL_I2C_Mem_Write+0x180>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d017      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1aa      	bne.n	8003df2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fe07 	bl	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d107      	bne.n	8003ec4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e016      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	00100002 	.word	0x00100002
 8003f04:	ffff0000 	.word	0xffff0000

08003f08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08c      	sub	sp, #48	@ 0x30
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	817b      	strh	r3, [r7, #10]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	813b      	strh	r3, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f26:	f7fe fcfb 	bl	8002920 <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	f040 8250 	bne.w	80043da <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2319      	movs	r3, #25
 8003f40:	2201      	movs	r2, #1
 8003f42:	4982      	ldr	r1, [pc, #520]	@ (800414c <HAL_I2C_Mem_Read+0x244>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fc53 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
 8003f52:	e243      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Mem_Read+0x5a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e23c      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d007      	beq.n	8003f88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2222      	movs	r2, #34	@ 0x22
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2240      	movs	r2, #64	@ 0x40
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a62      	ldr	r2, [pc, #392]	@ (8004150 <HAL_I2C_Mem_Read+0x248>)
 8003fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fca:	88f8      	ldrh	r0, [r7, #6]
 8003fcc:	893a      	ldrh	r2, [r7, #8]
 8003fce:	8979      	ldrh	r1, [r7, #10]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4603      	mov	r3, r0
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fb20 	bl	8004620 <I2C_RequestMemoryRead>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1f8      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e1cc      	b.n	80043b4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401e:	2b01      	cmp	r3, #1
 8004020:	d11e      	bne.n	8004060 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004030:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004032:	b672      	cpsid	i
}
 8004034:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800405c:	b662      	cpsie	i
}
 800405e:	e035      	b.n	80040cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004064:	2b02      	cmp	r3, #2
 8004066:	d11e      	bne.n	80040a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004076:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004078:	b672      	cpsid	i
}
 800407a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040a2:	b662      	cpsie	i
}
 80040a4:	e012      	b.n	80040cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80040cc:	e172      	b.n	80043b4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	f200 811f 	bhi.w	8004316 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d123      	bne.n	8004128 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fd2d 	bl	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e173      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004126:	e145      	b.n	80043b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	2b02      	cmp	r3, #2
 800412e:	d152      	bne.n	80041d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004136:	2200      	movs	r2, #0
 8004138:	4906      	ldr	r1, [pc, #24]	@ (8004154 <HAL_I2C_Mem_Read+0x24c>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fb58 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e148      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
 800414a:	bf00      	nop
 800414c:	00100002 	.word	0x00100002
 8004150:	ffff0000 	.word	0xffff0000
 8004154:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004158:	b672      	cpsid	i
}
 800415a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800419e:	b662      	cpsie	i
}
 80041a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041d4:	e0ee      	b.n	80043b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041dc:	2200      	movs	r2, #0
 80041de:	4981      	ldr	r1, [pc, #516]	@ (80043e4 <HAL_I2C_Mem_Read+0x4dc>)
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fb05 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0f5      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004200:	b672      	cpsid	i
}
 8004202:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004236:	4b6c      	ldr	r3, [pc, #432]	@ (80043e8 <HAL_I2C_Mem_Read+0x4e0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	4a6b      	ldr	r2, [pc, #428]	@ (80043ec <HAL_I2C_Mem_Read+0x4e4>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	0a1a      	lsrs	r2, r3, #8
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	00da      	lsls	r2, r3, #3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	3b01      	subs	r3, #1
 8004254:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d118      	bne.n	800428e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800427e:	b662      	cpsie	i
}
 8004280:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0a6      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b04      	cmp	r3, #4
 800429a:	d1d9      	bne.n	8004250 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042de:	b662      	cpsie	i
}
 80042e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004314:	e04e      	b.n	80043b4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004318:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fc12 	bl	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e058      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d124      	bne.n	80043b4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	2b03      	cmp	r3, #3
 8004370:	d107      	bne.n	8004382 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004380:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f47f ae88 	bne.w	80040ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3728      	adds	r7, #40	@ 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	00010004 	.word	0x00010004
 80043e8:	20000004 	.word	0x20000004
 80043ec:	14f8b589 	.word	0x14f8b589

080043f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	607a      	str	r2, [r7, #4]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	460b      	mov	r3, r1
 80043fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d006      	beq.n	800441a <I2C_MasterRequestWrite+0x2a>
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d003      	beq.n	800441a <I2C_MasterRequestWrite+0x2a>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004418:	d108      	bne.n	800442c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e00b      	b.n	8004444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	2b12      	cmp	r3, #18
 8004432:	d107      	bne.n	8004444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9cd 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446a:	d103      	bne.n	8004474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e035      	b.n	80044e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004480:	d108      	bne.n	8004494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004482:	897b      	ldrh	r3, [r7, #10]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004490:	611a      	str	r2, [r3, #16]
 8004492:	e01b      	b.n	80044cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004494:	897b      	ldrh	r3, [r7, #10]
 8004496:	11db      	asrs	r3, r3, #7
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0306 	and.w	r3, r3, #6
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f063 030f 	orn	r3, r3, #15
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	490e      	ldr	r1, [pc, #56]	@ (80044ec <I2C_MasterRequestWrite+0xfc>)
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fa16 	bl	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e010      	b.n	80044e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4907      	ldr	r1, [pc, #28]	@ (80044f0 <I2C_MasterRequestWrite+0x100>)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fa06 	bl	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	00010008 	.word	0x00010008
 80044f0:	00010002 	.word	0x00010002

080044f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4603      	mov	r3, r0
 8004504:	817b      	strh	r3, [r7, #10]
 8004506:	460b      	mov	r3, r1
 8004508:	813b      	strh	r3, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800451c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	2200      	movs	r2, #0
 8004526:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f960 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004544:	d103      	bne.n	800454e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e05f      	b.n	8004612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	492d      	ldr	r1, [pc, #180]	@ (800461c <I2C_RequestMemoryWrite+0x128>)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f9bb 	bl	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e04c      	b.n	8004612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004590:	6a39      	ldr	r1, [r7, #32]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fa46 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d107      	bne.n	80045b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e02b      	b.n	8004612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d105      	bne.n	80045cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	611a      	str	r2, [r3, #16]
 80045ca:	e021      	b.n	8004610 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fa20 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e005      	b.n	8004612 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004606:	893b      	ldrh	r3, [r7, #8]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	00010002 	.word	0x00010002

08004620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	817b      	strh	r3, [r7, #10]
 8004632:	460b      	mov	r3, r1
 8004634:	813b      	strh	r3, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004648:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	2200      	movs	r2, #0
 8004662:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f8c2 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004680:	d103      	bne.n	800468a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0aa      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800468e:	897b      	ldrh	r3, [r7, #10]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800469c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	6a3a      	ldr	r2, [r7, #32]
 80046a2:	4952      	ldr	r1, [pc, #328]	@ (80047ec <I2C_RequestMemoryRead+0x1cc>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f91d 	bl	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e097      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	6a39      	ldr	r1, [r7, #32]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f9a8 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d107      	bne.n	80046f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e076      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]
 8004706:	e021      	b.n	800474c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004708:	893b      	ldrh	r3, [r7, #8]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	b29b      	uxth	r3, r3
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004718:	6a39      	ldr	r1, [r7, #32]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f982 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b04      	cmp	r3, #4
 800472c:	d107      	bne.n	800473e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800473c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e050      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004742:	893b      	ldrh	r3, [r7, #8]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474e:	6a39      	ldr	r1, [r7, #32]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f967 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	2b04      	cmp	r3, #4
 8004762:	d107      	bne.n	8004774 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004772:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e035      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004786:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2200      	movs	r2, #0
 8004790:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f82b 	bl	80047f0 <I2C_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ae:	d103      	bne.n	80047b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e013      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047bc:	897b      	ldrh	r3, [r7, #10]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	4906      	ldr	r1, [pc, #24]	@ (80047ec <I2C_RequestMemoryRead+0x1cc>)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f886 	bl	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	00010002 	.word	0x00010002

080047f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004800:	e048      	b.n	8004894 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d044      	beq.n	8004894 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fe f889 	bl	8002920 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d139      	bne.n	8004894 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10d      	bne.n	8004846 <I2C_WaitOnFlagUntilTimeout+0x56>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	43da      	mvns	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	e00c      	b.n	8004860 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	43da      	mvns	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	429a      	cmp	r2, r3
 8004864:	d116      	bne.n	8004894 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e023      	b.n	80048dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10d      	bne.n	80048ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	43da      	mvns	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	e00c      	b.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d093      	beq.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f2:	e071      	b.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004902:	d123      	bne.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004912:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800491c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	f043 0204 	orr.w	r2, r3, #4
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e067      	b.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004952:	d041      	beq.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004954:	f7fd ffe4 	bl	8002920 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d302      	bcc.n	800496a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d136      	bne.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	d10c      	bne.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	43da      	mvns	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4013      	ands	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	e00b      	b.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	43da      	mvns	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4013      	ands	r3, r2
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e021      	b.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10c      	bne.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	43da      	mvns	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e00b      	b.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f47f af6d 	bne.w	80048f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a30:	e034      	b.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f8e3 	bl	8004bfe <I2C_IsAcknowledgeFailed>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e034      	b.n	8004aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d028      	beq.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7fd ff69 	bl	8002920 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d11d      	bne.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6a:	2b80      	cmp	r3, #128	@ 0x80
 8004a6c:	d016      	beq.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e007      	b.n	8004aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa6:	2b80      	cmp	r3, #128	@ 0x80
 8004aa8:	d1c3      	bne.n	8004a32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac0:	e034      	b.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f89b 	bl	8004bfe <I2C_IsAcknowledgeFailed>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e034      	b.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d028      	beq.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ada:	f7fd ff21 	bl	8002920 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11d      	bne.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d016      	beq.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e007      	b.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d1c3      	bne.n	8004ac2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b50:	e049      	b.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d119      	bne.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0210 	mvn.w	r2, #16
 8004b68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e030      	b.n	8004bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b94:	f7fd fec4 	bl	8002920 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d302      	bcc.n	8004baa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11d      	bne.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d016      	beq.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e007      	b.n	8004bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf0:	2b40      	cmp	r3, #64	@ 0x40
 8004bf2:	d1ae      	bne.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c14:	d11b      	bne.n	8004c4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr
	...

08004c5c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004c60:	4b03      	ldr	r3, [pc, #12]	@ (8004c70 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	420e0020 	.word	0x420e0020

08004c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e272      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8087 	beq.w	8004da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c94:	4b92      	ldr	r3, [pc, #584]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d00c      	beq.n	8004cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ca0:	4b8f      	ldr	r3, [pc, #572]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d112      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x5e>
 8004cac:	4b8c      	ldr	r3, [pc, #560]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cba:	4b89      	ldr	r3, [pc, #548]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d06c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x12c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d168      	bne.n	8004da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e24c      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x76>
 8004cdc:	4b80      	ldr	r3, [pc, #512]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a7f      	ldr	r2, [pc, #508]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	e02e      	b.n	8004d48 <HAL_RCC_OscConfig+0xd4>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x98>
 8004cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a7a      	ldr	r2, [pc, #488]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b78      	ldr	r3, [pc, #480]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a77      	ldr	r2, [pc, #476]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e01d      	b.n	8004d48 <HAL_RCC_OscConfig+0xd4>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0xbc>
 8004d16:	4b72      	ldr	r3, [pc, #456]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a71      	ldr	r2, [pc, #452]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a6e      	ldr	r2, [pc, #440]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCC_OscConfig+0xd4>
 8004d30:	4b6b      	ldr	r3, [pc, #428]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a6a      	ldr	r2, [pc, #424]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b68      	ldr	r3, [pc, #416]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a67      	ldr	r2, [pc, #412]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d013      	beq.n	8004d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fd fde6 	bl	8002920 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d58:	f7fd fde2 	bl	8002920 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	@ 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e200      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0xe4>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fd fdd2 	bl	8002920 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fd fdce 	bl	8002920 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	@ 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e1ec      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d92:	4b53      	ldr	r3, [pc, #332]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x10c>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d063      	beq.n	8004e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dae:	4b4c      	ldr	r3, [pc, #304]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dba:	4b49      	ldr	r3, [pc, #292]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d11c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x18c>
 8004dc6:	4b46      	ldr	r3, [pc, #280]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d116      	bne.n	8004e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd2:	4b43      	ldr	r3, [pc, #268]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_RCC_OscConfig+0x176>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e1c0      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dea:	4b3d      	ldr	r3, [pc, #244]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4939      	ldr	r1, [pc, #228]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfe:	e03a      	b.n	8004e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d020      	beq.n	8004e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e08:	4b36      	ldr	r3, [pc, #216]	@ (8004ee4 <HAL_RCC_OscConfig+0x270>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fd fd87 	bl	8002920 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e16:	f7fd fd83 	bl	8002920 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e1a1      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e28:	4b2d      	ldr	r3, [pc, #180]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4927      	ldr	r1, [pc, #156]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	600b      	str	r3, [r1, #0]
 8004e48:	e015      	b.n	8004e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ee4 <HAL_RCC_OscConfig+0x270>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fd fd66 	bl	8002920 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e58:	f7fd fd62 	bl	8002920 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e180      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d03a      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d019      	beq.n	8004ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8a:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e90:	f7fd fd46 	bl	8002920 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e98:	f7fd fd42 	bl	8002920 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e160      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f000 face 	bl	8005458 <RCC_Delay>
 8004ebc:	e01c      	b.n	8004ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <HAL_RCC_OscConfig+0x274>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec4:	f7fd fd2c 	bl	8002920 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eca:	e00f      	b.n	8004eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ecc:	f7fd fd28 	bl	8002920 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d908      	bls.n	8004eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e146      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	42420000 	.word	0x42420000
 8004ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eec:	4b92      	ldr	r3, [pc, #584]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e9      	bne.n	8004ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80a6 	beq.w	8005052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10d      	bne.n	8004f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f16:	4b88      	ldr	r3, [pc, #544]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4a87      	ldr	r2, [pc, #540]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f20:	61d3      	str	r3, [r2, #28]
 8004f22:	4b85      	ldr	r3, [pc, #532]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f32:	4b82      	ldr	r3, [pc, #520]	@ (800513c <HAL_RCC_OscConfig+0x4c8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d118      	bne.n	8004f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800513c <HAL_RCC_OscConfig+0x4c8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a7e      	ldr	r2, [pc, #504]	@ (800513c <HAL_RCC_OscConfig+0x4c8>)
 8004f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4a:	f7fd fce9 	bl	8002920 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f52:	f7fd fce5 	bl	8002920 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b64      	cmp	r3, #100	@ 0x64
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e103      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f64:	4b75      	ldr	r3, [pc, #468]	@ (800513c <HAL_RCC_OscConfig+0x4c8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d106      	bne.n	8004f86 <HAL_RCC_OscConfig+0x312>
 8004f78:	4b6f      	ldr	r3, [pc, #444]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6213      	str	r3, [r2, #32]
 8004f84:	e02d      	b.n	8004fe2 <HAL_RCC_OscConfig+0x36e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x334>
 8004f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	4a69      	ldr	r2, [pc, #420]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	6213      	str	r3, [r2, #32]
 8004f9a:	4b67      	ldr	r3, [pc, #412]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4a66      	ldr	r2, [pc, #408]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	6213      	str	r3, [r2, #32]
 8004fa6:	e01c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x36e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b05      	cmp	r3, #5
 8004fae:	d10c      	bne.n	8004fca <HAL_RCC_OscConfig+0x356>
 8004fb0:	4b61      	ldr	r3, [pc, #388]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	4a60      	ldr	r2, [pc, #384]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	f043 0304 	orr.w	r3, r3, #4
 8004fba:	6213      	str	r3, [r2, #32]
 8004fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6213      	str	r3, [r2, #32]
 8004fc8:	e00b      	b.n	8004fe2 <HAL_RCC_OscConfig+0x36e>
 8004fca:	4b5b      	ldr	r3, [pc, #364]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4a5a      	ldr	r2, [pc, #360]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	6213      	str	r3, [r2, #32]
 8004fd6:	4b58      	ldr	r3, [pc, #352]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a57      	ldr	r2, [pc, #348]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	f023 0304 	bic.w	r3, r3, #4
 8004fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d015      	beq.n	8005016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fea:	f7fd fc99 	bl	8002920 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff2:	f7fd fc95 	bl	8002920 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e0b1      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005008:	4b4b      	ldr	r3, [pc, #300]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0ee      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x37e>
 8005014:	e014      	b.n	8005040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005016:	f7fd fc83 	bl	8002920 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501c:	e00a      	b.n	8005034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501e:	f7fd fc7f 	bl	8002920 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e09b      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005034:	4b40      	ldr	r3, [pc, #256]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ee      	bne.n	800501e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d105      	bne.n	8005052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005046:	4b3c      	ldr	r3, [pc, #240]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4a3b      	ldr	r2, [pc, #236]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8087 	beq.w	800516a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800505c:	4b36      	ldr	r3, [pc, #216]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	d061      	beq.n	800512c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d146      	bne.n	80050fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005070:	4b33      	ldr	r3, [pc, #204]	@ (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005076:	f7fd fc53 	bl	8002920 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507e:	f7fd fc4f 	bl	8002920 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e06d      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005090:	4b29      	ldr	r3, [pc, #164]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a4:	d108      	bne.n	80050b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050a6:	4b24      	ldr	r3, [pc, #144]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4921      	ldr	r1, [pc, #132]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a19      	ldr	r1, [r3, #32]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	430b      	orrs	r3, r1
 80050ca:	491b      	ldr	r1, [pc, #108]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <HAL_RCC_OscConfig+0x4cc>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d6:	f7fd fc23 	bl	8002920 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050de:	f7fd fc1f 	bl	8002920 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050f0:	4b11      	ldr	r3, [pc, #68]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x46a>
 80050fc:	e035      	b.n	800516a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fe:	4b10      	ldr	r3, [pc, #64]	@ (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005104:	f7fd fc0c 	bl	8002920 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510c:	f7fd fc08 	bl	8002920 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e026      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <HAL_RCC_OscConfig+0x4c4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x498>
 800512a:	e01e      	b.n	800516a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e019      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
 8005138:	40021000 	.word	0x40021000
 800513c:	40007000 	.word	0x40007000
 8005140:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005144:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <HAL_RCC_OscConfig+0x500>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	429a      	cmp	r2, r3
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000

08005178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0d0      	b.n	800532e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	4b6a      	ldr	r3, [pc, #424]	@ (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d910      	bls.n	80051bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b67      	ldr	r3, [pc, #412]	@ (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 0207 	bic.w	r2, r3, #7
 80051a2:	4965      	ldr	r1, [pc, #404]	@ (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b63      	ldr	r3, [pc, #396]	@ (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0b8      	b.n	800532e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d020      	beq.n	800520a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d4:	4b59      	ldr	r3, [pc, #356]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a58      	ldr	r2, [pc, #352]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051ec:	4b53      	ldr	r3, [pc, #332]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4a52      	ldr	r2, [pc, #328]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80051f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80051f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f8:	4b50      	ldr	r3, [pc, #320]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	494d      	ldr	r1, [pc, #308]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d040      	beq.n	8005298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d107      	bne.n	800522e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521e:	4b47      	ldr	r3, [pc, #284]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d115      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e07f      	b.n	800532e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005236:	4b41      	ldr	r3, [pc, #260]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e073      	b.n	800532e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005246:	4b3d      	ldr	r3, [pc, #244]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e06b      	b.n	800532e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005256:	4b39      	ldr	r3, [pc, #228]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f023 0203 	bic.w	r2, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	4936      	ldr	r1, [pc, #216]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005268:	f7fd fb5a 	bl	8002920 <HAL_GetTick>
 800526c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526e:	e00a      	b.n	8005286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005270:	f7fd fb56 	bl	8002920 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e053      	b.n	800532e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005286:	4b2d      	ldr	r3, [pc, #180]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f003 020c 	and.w	r2, r3, #12
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	429a      	cmp	r2, r3
 8005296:	d1eb      	bne.n	8005270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005298:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d210      	bcs.n	80052c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 0207 	bic.w	r2, r3, #7
 80052ae:	4922      	ldr	r1, [pc, #136]	@ (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b20      	ldr	r3, [pc, #128]	@ (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e032      	b.n	800532e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4916      	ldr	r1, [pc, #88]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052f2:	4b12      	ldr	r3, [pc, #72]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	490e      	ldr	r1, [pc, #56]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005306:	f000 f821 	bl	800534c <HAL_RCC_GetSysClockFreq>
 800530a:	4602      	mov	r2, r0
 800530c:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	490a      	ldr	r1, [pc, #40]	@ (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 8005318:	5ccb      	ldrb	r3, [r1, r3]
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	4a09      	ldr	r2, [pc, #36]	@ (8005344 <HAL_RCC_ClockConfig+0x1cc>)
 8005320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005322:	4b09      	ldr	r3, [pc, #36]	@ (8005348 <HAL_RCC_ClockConfig+0x1d0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fab8 	bl	800289c <HAL_InitTick>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40022000 	.word	0x40022000
 800533c:	40021000 	.word	0x40021000
 8005340:	08009134 	.word	0x08009134
 8005344:	20000004 	.word	0x20000004
 8005348:	20000008 	.word	0x20000008

0800534c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005366:	4b1e      	ldr	r3, [pc, #120]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b04      	cmp	r3, #4
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x30>
 8005376:	2b08      	cmp	r3, #8
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x36>
 800537a:	e027      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800537c:	4b19      	ldr	r3, [pc, #100]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800537e:	613b      	str	r3, [r7, #16]
      break;
 8005380:	e027      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0c9b      	lsrs	r3, r3, #18
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	4a17      	ldr	r2, [pc, #92]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800538c:	5cd3      	ldrb	r3, [r2, r3]
 800538e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d010      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800539a:	4b11      	ldr	r3, [pc, #68]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	0c5b      	lsrs	r3, r3, #17
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	4a11      	ldr	r2, [pc, #68]	@ (80053ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80053a6:	5cd3      	ldrb	r3, [r2, r3]
 80053a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a0d      	ldr	r2, [pc, #52]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80053ae:	fb03 f202 	mul.w	r2, r3, r2
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e004      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a0c      	ldr	r2, [pc, #48]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	613b      	str	r3, [r7, #16]
      break;
 80053ca:	e002      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053cc:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80053ce:	613b      	str	r3, [r7, #16]
      break;
 80053d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053d2:	693b      	ldr	r3, [r7, #16]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000
 80053e4:	007a1200 	.word	0x007a1200
 80053e8:	0800914c 	.word	0x0800914c
 80053ec:	0800915c 	.word	0x0800915c
 80053f0:	003d0900 	.word	0x003d0900

080053f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f8:	4b02      	ldr	r3, [pc, #8]	@ (8005404 <HAL_RCC_GetHCLKFreq+0x10>)
 80053fa:	681b      	ldr	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	20000004 	.word	0x20000004

08005408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800540c:	f7ff fff2 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4903      	ldr	r1, [pc, #12]	@ (800542c <HAL_RCC_GetPCLK1Freq+0x24>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40021000 	.word	0x40021000
 800542c:	08009144 	.word	0x08009144

08005430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005434:	f7ff ffde 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 8005438:	4602      	mov	r2, r0
 800543a:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	0adb      	lsrs	r3, r3, #11
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	4903      	ldr	r1, [pc, #12]	@ (8005454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005446:	5ccb      	ldrb	r3, [r1, r3]
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021000 	.word	0x40021000
 8005454:	08009144 	.word	0x08009144

08005458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005460:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <RCC_Delay+0x34>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0a      	ldr	r2, [pc, #40]	@ (8005490 <RCC_Delay+0x38>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	0a5b      	lsrs	r3, r3, #9
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005474:	bf00      	nop
  }
  while (Delay --);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	60fa      	str	r2, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f9      	bne.n	8005474 <RCC_Delay+0x1c>
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	20000004 	.word	0x20000004
 8005490:	10624dd3 	.word	0x10624dd3

08005494 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d07d      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054b0:	2300      	movs	r3, #0
 80054b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b4:	4b4f      	ldr	r3, [pc, #316]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10d      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c0:	4b4c      	ldr	r3, [pc, #304]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	4a4b      	ldr	r2, [pc, #300]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ca:	61d3      	str	r3, [r2, #28]
 80054cc:	4b49      	ldr	r3, [pc, #292]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d8:	2301      	movs	r3, #1
 80054da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054dc:	4b46      	ldr	r3, [pc, #280]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d118      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e8:	4b43      	ldr	r3, [pc, #268]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a42      	ldr	r2, [pc, #264]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f4:	f7fd fa14 	bl	8002920 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fa:	e008      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fc:	f7fd fa10 	bl	8002920 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	@ 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e06d      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	4b3a      	ldr	r3, [pc, #232]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800551a:	4b36      	ldr	r3, [pc, #216]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005522:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d02e      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d027      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005538:	4b2e      	ldr	r3, [pc, #184]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005540:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005542:	4b2e      	ldr	r3, [pc, #184]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005548:	4b2c      	ldr	r3, [pc, #176]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800554e:	4a29      	ldr	r2, [pc, #164]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d014      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555e:	f7fd f9df 	bl	8002920 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005564:	e00a      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005566:	f7fd f9db 	bl	8002920 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005574:	4293      	cmp	r3, r2
 8005576:	d901      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e036      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557c:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0ee      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005588:	4b1a      	ldr	r3, [pc, #104]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4917      	ldr	r1, [pc, #92]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005596:	4313      	orrs	r3, r2
 8005598:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d105      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a0:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	4a13      	ldr	r2, [pc, #76]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055b8:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	490b      	ldr	r1, [pc, #44]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d6:	4b07      	ldr	r3, [pc, #28]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	4904      	ldr	r1, [pc, #16]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40007000 	.word	0x40007000
 80055fc:	42420440 	.word	0x42420440

08005600 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	2300      	movs	r3, #0
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	2300      	movs	r3, #0
 800561a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b10      	cmp	r3, #16
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b10      	cmp	r3, #16
 8005626:	f200 808a 	bhi.w	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d045      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d075      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005636:	e082      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005638:	4b46      	ldr	r3, [pc, #280]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800563e:	4b45      	ldr	r3, [pc, #276]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d07b      	beq.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	0c9b      	lsrs	r3, r3, #18
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4a41      	ldr	r2, [pc, #260]	@ (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005654:	5cd3      	ldrb	r3, [r2, r3]
 8005656:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d015      	beq.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005662:	4b3c      	ldr	r3, [pc, #240]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	0c5b      	lsrs	r3, r3, #17
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	4a3b      	ldr	r2, [pc, #236]	@ (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800566e:	5cd3      	ldrb	r3, [r2, r3]
 8005670:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800567c:	4a38      	ldr	r2, [pc, #224]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	fbb2 f2f3 	udiv	r2, r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	e004      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4a34      	ldr	r2, [pc, #208]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005698:	4b2e      	ldr	r3, [pc, #184]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056a4:	d102      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	61bb      	str	r3, [r7, #24]
      break;
 80056aa:	e04a      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]
      break;
 80056ba:	e042      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80056bc:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056cc:	d108      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80056d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	e01f      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ea:	d109      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80056ec:	4b19      	ldr	r3, [pc, #100]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80056f8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e00f      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800570a:	d11c      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800570c:	4b11      	ldr	r3, [pc, #68]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d016      	beq.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005718:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800571c:	61bb      	str	r3, [r7, #24]
      break;
 800571e:	e012      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005720:	e011      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005722:	f7ff fe85 	bl	8005430 <HAL_RCC_GetPCLK2Freq>
 8005726:	4602      	mov	r2, r0
 8005728:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	0b9b      	lsrs	r3, r3, #14
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	3301      	adds	r3, #1
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	fbb2 f3f3 	udiv	r3, r2, r3
 800573a:	61bb      	str	r3, [r7, #24]
      break;
 800573c:	e004      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005746:	bf00      	nop
    }
  }
  return (frequency);
 8005748:	69bb      	ldr	r3, [r7, #24]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	08009160 	.word	0x08009160
 800575c:	08009170 	.word	0x08009170
 8005760:	007a1200 	.word	0x007a1200
 8005764:	003d0900 	.word	0x003d0900
 8005768:	aaaaaaab 	.word	0xaaaaaaab

0800576c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e07a      	b.n	8005878 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7c5b      	ldrb	r3, [r3, #17]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc fe16 	bl	80023c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9e0 	bl	8005b64 <HAL_RTC_WaitForSynchro>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2204      	movs	r2, #4
 80057ae:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e061      	b.n	8005878 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fa99 	bl	8005cec <RTC_EnterInitMode>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2204      	movs	r2, #4
 80057c4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e056      	b.n	8005878 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0207 	bic.w	r2, r2, #7
 80057d8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80057e2:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <HAL_RTC_Init+0x114>)
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	4a26      	ldr	r2, [pc, #152]	@ (8005880 <HAL_RTC_Init+0x114>)
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80057ee:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <HAL_RTC_Init+0x114>)
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4921      	ldr	r1, [pc, #132]	@ (8005880 <HAL_RTC_Init+0x114>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d003      	beq.n	8005812 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	e00e      	b.n	8005830 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005812:	2001      	movs	r0, #1
 8005814:	f7ff fef4 	bl	8005600 <HAL_RCCEx_GetPeriphCLKFreq>
 8005818:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2204      	movs	r2, #4
 8005824:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e026      	b.n	8005878 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3b01      	subs	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	0c1a      	lsrs	r2, r3, #16
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f002 020f 	and.w	r2, r2, #15
 800583c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	b292      	uxth	r2, r2
 8005846:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa77 	bl	8005d3c <RTC_ExitInitMode>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2204      	movs	r2, #4
 8005858:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e00c      	b.n	8005878 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005876:	2300      	movs	r3, #0
  }
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40006c00 	.word	0x40006c00

08005884 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_RTC_SetTime+0x20>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e080      	b.n	80059aa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	7c1b      	ldrb	r3, [r3, #16]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_RTC_SetTime+0x30>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e07a      	b.n	80059aa <HAL_RTC_SetTime+0x126>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2202      	movs	r2, #2
 80058be:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d113      	bne.n	80058ee <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80058d0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	4619      	mov	r1, r3
 80058da:	460b      	mov	r3, r1
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	1a5b      	subs	r3, r3, r1
 80058e0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80058e2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80058e8:	4413      	add	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	e01e      	b.n	800592c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fa67 	bl	8005dc6 <RTC_Bcd2ToByte>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005900:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fa5c 	bl	8005dc6 <RTC_Bcd2ToByte>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	4613      	mov	r3, r2
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800591a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	789b      	ldrb	r3, [r3, #2]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fa50 	bl	8005dc6 <RTC_Bcd2ToByte>
 8005926:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005928:	4423      	add	r3, r4
 800592a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800592c:	6979      	ldr	r1, [r7, #20]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f975 	bl	8005c1e <RTC_WriteTimeCounter>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2204      	movs	r2, #4
 800593e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e02f      	b.n	80059aa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0205 	bic.w	r2, r2, #5
 8005958:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f986 	bl	8005c6c <RTC_ReadAlarmCounter>
 8005960:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d018      	beq.n	800599c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	429a      	cmp	r2, r3
 8005970:	d214      	bcs.n	800599c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005978:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800597c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800597e:	6939      	ldr	r1, [r7, #16]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f98c 	bl	8005c9e <RTC_WriteAlarmCounter>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2204      	movs	r2, #4
 8005990:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e006      	b.n	80059aa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80059a8:	2300      	movs	r3, #0
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}
	...

080059b4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	2300      	movs	r3, #0
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_RTC_GetTime+0x28>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0b5      	b.n	8005b4c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e0ac      	b.n	8005b4c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f8e3 	bl	8005bbe <RTC_ReadTimeCounter>
 80059f8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	4a55      	ldr	r2, [pc, #340]	@ (8005b54 <HAL_RTC_GetTime+0x1a0>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	0adb      	lsrs	r3, r3, #11
 8005a04:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4b52      	ldr	r3, [pc, #328]	@ (8005b54 <HAL_RTC_GetTime+0x1a0>)
 8005a0a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a0e:	0adb      	lsrs	r3, r3, #11
 8005a10:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	4a4f      	ldr	r2, [pc, #316]	@ (8005b58 <HAL_RTC_GetTime+0x1a4>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b54 <HAL_RTC_GetTime+0x1a0>)
 8005a2c:	fba2 1203 	umull	r1, r2, r2, r3
 8005a30:	0ad2      	lsrs	r2, r2, #11
 8005a32:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005a36:	fb01 f202 	mul.w	r2, r1, r2
 8005a3a:	1a9a      	subs	r2, r3, r2
 8005a3c:	4b46      	ldr	r3, [pc, #280]	@ (8005b58 <HAL_RTC_GetTime+0x1a4>)
 8005a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a42:	0959      	lsrs	r1, r3, #5
 8005a44:	460b      	mov	r3, r1
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	1a5b      	subs	r3, r3, r1
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	1ad1      	subs	r1, r2, r3
 8005a4e:	b2ca      	uxtb	r2, r1
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b17      	cmp	r3, #23
 8005a58:	d955      	bls.n	8005b06 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b5c <HAL_RTC_GetTime+0x1a8>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	4b3c      	ldr	r3, [pc, #240]	@ (8005b5c <HAL_RTC_GetTime+0x1a8>)
 8005a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a6e:	091a      	lsrs	r2, r3, #4
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	1aca      	subs	r2, r1, r3
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f8f3 	bl	8005c6c <RTC_ReadAlarmCounter>
 8005a86:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RTC_GetTime+0xee>
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d904      	bls.n	8005aa2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e002      	b.n	8005aa8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8005b60 <HAL_RTC_GetTime+0x1ac>)
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005ab6:	69b9      	ldr	r1, [r7, #24]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f8b0 	bl	8005c1e <RTC_WriteTimeCounter>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e041      	b.n	8005b4c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d00c      	beq.n	8005aea <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ad8:	69f9      	ldr	r1, [r7, #28]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f8df 	bl	8005c9e <RTC_WriteAlarmCounter>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e030      	b.n	8005b4c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005aea:	69f9      	ldr	r1, [r7, #28]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f8d6 	bl	8005c9e <RTC_WriteAlarmCounter>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e027      	b.n	8005b4c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005afc:	6979      	ldr	r1, [r7, #20]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f97e 	bl	8005e00 <RTC_DateUpdate>
 8005b04:	e003      	b.n	8005b0e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01a      	beq.n	8005b4a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 f937 	bl	8005d8c <RTC_ByteToBcd2>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	461a      	mov	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f92e 	bl	8005d8c <RTC_ByteToBcd2>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	789b      	ldrb	r3, [r3, #2]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f925 	bl	8005d8c <RTC_ByteToBcd2>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3720      	adds	r7, #32
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	91a2b3c5 	.word	0x91a2b3c5
 8005b58:	88888889 	.word	0x88888889
 8005b5c:	aaaaaaab 	.word	0xaaaaaaab
 8005b60:	00015180 	.word	0x00015180

08005b64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e01d      	b.n	8005bb6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0208 	bic.w	r2, r2, #8
 8005b88:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005b8a:	f7fc fec9 	bl	8002920 <HAL_GetTick>
 8005b8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005b90:	e009      	b.n	8005ba6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b92:	f7fc fec5 	bl	8002920 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e007      	b.n	8005bb6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ee      	beq.n	8005b92 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	827b      	strh	r3, [r7, #18]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	823b      	strh	r3, [r7, #16]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005bee:	8a7a      	ldrh	r2, [r7, #18]
 8005bf0:	8a3b      	ldrh	r3, [r7, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d008      	beq.n	8005c08 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005bf6:	8a3b      	ldrh	r3, [r7, #16]
 8005bf8:	041a      	lsls	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e004      	b.n	8005c12 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005c08:	8a7b      	ldrh	r3, [r7, #18]
 8005c0a:	041a      	lsls	r2, r3, #16
 8005c0c:	89fb      	ldrh	r3, [r7, #14]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005c12:	697b      	ldr	r3, [r7, #20]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f85d 	bl	8005cec <RTC_EnterInitMode>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
 8005c3c:	e011      	b.n	8005c62 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	0c12      	lsrs	r2, r2, #16
 8005c46:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f872 	bl	8005d3c <RTC_ExitInitMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	81fb      	strh	r3, [r7, #14]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005c8c:	89fb      	ldrh	r3, [r7, #14]
 8005c8e:	041a      	lsls	r2, r3, #16
 8005c90:	89bb      	ldrh	r3, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f81d 	bl	8005cec <RTC_EnterInitMode>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
 8005cbc:	e011      	b.n	8005ce2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	0c12      	lsrs	r2, r2, #16
 8005cc6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	b292      	uxth	r2, r2
 8005cd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f832 	bl	8005d3c <RTC_ExitInitMode>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005cf8:	f7fc fe12 	bl	8002920 <HAL_GetTick>
 8005cfc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005cfe:	e009      	b.n	8005d14 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d00:	f7fc fe0e 	bl	8002920 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d0e:	d901      	bls.n	8005d14 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e00f      	b.n	8005d34 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0ee      	beq.n	8005d00 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0210 	orr.w	r2, r2, #16
 8005d30:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0210 	bic.w	r2, r2, #16
 8005d56:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005d58:	f7fc fde2 	bl	8002920 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005d5e:	e009      	b.n	8005d74 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d60:	f7fc fdde 	bl	8002920 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d6e:	d901      	bls.n	8005d74 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e007      	b.n	8005d84 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0ee      	beq.n	8005d60 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	4603      	mov	r3, r0
 8005d94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005d9a:	e005      	b.n	8005da8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	3b0a      	subs	r3, #10
 8005da6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	d8f6      	bhi.n	8005d9c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	b2db      	uxtb	r3, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	4603      	mov	r3, r0
 8005dce:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	091b      	lsrs	r3, r3, #4
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	b2db      	uxtb	r3, r3
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr

08005e00 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	7bdb      	ldrb	r3, [r3, #15]
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	7b5b      	ldrb	r3, [r3, #13]
 8005e24:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	7b9b      	ldrb	r3, [r3, #14]
 8005e2a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	e06f      	b.n	8005f12 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d011      	beq.n	8005e5c <RTC_DateUpdate+0x5c>
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d00e      	beq.n	8005e5c <RTC_DateUpdate+0x5c>
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b05      	cmp	r3, #5
 8005e42:	d00b      	beq.n	8005e5c <RTC_DateUpdate+0x5c>
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b07      	cmp	r3, #7
 8005e48:	d008      	beq.n	8005e5c <RTC_DateUpdate+0x5c>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d005      	beq.n	8005e5c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b0a      	cmp	r3, #10
 8005e54:	d002      	beq.n	8005e5c <RTC_DateUpdate+0x5c>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b0c      	cmp	r3, #12
 8005e5a:	d117      	bne.n	8005e8c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b1e      	cmp	r3, #30
 8005e60:	d803      	bhi.n	8005e6a <RTC_DateUpdate+0x6a>
      {
        day++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005e68:	e050      	b.n	8005f0c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b0c      	cmp	r3, #12
 8005e6e:	d005      	beq.n	8005e7c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3301      	adds	r3, #1
 8005e74:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005e76:	2301      	movs	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005e7a:	e047      	b.n	8005f0c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005e80:	2301      	movs	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
          year++;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3301      	adds	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005e8a:	e03f      	b.n	8005f0c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d008      	beq.n	8005ea4 <RTC_DateUpdate+0xa4>
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b06      	cmp	r3, #6
 8005e96:	d005      	beq.n	8005ea4 <RTC_DateUpdate+0xa4>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b09      	cmp	r3, #9
 8005e9c:	d002      	beq.n	8005ea4 <RTC_DateUpdate+0xa4>
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b0b      	cmp	r3, #11
 8005ea2:	d10c      	bne.n	8005ebe <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b1d      	cmp	r3, #29
 8005ea8:	d803      	bhi.n	8005eb2 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005eb0:	e02c      	b.n	8005f0c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005ebc:	e026      	b.n	8005f0c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d123      	bne.n	8005f0c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b1b      	cmp	r3, #27
 8005ec8:	d803      	bhi.n	8005ed2 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e01c      	b.n	8005f0c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b1c      	cmp	r3, #28
 8005ed6:	d111      	bne.n	8005efc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 f839 	bl	8005f54 <RTC_IsLeapYear>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3301      	adds	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e00d      	b.n	8005f0c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	e007      	b.n	8005f0c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b1d      	cmp	r3, #29
 8005f00:	d104      	bne.n	8005f0c <RTC_DateUpdate+0x10c>
      {
        month++;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3301      	adds	r3, #1
 8005f06:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d38b      	bcc.n	8005e32 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6978      	ldr	r0, [r7, #20]
 8005f3e:	f000 f83b 	bl	8005fb8 <RTC_WeekDayNum>
 8005f42:	4603      	mov	r3, r0
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	731a      	strb	r2, [r3, #12]
}
 8005f4a:	bf00      	nop
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e01d      	b.n	8005faa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	4a10      	ldr	r2, [pc, #64]	@ (8005fb4 <RTC_IsLeapYear+0x60>)
 8005f72:	fba2 1203 	umull	r1, r2, r2, r3
 8005f76:	0952      	lsrs	r2, r2, #5
 8005f78:	2164      	movs	r1, #100	@ 0x64
 8005f7a:	fb01 f202 	mul.w	r2, r1, r2
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e00f      	b.n	8005faa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	4a09      	ldr	r2, [pc, #36]	@ (8005fb4 <RTC_IsLeapYear+0x60>)
 8005f8e:	fba2 1203 	umull	r1, r2, r2, r3
 8005f92:	09d2      	lsrs	r2, r2, #7
 8005f94:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005f98:	fb01 f202 	mul.w	r2, r1, r2
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005fa8:	2300      	movs	r3, #0
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	51eb851f 	.word	0x51eb851f

08005fb8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005fd6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d82d      	bhi.n	800603a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	4413      	add	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	4a2c      	ldr	r2, [pc, #176]	@ (800609c <RTC_WeekDayNum+0xe4>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	085a      	lsrs	r2, r3, #1
 8005ff2:	78bb      	ldrb	r3, [r7, #2]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	441a      	add	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	089b      	lsrs	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	3b01      	subs	r3, #1
 8006006:	4926      	ldr	r1, [pc, #152]	@ (80060a0 <RTC_WeekDayNum+0xe8>)
 8006008:	fba1 1303 	umull	r1, r3, r1, r3
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	3b01      	subs	r3, #1
 8006014:	4922      	ldr	r1, [pc, #136]	@ (80060a0 <RTC_WeekDayNum+0xe8>)
 8006016:	fba1 1303 	umull	r1, r3, r1, r3
 800601a:	09db      	lsrs	r3, r3, #7
 800601c:	4413      	add	r3, r2
 800601e:	1d1a      	adds	r2, r3, #4
 8006020:	4b20      	ldr	r3, [pc, #128]	@ (80060a4 <RTC_WeekDayNum+0xec>)
 8006022:	fba3 1302 	umull	r1, r3, r3, r2
 8006026:	1ad1      	subs	r1, r2, r3
 8006028:	0849      	lsrs	r1, r1, #1
 800602a:	440b      	add	r3, r1
 800602c:	0899      	lsrs	r1, r3, #2
 800602e:	460b      	mov	r3, r1
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	1a5b      	subs	r3, r3, r1
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e029      	b.n	800608e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	4613      	mov	r3, r2
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4413      	add	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	4a15      	ldr	r2, [pc, #84]	@ (800609c <RTC_WeekDayNum+0xe4>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	085a      	lsrs	r2, r3, #1
 800604e:	78bb      	ldrb	r3, [r7, #2]
 8006050:	441a      	add	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	441a      	add	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	089b      	lsrs	r3, r3, #2
 800605a:	441a      	add	r2, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4910      	ldr	r1, [pc, #64]	@ (80060a0 <RTC_WeekDayNum+0xe8>)
 8006060:	fba1 1303 	umull	r1, r3, r1, r3
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	490d      	ldr	r1, [pc, #52]	@ (80060a0 <RTC_WeekDayNum+0xe8>)
 800606c:	fba1 1303 	umull	r1, r3, r1, r3
 8006070:	09db      	lsrs	r3, r3, #7
 8006072:	4413      	add	r3, r2
 8006074:	1c9a      	adds	r2, r3, #2
 8006076:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <RTC_WeekDayNum+0xec>)
 8006078:	fba3 1302 	umull	r1, r3, r3, r2
 800607c:	1ad1      	subs	r1, r2, r3
 800607e:	0849      	lsrs	r1, r1, #1
 8006080:	440b      	add	r3, r1
 8006082:	0899      	lsrs	r1, r3, #2
 8006084:	460b      	mov	r3, r1
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	1a5b      	subs	r3, r3, r1
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	b2db      	uxtb	r3, r3
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr
 800609c:	38e38e39 	.word	0x38e38e39
 80060a0:	51eb851f 	.word	0x51eb851f
 80060a4:	24924925 	.word	0x24924925

080060a8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80060b8:	4b07      	ldr	r3, [pc, #28]	@ (80060d8 <HAL_RTCEx_BKUPWrite+0x30>)
 80060ba:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4413      	add	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	b292      	uxth	r2, r2
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr
 80060d8:	40006c00 	.word	0x40006c00

080060dc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80060ee:	4b08      	ldr	r3, [pc, #32]	@ (8006110 <HAL_RTCEx_BKUPRead+0x34>)
 80060f0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8006104:	68bb      	ldr	r3, [r7, #8]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr
 8006110:	40006c00 	.word	0x40006c00

08006114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e041      	b.n	80061aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fc f966 	bl	800240c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3304      	adds	r3, #4
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f000 fa8a 	bl	800666c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e03a      	b.n	8006242 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a18      	ldr	r2, [pc, #96]	@ (800624c <HAL_TIM_Base_Start_IT+0x98>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00e      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x58>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f6:	d009      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x58>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a14      	ldr	r2, [pc, #80]	@ (8006250 <HAL_TIM_Base_Start_IT+0x9c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x58>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a13      	ldr	r2, [pc, #76]	@ (8006254 <HAL_TIM_Base_Start_IT+0xa0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d111      	bne.n	8006230 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b06      	cmp	r3, #6
 800621c:	d010      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622e:	e007      	b.n	8006240 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800

08006258 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a1a      	ldr	r2, [r3, #32]
 8006276:	f241 1311 	movw	r3, #4369	@ 0x1111
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10f      	bne.n	80062a0 <HAL_TIM_Base_Stop_IT+0x48>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	f240 4344 	movw	r3, #1092	@ 0x444
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d107      	bne.n	80062a0 <HAL_TIM_Base_Stop_IT+0x48>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d020      	beq.n	8006318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01b      	beq.n	8006318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0202 	mvn.w	r2, #2
 80062e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f998 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 8006304:	e005      	b.n	8006312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f98b 	bl	8006622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f99a 	bl	8006646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	d020      	beq.n	8006364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01b      	beq.n	8006364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0204 	mvn.w	r2, #4
 8006334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f972 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 8006350:	e005      	b.n	800635e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f965 	bl	8006622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f974 	bl	8006646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d020      	beq.n	80063b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0208 	mvn.w	r2, #8
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2204      	movs	r2, #4
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f94c 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f93f 	bl	8006622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f94e 	bl	8006646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d020      	beq.n	80063fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01b      	beq.n	80063fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0210 	mvn.w	r2, #16
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2208      	movs	r2, #8
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f926 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f919 	bl	8006622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f928 	bl	8006646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0201 	mvn.w	r2, #1
 8006418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fa ff1e 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800643c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa7f 	bl	8006942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8f8 	bl	8006658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0220 	mvn.w	r2, #32
 8006484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fa52 	bl	8006930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_ConfigClockSource+0x1c>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e0b4      	b.n	800661a <HAL_TIM_ConfigClockSource+0x186>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e8:	d03e      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0xd4>
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ee:	f200 8087 	bhi.w	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f6:	f000 8086 	beq.w	8006606 <HAL_TIM_ConfigClockSource+0x172>
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064fe:	d87f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006500:	2b70      	cmp	r3, #112	@ 0x70
 8006502:	d01a      	beq.n	800653a <HAL_TIM_ConfigClockSource+0xa6>
 8006504:	2b70      	cmp	r3, #112	@ 0x70
 8006506:	d87b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006508:	2b60      	cmp	r3, #96	@ 0x60
 800650a:	d050      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x11a>
 800650c:	2b60      	cmp	r3, #96	@ 0x60
 800650e:	d877      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006510:	2b50      	cmp	r3, #80	@ 0x50
 8006512:	d03c      	beq.n	800658e <HAL_TIM_ConfigClockSource+0xfa>
 8006514:	2b50      	cmp	r3, #80	@ 0x50
 8006516:	d873      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d058      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x13a>
 800651c:	2b40      	cmp	r3, #64	@ 0x40
 800651e:	d86f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006520:	2b30      	cmp	r3, #48	@ 0x30
 8006522:	d064      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15a>
 8006524:	2b30      	cmp	r3, #48	@ 0x30
 8006526:	d86b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d060      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15a>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d867      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d05c      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15a>
 8006534:	2b10      	cmp	r3, #16
 8006536:	d05a      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15a>
 8006538:	e062      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800654a:	f000 f974 	bl	8006836 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800655c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	609a      	str	r2, [r3, #8]
      break;
 8006566:	e04f      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006578:	f000 f95d 	bl	8006836 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800658a:	609a      	str	r2, [r3, #8]
      break;
 800658c:	e03c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	461a      	mov	r2, r3
 800659c:	f000 f8d4 	bl	8006748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2150      	movs	r1, #80	@ 0x50
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f92b 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e02c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 f8f2 	bl	80067a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2160      	movs	r1, #96	@ 0x60
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f91b 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 80065cc:	e01c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 f8b4 	bl	8006748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2140      	movs	r1, #64	@ 0x40
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f90b 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 80065ec:	e00c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 f902 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 80065fe:	e003      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
      break;
 8006604:	e000      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
	...

0800666c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a2f      	ldr	r2, [pc, #188]	@ (800673c <TIM_Base_SetConfig+0xd0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00b      	beq.n	800669c <TIM_Base_SetConfig+0x30>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668a:	d007      	beq.n	800669c <TIM_Base_SetConfig+0x30>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a2c      	ldr	r2, [pc, #176]	@ (8006740 <TIM_Base_SetConfig+0xd4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_Base_SetConfig+0x30>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a2b      	ldr	r2, [pc, #172]	@ (8006744 <TIM_Base_SetConfig+0xd8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d108      	bne.n	80066ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a22      	ldr	r2, [pc, #136]	@ (800673c <TIM_Base_SetConfig+0xd0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00b      	beq.n	80066ce <TIM_Base_SetConfig+0x62>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066bc:	d007      	beq.n	80066ce <TIM_Base_SetConfig+0x62>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006740 <TIM_Base_SetConfig+0xd4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d003      	beq.n	80066ce <TIM_Base_SetConfig+0x62>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006744 <TIM_Base_SetConfig+0xd8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d108      	bne.n	80066e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a0d      	ldr	r2, [pc, #52]	@ (800673c <TIM_Base_SetConfig+0xd0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d103      	bne.n	8006714 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	611a      	str	r2, [r3, #16]
  }
}
 8006732:	bf00      	nop
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800

08006748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 030a 	bic.w	r3, r3, #10
 8006784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr

080067a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0210 	bic.w	r2, r3, #16
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	031b      	lsls	r3, r3, #12
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	f043 0307 	orr.w	r3, r3, #7
 8006824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	609a      	str	r2, [r3, #8]
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006836:	b480      	push	{r7}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006850:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	021a      	lsls	r2, r3, #8
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	431a      	orrs	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4313      	orrs	r3, r2
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	609a      	str	r2, [r3, #8]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006888:	2302      	movs	r3, #2
 800688a:	e046      	b.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a16      	ldr	r2, [pc, #88]	@ (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d8:	d009      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a12      	ldr	r2, [pc, #72]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a10      	ldr	r2, [pc, #64]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d10c      	bne.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800

08006930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr

08006954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e042      	b.n	80069ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fb fd86 	bl	800248c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2224      	movs	r2, #36	@ 0x24
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fe4f 	bl	800763c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695a      	ldr	r2, [r3, #20]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	@ 0x28
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	d175      	bne.n	8006b00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_UART_Transmit+0x2c>
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e06e      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2221      	movs	r2, #33	@ 0x21
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a32:	f7fb ff75 	bl	8002920 <HAL_GetTick>
 8006a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a4c:	d108      	bne.n	8006a60 <HAL_UART_Transmit+0x6c>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e003      	b.n	8006a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a68:	e02e      	b.n	8006ac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2180      	movs	r1, #128	@ 0x80
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fbb4 	bl	80071e2 <UART_WaitOnFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e03a      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10b      	bne.n	8006aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	e007      	b.n	8006aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1cb      	bne.n	8006a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2140      	movs	r1, #64	@ 0x40
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 fb80 	bl	80071e2 <UART_WaitOnFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e006      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e000      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b00:	2302      	movs	r3, #2
  }
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b08a      	sub	sp, #40	@ 0x28
 8006b0e:	af02      	add	r7, sp, #8
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	f040 8081 	bne.w	8006c2e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <HAL_UART_Receive+0x2e>
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e079      	b.n	8006c30 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2222      	movs	r2, #34	@ 0x22
 8006b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b50:	f7fb fee6 	bl	8002920 <HAL_GetTick>
 8006b54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	88fa      	ldrh	r2, [r7, #6]
 8006b5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	88fa      	ldrh	r2, [r7, #6]
 8006b60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b6a:	d108      	bne.n	8006b7e <HAL_UART_Receive+0x74>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e003      	b.n	8006b86 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b86:	e047      	b.n	8006c18 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2120      	movs	r1, #32
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fb25 	bl	80071e2 <UART_WaitOnFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e042      	b.n	8006c30 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10c      	bne.n	8006bca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e01f      	b.n	8006c0a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bd2:	d007      	beq.n	8006be4 <HAL_UART_Receive+0xda>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <HAL_UART_Receive+0xe8>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d106      	bne.n	8006bf2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	e008      	b.n	8006c04 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	3301      	adds	r3, #1
 8006c08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1b2      	bne.n	8006b88 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006c2e:	2302      	movs	r3, #2
  }
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3720      	adds	r7, #32
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d112      	bne.n	8006c78 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <HAL_UART_Receive_IT+0x26>
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e00b      	b.n	8006c7a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 fb10 	bl	8007294 <UART_Start_Receive_IT>
 8006c74:	4603      	mov	r3, r0
 8006c76:	e000      	b.n	8006c7a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
  }
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b0ba      	sub	sp, #232	@ 0xe8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d009      	beq.n	8006cea <HAL_UART_IRQHandler+0x66>
 8006cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fbec 	bl	80074c0 <UART_Receive_IT>
      return;
 8006ce8:	e25b      	b.n	80071a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80de 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x22c>
 8006cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80d1 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <HAL_UART_IRQHandler+0xae>
 8006d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2a:	f043 0201 	orr.w	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <HAL_UART_IRQHandler+0xd2>
 8006d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4e:	f043 0202 	orr.w	r2, r3, #2
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HAL_UART_IRQHandler+0xf6>
 8006d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d72:	f043 0204 	orr.w	r2, r3, #4
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d011      	beq.n	8006daa <HAL_UART_IRQHandler+0x126>
 8006d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d105      	bne.n	8006d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	f043 0208 	orr.w	r2, r3, #8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 81f2 	beq.w	8007198 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d008      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x14e>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb77 	bl	80074c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bf14      	ite	ne
 8006de0:	2301      	movne	r3, #1
 8006de2:	2300      	moveq	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <HAL_UART_IRQHandler+0x17a>
 8006df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d04f      	beq.n	8006e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa81 	bl	8007306 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d041      	beq.n	8006e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3314      	adds	r3, #20
 8006e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1d9      	bne.n	8006e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d013      	beq.n	8006e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8007064 <HAL_UART_IRQHandler+0x3e0>)
 8006e6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fc fac8 	bl	8003408 <HAL_DMA_Abort_IT>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d016      	beq.n	8006eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8c:	e00e      	b.n	8006eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f993 	bl	80071ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	e00a      	b.n	8006eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f98f 	bl	80071ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9c:	e006      	b.n	8006eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f98b 	bl	80071ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006eaa:	e175      	b.n	8007198 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eac:	bf00      	nop
    return;
 8006eae:	e173      	b.n	8007198 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 814f 	bne.w	8007158 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ebe:	f003 0310 	and.w	r3, r3, #16
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8148 	beq.w	8007158 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8141 	beq.w	8007158 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60bb      	str	r3, [r7, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	60bb      	str	r3, [r7, #8]
 8006eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 80b6 	beq.w	8007068 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8145 	beq.w	800719c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	f080 813e 	bcs.w	800719c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	f000 8088 	beq.w	8007044 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006f60:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1d9      	bne.n	8006f34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3314      	adds	r3, #20
 8006f86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f92:	f023 0301 	bic.w	r3, r3, #1
 8006f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3314      	adds	r3, #20
 8006fa0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fa4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006fac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e1      	bne.n	8006f80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3314      	adds	r3, #20
 8006fc2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3314      	adds	r3, #20
 8006fdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fe0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fe6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e3      	bne.n	8006fbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007014:	f023 0310 	bic.w	r3, r3, #16
 8007018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007026:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007028:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800702c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e3      	bne.n	8007002 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703e:	4618      	mov	r0, r3
 8007040:	f7fc f9a7 	bl	8003392 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007052:	b29b      	uxth	r3, r3
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	b29b      	uxth	r3, r3
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f8b6 	bl	80071cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007060:	e09c      	b.n	800719c <HAL_UART_IRQHandler+0x518>
 8007062:	bf00      	nop
 8007064:	080073cb 	.word	0x080073cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007070:	b29b      	uxth	r3, r3
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 808e 	beq.w	80071a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8089 	beq.w	80071a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	330c      	adds	r3, #12
 8007094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800709e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	330c      	adds	r3, #12
 80070ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80070b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80070b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e3      	bne.n	800708e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3314      	adds	r3, #20
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	623b      	str	r3, [r7, #32]
   return(result);
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3314      	adds	r3, #20
 80070e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80070ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80070ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e3      	bne.n	80070c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	330c      	adds	r3, #12
 8007112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	60fb      	str	r3, [r7, #12]
   return(result);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0310 	bic.w	r3, r3, #16
 8007122:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007130:	61fa      	str	r2, [r7, #28]
 8007132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	69b9      	ldr	r1, [r7, #24]
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	617b      	str	r3, [r7, #20]
   return(result);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e3      	bne.n	800710c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800714a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f83b 	bl	80071cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007156:	e023      	b.n	80071a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <HAL_UART_IRQHandler+0x4f4>
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f93e 	bl	80073f2 <UART_Transmit_IT>
    return;
 8007176:	e014      	b.n	80071a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <HAL_UART_IRQHandler+0x51e>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f97d 	bl	8007490 <UART_EndTransmit_IT>
    return;
 8007196:	e004      	b.n	80071a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007198:	bf00      	nop
 800719a:	e002      	b.n	80071a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800719c:	bf00      	nop
 800719e:	e000      	b.n	80071a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80071a0:	bf00      	nop
  }
}
 80071a2:	37e8      	adds	r7, #232	@ 0xe8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr

080071ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr

080071cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr

080071e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f2:	e03b      	b.n	800726c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	d037      	beq.n	800726c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fc:	f7fb fb90 	bl	8002920 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	6a3a      	ldr	r2, [r7, #32]
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <UART_WaitOnFlagUntilTimeout+0x30>
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e03a      	b.n	800728c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d023      	beq.n	800726c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b80      	cmp	r3, #128	@ 0x80
 8007228:	d020      	beq.n	800726c <UART_WaitOnFlagUntilTimeout+0x8a>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b40      	cmp	r3, #64	@ 0x40
 800722e:	d01d      	beq.n	800726c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b08      	cmp	r3, #8
 800723c:	d116      	bne.n	800726c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f856 	bl	8007306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2208      	movs	r2, #8
 800725e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e00f      	b.n	800728c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4013      	ands	r3, r2
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	bf0c      	ite	eq
 800727c:	2301      	moveq	r3, #1
 800727e:	2300      	movne	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	461a      	mov	r2, r3
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	429a      	cmp	r2, r3
 8007288:	d0b4      	beq.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	88fa      	ldrh	r2, [r7, #6]
 80072b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2222      	movs	r2, #34	@ 0x22
 80072be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d007      	beq.n	80072da <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695a      	ldr	r2, [r3, #20]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0201 	orr.w	r2, r2, #1
 80072e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0220 	orr.w	r2, r2, #32
 80072f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr

08007306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007306:	b480      	push	{r7}
 8007308:	b095      	sub	sp, #84	@ 0x54
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800732e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800733c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	61fb      	str	r3, [r7, #28]
   return(result);
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3314      	adds	r3, #20
 8007360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007362:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007364:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e5      	bne.n	8007342 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737a:	2b01      	cmp	r3, #1
 800737c:	d119      	bne.n	80073b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	60bb      	str	r3, [r7, #8]
   return(result);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 0310 	bic.w	r3, r3, #16
 8007394:	647b      	str	r3, [r7, #68]	@ 0x44
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	330c      	adds	r3, #12
 800739c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800739e:	61ba      	str	r2, [r7, #24]
 80073a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	613b      	str	r3, [r7, #16]
   return(result);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e5      	bne.n	800737e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80073c0:	bf00      	nop
 80073c2:	3754      	adds	r7, #84	@ 0x54
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc80      	pop	{r7}
 80073c8:	4770      	bx	lr

080073ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff fee8 	bl	80071ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ea:	bf00      	nop
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b21      	cmp	r3, #33	@ 0x21
 8007404:	d13e      	bne.n	8007484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800740e:	d114      	bne.n	800743a <UART_Transmit_IT+0x48>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d110      	bne.n	800743a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800742c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	1c9a      	adds	r2, r3, #2
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	621a      	str	r2, [r3, #32]
 8007438:	e008      	b.n	800744c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	1c59      	adds	r1, r3, #1
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6211      	str	r1, [r2, #32]
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4619      	mov	r1, r3
 800745a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10f      	bne.n	8007480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800746e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800747e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	e000      	b.n	8007486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007484:	2302      	movs	r3, #2
  }
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff fe79 	bl	80071a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08c      	sub	sp, #48	@ 0x30
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b22      	cmp	r3, #34	@ 0x22
 80074d2:	f040 80ae 	bne.w	8007632 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074de:	d117      	bne.n	8007510 <UART_Receive_IT+0x50>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d113      	bne.n	8007510 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074e8:	2300      	movs	r3, #0
 80074ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	b29a      	uxth	r2, r3
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007508:	1c9a      	adds	r2, r3, #2
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	629a      	str	r2, [r3, #40]	@ 0x28
 800750e:	e026      	b.n	800755e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007514:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007522:	d007      	beq.n	8007534 <UART_Receive_IT+0x74>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <UART_Receive_IT+0x82>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	b2da      	uxtb	r2, r3
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	e008      	b.n	8007554 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754e:	b2da      	uxtb	r2, r3
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29b      	uxth	r3, r3
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800756e:	2b00      	cmp	r3, #0
 8007570:	d15d      	bne.n	800762e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0220 	bic.w	r2, r2, #32
 8007580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d135      	bne.n	8007624 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330c      	adds	r3, #12
 80075c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	613b      	str	r3, [r7, #16]
   return(result);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f023 0310 	bic.w	r3, r3, #16
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	330c      	adds	r3, #12
 80075dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075de:	623a      	str	r2, [r7, #32]
 80075e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	69f9      	ldr	r1, [r7, #28]
 80075e4:	6a3a      	ldr	r2, [r7, #32]
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e5      	bne.n	80075be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d10a      	bne.n	8007616 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff fdd5 	bl	80071cc <HAL_UARTEx_RxEventCallback>
 8007622:	e002      	b.n	800762a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7fa f819 	bl	800165c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	e002      	b.n	8007634 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	e000      	b.n	8007634 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007632:	2302      	movs	r3, #2
  }
}
 8007634:	4618      	mov	r0, r3
 8007636:	3730      	adds	r7, #48	@ 0x30
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	4313      	orrs	r3, r2
 800766a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007676:	f023 030c 	bic.w	r3, r3, #12
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	430b      	orrs	r3, r1
 8007682:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a2c      	ldr	r2, [pc, #176]	@ (8007750 <UART_SetConfig+0x114>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d103      	bne.n	80076ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80076a4:	f7fd fec4 	bl	8005430 <HAL_RCC_GetPCLK2Freq>
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	e002      	b.n	80076b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80076ac:	f7fd feac 	bl	8005408 <HAL_RCC_GetPCLK1Freq>
 80076b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009a      	lsls	r2, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c8:	4a22      	ldr	r2, [pc, #136]	@ (8007754 <UART_SetConfig+0x118>)
 80076ca:	fba2 2303 	umull	r2, r3, r2, r3
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	0119      	lsls	r1, r3, #4
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009a      	lsls	r2, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80076e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007754 <UART_SetConfig+0x118>)
 80076ea:	fba3 0302 	umull	r0, r3, r3, r2
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	2064      	movs	r0, #100	@ 0x64
 80076f2:	fb00 f303 	mul.w	r3, r0, r3
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	3332      	adds	r3, #50	@ 0x32
 80076fc:	4a15      	ldr	r2, [pc, #84]	@ (8007754 <UART_SetConfig+0x118>)
 80076fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007708:	4419      	add	r1, r3
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	009a      	lsls	r2, r3, #2
 8007714:	441a      	add	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007720:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <UART_SetConfig+0x118>)
 8007722:	fba3 0302 	umull	r0, r3, r3, r2
 8007726:	095b      	lsrs	r3, r3, #5
 8007728:	2064      	movs	r0, #100	@ 0x64
 800772a:	fb00 f303 	mul.w	r3, r0, r3
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	3332      	adds	r3, #50	@ 0x32
 8007734:	4a07      	ldr	r2, [pc, #28]	@ (8007754 <UART_SetConfig+0x118>)
 8007736:	fba2 2303 	umull	r2, r3, r2, r3
 800773a:	095b      	lsrs	r3, r3, #5
 800773c:	f003 020f 	and.w	r2, r3, #15
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	440a      	add	r2, r1
 8007746:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40013800 	.word	0x40013800
 8007754:	51eb851f 	.word	0x51eb851f

08007758 <atoi>:
 8007758:	220a      	movs	r2, #10
 800775a:	2100      	movs	r1, #0
 800775c:	f000 b87a 	b.w	8007854 <strtol>

08007760 <_strtol_l.constprop.0>:
 8007760:	2b24      	cmp	r3, #36	@ 0x24
 8007762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007766:	4686      	mov	lr, r0
 8007768:	4690      	mov	r8, r2
 800776a:	d801      	bhi.n	8007770 <_strtol_l.constprop.0+0x10>
 800776c:	2b01      	cmp	r3, #1
 800776e:	d106      	bne.n	800777e <_strtol_l.constprop.0+0x1e>
 8007770:	f000 f8b6 	bl	80078e0 <__errno>
 8007774:	2316      	movs	r3, #22
 8007776:	6003      	str	r3, [r0, #0]
 8007778:	2000      	movs	r0, #0
 800777a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777e:	460d      	mov	r5, r1
 8007780:	4833      	ldr	r0, [pc, #204]	@ (8007850 <_strtol_l.constprop.0+0xf0>)
 8007782:	462a      	mov	r2, r5
 8007784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007788:	5d06      	ldrb	r6, [r0, r4]
 800778a:	f016 0608 	ands.w	r6, r6, #8
 800778e:	d1f8      	bne.n	8007782 <_strtol_l.constprop.0+0x22>
 8007790:	2c2d      	cmp	r4, #45	@ 0x2d
 8007792:	d12d      	bne.n	80077f0 <_strtol_l.constprop.0+0x90>
 8007794:	2601      	movs	r6, #1
 8007796:	782c      	ldrb	r4, [r5, #0]
 8007798:	1c95      	adds	r5, r2, #2
 800779a:	f033 0210 	bics.w	r2, r3, #16
 800779e:	d109      	bne.n	80077b4 <_strtol_l.constprop.0+0x54>
 80077a0:	2c30      	cmp	r4, #48	@ 0x30
 80077a2:	d12a      	bne.n	80077fa <_strtol_l.constprop.0+0x9a>
 80077a4:	782a      	ldrb	r2, [r5, #0]
 80077a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077aa:	2a58      	cmp	r2, #88	@ 0x58
 80077ac:	d125      	bne.n	80077fa <_strtol_l.constprop.0+0x9a>
 80077ae:	2310      	movs	r3, #16
 80077b0:	786c      	ldrb	r4, [r5, #1]
 80077b2:	3502      	adds	r5, #2
 80077b4:	2200      	movs	r2, #0
 80077b6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80077ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077be:	fbbc f9f3 	udiv	r9, ip, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80077c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80077cc:	2f09      	cmp	r7, #9
 80077ce:	d81b      	bhi.n	8007808 <_strtol_l.constprop.0+0xa8>
 80077d0:	463c      	mov	r4, r7
 80077d2:	42a3      	cmp	r3, r4
 80077d4:	dd27      	ble.n	8007826 <_strtol_l.constprop.0+0xc6>
 80077d6:	1c57      	adds	r7, r2, #1
 80077d8:	d007      	beq.n	80077ea <_strtol_l.constprop.0+0x8a>
 80077da:	4581      	cmp	r9, r0
 80077dc:	d320      	bcc.n	8007820 <_strtol_l.constprop.0+0xc0>
 80077de:	d101      	bne.n	80077e4 <_strtol_l.constprop.0+0x84>
 80077e0:	45a2      	cmp	sl, r4
 80077e2:	db1d      	blt.n	8007820 <_strtol_l.constprop.0+0xc0>
 80077e4:	2201      	movs	r2, #1
 80077e6:	fb00 4003 	mla	r0, r0, r3, r4
 80077ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077ee:	e7eb      	b.n	80077c8 <_strtol_l.constprop.0+0x68>
 80077f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80077f2:	bf04      	itt	eq
 80077f4:	782c      	ldrbeq	r4, [r5, #0]
 80077f6:	1c95      	addeq	r5, r2, #2
 80077f8:	e7cf      	b.n	800779a <_strtol_l.constprop.0+0x3a>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1da      	bne.n	80077b4 <_strtol_l.constprop.0+0x54>
 80077fe:	2c30      	cmp	r4, #48	@ 0x30
 8007800:	bf0c      	ite	eq
 8007802:	2308      	moveq	r3, #8
 8007804:	230a      	movne	r3, #10
 8007806:	e7d5      	b.n	80077b4 <_strtol_l.constprop.0+0x54>
 8007808:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800780c:	2f19      	cmp	r7, #25
 800780e:	d801      	bhi.n	8007814 <_strtol_l.constprop.0+0xb4>
 8007810:	3c37      	subs	r4, #55	@ 0x37
 8007812:	e7de      	b.n	80077d2 <_strtol_l.constprop.0+0x72>
 8007814:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007818:	2f19      	cmp	r7, #25
 800781a:	d804      	bhi.n	8007826 <_strtol_l.constprop.0+0xc6>
 800781c:	3c57      	subs	r4, #87	@ 0x57
 800781e:	e7d8      	b.n	80077d2 <_strtol_l.constprop.0+0x72>
 8007820:	f04f 32ff 	mov.w	r2, #4294967295
 8007824:	e7e1      	b.n	80077ea <_strtol_l.constprop.0+0x8a>
 8007826:	1c53      	adds	r3, r2, #1
 8007828:	d108      	bne.n	800783c <_strtol_l.constprop.0+0xdc>
 800782a:	2322      	movs	r3, #34	@ 0x22
 800782c:	4660      	mov	r0, ip
 800782e:	f8ce 3000 	str.w	r3, [lr]
 8007832:	f1b8 0f00 	cmp.w	r8, #0
 8007836:	d0a0      	beq.n	800777a <_strtol_l.constprop.0+0x1a>
 8007838:	1e69      	subs	r1, r5, #1
 800783a:	e006      	b.n	800784a <_strtol_l.constprop.0+0xea>
 800783c:	b106      	cbz	r6, 8007840 <_strtol_l.constprop.0+0xe0>
 800783e:	4240      	negs	r0, r0
 8007840:	f1b8 0f00 	cmp.w	r8, #0
 8007844:	d099      	beq.n	800777a <_strtol_l.constprop.0+0x1a>
 8007846:	2a00      	cmp	r2, #0
 8007848:	d1f6      	bne.n	8007838 <_strtol_l.constprop.0+0xd8>
 800784a:	f8c8 1000 	str.w	r1, [r8]
 800784e:	e794      	b.n	800777a <_strtol_l.constprop.0+0x1a>
 8007850:	08009173 	.word	0x08009173

08007854 <strtol>:
 8007854:	4613      	mov	r3, r2
 8007856:	460a      	mov	r2, r1
 8007858:	4601      	mov	r1, r0
 800785a:	4802      	ldr	r0, [pc, #8]	@ (8007864 <strtol+0x10>)
 800785c:	6800      	ldr	r0, [r0, #0]
 800785e:	f7ff bf7f 	b.w	8007760 <_strtol_l.constprop.0>
 8007862:	bf00      	nop
 8007864:	20000010 	.word	0x20000010

08007868 <siprintf>:
 8007868:	b40e      	push	{r1, r2, r3}
 800786a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800786e:	b500      	push	{lr}
 8007870:	b09c      	sub	sp, #112	@ 0x70
 8007872:	ab1d      	add	r3, sp, #116	@ 0x74
 8007874:	9002      	str	r0, [sp, #8]
 8007876:	9006      	str	r0, [sp, #24]
 8007878:	9107      	str	r1, [sp, #28]
 800787a:	9104      	str	r1, [sp, #16]
 800787c:	4808      	ldr	r0, [pc, #32]	@ (80078a0 <siprintf+0x38>)
 800787e:	4909      	ldr	r1, [pc, #36]	@ (80078a4 <siprintf+0x3c>)
 8007880:	f853 2b04 	ldr.w	r2, [r3], #4
 8007884:	9105      	str	r1, [sp, #20]
 8007886:	6800      	ldr	r0, [r0, #0]
 8007888:	a902      	add	r1, sp, #8
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	f000 f9ae 	bl	8007bec <_svfiprintf_r>
 8007890:	2200      	movs	r2, #0
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	b01c      	add	sp, #112	@ 0x70
 8007898:	f85d eb04 	ldr.w	lr, [sp], #4
 800789c:	b003      	add	sp, #12
 800789e:	4770      	bx	lr
 80078a0:	20000010 	.word	0x20000010
 80078a4:	ffff0208 	.word	0xffff0208

080078a8 <memset>:
 80078a8:	4603      	mov	r3, r0
 80078aa:	4402      	add	r2, r0
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d100      	bne.n	80078b2 <memset+0xa>
 80078b0:	4770      	bx	lr
 80078b2:	f803 1b01 	strb.w	r1, [r3], #1
 80078b6:	e7f9      	b.n	80078ac <memset+0x4>

080078b8 <strncpy>:
 80078b8:	4603      	mov	r3, r0
 80078ba:	b510      	push	{r4, lr}
 80078bc:	3901      	subs	r1, #1
 80078be:	b132      	cbz	r2, 80078ce <strncpy+0x16>
 80078c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80078c4:	3a01      	subs	r2, #1
 80078c6:	f803 4b01 	strb.w	r4, [r3], #1
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	d1f7      	bne.n	80078be <strncpy+0x6>
 80078ce:	2100      	movs	r1, #0
 80078d0:	441a      	add	r2, r3
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d100      	bne.n	80078d8 <strncpy+0x20>
 80078d6:	bd10      	pop	{r4, pc}
 80078d8:	f803 1b01 	strb.w	r1, [r3], #1
 80078dc:	e7f9      	b.n	80078d2 <strncpy+0x1a>
	...

080078e0 <__errno>:
 80078e0:	4b01      	ldr	r3, [pc, #4]	@ (80078e8 <__errno+0x8>)
 80078e2:	6818      	ldr	r0, [r3, #0]
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000010 	.word	0x20000010

080078ec <__libc_init_array>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	2600      	movs	r6, #0
 80078f0:	4d0c      	ldr	r5, [pc, #48]	@ (8007924 <__libc_init_array+0x38>)
 80078f2:	4c0d      	ldr	r4, [pc, #52]	@ (8007928 <__libc_init_array+0x3c>)
 80078f4:	1b64      	subs	r4, r4, r5
 80078f6:	10a4      	asrs	r4, r4, #2
 80078f8:	42a6      	cmp	r6, r4
 80078fa:	d109      	bne.n	8007910 <__libc_init_array+0x24>
 80078fc:	f001 fbd4 	bl	80090a8 <_init>
 8007900:	2600      	movs	r6, #0
 8007902:	4d0a      	ldr	r5, [pc, #40]	@ (800792c <__libc_init_array+0x40>)
 8007904:	4c0a      	ldr	r4, [pc, #40]	@ (8007930 <__libc_init_array+0x44>)
 8007906:	1b64      	subs	r4, r4, r5
 8007908:	10a4      	asrs	r4, r4, #2
 800790a:	42a6      	cmp	r6, r4
 800790c:	d105      	bne.n	800791a <__libc_init_array+0x2e>
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	f855 3b04 	ldr.w	r3, [r5], #4
 8007914:	4798      	blx	r3
 8007916:	3601      	adds	r6, #1
 8007918:	e7ee      	b.n	80078f8 <__libc_init_array+0xc>
 800791a:	f855 3b04 	ldr.w	r3, [r5], #4
 800791e:	4798      	blx	r3
 8007920:	3601      	adds	r6, #1
 8007922:	e7f2      	b.n	800790a <__libc_init_array+0x1e>
 8007924:	080092d8 	.word	0x080092d8
 8007928:	080092d8 	.word	0x080092d8
 800792c:	080092d8 	.word	0x080092d8
 8007930:	080092dc 	.word	0x080092dc

08007934 <__retarget_lock_acquire_recursive>:
 8007934:	4770      	bx	lr

08007936 <__retarget_lock_release_recursive>:
 8007936:	4770      	bx	lr

08007938 <strcpy>:
 8007938:	4603      	mov	r3, r0
 800793a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800793e:	f803 2b01 	strb.w	r2, [r3], #1
 8007942:	2a00      	cmp	r2, #0
 8007944:	d1f9      	bne.n	800793a <strcpy+0x2>
 8007946:	4770      	bx	lr

08007948 <_free_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4605      	mov	r5, r0
 800794c:	2900      	cmp	r1, #0
 800794e:	d040      	beq.n	80079d2 <_free_r+0x8a>
 8007950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007954:	1f0c      	subs	r4, r1, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	bfb8      	it	lt
 800795a:	18e4      	addlt	r4, r4, r3
 800795c:	f000 f8de 	bl	8007b1c <__malloc_lock>
 8007960:	4a1c      	ldr	r2, [pc, #112]	@ (80079d4 <_free_r+0x8c>)
 8007962:	6813      	ldr	r3, [r2, #0]
 8007964:	b933      	cbnz	r3, 8007974 <_free_r+0x2c>
 8007966:	6063      	str	r3, [r4, #4]
 8007968:	6014      	str	r4, [r2, #0]
 800796a:	4628      	mov	r0, r5
 800796c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007970:	f000 b8da 	b.w	8007b28 <__malloc_unlock>
 8007974:	42a3      	cmp	r3, r4
 8007976:	d908      	bls.n	800798a <_free_r+0x42>
 8007978:	6820      	ldr	r0, [r4, #0]
 800797a:	1821      	adds	r1, r4, r0
 800797c:	428b      	cmp	r3, r1
 800797e:	bf01      	itttt	eq
 8007980:	6819      	ldreq	r1, [r3, #0]
 8007982:	685b      	ldreq	r3, [r3, #4]
 8007984:	1809      	addeq	r1, r1, r0
 8007986:	6021      	streq	r1, [r4, #0]
 8007988:	e7ed      	b.n	8007966 <_free_r+0x1e>
 800798a:	461a      	mov	r2, r3
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	b10b      	cbz	r3, 8007994 <_free_r+0x4c>
 8007990:	42a3      	cmp	r3, r4
 8007992:	d9fa      	bls.n	800798a <_free_r+0x42>
 8007994:	6811      	ldr	r1, [r2, #0]
 8007996:	1850      	adds	r0, r2, r1
 8007998:	42a0      	cmp	r0, r4
 800799a:	d10b      	bne.n	80079b4 <_free_r+0x6c>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	4401      	add	r1, r0
 80079a0:	1850      	adds	r0, r2, r1
 80079a2:	4283      	cmp	r3, r0
 80079a4:	6011      	str	r1, [r2, #0]
 80079a6:	d1e0      	bne.n	800796a <_free_r+0x22>
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	4408      	add	r0, r1
 80079ae:	6010      	str	r0, [r2, #0]
 80079b0:	6053      	str	r3, [r2, #4]
 80079b2:	e7da      	b.n	800796a <_free_r+0x22>
 80079b4:	d902      	bls.n	80079bc <_free_r+0x74>
 80079b6:	230c      	movs	r3, #12
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	e7d6      	b.n	800796a <_free_r+0x22>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	1821      	adds	r1, r4, r0
 80079c0:	428b      	cmp	r3, r1
 80079c2:	bf01      	itttt	eq
 80079c4:	6819      	ldreq	r1, [r3, #0]
 80079c6:	685b      	ldreq	r3, [r3, #4]
 80079c8:	1809      	addeq	r1, r1, r0
 80079ca:	6021      	streq	r1, [r4, #0]
 80079cc:	6063      	str	r3, [r4, #4]
 80079ce:	6054      	str	r4, [r2, #4]
 80079d0:	e7cb      	b.n	800796a <_free_r+0x22>
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	20000fd0 	.word	0x20000fd0

080079d8 <sbrk_aligned>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4e0f      	ldr	r6, [pc, #60]	@ (8007a18 <sbrk_aligned+0x40>)
 80079dc:	460c      	mov	r4, r1
 80079de:	6831      	ldr	r1, [r6, #0]
 80079e0:	4605      	mov	r5, r0
 80079e2:	b911      	cbnz	r1, 80079ea <sbrk_aligned+0x12>
 80079e4:	f000 fbaa 	bl	800813c <_sbrk_r>
 80079e8:	6030      	str	r0, [r6, #0]
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 fba5 	bl	800813c <_sbrk_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d103      	bne.n	80079fe <sbrk_aligned+0x26>
 80079f6:	f04f 34ff 	mov.w	r4, #4294967295
 80079fa:	4620      	mov	r0, r4
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
 80079fe:	1cc4      	adds	r4, r0, #3
 8007a00:	f024 0403 	bic.w	r4, r4, #3
 8007a04:	42a0      	cmp	r0, r4
 8007a06:	d0f8      	beq.n	80079fa <sbrk_aligned+0x22>
 8007a08:	1a21      	subs	r1, r4, r0
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 fb96 	bl	800813c <_sbrk_r>
 8007a10:	3001      	adds	r0, #1
 8007a12:	d1f2      	bne.n	80079fa <sbrk_aligned+0x22>
 8007a14:	e7ef      	b.n	80079f6 <sbrk_aligned+0x1e>
 8007a16:	bf00      	nop
 8007a18:	20000fcc 	.word	0x20000fcc

08007a1c <_malloc_r>:
 8007a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a20:	1ccd      	adds	r5, r1, #3
 8007a22:	f025 0503 	bic.w	r5, r5, #3
 8007a26:	3508      	adds	r5, #8
 8007a28:	2d0c      	cmp	r5, #12
 8007a2a:	bf38      	it	cc
 8007a2c:	250c      	movcc	r5, #12
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	4606      	mov	r6, r0
 8007a32:	db01      	blt.n	8007a38 <_malloc_r+0x1c>
 8007a34:	42a9      	cmp	r1, r5
 8007a36:	d904      	bls.n	8007a42 <_malloc_r+0x26>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	6033      	str	r3, [r6, #0]
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b18 <_malloc_r+0xfc>
 8007a46:	f000 f869 	bl	8007b1c <__malloc_lock>
 8007a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4e:	461c      	mov	r4, r3
 8007a50:	bb44      	cbnz	r4, 8007aa4 <_malloc_r+0x88>
 8007a52:	4629      	mov	r1, r5
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7ff ffbf 	bl	80079d8 <sbrk_aligned>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	d158      	bne.n	8007b12 <_malloc_r+0xf6>
 8007a60:	f8d8 4000 	ldr.w	r4, [r8]
 8007a64:	4627      	mov	r7, r4
 8007a66:	2f00      	cmp	r7, #0
 8007a68:	d143      	bne.n	8007af2 <_malloc_r+0xd6>
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	d04b      	beq.n	8007b06 <_malloc_r+0xea>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	4639      	mov	r1, r7
 8007a72:	4630      	mov	r0, r6
 8007a74:	eb04 0903 	add.w	r9, r4, r3
 8007a78:	f000 fb60 	bl	800813c <_sbrk_r>
 8007a7c:	4581      	cmp	r9, r0
 8007a7e:	d142      	bne.n	8007b06 <_malloc_r+0xea>
 8007a80:	6821      	ldr	r1, [r4, #0]
 8007a82:	4630      	mov	r0, r6
 8007a84:	1a6d      	subs	r5, r5, r1
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7ff ffa6 	bl	80079d8 <sbrk_aligned>
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d03a      	beq.n	8007b06 <_malloc_r+0xea>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	442b      	add	r3, r5
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	f8d8 3000 	ldr.w	r3, [r8]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	bb62      	cbnz	r2, 8007af8 <_malloc_r+0xdc>
 8007a9e:	f8c8 7000 	str.w	r7, [r8]
 8007aa2:	e00f      	b.n	8007ac4 <_malloc_r+0xa8>
 8007aa4:	6822      	ldr	r2, [r4, #0]
 8007aa6:	1b52      	subs	r2, r2, r5
 8007aa8:	d420      	bmi.n	8007aec <_malloc_r+0xd0>
 8007aaa:	2a0b      	cmp	r2, #11
 8007aac:	d917      	bls.n	8007ade <_malloc_r+0xc2>
 8007aae:	1961      	adds	r1, r4, r5
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	6025      	str	r5, [r4, #0]
 8007ab4:	bf18      	it	ne
 8007ab6:	6059      	strne	r1, [r3, #4]
 8007ab8:	6863      	ldr	r3, [r4, #4]
 8007aba:	bf08      	it	eq
 8007abc:	f8c8 1000 	streq.w	r1, [r8]
 8007ac0:	5162      	str	r2, [r4, r5]
 8007ac2:	604b      	str	r3, [r1, #4]
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f000 f82f 	bl	8007b28 <__malloc_unlock>
 8007aca:	f104 000b 	add.w	r0, r4, #11
 8007ace:	1d23      	adds	r3, r4, #4
 8007ad0:	f020 0007 	bic.w	r0, r0, #7
 8007ad4:	1ac2      	subs	r2, r0, r3
 8007ad6:	bf1c      	itt	ne
 8007ad8:	1a1b      	subne	r3, r3, r0
 8007ada:	50a3      	strne	r3, [r4, r2]
 8007adc:	e7af      	b.n	8007a3e <_malloc_r+0x22>
 8007ade:	6862      	ldr	r2, [r4, #4]
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	bf0c      	ite	eq
 8007ae4:	f8c8 2000 	streq.w	r2, [r8]
 8007ae8:	605a      	strne	r2, [r3, #4]
 8007aea:	e7eb      	b.n	8007ac4 <_malloc_r+0xa8>
 8007aec:	4623      	mov	r3, r4
 8007aee:	6864      	ldr	r4, [r4, #4]
 8007af0:	e7ae      	b.n	8007a50 <_malloc_r+0x34>
 8007af2:	463c      	mov	r4, r7
 8007af4:	687f      	ldr	r7, [r7, #4]
 8007af6:	e7b6      	b.n	8007a66 <_malloc_r+0x4a>
 8007af8:	461a      	mov	r2, r3
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	d1fb      	bne.n	8007af8 <_malloc_r+0xdc>
 8007b00:	2300      	movs	r3, #0
 8007b02:	6053      	str	r3, [r2, #4]
 8007b04:	e7de      	b.n	8007ac4 <_malloc_r+0xa8>
 8007b06:	230c      	movs	r3, #12
 8007b08:	4630      	mov	r0, r6
 8007b0a:	6033      	str	r3, [r6, #0]
 8007b0c:	f000 f80c 	bl	8007b28 <__malloc_unlock>
 8007b10:	e794      	b.n	8007a3c <_malloc_r+0x20>
 8007b12:	6005      	str	r5, [r0, #0]
 8007b14:	e7d6      	b.n	8007ac4 <_malloc_r+0xa8>
 8007b16:	bf00      	nop
 8007b18:	20000fd0 	.word	0x20000fd0

08007b1c <__malloc_lock>:
 8007b1c:	4801      	ldr	r0, [pc, #4]	@ (8007b24 <__malloc_lock+0x8>)
 8007b1e:	f7ff bf09 	b.w	8007934 <__retarget_lock_acquire_recursive>
 8007b22:	bf00      	nop
 8007b24:	20000fc8 	.word	0x20000fc8

08007b28 <__malloc_unlock>:
 8007b28:	4801      	ldr	r0, [pc, #4]	@ (8007b30 <__malloc_unlock+0x8>)
 8007b2a:	f7ff bf04 	b.w	8007936 <__retarget_lock_release_recursive>
 8007b2e:	bf00      	nop
 8007b30:	20000fc8 	.word	0x20000fc8

08007b34 <__ssputs_r>:
 8007b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	461f      	mov	r7, r3
 8007b3a:	688e      	ldr	r6, [r1, #8]
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	42be      	cmp	r6, r7
 8007b40:	460c      	mov	r4, r1
 8007b42:	4690      	mov	r8, r2
 8007b44:	680b      	ldr	r3, [r1, #0]
 8007b46:	d82d      	bhi.n	8007ba4 <__ssputs_r+0x70>
 8007b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b50:	d026      	beq.n	8007ba0 <__ssputs_r+0x6c>
 8007b52:	6965      	ldr	r5, [r4, #20]
 8007b54:	6909      	ldr	r1, [r1, #16]
 8007b56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b5a:	eba3 0901 	sub.w	r9, r3, r1
 8007b5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b62:	1c7b      	adds	r3, r7, #1
 8007b64:	444b      	add	r3, r9
 8007b66:	106d      	asrs	r5, r5, #1
 8007b68:	429d      	cmp	r5, r3
 8007b6a:	bf38      	it	cc
 8007b6c:	461d      	movcc	r5, r3
 8007b6e:	0553      	lsls	r3, r2, #21
 8007b70:	d527      	bpl.n	8007bc2 <__ssputs_r+0x8e>
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7ff ff52 	bl	8007a1c <_malloc_r>
 8007b78:	4606      	mov	r6, r0
 8007b7a:	b360      	cbz	r0, 8007bd6 <__ssputs_r+0xa2>
 8007b7c:	464a      	mov	r2, r9
 8007b7e:	6921      	ldr	r1, [r4, #16]
 8007b80:	f000 fafa 	bl	8008178 <memcpy>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	6126      	str	r6, [r4, #16]
 8007b92:	444e      	add	r6, r9
 8007b94:	6026      	str	r6, [r4, #0]
 8007b96:	463e      	mov	r6, r7
 8007b98:	6165      	str	r5, [r4, #20]
 8007b9a:	eba5 0509 	sub.w	r5, r5, r9
 8007b9e:	60a5      	str	r5, [r4, #8]
 8007ba0:	42be      	cmp	r6, r7
 8007ba2:	d900      	bls.n	8007ba6 <__ssputs_r+0x72>
 8007ba4:	463e      	mov	r6, r7
 8007ba6:	4632      	mov	r2, r6
 8007ba8:	4641      	mov	r1, r8
 8007baa:	6820      	ldr	r0, [r4, #0]
 8007bac:	f000 faac 	bl	8008108 <memmove>
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	68a3      	ldr	r3, [r4, #8]
 8007bb4:	1b9b      	subs	r3, r3, r6
 8007bb6:	60a3      	str	r3, [r4, #8]
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	4433      	add	r3, r6
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	f000 fae6 	bl	8008194 <_realloc_r>
 8007bc8:	4606      	mov	r6, r0
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1e0      	bne.n	8007b90 <__ssputs_r+0x5c>
 8007bce:	4650      	mov	r0, sl
 8007bd0:	6921      	ldr	r1, [r4, #16]
 8007bd2:	f7ff feb9 	bl	8007948 <_free_r>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	f8ca 3000 	str.w	r3, [sl]
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f04f 30ff 	mov.w	r0, #4294967295
 8007be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	e7e9      	b.n	8007bbe <__ssputs_r+0x8a>
	...

08007bec <_svfiprintf_r>:
 8007bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4698      	mov	r8, r3
 8007bf2:	898b      	ldrh	r3, [r1, #12]
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	061b      	lsls	r3, r3, #24
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	4614      	mov	r4, r2
 8007bfc:	b09d      	sub	sp, #116	@ 0x74
 8007bfe:	d510      	bpl.n	8007c22 <_svfiprintf_r+0x36>
 8007c00:	690b      	ldr	r3, [r1, #16]
 8007c02:	b973      	cbnz	r3, 8007c22 <_svfiprintf_r+0x36>
 8007c04:	2140      	movs	r1, #64	@ 0x40
 8007c06:	f7ff ff09 	bl	8007a1c <_malloc_r>
 8007c0a:	6028      	str	r0, [r5, #0]
 8007c0c:	6128      	str	r0, [r5, #16]
 8007c0e:	b930      	cbnz	r0, 8007c1e <_svfiprintf_r+0x32>
 8007c10:	230c      	movs	r3, #12
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	b01d      	add	sp, #116	@ 0x74
 8007c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1e:	2340      	movs	r3, #64	@ 0x40
 8007c20:	616b      	str	r3, [r5, #20]
 8007c22:	2300      	movs	r3, #0
 8007c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c26:	2320      	movs	r3, #32
 8007c28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c2c:	2330      	movs	r3, #48	@ 0x30
 8007c2e:	f04f 0901 	mov.w	r9, #1
 8007c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007dd0 <_svfiprintf_r+0x1e4>
 8007c3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c3e:	4623      	mov	r3, r4
 8007c40:	469a      	mov	sl, r3
 8007c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c46:	b10a      	cbz	r2, 8007c4c <_svfiprintf_r+0x60>
 8007c48:	2a25      	cmp	r2, #37	@ 0x25
 8007c4a:	d1f9      	bne.n	8007c40 <_svfiprintf_r+0x54>
 8007c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c50:	d00b      	beq.n	8007c6a <_svfiprintf_r+0x7e>
 8007c52:	465b      	mov	r3, fp
 8007c54:	4622      	mov	r2, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f7ff ff6b 	bl	8007b34 <__ssputs_r>
 8007c5e:	3001      	adds	r0, #1
 8007c60:	f000 80a7 	beq.w	8007db2 <_svfiprintf_r+0x1c6>
 8007c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c66:	445a      	add	r2, fp
 8007c68:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 809f 	beq.w	8007db2 <_svfiprintf_r+0x1c6>
 8007c74:	2300      	movs	r3, #0
 8007c76:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c7e:	f10a 0a01 	add.w	sl, sl, #1
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	9307      	str	r3, [sp, #28]
 8007c86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c8c:	4654      	mov	r4, sl
 8007c8e:	2205      	movs	r2, #5
 8007c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c94:	484e      	ldr	r0, [pc, #312]	@ (8007dd0 <_svfiprintf_r+0x1e4>)
 8007c96:	f000 fa61 	bl	800815c <memchr>
 8007c9a:	9a04      	ldr	r2, [sp, #16]
 8007c9c:	b9d8      	cbnz	r0, 8007cd6 <_svfiprintf_r+0xea>
 8007c9e:	06d0      	lsls	r0, r2, #27
 8007ca0:	bf44      	itt	mi
 8007ca2:	2320      	movmi	r3, #32
 8007ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca8:	0711      	lsls	r1, r2, #28
 8007caa:	bf44      	itt	mi
 8007cac:	232b      	movmi	r3, #43	@ 0x2b
 8007cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cb8:	d015      	beq.n	8007ce6 <_svfiprintf_r+0xfa>
 8007cba:	4654      	mov	r4, sl
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f04f 0c0a 	mov.w	ip, #10
 8007cc2:	9a07      	ldr	r2, [sp, #28]
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cca:	3b30      	subs	r3, #48	@ 0x30
 8007ccc:	2b09      	cmp	r3, #9
 8007cce:	d94b      	bls.n	8007d68 <_svfiprintf_r+0x17c>
 8007cd0:	b1b0      	cbz	r0, 8007d00 <_svfiprintf_r+0x114>
 8007cd2:	9207      	str	r2, [sp, #28]
 8007cd4:	e014      	b.n	8007d00 <_svfiprintf_r+0x114>
 8007cd6:	eba0 0308 	sub.w	r3, r0, r8
 8007cda:	fa09 f303 	lsl.w	r3, r9, r3
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	46a2      	mov	sl, r4
 8007ce2:	9304      	str	r3, [sp, #16]
 8007ce4:	e7d2      	b.n	8007c8c <_svfiprintf_r+0xa0>
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	1d19      	adds	r1, r3, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	9103      	str	r1, [sp, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfbb      	ittet	lt
 8007cf2:	425b      	neglt	r3, r3
 8007cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cf8:	9307      	strge	r3, [sp, #28]
 8007cfa:	9307      	strlt	r3, [sp, #28]
 8007cfc:	bfb8      	it	lt
 8007cfe:	9204      	strlt	r2, [sp, #16]
 8007d00:	7823      	ldrb	r3, [r4, #0]
 8007d02:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d04:	d10a      	bne.n	8007d1c <_svfiprintf_r+0x130>
 8007d06:	7863      	ldrb	r3, [r4, #1]
 8007d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d0a:	d132      	bne.n	8007d72 <_svfiprintf_r+0x186>
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	3402      	adds	r4, #2
 8007d10:	1d1a      	adds	r2, r3, #4
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	9203      	str	r2, [sp, #12]
 8007d16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d1a:	9305      	str	r3, [sp, #20]
 8007d1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007dd4 <_svfiprintf_r+0x1e8>
 8007d20:	2203      	movs	r2, #3
 8007d22:	4650      	mov	r0, sl
 8007d24:	7821      	ldrb	r1, [r4, #0]
 8007d26:	f000 fa19 	bl	800815c <memchr>
 8007d2a:	b138      	cbz	r0, 8007d3c <_svfiprintf_r+0x150>
 8007d2c:	2240      	movs	r2, #64	@ 0x40
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	eba0 000a 	sub.w	r0, r0, sl
 8007d34:	4082      	lsls	r2, r0
 8007d36:	4313      	orrs	r3, r2
 8007d38:	3401      	adds	r4, #1
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d40:	2206      	movs	r2, #6
 8007d42:	4825      	ldr	r0, [pc, #148]	@ (8007dd8 <_svfiprintf_r+0x1ec>)
 8007d44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d48:	f000 fa08 	bl	800815c <memchr>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d036      	beq.n	8007dbe <_svfiprintf_r+0x1d2>
 8007d50:	4b22      	ldr	r3, [pc, #136]	@ (8007ddc <_svfiprintf_r+0x1f0>)
 8007d52:	bb1b      	cbnz	r3, 8007d9c <_svfiprintf_r+0x1b0>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	3307      	adds	r3, #7
 8007d58:	f023 0307 	bic.w	r3, r3, #7
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	9303      	str	r3, [sp, #12]
 8007d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d62:	4433      	add	r3, r6
 8007d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d66:	e76a      	b.n	8007c3e <_svfiprintf_r+0x52>
 8007d68:	460c      	mov	r4, r1
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d70:	e7a8      	b.n	8007cc4 <_svfiprintf_r+0xd8>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f04f 0c0a 	mov.w	ip, #10
 8007d78:	4619      	mov	r1, r3
 8007d7a:	3401      	adds	r4, #1
 8007d7c:	9305      	str	r3, [sp, #20]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d84:	3a30      	subs	r2, #48	@ 0x30
 8007d86:	2a09      	cmp	r2, #9
 8007d88:	d903      	bls.n	8007d92 <_svfiprintf_r+0x1a6>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0c6      	beq.n	8007d1c <_svfiprintf_r+0x130>
 8007d8e:	9105      	str	r1, [sp, #20]
 8007d90:	e7c4      	b.n	8007d1c <_svfiprintf_r+0x130>
 8007d92:	4604      	mov	r4, r0
 8007d94:	2301      	movs	r3, #1
 8007d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d9a:	e7f0      	b.n	8007d7e <_svfiprintf_r+0x192>
 8007d9c:	ab03      	add	r3, sp, #12
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	462a      	mov	r2, r5
 8007da2:	4638      	mov	r0, r7
 8007da4:	4b0e      	ldr	r3, [pc, #56]	@ (8007de0 <_svfiprintf_r+0x1f4>)
 8007da6:	a904      	add	r1, sp, #16
 8007da8:	f3af 8000 	nop.w
 8007dac:	1c42      	adds	r2, r0, #1
 8007dae:	4606      	mov	r6, r0
 8007db0:	d1d6      	bne.n	8007d60 <_svfiprintf_r+0x174>
 8007db2:	89ab      	ldrh	r3, [r5, #12]
 8007db4:	065b      	lsls	r3, r3, #25
 8007db6:	f53f af2d 	bmi.w	8007c14 <_svfiprintf_r+0x28>
 8007dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dbc:	e72c      	b.n	8007c18 <_svfiprintf_r+0x2c>
 8007dbe:	ab03      	add	r3, sp, #12
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	4b06      	ldr	r3, [pc, #24]	@ (8007de0 <_svfiprintf_r+0x1f4>)
 8007dc8:	a904      	add	r1, sp, #16
 8007dca:	f000 f87d 	bl	8007ec8 <_printf_i>
 8007dce:	e7ed      	b.n	8007dac <_svfiprintf_r+0x1c0>
 8007dd0:	08009273 	.word	0x08009273
 8007dd4:	08009279 	.word	0x08009279
 8007dd8:	0800927d 	.word	0x0800927d
 8007ddc:	00000000 	.word	0x00000000
 8007de0:	08007b35 	.word	0x08007b35

08007de4 <_printf_common>:
 8007de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	4616      	mov	r6, r2
 8007dea:	4698      	mov	r8, r3
 8007dec:	688a      	ldr	r2, [r1, #8]
 8007dee:	690b      	ldr	r3, [r1, #16]
 8007df0:	4607      	mov	r7, r0
 8007df2:	4293      	cmp	r3, r2
 8007df4:	bfb8      	it	lt
 8007df6:	4613      	movlt	r3, r2
 8007df8:	6033      	str	r3, [r6, #0]
 8007dfa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dfe:	460c      	mov	r4, r1
 8007e00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e04:	b10a      	cbz	r2, 8007e0a <_printf_common+0x26>
 8007e06:	3301      	adds	r3, #1
 8007e08:	6033      	str	r3, [r6, #0]
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	0699      	lsls	r1, r3, #26
 8007e0e:	bf42      	ittt	mi
 8007e10:	6833      	ldrmi	r3, [r6, #0]
 8007e12:	3302      	addmi	r3, #2
 8007e14:	6033      	strmi	r3, [r6, #0]
 8007e16:	6825      	ldr	r5, [r4, #0]
 8007e18:	f015 0506 	ands.w	r5, r5, #6
 8007e1c:	d106      	bne.n	8007e2c <_printf_common+0x48>
 8007e1e:	f104 0a19 	add.w	sl, r4, #25
 8007e22:	68e3      	ldr	r3, [r4, #12]
 8007e24:	6832      	ldr	r2, [r6, #0]
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	42ab      	cmp	r3, r5
 8007e2a:	dc2b      	bgt.n	8007e84 <_printf_common+0xa0>
 8007e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	3b00      	subs	r3, #0
 8007e34:	bf18      	it	ne
 8007e36:	2301      	movne	r3, #1
 8007e38:	0692      	lsls	r2, r2, #26
 8007e3a:	d430      	bmi.n	8007e9e <_printf_common+0xba>
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e44:	47c8      	blx	r9
 8007e46:	3001      	adds	r0, #1
 8007e48:	d023      	beq.n	8007e92 <_printf_common+0xae>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	6922      	ldr	r2, [r4, #16]
 8007e4e:	f003 0306 	and.w	r3, r3, #6
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	bf14      	ite	ne
 8007e56:	2500      	movne	r5, #0
 8007e58:	6833      	ldreq	r3, [r6, #0]
 8007e5a:	f04f 0600 	mov.w	r6, #0
 8007e5e:	bf08      	it	eq
 8007e60:	68e5      	ldreq	r5, [r4, #12]
 8007e62:	f104 041a 	add.w	r4, r4, #26
 8007e66:	bf08      	it	eq
 8007e68:	1aed      	subeq	r5, r5, r3
 8007e6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e6e:	bf08      	it	eq
 8007e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e74:	4293      	cmp	r3, r2
 8007e76:	bfc4      	itt	gt
 8007e78:	1a9b      	subgt	r3, r3, r2
 8007e7a:	18ed      	addgt	r5, r5, r3
 8007e7c:	42b5      	cmp	r5, r6
 8007e7e:	d11a      	bne.n	8007eb6 <_printf_common+0xd2>
 8007e80:	2000      	movs	r0, #0
 8007e82:	e008      	b.n	8007e96 <_printf_common+0xb2>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4652      	mov	r2, sl
 8007e88:	4641      	mov	r1, r8
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	47c8      	blx	r9
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d103      	bne.n	8007e9a <_printf_common+0xb6>
 8007e92:	f04f 30ff 	mov.w	r0, #4294967295
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	3501      	adds	r5, #1
 8007e9c:	e7c1      	b.n	8007e22 <_printf_common+0x3e>
 8007e9e:	2030      	movs	r0, #48	@ 0x30
 8007ea0:	18e1      	adds	r1, r4, r3
 8007ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007eac:	4422      	add	r2, r4
 8007eae:	3302      	adds	r3, #2
 8007eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007eb4:	e7c2      	b.n	8007e3c <_printf_common+0x58>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4641      	mov	r1, r8
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	47c8      	blx	r9
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d0e6      	beq.n	8007e92 <_printf_common+0xae>
 8007ec4:	3601      	adds	r6, #1
 8007ec6:	e7d9      	b.n	8007e7c <_printf_common+0x98>

08007ec8 <_printf_i>:
 8007ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ecc:	7e0f      	ldrb	r7, [r1, #24]
 8007ece:	4691      	mov	r9, r2
 8007ed0:	2f78      	cmp	r7, #120	@ 0x78
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	469a      	mov	sl, r3
 8007ed8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ede:	d807      	bhi.n	8007ef0 <_printf_i+0x28>
 8007ee0:	2f62      	cmp	r7, #98	@ 0x62
 8007ee2:	d80a      	bhi.n	8007efa <_printf_i+0x32>
 8007ee4:	2f00      	cmp	r7, #0
 8007ee6:	f000 80d3 	beq.w	8008090 <_printf_i+0x1c8>
 8007eea:	2f58      	cmp	r7, #88	@ 0x58
 8007eec:	f000 80ba 	beq.w	8008064 <_printf_i+0x19c>
 8007ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ef8:	e03a      	b.n	8007f70 <_printf_i+0xa8>
 8007efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007efe:	2b15      	cmp	r3, #21
 8007f00:	d8f6      	bhi.n	8007ef0 <_printf_i+0x28>
 8007f02:	a101      	add	r1, pc, #4	@ (adr r1, 8007f08 <_printf_i+0x40>)
 8007f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f08:	08007f61 	.word	0x08007f61
 8007f0c:	08007f75 	.word	0x08007f75
 8007f10:	08007ef1 	.word	0x08007ef1
 8007f14:	08007ef1 	.word	0x08007ef1
 8007f18:	08007ef1 	.word	0x08007ef1
 8007f1c:	08007ef1 	.word	0x08007ef1
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	08007ef1 	.word	0x08007ef1
 8007f28:	08007ef1 	.word	0x08007ef1
 8007f2c:	08007ef1 	.word	0x08007ef1
 8007f30:	08007ef1 	.word	0x08007ef1
 8007f34:	08008077 	.word	0x08008077
 8007f38:	08007f9f 	.word	0x08007f9f
 8007f3c:	08008031 	.word	0x08008031
 8007f40:	08007ef1 	.word	0x08007ef1
 8007f44:	08007ef1 	.word	0x08007ef1
 8007f48:	08008099 	.word	0x08008099
 8007f4c:	08007ef1 	.word	0x08007ef1
 8007f50:	08007f9f 	.word	0x08007f9f
 8007f54:	08007ef1 	.word	0x08007ef1
 8007f58:	08007ef1 	.word	0x08007ef1
 8007f5c:	08008039 	.word	0x08008039
 8007f60:	6833      	ldr	r3, [r6, #0]
 8007f62:	1d1a      	adds	r2, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6032      	str	r2, [r6, #0]
 8007f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f70:	2301      	movs	r3, #1
 8007f72:	e09e      	b.n	80080b2 <_printf_i+0x1ea>
 8007f74:	6833      	ldr	r3, [r6, #0]
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	1d19      	adds	r1, r3, #4
 8007f7a:	6031      	str	r1, [r6, #0]
 8007f7c:	0606      	lsls	r6, r0, #24
 8007f7e:	d501      	bpl.n	8007f84 <_printf_i+0xbc>
 8007f80:	681d      	ldr	r5, [r3, #0]
 8007f82:	e003      	b.n	8007f8c <_printf_i+0xc4>
 8007f84:	0645      	lsls	r5, r0, #25
 8007f86:	d5fb      	bpl.n	8007f80 <_printf_i+0xb8>
 8007f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	da03      	bge.n	8007f98 <_printf_i+0xd0>
 8007f90:	232d      	movs	r3, #45	@ 0x2d
 8007f92:	426d      	negs	r5, r5
 8007f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f98:	230a      	movs	r3, #10
 8007f9a:	4859      	ldr	r0, [pc, #356]	@ (8008100 <_printf_i+0x238>)
 8007f9c:	e011      	b.n	8007fc2 <_printf_i+0xfa>
 8007f9e:	6821      	ldr	r1, [r4, #0]
 8007fa0:	6833      	ldr	r3, [r6, #0]
 8007fa2:	0608      	lsls	r0, r1, #24
 8007fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fa8:	d402      	bmi.n	8007fb0 <_printf_i+0xe8>
 8007faa:	0649      	lsls	r1, r1, #25
 8007fac:	bf48      	it	mi
 8007fae:	b2ad      	uxthmi	r5, r5
 8007fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fb2:	6033      	str	r3, [r6, #0]
 8007fb4:	bf14      	ite	ne
 8007fb6:	230a      	movne	r3, #10
 8007fb8:	2308      	moveq	r3, #8
 8007fba:	4851      	ldr	r0, [pc, #324]	@ (8008100 <_printf_i+0x238>)
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fc2:	6866      	ldr	r6, [r4, #4]
 8007fc4:	2e00      	cmp	r6, #0
 8007fc6:	bfa8      	it	ge
 8007fc8:	6821      	ldrge	r1, [r4, #0]
 8007fca:	60a6      	str	r6, [r4, #8]
 8007fcc:	bfa4      	itt	ge
 8007fce:	f021 0104 	bicge.w	r1, r1, #4
 8007fd2:	6021      	strge	r1, [r4, #0]
 8007fd4:	b90d      	cbnz	r5, 8007fda <_printf_i+0x112>
 8007fd6:	2e00      	cmp	r6, #0
 8007fd8:	d04b      	beq.n	8008072 <_printf_i+0x1aa>
 8007fda:	4616      	mov	r6, r2
 8007fdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fe0:	fb03 5711 	mls	r7, r3, r1, r5
 8007fe4:	5dc7      	ldrb	r7, [r0, r7]
 8007fe6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fea:	462f      	mov	r7, r5
 8007fec:	42bb      	cmp	r3, r7
 8007fee:	460d      	mov	r5, r1
 8007ff0:	d9f4      	bls.n	8007fdc <_printf_i+0x114>
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d10b      	bne.n	800800e <_printf_i+0x146>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	07df      	lsls	r7, r3, #31
 8007ffa:	d508      	bpl.n	800800e <_printf_i+0x146>
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	6861      	ldr	r1, [r4, #4]
 8008000:	4299      	cmp	r1, r3
 8008002:	bfde      	ittt	le
 8008004:	2330      	movle	r3, #48	@ 0x30
 8008006:	f806 3c01 	strble.w	r3, [r6, #-1]
 800800a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800800e:	1b92      	subs	r2, r2, r6
 8008010:	6122      	str	r2, [r4, #16]
 8008012:	464b      	mov	r3, r9
 8008014:	4621      	mov	r1, r4
 8008016:	4640      	mov	r0, r8
 8008018:	f8cd a000 	str.w	sl, [sp]
 800801c:	aa03      	add	r2, sp, #12
 800801e:	f7ff fee1 	bl	8007de4 <_printf_common>
 8008022:	3001      	adds	r0, #1
 8008024:	d14a      	bne.n	80080bc <_printf_i+0x1f4>
 8008026:	f04f 30ff 	mov.w	r0, #4294967295
 800802a:	b004      	add	sp, #16
 800802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	f043 0320 	orr.w	r3, r3, #32
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	2778      	movs	r7, #120	@ 0x78
 800803a:	4832      	ldr	r0, [pc, #200]	@ (8008104 <_printf_i+0x23c>)
 800803c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	6831      	ldr	r1, [r6, #0]
 8008044:	061f      	lsls	r7, r3, #24
 8008046:	f851 5b04 	ldr.w	r5, [r1], #4
 800804a:	d402      	bmi.n	8008052 <_printf_i+0x18a>
 800804c:	065f      	lsls	r7, r3, #25
 800804e:	bf48      	it	mi
 8008050:	b2ad      	uxthmi	r5, r5
 8008052:	6031      	str	r1, [r6, #0]
 8008054:	07d9      	lsls	r1, r3, #31
 8008056:	bf44      	itt	mi
 8008058:	f043 0320 	orrmi.w	r3, r3, #32
 800805c:	6023      	strmi	r3, [r4, #0]
 800805e:	b11d      	cbz	r5, 8008068 <_printf_i+0x1a0>
 8008060:	2310      	movs	r3, #16
 8008062:	e7ab      	b.n	8007fbc <_printf_i+0xf4>
 8008064:	4826      	ldr	r0, [pc, #152]	@ (8008100 <_printf_i+0x238>)
 8008066:	e7e9      	b.n	800803c <_printf_i+0x174>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	f023 0320 	bic.w	r3, r3, #32
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	e7f6      	b.n	8008060 <_printf_i+0x198>
 8008072:	4616      	mov	r6, r2
 8008074:	e7bd      	b.n	8007ff2 <_printf_i+0x12a>
 8008076:	6833      	ldr	r3, [r6, #0]
 8008078:	6825      	ldr	r5, [r4, #0]
 800807a:	1d18      	adds	r0, r3, #4
 800807c:	6961      	ldr	r1, [r4, #20]
 800807e:	6030      	str	r0, [r6, #0]
 8008080:	062e      	lsls	r6, r5, #24
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	d501      	bpl.n	800808a <_printf_i+0x1c2>
 8008086:	6019      	str	r1, [r3, #0]
 8008088:	e002      	b.n	8008090 <_printf_i+0x1c8>
 800808a:	0668      	lsls	r0, r5, #25
 800808c:	d5fb      	bpl.n	8008086 <_printf_i+0x1be>
 800808e:	8019      	strh	r1, [r3, #0]
 8008090:	2300      	movs	r3, #0
 8008092:	4616      	mov	r6, r2
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	e7bc      	b.n	8008012 <_printf_i+0x14a>
 8008098:	6833      	ldr	r3, [r6, #0]
 800809a:	2100      	movs	r1, #0
 800809c:	1d1a      	adds	r2, r3, #4
 800809e:	6032      	str	r2, [r6, #0]
 80080a0:	681e      	ldr	r6, [r3, #0]
 80080a2:	6862      	ldr	r2, [r4, #4]
 80080a4:	4630      	mov	r0, r6
 80080a6:	f000 f859 	bl	800815c <memchr>
 80080aa:	b108      	cbz	r0, 80080b0 <_printf_i+0x1e8>
 80080ac:	1b80      	subs	r0, r0, r6
 80080ae:	6060      	str	r0, [r4, #4]
 80080b0:	6863      	ldr	r3, [r4, #4]
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	2300      	movs	r3, #0
 80080b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ba:	e7aa      	b.n	8008012 <_printf_i+0x14a>
 80080bc:	4632      	mov	r2, r6
 80080be:	4649      	mov	r1, r9
 80080c0:	4640      	mov	r0, r8
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	47d0      	blx	sl
 80080c6:	3001      	adds	r0, #1
 80080c8:	d0ad      	beq.n	8008026 <_printf_i+0x15e>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	079b      	lsls	r3, r3, #30
 80080ce:	d413      	bmi.n	80080f8 <_printf_i+0x230>
 80080d0:	68e0      	ldr	r0, [r4, #12]
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	4298      	cmp	r0, r3
 80080d6:	bfb8      	it	lt
 80080d8:	4618      	movlt	r0, r3
 80080da:	e7a6      	b.n	800802a <_printf_i+0x162>
 80080dc:	2301      	movs	r3, #1
 80080de:	4632      	mov	r2, r6
 80080e0:	4649      	mov	r1, r9
 80080e2:	4640      	mov	r0, r8
 80080e4:	47d0      	blx	sl
 80080e6:	3001      	adds	r0, #1
 80080e8:	d09d      	beq.n	8008026 <_printf_i+0x15e>
 80080ea:	3501      	adds	r5, #1
 80080ec:	68e3      	ldr	r3, [r4, #12]
 80080ee:	9903      	ldr	r1, [sp, #12]
 80080f0:	1a5b      	subs	r3, r3, r1
 80080f2:	42ab      	cmp	r3, r5
 80080f4:	dcf2      	bgt.n	80080dc <_printf_i+0x214>
 80080f6:	e7eb      	b.n	80080d0 <_printf_i+0x208>
 80080f8:	2500      	movs	r5, #0
 80080fa:	f104 0619 	add.w	r6, r4, #25
 80080fe:	e7f5      	b.n	80080ec <_printf_i+0x224>
 8008100:	08009284 	.word	0x08009284
 8008104:	08009295 	.word	0x08009295

08008108 <memmove>:
 8008108:	4288      	cmp	r0, r1
 800810a:	b510      	push	{r4, lr}
 800810c:	eb01 0402 	add.w	r4, r1, r2
 8008110:	d902      	bls.n	8008118 <memmove+0x10>
 8008112:	4284      	cmp	r4, r0
 8008114:	4623      	mov	r3, r4
 8008116:	d807      	bhi.n	8008128 <memmove+0x20>
 8008118:	1e43      	subs	r3, r0, #1
 800811a:	42a1      	cmp	r1, r4
 800811c:	d008      	beq.n	8008130 <memmove+0x28>
 800811e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008126:	e7f8      	b.n	800811a <memmove+0x12>
 8008128:	4601      	mov	r1, r0
 800812a:	4402      	add	r2, r0
 800812c:	428a      	cmp	r2, r1
 800812e:	d100      	bne.n	8008132 <memmove+0x2a>
 8008130:	bd10      	pop	{r4, pc}
 8008132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800813a:	e7f7      	b.n	800812c <memmove+0x24>

0800813c <_sbrk_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	2300      	movs	r3, #0
 8008140:	4d05      	ldr	r5, [pc, #20]	@ (8008158 <_sbrk_r+0x1c>)
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7fa fa64 	bl	8002614 <_sbrk>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_sbrk_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_sbrk_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20000fc4 	.word	0x20000fc4

0800815c <memchr>:
 800815c:	4603      	mov	r3, r0
 800815e:	b510      	push	{r4, lr}
 8008160:	b2c9      	uxtb	r1, r1
 8008162:	4402      	add	r2, r0
 8008164:	4293      	cmp	r3, r2
 8008166:	4618      	mov	r0, r3
 8008168:	d101      	bne.n	800816e <memchr+0x12>
 800816a:	2000      	movs	r0, #0
 800816c:	e003      	b.n	8008176 <memchr+0x1a>
 800816e:	7804      	ldrb	r4, [r0, #0]
 8008170:	3301      	adds	r3, #1
 8008172:	428c      	cmp	r4, r1
 8008174:	d1f6      	bne.n	8008164 <memchr+0x8>
 8008176:	bd10      	pop	{r4, pc}

08008178 <memcpy>:
 8008178:	440a      	add	r2, r1
 800817a:	4291      	cmp	r1, r2
 800817c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008180:	d100      	bne.n	8008184 <memcpy+0xc>
 8008182:	4770      	bx	lr
 8008184:	b510      	push	{r4, lr}
 8008186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800818a:	4291      	cmp	r1, r2
 800818c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008190:	d1f9      	bne.n	8008186 <memcpy+0xe>
 8008192:	bd10      	pop	{r4, pc}

08008194 <_realloc_r>:
 8008194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008198:	4680      	mov	r8, r0
 800819a:	4615      	mov	r5, r2
 800819c:	460c      	mov	r4, r1
 800819e:	b921      	cbnz	r1, 80081aa <_realloc_r+0x16>
 80081a0:	4611      	mov	r1, r2
 80081a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a6:	f7ff bc39 	b.w	8007a1c <_malloc_r>
 80081aa:	b92a      	cbnz	r2, 80081b8 <_realloc_r+0x24>
 80081ac:	f7ff fbcc 	bl	8007948 <_free_r>
 80081b0:	2400      	movs	r4, #0
 80081b2:	4620      	mov	r0, r4
 80081b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b8:	f000 f81a 	bl	80081f0 <_malloc_usable_size_r>
 80081bc:	4285      	cmp	r5, r0
 80081be:	4606      	mov	r6, r0
 80081c0:	d802      	bhi.n	80081c8 <_realloc_r+0x34>
 80081c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80081c6:	d8f4      	bhi.n	80081b2 <_realloc_r+0x1e>
 80081c8:	4629      	mov	r1, r5
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7ff fc26 	bl	8007a1c <_malloc_r>
 80081d0:	4607      	mov	r7, r0
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d0ec      	beq.n	80081b0 <_realloc_r+0x1c>
 80081d6:	42b5      	cmp	r5, r6
 80081d8:	462a      	mov	r2, r5
 80081da:	4621      	mov	r1, r4
 80081dc:	bf28      	it	cs
 80081de:	4632      	movcs	r2, r6
 80081e0:	f7ff ffca 	bl	8008178 <memcpy>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4640      	mov	r0, r8
 80081e8:	f7ff fbae 	bl	8007948 <_free_r>
 80081ec:	463c      	mov	r4, r7
 80081ee:	e7e0      	b.n	80081b2 <_realloc_r+0x1e>

080081f0 <_malloc_usable_size_r>:
 80081f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f4:	1f18      	subs	r0, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bfbc      	itt	lt
 80081fa:	580b      	ldrlt	r3, [r1, r0]
 80081fc:	18c0      	addlt	r0, r0, r3
 80081fe:	4770      	bx	lr

08008200 <pow>:
 8008200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008204:	4614      	mov	r4, r2
 8008206:	461d      	mov	r5, r3
 8008208:	4680      	mov	r8, r0
 800820a:	4689      	mov	r9, r1
 800820c:	f000 f8ac 	bl	8008368 <__ieee754_pow>
 8008210:	4622      	mov	r2, r4
 8008212:	4606      	mov	r6, r0
 8008214:	460f      	mov	r7, r1
 8008216:	462b      	mov	r3, r5
 8008218:	4620      	mov	r0, r4
 800821a:	4629      	mov	r1, r5
 800821c:	f7f8 fbee 	bl	80009fc <__aeabi_dcmpun>
 8008220:	bbc8      	cbnz	r0, 8008296 <pow+0x96>
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	4640      	mov	r0, r8
 8008228:	4649      	mov	r1, r9
 800822a:	f7f8 fbb5 	bl	8000998 <__aeabi_dcmpeq>
 800822e:	b1b8      	cbz	r0, 8008260 <pow+0x60>
 8008230:	2200      	movs	r2, #0
 8008232:	2300      	movs	r3, #0
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 fbae 	bl	8000998 <__aeabi_dcmpeq>
 800823c:	2800      	cmp	r0, #0
 800823e:	d141      	bne.n	80082c4 <pow+0xc4>
 8008240:	4620      	mov	r0, r4
 8008242:	4629      	mov	r1, r5
 8008244:	f000 f844 	bl	80082d0 <finite>
 8008248:	b328      	cbz	r0, 8008296 <pow+0x96>
 800824a:	2200      	movs	r2, #0
 800824c:	2300      	movs	r3, #0
 800824e:	4620      	mov	r0, r4
 8008250:	4629      	mov	r1, r5
 8008252:	f7f8 fbab 	bl	80009ac <__aeabi_dcmplt>
 8008256:	b1f0      	cbz	r0, 8008296 <pow+0x96>
 8008258:	f7ff fb42 	bl	80078e0 <__errno>
 800825c:	2322      	movs	r3, #34	@ 0x22
 800825e:	e019      	b.n	8008294 <pow+0x94>
 8008260:	4630      	mov	r0, r6
 8008262:	4639      	mov	r1, r7
 8008264:	f000 f834 	bl	80082d0 <finite>
 8008268:	b9c8      	cbnz	r0, 800829e <pow+0x9e>
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	f000 f82f 	bl	80082d0 <finite>
 8008272:	b1a0      	cbz	r0, 800829e <pow+0x9e>
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f000 f82a 	bl	80082d0 <finite>
 800827c:	b178      	cbz	r0, 800829e <pow+0x9e>
 800827e:	4632      	mov	r2, r6
 8008280:	463b      	mov	r3, r7
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	f7f8 fbb9 	bl	80009fc <__aeabi_dcmpun>
 800828a:	2800      	cmp	r0, #0
 800828c:	d0e4      	beq.n	8008258 <pow+0x58>
 800828e:	f7ff fb27 	bl	80078e0 <__errno>
 8008292:	2321      	movs	r3, #33	@ 0x21
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	4630      	mov	r0, r6
 8008298:	4639      	mov	r1, r7
 800829a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829e:	2200      	movs	r2, #0
 80082a0:	2300      	movs	r3, #0
 80082a2:	4630      	mov	r0, r6
 80082a4:	4639      	mov	r1, r7
 80082a6:	f7f8 fb77 	bl	8000998 <__aeabi_dcmpeq>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d0f3      	beq.n	8008296 <pow+0x96>
 80082ae:	4640      	mov	r0, r8
 80082b0:	4649      	mov	r1, r9
 80082b2:	f000 f80d 	bl	80082d0 <finite>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d0ed      	beq.n	8008296 <pow+0x96>
 80082ba:	4620      	mov	r0, r4
 80082bc:	4629      	mov	r1, r5
 80082be:	f000 f807 	bl	80082d0 <finite>
 80082c2:	e7c8      	b.n	8008256 <pow+0x56>
 80082c4:	2600      	movs	r6, #0
 80082c6:	4f01      	ldr	r7, [pc, #4]	@ (80082cc <pow+0xcc>)
 80082c8:	e7e5      	b.n	8008296 <pow+0x96>
 80082ca:	bf00      	nop
 80082cc:	3ff00000 	.word	0x3ff00000

080082d0 <finite>:
 80082d0:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80082d4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80082d8:	0fc0      	lsrs	r0, r0, #31
 80082da:	4770      	bx	lr

080082dc <round>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80082e2:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 80082e6:	2a13      	cmp	r2, #19
 80082e8:	4604      	mov	r4, r0
 80082ea:	460d      	mov	r5, r1
 80082ec:	460b      	mov	r3, r1
 80082ee:	dc1a      	bgt.n	8008326 <round+0x4a>
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	da0b      	bge.n	800830c <round+0x30>
 80082f4:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80082f8:	3201      	adds	r2, #1
 80082fa:	bf04      	itt	eq
 80082fc:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008300:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008304:	2200      	movs	r2, #0
 8008306:	461d      	mov	r5, r3
 8008308:	4614      	mov	r4, r2
 800830a:	e016      	b.n	800833a <round+0x5e>
 800830c:	4815      	ldr	r0, [pc, #84]	@ (8008364 <round+0x88>)
 800830e:	4110      	asrs	r0, r2
 8008310:	4001      	ands	r1, r0
 8008312:	4321      	orrs	r1, r4
 8008314:	d011      	beq.n	800833a <round+0x5e>
 8008316:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800831a:	fa41 f202 	asr.w	r2, r1, r2
 800831e:	4413      	add	r3, r2
 8008320:	ea23 0300 	bic.w	r3, r3, r0
 8008324:	e7ee      	b.n	8008304 <round+0x28>
 8008326:	2a33      	cmp	r2, #51	@ 0x33
 8008328:	dd0a      	ble.n	8008340 <round+0x64>
 800832a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800832e:	d104      	bne.n	800833a <round+0x5e>
 8008330:	4602      	mov	r2, r0
 8008332:	f7f7 ff13 	bl	800015c <__adddf3>
 8008336:	4604      	mov	r4, r0
 8008338:	460d      	mov	r5, r1
 800833a:	4620      	mov	r0, r4
 800833c:	4629      	mov	r1, r5
 800833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008348:	40f8      	lsrs	r0, r7
 800834a:	4220      	tst	r0, r4
 800834c:	d0f5      	beq.n	800833a <round+0x5e>
 800834e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008352:	2201      	movs	r2, #1
 8008354:	408a      	lsls	r2, r1
 8008356:	1912      	adds	r2, r2, r4
 8008358:	bf28      	it	cs
 800835a:	3301      	addcs	r3, #1
 800835c:	ea22 0200 	bic.w	r2, r2, r0
 8008360:	e7d1      	b.n	8008306 <round+0x2a>
 8008362:	bf00      	nop
 8008364:	000fffff 	.word	0x000fffff

08008368 <__ieee754_pow>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	b091      	sub	sp, #68	@ 0x44
 800836e:	e9cd 2300 	strd	r2, r3, [sp]
 8008372:	468b      	mov	fp, r1
 8008374:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008378:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800837c:	4682      	mov	sl, r0
 800837e:	ea57 0001 	orrs.w	r0, r7, r1
 8008382:	d112      	bne.n	80083aa <__ieee754_pow+0x42>
 8008384:	4653      	mov	r3, sl
 8008386:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800838a:	18db      	adds	r3, r3, r3
 800838c:	4152      	adcs	r2, r2
 800838e:	4298      	cmp	r0, r3
 8008390:	4b91      	ldr	r3, [pc, #580]	@ (80085d8 <__ieee754_pow+0x270>)
 8008392:	4193      	sbcs	r3, r2
 8008394:	f080 84ce 	bcs.w	8008d34 <__ieee754_pow+0x9cc>
 8008398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800839c:	4650      	mov	r0, sl
 800839e:	4659      	mov	r1, fp
 80083a0:	f7f7 fedc 	bl	800015c <__adddf3>
 80083a4:	b011      	add	sp, #68	@ 0x44
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083aa:	4b8c      	ldr	r3, [pc, #560]	@ (80085dc <__ieee754_pow+0x274>)
 80083ac:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80083b0:	429e      	cmp	r6, r3
 80083b2:	465d      	mov	r5, fp
 80083b4:	46d1      	mov	r9, sl
 80083b6:	d807      	bhi.n	80083c8 <__ieee754_pow+0x60>
 80083b8:	d102      	bne.n	80083c0 <__ieee754_pow+0x58>
 80083ba:	f1ba 0f00 	cmp.w	sl, #0
 80083be:	d1eb      	bne.n	8008398 <__ieee754_pow+0x30>
 80083c0:	429f      	cmp	r7, r3
 80083c2:	d801      	bhi.n	80083c8 <__ieee754_pow+0x60>
 80083c4:	d10f      	bne.n	80083e6 <__ieee754_pow+0x7e>
 80083c6:	b171      	cbz	r1, 80083e6 <__ieee754_pow+0x7e>
 80083c8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80083cc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80083d0:	ea55 0509 	orrs.w	r5, r5, r9
 80083d4:	d1e0      	bne.n	8008398 <__ieee754_pow+0x30>
 80083d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80083da:	18db      	adds	r3, r3, r3
 80083dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80083e0:	4152      	adcs	r2, r2
 80083e2:	429d      	cmp	r5, r3
 80083e4:	e7d4      	b.n	8008390 <__ieee754_pow+0x28>
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	4633      	mov	r3, r6
 80083ea:	da39      	bge.n	8008460 <__ieee754_pow+0xf8>
 80083ec:	4a7c      	ldr	r2, [pc, #496]	@ (80085e0 <__ieee754_pow+0x278>)
 80083ee:	4297      	cmp	r7, r2
 80083f0:	d84e      	bhi.n	8008490 <__ieee754_pow+0x128>
 80083f2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80083f6:	4297      	cmp	r7, r2
 80083f8:	f240 84ab 	bls.w	8008d52 <__ieee754_pow+0x9ea>
 80083fc:	153a      	asrs	r2, r7, #20
 80083fe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008402:	2a14      	cmp	r2, #20
 8008404:	dd0f      	ble.n	8008426 <__ieee754_pow+0xbe>
 8008406:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800840a:	fa21 f402 	lsr.w	r4, r1, r2
 800840e:	fa04 f202 	lsl.w	r2, r4, r2
 8008412:	428a      	cmp	r2, r1
 8008414:	f040 849d 	bne.w	8008d52 <__ieee754_pow+0x9ea>
 8008418:	f004 0401 	and.w	r4, r4, #1
 800841c:	f1c4 0402 	rsb	r4, r4, #2
 8008420:	2900      	cmp	r1, #0
 8008422:	d15a      	bne.n	80084da <__ieee754_pow+0x172>
 8008424:	e00e      	b.n	8008444 <__ieee754_pow+0xdc>
 8008426:	2900      	cmp	r1, #0
 8008428:	d156      	bne.n	80084d8 <__ieee754_pow+0x170>
 800842a:	f1c2 0214 	rsb	r2, r2, #20
 800842e:	fa47 f402 	asr.w	r4, r7, r2
 8008432:	fa04 f202 	lsl.w	r2, r4, r2
 8008436:	42ba      	cmp	r2, r7
 8008438:	f040 8488 	bne.w	8008d4c <__ieee754_pow+0x9e4>
 800843c:	f004 0401 	and.w	r4, r4, #1
 8008440:	f1c4 0402 	rsb	r4, r4, #2
 8008444:	4a67      	ldr	r2, [pc, #412]	@ (80085e4 <__ieee754_pow+0x27c>)
 8008446:	4297      	cmp	r7, r2
 8008448:	d130      	bne.n	80084ac <__ieee754_pow+0x144>
 800844a:	f1b8 0f00 	cmp.w	r8, #0
 800844e:	f280 8479 	bge.w	8008d44 <__ieee754_pow+0x9dc>
 8008452:	4652      	mov	r2, sl
 8008454:	465b      	mov	r3, fp
 8008456:	2000      	movs	r0, #0
 8008458:	4962      	ldr	r1, [pc, #392]	@ (80085e4 <__ieee754_pow+0x27c>)
 800845a:	f7f8 f95f 	bl	800071c <__aeabi_ddiv>
 800845e:	e7a1      	b.n	80083a4 <__ieee754_pow+0x3c>
 8008460:	2400      	movs	r4, #0
 8008462:	2900      	cmp	r1, #0
 8008464:	d139      	bne.n	80084da <__ieee754_pow+0x172>
 8008466:	4a5d      	ldr	r2, [pc, #372]	@ (80085dc <__ieee754_pow+0x274>)
 8008468:	4297      	cmp	r7, r2
 800846a:	d1eb      	bne.n	8008444 <__ieee754_pow+0xdc>
 800846c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8008470:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8008474:	ea53 0309 	orrs.w	r3, r3, r9
 8008478:	f000 845c 	beq.w	8008d34 <__ieee754_pow+0x9cc>
 800847c:	4b5a      	ldr	r3, [pc, #360]	@ (80085e8 <__ieee754_pow+0x280>)
 800847e:	429e      	cmp	r6, r3
 8008480:	d908      	bls.n	8008494 <__ieee754_pow+0x12c>
 8008482:	f1b8 0f00 	cmp.w	r8, #0
 8008486:	f2c0 8459 	blt.w	8008d3c <__ieee754_pow+0x9d4>
 800848a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800848e:	e789      	b.n	80083a4 <__ieee754_pow+0x3c>
 8008490:	2402      	movs	r4, #2
 8008492:	e7e6      	b.n	8008462 <__ieee754_pow+0xfa>
 8008494:	f1b8 0f00 	cmp.w	r8, #0
 8008498:	f04f 0000 	mov.w	r0, #0
 800849c:	f04f 0100 	mov.w	r1, #0
 80084a0:	da80      	bge.n	80083a4 <__ieee754_pow+0x3c>
 80084a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80084a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80084aa:	e77b      	b.n	80083a4 <__ieee754_pow+0x3c>
 80084ac:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80084b0:	d106      	bne.n	80084c0 <__ieee754_pow+0x158>
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	4650      	mov	r0, sl
 80084b8:	4659      	mov	r1, fp
 80084ba:	f7f8 f805 	bl	80004c8 <__aeabi_dmul>
 80084be:	e771      	b.n	80083a4 <__ieee754_pow+0x3c>
 80084c0:	4a4a      	ldr	r2, [pc, #296]	@ (80085ec <__ieee754_pow+0x284>)
 80084c2:	4590      	cmp	r8, r2
 80084c4:	d109      	bne.n	80084da <__ieee754_pow+0x172>
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	db07      	blt.n	80084da <__ieee754_pow+0x172>
 80084ca:	4650      	mov	r0, sl
 80084cc:	4659      	mov	r1, fp
 80084ce:	b011      	add	sp, #68	@ 0x44
 80084d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	f000 bd12 	b.w	8008efc <__ieee754_sqrt>
 80084d8:	2400      	movs	r4, #0
 80084da:	4650      	mov	r0, sl
 80084dc:	4659      	mov	r1, fp
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	f000 fc6a 	bl	8008db8 <fabs>
 80084e4:	9b02      	ldr	r3, [sp, #8]
 80084e6:	f1b9 0f00 	cmp.w	r9, #0
 80084ea:	d127      	bne.n	800853c <__ieee754_pow+0x1d4>
 80084ec:	4a3d      	ldr	r2, [pc, #244]	@ (80085e4 <__ieee754_pow+0x27c>)
 80084ee:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80084f2:	4594      	cmp	ip, r2
 80084f4:	d000      	beq.n	80084f8 <__ieee754_pow+0x190>
 80084f6:	bb0e      	cbnz	r6, 800853c <__ieee754_pow+0x1d4>
 80084f8:	f1b8 0f00 	cmp.w	r8, #0
 80084fc:	da05      	bge.n	800850a <__ieee754_pow+0x1a2>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	2000      	movs	r0, #0
 8008504:	4937      	ldr	r1, [pc, #220]	@ (80085e4 <__ieee754_pow+0x27c>)
 8008506:	f7f8 f909 	bl	800071c <__aeabi_ddiv>
 800850a:	2d00      	cmp	r5, #0
 800850c:	f6bf af4a 	bge.w	80083a4 <__ieee754_pow+0x3c>
 8008510:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008514:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008518:	4326      	orrs	r6, r4
 800851a:	d108      	bne.n	800852e <__ieee754_pow+0x1c6>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4610      	mov	r0, r2
 8008522:	4619      	mov	r1, r3
 8008524:	f7f7 fe18 	bl	8000158 <__aeabi_dsub>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	e795      	b.n	800845a <__ieee754_pow+0xf2>
 800852e:	2c01      	cmp	r4, #1
 8008530:	f47f af38 	bne.w	80083a4 <__ieee754_pow+0x3c>
 8008534:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008538:	4619      	mov	r1, r3
 800853a:	e733      	b.n	80083a4 <__ieee754_pow+0x3c>
 800853c:	0fea      	lsrs	r2, r5, #31
 800853e:	3a01      	subs	r2, #1
 8008540:	ea52 0c04 	orrs.w	ip, r2, r4
 8008544:	d102      	bne.n	800854c <__ieee754_pow+0x1e4>
 8008546:	4652      	mov	r2, sl
 8008548:	465b      	mov	r3, fp
 800854a:	e7e9      	b.n	8008520 <__ieee754_pow+0x1b8>
 800854c:	f04f 0900 	mov.w	r9, #0
 8008550:	3c01      	subs	r4, #1
 8008552:	4314      	orrs	r4, r2
 8008554:	bf14      	ite	ne
 8008556:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80085e4 <__ieee754_pow+0x27c>
 800855a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80085f0 <__ieee754_pow+0x288>
 800855e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008562:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008566:	f240 8107 	bls.w	8008778 <__ieee754_pow+0x410>
 800856a:	4b22      	ldr	r3, [pc, #136]	@ (80085f4 <__ieee754_pow+0x28c>)
 800856c:	429f      	cmp	r7, r3
 800856e:	4b1e      	ldr	r3, [pc, #120]	@ (80085e8 <__ieee754_pow+0x280>)
 8008570:	d913      	bls.n	800859a <__ieee754_pow+0x232>
 8008572:	429e      	cmp	r6, r3
 8008574:	d808      	bhi.n	8008588 <__ieee754_pow+0x220>
 8008576:	f1b8 0f00 	cmp.w	r8, #0
 800857a:	da08      	bge.n	800858e <__ieee754_pow+0x226>
 800857c:	2000      	movs	r0, #0
 800857e:	b011      	add	sp, #68	@ 0x44
 8008580:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	f000 bcb4 	b.w	8008ef0 <__math_oflow>
 8008588:	f1b8 0f00 	cmp.w	r8, #0
 800858c:	dcf6      	bgt.n	800857c <__ieee754_pow+0x214>
 800858e:	2000      	movs	r0, #0
 8008590:	b011      	add	sp, #68	@ 0x44
 8008592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008596:	f000 bca6 	b.w	8008ee6 <__math_uflow>
 800859a:	429e      	cmp	r6, r3
 800859c:	d20c      	bcs.n	80085b8 <__ieee754_pow+0x250>
 800859e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	f7f8 fa01 	bl	80009ac <__aeabi_dcmplt>
 80085aa:	3800      	subs	r0, #0
 80085ac:	bf18      	it	ne
 80085ae:	2001      	movne	r0, #1
 80085b0:	f1b8 0f00 	cmp.w	r8, #0
 80085b4:	daec      	bge.n	8008590 <__ieee754_pow+0x228>
 80085b6:	e7e2      	b.n	800857e <__ieee754_pow+0x216>
 80085b8:	4b0a      	ldr	r3, [pc, #40]	@ (80085e4 <__ieee754_pow+0x27c>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	429e      	cmp	r6, r3
 80085be:	d91b      	bls.n	80085f8 <__ieee754_pow+0x290>
 80085c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c4:	2300      	movs	r3, #0
 80085c6:	f7f8 f9f1 	bl	80009ac <__aeabi_dcmplt>
 80085ca:	3800      	subs	r0, #0
 80085cc:	bf18      	it	ne
 80085ce:	2001      	movne	r0, #1
 80085d0:	f1b8 0f00 	cmp.w	r8, #0
 80085d4:	dcd3      	bgt.n	800857e <__ieee754_pow+0x216>
 80085d6:	e7db      	b.n	8008590 <__ieee754_pow+0x228>
 80085d8:	fff00000 	.word	0xfff00000
 80085dc:	7ff00000 	.word	0x7ff00000
 80085e0:	433fffff 	.word	0x433fffff
 80085e4:	3ff00000 	.word	0x3ff00000
 80085e8:	3fefffff 	.word	0x3fefffff
 80085ec:	3fe00000 	.word	0x3fe00000
 80085f0:	bff00000 	.word	0xbff00000
 80085f4:	43f00000 	.word	0x43f00000
 80085f8:	4b5b      	ldr	r3, [pc, #364]	@ (8008768 <__ieee754_pow+0x400>)
 80085fa:	f7f7 fdad 	bl	8000158 <__aeabi_dsub>
 80085fe:	a352      	add	r3, pc, #328	@ (adr r3, 8008748 <__ieee754_pow+0x3e0>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	4604      	mov	r4, r0
 8008606:	460d      	mov	r5, r1
 8008608:	f7f7 ff5e 	bl	80004c8 <__aeabi_dmul>
 800860c:	a350      	add	r3, pc, #320	@ (adr r3, 8008750 <__ieee754_pow+0x3e8>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	4606      	mov	r6, r0
 8008614:	460f      	mov	r7, r1
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f7 ff55 	bl	80004c8 <__aeabi_dmul>
 800861e:	2200      	movs	r2, #0
 8008620:	4682      	mov	sl, r0
 8008622:	468b      	mov	fp, r1
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	4b50      	ldr	r3, [pc, #320]	@ (800876c <__ieee754_pow+0x404>)
 800862a:	f7f7 ff4d 	bl	80004c8 <__aeabi_dmul>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	a149      	add	r1, pc, #292	@ (adr r1, 8008758 <__ieee754_pow+0x3f0>)
 8008634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008638:	f7f7 fd8e 	bl	8000158 <__aeabi_dsub>
 800863c:	4622      	mov	r2, r4
 800863e:	462b      	mov	r3, r5
 8008640:	f7f7 ff42 	bl	80004c8 <__aeabi_dmul>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	2000      	movs	r0, #0
 800864a:	4949      	ldr	r1, [pc, #292]	@ (8008770 <__ieee754_pow+0x408>)
 800864c:	f7f7 fd84 	bl	8000158 <__aeabi_dsub>
 8008650:	4622      	mov	r2, r4
 8008652:	4680      	mov	r8, r0
 8008654:	4689      	mov	r9, r1
 8008656:	462b      	mov	r3, r5
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	f7f7 ff34 	bl	80004c8 <__aeabi_dmul>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4640      	mov	r0, r8
 8008666:	4649      	mov	r1, r9
 8008668:	f7f7 ff2e 	bl	80004c8 <__aeabi_dmul>
 800866c:	a33c      	add	r3, pc, #240	@ (adr r3, 8008760 <__ieee754_pow+0x3f8>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f7f7 ff29 	bl	80004c8 <__aeabi_dmul>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4650      	mov	r0, sl
 800867c:	4659      	mov	r1, fp
 800867e:	f7f7 fd6b 	bl	8000158 <__aeabi_dsub>
 8008682:	2400      	movs	r4, #0
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	4680      	mov	r8, r0
 800868a:	4689      	mov	r9, r1
 800868c:	4630      	mov	r0, r6
 800868e:	4639      	mov	r1, r7
 8008690:	f7f7 fd64 	bl	800015c <__adddf3>
 8008694:	4632      	mov	r2, r6
 8008696:	463b      	mov	r3, r7
 8008698:	4620      	mov	r0, r4
 800869a:	460d      	mov	r5, r1
 800869c:	f7f7 fd5c 	bl	8000158 <__aeabi_dsub>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4640      	mov	r0, r8
 80086a6:	4649      	mov	r1, r9
 80086a8:	f7f7 fd56 	bl	8000158 <__aeabi_dsub>
 80086ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086b4:	2300      	movs	r3, #0
 80086b6:	9304      	str	r3, [sp, #16]
 80086b8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80086bc:	4606      	mov	r6, r0
 80086be:	460f      	mov	r7, r1
 80086c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c4:	4652      	mov	r2, sl
 80086c6:	465b      	mov	r3, fp
 80086c8:	f7f7 fd46 	bl	8000158 <__aeabi_dsub>
 80086cc:	4622      	mov	r2, r4
 80086ce:	462b      	mov	r3, r5
 80086d0:	f7f7 fefa 	bl	80004c8 <__aeabi_dmul>
 80086d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086d8:	4680      	mov	r8, r0
 80086da:	4689      	mov	r9, r1
 80086dc:	4630      	mov	r0, r6
 80086de:	4639      	mov	r1, r7
 80086e0:	f7f7 fef2 	bl	80004c8 <__aeabi_dmul>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f7 fd36 	bl	800015c <__adddf3>
 80086f0:	4652      	mov	r2, sl
 80086f2:	465b      	mov	r3, fp
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7f7 fee4 	bl	80004c8 <__aeabi_dmul>
 8008700:	460b      	mov	r3, r1
 8008702:	4602      	mov	r2, r0
 8008704:	4680      	mov	r8, r0
 8008706:	4689      	mov	r9, r1
 8008708:	4630      	mov	r0, r6
 800870a:	4639      	mov	r1, r7
 800870c:	f7f7 fd26 	bl	800015c <__adddf3>
 8008710:	4b18      	ldr	r3, [pc, #96]	@ (8008774 <__ieee754_pow+0x40c>)
 8008712:	4604      	mov	r4, r0
 8008714:	4299      	cmp	r1, r3
 8008716:	460d      	mov	r5, r1
 8008718:	468a      	mov	sl, r1
 800871a:	468b      	mov	fp, r1
 800871c:	f340 82e0 	ble.w	8008ce0 <__ieee754_pow+0x978>
 8008720:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008724:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008728:	4303      	orrs	r3, r0
 800872a:	f000 81df 	beq.w	8008aec <__ieee754_pow+0x784>
 800872e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	2300      	movs	r3, #0
 8008736:	f7f8 f939 	bl	80009ac <__aeabi_dcmplt>
 800873a:	3800      	subs	r0, #0
 800873c:	bf18      	it	ne
 800873e:	2001      	movne	r0, #1
 8008740:	e71d      	b.n	800857e <__ieee754_pow+0x216>
 8008742:	bf00      	nop
 8008744:	f3af 8000 	nop.w
 8008748:	60000000 	.word	0x60000000
 800874c:	3ff71547 	.word	0x3ff71547
 8008750:	f85ddf44 	.word	0xf85ddf44
 8008754:	3e54ae0b 	.word	0x3e54ae0b
 8008758:	55555555 	.word	0x55555555
 800875c:	3fd55555 	.word	0x3fd55555
 8008760:	652b82fe 	.word	0x652b82fe
 8008764:	3ff71547 	.word	0x3ff71547
 8008768:	3ff00000 	.word	0x3ff00000
 800876c:	3fd00000 	.word	0x3fd00000
 8008770:	3fe00000 	.word	0x3fe00000
 8008774:	408fffff 	.word	0x408fffff
 8008778:	4ad3      	ldr	r2, [pc, #844]	@ (8008ac8 <__ieee754_pow+0x760>)
 800877a:	402a      	ands	r2, r5
 800877c:	2a00      	cmp	r2, #0
 800877e:	f040 817a 	bne.w	8008a76 <__ieee754_pow+0x70e>
 8008782:	4bd2      	ldr	r3, [pc, #840]	@ (8008acc <__ieee754_pow+0x764>)
 8008784:	2200      	movs	r2, #0
 8008786:	f7f7 fe9f 	bl	80004c8 <__aeabi_dmul>
 800878a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800878e:	460b      	mov	r3, r1
 8008790:	151a      	asrs	r2, r3, #20
 8008792:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008796:	4422      	add	r2, r4
 8008798:	920a      	str	r2, [sp, #40]	@ 0x28
 800879a:	4acd      	ldr	r2, [pc, #820]	@ (8008ad0 <__ieee754_pow+0x768>)
 800879c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087a0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80087a4:	4293      	cmp	r3, r2
 80087a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80087aa:	dd08      	ble.n	80087be <__ieee754_pow+0x456>
 80087ac:	4ac9      	ldr	r2, [pc, #804]	@ (8008ad4 <__ieee754_pow+0x76c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	f340 8163 	ble.w	8008a7a <__ieee754_pow+0x712>
 80087b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087b6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80087ba:	3301      	adds	r3, #1
 80087bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80087be:	2600      	movs	r6, #0
 80087c0:	00f3      	lsls	r3, r6, #3
 80087c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087c4:	4bc4      	ldr	r3, [pc, #784]	@ (8008ad8 <__ieee754_pow+0x770>)
 80087c6:	4629      	mov	r1, r5
 80087c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087d0:	461a      	mov	r2, r3
 80087d2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80087d6:	4623      	mov	r3, r4
 80087d8:	4682      	mov	sl, r0
 80087da:	f7f7 fcbd 	bl	8000158 <__aeabi_dsub>
 80087de:	4652      	mov	r2, sl
 80087e0:	462b      	mov	r3, r5
 80087e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80087e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087ea:	f7f7 fcb7 	bl	800015c <__adddf3>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	2000      	movs	r0, #0
 80087f4:	49b9      	ldr	r1, [pc, #740]	@ (8008adc <__ieee754_pow+0x774>)
 80087f6:	f7f7 ff91 	bl	800071c <__aeabi_ddiv>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008802:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008806:	f7f7 fe5f 	bl	80004c8 <__aeabi_dmul>
 800880a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800880e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008812:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008816:	2300      	movs	r3, #0
 8008818:	2200      	movs	r2, #0
 800881a:	46ab      	mov	fp, r5
 800881c:	106d      	asrs	r5, r5, #1
 800881e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008828:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800882c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	4614      	mov	r4, r2
 8008836:	461d      	mov	r5, r3
 8008838:	f7f7 fe46 	bl	80004c8 <__aeabi_dmul>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008844:	f7f7 fc88 	bl	8000158 <__aeabi_dsub>
 8008848:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800884c:	4606      	mov	r6, r0
 800884e:	460f      	mov	r7, r1
 8008850:	4620      	mov	r0, r4
 8008852:	4629      	mov	r1, r5
 8008854:	f7f7 fc80 	bl	8000158 <__aeabi_dsub>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4650      	mov	r0, sl
 800885e:	4659      	mov	r1, fp
 8008860:	f7f7 fc7a 	bl	8000158 <__aeabi_dsub>
 8008864:	4642      	mov	r2, r8
 8008866:	464b      	mov	r3, r9
 8008868:	f7f7 fe2e 	bl	80004c8 <__aeabi_dmul>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f7 fc70 	bl	8000158 <__aeabi_dsub>
 8008878:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800887c:	f7f7 fe24 	bl	80004c8 <__aeabi_dmul>
 8008880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008884:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008888:	4610      	mov	r0, r2
 800888a:	4619      	mov	r1, r3
 800888c:	f7f7 fe1c 	bl	80004c8 <__aeabi_dmul>
 8008890:	a37b      	add	r3, pc, #492	@ (adr r3, 8008a80 <__ieee754_pow+0x718>)
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	4604      	mov	r4, r0
 8008898:	460d      	mov	r5, r1
 800889a:	f7f7 fe15 	bl	80004c8 <__aeabi_dmul>
 800889e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008a88 <__ieee754_pow+0x720>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f7f7 fc5a 	bl	800015c <__adddf3>
 80088a8:	4622      	mov	r2, r4
 80088aa:	462b      	mov	r3, r5
 80088ac:	f7f7 fe0c 	bl	80004c8 <__aeabi_dmul>
 80088b0:	a377      	add	r3, pc, #476	@ (adr r3, 8008a90 <__ieee754_pow+0x728>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fc51 	bl	800015c <__adddf3>
 80088ba:	4622      	mov	r2, r4
 80088bc:	462b      	mov	r3, r5
 80088be:	f7f7 fe03 	bl	80004c8 <__aeabi_dmul>
 80088c2:	a375      	add	r3, pc, #468	@ (adr r3, 8008a98 <__ieee754_pow+0x730>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f7f7 fc48 	bl	800015c <__adddf3>
 80088cc:	4622      	mov	r2, r4
 80088ce:	462b      	mov	r3, r5
 80088d0:	f7f7 fdfa 	bl	80004c8 <__aeabi_dmul>
 80088d4:	a372      	add	r3, pc, #456	@ (adr r3, 8008aa0 <__ieee754_pow+0x738>)
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	f7f7 fc3f 	bl	800015c <__adddf3>
 80088de:	4622      	mov	r2, r4
 80088e0:	462b      	mov	r3, r5
 80088e2:	f7f7 fdf1 	bl	80004c8 <__aeabi_dmul>
 80088e6:	a370      	add	r3, pc, #448	@ (adr r3, 8008aa8 <__ieee754_pow+0x740>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	f7f7 fc36 	bl	800015c <__adddf3>
 80088f0:	4622      	mov	r2, r4
 80088f2:	4606      	mov	r6, r0
 80088f4:	460f      	mov	r7, r1
 80088f6:	462b      	mov	r3, r5
 80088f8:	4620      	mov	r0, r4
 80088fa:	4629      	mov	r1, r5
 80088fc:	f7f7 fde4 	bl	80004c8 <__aeabi_dmul>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4630      	mov	r0, r6
 8008906:	4639      	mov	r1, r7
 8008908:	f7f7 fdde 	bl	80004c8 <__aeabi_dmul>
 800890c:	4604      	mov	r4, r0
 800890e:	460d      	mov	r5, r1
 8008910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008914:	4642      	mov	r2, r8
 8008916:	464b      	mov	r3, r9
 8008918:	f7f7 fc20 	bl	800015c <__adddf3>
 800891c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008920:	f7f7 fdd2 	bl	80004c8 <__aeabi_dmul>
 8008924:	4622      	mov	r2, r4
 8008926:	462b      	mov	r3, r5
 8008928:	f7f7 fc18 	bl	800015c <__adddf3>
 800892c:	4642      	mov	r2, r8
 800892e:	4682      	mov	sl, r0
 8008930:	468b      	mov	fp, r1
 8008932:	464b      	mov	r3, r9
 8008934:	4640      	mov	r0, r8
 8008936:	4649      	mov	r1, r9
 8008938:	f7f7 fdc6 	bl	80004c8 <__aeabi_dmul>
 800893c:	2200      	movs	r2, #0
 800893e:	4b68      	ldr	r3, [pc, #416]	@ (8008ae0 <__ieee754_pow+0x778>)
 8008940:	4606      	mov	r6, r0
 8008942:	460f      	mov	r7, r1
 8008944:	f7f7 fc0a 	bl	800015c <__adddf3>
 8008948:	4652      	mov	r2, sl
 800894a:	465b      	mov	r3, fp
 800894c:	f7f7 fc06 	bl	800015c <__adddf3>
 8008950:	2400      	movs	r4, #0
 8008952:	460d      	mov	r5, r1
 8008954:	4622      	mov	r2, r4
 8008956:	460b      	mov	r3, r1
 8008958:	4640      	mov	r0, r8
 800895a:	4649      	mov	r1, r9
 800895c:	f7f7 fdb4 	bl	80004c8 <__aeabi_dmul>
 8008960:	2200      	movs	r2, #0
 8008962:	4680      	mov	r8, r0
 8008964:	4689      	mov	r9, r1
 8008966:	4620      	mov	r0, r4
 8008968:	4629      	mov	r1, r5
 800896a:	4b5d      	ldr	r3, [pc, #372]	@ (8008ae0 <__ieee754_pow+0x778>)
 800896c:	f7f7 fbf4 	bl	8000158 <__aeabi_dsub>
 8008970:	4632      	mov	r2, r6
 8008972:	463b      	mov	r3, r7
 8008974:	f7f7 fbf0 	bl	8000158 <__aeabi_dsub>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4650      	mov	r0, sl
 800897e:	4659      	mov	r1, fp
 8008980:	f7f7 fbea 	bl	8000158 <__aeabi_dsub>
 8008984:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008988:	f7f7 fd9e 	bl	80004c8 <__aeabi_dmul>
 800898c:	4622      	mov	r2, r4
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008996:	462b      	mov	r3, r5
 8008998:	f7f7 fd96 	bl	80004c8 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4630      	mov	r0, r6
 80089a2:	4639      	mov	r1, r7
 80089a4:	f7f7 fbda 	bl	800015c <__adddf3>
 80089a8:	2400      	movs	r4, #0
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4640      	mov	r0, r8
 80089b4:	4649      	mov	r1, r9
 80089b6:	f7f7 fbd1 	bl	800015c <__adddf3>
 80089ba:	a33d      	add	r3, pc, #244	@ (adr r3, 8008ab0 <__ieee754_pow+0x748>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	4620      	mov	r0, r4
 80089c2:	460d      	mov	r5, r1
 80089c4:	f7f7 fd80 	bl	80004c8 <__aeabi_dmul>
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089d0:	4620      	mov	r0, r4
 80089d2:	4629      	mov	r1, r5
 80089d4:	f7f7 fbc0 	bl	8000158 <__aeabi_dsub>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4630      	mov	r0, r6
 80089de:	4639      	mov	r1, r7
 80089e0:	f7f7 fbba 	bl	8000158 <__aeabi_dsub>
 80089e4:	a334      	add	r3, pc, #208	@ (adr r3, 8008ab8 <__ieee754_pow+0x750>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f7f7 fd6d 	bl	80004c8 <__aeabi_dmul>
 80089ee:	a334      	add	r3, pc, #208	@ (adr r3, 8008ac0 <__ieee754_pow+0x758>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 fd64 	bl	80004c8 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4630      	mov	r0, r6
 8008a06:	4639      	mov	r1, r7
 8008a08:	f7f7 fba8 	bl	800015c <__adddf3>
 8008a0c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a0e:	4b35      	ldr	r3, [pc, #212]	@ (8008ae4 <__ieee754_pow+0x77c>)
 8008a10:	2400      	movs	r4, #0
 8008a12:	4413      	add	r3, r2
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f7f7 fba0 	bl	800015c <__adddf3>
 8008a1c:	4682      	mov	sl, r0
 8008a1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a20:	468b      	mov	fp, r1
 8008a22:	f7f7 fce7 	bl	80003f4 <__aeabi_i2d>
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ae8 <__ieee754_pow+0x780>)
 8008a2e:	4413      	add	r3, r2
 8008a30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a34:	4652      	mov	r2, sl
 8008a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a3a:	465b      	mov	r3, fp
 8008a3c:	f7f7 fb8e 	bl	800015c <__adddf3>
 8008a40:	4642      	mov	r2, r8
 8008a42:	464b      	mov	r3, r9
 8008a44:	f7f7 fb8a 	bl	800015c <__adddf3>
 8008a48:	4632      	mov	r2, r6
 8008a4a:	463b      	mov	r3, r7
 8008a4c:	f7f7 fb86 	bl	800015c <__adddf3>
 8008a50:	4632      	mov	r2, r6
 8008a52:	463b      	mov	r3, r7
 8008a54:	4620      	mov	r0, r4
 8008a56:	460d      	mov	r5, r1
 8008a58:	f7f7 fb7e 	bl	8000158 <__aeabi_dsub>
 8008a5c:	4642      	mov	r2, r8
 8008a5e:	464b      	mov	r3, r9
 8008a60:	f7f7 fb7a 	bl	8000158 <__aeabi_dsub>
 8008a64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a68:	f7f7 fb76 	bl	8000158 <__aeabi_dsub>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4650      	mov	r0, sl
 8008a72:	4659      	mov	r1, fp
 8008a74:	e618      	b.n	80086a8 <__ieee754_pow+0x340>
 8008a76:	2400      	movs	r4, #0
 8008a78:	e68a      	b.n	8008790 <__ieee754_pow+0x428>
 8008a7a:	2601      	movs	r6, #1
 8008a7c:	e6a0      	b.n	80087c0 <__ieee754_pow+0x458>
 8008a7e:	bf00      	nop
 8008a80:	4a454eef 	.word	0x4a454eef
 8008a84:	3fca7e28 	.word	0x3fca7e28
 8008a88:	93c9db65 	.word	0x93c9db65
 8008a8c:	3fcd864a 	.word	0x3fcd864a
 8008a90:	a91d4101 	.word	0xa91d4101
 8008a94:	3fd17460 	.word	0x3fd17460
 8008a98:	518f264d 	.word	0x518f264d
 8008a9c:	3fd55555 	.word	0x3fd55555
 8008aa0:	db6fabff 	.word	0xdb6fabff
 8008aa4:	3fdb6db6 	.word	0x3fdb6db6
 8008aa8:	33333303 	.word	0x33333303
 8008aac:	3fe33333 	.word	0x3fe33333
 8008ab0:	e0000000 	.word	0xe0000000
 8008ab4:	3feec709 	.word	0x3feec709
 8008ab8:	dc3a03fd 	.word	0xdc3a03fd
 8008abc:	3feec709 	.word	0x3feec709
 8008ac0:	145b01f5 	.word	0x145b01f5
 8008ac4:	be3e2fe0 	.word	0xbe3e2fe0
 8008ac8:	7ff00000 	.word	0x7ff00000
 8008acc:	43400000 	.word	0x43400000
 8008ad0:	0003988e 	.word	0x0003988e
 8008ad4:	000bb679 	.word	0x000bb679
 8008ad8:	080092c8 	.word	0x080092c8
 8008adc:	3ff00000 	.word	0x3ff00000
 8008ae0:	40080000 	.word	0x40080000
 8008ae4:	080092a8 	.word	0x080092a8
 8008ae8:	080092b8 	.word	0x080092b8
 8008aec:	a39a      	add	r3, pc, #616	@ (adr r3, 8008d58 <__ieee754_pow+0x9f0>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	4630      	mov	r0, r6
 8008af4:	4639      	mov	r1, r7
 8008af6:	f7f7 fb31 	bl	800015c <__adddf3>
 8008afa:	4642      	mov	r2, r8
 8008afc:	e9cd 0100 	strd	r0, r1, [sp]
 8008b00:	464b      	mov	r3, r9
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	f7f7 fb27 	bl	8000158 <__aeabi_dsub>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b12:	f7f7 ff69 	bl	80009e8 <__aeabi_dcmpgt>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f47f ae09 	bne.w	800872e <__ieee754_pow+0x3c6>
 8008b1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008b20:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008b24:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008b28:	fa43 fa0a 	asr.w	sl, r3, sl
 8008b2c:	44da      	add	sl, fp
 8008b2e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008b32:	489b      	ldr	r0, [pc, #620]	@ (8008da0 <__ieee754_pow+0xa38>)
 8008b34:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008b38:	4108      	asrs	r0, r1
 8008b3a:	ea00 030a 	and.w	r3, r0, sl
 8008b3e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008b42:	f1c1 0114 	rsb	r1, r1, #20
 8008b46:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	fa4a fa01 	asr.w	sl, sl, r1
 8008b50:	f1bb 0f00 	cmp.w	fp, #0
 8008b54:	4649      	mov	r1, r9
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	bfb8      	it	lt
 8008b5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008b60:	f7f7 fafa 	bl	8000158 <__aeabi_dsub>
 8008b64:	4680      	mov	r8, r0
 8008b66:	4689      	mov	r9, r1
 8008b68:	2400      	movs	r4, #0
 8008b6a:	4632      	mov	r2, r6
 8008b6c:	463b      	mov	r3, r7
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4649      	mov	r1, r9
 8008b72:	f7f7 faf3 	bl	800015c <__adddf3>
 8008b76:	a37a      	add	r3, pc, #488	@ (adr r3, 8008d60 <__ieee754_pow+0x9f8>)
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	460d      	mov	r5, r1
 8008b80:	f7f7 fca2 	bl	80004c8 <__aeabi_dmul>
 8008b84:	4642      	mov	r2, r8
 8008b86:	464b      	mov	r3, r9
 8008b88:	e9cd 0100 	strd	r0, r1, [sp]
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4629      	mov	r1, r5
 8008b90:	f7f7 fae2 	bl	8000158 <__aeabi_dsub>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4630      	mov	r0, r6
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	f7f7 fadc 	bl	8000158 <__aeabi_dsub>
 8008ba0:	a371      	add	r3, pc, #452	@ (adr r3, 8008d68 <__ieee754_pow+0xa00>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fc8f 	bl	80004c8 <__aeabi_dmul>
 8008baa:	a371      	add	r3, pc, #452	@ (adr r3, 8008d70 <__ieee754_pow+0xa08>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	4689      	mov	r9, r1
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	f7f7 fc86 	bl	80004c8 <__aeabi_dmul>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7f7 faca 	bl	800015c <__adddf3>
 8008bc8:	4604      	mov	r4, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bd4:	f7f7 fac2 	bl	800015c <__adddf3>
 8008bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bdc:	4680      	mov	r8, r0
 8008bde:	4689      	mov	r9, r1
 8008be0:	f7f7 faba 	bl	8000158 <__aeabi_dsub>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7f7 fab4 	bl	8000158 <__aeabi_dsub>
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	460f      	mov	r7, r1
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	f7f7 fc64 	bl	80004c8 <__aeabi_dmul>
 8008c00:	a35d      	add	r3, pc, #372	@ (adr r3, 8008d78 <__ieee754_pow+0xa10>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
 8008c0a:	f7f7 fc5d 	bl	80004c8 <__aeabi_dmul>
 8008c0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008d80 <__ieee754_pow+0xa18>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	f7f7 faa0 	bl	8000158 <__aeabi_dsub>
 8008c18:	4622      	mov	r2, r4
 8008c1a:	462b      	mov	r3, r5
 8008c1c:	f7f7 fc54 	bl	80004c8 <__aeabi_dmul>
 8008c20:	a359      	add	r3, pc, #356	@ (adr r3, 8008d88 <__ieee754_pow+0xa20>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f7f7 fa99 	bl	800015c <__adddf3>
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	f7f7 fc4b 	bl	80004c8 <__aeabi_dmul>
 8008c32:	a357      	add	r3, pc, #348	@ (adr r3, 8008d90 <__ieee754_pow+0xa28>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fa8e 	bl	8000158 <__aeabi_dsub>
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	462b      	mov	r3, r5
 8008c40:	f7f7 fc42 	bl	80004c8 <__aeabi_dmul>
 8008c44:	a354      	add	r3, pc, #336	@ (adr r3, 8008d98 <__ieee754_pow+0xa30>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f7f7 fa87 	bl	800015c <__adddf3>
 8008c4e:	4622      	mov	r2, r4
 8008c50:	462b      	mov	r3, r5
 8008c52:	f7f7 fc39 	bl	80004c8 <__aeabi_dmul>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	f7f7 fa7b 	bl	8000158 <__aeabi_dsub>
 8008c62:	4604      	mov	r4, r0
 8008c64:	460d      	mov	r5, r1
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	f7f7 fc2b 	bl	80004c8 <__aeabi_dmul>
 8008c72:	2200      	movs	r2, #0
 8008c74:	e9cd 0100 	strd	r0, r1, [sp]
 8008c78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7f7 fa6a 	bl	8000158 <__aeabi_dsub>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c8c:	f7f7 fd46 	bl	800071c <__aeabi_ddiv>
 8008c90:	4632      	mov	r2, r6
 8008c92:	4604      	mov	r4, r0
 8008c94:	460d      	mov	r5, r1
 8008c96:	463b      	mov	r3, r7
 8008c98:	4640      	mov	r0, r8
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	f7f7 fc14 	bl	80004c8 <__aeabi_dmul>
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	f7f7 fa5a 	bl	800015c <__adddf3>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4620      	mov	r0, r4
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7f7 fa52 	bl	8000158 <__aeabi_dsub>
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	f7f7 fa4e 	bl	8000158 <__aeabi_dsub>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	4938      	ldr	r1, [pc, #224]	@ (8008da4 <__ieee754_pow+0xa3c>)
 8008cc4:	f7f7 fa48 	bl	8000158 <__aeabi_dsub>
 8008cc8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008ccc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8008cd0:	da2e      	bge.n	8008d30 <__ieee754_pow+0x9c8>
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	f000 f874 	bl	8008dc0 <scalbn>
 8008cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cdc:	f7ff bbed 	b.w	80084ba <__ieee754_pow+0x152>
 8008ce0:	4c31      	ldr	r4, [pc, #196]	@ (8008da8 <__ieee754_pow+0xa40>)
 8008ce2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	d91a      	bls.n	8008d20 <__ieee754_pow+0x9b8>
 8008cea:	4b30      	ldr	r3, [pc, #192]	@ (8008dac <__ieee754_pow+0xa44>)
 8008cec:	440b      	add	r3, r1
 8008cee:	4303      	orrs	r3, r0
 8008cf0:	d009      	beq.n	8008d06 <__ieee754_pow+0x99e>
 8008cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f7f7 fe57 	bl	80009ac <__aeabi_dcmplt>
 8008cfe:	3800      	subs	r0, #0
 8008d00:	bf18      	it	ne
 8008d02:	2001      	movne	r0, #1
 8008d04:	e444      	b.n	8008590 <__ieee754_pow+0x228>
 8008d06:	4642      	mov	r2, r8
 8008d08:	464b      	mov	r3, r9
 8008d0a:	f7f7 fa25 	bl	8000158 <__aeabi_dsub>
 8008d0e:	4632      	mov	r2, r6
 8008d10:	463b      	mov	r3, r7
 8008d12:	f7f7 fe5f 	bl	80009d4 <__aeabi_dcmpge>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d1eb      	bne.n	8008cf2 <__ieee754_pow+0x98a>
 8008d1a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8008db0 <__ieee754_pow+0xa48>
 8008d1e:	e6fd      	b.n	8008b1c <__ieee754_pow+0x7b4>
 8008d20:	469a      	mov	sl, r3
 8008d22:	4b24      	ldr	r3, [pc, #144]	@ (8008db4 <__ieee754_pow+0xa4c>)
 8008d24:	459a      	cmp	sl, r3
 8008d26:	f63f aef9 	bhi.w	8008b1c <__ieee754_pow+0x7b4>
 8008d2a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008d2e:	e71b      	b.n	8008b68 <__ieee754_pow+0x800>
 8008d30:	4621      	mov	r1, r4
 8008d32:	e7d1      	b.n	8008cd8 <__ieee754_pow+0x970>
 8008d34:	2000      	movs	r0, #0
 8008d36:	491b      	ldr	r1, [pc, #108]	@ (8008da4 <__ieee754_pow+0xa3c>)
 8008d38:	f7ff bb34 	b.w	80083a4 <__ieee754_pow+0x3c>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	2100      	movs	r1, #0
 8008d40:	f7ff bb30 	b.w	80083a4 <__ieee754_pow+0x3c>
 8008d44:	4650      	mov	r0, sl
 8008d46:	4659      	mov	r1, fp
 8008d48:	f7ff bb2c 	b.w	80083a4 <__ieee754_pow+0x3c>
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	f7ff bb79 	b.w	8008444 <__ieee754_pow+0xdc>
 8008d52:	2400      	movs	r4, #0
 8008d54:	f7ff bb64 	b.w	8008420 <__ieee754_pow+0xb8>
 8008d58:	652b82fe 	.word	0x652b82fe
 8008d5c:	3c971547 	.word	0x3c971547
 8008d60:	00000000 	.word	0x00000000
 8008d64:	3fe62e43 	.word	0x3fe62e43
 8008d68:	fefa39ef 	.word	0xfefa39ef
 8008d6c:	3fe62e42 	.word	0x3fe62e42
 8008d70:	0ca86c39 	.word	0x0ca86c39
 8008d74:	be205c61 	.word	0xbe205c61
 8008d78:	72bea4d0 	.word	0x72bea4d0
 8008d7c:	3e663769 	.word	0x3e663769
 8008d80:	c5d26bf1 	.word	0xc5d26bf1
 8008d84:	3ebbbd41 	.word	0x3ebbbd41
 8008d88:	af25de2c 	.word	0xaf25de2c
 8008d8c:	3f11566a 	.word	0x3f11566a
 8008d90:	16bebd93 	.word	0x16bebd93
 8008d94:	3f66c16c 	.word	0x3f66c16c
 8008d98:	5555553e 	.word	0x5555553e
 8008d9c:	3fc55555 	.word	0x3fc55555
 8008da0:	fff00000 	.word	0xfff00000
 8008da4:	3ff00000 	.word	0x3ff00000
 8008da8:	4090cbff 	.word	0x4090cbff
 8008dac:	3f6f3400 	.word	0x3f6f3400
 8008db0:	4090cc00 	.word	0x4090cc00
 8008db4:	3fe00000 	.word	0x3fe00000

08008db8 <fabs>:
 8008db8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4770      	bx	lr

08008dc0 <scalbn>:
 8008dc0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008dc4:	4616      	mov	r6, r2
 8008dc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008dca:	4683      	mov	fp, r0
 8008dcc:	468c      	mov	ip, r1
 8008dce:	460b      	mov	r3, r1
 8008dd0:	b982      	cbnz	r2, 8008df4 <scalbn+0x34>
 8008dd2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008dd6:	4303      	orrs	r3, r0
 8008dd8:	d039      	beq.n	8008e4e <scalbn+0x8e>
 8008dda:	4b2f      	ldr	r3, [pc, #188]	@ (8008e98 <scalbn+0xd8>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f7f7 fb73 	bl	80004c8 <__aeabi_dmul>
 8008de2:	4b2e      	ldr	r3, [pc, #184]	@ (8008e9c <scalbn+0xdc>)
 8008de4:	4683      	mov	fp, r0
 8008de6:	429e      	cmp	r6, r3
 8008de8:	468c      	mov	ip, r1
 8008dea:	da0d      	bge.n	8008e08 <scalbn+0x48>
 8008dec:	a326      	add	r3, pc, #152	@ (adr r3, 8008e88 <scalbn+0xc8>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	e01b      	b.n	8008e2c <scalbn+0x6c>
 8008df4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008df8:	42ba      	cmp	r2, r7
 8008dfa:	d109      	bne.n	8008e10 <scalbn+0x50>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	f7f7 f9ad 	bl	800015c <__adddf3>
 8008e02:	4683      	mov	fp, r0
 8008e04:	468c      	mov	ip, r1
 8008e06:	e022      	b.n	8008e4e <scalbn+0x8e>
 8008e08:	460b      	mov	r3, r1
 8008e0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e0e:	3a36      	subs	r2, #54	@ 0x36
 8008e10:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008e14:	428e      	cmp	r6, r1
 8008e16:	dd0c      	ble.n	8008e32 <scalbn+0x72>
 8008e18:	a31d      	add	r3, pc, #116	@ (adr r3, 8008e90 <scalbn+0xd0>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	461c      	mov	r4, r3
 8008e20:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008e24:	f361 74df 	bfi	r4, r1, #31, #1
 8008e28:	4621      	mov	r1, r4
 8008e2a:	481d      	ldr	r0, [pc, #116]	@ (8008ea0 <scalbn+0xe0>)
 8008e2c:	f7f7 fb4c 	bl	80004c8 <__aeabi_dmul>
 8008e30:	e7e7      	b.n	8008e02 <scalbn+0x42>
 8008e32:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008e36:	4432      	add	r2, r6
 8008e38:	428a      	cmp	r2, r1
 8008e3a:	dced      	bgt.n	8008e18 <scalbn+0x58>
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	dd0a      	ble.n	8008e56 <scalbn+0x96>
 8008e40:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008e44:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008e48:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e4c:	46ac      	mov	ip, r5
 8008e4e:	4658      	mov	r0, fp
 8008e50:	4661      	mov	r1, ip
 8008e52:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008e56:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008e5a:	da09      	bge.n	8008e70 <scalbn+0xb0>
 8008e5c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008e60:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008e64:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008e68:	480e      	ldr	r0, [pc, #56]	@ (8008ea4 <scalbn+0xe4>)
 8008e6a:	f041 011f 	orr.w	r1, r1, #31
 8008e6e:	e7bd      	b.n	8008dec <scalbn+0x2c>
 8008e70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008e74:	3236      	adds	r2, #54	@ 0x36
 8008e76:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008e7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e7e:	4658      	mov	r0, fp
 8008e80:	4629      	mov	r1, r5
 8008e82:	2200      	movs	r2, #0
 8008e84:	4b08      	ldr	r3, [pc, #32]	@ (8008ea8 <scalbn+0xe8>)
 8008e86:	e7d1      	b.n	8008e2c <scalbn+0x6c>
 8008e88:	c2f8f359 	.word	0xc2f8f359
 8008e8c:	01a56e1f 	.word	0x01a56e1f
 8008e90:	8800759c 	.word	0x8800759c
 8008e94:	7e37e43c 	.word	0x7e37e43c
 8008e98:	43500000 	.word	0x43500000
 8008e9c:	ffff3cb0 	.word	0xffff3cb0
 8008ea0:	8800759c 	.word	0x8800759c
 8008ea4:	c2f8f359 	.word	0xc2f8f359
 8008ea8:	3c900000 	.word	0x3c900000

08008eac <with_errno>:
 8008eac:	b570      	push	{r4, r5, r6, lr}
 8008eae:	4604      	mov	r4, r0
 8008eb0:	460d      	mov	r5, r1
 8008eb2:	4616      	mov	r6, r2
 8008eb4:	f7fe fd14 	bl	80078e0 <__errno>
 8008eb8:	4629      	mov	r1, r5
 8008eba:	6006      	str	r6, [r0, #0]
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}

08008ec0 <xflow>:
 8008ec0:	b513      	push	{r0, r1, r4, lr}
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	b10c      	cbz	r4, 8008ece <xflow+0xe>
 8008eca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008ece:	e9cd 2300 	strd	r2, r3, [sp]
 8008ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ed6:	f7f7 faf7 	bl	80004c8 <__aeabi_dmul>
 8008eda:	2222      	movs	r2, #34	@ 0x22
 8008edc:	b002      	add	sp, #8
 8008ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee2:	f7ff bfe3 	b.w	8008eac <with_errno>

08008ee6 <__math_uflow>:
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008eec:	f7ff bfe8 	b.w	8008ec0 <xflow>

08008ef0 <__math_oflow>:
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8008ef6:	f7ff bfe3 	b.w	8008ec0 <xflow>
	...

08008efc <__ieee754_sqrt>:
 8008efc:	4a67      	ldr	r2, [pc, #412]	@ (800909c <__ieee754_sqrt+0x1a0>)
 8008efe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f02:	438a      	bics	r2, r1
 8008f04:	4606      	mov	r6, r0
 8008f06:	460f      	mov	r7, r1
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	d10e      	bne.n	8008f2c <__ieee754_sqrt+0x30>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	f7f7 fada 	bl	80004c8 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4630      	mov	r0, r6
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	f7f7 f91e 	bl	800015c <__adddf3>
 8008f20:	4606      	mov	r6, r0
 8008f22:	460f      	mov	r7, r1
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	dc0c      	bgt.n	8008f4a <__ieee754_sqrt+0x4e>
 8008f30:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008f34:	4302      	orrs	r2, r0
 8008f36:	d0f5      	beq.n	8008f24 <__ieee754_sqrt+0x28>
 8008f38:	b189      	cbz	r1, 8008f5e <__ieee754_sqrt+0x62>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	f7f7 f90c 	bl	8000158 <__aeabi_dsub>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	f7f7 fbea 	bl	800071c <__aeabi_ddiv>
 8008f48:	e7ea      	b.n	8008f20 <__ieee754_sqrt+0x24>
 8008f4a:	150a      	asrs	r2, r1, #20
 8008f4c:	d115      	bne.n	8008f7a <__ieee754_sqrt+0x7e>
 8008f4e:	2100      	movs	r1, #0
 8008f50:	e009      	b.n	8008f66 <__ieee754_sqrt+0x6a>
 8008f52:	0ae3      	lsrs	r3, r4, #11
 8008f54:	3a15      	subs	r2, #21
 8008f56:	0564      	lsls	r4, r4, #21
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0fa      	beq.n	8008f52 <__ieee754_sqrt+0x56>
 8008f5c:	e7f7      	b.n	8008f4e <__ieee754_sqrt+0x52>
 8008f5e:	460a      	mov	r2, r1
 8008f60:	e7fa      	b.n	8008f58 <__ieee754_sqrt+0x5c>
 8008f62:	005b      	lsls	r3, r3, #1
 8008f64:	3101      	adds	r1, #1
 8008f66:	02d8      	lsls	r0, r3, #11
 8008f68:	d5fb      	bpl.n	8008f62 <__ieee754_sqrt+0x66>
 8008f6a:	1e48      	subs	r0, r1, #1
 8008f6c:	1a12      	subs	r2, r2, r0
 8008f6e:	f1c1 0020 	rsb	r0, r1, #32
 8008f72:	fa24 f000 	lsr.w	r0, r4, r0
 8008f76:	4303      	orrs	r3, r0
 8008f78:	408c      	lsls	r4, r1
 8008f7a:	2600      	movs	r6, #0
 8008f7c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008f80:	2116      	movs	r1, #22
 8008f82:	07d2      	lsls	r2, r2, #31
 8008f84:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008f88:	4632      	mov	r2, r6
 8008f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f92:	bf5c      	itt	pl
 8008f94:	005b      	lslpl	r3, r3, #1
 8008f96:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008f9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f9e:	bf58      	it	pl
 8008fa0:	0064      	lslpl	r4, r4, #1
 8008fa2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008fa6:	107f      	asrs	r7, r7, #1
 8008fa8:	0064      	lsls	r4, r4, #1
 8008faa:	1815      	adds	r5, r2, r0
 8008fac:	429d      	cmp	r5, r3
 8008fae:	bfde      	ittt	le
 8008fb0:	182a      	addle	r2, r5, r0
 8008fb2:	1b5b      	suble	r3, r3, r5
 8008fb4:	1836      	addle	r6, r6, r0
 8008fb6:	0fe5      	lsrs	r5, r4, #31
 8008fb8:	3901      	subs	r1, #1
 8008fba:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008fbe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008fc2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008fc6:	d1f0      	bne.n	8008faa <__ieee754_sqrt+0xae>
 8008fc8:	460d      	mov	r5, r1
 8008fca:	f04f 0a20 	mov.w	sl, #32
 8008fce:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	eb01 0c00 	add.w	ip, r1, r0
 8008fd8:	db02      	blt.n	8008fe0 <__ieee754_sqrt+0xe4>
 8008fda:	d113      	bne.n	8009004 <__ieee754_sqrt+0x108>
 8008fdc:	45a4      	cmp	ip, r4
 8008fde:	d811      	bhi.n	8009004 <__ieee754_sqrt+0x108>
 8008fe0:	f1bc 0f00 	cmp.w	ip, #0
 8008fe4:	eb0c 0100 	add.w	r1, ip, r0
 8008fe8:	da42      	bge.n	8009070 <__ieee754_sqrt+0x174>
 8008fea:	2900      	cmp	r1, #0
 8008fec:	db40      	blt.n	8009070 <__ieee754_sqrt+0x174>
 8008fee:	f102 0e01 	add.w	lr, r2, #1
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	4672      	mov	r2, lr
 8008ff6:	45a4      	cmp	ip, r4
 8008ff8:	bf88      	it	hi
 8008ffa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008ffe:	eba4 040c 	sub.w	r4, r4, ip
 8009002:	4405      	add	r5, r0
 8009004:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009008:	f1ba 0a01 	subs.w	sl, sl, #1
 800900c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009010:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009014:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009018:	d1db      	bne.n	8008fd2 <__ieee754_sqrt+0xd6>
 800901a:	431c      	orrs	r4, r3
 800901c:	d01a      	beq.n	8009054 <__ieee754_sqrt+0x158>
 800901e:	4c20      	ldr	r4, [pc, #128]	@ (80090a0 <__ieee754_sqrt+0x1a4>)
 8009020:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80090a4 <__ieee754_sqrt+0x1a8>
 8009024:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009028:	e9db 2300 	ldrd	r2, r3, [fp]
 800902c:	f7f7 f894 	bl	8000158 <__aeabi_dsub>
 8009030:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4640      	mov	r0, r8
 800903a:	4649      	mov	r1, r9
 800903c:	f7f7 fcc0 	bl	80009c0 <__aeabi_dcmple>
 8009040:	b140      	cbz	r0, 8009054 <__ieee754_sqrt+0x158>
 8009042:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009046:	e9db 2300 	ldrd	r2, r3, [fp]
 800904a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800904e:	d111      	bne.n	8009074 <__ieee754_sqrt+0x178>
 8009050:	4655      	mov	r5, sl
 8009052:	3601      	adds	r6, #1
 8009054:	1072      	asrs	r2, r6, #1
 8009056:	086b      	lsrs	r3, r5, #1
 8009058:	07f1      	lsls	r1, r6, #31
 800905a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800905e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009062:	bf48      	it	mi
 8009064:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009068:	4618      	mov	r0, r3
 800906a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800906e:	e757      	b.n	8008f20 <__ieee754_sqrt+0x24>
 8009070:	4696      	mov	lr, r2
 8009072:	e7be      	b.n	8008ff2 <__ieee754_sqrt+0xf6>
 8009074:	f7f7 f872 	bl	800015c <__adddf3>
 8009078:	e9d4 8900 	ldrd	r8, r9, [r4]
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4640      	mov	r0, r8
 8009082:	4649      	mov	r1, r9
 8009084:	f7f7 fc92 	bl	80009ac <__aeabi_dcmplt>
 8009088:	b120      	cbz	r0, 8009094 <__ieee754_sqrt+0x198>
 800908a:	1ca8      	adds	r0, r5, #2
 800908c:	bf08      	it	eq
 800908e:	3601      	addeq	r6, #1
 8009090:	3502      	adds	r5, #2
 8009092:	e7df      	b.n	8009054 <__ieee754_sqrt+0x158>
 8009094:	1c6b      	adds	r3, r5, #1
 8009096:	f023 0501 	bic.w	r5, r3, #1
 800909a:	e7db      	b.n	8009054 <__ieee754_sqrt+0x158>
 800909c:	7ff00000 	.word	0x7ff00000
 80090a0:	20000068 	.word	0x20000068
 80090a4:	20000060 	.word	0x20000060

080090a8 <_init>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	bf00      	nop
 80090ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ae:	bc08      	pop	{r3}
 80090b0:	469e      	mov	lr, r3
 80090b2:	4770      	bx	lr

080090b4 <_fini>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr
