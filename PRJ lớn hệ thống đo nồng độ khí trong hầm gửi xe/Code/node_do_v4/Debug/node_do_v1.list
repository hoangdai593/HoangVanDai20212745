
node_do_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006880  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006990  08006990  00007990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a80  08006a80  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  08006a80  08006a80  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a80  08006a80  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a80  08006a80  00007a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a84  08006a84  00007a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006a88  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000070  08006af8  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006af8  00008324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e15a  00000000  00000000  00008099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251c  00000000  00000000  000161f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00018710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb3  00000000  00000000  00019618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d58  00000000  00000000  0001a1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fe6  00000000  00000000  00032f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090496  00000000  00000000  00045f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d639f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004878  00000000  00000000  000d63e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000dac5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006978 	.word	0x08006978

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006978 	.word	0x08006978

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <CCS811_ReadReg>:
extern I2C_HandleTypeDef hi2c2;

#define hi2cxc hi2c2
// Hàm đọc từ 1 thanh ghi (1byte)
uint8_t CCS811_ReadReg(uint8_t addr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &result, 1, 100);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	2364      	movs	r3, #100	@ 0x64
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	f107 030f 	add.w	r3, r7, #15
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	21b4      	movs	r1, #180	@ 0xb4
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <CCS811_ReadReg+0x34>)
 8000d5a:	f002 fabb 	bl	80032d4 <HAL_I2C_Mem_Read>
    return result;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000110 	.word	0x20000110

08000d6c <CCS811_ReadRegMulti>:
// hàm đọc nhiều byte từ thanh ghi
void CCS811_ReadRegMulti(uint8_t addr, uint8_t * val,uint8_t size)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read( &hi2cxc, CCS811_ADDR, ( uint8_t )addr, I2C_MEMADD_SIZE_8BIT, val, size,100 );
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	2164      	movs	r1, #100	@ 0x64
 8000d86:	9102      	str	r1, [sp, #8]
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	21b4      	movs	r1, #180	@ 0xb4
 8000d92:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <CCS811_ReadRegMulti+0x34>)
 8000d94:	f002 fa9e 	bl	80032d4 <HAL_I2C_Mem_Read>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000110 	.word	0x20000110

08000da4 <CCS811_WriteReg>:

// Hàm viết vào 1 thanh ghi 1byte
void CCS811_WriteReg(uint8_t addr, uint8_t val)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	1dbb      	adds	r3, r7, #6
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	21b4      	movs	r1, #180	@ 0xb4
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <CCS811_WriteReg+0x34>)
 8000dca:	f002 f989 	bl	80030e0 <HAL_I2C_Mem_Write>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000110 	.word	0x20000110

08000ddc <CCS811_Init>:
void CCS811_WriteRegMulti(uint8_t addr, uint8_t *data, uint8_t length)
{
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
}
// Hàm khởi tạo CCS811
void CCS811_Init() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
    uint8_t status[1] = {0};
 8000de2:	2300      	movs	r3, #0
 8000de4:	723b      	strb	r3, [r7, #8]
    int Init_OK = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000dea:	e026      	b.n	8000e3a <CCS811_Init+0x5e>
    {
		// Kiểm tra trạng thái cảm biến
    	status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ffa1 	bl	8000d34 <CCS811_ReadReg>
 8000df2:	4603      	mov	r3, r0
 8000df4:	723b      	strb	r3, [r7, #8]
		if ((status[0] & 0x10) == 0)
 8000df6:	7a3b      	ldrb	r3, [r7, #8]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <CCS811_Init+0x2a>
		{  // Kiểm tra nếu chưa sẵn sàng (bit 4 là 0)
			Init_OK = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	e019      	b.n	8000e3a <CCS811_Init+0x5e>
		}
		else
		{
			// Gửi lệnh bắt đầu ứng dụng
			uint8_t app_start = CCS811_APP_START;
 8000e06:	23f4      	movs	r3, #244	@ 0xf4
 8000e08:	71fb      	strb	r3, [r7, #7]
			HAL_I2C_Master_Transmit(&hi2cxc, CCS811_ADDR, &app_start, 1, HAL_MAX_DELAY);
 8000e0a:	1dfa      	adds	r2, r7, #7
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	21b4      	movs	r1, #180	@ 0xb4
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <CCS811_Init+0x70>)
 8000e18:	f002 f864 	bl	8002ee4 <HAL_I2C_Master_Transmit>
			// Kiểm tra lại trạng thái
			status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ff89 	bl	8000d34 <CCS811_ReadReg>
 8000e22:	4603      	mov	r3, r0
 8000e24:	723b      	strb	r3, [r7, #8]
			if ((status[0] & 0x90) != 0x90) //bit 7 và 4=1
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8000e2c:	2b90      	cmp	r3, #144	@ 0x90
 8000e2e:	d002      	beq.n	8000e36 <CCS811_Init+0x5a>
			{  // Kiểm tra nếu sẵn sàng và không có lỗi
				Init_OK = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e001      	b.n	8000e3a <CCS811_Init+0x5e>
			}
			else
			{
				Init_OK = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0d5      	beq.n	8000dec <CCS811_Init+0x10>
			}

		}
    }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000110 	.word	0x20000110

08000e50 <CCS811_Set_Mode>:
void CCS811_Set_Mode(uint8_t mode)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
   // Chế độ đo
	mode = mode <<4;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	71fb      	strb	r3, [r7, #7]
    CCS811_WriteReg(CCS811_MEAS_MODE, mode);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4619      	mov	r1, r3
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff ff9d 	bl	8000da4 <CCS811_WriteReg>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <CCS811_Read_Co2>:
	    //Mode 4 = RAW mode.
 */

//Hàm đọc giá trị Co2
void CCS811_Read_Co2(uint16_t *eCO2)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2208      	movs	r2, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f7ff ff6e 	bl	8000d6c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *eCO2 = (buf[0] << 8) | buf[1];
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	7a7b      	ldrb	r3, [r7, #9]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	801a      	strh	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <CCS811_CheckHW_ID>:


uint8_t CCS811_CheckHW_ID() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
    uint8_t hw_id = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71fb      	strb	r3, [r7, #7]
    // xác mã định danh phần cứng từ thanh ghi HW_ID

    hw_id = CCS811_ReadReg(CSS811_HW_ID);
 8000eb6:	2020      	movs	r0, #32
 8000eb8:	f7ff ff3c 	bl	8000d34 <CCS811_ReadReg>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
    // Kiểm tra mã định danh phần cứng có khớp với giá trị mặc định không
    if (hw_id == 0x81)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b81      	cmp	r3, #129	@ 0x81
 8000ec4:	d101      	bne.n	8000eca <CCS811_CheckHW_ID+0x1e>
    {
        return 1; // Mã định danh phần cứng đúng
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <CCS811_CheckHW_ID+0x20>
    }
    else
    {
        return 0; // Mã định danh phần cứng sai
 8000eca:	2300      	movs	r3, #0
    }
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <CCS811_EnableInt>:

//Enable the nINT signal
void CCS811_EnableInt(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	uint8_t setting = CCS811_ReadReg(CCS811_MEAS_MODE); //đọc giá trị lúc trước
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff ff2a 	bl	8000d34 <CCS811_ReadReg>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
	setting |= (1 << 3); //Set INTERRUPT bit ( chế độ khi có giá trị mới sẽ ngắt)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	71fb      	strb	r3, [r7, #7]
	CCS811_WriteReg(CCS811_MEAS_MODE, setting);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff ff57 	bl	8000da4 <CCS811_WriteReg>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <lcd_send_cmd>:
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f023 030f 	bic.w	r3, r3, #15
 8000f10:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f043 030c 	orr.w	r3, r3, #12
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	f043 030c 	orr.w	r3, r3, #12
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000f40:	f107 0208 	add.w	r2, r7, #8
 8000f44:	2364      	movs	r3, #100	@ 0x64
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2304      	movs	r3, #4
 8000f4a:	214e      	movs	r1, #78	@ 0x4e
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <lcd_send_cmd+0x5c>)
 8000f4e:	f001 ffc9 	bl	8002ee4 <HAL_I2C_Master_Transmit>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000bc 	.word	0x200000bc

08000f60 <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f023 030f 	bic.w	r3, r3, #15
 8000f70:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	f043 030d 	orr.w	r3, r3, #13
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	f043 0309 	orr.w	r3, r3, #9
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	f043 030d 	orr.w	r3, r3, #13
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	f043 0309 	orr.w	r3, r3, #9
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000fa0:	f107 0208 	add.w	r2, r7, #8
 8000fa4:	2364      	movs	r3, #100	@ 0x64
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2304      	movs	r3, #4
 8000faa:	214e      	movs	r1, #78	@ 0x4e
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <lcd_send_data+0x5c>)
 8000fae:	f001 ff99 	bl	8002ee4 <HAL_I2C_Master_Transmit>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000bc 	.word	0x200000bc

08000fc0 <lcd_put_cur>:
		lcd_send_data(' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <lcd_put_cur+0x18>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <lcd_put_cur+0x22>
 8000fd6:	e009      	b.n	8000fec <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fde:	603b      	str	r3, [r7, #0]
            break;
 8000fe0:	e004      	b.n	8000fec <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fe8:	603b      	str	r3, [r7, #0]
            break;
 8000fea:	bf00      	nop
    }

    lcd_send_cmd(col);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff85 	bl	8000f00 <lcd_send_cmd>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <lcd_init>:

void lcd_init (void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 8001002:	2032      	movs	r0, #50	@ 0x32
 8001004:	f000 ff2e 	bl	8001e64 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001008:	2030      	movs	r0, #48	@ 0x30
 800100a:	f7ff ff79 	bl	8000f00 <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 800100e:	2005      	movs	r0, #5
 8001010:	f000 ff28 	bl	8001e64 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001014:	2030      	movs	r0, #48	@ 0x30
 8001016:	f7ff ff73 	bl	8000f00 <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 800101a:	2001      	movs	r0, #1
 800101c:	f000 ff22 	bl	8001e64 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001020:	2030      	movs	r0, #48	@ 0x30
 8001022:	f7ff ff6d 	bl	8000f00 <lcd_send_cmd>
	HAL_Delay(10);
 8001026:	200a      	movs	r0, #10
 8001028:	f000 ff1c 	bl	8001e64 <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 800102c:	2020      	movs	r0, #32
 800102e:	f7ff ff67 	bl	8000f00 <lcd_send_cmd>
	HAL_Delay(10);
 8001032:	200a      	movs	r0, #10
 8001034:	f000 ff16 	bl	8001e64 <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 8001038:	2028      	movs	r0, #40	@ 0x28
 800103a:	f7ff ff61 	bl	8000f00 <lcd_send_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f000 ff10 	bl	8001e64 <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 8001044:	2008      	movs	r0, #8
 8001046:	f7ff ff5b 	bl	8000f00 <lcd_send_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 ff0a 	bl	8001e64 <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ff55 	bl	8000f00 <lcd_send_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f000 ff04 	bl	8001e64 <HAL_Delay>
	HAL_Delay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f000 ff01 	bl	8001e64 <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 8001062:	2006      	movs	r0, #6
 8001064:	f7ff ff4c 	bl	8000f00 <lcd_send_cmd>
	HAL_Delay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f000 fefb 	bl	8001e64 <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 800106e:	200c      	movs	r0, #12
 8001070:	f7ff ff46 	bl	8000f00 <lcd_send_cmd>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8001080:	e006      	b.n	8001090 <lcd_send_string+0x18>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff68 	bl	8000f60 <lcd_send_data>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f4      	bne.n	8001082 <lcd_send_string+0xa>
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	0000      	movs	r0, r0
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <CO_ppm_convert>:
volatile int CO_ppm;
char CO_ppm_buf[4];
char CO2_ppm_buf[4];


int CO_ppm_convert(float CO_vol) {
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    float a = ((5.0 - CO_vol) / CO_vol) * (10/5);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff f9b1 	bl	8000418 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	f04f 0000 	mov.w	r0, #0
 80010be:	4922      	ldr	r1, [pc, #136]	@ (8001148 <CO_ppm_convert+0xa0>)
 80010c0:	f7ff f84a 	bl	8000158 <__aeabi_dsub>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4614      	mov	r4, r2
 80010ca:	461d      	mov	r5, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f9a3 	bl	8000418 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4620      	mov	r0, r4
 80010d8:	4629      	mov	r1, r5
 80010da:	f7ff fb1f 	bl	800071c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	f7ff f837 	bl	800015c <__adddf3>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fcbf 	bl	8000a78 <__aeabi_d2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	60fb      	str	r3, [r7, #12]
    return (int)round(100 * pow(a, -1.559));
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff f98a 	bl	8000418 <__aeabi_f2d>
 8001104:	a30e      	add	r3, pc, #56	@ (adr r3, 8001140 <CO_ppm_convert+0x98>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f004 fce1 	bl	8005ad0 <pow>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <CO_ppm_convert+0xa4>)
 8001114:	f7ff f9d8 	bl	80004c8 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f004 fd44 	bl	8005bac <round>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fc7c 	bl	8000a28 <__aeabi_d2iz>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bdb0      	pop	{r4, r5, r7, pc}
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	fbe76c8b 	.word	0xfbe76c8b
 8001144:	bff8f1a9 	.word	0xbff8f1a9
 8001148:	40140000 	.word	0x40140000
 800114c:	40590000 	.word	0x40590000

08001150 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001160:	d102      	bne.n	8001168 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        // Thực hiện hành động khi có ngắt từ Timer 2
    	HAL_ADC_Start_IT(&hadc1);
 8001162:	4803      	ldr	r0, [pc, #12]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001164:	f000 ff7a 	bl	800205c <HAL_ADC_Start_IT>
    }
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000008c 	.word	0x2000008c
 8001174:	00000000 	.word	0x00000000

08001178 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a30      	ldr	r2, [pc, #192]	@ (8001248 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d105      	bne.n	8001196 <HAL_ADC_ConvCpltCallback+0x1e>
    CO_adc_val = HAL_ADC_GetValue(&hadc1);
 800118a:	4830      	ldr	r0, [pc, #192]	@ (800124c <HAL_ADC_ConvCpltCallback+0xd4>)
 800118c:	f001 f81c 	bl	80021c8 <HAL_ADC_GetValue>
 8001190:	4603      	mov	r3, r0
 8001192:	4a2f      	ldr	r2, [pc, #188]	@ (8001250 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001194:	6013      	str	r3, [r2, #0]
	CO_vol = ((float)CO_adc_val / 4095.0) * 5;
 8001196:	4b2e      	ldr	r3, [pc, #184]	@ (8001250 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fd72 	bl	8000c84 <__aeabi_ui2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f938 	bl	8000418 <__aeabi_f2d>
 80011a8:	a325      	add	r3, pc, #148	@ (adr r3, 8001240 <HAL_ADC_ConvCpltCallback+0xc8>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fab5 	bl	800071c <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <HAL_ADC_ConvCpltCallback+0xdc>)
 80011c0:	f7ff f982 	bl	80004c8 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc54 	bl	8000a78 <__aeabi_d2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a21      	ldr	r2, [pc, #132]	@ (8001258 <HAL_ADC_ConvCpltCallback+0xe0>)
 80011d4:	6013      	str	r3, [r2, #0]
	CO_ppm = CO_ppm_convert(CO_vol);
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HAL_ADC_ConvCpltCallback+0xe0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff64 	bl	80010a8 <CO_ppm_convert>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a1e      	ldr	r2, [pc, #120]	@ (800125c <HAL_ADC_ConvCpltCallback+0xe4>)
 80011e4:	6013      	str	r3, [r2, #0]
	sprintf(CO_ppm_buf, "%d", CO_ppm);
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <HAL_ADC_ConvCpltCallback+0xe4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	491c      	ldr	r1, [pc, #112]	@ (8001260 <HAL_ADC_ConvCpltCallback+0xe8>)
 80011ee:	481d      	ldr	r0, [pc, #116]	@ (8001264 <HAL_ADC_ConvCpltCallback+0xec>)
 80011f0:	f003 ffbe 	bl	8005170 <siprintf>
	// Xóa vị trí hiện tại trên LCD trước khi ghi chuỗi mới
	lcd_put_cur(1, 4);
 80011f4:	2104      	movs	r1, #4
 80011f6:	2001      	movs	r0, #1
 80011f8:	f7ff fee2 	bl	8000fc0 <lcd_put_cur>
	lcd_send_string("    ");  // Ghi đè 4f khoảng trắng tại vị trí đó
 80011fc:	481a      	ldr	r0, [pc, #104]	@ (8001268 <HAL_ADC_ConvCpltCallback+0xf0>)
 80011fe:	f7ff ff3b 	bl	8001078 <lcd_send_string>

	lcd_put_cur(1, 4);
 8001202:	2104      	movs	r1, #4
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fedb 	bl	8000fc0 <lcd_put_cur>
	lcd_send_string (CO_ppm_buf);
 800120a:	4816      	ldr	r0, [pc, #88]	@ (8001264 <HAL_ADC_ConvCpltCallback+0xec>)
 800120c:	f7ff ff34 	bl	8001078 <lcd_send_string>

	if(CO_ppm > 9999)
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001218:	4293      	cmp	r3, r2
 800121a:	dd0d      	ble.n	8001238 <HAL_ADC_ConvCpltCallback+0xc0>
	{
	   lcd_put_cur(1, 8);
 800121c:	2108      	movs	r1, #8
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff fece 	bl	8000fc0 <lcd_put_cur>
	   lcd_send_string("        ");  // Ghi đè 8 khoảng trắng tại vị trí đó
 8001224:	4811      	ldr	r0, [pc, #68]	@ (800126c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001226:	f7ff ff27 	bl	8001078 <lcd_send_string>
	   lcd_put_cur(1, 8);
 800122a:	2108      	movs	r1, #8
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fec7 	bl	8000fc0 <lcd_put_cur>
	   lcd_send_string ("ppm|AUTO");
 8001232:	480f      	ldr	r0, [pc, #60]	@ (8001270 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001234:	f7ff ff20 	bl	8001078 <lcd_send_string>
	}

  /*If continuousconversion mode is DISABLED uncomment below*/
  //HAL_ADC_Start_IT (&hadc1);
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	00000000 	.word	0x00000000
 8001244:	40affe00 	.word	0x40affe00
 8001248:	40012400 	.word	0x40012400
 800124c:	2000008c 	.word	0x2000008c
 8001250:	200001c0 	.word	0x200001c0
 8001254:	40140000 	.word	0x40140000
 8001258:	200001c4 	.word	0x200001c4
 800125c:	200001c8 	.word	0x200001c8
 8001260:	08006990 	.word	0x08006990
 8001264:	200001cc 	.word	0x200001cc
 8001268:	08006994 	.word	0x08006994
 800126c:	0800699c 	.word	0x0800699c
 8001270:	080069a8 	.word	0x080069a8

08001274 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
    if (GPIO_Pin == CCS811_INT_Pin)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	2b08      	cmp	r3, #8
 8001282:	d131      	bne.n	80012e8 <HAL_GPIO_EXTI_Callback+0x74>
    {  // Kiểm tra chân ngắt từ CCS811
        // đ�?c dữ liệu từ CCS811
    	CCS811_Read_Co2(&eCO2);
 8001284:	4848      	ldr	r0, [pc, #288]	@ (80013a8 <HAL_GPIO_EXTI_Callback+0x134>)
 8001286:	f7ff fdf4 	bl	8000e72 <CCS811_Read_Co2>
        CO2_ppm = (int)(eCO2);
 800128a:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <HAL_GPIO_EXTI_Callback+0x134>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b46      	ldr	r3, [pc, #280]	@ (80013ac <HAL_GPIO_EXTI_Callback+0x138>)
 8001292:	601a      	str	r2, [r3, #0]
		sprintf(CO2_ppm_buf, "%d", CO2_ppm);
 8001294:	4b45      	ldr	r3, [pc, #276]	@ (80013ac <HAL_GPIO_EXTI_Callback+0x138>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4945      	ldr	r1, [pc, #276]	@ (80013b0 <HAL_GPIO_EXTI_Callback+0x13c>)
 800129c:	4845      	ldr	r0, [pc, #276]	@ (80013b4 <HAL_GPIO_EXTI_Callback+0x140>)
 800129e:	f003 ff67 	bl	8005170 <siprintf>
		// Xóa vị trí hiện tại trên LCD trước khi ghi chuỗi mới
		lcd_put_cur(0, 4);
 80012a2:	2104      	movs	r1, #4
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fe8b 	bl	8000fc0 <lcd_put_cur>
		lcd_send_string("    ");  // Ghi đè 4 khoảng trắng tại vị trí đó
 80012aa:	4843      	ldr	r0, [pc, #268]	@ (80013b8 <HAL_GPIO_EXTI_Callback+0x144>)
 80012ac:	f7ff fee4 	bl	8001078 <lcd_send_string>
        // ghi vào vị trí này
		lcd_put_cur(0, 4);
 80012b0:	2104      	movs	r1, #4
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff fe84 	bl	8000fc0 <lcd_put_cur>
		lcd_send_string (CO2_ppm_buf);
 80012b8:	483e      	ldr	r0, [pc, #248]	@ (80013b4 <HAL_GPIO_EXTI_Callback+0x140>)
 80012ba:	f7ff fedd 	bl	8001078 <lcd_send_string>
		if(CO2_ppm > 9999)
 80012be:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_GPIO_EXTI_Callback+0x138>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012c6:	4293      	cmp	r3, r2
 80012c8:	dd6a      	ble.n	80013a0 <HAL_GPIO_EXTI_Callback+0x12c>
		{
		   lcd_put_cur(1, 8);
 80012ca:	2108      	movs	r1, #8
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fe77 	bl	8000fc0 <lcd_put_cur>
		   lcd_send_string("        ");  // Ghi đè 8 khoảng trắng tại vị trí đó
 80012d2:	483a      	ldr	r0, [pc, #232]	@ (80013bc <HAL_GPIO_EXTI_Callback+0x148>)
 80012d4:	f7ff fed0 	bl	8001078 <lcd_send_string>
		   lcd_put_cur(1, 8);
 80012d8:	2108      	movs	r1, #8
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fe70 	bl	8000fc0 <lcd_put_cur>
		   lcd_send_string ("ppm|MODE");
 80012e0:	4837      	ldr	r0, [pc, #220]	@ (80013c0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80012e2:	f7ff fec9 	bl	8001078 <lcd_send_string>
     l3_state = 1;
     at_state = 0;
	lcd_put_cur(1, 12);
	lcd_send_string ("HAND");
    }
}
 80012e6:	e05b      	b.n	80013a0 <HAL_GPIO_EXTI_Callback+0x12c>
    else if (GPIO_Pin == L1_BUT_Pin)
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d11b      	bne.n	8001326 <HAL_GPIO_EXTI_Callback+0xb2>
        while(HAL_GPIO_ReadPin(L1_BUT_GPIO_Port,L1_BUT_Pin)==0)
 80012ee:	bf00      	nop
 80012f0:	2110      	movs	r1, #16
 80012f2:	4834      	ldr	r0, [pc, #208]	@ (80013c4 <HAL_GPIO_EXTI_Callback+0x150>)
 80012f4:	f001 fc6a 	bl	8002bcc <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f8      	beq.n	80012f0 <HAL_GPIO_EXTI_Callback+0x7c>
     l1_state = 1;
 80012fe:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <HAL_GPIO_EXTI_Callback+0x154>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
     l2_state = 0;
 8001304:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <HAL_GPIO_EXTI_Callback+0x158>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
     l3_state = 0;
 800130a:	4b31      	ldr	r3, [pc, #196]	@ (80013d0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
     at_state = 0;
 8001310:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <HAL_GPIO_EXTI_Callback+0x160>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 8001316:	210c      	movs	r1, #12
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fe51 	bl	8000fc0 <lcd_put_cur>
	lcd_send_string ("HAND");
 800131e:	482e      	ldr	r0, [pc, #184]	@ (80013d8 <HAL_GPIO_EXTI_Callback+0x164>)
 8001320:	f7ff feaa 	bl	8001078 <lcd_send_string>
}
 8001324:	e03c      	b.n	80013a0 <HAL_GPIO_EXTI_Callback+0x12c>
    else if (GPIO_Pin == L2_BUT_Pin)
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d11b      	bne.n	8001364 <HAL_GPIO_EXTI_Callback+0xf0>
      while(HAL_GPIO_ReadPin(L2_BUT_GPIO_Port,L2_BUT_Pin)==0)
 800132c:	bf00      	nop
 800132e:	2102      	movs	r1, #2
 8001330:	482a      	ldr	r0, [pc, #168]	@ (80013dc <HAL_GPIO_EXTI_Callback+0x168>)
 8001332:	f001 fc4b 	bl	8002bcc <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f8      	beq.n	800132e <HAL_GPIO_EXTI_Callback+0xba>
     l1_state = 0;
 800133c:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <HAL_GPIO_EXTI_Callback+0x154>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
     l2_state = 1;
 8001342:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <HAL_GPIO_EXTI_Callback+0x158>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
     l3_state = 0;
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
     at_state = 0;
 800134e:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <HAL_GPIO_EXTI_Callback+0x160>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 8001354:	210c      	movs	r1, #12
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff fe32 	bl	8000fc0 <lcd_put_cur>
	lcd_send_string ("HAND");
 800135c:	481e      	ldr	r0, [pc, #120]	@ (80013d8 <HAL_GPIO_EXTI_Callback+0x164>)
 800135e:	f7ff fe8b 	bl	8001078 <lcd_send_string>
}
 8001362:	e01d      	b.n	80013a0 <HAL_GPIO_EXTI_Callback+0x12c>
    else if (GPIO_Pin == L3_BUT_Pin)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d11a      	bne.n	80013a0 <HAL_GPIO_EXTI_Callback+0x12c>
     while(HAL_GPIO_ReadPin(L3_BUT_GPIO_Port,L3_BUT_Pin)==0)
 800136a:	bf00      	nop
 800136c:	2101      	movs	r1, #1
 800136e:	481b      	ldr	r0, [pc, #108]	@ (80013dc <HAL_GPIO_EXTI_Callback+0x168>)
 8001370:	f001 fc2c 	bl	8002bcc <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f8      	beq.n	800136c <HAL_GPIO_EXTI_Callback+0xf8>
     l1_state = 0;
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <HAL_GPIO_EXTI_Callback+0x154>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
     l2_state = 0;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_GPIO_EXTI_Callback+0x158>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
     l3_state = 1;
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
     at_state = 0;
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_GPIO_EXTI_Callback+0x160>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 8001392:	210c      	movs	r1, #12
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fe13 	bl	8000fc0 <lcd_put_cur>
	lcd_send_string ("HAND");
 800139a:	480f      	ldr	r0, [pc, #60]	@ (80013d8 <HAL_GPIO_EXTI_Callback+0x164>)
 800139c:	f7ff fe6c 	bl	8001078 <lcd_send_string>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200001b8 	.word	0x200001b8
 80013ac:	200001bc 	.word	0x200001bc
 80013b0:	08006990 	.word	0x08006990
 80013b4:	200001d0 	.word	0x200001d0
 80013b8:	08006994 	.word	0x08006994
 80013bc:	0800699c 	.word	0x0800699c
 80013c0:	080069b4 	.word	0x080069b4
 80013c4:	40010800 	.word	0x40010800
 80013c8:	200001ac 	.word	0x200001ac
 80013cc:	200001b0 	.word	0x200001b0
 80013d0:	200001b4 	.word	0x200001b4
 80013d4:	20000000 	.word	0x20000000
 80013d8:	080069c0 	.word	0x080069c0
 80013dc:	40010c00 	.word	0x40010c00

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fcdc 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f8bc 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f000 f9fa 	bl	80017e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013f0:	f000 f910 	bl	8001614 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013f4:	f000 f94c 	bl	8001690 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013f8:	f000 f978 	bl	80016ec <MX_I2C2_Init>
  MX_TIM2_Init();
 80013fc:	f000 f9a4 	bl	8001748 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  while(!CCS811_CheckHW_ID());
 8001400:	bf00      	nop
 8001402:	f7ff fd53 	bl	8000eac <CCS811_CheckHW_ID>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0fa      	beq.n	8001402 <main+0x22>
  CCS811_Init();
 800140c:	f7ff fce6 	bl	8000ddc <CCS811_Init>
  CCS811_Set_Mode(CCS811_MODE_1SEC);
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff fd1d 	bl	8000e50 <CCS811_Set_Mode>
  CCS811_EnableInt();
 8001416:	f7ff fd5d 	bl	8000ed4 <CCS811_EnableInt>

  lcd_init();
 800141a:	f7ff fdf0 	bl	8000ffe <lcd_init>
  lcd_put_cur(0, 0);
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fdcd 	bl	8000fc0 <lcd_put_cur>
  lcd_send_string ("CO2:");
 8001426:	4843      	ldr	r0, [pc, #268]	@ (8001534 <main+0x154>)
 8001428:	f7ff fe26 	bl	8001078 <lcd_send_string>
  lcd_put_cur(0, 8);
 800142c:	2108      	movs	r1, #8
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff fdc6 	bl	8000fc0 <lcd_put_cur>
  lcd_send_string ("ppm|");
 8001434:	4840      	ldr	r0, [pc, #256]	@ (8001538 <main+0x158>)
 8001436:	f7ff fe1f 	bl	8001078 <lcd_send_string>
  lcd_put_cur(0, 12);
 800143a:	210c      	movs	r1, #12
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff fdbf 	bl	8000fc0 <lcd_put_cur>
  lcd_send_string ("MODE");
 8001442:	483e      	ldr	r0, [pc, #248]	@ (800153c <main+0x15c>)
 8001444:	f7ff fe18 	bl	8001078 <lcd_send_string>
  lcd_put_cur(1, 0);
 8001448:	2100      	movs	r1, #0
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff fdb8 	bl	8000fc0 <lcd_put_cur>
  lcd_send_string("CO :");
 8001450:	483b      	ldr	r0, [pc, #236]	@ (8001540 <main+0x160>)
 8001452:	f7ff fe11 	bl	8001078 <lcd_send_string>
  lcd_put_cur(1, 8);
 8001456:	2108      	movs	r1, #8
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff fdb1 	bl	8000fc0 <lcd_put_cur>
  lcd_send_string ("ppm|");
 800145e:	4836      	ldr	r0, [pc, #216]	@ (8001538 <main+0x158>)
 8001460:	f7ff fe0a 	bl	8001078 <lcd_send_string>
  lcd_put_cur(1, 12);
 8001464:	210c      	movs	r1, #12
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fdaa 	bl	8000fc0 <lcd_put_cur>
  lcd_send_string ("AUTO");
 800146c:	4835      	ldr	r0, [pc, #212]	@ (8001544 <main+0x164>)
 800146e:	f7ff fe03 	bl	8001078 <lcd_send_string>

  HAL_TIM_Base_Start_IT(&htim2);
 8001472:	4835      	ldr	r0, [pc, #212]	@ (8001548 <main+0x168>)
 8001474:	f003 fada 	bl	8004a2c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 if(at_state==1) // chế độ tự động
 8001478:	4b34      	ldr	r3, [pc, #208]	@ (800154c <main+0x16c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d138      	bne.n	80014f2 <main+0x112>
	 {
		  // khi không ấn nút( cảnh báo tự đông)
		  if(CO2_ppm<=1000 && CO_ppm <= 25)
 8001480:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <main+0x170>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001488:	dc0a      	bgt.n	80014a0 <main+0xc0>
 800148a:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <main+0x174>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b19      	cmp	r3, #25
 8001490:	dc06      	bgt.n	80014a0 <main+0xc0>
		  {
			  L1_Warning_On();
 8001492:	f000 fc47 	bl	8001d24 <L1_Warning_On>
			  L2_Warning_Off();
 8001496:	f000 fc11 	bl	8001cbc <L2_Warning_Off>
			  L3_Warning_Off();
 800149a:	f000 fc2f 	bl	8001cfc <L3_Warning_Off>
 800149e:	e048      	b.n	8001532 <main+0x152>
		  }
		  else if((CO2_ppm>1000 && CO2_ppm<2000) || (CO_ppm>25 && CO_ppm <50))
 80014a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <main+0x170>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014a8:	dd04      	ble.n	80014b4 <main+0xd4>
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <main+0x170>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014b2:	db07      	blt.n	80014c4 <main+0xe4>
 80014b4:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <main+0x174>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b19      	cmp	r3, #25
 80014ba:	dd0a      	ble.n	80014d2 <main+0xf2>
 80014bc:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <main+0x174>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b31      	cmp	r3, #49	@ 0x31
 80014c2:	dc06      	bgt.n	80014d2 <main+0xf2>
		  {
			  L1_Warning_Off();
 80014c4:	f000 fc3a 	bl	8001d3c <L1_Warning_Off>
			  L2_Warning_On();
 80014c8:	f000 fbec 	bl	8001ca4 <L2_Warning_On>
			  L3_Warning_Off();
 80014cc:	f000 fc16 	bl	8001cfc <L3_Warning_Off>
 80014d0:	e02f      	b.n	8001532 <main+0x152>
		  }
		  else if((CO2_ppm>=2000) || (CO_ppm>=50))
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <main+0x170>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014da:	da03      	bge.n	80014e4 <main+0x104>
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <main+0x174>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b31      	cmp	r3, #49	@ 0x31
 80014e2:	ddc9      	ble.n	8001478 <main+0x98>
		  {
			  L1_Warning_Off();
 80014e4:	f000 fc2a 	bl	8001d3c <L1_Warning_Off>
			  L2_Warning_Off();
 80014e8:	f000 fbe8 	bl	8001cbc <L2_Warning_Off>
			  L3_Warning_On();
 80014ec:	f000 fbf2 	bl	8001cd4 <L3_Warning_On>
 80014f0:	e7c2      	b.n	8001478 <main+0x98>
		  }
	 }
	 	  // khi tắt chế độ tự động
	 else
	 {
        if(l1_state==1)
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <main+0x178>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <main+0x128>
        {
          L1_Warning_On();
 80014fa:	f000 fc13 	bl	8001d24 <L1_Warning_On>
          L2_Warning_Off();
 80014fe:	f000 fbdd 	bl	8001cbc <L2_Warning_Off>
          L3_Warning_Off();
 8001502:	f000 fbfb 	bl	8001cfc <L3_Warning_Off>
 8001506:	e7b7      	b.n	8001478 <main+0x98>
        }
        else if (l2_state==1)
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <main+0x17c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <main+0x13e>
        {
          L1_Warning_Off();
 8001510:	f000 fc14 	bl	8001d3c <L1_Warning_Off>
          L2_Warning_On();
 8001514:	f000 fbc6 	bl	8001ca4 <L2_Warning_On>
          L3_Warning_Off();
 8001518:	f000 fbf0 	bl	8001cfc <L3_Warning_Off>
 800151c:	e7ac      	b.n	8001478 <main+0x98>
        }
        else if(l3_state==1)
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <main+0x180>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d1a8      	bne.n	8001478 <main+0x98>
        {
          L1_Warning_Off();
 8001526:	f000 fc09 	bl	8001d3c <L1_Warning_Off>
          L2_Warning_Off();
 800152a:	f000 fbc7 	bl	8001cbc <L2_Warning_Off>
          L3_Warning_On();
 800152e:	f000 fbd1 	bl	8001cd4 <L3_Warning_On>
	 if(at_state==1) // chế độ tự động
 8001532:	e7a1      	b.n	8001478 <main+0x98>
 8001534:	080069c8 	.word	0x080069c8
 8001538:	080069d0 	.word	0x080069d0
 800153c:	080069d8 	.word	0x080069d8
 8001540:	080069e0 	.word	0x080069e0
 8001544:	080069e8 	.word	0x080069e8
 8001548:	20000164 	.word	0x20000164
 800154c:	20000000 	.word	0x20000000
 8001550:	200001bc 	.word	0x200001bc
 8001554:	200001c8 	.word	0x200001c8
 8001558:	200001ac 	.word	0x200001ac
 800155c:	200001b0 	.word	0x200001b0
 8001560:	200001b4 	.word	0x200001b4

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	@ 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156e:	2228      	movs	r2, #40	@ 0x28
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fe1c 	bl	80051b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a2:	2301      	movs	r3, #1
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a6:	2302      	movs	r3, #2
 80015a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80015b0:	2300      	movs	r3, #0
 80015b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fd35 	bl	8004028 <HAL_RCC_OscConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80015c4:	f000 f9ca 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 ffa2 	bl	800452c <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015ee:	f000 f9b5 	bl	800195c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015f2:	2302      	movs	r3, #2
 80015f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 f90f 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001608:	f000 f9a8 	bl	800195c <Error_Handler>
  }
}
 800160c:	bf00      	nop
 800160e:	3750      	adds	r7, #80	@ 0x50
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001624:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <MX_ADC1_Init+0x74>)
 8001626:	4a19      	ldr	r2, [pc, #100]	@ (800168c <MX_ADC1_Init+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <MX_ADC1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <MX_ADC1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_ADC1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <MX_ADC1_Init+0x74>)
 800163e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001642:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <MX_ADC1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_ADC1_Init+0x74>)
 800164c:	2201      	movs	r2, #1
 800164e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001650:	480d      	ldr	r0, [pc, #52]	@ (8001688 <MX_ADC1_Init+0x74>)
 8001652:	f000 fc2b 	bl	8001eac <HAL_ADC_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800165c:	f000 f97e 	bl	800195c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001664:	2301      	movs	r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001668:	2307      	movs	r3, #7
 800166a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_ADC1_Init+0x74>)
 8001672:	f000 fe7d 	bl	8002370 <HAL_ADC_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800167c:	f000 f96e 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000008c 	.word	0x2000008c
 800168c:	40012400 	.word	0x40012400

08001690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_I2C1_Init+0x50>)
 8001696:	4a13      	ldr	r2, [pc, #76]	@ (80016e4 <MX_I2C1_Init+0x54>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_I2C1_Init+0x50>)
 800169c:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <MX_I2C1_Init+0x58>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016ce:	f001 fac5 	bl	8002c5c <HAL_I2C_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d8:	f000 f940 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000bc 	.word	0x200000bc
 80016e4:	40005400 	.word	0x40005400
 80016e8:	000186a0 	.word	0x000186a0

080016ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <MX_I2C2_Init+0x50>)
 80016f2:	4a13      	ldr	r2, [pc, #76]	@ (8001740 <MX_I2C2_Init+0x54>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <MX_I2C2_Init+0x50>)
 80016f8:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <MX_I2C2_Init+0x58>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <MX_I2C2_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <MX_I2C2_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <MX_I2C2_Init+0x50>)
 800170a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800170e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <MX_I2C2_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <MX_I2C2_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <MX_I2C2_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <MX_I2C2_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <MX_I2C2_Init+0x50>)
 800172a:	f001 fa97 	bl	8002c5c <HAL_I2C_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001734:	f000 f912 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000110 	.word	0x20000110
 8001740:	40005800 	.word	0x40005800
 8001744:	000186a0 	.word	0x000186a0

08001748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	463b      	mov	r3, r7
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001764:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001766:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800176a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 800176c:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <MX_TIM2_Init+0x98>)
 800176e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001772:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <MX_TIM2_Init+0x98>)
 800177c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <MX_TIM2_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800178e:	4814      	ldr	r0, [pc, #80]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001790:	f003 f8fc 	bl	800498c <HAL_TIM_Base_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800179a:	f000 f8df 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	4619      	mov	r1, r3
 80017aa:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <MX_TIM2_Init+0x98>)
 80017ac:	f003 fa80 	bl	8004cb0 <HAL_TIM_ConfigClockSource>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017b6:	f000 f8d1 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <MX_TIM2_Init+0x98>)
 80017c8:	f003 fc62 	bl	8005090 <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017d2:	f000 f8c3 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000164 	.word	0x20000164

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	4b54      	ldr	r3, [pc, #336]	@ (800194c <MX_GPIO_Init+0x168>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a53      	ldr	r2, [pc, #332]	@ (800194c <MX_GPIO_Init+0x168>)
 80017fe:	f043 0320 	orr.w	r3, r3, #32
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b51      	ldr	r3, [pc, #324]	@ (800194c <MX_GPIO_Init+0x168>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	4b4e      	ldr	r3, [pc, #312]	@ (800194c <MX_GPIO_Init+0x168>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a4d      	ldr	r2, [pc, #308]	@ (800194c <MX_GPIO_Init+0x168>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b4b      	ldr	r3, [pc, #300]	@ (800194c <MX_GPIO_Init+0x168>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001828:	4b48      	ldr	r3, [pc, #288]	@ (800194c <MX_GPIO_Init+0x168>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a47      	ldr	r2, [pc, #284]	@ (800194c <MX_GPIO_Init+0x168>)
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b45      	ldr	r3, [pc, #276]	@ (800194c <MX_GPIO_Init+0x168>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2102      	movs	r1, #2
 8001844:	4842      	ldr	r0, [pc, #264]	@ (8001950 <MX_GPIO_Init+0x16c>)
 8001846:	f001 f9d8 	bl	8002bfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin, GPIO_PIN_SET);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001850:	4840      	ldr	r0, [pc, #256]	@ (8001954 <MX_GPIO_Init+0x170>)
 8001852:	f001 f9d2 	bl	8002bfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CCS_RST_GPIO_Port, CCS_RST_Pin, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800185c:	483c      	ldr	r0, [pc, #240]	@ (8001950 <MX_GPIO_Init+0x16c>)
 800185e:	f001 f9cc 	bl	8002bfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001862:	2302      	movs	r3, #2
 8001864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2302      	movs	r3, #2
 8001870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4619      	mov	r1, r3
 8001878:	4835      	ldr	r0, [pc, #212]	@ (8001950 <MX_GPIO_Init+0x16c>)
 800187a:	f001 f823 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : L1_BUT_Pin */
  GPIO_InitStruct.Pin = L1_BUT_Pin;
 800187e:	2310      	movs	r3, #16
 8001880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001882:	4b35      	ldr	r3, [pc, #212]	@ (8001958 <MX_GPIO_Init+0x174>)
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L1_BUT_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	4619      	mov	r1, r3
 8001890:	482f      	ldr	r0, [pc, #188]	@ (8001950 <MX_GPIO_Init+0x16c>)
 8001892:	f001 f817 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L3_BUT_Pin L2_BUT_Pin */
  GPIO_InitStruct.Pin = L3_BUT_Pin|L2_BUT_Pin;
 8001896:	2303      	movs	r3, #3
 8001898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800189a:	4b2f      	ldr	r3, [pc, #188]	@ (8001958 <MX_GPIO_Init+0x174>)
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	4619      	mov	r1, r3
 80018a8:	482a      	ldr	r0, [pc, #168]	@ (8001954 <MX_GPIO_Init+0x170>)
 80018aa:	f001 f80b 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin;
 80018ae:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80018b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	4823      	ldr	r0, [pc, #140]	@ (8001954 <MX_GPIO_Init+0x170>)
 80018c8:	f000 fffc 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CCS_RST_Pin */
  GPIO_InitStruct.Pin = CCS_RST_Pin;
 80018cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2302      	movs	r3, #2
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CCS_RST_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4619      	mov	r1, r3
 80018e4:	481a      	ldr	r0, [pc, #104]	@ (8001950 <MX_GPIO_Init+0x16c>)
 80018e6:	f000 ffed 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CCS811_INT_Pin */
  GPIO_InitStruct.Pin = CCS811_INT_Pin;
 80018ea:	2308      	movs	r3, #8
 80018ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_GPIO_Init+0x174>)
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CCS811_INT_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	4619      	mov	r1, r3
 80018fc:	4815      	ldr	r0, [pc, #84]	@ (8001954 <MX_GPIO_Init+0x170>)
 80018fe:	f000 ffe1 	bl	80028c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2102      	movs	r1, #2
 8001906:	2006      	movs	r0, #6
 8001908:	f000 ffa5 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800190c:	2006      	movs	r0, #6
 800190e:	f000 ffbe 	bl	800288e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2102      	movs	r1, #2
 8001916:	2007      	movs	r0, #7
 8001918:	f000 ff9d 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800191c:	2007      	movs	r0, #7
 800191e:	f000 ffb6 	bl	800288e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2103      	movs	r1, #3
 8001926:	2009      	movs	r0, #9
 8001928:	f000 ff95 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800192c:	2009      	movs	r0, #9
 800192e:	f000 ffae 	bl	800288e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2102      	movs	r1, #2
 8001936:	200a      	movs	r0, #10
 8001938:	f000 ff8d 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800193c:	200a      	movs	r0, #10
 800193e:	f000 ffa6 	bl	800288e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	10210000 	.word	0x10210000

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <Error_Handler+0x8>

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_MspInit+0x5c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <HAL_MspInit+0x5c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_MspInit+0x5c>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_MspInit+0x60>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_MspInit+0x60>)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000

080019cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_ADC_MspInit+0x7c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d129      	bne.n	8001a40 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a16      	ldr	r2, [pc, #88]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a10      	ldr	r2, [pc, #64]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a20:	2303      	movs	r3, #3
 8001a22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4809      	ldr	r0, [pc, #36]	@ (8001a50 <HAL_ADC_MspInit+0x84>)
 8001a2c:	f000 ff4a 	bl	80028c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2105      	movs	r1, #5
 8001a34:	2012      	movs	r0, #18
 8001a36:	f000 ff0e 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a3a:	2012      	movs	r0, #18
 8001a3c:	f000 ff27 	bl	800288e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40012400 	.word	0x40012400
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010800 	.word	0x40010800

08001a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0318 	add.w	r3, r7, #24
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d124      	bne.n	8001abe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a29      	ldr	r2, [pc, #164]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a8c:	23c0      	movs	r3, #192	@ 0xc0
 8001a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a90:	2312      	movs	r3, #18
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4821      	ldr	r0, [pc, #132]	@ (8001b24 <HAL_I2C_MspInit+0xd0>)
 8001aa0:	f000 ff10 	bl	80028c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001aaa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aae:	61d3      	str	r3, [r2, #28]
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001abc:	e029      	b.n	8001b12 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a19      	ldr	r2, [pc, #100]	@ (8001b28 <HAL_I2C_MspInit+0xd4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d124      	bne.n	8001b12 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ae0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae6:	2312      	movs	r3, #18
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	4619      	mov	r1, r3
 8001af4:	480b      	ldr	r0, [pc, #44]	@ (8001b24 <HAL_I2C_MspInit+0xd0>)
 8001af6:	f000 fee5 	bl	80028c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001b00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	@ 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010c00 	.word	0x40010c00
 8001b28:	40005800 	.word	0x40005800

08001b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b3c:	d113      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <HAL_TIM_Base_MspInit+0x44>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <HAL_TIM_Base_MspInit+0x44>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_TIM_Base_MspInit+0x44>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2104      	movs	r1, #4
 8001b5a:	201c      	movs	r0, #28
 8001b5c:	f000 fe7b 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b60:	201c      	movs	r0, #28
 8001b62:	f000 fe94 	bl	800288e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <NMI_Handler+0x4>

08001b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc4:	f000 f932 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L3_BUT_Pin);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f001 f82b 	bl	8002c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L2_BUT_Pin);
 8001bde:	2002      	movs	r0, #2
 8001be0:	f001 f824 	bl	8002c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CCS811_INT_Pin);
 8001bec:	2008      	movs	r0, #8
 8001bee:	f001 f81d 	bl	8002c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L1_BUT_Pin);
 8001bfa:	2010      	movs	r0, #16
 8001bfc:	f001 f816 	bl	8002c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <ADC1_2_IRQHandler+0x10>)
 8001c0a:	f000 fae9 	bl	80021e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000008c 	.word	0x2000008c

08001c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <TIM2_IRQHandler+0x10>)
 8001c1e:	f002 ff57 	bl	8004ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000164 	.word	0x20000164

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f003 fab0 	bl	80051c0 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20005000 	.word	0x20005000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	200001d4 	.word	0x200001d4
 8001c94:	20000328 	.word	0x20000328

08001c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <L2_Warning_On>:

#include "warning.h"


void L2_Warning_On ()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cae:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <L2_Warning_On+0x14>)
 8001cb0:	f000 ffa3 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40010c00 	.word	0x40010c00

08001cbc <L2_Warning_Off>:
void L2_Warning_Off()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cc6:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <L2_Warning_Off+0x14>)
 8001cc8:	f000 ff97 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40010c00 	.word	0x40010c00

08001cd4 <L3_Warning_On>:
void L3_Warning_On ()
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <L3_Warning_On+0x20>)
 8001ce0:	f000 ff8b 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <L3_Warning_On+0x24>)
 8001cea:	f000 ff86 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40010c00 	.word	0x40010c00
 8001cf8:	40010800 	.word	0x40010800

08001cfc <L3_Warning_Off>:
void L3_Warning_Off()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <L3_Warning_Off+0x20>)
 8001d08:	f000 ff77 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2102      	movs	r1, #2
 8001d10:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <L3_Warning_Off+0x24>)
 8001d12:	f000 ff72 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40010c00 	.word	0x40010c00
 8001d20:	40010800 	.word	0x40010800

08001d24 <L1_Warning_On>:
void L1_Warning_On()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d2e:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <L1_Warning_On+0x14>)
 8001d30:	f000 ff63 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40010c00 	.word	0x40010c00

08001d3c <L1_Warning_Off>:
void L1_Warning_Off()
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8001d40:	2201      	movs	r2, #1
 8001d42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d46:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <L1_Warning_Off+0x14>)
 8001d48:	f000 ff57 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40010c00 	.word	0x40010c00

08001d54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d54:	f7ff ffa0 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d58:	480b      	ldr	r0, [pc, #44]	@ (8001d88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d5a:	490c      	ldr	r1, [pc, #48]	@ (8001d8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d60:	e002      	b.n	8001d68 <LoopCopyDataInit>

08001d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d66:	3304      	adds	r3, #4

08001d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d6c:	d3f9      	bcc.n	8001d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6e:	4a09      	ldr	r2, [pc, #36]	@ (8001d94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d70:	4c09      	ldr	r4, [pc, #36]	@ (8001d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d74:	e001      	b.n	8001d7a <LoopFillZerobss>

08001d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d78:	3204      	adds	r2, #4

08001d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d7c:	d3fb      	bcc.n	8001d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f003 fa25 	bl	80051cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d82:	f7ff fb2d 	bl	80013e0 <main>
  bx lr
 8001d86:	4770      	bx	lr
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d90:	08006a88 	.word	0x08006a88
  ldr r2, =_sbss
 8001d94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d98:	20000324 	.word	0x20000324

08001d9c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <CAN1_RX1_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <HAL_Init+0x28>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <HAL_Init+0x28>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 fd45 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	200f      	movs	r0, #15
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fdd4 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fd5d 	bl	80028aa <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f000 fd25 	bl	8002856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	@ (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000004 	.word	0x20000004
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_IncTick+0x1c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a03      	ldr	r2, [pc, #12]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	2000000c 	.word	0x2000000c
 8001e4c:	200001d8 	.word	0x200001d8

08001e50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <HAL_GetTick+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	200001d8 	.word	0x200001d8

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff fff0 	bl	8001e50 <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffe0 	bl	8001e50 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0be      	b.n	800204c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fd6e 	bl	80019cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb8f 	bl	8002614 <ADC_ConversionStop_Disable>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 8099 	bne.w	800203a <HAL_ADC_Init+0x18e>
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 8095 	bne.w	800203a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f18:	f023 0302 	bic.w	r3, r3, #2
 8001f1c:	f043 0202 	orr.w	r2, r3, #2
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7b1b      	ldrb	r3, [r3, #12]
 8001f32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f44:	d003      	beq.n	8001f4e <HAL_ADC_Init+0xa2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_ADC_Init+0xa8>
 8001f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_Init+0xaa>
 8001f54:	2300      	movs	r3, #0
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7d1b      	ldrb	r3, [r3, #20]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d119      	bne.n	8001f98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7b1b      	ldrb	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	035a      	lsls	r2, r3, #13
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	e00b      	b.n	8001f98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <HAL_ADC_Init+0x1a8>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fc8:	d003      	beq.n	8001fd2 <HAL_ADC_Init+0x126>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d104      	bne.n	8001fdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	051b      	lsls	r3, r3, #20
 8001fda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <HAL_ADC_Init+0x1ac>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d10b      	bne.n	8002018 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002016:	e018      	b.n	800204a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	f023 0312 	bic.w	r3, r3, #18
 8002020:	f043 0210 	orr.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002038:	e007      	b.n	800204a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	f043 0210 	orr.w	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800204a:	7dfb      	ldrb	r3, [r7, #23]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	ffe1f7fd 	.word	0xffe1f7fd
 8002058:	ff1f0efe 	.word	0xff1f0efe

0800205c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Start_IT+0x1a>
 8002072:	2302      	movs	r3, #2
 8002074:	e0a0      	b.n	80021b8 <HAL_ADC_Start_IT+0x15c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa6e 	bl	8002560 <ADC_Enable>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 808f 	bne.w	80021ae <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a45      	ldr	r2, [pc, #276]	@ (80021c0 <HAL_ADC_Start_IT+0x164>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d105      	bne.n	80020ba <HAL_ADC_Start_IT+0x5e>
 80020ae:	4b45      	ldr	r3, [pc, #276]	@ (80021c4 <HAL_ADC_Start_IT+0x168>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d026      	beq.n	8002122 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020e4:	e01d      	b.n	8002122 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a33      	ldr	r2, [pc, #204]	@ (80021c4 <HAL_ADC_Start_IT+0x168>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d004      	beq.n	8002106 <HAL_ADC_Start_IT+0xaa>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2f      	ldr	r2, [pc, #188]	@ (80021c0 <HAL_ADC_Start_IT+0x164>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10d      	bne.n	8002122 <HAL_ADC_Start_IT+0xc6>
 8002106:	4b2f      	ldr	r3, [pc, #188]	@ (80021c4 <HAL_ADC_Start_IT+0x168>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800211a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002132:	f023 0206 	bic.w	r2, r3, #6
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	62da      	str	r2, [r3, #44]	@ 0x2c
 800213a:	e002      	b.n	8002142 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f06f 0202 	mvn.w	r2, #2
 8002152:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0220 	orr.w	r2, r2, #32
 8002162:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800216e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002172:	d113      	bne.n	800219c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002178:	4a11      	ldr	r2, [pc, #68]	@ (80021c0 <HAL_ADC_Start_IT+0x164>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d105      	bne.n	800218a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_ADC_Start_IT+0x168>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	e00c      	b.n	80021b6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e003      	b.n	80021b6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40012800 	.word	0x40012800
 80021c4:	40012400 	.word	0x40012400

080021c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03e      	beq.n	8002280 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d039      	beq.n	8002280 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b00      	cmp	r3, #0
 8002216:	d105      	bne.n	8002224 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800222e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002232:	d11d      	bne.n	8002270 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002238:	2b00      	cmp	r3, #0
 800223a:	d119      	bne.n	8002270 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0220 	bic.w	r2, r2, #32
 800224a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	f043 0201 	orr.w	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fe ff81 	bl	8001178 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f06f 0212 	mvn.w	r2, #18
 800227e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04d      	beq.n	8002326 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d048      	beq.n	8002326 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80022b6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80022ba:	d012      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d125      	bne.n	8002316 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80022d4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022d8:	d11d      	bne.n	8002316 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d119      	bne.n	8002316 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022f0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f9bd 	bl	8002696 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 020c 	mvn.w	r2, #12
 8002324:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f809 	bl	800235e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0201 	mvn.w	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x20>
 800238c:	2302      	movs	r3, #2
 800238e:	e0dc      	b.n	800254a <HAL_ADC_ConfigChannel+0x1da>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d81c      	bhi.n	80023da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	3b05      	subs	r3, #5
 80023b2:	221f      	movs	r2, #31
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	3b05      	subs	r3, #5
 80023cc:	fa00 f203 	lsl.w	r2, r0, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023d8:	e03c      	b.n	8002454 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d81c      	bhi.n	800241c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b23      	subs	r3, #35	@ 0x23
 80023f4:	221f      	movs	r2, #31
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	4019      	ands	r1, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b23      	subs	r3, #35	@ 0x23
 800240e:	fa00 f203 	lsl.w	r2, r0, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	631a      	str	r2, [r3, #48]	@ 0x30
 800241a:	e01b      	b.n	8002454 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	3b41      	subs	r3, #65	@ 0x41
 800242e:	221f      	movs	r2, #31
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	4019      	ands	r1, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b41      	subs	r3, #65	@ 0x41
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b09      	cmp	r3, #9
 800245a:	d91c      	bls.n	8002496 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68d9      	ldr	r1, [r3, #12]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	3b1e      	subs	r3, #30
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6898      	ldr	r0, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	3b1e      	subs	r3, #30
 8002488:	fa00 f203 	lsl.w	r2, r0, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	e019      	b.n	80024ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6919      	ldr	r1, [r3, #16]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	2207      	movs	r2, #7
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4019      	ands	r1, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6898      	ldr	r0, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	fa00 f203 	lsl.w	r2, r0, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d003      	beq.n	80024da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024d6:	2b11      	cmp	r3, #17
 80024d8:	d132      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_ADC_ConfigChannel+0x1e4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d125      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d126      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002500:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b10      	cmp	r3, #16
 8002508:	d11a      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <HAL_ADC_ConfigChannel+0x1e8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a13      	ldr	r2, [pc, #76]	@ (800255c <HAL_ADC_ConfigChannel+0x1ec>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	0c9a      	lsrs	r2, r3, #18
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002520:	e002      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3b01      	subs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x1b2>
 800252e:	e007      	b.n	8002540 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40012400 	.word	0x40012400
 8002558:	20000004 	.word	0x20000004
 800255c:	431bde83 	.word	0x431bde83

08002560 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d040      	beq.n	8002600 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800258e:	4b1f      	ldr	r3, [pc, #124]	@ (800260c <ADC_Enable+0xac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <ADC_Enable+0xb0>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	0c9b      	lsrs	r3, r3, #18
 800259a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800259c:	e002      	b.n	80025a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025aa:	f7ff fc51 	bl	8001e50 <HAL_GetTick>
 80025ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025b0:	e01f      	b.n	80025f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025b2:	f7ff fc4d 	bl	8001e50 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d918      	bls.n	80025f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d011      	beq.n	80025f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	f043 0210 	orr.w	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e007      	b.n	8002602 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d1d8      	bne.n	80025b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000004 	.word	0x20000004
 8002610:	431bde83 	.word	0x431bde83

08002614 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d12e      	bne.n	800268c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800263e:	f7ff fc07 	bl	8001e50 <HAL_GetTick>
 8002642:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002644:	e01b      	b.n	800267e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002646:	f7ff fc03 	bl	8001e50 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d914      	bls.n	800267e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10d      	bne.n	800267e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d0dc      	beq.n	8002646 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4906      	ldr	r1, [pc, #24]	@ (8002740 <__NVIC_EnableIRQ+0x34>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	@ 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff90 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	@ (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff2d 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff42 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff90 	bl	8002798 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5f 	bl	8002744 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff35 	bl	800270c <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffa2 	bl	80027fc <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b08b      	sub	sp, #44	@ 0x2c
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d6:	e169      	b.n	8002bac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028d8:	2201      	movs	r2, #1
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f040 8158 	bne.w	8002ba6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a9a      	ldr	r2, [pc, #616]	@ (8002b64 <HAL_GPIO_Init+0x2a0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d05e      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 8002900:	4a98      	ldr	r2, [pc, #608]	@ (8002b64 <HAL_GPIO_Init+0x2a0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d875      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 8002906:	4a98      	ldr	r2, [pc, #608]	@ (8002b68 <HAL_GPIO_Init+0x2a4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d058      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 800290c:	4a96      	ldr	r2, [pc, #600]	@ (8002b68 <HAL_GPIO_Init+0x2a4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d86f      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 8002912:	4a96      	ldr	r2, [pc, #600]	@ (8002b6c <HAL_GPIO_Init+0x2a8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d052      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 8002918:	4a94      	ldr	r2, [pc, #592]	@ (8002b6c <HAL_GPIO_Init+0x2a8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d869      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 800291e:	4a94      	ldr	r2, [pc, #592]	@ (8002b70 <HAL_GPIO_Init+0x2ac>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d04c      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 8002924:	4a92      	ldr	r2, [pc, #584]	@ (8002b70 <HAL_GPIO_Init+0x2ac>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d863      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 800292a:	4a92      	ldr	r2, [pc, #584]	@ (8002b74 <HAL_GPIO_Init+0x2b0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d046      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 8002930:	4a90      	ldr	r2, [pc, #576]	@ (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d85d      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 8002936:	2b12      	cmp	r3, #18
 8002938:	d82a      	bhi.n	8002990 <HAL_GPIO_Init+0xcc>
 800293a:	2b12      	cmp	r3, #18
 800293c:	d859      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 800293e:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <HAL_GPIO_Init+0x80>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	080029bf 	.word	0x080029bf
 8002948:	08002999 	.word	0x08002999
 800294c:	080029ab 	.word	0x080029ab
 8002950:	080029ed 	.word	0x080029ed
 8002954:	080029f3 	.word	0x080029f3
 8002958:	080029f3 	.word	0x080029f3
 800295c:	080029f3 	.word	0x080029f3
 8002960:	080029f3 	.word	0x080029f3
 8002964:	080029f3 	.word	0x080029f3
 8002968:	080029f3 	.word	0x080029f3
 800296c:	080029f3 	.word	0x080029f3
 8002970:	080029f3 	.word	0x080029f3
 8002974:	080029f3 	.word	0x080029f3
 8002978:	080029f3 	.word	0x080029f3
 800297c:	080029f3 	.word	0x080029f3
 8002980:	080029f3 	.word	0x080029f3
 8002984:	080029f3 	.word	0x080029f3
 8002988:	080029a1 	.word	0x080029a1
 800298c:	080029b5 	.word	0x080029b5
 8002990:	4a79      	ldr	r2, [pc, #484]	@ (8002b78 <HAL_GPIO_Init+0x2b4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002996:	e02c      	b.n	80029f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	623b      	str	r3, [r7, #32]
          break;
 800299e:	e029      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	3304      	adds	r3, #4
 80029a6:	623b      	str	r3, [r7, #32]
          break;
 80029a8:	e024      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	3308      	adds	r3, #8
 80029b0:	623b      	str	r3, [r7, #32]
          break;
 80029b2:	e01f      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	330c      	adds	r3, #12
 80029ba:	623b      	str	r3, [r7, #32]
          break;
 80029bc:	e01a      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029c6:	2304      	movs	r3, #4
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e013      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029d4:	2308      	movs	r3, #8
 80029d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	611a      	str	r2, [r3, #16]
          break;
 80029de:	e009      	b.n	80029f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029e0:	2308      	movs	r3, #8
 80029e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	615a      	str	r2, [r3, #20]
          break;
 80029ea:	e003      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
          break;
 80029f0:	e000      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          break;
 80029f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2bff      	cmp	r3, #255	@ 0xff
 80029f8:	d801      	bhi.n	80029fe <HAL_GPIO_Init+0x13a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	e001      	b.n	8002a02 <HAL_GPIO_Init+0x13e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2bff      	cmp	r3, #255	@ 0xff
 8002a08:	d802      	bhi.n	8002a10 <HAL_GPIO_Init+0x14c>
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	e002      	b.n	8002a16 <HAL_GPIO_Init+0x152>
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	3b08      	subs	r3, #8
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	210f      	movs	r1, #15
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80b1 	beq.w	8002ba6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a44:	4b4d      	ldr	r3, [pc, #308]	@ (8002b7c <HAL_GPIO_Init+0x2b8>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a4c      	ldr	r2, [pc, #304]	@ (8002b7c <HAL_GPIO_Init+0x2b8>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b4a      	ldr	r3, [pc, #296]	@ (8002b7c <HAL_GPIO_Init+0x2b8>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a5c:	4a48      	ldr	r2, [pc, #288]	@ (8002b80 <HAL_GPIO_Init+0x2bc>)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a40      	ldr	r2, [pc, #256]	@ (8002b84 <HAL_GPIO_Init+0x2c0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <HAL_GPIO_Init+0x1ec>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00d      	beq.n	8002aac <HAL_GPIO_Init+0x1e8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a3e      	ldr	r2, [pc, #248]	@ (8002b8c <HAL_GPIO_Init+0x2c8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d007      	beq.n	8002aa8 <HAL_GPIO_Init+0x1e4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b90 <HAL_GPIO_Init+0x2cc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_GPIO_Init+0x1e0>
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	e004      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab4:	f002 0203 	and.w	r2, r2, #3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4093      	lsls	r3, r2
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ac2:	492f      	ldr	r1, [pc, #188]	@ (8002b80 <HAL_GPIO_Init+0x2bc>)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002adc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	492c      	ldr	r1, [pc, #176]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aea:	4b2a      	ldr	r3, [pc, #168]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	4928      	ldr	r1, [pc, #160]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b04:	4b23      	ldr	r3, [pc, #140]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	4922      	ldr	r1, [pc, #136]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60cb      	str	r3, [r1, #12]
 8002b10:	e006      	b.n	8002b20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	491e      	ldr	r1, [pc, #120]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b2c:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4918      	ldr	r1, [pc, #96]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b3a:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	4914      	ldr	r1, [pc, #80]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d021      	beq.n	8002b98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b54:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	490e      	ldr	r1, [pc, #56]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
 8002b60:	e021      	b.n	8002ba6 <HAL_GPIO_Init+0x2e2>
 8002b62:	bf00      	nop
 8002b64:	10320000 	.word	0x10320000
 8002b68:	10310000 	.word	0x10310000
 8002b6c:	10220000 	.word	0x10220000
 8002b70:	10210000 	.word	0x10210000
 8002b74:	10120000 	.word	0x10120000
 8002b78:	10110000 	.word	0x10110000
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40010800 	.word	0x40010800
 8002b88:	40010c00 	.word	0x40010c00
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40011400 	.word	0x40011400
 8002b94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	4909      	ldr	r1, [pc, #36]	@ (8002bc8 <HAL_GPIO_Init+0x304>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	3301      	adds	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f47f ae8e 	bne.w	80028d8 <HAL_GPIO_Init+0x14>
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	372c      	adds	r7, #44	@ 0x2c
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	40010400 	.word	0x40010400

08002bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e001      	b.n	8002bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	807b      	strh	r3, [r7, #2]
 8002c06:	4613      	mov	r3, r2
 8002c08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c0a:	787b      	ldrb	r3, [r7, #1]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c16:	e003      	b.n	8002c20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	041a      	lsls	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	611a      	str	r2, [r3, #16]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c36:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c42:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fb12 	bl	8001274 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40010400 	.word	0x40010400

08002c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e12b      	b.n	8002ec6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe fee6 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	@ 0x24
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cc0:	f001 fd7c 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8002cc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a81      	ldr	r2, [pc, #516]	@ (8002ed0 <HAL_I2C_Init+0x274>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d807      	bhi.n	8002ce0 <HAL_I2C_Init+0x84>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a80      	ldr	r2, [pc, #512]	@ (8002ed4 <HAL_I2C_Init+0x278>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	bf94      	ite	ls
 8002cd8:	2301      	movls	r3, #1
 8002cda:	2300      	movhi	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e006      	b.n	8002cee <HAL_I2C_Init+0x92>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a7d      	ldr	r2, [pc, #500]	@ (8002ed8 <HAL_I2C_Init+0x27c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	bf94      	ite	ls
 8002ce8:	2301      	movls	r3, #1
 8002cea:	2300      	movhi	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0e7      	b.n	8002ec6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4a78      	ldr	r2, [pc, #480]	@ (8002edc <HAL_I2C_Init+0x280>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0c9b      	lsrs	r3, r3, #18
 8002d00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a6a      	ldr	r2, [pc, #424]	@ (8002ed0 <HAL_I2C_Init+0x274>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d802      	bhi.n	8002d30 <HAL_I2C_Init+0xd4>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	e009      	b.n	8002d44 <HAL_I2C_Init+0xe8>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	4a69      	ldr	r2, [pc, #420]	@ (8002ee0 <HAL_I2C_Init+0x284>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	3301      	adds	r3, #1
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	495c      	ldr	r1, [pc, #368]	@ (8002ed0 <HAL_I2C_Init+0x274>)
 8002d60:	428b      	cmp	r3, r1
 8002d62:	d819      	bhi.n	8002d98 <HAL_I2C_Init+0x13c>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e59      	subs	r1, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d72:	1c59      	adds	r1, r3, #1
 8002d74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d78:	400b      	ands	r3, r1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_I2C_Init+0x138>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1e59      	subs	r1, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d92:	e051      	b.n	8002e38 <HAL_I2C_Init+0x1dc>
 8002d94:	2304      	movs	r3, #4
 8002d96:	e04f      	b.n	8002e38 <HAL_I2C_Init+0x1dc>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d111      	bne.n	8002dc4 <HAL_I2C_Init+0x168>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	440b      	add	r3, r1
 8002dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e012      	b.n	8002dea <HAL_I2C_Init+0x18e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	0099      	lsls	r1, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Init+0x196>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e022      	b.n	8002e38 <HAL_I2C_Init+0x1dc>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10e      	bne.n	8002e18 <HAL_I2C_Init+0x1bc>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1e58      	subs	r0, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	440b      	add	r3, r1
 8002e08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e16:	e00f      	b.n	8002e38 <HAL_I2C_Init+0x1dc>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e58      	subs	r0, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	0099      	lsls	r1, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	6809      	ldr	r1, [r1, #0]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6911      	ldr	r1, [r2, #16]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68d2      	ldr	r2, [r2, #12]
 8002e72:	4311      	orrs	r1, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	000186a0 	.word	0x000186a0
 8002ed4:	001e847f 	.word	0x001e847f
 8002ed8:	003d08ff 	.word	0x003d08ff
 8002edc:	431bde83 	.word	0x431bde83
 8002ee0:	10624dd3 	.word	0x10624dd3

08002ee4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	817b      	strh	r3, [r7, #10]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7fe ffaa 	bl	8001e50 <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	f040 80e0 	bne.w	80030cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2319      	movs	r3, #25
 8002f12:	2201      	movs	r2, #1
 8002f14:	4970      	ldr	r1, [pc, #448]	@ (80030d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fe50 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0d3      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2C_Master_Transmit+0x50>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0cc      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d007      	beq.n	8002f5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2221      	movs	r2, #33	@ 0x21
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2210      	movs	r2, #16
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	893a      	ldrh	r2, [r7, #8]
 8002f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a50      	ldr	r2, [pc, #320]	@ (80030dc <HAL_I2C_Master_Transmit+0x1f8>)
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	6a3a      	ldr	r2, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fc0a 	bl	80037bc <I2C_MasterRequestWrite>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e08d      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fc8:	e066      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 ff0e 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d107      	bne.n	8002ff2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06b      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d11b      	bne.n	800306c <HAL_I2C_Master_Transmit+0x188>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d017      	beq.n	800306c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	6a39      	ldr	r1, [r7, #32]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 ff05 	bl	8003e80 <I2C_WaitOnBTFFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00d      	beq.n	8003098 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	2b04      	cmp	r3, #4
 8003082:	d107      	bne.n	8003094 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003092:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01a      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d194      	bne.n	8002fca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e000      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	00100002 	.word	0x00100002
 80030dc:	ffff0000 	.word	0xffff0000

080030e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	817b      	strh	r3, [r7, #10]
 80030f2:	460b      	mov	r3, r1
 80030f4:	813b      	strh	r3, [r7, #8]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030fa:	f7fe fea9 	bl	8001e50 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b20      	cmp	r3, #32
 800310a:	f040 80d9 	bne.w	80032c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2319      	movs	r3, #25
 8003114:	2201      	movs	r2, #1
 8003116:	496d      	ldr	r1, [pc, #436]	@ (80032cc <HAL_I2C_Mem_Write+0x1ec>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fd4f 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
 8003126:	e0cc      	b.n	80032c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_I2C_Mem_Write+0x56>
 8003132:	2302      	movs	r3, #2
 8003134:	e0c5      	b.n	80032c2 <HAL_I2C_Mem_Write+0x1e2>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d007      	beq.n	800315c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800316a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2221      	movs	r2, #33	@ 0x21
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800318c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a4d      	ldr	r2, [pc, #308]	@ (80032d0 <HAL_I2C_Mem_Write+0x1f0>)
 800319c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800319e:	88f8      	ldrh	r0, [r7, #6]
 80031a0:	893a      	ldrh	r2, [r7, #8]
 80031a2:	8979      	ldrh	r1, [r7, #10]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	4603      	mov	r3, r0
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fb86 	bl	80038c0 <I2C_RequestMemoryWrite>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d052      	beq.n	8003260 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e081      	b.n	80032c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fe14 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d107      	bne.n	80031e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e06b      	b.n	80032c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d11b      	bne.n	8003260 <HAL_I2C_Mem_Write+0x180>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d017      	beq.n	8003260 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1aa      	bne.n	80031be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fe07 	bl	8003e80 <I2C_WaitOnBTFFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00d      	beq.n	8003294 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	2b04      	cmp	r3, #4
 800327e:	d107      	bne.n	8003290 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800328e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e016      	b.n	80032c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	00100002 	.word	0x00100002
 80032d0:	ffff0000 	.word	0xffff0000

080032d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	@ 0x30
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	460b      	mov	r3, r1
 80032e8:	813b      	strh	r3, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032f2:	f7fe fdad 	bl	8001e50 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b20      	cmp	r3, #32
 8003302:	f040 8250 	bne.w	80037a6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2319      	movs	r3, #25
 800330c:	2201      	movs	r2, #1
 800330e:	4982      	ldr	r1, [pc, #520]	@ (8003518 <HAL_I2C_Mem_Read+0x244>)
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fc53 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
 800331e:	e243      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_I2C_Mem_Read+0x5a>
 800332a:	2302      	movs	r3, #2
 800332c:	e23c      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d007      	beq.n	8003354 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2222      	movs	r2, #34	@ 0x22
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a62      	ldr	r2, [pc, #392]	@ (800351c <HAL_I2C_Mem_Read+0x248>)
 8003394:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003396:	88f8      	ldrh	r0, [r7, #6]
 8003398:	893a      	ldrh	r2, [r7, #8]
 800339a:	8979      	ldrh	r1, [r7, #10]
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4603      	mov	r3, r0
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fb20 	bl	80039ec <I2C_RequestMemoryRead>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1f8      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d113      	bne.n	80033e6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e1cc      	b.n	8003780 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d11e      	bne.n	800342c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033fe:	b672      	cpsid	i
}
 8003400:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003426:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003428:	b662      	cpsie	i
}
 800342a:	e035      	b.n	8003498 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	2b02      	cmp	r3, #2
 8003432:	d11e      	bne.n	8003472 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003442:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003444:	b672      	cpsid	i
}
 8003446:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800346e:	b662      	cpsie	i
}
 8003470:	e012      	b.n	8003498 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003480:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003498:	e172      	b.n	8003780 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349e:	2b03      	cmp	r3, #3
 80034a0:	f200 811f 	bhi.w	80036e2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d123      	bne.n	80034f4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fd2d 	bl	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e173      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034f2:	e145      	b.n	8003780 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d152      	bne.n	80035a2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003502:	2200      	movs	r2, #0
 8003504:	4906      	ldr	r1, [pc, #24]	@ (8003520 <HAL_I2C_Mem_Read+0x24c>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fb58 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e148      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
 8003516:	bf00      	nop
 8003518:	00100002 	.word	0x00100002
 800351c:	ffff0000 	.word	0xffff0000
 8003520:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003524:	b672      	cpsid	i
}
 8003526:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800356a:	b662      	cpsie	i
}
 800356c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035a0:	e0ee      	b.n	8003780 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	2200      	movs	r2, #0
 80035aa:	4981      	ldr	r1, [pc, #516]	@ (80037b0 <HAL_I2C_Mem_Read+0x4dc>)
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fb05 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0f5      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035cc:	b672      	cpsid	i
}
 80035ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003602:	4b6c      	ldr	r3, [pc, #432]	@ (80037b4 <HAL_I2C_Mem_Read+0x4e0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	08db      	lsrs	r3, r3, #3
 8003608:	4a6b      	ldr	r2, [pc, #428]	@ (80037b8 <HAL_I2C_Mem_Read+0x4e4>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0a1a      	lsrs	r2, r3, #8
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	00da      	lsls	r2, r3, #3
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	3b01      	subs	r3, #1
 8003620:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d118      	bne.n	800365a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f043 0220 	orr.w	r2, r3, #32
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800364a:	b662      	cpsie	i
}
 800364c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0a6      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d1d9      	bne.n	800361c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036aa:	b662      	cpsie	i
}
 80036ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e0:	e04e      	b.n	8003780 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fc12 	bl	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e058      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b04      	cmp	r3, #4
 8003734:	d124      	bne.n	8003780 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373a:	2b03      	cmp	r3, #3
 800373c:	d107      	bne.n	800374e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800374c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	f47f ae88 	bne.w	800349a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3728      	adds	r7, #40	@ 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	00010004 	.word	0x00010004
 80037b4:	20000004 	.word	0x20000004
 80037b8:	14f8b589 	.word	0x14f8b589

080037bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	460b      	mov	r3, r1
 80037ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d006      	beq.n	80037e6 <I2C_MasterRequestWrite+0x2a>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d003      	beq.n	80037e6 <I2C_MasterRequestWrite+0x2a>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037e4:	d108      	bne.n	80037f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e00b      	b.n	8003810 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	2b12      	cmp	r3, #18
 80037fe:	d107      	bne.n	8003810 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800380e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f9cd 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003836:	d103      	bne.n	8003840 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e035      	b.n	80038b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800384c:	d108      	bne.n	8003860 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800385c:	611a      	str	r2, [r3, #16]
 800385e:	e01b      	b.n	8003898 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003860:	897b      	ldrh	r3, [r7, #10]
 8003862:	11db      	asrs	r3, r3, #7
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 0306 	and.w	r3, r3, #6
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f063 030f 	orn	r3, r3, #15
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	490e      	ldr	r1, [pc, #56]	@ (80038b8 <I2C_MasterRequestWrite+0xfc>)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fa16 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e010      	b.n	80038b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4907      	ldr	r1, [pc, #28]	@ (80038bc <I2C_MasterRequestWrite+0x100>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa06 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	00010008 	.word	0x00010008
 80038bc:	00010002 	.word	0x00010002

080038c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	817b      	strh	r3, [r7, #10]
 80038d2:	460b      	mov	r3, r1
 80038d4:	813b      	strh	r3, [r7, #8]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f960 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003910:	d103      	bne.n	800391a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e05f      	b.n	80039de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800391e:	897b      	ldrh	r3, [r7, #10]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800392c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	6a3a      	ldr	r2, [r7, #32]
 8003932:	492d      	ldr	r1, [pc, #180]	@ (80039e8 <I2C_RequestMemoryWrite+0x128>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f9bb 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e04c      	b.n	80039de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	6a39      	ldr	r1, [r7, #32]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fa46 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	2b04      	cmp	r3, #4
 8003970:	d107      	bne.n	8003982 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e02b      	b.n	80039de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800398c:	893b      	ldrh	r3, [r7, #8]
 800398e:	b2da      	uxtb	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	611a      	str	r2, [r3, #16]
 8003996:	e021      	b.n	80039dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003998:	893b      	ldrh	r3, [r7, #8]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	b29b      	uxth	r3, r3
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a8:	6a39      	ldr	r1, [r7, #32]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 fa20 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00d      	beq.n	80039d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d107      	bne.n	80039ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e005      	b.n	80039de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d2:	893b      	ldrh	r3, [r7, #8]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	00010002 	.word	0x00010002

080039ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	817b      	strh	r3, [r7, #10]
 80039fe:	460b      	mov	r3, r1
 8003a00:	813b      	strh	r3, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f8c2 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4c:	d103      	bne.n	8003a56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e0aa      	b.n	8003bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	4952      	ldr	r1, [pc, #328]	@ (8003bb8 <I2C_RequestMemoryRead+0x1cc>)
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f91d 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e097      	b.n	8003bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a98:	6a39      	ldr	r1, [r7, #32]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f9a8 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d107      	bne.n	8003abe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003abc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e076      	b.n	8003bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	e021      	b.n	8003b18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad4:	893b      	ldrh	r3, [r7, #8]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae4:	6a39      	ldr	r1, [r7, #32]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f982 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d107      	bne.n	8003b0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e050      	b.n	8003bb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1a:	6a39      	ldr	r1, [r7, #32]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f967 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00d      	beq.n	8003b44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d107      	bne.n	8003b40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e035      	b.n	8003bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f82b 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b7a:	d103      	bne.n	8003b84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e013      	b.n	8003bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b88:	897b      	ldrh	r3, [r7, #10]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	4906      	ldr	r1, [pc, #24]	@ (8003bb8 <I2C_RequestMemoryRead+0x1cc>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f886 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	00010002 	.word	0x00010002

08003bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bcc:	e048      	b.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d044      	beq.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd6:	f7fe f93b 	bl	8001e50 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d302      	bcc.n	8003bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d139      	bne.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10d      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	e00c      	b.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d116      	bne.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e023      	b.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10d      	bne.n	8003c86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	43da      	mvns	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4013      	ands	r3, r2
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	e00c      	b.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d093      	beq.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cbe:	e071      	b.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cce:	d123      	bne.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	f043 0204 	orr.w	r2, r3, #4
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e067      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d041      	beq.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d20:	f7fe f896 	bl	8001e50 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d302      	bcc.n	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d136      	bne.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d10c      	bne.n	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	43da      	mvns	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e00b      	b.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	43da      	mvns	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e021      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d10c      	bne.n	8003dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	43da      	mvns	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e00b      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	43da      	mvns	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf14      	ite	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	2300      	moveq	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f47f af6d 	bne.w	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dfc:	e034      	b.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8e3 	bl	8003fca <I2C_IsAcknowledgeFailed>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e034      	b.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d028      	beq.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7fe f81b 	bl	8001e50 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11d      	bne.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b80      	cmp	r3, #128	@ 0x80
 8003e38:	d016      	beq.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e007      	b.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e72:	2b80      	cmp	r3, #128	@ 0x80
 8003e74:	d1c3      	bne.n	8003dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e8c:	e034      	b.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f89b 	bl	8003fca <I2C_IsAcknowledgeFailed>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e034      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d028      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fd ffd3 	bl	8001e50 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d016      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d1c3      	bne.n	8003e8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f1c:	e049      	b.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d119      	bne.n	8003f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0210 	mvn.w	r2, #16
 8003f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e030      	b.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7fd ff76 	bl	8001e50 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11d      	bne.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f80:	2b40      	cmp	r3, #64	@ 0x40
 8003f82:	d016      	beq.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e007      	b.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	d1ae      	bne.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe0:	d11b      	bne.n	800401a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	f043 0204 	orr.w	r2, r3, #4
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
	...

08004028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e272      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8087 	beq.w	8004156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004048:	4b92      	ldr	r3, [pc, #584]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b04      	cmp	r3, #4
 8004052:	d00c      	beq.n	800406e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004054:	4b8f      	ldr	r3, [pc, #572]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d112      	bne.n	8004086 <HAL_RCC_OscConfig+0x5e>
 8004060:	4b8c      	ldr	r3, [pc, #560]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800406c:	d10b      	bne.n	8004086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406e:	4b89      	ldr	r3, [pc, #548]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d06c      	beq.n	8004154 <HAL_RCC_OscConfig+0x12c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d168      	bne.n	8004154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e24c      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x76>
 8004090:	4b80      	ldr	r3, [pc, #512]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a7f      	ldr	r2, [pc, #508]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e02e      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x98>
 80040a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7a      	ldr	r2, [pc, #488]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b78      	ldr	r3, [pc, #480]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a77      	ldr	r2, [pc, #476]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0xbc>
 80040ca:	4b72      	ldr	r3, [pc, #456]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a71      	ldr	r2, [pc, #452]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b6f      	ldr	r3, [pc, #444]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6e      	ldr	r2, [pc, #440]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 80040e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b68      	ldr	r3, [pc, #416]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a67      	ldr	r2, [pc, #412]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fd fea4 	bl	8001e50 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd fea0 	bl	8001e50 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	@ 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e200      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b5d      	ldr	r3, [pc, #372]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0xe4>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fd fe90 	bl	8001e50 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fd fe8c 	bl	8001e50 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1ec      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004146:	4b53      	ldr	r3, [pc, #332]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x10c>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d063      	beq.n	800422a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004162:	4b4c      	ldr	r3, [pc, #304]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800416e:	4b49      	ldr	r3, [pc, #292]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d11c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x18c>
 800417a:	4b46      	ldr	r3, [pc, #280]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	4b43      	ldr	r3, [pc, #268]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x176>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e1c0      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b3d      	ldr	r3, [pc, #244]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4939      	ldr	r1, [pc, #228]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	e03a      	b.n	800422a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041bc:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_RCC_OscConfig+0x270>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fd fe45 	bl	8001e50 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ca:	f7fd fe41 	bl	8001e50 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1a1      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4927      	ldr	r1, [pc, #156]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fe:	4b26      	ldr	r3, [pc, #152]	@ (8004298 <HAL_RCC_OscConfig+0x270>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fd fe24 	bl	8001e50 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420c:	f7fd fe20 	bl	8001e50 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e180      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d03a      	beq.n	80042ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d019      	beq.n	8004272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423e:	4b17      	ldr	r3, [pc, #92]	@ (800429c <HAL_RCC_OscConfig+0x274>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004244:	f7fd fe04 	bl	8001e50 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424c:	f7fd fe00 	bl	8001e50 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e160      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800426a:	2001      	movs	r0, #1
 800426c:	f000 faba 	bl	80047e4 <RCC_Delay>
 8004270:	e01c      	b.n	80042ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <HAL_RCC_OscConfig+0x274>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004278:	f7fd fdea 	bl	8001e50 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427e:	e00f      	b.n	80042a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004280:	f7fd fde6 	bl	8001e50 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d908      	bls.n	80042a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e146      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	42420000 	.word	0x42420000
 800429c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a0:	4b92      	ldr	r3, [pc, #584]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e9      	bne.n	8004280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80a6 	beq.w	8004406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042be:	4b8b      	ldr	r3, [pc, #556]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	4b88      	ldr	r3, [pc, #544]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4a87      	ldr	r2, [pc, #540]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d4:	61d3      	str	r3, [r2, #28]
 80042d6:	4b85      	ldr	r3, [pc, #532]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e6:	4b82      	ldr	r3, [pc, #520]	@ (80044f0 <HAL_RCC_OscConfig+0x4c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f2:	4b7f      	ldr	r3, [pc, #508]	@ (80044f0 <HAL_RCC_OscConfig+0x4c8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a7e      	ldr	r2, [pc, #504]	@ (80044f0 <HAL_RCC_OscConfig+0x4c8>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fe:	f7fd fda7 	bl	8001e50 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004306:	f7fd fda3 	bl	8001e50 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b64      	cmp	r3, #100	@ 0x64
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e103      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004318:	4b75      	ldr	r3, [pc, #468]	@ (80044f0 <HAL_RCC_OscConfig+0x4c8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <HAL_RCC_OscConfig+0x312>
 800432c:	4b6f      	ldr	r3, [pc, #444]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4a6e      	ldr	r2, [pc, #440]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6213      	str	r3, [r2, #32]
 8004338:	e02d      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x334>
 8004342:	4b6a      	ldr	r3, [pc, #424]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a69      	ldr	r2, [pc, #420]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6213      	str	r3, [r2, #32]
 800434e:	4b67      	ldr	r3, [pc, #412]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a66      	ldr	r2, [pc, #408]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	e01c      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b05      	cmp	r3, #5
 8004362:	d10c      	bne.n	800437e <HAL_RCC_OscConfig+0x356>
 8004364:	4b61      	ldr	r3, [pc, #388]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a60      	ldr	r2, [pc, #384]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	4b5e      	ldr	r3, [pc, #376]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4a5d      	ldr	r2, [pc, #372]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6213      	str	r3, [r2, #32]
 800437c:	e00b      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800437e:	4b5b      	ldr	r3, [pc, #364]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a5a      	ldr	r2, [pc, #360]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	4b58      	ldr	r3, [pc, #352]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a57      	ldr	r2, [pc, #348]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d015      	beq.n	80043ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439e:	f7fd fd57 	bl	8001e50 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fd fd53 	bl	8001e50 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e0b1      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043bc:	4b4b      	ldr	r3, [pc, #300]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ee      	beq.n	80043a6 <HAL_RCC_OscConfig+0x37e>
 80043c8:	e014      	b.n	80043f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ca:	f7fd fd41 	bl	8001e50 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fd fd3d 	bl	8001e50 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e09b      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e8:	4b40      	ldr	r3, [pc, #256]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ee      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fa:	4b3c      	ldr	r3, [pc, #240]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4a3b      	ldr	r2, [pc, #236]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8087 	beq.w	800451e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004410:	4b36      	ldr	r3, [pc, #216]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 030c 	and.w	r3, r3, #12
 8004418:	2b08      	cmp	r3, #8
 800441a:	d061      	beq.n	80044e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d146      	bne.n	80044b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004424:	4b33      	ldr	r3, [pc, #204]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fd fd11 	bl	8001e50 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fd fd0d 	bl	8001e50 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e06d      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004444:	4b29      	ldr	r3, [pc, #164]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004458:	d108      	bne.n	800446c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800445a:	4b24      	ldr	r3, [pc, #144]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	4921      	ldr	r1, [pc, #132]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800446c:	4b1f      	ldr	r3, [pc, #124]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a19      	ldr	r1, [r3, #32]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	430b      	orrs	r3, r1
 800447e:	491b      	ldr	r1, [pc, #108]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004484:	4b1b      	ldr	r3, [pc, #108]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fd fce1 	bl	8001e50 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004492:	f7fd fcdd 	bl	8001e50 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e03d      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044a4:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x46a>
 80044b0:	e035      	b.n	800451e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fd fcca 	bl	8001e50 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fd fcc6 	bl	8001e50 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e026      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x498>
 80044de:	e01e      	b.n	800451e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e019      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40007000 	.word	0x40007000
 80044f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCC_OscConfig+0x500>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	429a      	cmp	r2, r3
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000

0800452c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0d0      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b6a      	ldr	r3, [pc, #424]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d910      	bls.n	8004570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b67      	ldr	r3, [pc, #412]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 0207 	bic.w	r2, r3, #7
 8004556:	4965      	ldr	r1, [pc, #404]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b63      	ldr	r3, [pc, #396]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b8      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004588:	4b59      	ldr	r3, [pc, #356]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4a58      	ldr	r2, [pc, #352]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800458e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a0:	4b53      	ldr	r3, [pc, #332]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a52      	ldr	r2, [pc, #328]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b50      	ldr	r3, [pc, #320]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	494d      	ldr	r1, [pc, #308]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d040      	beq.n	800464c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b47      	ldr	r3, [pc, #284]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d115      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b41      	ldr	r3, [pc, #260]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e073      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b3d      	ldr	r3, [pc, #244]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06b      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b39      	ldr	r3, [pc, #228]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4936      	ldr	r1, [pc, #216]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461c:	f7fd fc18 	bl	8001e50 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fd fc14 	bl	8001e50 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e053      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b2d      	ldr	r3, [pc, #180]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b27      	ldr	r3, [pc, #156]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d210      	bcs.n	800467c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b24      	ldr	r3, [pc, #144]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 0207 	bic.w	r2, r3, #7
 8004662:	4922      	ldr	r1, [pc, #136]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b20      	ldr	r3, [pc, #128]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e032      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4916      	ldr	r1, [pc, #88]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046a6:	4b12      	ldr	r3, [pc, #72]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	490e      	ldr	r1, [pc, #56]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ba:	f000 f821 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490a      	ldr	r1, [pc, #40]	@ (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	4a09      	ldr	r2, [pc, #36]	@ (80046f8 <HAL_RCC_ClockConfig+0x1cc>)
 80046d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046d6:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_RCC_ClockConfig+0x1d0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd fb76 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	080069f0 	.word	0x080069f0
 80046f8:	20000004 	.word	0x20000004
 80046fc:	20000008 	.word	0x20000008

08004700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800471a:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x94>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d002      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x30>
 800472a:	2b08      	cmp	r3, #8
 800472c:	d003      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0x36>
 800472e:	e027      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004730:	4b19      	ldr	r3, [pc, #100]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x98>)
 8004732:	613b      	str	r3, [r7, #16]
      break;
 8004734:	e027      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	0c9b      	lsrs	r3, r3, #18
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	4a17      	ldr	r2, [pc, #92]	@ (800479c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004740:	5cd3      	ldrb	r3, [r2, r3]
 8004742:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d010      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800474e:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x94>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	0c5b      	lsrs	r3, r3, #17
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	4a11      	ldr	r2, [pc, #68]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a0d      	ldr	r2, [pc, #52]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x98>)
 8004762:	fb03 f202 	mul.w	r2, r3, r2
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e004      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004774:	fb02 f303 	mul.w	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	613b      	str	r3, [r7, #16]
      break;
 800477e:	e002      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x98>)
 8004782:	613b      	str	r3, [r7, #16]
      break;
 8004784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004786:	693b      	ldr	r3, [r7, #16]
}
 8004788:	4618      	mov	r0, r3
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	007a1200 	.word	0x007a1200
 800479c:	08006a08 	.word	0x08006a08
 80047a0:	08006a18 	.word	0x08006a18
 80047a4:	003d0900 	.word	0x003d0900

080047a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ac:	4b02      	ldr	r3, [pc, #8]	@ (80047b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ae:	681b      	ldr	r3, [r3, #0]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	20000004 	.word	0x20000004

080047bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c0:	f7ff fff2 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4903      	ldr	r1, [pc, #12]	@ (80047e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	08006a00 	.word	0x08006a00

080047e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <RCC_Delay+0x34>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0a      	ldr	r2, [pc, #40]	@ (800481c <RCC_Delay+0x38>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	0a5b      	lsrs	r3, r3, #9
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004800:	bf00      	nop
  }
  while (Delay --);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1e5a      	subs	r2, r3, #1
 8004806:	60fa      	str	r2, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f9      	bne.n	8004800 <RCC_Delay+0x1c>
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	20000004 	.word	0x20000004
 800481c:	10624dd3 	.word	0x10624dd3

08004820 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d07d      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800483c:	2300      	movs	r3, #0
 800483e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004840:	4b4f      	ldr	r3, [pc, #316]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10d      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484c:	4b4c      	ldr	r3, [pc, #304]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4a4b      	ldr	r2, [pc, #300]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004856:	61d3      	str	r3, [r2, #28]
 8004858:	4b49      	ldr	r3, [pc, #292]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	4b46      	ldr	r3, [pc, #280]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d118      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004874:	4b43      	ldr	r3, [pc, #268]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a42      	ldr	r2, [pc, #264]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004880:	f7fd fae6 	bl	8001e50 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004886:	e008      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fd fae2 	bl	8001e50 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	@ 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e06d      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489a:	4b3a      	ldr	r3, [pc, #232]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048a6:	4b36      	ldr	r3, [pc, #216]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02e      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d027      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048da:	4a29      	ldr	r2, [pc, #164]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d014      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fd fab1 	bl	8001e50 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f0:	e00a      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fd faad 	bl	8001e50 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e036      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	4b1d      	ldr	r3, [pc, #116]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ee      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004914:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4917      	ldr	r1, [pc, #92]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004922:	4313      	orrs	r3, r2
 8004924:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004926:	7dfb      	ldrb	r3, [r7, #23]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d105      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800492c:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	4a13      	ldr	r2, [pc, #76]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004936:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004944:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	490b      	ldr	r1, [pc, #44]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004962:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4904      	ldr	r1, [pc, #16]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004970:	4313      	orrs	r3, r2
 8004972:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	40007000 	.word	0x40007000
 8004988:	42420440 	.word	0x42420440

0800498c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e041      	b.n	8004a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fd f8ba 	bl	8001b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 fa5c 	bl	8004e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d001      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e03a      	b.n	8004aba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0x98>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <HAL_TIM_Base_Start_IT+0x58>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6e:	d009      	beq.n	8004a84 <HAL_TIM_Base_Start_IT+0x58>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_TIM_Base_Start_IT+0x58>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a13      	ldr	r2, [pc, #76]	@ (8004acc <HAL_TIM_Base_Start_IT+0xa0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d111      	bne.n	8004aa8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b06      	cmp	r3, #6
 8004a94:	d010      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0201 	orr.w	r2, r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa6:	e007      	b.n	8004ab8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800

08004ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d020      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01b      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0202 	mvn.w	r2, #2
 8004b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f998 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f98b 	bl	8004e3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f99a 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d020      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01b      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0204 	mvn.w	r2, #4
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f972 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f965 	bl	8004e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f974 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d020      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01b      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0208 	mvn.w	r2, #8
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f94c 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f93f 	bl	8004e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f94e 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d020      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0210 	mvn.w	r2, #16
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2208      	movs	r2, #8
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f926 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f919 	bl	8004e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f928 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0201 	mvn.w	r2, #1
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fa8a 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa7f 	bl	800515e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8f8 	bl	8004e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0220 	mvn.w	r2, #32
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fa52 	bl	800514c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x1c>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e0b4      	b.n	8004e36 <HAL_TIM_ConfigClockSource+0x186>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d04:	d03e      	beq.n	8004d84 <HAL_TIM_ConfigClockSource+0xd4>
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d0a:	f200 8087 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d12:	f000 8086 	beq.w	8004e22 <HAL_TIM_ConfigClockSource+0x172>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1a:	d87f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b70      	cmp	r3, #112	@ 0x70
 8004d1e:	d01a      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0xa6>
 8004d20:	2b70      	cmp	r3, #112	@ 0x70
 8004d22:	d87b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b60      	cmp	r3, #96	@ 0x60
 8004d26:	d050      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x11a>
 8004d28:	2b60      	cmp	r3, #96	@ 0x60
 8004d2a:	d877      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b50      	cmp	r3, #80	@ 0x50
 8004d2e:	d03c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0xfa>
 8004d30:	2b50      	cmp	r3, #80	@ 0x50
 8004d32:	d873      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b40      	cmp	r3, #64	@ 0x40
 8004d36:	d058      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x13a>
 8004d38:	2b40      	cmp	r3, #64	@ 0x40
 8004d3a:	d86f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b30      	cmp	r3, #48	@ 0x30
 8004d3e:	d064      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d40:	2b30      	cmp	r3, #48	@ 0x30
 8004d42:	d86b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d060      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d867      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05c      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d05a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d54:	e062      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d66:	f000 f974 	bl	8005052 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	609a      	str	r2, [r3, #8]
      break;
 8004d82:	e04f      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d94:	f000 f95d 	bl	8005052 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004da6:	609a      	str	r2, [r3, #8]
      break;
 8004da8:	e03c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 f8d4 	bl	8004f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2150      	movs	r1, #80	@ 0x50
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f92b 	bl	800501e <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e02c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 f8f2 	bl	8004fc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2160      	movs	r1, #96	@ 0x60
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f91b 	bl	800501e <TIM_ITRx_SetConfig>
      break;
 8004de8:	e01c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 f8b4 	bl	8004f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2140      	movs	r1, #64	@ 0x40
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f90b 	bl	800501e <TIM_ITRx_SetConfig>
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 f902 	bl	800501e <TIM_ITRx_SetConfig>
      break;
 8004e1a:	e003      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e000      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr
	...

08004e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f58 <TIM_Base_SetConfig+0xd0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_Base_SetConfig+0x30>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea6:	d007      	beq.n	8004eb8 <TIM_Base_SetConfig+0x30>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8004f5c <TIM_Base_SetConfig+0xd4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_Base_SetConfig+0x30>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f60 <TIM_Base_SetConfig+0xd8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a22      	ldr	r2, [pc, #136]	@ (8004f58 <TIM_Base_SetConfig+0xd0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_Base_SetConfig+0x62>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed8:	d007      	beq.n	8004eea <TIM_Base_SetConfig+0x62>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f5c <TIM_Base_SetConfig+0xd4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_Base_SetConfig+0x62>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f60 <TIM_Base_SetConfig+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d108      	bne.n	8004efc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a0d      	ldr	r2, [pc, #52]	@ (8004f58 <TIM_Base_SetConfig+0xd0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d103      	bne.n	8004f30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f023 0201 	bic.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]
  }
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800

08004f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 0201 	bic.w	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 030a 	bic.w	r3, r3, #10
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f023 0210 	bic.w	r2, r3, #16
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	031b      	lsls	r3, r3, #12
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800501e:	b480      	push	{r7}
 8005020:	b085      	sub	sp, #20
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	f043 0307 	orr.w	r3, r3, #7
 8005040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005052:	b480      	push	{r7}
 8005054:	b087      	sub	sp, #28
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800506c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	021a      	lsls	r2, r3, #8
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	431a      	orrs	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4313      	orrs	r3, r2
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	609a      	str	r2, [r3, #8]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e046      	b.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f4:	d009      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a12      	ldr	r2, [pc, #72]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a10      	ldr	r2, [pc, #64]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10c      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4313      	orrs	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800

0800514c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <siprintf>:
 8005170:	b40e      	push	{r1, r2, r3}
 8005172:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005176:	b500      	push	{lr}
 8005178:	b09c      	sub	sp, #112	@ 0x70
 800517a:	ab1d      	add	r3, sp, #116	@ 0x74
 800517c:	9002      	str	r0, [sp, #8]
 800517e:	9006      	str	r0, [sp, #24]
 8005180:	9107      	str	r1, [sp, #28]
 8005182:	9104      	str	r1, [sp, #16]
 8005184:	4808      	ldr	r0, [pc, #32]	@ (80051a8 <siprintf+0x38>)
 8005186:	4909      	ldr	r1, [pc, #36]	@ (80051ac <siprintf+0x3c>)
 8005188:	f853 2b04 	ldr.w	r2, [r3], #4
 800518c:	9105      	str	r1, [sp, #20]
 800518e:	6800      	ldr	r0, [r0, #0]
 8005190:	a902      	add	r1, sp, #8
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	f000 f992 	bl	80054bc <_svfiprintf_r>
 8005198:	2200      	movs	r2, #0
 800519a:	9b02      	ldr	r3, [sp, #8]
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	b01c      	add	sp, #112	@ 0x70
 80051a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a4:	b003      	add	sp, #12
 80051a6:	4770      	bx	lr
 80051a8:	20000010 	.word	0x20000010
 80051ac:	ffff0208 	.word	0xffff0208

080051b0 <memset>:
 80051b0:	4603      	mov	r3, r0
 80051b2:	4402      	add	r2, r0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d100      	bne.n	80051ba <memset+0xa>
 80051b8:	4770      	bx	lr
 80051ba:	f803 1b01 	strb.w	r1, [r3], #1
 80051be:	e7f9      	b.n	80051b4 <memset+0x4>

080051c0 <__errno>:
 80051c0:	4b01      	ldr	r3, [pc, #4]	@ (80051c8 <__errno+0x8>)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000010 	.word	0x20000010

080051cc <__libc_init_array>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	2600      	movs	r6, #0
 80051d0:	4d0c      	ldr	r5, [pc, #48]	@ (8005204 <__libc_init_array+0x38>)
 80051d2:	4c0d      	ldr	r4, [pc, #52]	@ (8005208 <__libc_init_array+0x3c>)
 80051d4:	1b64      	subs	r4, r4, r5
 80051d6:	10a4      	asrs	r4, r4, #2
 80051d8:	42a6      	cmp	r6, r4
 80051da:	d109      	bne.n	80051f0 <__libc_init_array+0x24>
 80051dc:	f001 fbcc 	bl	8006978 <_init>
 80051e0:	2600      	movs	r6, #0
 80051e2:	4d0a      	ldr	r5, [pc, #40]	@ (800520c <__libc_init_array+0x40>)
 80051e4:	4c0a      	ldr	r4, [pc, #40]	@ (8005210 <__libc_init_array+0x44>)
 80051e6:	1b64      	subs	r4, r4, r5
 80051e8:	10a4      	asrs	r4, r4, #2
 80051ea:	42a6      	cmp	r6, r4
 80051ec:	d105      	bne.n	80051fa <__libc_init_array+0x2e>
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f4:	4798      	blx	r3
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7ee      	b.n	80051d8 <__libc_init_array+0xc>
 80051fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fe:	4798      	blx	r3
 8005200:	3601      	adds	r6, #1
 8005202:	e7f2      	b.n	80051ea <__libc_init_array+0x1e>
 8005204:	08006a80 	.word	0x08006a80
 8005208:	08006a80 	.word	0x08006a80
 800520c:	08006a80 	.word	0x08006a80
 8005210:	08006a84 	.word	0x08006a84

08005214 <__retarget_lock_acquire_recursive>:
 8005214:	4770      	bx	lr

08005216 <__retarget_lock_release_recursive>:
 8005216:	4770      	bx	lr

08005218 <_free_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4605      	mov	r5, r0
 800521c:	2900      	cmp	r1, #0
 800521e:	d040      	beq.n	80052a2 <_free_r+0x8a>
 8005220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005224:	1f0c      	subs	r4, r1, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	bfb8      	it	lt
 800522a:	18e4      	addlt	r4, r4, r3
 800522c:	f000 f8de 	bl	80053ec <__malloc_lock>
 8005230:	4a1c      	ldr	r2, [pc, #112]	@ (80052a4 <_free_r+0x8c>)
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	b933      	cbnz	r3, 8005244 <_free_r+0x2c>
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	6014      	str	r4, [r2, #0]
 800523a:	4628      	mov	r0, r5
 800523c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005240:	f000 b8da 	b.w	80053f8 <__malloc_unlock>
 8005244:	42a3      	cmp	r3, r4
 8005246:	d908      	bls.n	800525a <_free_r+0x42>
 8005248:	6820      	ldr	r0, [r4, #0]
 800524a:	1821      	adds	r1, r4, r0
 800524c:	428b      	cmp	r3, r1
 800524e:	bf01      	itttt	eq
 8005250:	6819      	ldreq	r1, [r3, #0]
 8005252:	685b      	ldreq	r3, [r3, #4]
 8005254:	1809      	addeq	r1, r1, r0
 8005256:	6021      	streq	r1, [r4, #0]
 8005258:	e7ed      	b.n	8005236 <_free_r+0x1e>
 800525a:	461a      	mov	r2, r3
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	b10b      	cbz	r3, 8005264 <_free_r+0x4c>
 8005260:	42a3      	cmp	r3, r4
 8005262:	d9fa      	bls.n	800525a <_free_r+0x42>
 8005264:	6811      	ldr	r1, [r2, #0]
 8005266:	1850      	adds	r0, r2, r1
 8005268:	42a0      	cmp	r0, r4
 800526a:	d10b      	bne.n	8005284 <_free_r+0x6c>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	4401      	add	r1, r0
 8005270:	1850      	adds	r0, r2, r1
 8005272:	4283      	cmp	r3, r0
 8005274:	6011      	str	r1, [r2, #0]
 8005276:	d1e0      	bne.n	800523a <_free_r+0x22>
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4408      	add	r0, r1
 800527e:	6010      	str	r0, [r2, #0]
 8005280:	6053      	str	r3, [r2, #4]
 8005282:	e7da      	b.n	800523a <_free_r+0x22>
 8005284:	d902      	bls.n	800528c <_free_r+0x74>
 8005286:	230c      	movs	r3, #12
 8005288:	602b      	str	r3, [r5, #0]
 800528a:	e7d6      	b.n	800523a <_free_r+0x22>
 800528c:	6820      	ldr	r0, [r4, #0]
 800528e:	1821      	adds	r1, r4, r0
 8005290:	428b      	cmp	r3, r1
 8005292:	bf01      	itttt	eq
 8005294:	6819      	ldreq	r1, [r3, #0]
 8005296:	685b      	ldreq	r3, [r3, #4]
 8005298:	1809      	addeq	r1, r1, r0
 800529a:	6021      	streq	r1, [r4, #0]
 800529c:	6063      	str	r3, [r4, #4]
 800529e:	6054      	str	r4, [r2, #4]
 80052a0:	e7cb      	b.n	800523a <_free_r+0x22>
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20000320 	.word	0x20000320

080052a8 <sbrk_aligned>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4e0f      	ldr	r6, [pc, #60]	@ (80052e8 <sbrk_aligned+0x40>)
 80052ac:	460c      	mov	r4, r1
 80052ae:	6831      	ldr	r1, [r6, #0]
 80052b0:	4605      	mov	r5, r0
 80052b2:	b911      	cbnz	r1, 80052ba <sbrk_aligned+0x12>
 80052b4:	f000 fbaa 	bl	8005a0c <_sbrk_r>
 80052b8:	6030      	str	r0, [r6, #0]
 80052ba:	4621      	mov	r1, r4
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 fba5 	bl	8005a0c <_sbrk_r>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	d103      	bne.n	80052ce <sbrk_aligned+0x26>
 80052c6:	f04f 34ff 	mov.w	r4, #4294967295
 80052ca:	4620      	mov	r0, r4
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	1cc4      	adds	r4, r0, #3
 80052d0:	f024 0403 	bic.w	r4, r4, #3
 80052d4:	42a0      	cmp	r0, r4
 80052d6:	d0f8      	beq.n	80052ca <sbrk_aligned+0x22>
 80052d8:	1a21      	subs	r1, r4, r0
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 fb96 	bl	8005a0c <_sbrk_r>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d1f2      	bne.n	80052ca <sbrk_aligned+0x22>
 80052e4:	e7ef      	b.n	80052c6 <sbrk_aligned+0x1e>
 80052e6:	bf00      	nop
 80052e8:	2000031c 	.word	0x2000031c

080052ec <_malloc_r>:
 80052ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f0:	1ccd      	adds	r5, r1, #3
 80052f2:	f025 0503 	bic.w	r5, r5, #3
 80052f6:	3508      	adds	r5, #8
 80052f8:	2d0c      	cmp	r5, #12
 80052fa:	bf38      	it	cc
 80052fc:	250c      	movcc	r5, #12
 80052fe:	2d00      	cmp	r5, #0
 8005300:	4606      	mov	r6, r0
 8005302:	db01      	blt.n	8005308 <_malloc_r+0x1c>
 8005304:	42a9      	cmp	r1, r5
 8005306:	d904      	bls.n	8005312 <_malloc_r+0x26>
 8005308:	230c      	movs	r3, #12
 800530a:	6033      	str	r3, [r6, #0]
 800530c:	2000      	movs	r0, #0
 800530e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005312:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053e8 <_malloc_r+0xfc>
 8005316:	f000 f869 	bl	80053ec <__malloc_lock>
 800531a:	f8d8 3000 	ldr.w	r3, [r8]
 800531e:	461c      	mov	r4, r3
 8005320:	bb44      	cbnz	r4, 8005374 <_malloc_r+0x88>
 8005322:	4629      	mov	r1, r5
 8005324:	4630      	mov	r0, r6
 8005326:	f7ff ffbf 	bl	80052a8 <sbrk_aligned>
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	4604      	mov	r4, r0
 800532e:	d158      	bne.n	80053e2 <_malloc_r+0xf6>
 8005330:	f8d8 4000 	ldr.w	r4, [r8]
 8005334:	4627      	mov	r7, r4
 8005336:	2f00      	cmp	r7, #0
 8005338:	d143      	bne.n	80053c2 <_malloc_r+0xd6>
 800533a:	2c00      	cmp	r4, #0
 800533c:	d04b      	beq.n	80053d6 <_malloc_r+0xea>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	4639      	mov	r1, r7
 8005342:	4630      	mov	r0, r6
 8005344:	eb04 0903 	add.w	r9, r4, r3
 8005348:	f000 fb60 	bl	8005a0c <_sbrk_r>
 800534c:	4581      	cmp	r9, r0
 800534e:	d142      	bne.n	80053d6 <_malloc_r+0xea>
 8005350:	6821      	ldr	r1, [r4, #0]
 8005352:	4630      	mov	r0, r6
 8005354:	1a6d      	subs	r5, r5, r1
 8005356:	4629      	mov	r1, r5
 8005358:	f7ff ffa6 	bl	80052a8 <sbrk_aligned>
 800535c:	3001      	adds	r0, #1
 800535e:	d03a      	beq.n	80053d6 <_malloc_r+0xea>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	442b      	add	r3, r5
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	f8d8 3000 	ldr.w	r3, [r8]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	bb62      	cbnz	r2, 80053c8 <_malloc_r+0xdc>
 800536e:	f8c8 7000 	str.w	r7, [r8]
 8005372:	e00f      	b.n	8005394 <_malloc_r+0xa8>
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	1b52      	subs	r2, r2, r5
 8005378:	d420      	bmi.n	80053bc <_malloc_r+0xd0>
 800537a:	2a0b      	cmp	r2, #11
 800537c:	d917      	bls.n	80053ae <_malloc_r+0xc2>
 800537e:	1961      	adds	r1, r4, r5
 8005380:	42a3      	cmp	r3, r4
 8005382:	6025      	str	r5, [r4, #0]
 8005384:	bf18      	it	ne
 8005386:	6059      	strne	r1, [r3, #4]
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	bf08      	it	eq
 800538c:	f8c8 1000 	streq.w	r1, [r8]
 8005390:	5162      	str	r2, [r4, r5]
 8005392:	604b      	str	r3, [r1, #4]
 8005394:	4630      	mov	r0, r6
 8005396:	f000 f82f 	bl	80053f8 <__malloc_unlock>
 800539a:	f104 000b 	add.w	r0, r4, #11
 800539e:	1d23      	adds	r3, r4, #4
 80053a0:	f020 0007 	bic.w	r0, r0, #7
 80053a4:	1ac2      	subs	r2, r0, r3
 80053a6:	bf1c      	itt	ne
 80053a8:	1a1b      	subne	r3, r3, r0
 80053aa:	50a3      	strne	r3, [r4, r2]
 80053ac:	e7af      	b.n	800530e <_malloc_r+0x22>
 80053ae:	6862      	ldr	r2, [r4, #4]
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	bf0c      	ite	eq
 80053b4:	f8c8 2000 	streq.w	r2, [r8]
 80053b8:	605a      	strne	r2, [r3, #4]
 80053ba:	e7eb      	b.n	8005394 <_malloc_r+0xa8>
 80053bc:	4623      	mov	r3, r4
 80053be:	6864      	ldr	r4, [r4, #4]
 80053c0:	e7ae      	b.n	8005320 <_malloc_r+0x34>
 80053c2:	463c      	mov	r4, r7
 80053c4:	687f      	ldr	r7, [r7, #4]
 80053c6:	e7b6      	b.n	8005336 <_malloc_r+0x4a>
 80053c8:	461a      	mov	r2, r3
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d1fb      	bne.n	80053c8 <_malloc_r+0xdc>
 80053d0:	2300      	movs	r3, #0
 80053d2:	6053      	str	r3, [r2, #4]
 80053d4:	e7de      	b.n	8005394 <_malloc_r+0xa8>
 80053d6:	230c      	movs	r3, #12
 80053d8:	4630      	mov	r0, r6
 80053da:	6033      	str	r3, [r6, #0]
 80053dc:	f000 f80c 	bl	80053f8 <__malloc_unlock>
 80053e0:	e794      	b.n	800530c <_malloc_r+0x20>
 80053e2:	6005      	str	r5, [r0, #0]
 80053e4:	e7d6      	b.n	8005394 <_malloc_r+0xa8>
 80053e6:	bf00      	nop
 80053e8:	20000320 	.word	0x20000320

080053ec <__malloc_lock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	@ (80053f4 <__malloc_lock+0x8>)
 80053ee:	f7ff bf11 	b.w	8005214 <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	20000318 	.word	0x20000318

080053f8 <__malloc_unlock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	@ (8005400 <__malloc_unlock+0x8>)
 80053fa:	f7ff bf0c 	b.w	8005216 <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	20000318 	.word	0x20000318

08005404 <__ssputs_r>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	461f      	mov	r7, r3
 800540a:	688e      	ldr	r6, [r1, #8]
 800540c:	4682      	mov	sl, r0
 800540e:	42be      	cmp	r6, r7
 8005410:	460c      	mov	r4, r1
 8005412:	4690      	mov	r8, r2
 8005414:	680b      	ldr	r3, [r1, #0]
 8005416:	d82d      	bhi.n	8005474 <__ssputs_r+0x70>
 8005418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800541c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005420:	d026      	beq.n	8005470 <__ssputs_r+0x6c>
 8005422:	6965      	ldr	r5, [r4, #20]
 8005424:	6909      	ldr	r1, [r1, #16]
 8005426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800542a:	eba3 0901 	sub.w	r9, r3, r1
 800542e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005432:	1c7b      	adds	r3, r7, #1
 8005434:	444b      	add	r3, r9
 8005436:	106d      	asrs	r5, r5, #1
 8005438:	429d      	cmp	r5, r3
 800543a:	bf38      	it	cc
 800543c:	461d      	movcc	r5, r3
 800543e:	0553      	lsls	r3, r2, #21
 8005440:	d527      	bpl.n	8005492 <__ssputs_r+0x8e>
 8005442:	4629      	mov	r1, r5
 8005444:	f7ff ff52 	bl	80052ec <_malloc_r>
 8005448:	4606      	mov	r6, r0
 800544a:	b360      	cbz	r0, 80054a6 <__ssputs_r+0xa2>
 800544c:	464a      	mov	r2, r9
 800544e:	6921      	ldr	r1, [r4, #16]
 8005450:	f000 fafa 	bl	8005a48 <memcpy>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800545a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	6126      	str	r6, [r4, #16]
 8005462:	444e      	add	r6, r9
 8005464:	6026      	str	r6, [r4, #0]
 8005466:	463e      	mov	r6, r7
 8005468:	6165      	str	r5, [r4, #20]
 800546a:	eba5 0509 	sub.w	r5, r5, r9
 800546e:	60a5      	str	r5, [r4, #8]
 8005470:	42be      	cmp	r6, r7
 8005472:	d900      	bls.n	8005476 <__ssputs_r+0x72>
 8005474:	463e      	mov	r6, r7
 8005476:	4632      	mov	r2, r6
 8005478:	4641      	mov	r1, r8
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	f000 faac 	bl	80059d8 <memmove>
 8005480:	2000      	movs	r0, #0
 8005482:	68a3      	ldr	r3, [r4, #8]
 8005484:	1b9b      	subs	r3, r3, r6
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	4433      	add	r3, r6
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005492:	462a      	mov	r2, r5
 8005494:	f000 fae6 	bl	8005a64 <_realloc_r>
 8005498:	4606      	mov	r6, r0
 800549a:	2800      	cmp	r0, #0
 800549c:	d1e0      	bne.n	8005460 <__ssputs_r+0x5c>
 800549e:	4650      	mov	r0, sl
 80054a0:	6921      	ldr	r1, [r4, #16]
 80054a2:	f7ff feb9 	bl	8005218 <_free_r>
 80054a6:	230c      	movs	r3, #12
 80054a8:	f8ca 3000 	str.w	r3, [sl]
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	f04f 30ff 	mov.w	r0, #4294967295
 80054b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	e7e9      	b.n	800548e <__ssputs_r+0x8a>
	...

080054bc <_svfiprintf_r>:
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	4698      	mov	r8, r3
 80054c2:	898b      	ldrh	r3, [r1, #12]
 80054c4:	4607      	mov	r7, r0
 80054c6:	061b      	lsls	r3, r3, #24
 80054c8:	460d      	mov	r5, r1
 80054ca:	4614      	mov	r4, r2
 80054cc:	b09d      	sub	sp, #116	@ 0x74
 80054ce:	d510      	bpl.n	80054f2 <_svfiprintf_r+0x36>
 80054d0:	690b      	ldr	r3, [r1, #16]
 80054d2:	b973      	cbnz	r3, 80054f2 <_svfiprintf_r+0x36>
 80054d4:	2140      	movs	r1, #64	@ 0x40
 80054d6:	f7ff ff09 	bl	80052ec <_malloc_r>
 80054da:	6028      	str	r0, [r5, #0]
 80054dc:	6128      	str	r0, [r5, #16]
 80054de:	b930      	cbnz	r0, 80054ee <_svfiprintf_r+0x32>
 80054e0:	230c      	movs	r3, #12
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	b01d      	add	sp, #116	@ 0x74
 80054ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ee:	2340      	movs	r3, #64	@ 0x40
 80054f0:	616b      	str	r3, [r5, #20]
 80054f2:	2300      	movs	r3, #0
 80054f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f6:	2320      	movs	r3, #32
 80054f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054fc:	2330      	movs	r3, #48	@ 0x30
 80054fe:	f04f 0901 	mov.w	r9, #1
 8005502:	f8cd 800c 	str.w	r8, [sp, #12]
 8005506:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80056a0 <_svfiprintf_r+0x1e4>
 800550a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800550e:	4623      	mov	r3, r4
 8005510:	469a      	mov	sl, r3
 8005512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005516:	b10a      	cbz	r2, 800551c <_svfiprintf_r+0x60>
 8005518:	2a25      	cmp	r2, #37	@ 0x25
 800551a:	d1f9      	bne.n	8005510 <_svfiprintf_r+0x54>
 800551c:	ebba 0b04 	subs.w	fp, sl, r4
 8005520:	d00b      	beq.n	800553a <_svfiprintf_r+0x7e>
 8005522:	465b      	mov	r3, fp
 8005524:	4622      	mov	r2, r4
 8005526:	4629      	mov	r1, r5
 8005528:	4638      	mov	r0, r7
 800552a:	f7ff ff6b 	bl	8005404 <__ssputs_r>
 800552e:	3001      	adds	r0, #1
 8005530:	f000 80a7 	beq.w	8005682 <_svfiprintf_r+0x1c6>
 8005534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005536:	445a      	add	r2, fp
 8005538:	9209      	str	r2, [sp, #36]	@ 0x24
 800553a:	f89a 3000 	ldrb.w	r3, [sl]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 809f 	beq.w	8005682 <_svfiprintf_r+0x1c6>
 8005544:	2300      	movs	r3, #0
 8005546:	f04f 32ff 	mov.w	r2, #4294967295
 800554a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554e:	f10a 0a01 	add.w	sl, sl, #1
 8005552:	9304      	str	r3, [sp, #16]
 8005554:	9307      	str	r3, [sp, #28]
 8005556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800555a:	931a      	str	r3, [sp, #104]	@ 0x68
 800555c:	4654      	mov	r4, sl
 800555e:	2205      	movs	r2, #5
 8005560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005564:	484e      	ldr	r0, [pc, #312]	@ (80056a0 <_svfiprintf_r+0x1e4>)
 8005566:	f000 fa61 	bl	8005a2c <memchr>
 800556a:	9a04      	ldr	r2, [sp, #16]
 800556c:	b9d8      	cbnz	r0, 80055a6 <_svfiprintf_r+0xea>
 800556e:	06d0      	lsls	r0, r2, #27
 8005570:	bf44      	itt	mi
 8005572:	2320      	movmi	r3, #32
 8005574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005578:	0711      	lsls	r1, r2, #28
 800557a:	bf44      	itt	mi
 800557c:	232b      	movmi	r3, #43	@ 0x2b
 800557e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005582:	f89a 3000 	ldrb.w	r3, [sl]
 8005586:	2b2a      	cmp	r3, #42	@ 0x2a
 8005588:	d015      	beq.n	80055b6 <_svfiprintf_r+0xfa>
 800558a:	4654      	mov	r4, sl
 800558c:	2000      	movs	r0, #0
 800558e:	f04f 0c0a 	mov.w	ip, #10
 8005592:	9a07      	ldr	r2, [sp, #28]
 8005594:	4621      	mov	r1, r4
 8005596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559a:	3b30      	subs	r3, #48	@ 0x30
 800559c:	2b09      	cmp	r3, #9
 800559e:	d94b      	bls.n	8005638 <_svfiprintf_r+0x17c>
 80055a0:	b1b0      	cbz	r0, 80055d0 <_svfiprintf_r+0x114>
 80055a2:	9207      	str	r2, [sp, #28]
 80055a4:	e014      	b.n	80055d0 <_svfiprintf_r+0x114>
 80055a6:	eba0 0308 	sub.w	r3, r0, r8
 80055aa:	fa09 f303 	lsl.w	r3, r9, r3
 80055ae:	4313      	orrs	r3, r2
 80055b0:	46a2      	mov	sl, r4
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	e7d2      	b.n	800555c <_svfiprintf_r+0xa0>
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	1d19      	adds	r1, r3, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	9103      	str	r1, [sp, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bfbb      	ittet	lt
 80055c2:	425b      	neglt	r3, r3
 80055c4:	f042 0202 	orrlt.w	r2, r2, #2
 80055c8:	9307      	strge	r3, [sp, #28]
 80055ca:	9307      	strlt	r3, [sp, #28]
 80055cc:	bfb8      	it	lt
 80055ce:	9204      	strlt	r2, [sp, #16]
 80055d0:	7823      	ldrb	r3, [r4, #0]
 80055d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d4:	d10a      	bne.n	80055ec <_svfiprintf_r+0x130>
 80055d6:	7863      	ldrb	r3, [r4, #1]
 80055d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055da:	d132      	bne.n	8005642 <_svfiprintf_r+0x186>
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	3402      	adds	r4, #2
 80055e0:	1d1a      	adds	r2, r3, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	9203      	str	r2, [sp, #12]
 80055e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055ea:	9305      	str	r3, [sp, #20]
 80055ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80056a4 <_svfiprintf_r+0x1e8>
 80055f0:	2203      	movs	r2, #3
 80055f2:	4650      	mov	r0, sl
 80055f4:	7821      	ldrb	r1, [r4, #0]
 80055f6:	f000 fa19 	bl	8005a2c <memchr>
 80055fa:	b138      	cbz	r0, 800560c <_svfiprintf_r+0x150>
 80055fc:	2240      	movs	r2, #64	@ 0x40
 80055fe:	9b04      	ldr	r3, [sp, #16]
 8005600:	eba0 000a 	sub.w	r0, r0, sl
 8005604:	4082      	lsls	r2, r0
 8005606:	4313      	orrs	r3, r2
 8005608:	3401      	adds	r4, #1
 800560a:	9304      	str	r3, [sp, #16]
 800560c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005610:	2206      	movs	r2, #6
 8005612:	4825      	ldr	r0, [pc, #148]	@ (80056a8 <_svfiprintf_r+0x1ec>)
 8005614:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005618:	f000 fa08 	bl	8005a2c <memchr>
 800561c:	2800      	cmp	r0, #0
 800561e:	d036      	beq.n	800568e <_svfiprintf_r+0x1d2>
 8005620:	4b22      	ldr	r3, [pc, #136]	@ (80056ac <_svfiprintf_r+0x1f0>)
 8005622:	bb1b      	cbnz	r3, 800566c <_svfiprintf_r+0x1b0>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	3307      	adds	r3, #7
 8005628:	f023 0307 	bic.w	r3, r3, #7
 800562c:	3308      	adds	r3, #8
 800562e:	9303      	str	r3, [sp, #12]
 8005630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005632:	4433      	add	r3, r6
 8005634:	9309      	str	r3, [sp, #36]	@ 0x24
 8005636:	e76a      	b.n	800550e <_svfiprintf_r+0x52>
 8005638:	460c      	mov	r4, r1
 800563a:	2001      	movs	r0, #1
 800563c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005640:	e7a8      	b.n	8005594 <_svfiprintf_r+0xd8>
 8005642:	2300      	movs	r3, #0
 8005644:	f04f 0c0a 	mov.w	ip, #10
 8005648:	4619      	mov	r1, r3
 800564a:	3401      	adds	r4, #1
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	4620      	mov	r0, r4
 8005650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005654:	3a30      	subs	r2, #48	@ 0x30
 8005656:	2a09      	cmp	r2, #9
 8005658:	d903      	bls.n	8005662 <_svfiprintf_r+0x1a6>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0c6      	beq.n	80055ec <_svfiprintf_r+0x130>
 800565e:	9105      	str	r1, [sp, #20]
 8005660:	e7c4      	b.n	80055ec <_svfiprintf_r+0x130>
 8005662:	4604      	mov	r4, r0
 8005664:	2301      	movs	r3, #1
 8005666:	fb0c 2101 	mla	r1, ip, r1, r2
 800566a:	e7f0      	b.n	800564e <_svfiprintf_r+0x192>
 800566c:	ab03      	add	r3, sp, #12
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	462a      	mov	r2, r5
 8005672:	4638      	mov	r0, r7
 8005674:	4b0e      	ldr	r3, [pc, #56]	@ (80056b0 <_svfiprintf_r+0x1f4>)
 8005676:	a904      	add	r1, sp, #16
 8005678:	f3af 8000 	nop.w
 800567c:	1c42      	adds	r2, r0, #1
 800567e:	4606      	mov	r6, r0
 8005680:	d1d6      	bne.n	8005630 <_svfiprintf_r+0x174>
 8005682:	89ab      	ldrh	r3, [r5, #12]
 8005684:	065b      	lsls	r3, r3, #25
 8005686:	f53f af2d 	bmi.w	80054e4 <_svfiprintf_r+0x28>
 800568a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800568c:	e72c      	b.n	80054e8 <_svfiprintf_r+0x2c>
 800568e:	ab03      	add	r3, sp, #12
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	462a      	mov	r2, r5
 8005694:	4638      	mov	r0, r7
 8005696:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <_svfiprintf_r+0x1f4>)
 8005698:	a904      	add	r1, sp, #16
 800569a:	f000 f87d 	bl	8005798 <_printf_i>
 800569e:	e7ed      	b.n	800567c <_svfiprintf_r+0x1c0>
 80056a0:	08006a1a 	.word	0x08006a1a
 80056a4:	08006a20 	.word	0x08006a20
 80056a8:	08006a24 	.word	0x08006a24
 80056ac:	00000000 	.word	0x00000000
 80056b0:	08005405 	.word	0x08005405

080056b4 <_printf_common>:
 80056b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b8:	4616      	mov	r6, r2
 80056ba:	4698      	mov	r8, r3
 80056bc:	688a      	ldr	r2, [r1, #8]
 80056be:	690b      	ldr	r3, [r1, #16]
 80056c0:	4607      	mov	r7, r0
 80056c2:	4293      	cmp	r3, r2
 80056c4:	bfb8      	it	lt
 80056c6:	4613      	movlt	r3, r2
 80056c8:	6033      	str	r3, [r6, #0]
 80056ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056ce:	460c      	mov	r4, r1
 80056d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d4:	b10a      	cbz	r2, 80056da <_printf_common+0x26>
 80056d6:	3301      	adds	r3, #1
 80056d8:	6033      	str	r3, [r6, #0]
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	0699      	lsls	r1, r3, #26
 80056de:	bf42      	ittt	mi
 80056e0:	6833      	ldrmi	r3, [r6, #0]
 80056e2:	3302      	addmi	r3, #2
 80056e4:	6033      	strmi	r3, [r6, #0]
 80056e6:	6825      	ldr	r5, [r4, #0]
 80056e8:	f015 0506 	ands.w	r5, r5, #6
 80056ec:	d106      	bne.n	80056fc <_printf_common+0x48>
 80056ee:	f104 0a19 	add.w	sl, r4, #25
 80056f2:	68e3      	ldr	r3, [r4, #12]
 80056f4:	6832      	ldr	r2, [r6, #0]
 80056f6:	1a9b      	subs	r3, r3, r2
 80056f8:	42ab      	cmp	r3, r5
 80056fa:	dc2b      	bgt.n	8005754 <_printf_common+0xa0>
 80056fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	3b00      	subs	r3, #0
 8005704:	bf18      	it	ne
 8005706:	2301      	movne	r3, #1
 8005708:	0692      	lsls	r2, r2, #26
 800570a:	d430      	bmi.n	800576e <_printf_common+0xba>
 800570c:	4641      	mov	r1, r8
 800570e:	4638      	mov	r0, r7
 8005710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005714:	47c8      	blx	r9
 8005716:	3001      	adds	r0, #1
 8005718:	d023      	beq.n	8005762 <_printf_common+0xae>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	6922      	ldr	r2, [r4, #16]
 800571e:	f003 0306 	and.w	r3, r3, #6
 8005722:	2b04      	cmp	r3, #4
 8005724:	bf14      	ite	ne
 8005726:	2500      	movne	r5, #0
 8005728:	6833      	ldreq	r3, [r6, #0]
 800572a:	f04f 0600 	mov.w	r6, #0
 800572e:	bf08      	it	eq
 8005730:	68e5      	ldreq	r5, [r4, #12]
 8005732:	f104 041a 	add.w	r4, r4, #26
 8005736:	bf08      	it	eq
 8005738:	1aed      	subeq	r5, r5, r3
 800573a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800573e:	bf08      	it	eq
 8005740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005744:	4293      	cmp	r3, r2
 8005746:	bfc4      	itt	gt
 8005748:	1a9b      	subgt	r3, r3, r2
 800574a:	18ed      	addgt	r5, r5, r3
 800574c:	42b5      	cmp	r5, r6
 800574e:	d11a      	bne.n	8005786 <_printf_common+0xd2>
 8005750:	2000      	movs	r0, #0
 8005752:	e008      	b.n	8005766 <_printf_common+0xb2>
 8005754:	2301      	movs	r3, #1
 8005756:	4652      	mov	r2, sl
 8005758:	4641      	mov	r1, r8
 800575a:	4638      	mov	r0, r7
 800575c:	47c8      	blx	r9
 800575e:	3001      	adds	r0, #1
 8005760:	d103      	bne.n	800576a <_printf_common+0xb6>
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576a:	3501      	adds	r5, #1
 800576c:	e7c1      	b.n	80056f2 <_printf_common+0x3e>
 800576e:	2030      	movs	r0, #48	@ 0x30
 8005770:	18e1      	adds	r1, r4, r3
 8005772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800577c:	4422      	add	r2, r4
 800577e:	3302      	adds	r3, #2
 8005780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005784:	e7c2      	b.n	800570c <_printf_common+0x58>
 8005786:	2301      	movs	r3, #1
 8005788:	4622      	mov	r2, r4
 800578a:	4641      	mov	r1, r8
 800578c:	4638      	mov	r0, r7
 800578e:	47c8      	blx	r9
 8005790:	3001      	adds	r0, #1
 8005792:	d0e6      	beq.n	8005762 <_printf_common+0xae>
 8005794:	3601      	adds	r6, #1
 8005796:	e7d9      	b.n	800574c <_printf_common+0x98>

08005798 <_printf_i>:
 8005798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800579c:	7e0f      	ldrb	r7, [r1, #24]
 800579e:	4691      	mov	r9, r2
 80057a0:	2f78      	cmp	r7, #120	@ 0x78
 80057a2:	4680      	mov	r8, r0
 80057a4:	460c      	mov	r4, r1
 80057a6:	469a      	mov	sl, r3
 80057a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057ae:	d807      	bhi.n	80057c0 <_printf_i+0x28>
 80057b0:	2f62      	cmp	r7, #98	@ 0x62
 80057b2:	d80a      	bhi.n	80057ca <_printf_i+0x32>
 80057b4:	2f00      	cmp	r7, #0
 80057b6:	f000 80d3 	beq.w	8005960 <_printf_i+0x1c8>
 80057ba:	2f58      	cmp	r7, #88	@ 0x58
 80057bc:	f000 80ba 	beq.w	8005934 <_printf_i+0x19c>
 80057c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057c8:	e03a      	b.n	8005840 <_printf_i+0xa8>
 80057ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057ce:	2b15      	cmp	r3, #21
 80057d0:	d8f6      	bhi.n	80057c0 <_printf_i+0x28>
 80057d2:	a101      	add	r1, pc, #4	@ (adr r1, 80057d8 <_printf_i+0x40>)
 80057d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d8:	08005831 	.word	0x08005831
 80057dc:	08005845 	.word	0x08005845
 80057e0:	080057c1 	.word	0x080057c1
 80057e4:	080057c1 	.word	0x080057c1
 80057e8:	080057c1 	.word	0x080057c1
 80057ec:	080057c1 	.word	0x080057c1
 80057f0:	08005845 	.word	0x08005845
 80057f4:	080057c1 	.word	0x080057c1
 80057f8:	080057c1 	.word	0x080057c1
 80057fc:	080057c1 	.word	0x080057c1
 8005800:	080057c1 	.word	0x080057c1
 8005804:	08005947 	.word	0x08005947
 8005808:	0800586f 	.word	0x0800586f
 800580c:	08005901 	.word	0x08005901
 8005810:	080057c1 	.word	0x080057c1
 8005814:	080057c1 	.word	0x080057c1
 8005818:	08005969 	.word	0x08005969
 800581c:	080057c1 	.word	0x080057c1
 8005820:	0800586f 	.word	0x0800586f
 8005824:	080057c1 	.word	0x080057c1
 8005828:	080057c1 	.word	0x080057c1
 800582c:	08005909 	.word	0x08005909
 8005830:	6833      	ldr	r3, [r6, #0]
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6032      	str	r2, [r6, #0]
 8005838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800583c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005840:	2301      	movs	r3, #1
 8005842:	e09e      	b.n	8005982 <_printf_i+0x1ea>
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	1d19      	adds	r1, r3, #4
 800584a:	6031      	str	r1, [r6, #0]
 800584c:	0606      	lsls	r6, r0, #24
 800584e:	d501      	bpl.n	8005854 <_printf_i+0xbc>
 8005850:	681d      	ldr	r5, [r3, #0]
 8005852:	e003      	b.n	800585c <_printf_i+0xc4>
 8005854:	0645      	lsls	r5, r0, #25
 8005856:	d5fb      	bpl.n	8005850 <_printf_i+0xb8>
 8005858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800585c:	2d00      	cmp	r5, #0
 800585e:	da03      	bge.n	8005868 <_printf_i+0xd0>
 8005860:	232d      	movs	r3, #45	@ 0x2d
 8005862:	426d      	negs	r5, r5
 8005864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005868:	230a      	movs	r3, #10
 800586a:	4859      	ldr	r0, [pc, #356]	@ (80059d0 <_printf_i+0x238>)
 800586c:	e011      	b.n	8005892 <_printf_i+0xfa>
 800586e:	6821      	ldr	r1, [r4, #0]
 8005870:	6833      	ldr	r3, [r6, #0]
 8005872:	0608      	lsls	r0, r1, #24
 8005874:	f853 5b04 	ldr.w	r5, [r3], #4
 8005878:	d402      	bmi.n	8005880 <_printf_i+0xe8>
 800587a:	0649      	lsls	r1, r1, #25
 800587c:	bf48      	it	mi
 800587e:	b2ad      	uxthmi	r5, r5
 8005880:	2f6f      	cmp	r7, #111	@ 0x6f
 8005882:	6033      	str	r3, [r6, #0]
 8005884:	bf14      	ite	ne
 8005886:	230a      	movne	r3, #10
 8005888:	2308      	moveq	r3, #8
 800588a:	4851      	ldr	r0, [pc, #324]	@ (80059d0 <_printf_i+0x238>)
 800588c:	2100      	movs	r1, #0
 800588e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005892:	6866      	ldr	r6, [r4, #4]
 8005894:	2e00      	cmp	r6, #0
 8005896:	bfa8      	it	ge
 8005898:	6821      	ldrge	r1, [r4, #0]
 800589a:	60a6      	str	r6, [r4, #8]
 800589c:	bfa4      	itt	ge
 800589e:	f021 0104 	bicge.w	r1, r1, #4
 80058a2:	6021      	strge	r1, [r4, #0]
 80058a4:	b90d      	cbnz	r5, 80058aa <_printf_i+0x112>
 80058a6:	2e00      	cmp	r6, #0
 80058a8:	d04b      	beq.n	8005942 <_printf_i+0x1aa>
 80058aa:	4616      	mov	r6, r2
 80058ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80058b0:	fb03 5711 	mls	r7, r3, r1, r5
 80058b4:	5dc7      	ldrb	r7, [r0, r7]
 80058b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058ba:	462f      	mov	r7, r5
 80058bc:	42bb      	cmp	r3, r7
 80058be:	460d      	mov	r5, r1
 80058c0:	d9f4      	bls.n	80058ac <_printf_i+0x114>
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d10b      	bne.n	80058de <_printf_i+0x146>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	07df      	lsls	r7, r3, #31
 80058ca:	d508      	bpl.n	80058de <_printf_i+0x146>
 80058cc:	6923      	ldr	r3, [r4, #16]
 80058ce:	6861      	ldr	r1, [r4, #4]
 80058d0:	4299      	cmp	r1, r3
 80058d2:	bfde      	ittt	le
 80058d4:	2330      	movle	r3, #48	@ 0x30
 80058d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058de:	1b92      	subs	r2, r2, r6
 80058e0:	6122      	str	r2, [r4, #16]
 80058e2:	464b      	mov	r3, r9
 80058e4:	4621      	mov	r1, r4
 80058e6:	4640      	mov	r0, r8
 80058e8:	f8cd a000 	str.w	sl, [sp]
 80058ec:	aa03      	add	r2, sp, #12
 80058ee:	f7ff fee1 	bl	80056b4 <_printf_common>
 80058f2:	3001      	adds	r0, #1
 80058f4:	d14a      	bne.n	800598c <_printf_i+0x1f4>
 80058f6:	f04f 30ff 	mov.w	r0, #4294967295
 80058fa:	b004      	add	sp, #16
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	f043 0320 	orr.w	r3, r3, #32
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	2778      	movs	r7, #120	@ 0x78
 800590a:	4832      	ldr	r0, [pc, #200]	@ (80059d4 <_printf_i+0x23c>)
 800590c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	6831      	ldr	r1, [r6, #0]
 8005914:	061f      	lsls	r7, r3, #24
 8005916:	f851 5b04 	ldr.w	r5, [r1], #4
 800591a:	d402      	bmi.n	8005922 <_printf_i+0x18a>
 800591c:	065f      	lsls	r7, r3, #25
 800591e:	bf48      	it	mi
 8005920:	b2ad      	uxthmi	r5, r5
 8005922:	6031      	str	r1, [r6, #0]
 8005924:	07d9      	lsls	r1, r3, #31
 8005926:	bf44      	itt	mi
 8005928:	f043 0320 	orrmi.w	r3, r3, #32
 800592c:	6023      	strmi	r3, [r4, #0]
 800592e:	b11d      	cbz	r5, 8005938 <_printf_i+0x1a0>
 8005930:	2310      	movs	r3, #16
 8005932:	e7ab      	b.n	800588c <_printf_i+0xf4>
 8005934:	4826      	ldr	r0, [pc, #152]	@ (80059d0 <_printf_i+0x238>)
 8005936:	e7e9      	b.n	800590c <_printf_i+0x174>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	f023 0320 	bic.w	r3, r3, #32
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	e7f6      	b.n	8005930 <_printf_i+0x198>
 8005942:	4616      	mov	r6, r2
 8005944:	e7bd      	b.n	80058c2 <_printf_i+0x12a>
 8005946:	6833      	ldr	r3, [r6, #0]
 8005948:	6825      	ldr	r5, [r4, #0]
 800594a:	1d18      	adds	r0, r3, #4
 800594c:	6961      	ldr	r1, [r4, #20]
 800594e:	6030      	str	r0, [r6, #0]
 8005950:	062e      	lsls	r6, r5, #24
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	d501      	bpl.n	800595a <_printf_i+0x1c2>
 8005956:	6019      	str	r1, [r3, #0]
 8005958:	e002      	b.n	8005960 <_printf_i+0x1c8>
 800595a:	0668      	lsls	r0, r5, #25
 800595c:	d5fb      	bpl.n	8005956 <_printf_i+0x1be>
 800595e:	8019      	strh	r1, [r3, #0]
 8005960:	2300      	movs	r3, #0
 8005962:	4616      	mov	r6, r2
 8005964:	6123      	str	r3, [r4, #16]
 8005966:	e7bc      	b.n	80058e2 <_printf_i+0x14a>
 8005968:	6833      	ldr	r3, [r6, #0]
 800596a:	2100      	movs	r1, #0
 800596c:	1d1a      	adds	r2, r3, #4
 800596e:	6032      	str	r2, [r6, #0]
 8005970:	681e      	ldr	r6, [r3, #0]
 8005972:	6862      	ldr	r2, [r4, #4]
 8005974:	4630      	mov	r0, r6
 8005976:	f000 f859 	bl	8005a2c <memchr>
 800597a:	b108      	cbz	r0, 8005980 <_printf_i+0x1e8>
 800597c:	1b80      	subs	r0, r0, r6
 800597e:	6060      	str	r0, [r4, #4]
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	2300      	movs	r3, #0
 8005986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800598a:	e7aa      	b.n	80058e2 <_printf_i+0x14a>
 800598c:	4632      	mov	r2, r6
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	47d0      	blx	sl
 8005996:	3001      	adds	r0, #1
 8005998:	d0ad      	beq.n	80058f6 <_printf_i+0x15e>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	079b      	lsls	r3, r3, #30
 800599e:	d413      	bmi.n	80059c8 <_printf_i+0x230>
 80059a0:	68e0      	ldr	r0, [r4, #12]
 80059a2:	9b03      	ldr	r3, [sp, #12]
 80059a4:	4298      	cmp	r0, r3
 80059a6:	bfb8      	it	lt
 80059a8:	4618      	movlt	r0, r3
 80059aa:	e7a6      	b.n	80058fa <_printf_i+0x162>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4632      	mov	r2, r6
 80059b0:	4649      	mov	r1, r9
 80059b2:	4640      	mov	r0, r8
 80059b4:	47d0      	blx	sl
 80059b6:	3001      	adds	r0, #1
 80059b8:	d09d      	beq.n	80058f6 <_printf_i+0x15e>
 80059ba:	3501      	adds	r5, #1
 80059bc:	68e3      	ldr	r3, [r4, #12]
 80059be:	9903      	ldr	r1, [sp, #12]
 80059c0:	1a5b      	subs	r3, r3, r1
 80059c2:	42ab      	cmp	r3, r5
 80059c4:	dcf2      	bgt.n	80059ac <_printf_i+0x214>
 80059c6:	e7eb      	b.n	80059a0 <_printf_i+0x208>
 80059c8:	2500      	movs	r5, #0
 80059ca:	f104 0619 	add.w	r6, r4, #25
 80059ce:	e7f5      	b.n	80059bc <_printf_i+0x224>
 80059d0:	08006a2b 	.word	0x08006a2b
 80059d4:	08006a3c 	.word	0x08006a3c

080059d8 <memmove>:
 80059d8:	4288      	cmp	r0, r1
 80059da:	b510      	push	{r4, lr}
 80059dc:	eb01 0402 	add.w	r4, r1, r2
 80059e0:	d902      	bls.n	80059e8 <memmove+0x10>
 80059e2:	4284      	cmp	r4, r0
 80059e4:	4623      	mov	r3, r4
 80059e6:	d807      	bhi.n	80059f8 <memmove+0x20>
 80059e8:	1e43      	subs	r3, r0, #1
 80059ea:	42a1      	cmp	r1, r4
 80059ec:	d008      	beq.n	8005a00 <memmove+0x28>
 80059ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059f6:	e7f8      	b.n	80059ea <memmove+0x12>
 80059f8:	4601      	mov	r1, r0
 80059fa:	4402      	add	r2, r0
 80059fc:	428a      	cmp	r2, r1
 80059fe:	d100      	bne.n	8005a02 <memmove+0x2a>
 8005a00:	bd10      	pop	{r4, pc}
 8005a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a0a:	e7f7      	b.n	80059fc <memmove+0x24>

08005a0c <_sbrk_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4d05      	ldr	r5, [pc, #20]	@ (8005a28 <_sbrk_r+0x1c>)
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	602b      	str	r3, [r5, #0]
 8005a18:	f7fc f908 	bl	8001c2c <_sbrk>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d102      	bne.n	8005a26 <_sbrk_r+0x1a>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	b103      	cbz	r3, 8005a26 <_sbrk_r+0x1a>
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	20000314 	.word	0x20000314

08005a2c <memchr>:
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	b2c9      	uxtb	r1, r1
 8005a32:	4402      	add	r2, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	4618      	mov	r0, r3
 8005a38:	d101      	bne.n	8005a3e <memchr+0x12>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e003      	b.n	8005a46 <memchr+0x1a>
 8005a3e:	7804      	ldrb	r4, [r0, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	428c      	cmp	r4, r1
 8005a44:	d1f6      	bne.n	8005a34 <memchr+0x8>
 8005a46:	bd10      	pop	{r4, pc}

08005a48 <memcpy>:
 8005a48:	440a      	add	r2, r1
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a50:	d100      	bne.n	8005a54 <memcpy+0xc>
 8005a52:	4770      	bx	lr
 8005a54:	b510      	push	{r4, lr}
 8005a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a5a:	4291      	cmp	r1, r2
 8005a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a60:	d1f9      	bne.n	8005a56 <memcpy+0xe>
 8005a62:	bd10      	pop	{r4, pc}

08005a64 <_realloc_r>:
 8005a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4615      	mov	r5, r2
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	b921      	cbnz	r1, 8005a7a <_realloc_r+0x16>
 8005a70:	4611      	mov	r1, r2
 8005a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a76:	f7ff bc39 	b.w	80052ec <_malloc_r>
 8005a7a:	b92a      	cbnz	r2, 8005a88 <_realloc_r+0x24>
 8005a7c:	f7ff fbcc 	bl	8005218 <_free_r>
 8005a80:	2400      	movs	r4, #0
 8005a82:	4620      	mov	r0, r4
 8005a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a88:	f000 f81a 	bl	8005ac0 <_malloc_usable_size_r>
 8005a8c:	4285      	cmp	r5, r0
 8005a8e:	4606      	mov	r6, r0
 8005a90:	d802      	bhi.n	8005a98 <_realloc_r+0x34>
 8005a92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a96:	d8f4      	bhi.n	8005a82 <_realloc_r+0x1e>
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	f7ff fc26 	bl	80052ec <_malloc_r>
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d0ec      	beq.n	8005a80 <_realloc_r+0x1c>
 8005aa6:	42b5      	cmp	r5, r6
 8005aa8:	462a      	mov	r2, r5
 8005aaa:	4621      	mov	r1, r4
 8005aac:	bf28      	it	cs
 8005aae:	4632      	movcs	r2, r6
 8005ab0:	f7ff ffca 	bl	8005a48 <memcpy>
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	f7ff fbae 	bl	8005218 <_free_r>
 8005abc:	463c      	mov	r4, r7
 8005abe:	e7e0      	b.n	8005a82 <_realloc_r+0x1e>

08005ac0 <_malloc_usable_size_r>:
 8005ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac4:	1f18      	subs	r0, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bfbc      	itt	lt
 8005aca:	580b      	ldrlt	r3, [r1, r0]
 8005acc:	18c0      	addlt	r0, r0, r3
 8005ace:	4770      	bx	lr

08005ad0 <pow>:
 8005ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	461d      	mov	r5, r3
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4689      	mov	r9, r1
 8005adc:	f000 f8ac 	bl	8005c38 <__ieee754_pow>
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4629      	mov	r1, r5
 8005aec:	f7fa ff86 	bl	80009fc <__aeabi_dcmpun>
 8005af0:	bbc8      	cbnz	r0, 8005b66 <pow+0x96>
 8005af2:	2200      	movs	r2, #0
 8005af4:	2300      	movs	r3, #0
 8005af6:	4640      	mov	r0, r8
 8005af8:	4649      	mov	r1, r9
 8005afa:	f7fa ff4d 	bl	8000998 <__aeabi_dcmpeq>
 8005afe:	b1b8      	cbz	r0, 8005b30 <pow+0x60>
 8005b00:	2200      	movs	r2, #0
 8005b02:	2300      	movs	r3, #0
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa ff46 	bl	8000998 <__aeabi_dcmpeq>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d141      	bne.n	8005b94 <pow+0xc4>
 8005b10:	4620      	mov	r0, r4
 8005b12:	4629      	mov	r1, r5
 8005b14:	f000 f844 	bl	8005ba0 <finite>
 8005b18:	b328      	cbz	r0, 8005b66 <pow+0x96>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4620      	mov	r0, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	f7fa ff43 	bl	80009ac <__aeabi_dcmplt>
 8005b26:	b1f0      	cbz	r0, 8005b66 <pow+0x96>
 8005b28:	f7ff fb4a 	bl	80051c0 <__errno>
 8005b2c:	2322      	movs	r3, #34	@ 0x22
 8005b2e:	e019      	b.n	8005b64 <pow+0x94>
 8005b30:	4630      	mov	r0, r6
 8005b32:	4639      	mov	r1, r7
 8005b34:	f000 f834 	bl	8005ba0 <finite>
 8005b38:	b9c8      	cbnz	r0, 8005b6e <pow+0x9e>
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	f000 f82f 	bl	8005ba0 <finite>
 8005b42:	b1a0      	cbz	r0, 8005b6e <pow+0x9e>
 8005b44:	4620      	mov	r0, r4
 8005b46:	4629      	mov	r1, r5
 8005b48:	f000 f82a 	bl	8005ba0 <finite>
 8005b4c:	b178      	cbz	r0, 8005b6e <pow+0x9e>
 8005b4e:	4632      	mov	r2, r6
 8005b50:	463b      	mov	r3, r7
 8005b52:	4630      	mov	r0, r6
 8005b54:	4639      	mov	r1, r7
 8005b56:	f7fa ff51 	bl	80009fc <__aeabi_dcmpun>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d0e4      	beq.n	8005b28 <pow+0x58>
 8005b5e:	f7ff fb2f 	bl	80051c0 <__errno>
 8005b62:	2321      	movs	r3, #33	@ 0x21
 8005b64:	6003      	str	r3, [r0, #0]
 8005b66:	4630      	mov	r0, r6
 8005b68:	4639      	mov	r1, r7
 8005b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2300      	movs	r3, #0
 8005b72:	4630      	mov	r0, r6
 8005b74:	4639      	mov	r1, r7
 8005b76:	f7fa ff0f 	bl	8000998 <__aeabi_dcmpeq>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d0f3      	beq.n	8005b66 <pow+0x96>
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	f000 f80d 	bl	8005ba0 <finite>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d0ed      	beq.n	8005b66 <pow+0x96>
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	f000 f807 	bl	8005ba0 <finite>
 8005b92:	e7c8      	b.n	8005b26 <pow+0x56>
 8005b94:	2600      	movs	r6, #0
 8005b96:	4f01      	ldr	r7, [pc, #4]	@ (8005b9c <pow+0xcc>)
 8005b98:	e7e5      	b.n	8005b66 <pow+0x96>
 8005b9a:	bf00      	nop
 8005b9c:	3ff00000 	.word	0x3ff00000

08005ba0 <finite>:
 8005ba0:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8005ba4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005ba8:	0fc0      	lsrs	r0, r0, #31
 8005baa:	4770      	bx	lr

08005bac <round>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005bb2:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8005bb6:	2a13      	cmp	r2, #19
 8005bb8:	4604      	mov	r4, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	dc1a      	bgt.n	8005bf6 <round+0x4a>
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	da0b      	bge.n	8005bdc <round+0x30>
 8005bc4:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8005bc8:	3201      	adds	r2, #1
 8005bca:	bf04      	itt	eq
 8005bcc:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8005bd0:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	4614      	mov	r4, r2
 8005bda:	e016      	b.n	8005c0a <round+0x5e>
 8005bdc:	4815      	ldr	r0, [pc, #84]	@ (8005c34 <round+0x88>)
 8005bde:	4110      	asrs	r0, r2
 8005be0:	4001      	ands	r1, r0
 8005be2:	4321      	orrs	r1, r4
 8005be4:	d011      	beq.n	8005c0a <round+0x5e>
 8005be6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005bea:	fa41 f202 	asr.w	r2, r1, r2
 8005bee:	4413      	add	r3, r2
 8005bf0:	ea23 0300 	bic.w	r3, r3, r0
 8005bf4:	e7ee      	b.n	8005bd4 <round+0x28>
 8005bf6:	2a33      	cmp	r2, #51	@ 0x33
 8005bf8:	dd0a      	ble.n	8005c10 <round+0x64>
 8005bfa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005bfe:	d104      	bne.n	8005c0a <round+0x5e>
 8005c00:	4602      	mov	r2, r0
 8005c02:	f7fa faab 	bl	800015c <__adddf3>
 8005c06:	4604      	mov	r4, r0
 8005c08:	460d      	mov	r5, r1
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005c18:	40f8      	lsrs	r0, r7
 8005c1a:	4220      	tst	r0, r4
 8005c1c:	d0f5      	beq.n	8005c0a <round+0x5e>
 8005c1e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8005c22:	2201      	movs	r2, #1
 8005c24:	408a      	lsls	r2, r1
 8005c26:	1912      	adds	r2, r2, r4
 8005c28:	bf28      	it	cs
 8005c2a:	3301      	addcs	r3, #1
 8005c2c:	ea22 0200 	bic.w	r2, r2, r0
 8005c30:	e7d1      	b.n	8005bd6 <round+0x2a>
 8005c32:	bf00      	nop
 8005c34:	000fffff 	.word	0x000fffff

08005c38 <__ieee754_pow>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	b091      	sub	sp, #68	@ 0x44
 8005c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8005c42:	468b      	mov	fp, r1
 8005c44:	e9dd 1800 	ldrd	r1, r8, [sp]
 8005c48:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8005c4c:	4682      	mov	sl, r0
 8005c4e:	ea57 0001 	orrs.w	r0, r7, r1
 8005c52:	d112      	bne.n	8005c7a <__ieee754_pow+0x42>
 8005c54:	4653      	mov	r3, sl
 8005c56:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8005c5a:	18db      	adds	r3, r3, r3
 8005c5c:	4152      	adcs	r2, r2
 8005c5e:	4298      	cmp	r0, r3
 8005c60:	4b91      	ldr	r3, [pc, #580]	@ (8005ea8 <__ieee754_pow+0x270>)
 8005c62:	4193      	sbcs	r3, r2
 8005c64:	f080 84ce 	bcs.w	8006604 <__ieee754_pow+0x9cc>
 8005c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c6c:	4650      	mov	r0, sl
 8005c6e:	4659      	mov	r1, fp
 8005c70:	f7fa fa74 	bl	800015c <__adddf3>
 8005c74:	b011      	add	sp, #68	@ 0x44
 8005c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7a:	4b8c      	ldr	r3, [pc, #560]	@ (8005eac <__ieee754_pow+0x274>)
 8005c7c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8005c80:	429e      	cmp	r6, r3
 8005c82:	465d      	mov	r5, fp
 8005c84:	46d1      	mov	r9, sl
 8005c86:	d807      	bhi.n	8005c98 <__ieee754_pow+0x60>
 8005c88:	d102      	bne.n	8005c90 <__ieee754_pow+0x58>
 8005c8a:	f1ba 0f00 	cmp.w	sl, #0
 8005c8e:	d1eb      	bne.n	8005c68 <__ieee754_pow+0x30>
 8005c90:	429f      	cmp	r7, r3
 8005c92:	d801      	bhi.n	8005c98 <__ieee754_pow+0x60>
 8005c94:	d10f      	bne.n	8005cb6 <__ieee754_pow+0x7e>
 8005c96:	b171      	cbz	r1, 8005cb6 <__ieee754_pow+0x7e>
 8005c98:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005c9c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005ca0:	ea55 0509 	orrs.w	r5, r5, r9
 8005ca4:	d1e0      	bne.n	8005c68 <__ieee754_pow+0x30>
 8005ca6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005caa:	18db      	adds	r3, r3, r3
 8005cac:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005cb0:	4152      	adcs	r2, r2
 8005cb2:	429d      	cmp	r5, r3
 8005cb4:	e7d4      	b.n	8005c60 <__ieee754_pow+0x28>
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	4633      	mov	r3, r6
 8005cba:	da39      	bge.n	8005d30 <__ieee754_pow+0xf8>
 8005cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8005eb0 <__ieee754_pow+0x278>)
 8005cbe:	4297      	cmp	r7, r2
 8005cc0:	d84e      	bhi.n	8005d60 <__ieee754_pow+0x128>
 8005cc2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005cc6:	4297      	cmp	r7, r2
 8005cc8:	f240 84ab 	bls.w	8006622 <__ieee754_pow+0x9ea>
 8005ccc:	153a      	asrs	r2, r7, #20
 8005cce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005cd2:	2a14      	cmp	r2, #20
 8005cd4:	dd0f      	ble.n	8005cf6 <__ieee754_pow+0xbe>
 8005cd6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005cda:	fa21 f402 	lsr.w	r4, r1, r2
 8005cde:	fa04 f202 	lsl.w	r2, r4, r2
 8005ce2:	428a      	cmp	r2, r1
 8005ce4:	f040 849d 	bne.w	8006622 <__ieee754_pow+0x9ea>
 8005ce8:	f004 0401 	and.w	r4, r4, #1
 8005cec:	f1c4 0402 	rsb	r4, r4, #2
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d15a      	bne.n	8005daa <__ieee754_pow+0x172>
 8005cf4:	e00e      	b.n	8005d14 <__ieee754_pow+0xdc>
 8005cf6:	2900      	cmp	r1, #0
 8005cf8:	d156      	bne.n	8005da8 <__ieee754_pow+0x170>
 8005cfa:	f1c2 0214 	rsb	r2, r2, #20
 8005cfe:	fa47 f402 	asr.w	r4, r7, r2
 8005d02:	fa04 f202 	lsl.w	r2, r4, r2
 8005d06:	42ba      	cmp	r2, r7
 8005d08:	f040 8488 	bne.w	800661c <__ieee754_pow+0x9e4>
 8005d0c:	f004 0401 	and.w	r4, r4, #1
 8005d10:	f1c4 0402 	rsb	r4, r4, #2
 8005d14:	4a67      	ldr	r2, [pc, #412]	@ (8005eb4 <__ieee754_pow+0x27c>)
 8005d16:	4297      	cmp	r7, r2
 8005d18:	d130      	bne.n	8005d7c <__ieee754_pow+0x144>
 8005d1a:	f1b8 0f00 	cmp.w	r8, #0
 8005d1e:	f280 8479 	bge.w	8006614 <__ieee754_pow+0x9dc>
 8005d22:	4652      	mov	r2, sl
 8005d24:	465b      	mov	r3, fp
 8005d26:	2000      	movs	r0, #0
 8005d28:	4962      	ldr	r1, [pc, #392]	@ (8005eb4 <__ieee754_pow+0x27c>)
 8005d2a:	f7fa fcf7 	bl	800071c <__aeabi_ddiv>
 8005d2e:	e7a1      	b.n	8005c74 <__ieee754_pow+0x3c>
 8005d30:	2400      	movs	r4, #0
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d139      	bne.n	8005daa <__ieee754_pow+0x172>
 8005d36:	4a5d      	ldr	r2, [pc, #372]	@ (8005eac <__ieee754_pow+0x274>)
 8005d38:	4297      	cmp	r7, r2
 8005d3a:	d1eb      	bne.n	8005d14 <__ieee754_pow+0xdc>
 8005d3c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8005d40:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8005d44:	ea53 0309 	orrs.w	r3, r3, r9
 8005d48:	f000 845c 	beq.w	8006604 <__ieee754_pow+0x9cc>
 8005d4c:	4b5a      	ldr	r3, [pc, #360]	@ (8005eb8 <__ieee754_pow+0x280>)
 8005d4e:	429e      	cmp	r6, r3
 8005d50:	d908      	bls.n	8005d64 <__ieee754_pow+0x12c>
 8005d52:	f1b8 0f00 	cmp.w	r8, #0
 8005d56:	f2c0 8459 	blt.w	800660c <__ieee754_pow+0x9d4>
 8005d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d5e:	e789      	b.n	8005c74 <__ieee754_pow+0x3c>
 8005d60:	2402      	movs	r4, #2
 8005d62:	e7e6      	b.n	8005d32 <__ieee754_pow+0xfa>
 8005d64:	f1b8 0f00 	cmp.w	r8, #0
 8005d68:	f04f 0000 	mov.w	r0, #0
 8005d6c:	f04f 0100 	mov.w	r1, #0
 8005d70:	da80      	bge.n	8005c74 <__ieee754_pow+0x3c>
 8005d72:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005d76:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005d7a:	e77b      	b.n	8005c74 <__ieee754_pow+0x3c>
 8005d7c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8005d80:	d106      	bne.n	8005d90 <__ieee754_pow+0x158>
 8005d82:	4652      	mov	r2, sl
 8005d84:	465b      	mov	r3, fp
 8005d86:	4650      	mov	r0, sl
 8005d88:	4659      	mov	r1, fp
 8005d8a:	f7fa fb9d 	bl	80004c8 <__aeabi_dmul>
 8005d8e:	e771      	b.n	8005c74 <__ieee754_pow+0x3c>
 8005d90:	4a4a      	ldr	r2, [pc, #296]	@ (8005ebc <__ieee754_pow+0x284>)
 8005d92:	4590      	cmp	r8, r2
 8005d94:	d109      	bne.n	8005daa <__ieee754_pow+0x172>
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	db07      	blt.n	8005daa <__ieee754_pow+0x172>
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	b011      	add	sp, #68	@ 0x44
 8005da0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	f000 bd12 	b.w	80067cc <__ieee754_sqrt>
 8005da8:	2400      	movs	r4, #0
 8005daa:	4650      	mov	r0, sl
 8005dac:	4659      	mov	r1, fp
 8005dae:	9302      	str	r3, [sp, #8]
 8005db0:	f000 fc6a 	bl	8006688 <fabs>
 8005db4:	9b02      	ldr	r3, [sp, #8]
 8005db6:	f1b9 0f00 	cmp.w	r9, #0
 8005dba:	d127      	bne.n	8005e0c <__ieee754_pow+0x1d4>
 8005dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8005eb4 <__ieee754_pow+0x27c>)
 8005dbe:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8005dc2:	4594      	cmp	ip, r2
 8005dc4:	d000      	beq.n	8005dc8 <__ieee754_pow+0x190>
 8005dc6:	bb0e      	cbnz	r6, 8005e0c <__ieee754_pow+0x1d4>
 8005dc8:	f1b8 0f00 	cmp.w	r8, #0
 8005dcc:	da05      	bge.n	8005dda <__ieee754_pow+0x1a2>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	4937      	ldr	r1, [pc, #220]	@ (8005eb4 <__ieee754_pow+0x27c>)
 8005dd6:	f7fa fca1 	bl	800071c <__aeabi_ddiv>
 8005dda:	2d00      	cmp	r5, #0
 8005ddc:	f6bf af4a 	bge.w	8005c74 <__ieee754_pow+0x3c>
 8005de0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8005de4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005de8:	4326      	orrs	r6, r4
 8005dea:	d108      	bne.n	8005dfe <__ieee754_pow+0x1c6>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	f7fa f9b0 	bl	8000158 <__aeabi_dsub>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	e795      	b.n	8005d2a <__ieee754_pow+0xf2>
 8005dfe:	2c01      	cmp	r4, #1
 8005e00:	f47f af38 	bne.w	8005c74 <__ieee754_pow+0x3c>
 8005e04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e08:	4619      	mov	r1, r3
 8005e0a:	e733      	b.n	8005c74 <__ieee754_pow+0x3c>
 8005e0c:	0fea      	lsrs	r2, r5, #31
 8005e0e:	3a01      	subs	r2, #1
 8005e10:	ea52 0c04 	orrs.w	ip, r2, r4
 8005e14:	d102      	bne.n	8005e1c <__ieee754_pow+0x1e4>
 8005e16:	4652      	mov	r2, sl
 8005e18:	465b      	mov	r3, fp
 8005e1a:	e7e9      	b.n	8005df0 <__ieee754_pow+0x1b8>
 8005e1c:	f04f 0900 	mov.w	r9, #0
 8005e20:	3c01      	subs	r4, #1
 8005e22:	4314      	orrs	r4, r2
 8005e24:	bf14      	ite	ne
 8005e26:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8005eb4 <__ieee754_pow+0x27c>
 8005e2a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8005ec0 <__ieee754_pow+0x288>
 8005e2e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8005e32:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8005e36:	f240 8107 	bls.w	8006048 <__ieee754_pow+0x410>
 8005e3a:	4b22      	ldr	r3, [pc, #136]	@ (8005ec4 <__ieee754_pow+0x28c>)
 8005e3c:	429f      	cmp	r7, r3
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb8 <__ieee754_pow+0x280>)
 8005e40:	d913      	bls.n	8005e6a <__ieee754_pow+0x232>
 8005e42:	429e      	cmp	r6, r3
 8005e44:	d808      	bhi.n	8005e58 <__ieee754_pow+0x220>
 8005e46:	f1b8 0f00 	cmp.w	r8, #0
 8005e4a:	da08      	bge.n	8005e5e <__ieee754_pow+0x226>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	b011      	add	sp, #68	@ 0x44
 8005e50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	f000 bcb4 	b.w	80067c0 <__math_oflow>
 8005e58:	f1b8 0f00 	cmp.w	r8, #0
 8005e5c:	dcf6      	bgt.n	8005e4c <__ieee754_pow+0x214>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	b011      	add	sp, #68	@ 0x44
 8005e62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e66:	f000 bca6 	b.w	80067b6 <__math_uflow>
 8005e6a:	429e      	cmp	r6, r3
 8005e6c:	d20c      	bcs.n	8005e88 <__ieee754_pow+0x250>
 8005e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e72:	2200      	movs	r2, #0
 8005e74:	2300      	movs	r3, #0
 8005e76:	f7fa fd99 	bl	80009ac <__aeabi_dcmplt>
 8005e7a:	3800      	subs	r0, #0
 8005e7c:	bf18      	it	ne
 8005e7e:	2001      	movne	r0, #1
 8005e80:	f1b8 0f00 	cmp.w	r8, #0
 8005e84:	daec      	bge.n	8005e60 <__ieee754_pow+0x228>
 8005e86:	e7e2      	b.n	8005e4e <__ieee754_pow+0x216>
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <__ieee754_pow+0x27c>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	429e      	cmp	r6, r3
 8005e8e:	d91b      	bls.n	8005ec8 <__ieee754_pow+0x290>
 8005e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e94:	2300      	movs	r3, #0
 8005e96:	f7fa fd89 	bl	80009ac <__aeabi_dcmplt>
 8005e9a:	3800      	subs	r0, #0
 8005e9c:	bf18      	it	ne
 8005e9e:	2001      	movne	r0, #1
 8005ea0:	f1b8 0f00 	cmp.w	r8, #0
 8005ea4:	dcd3      	bgt.n	8005e4e <__ieee754_pow+0x216>
 8005ea6:	e7db      	b.n	8005e60 <__ieee754_pow+0x228>
 8005ea8:	fff00000 	.word	0xfff00000
 8005eac:	7ff00000 	.word	0x7ff00000
 8005eb0:	433fffff 	.word	0x433fffff
 8005eb4:	3ff00000 	.word	0x3ff00000
 8005eb8:	3fefffff 	.word	0x3fefffff
 8005ebc:	3fe00000 	.word	0x3fe00000
 8005ec0:	bff00000 	.word	0xbff00000
 8005ec4:	43f00000 	.word	0x43f00000
 8005ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8006038 <__ieee754_pow+0x400>)
 8005eca:	f7fa f945 	bl	8000158 <__aeabi_dsub>
 8005ece:	a352      	add	r3, pc, #328	@ (adr r3, 8006018 <__ieee754_pow+0x3e0>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	460d      	mov	r5, r1
 8005ed8:	f7fa faf6 	bl	80004c8 <__aeabi_dmul>
 8005edc:	a350      	add	r3, pc, #320	@ (adr r3, 8006020 <__ieee754_pow+0x3e8>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	460f      	mov	r7, r1
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	4629      	mov	r1, r5
 8005eea:	f7fa faed 	bl	80004c8 <__aeabi_dmul>
 8005eee:	2200      	movs	r2, #0
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	468b      	mov	fp, r1
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4b50      	ldr	r3, [pc, #320]	@ (800603c <__ieee754_pow+0x404>)
 8005efa:	f7fa fae5 	bl	80004c8 <__aeabi_dmul>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	a149      	add	r1, pc, #292	@ (adr r1, 8006028 <__ieee754_pow+0x3f0>)
 8005f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f08:	f7fa f926 	bl	8000158 <__aeabi_dsub>
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	462b      	mov	r3, r5
 8005f10:	f7fa fada 	bl	80004c8 <__aeabi_dmul>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	2000      	movs	r0, #0
 8005f1a:	4949      	ldr	r1, [pc, #292]	@ (8006040 <__ieee754_pow+0x408>)
 8005f1c:	f7fa f91c 	bl	8000158 <__aeabi_dsub>
 8005f20:	4622      	mov	r2, r4
 8005f22:	4680      	mov	r8, r0
 8005f24:	4689      	mov	r9, r1
 8005f26:	462b      	mov	r3, r5
 8005f28:	4620      	mov	r0, r4
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	f7fa facc 	bl	80004c8 <__aeabi_dmul>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4640      	mov	r0, r8
 8005f36:	4649      	mov	r1, r9
 8005f38:	f7fa fac6 	bl	80004c8 <__aeabi_dmul>
 8005f3c:	a33c      	add	r3, pc, #240	@ (adr r3, 8006030 <__ieee754_pow+0x3f8>)
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f7fa fac1 	bl	80004c8 <__aeabi_dmul>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	f7fa f903 	bl	8000158 <__aeabi_dsub>
 8005f52:	2400      	movs	r4, #0
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	4639      	mov	r1, r7
 8005f60:	f7fa f8fc 	bl	800015c <__adddf3>
 8005f64:	4632      	mov	r2, r6
 8005f66:	463b      	mov	r3, r7
 8005f68:	4620      	mov	r0, r4
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	f7fa f8f4 	bl	8000158 <__aeabi_dsub>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4640      	mov	r0, r8
 8005f76:	4649      	mov	r1, r9
 8005f78:	f7fa f8ee 	bl	8000158 <__aeabi_dsub>
 8005f7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f84:	2300      	movs	r3, #0
 8005f86:	9304      	str	r3, [sp, #16]
 8005f88:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	460f      	mov	r7, r1
 8005f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f94:	4652      	mov	r2, sl
 8005f96:	465b      	mov	r3, fp
 8005f98:	f7fa f8de 	bl	8000158 <__aeabi_dsub>
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	f7fa fa92 	bl	80004c8 <__aeabi_dmul>
 8005fa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fa8:	4680      	mov	r8, r0
 8005faa:	4689      	mov	r9, r1
 8005fac:	4630      	mov	r0, r6
 8005fae:	4639      	mov	r1, r7
 8005fb0:	f7fa fa8a 	bl	80004c8 <__aeabi_dmul>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4640      	mov	r0, r8
 8005fba:	4649      	mov	r1, r9
 8005fbc:	f7fa f8ce 	bl	800015c <__adddf3>
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	465b      	mov	r3, fp
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	460f      	mov	r7, r1
 8005fc8:	4620      	mov	r0, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f7fa fa7c 	bl	80004c8 <__aeabi_dmul>
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	f7fa f8be 	bl	800015c <__adddf3>
 8005fe0:	4b18      	ldr	r3, [pc, #96]	@ (8006044 <__ieee754_pow+0x40c>)
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4299      	cmp	r1, r3
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	468a      	mov	sl, r1
 8005fea:	468b      	mov	fp, r1
 8005fec:	f340 82e0 	ble.w	80065b0 <__ieee754_pow+0x978>
 8005ff0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005ff4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005ff8:	4303      	orrs	r3, r0
 8005ffa:	f000 81df 	beq.w	80063bc <__ieee754_pow+0x784>
 8005ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	2300      	movs	r3, #0
 8006006:	f7fa fcd1 	bl	80009ac <__aeabi_dcmplt>
 800600a:	3800      	subs	r0, #0
 800600c:	bf18      	it	ne
 800600e:	2001      	movne	r0, #1
 8006010:	e71d      	b.n	8005e4e <__ieee754_pow+0x216>
 8006012:	bf00      	nop
 8006014:	f3af 8000 	nop.w
 8006018:	60000000 	.word	0x60000000
 800601c:	3ff71547 	.word	0x3ff71547
 8006020:	f85ddf44 	.word	0xf85ddf44
 8006024:	3e54ae0b 	.word	0x3e54ae0b
 8006028:	55555555 	.word	0x55555555
 800602c:	3fd55555 	.word	0x3fd55555
 8006030:	652b82fe 	.word	0x652b82fe
 8006034:	3ff71547 	.word	0x3ff71547
 8006038:	3ff00000 	.word	0x3ff00000
 800603c:	3fd00000 	.word	0x3fd00000
 8006040:	3fe00000 	.word	0x3fe00000
 8006044:	408fffff 	.word	0x408fffff
 8006048:	4ad3      	ldr	r2, [pc, #844]	@ (8006398 <__ieee754_pow+0x760>)
 800604a:	402a      	ands	r2, r5
 800604c:	2a00      	cmp	r2, #0
 800604e:	f040 817a 	bne.w	8006346 <__ieee754_pow+0x70e>
 8006052:	4bd2      	ldr	r3, [pc, #840]	@ (800639c <__ieee754_pow+0x764>)
 8006054:	2200      	movs	r2, #0
 8006056:	f7fa fa37 	bl	80004c8 <__aeabi_dmul>
 800605a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800605e:	460b      	mov	r3, r1
 8006060:	151a      	asrs	r2, r3, #20
 8006062:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006066:	4422      	add	r2, r4
 8006068:	920a      	str	r2, [sp, #40]	@ 0x28
 800606a:	4acd      	ldr	r2, [pc, #820]	@ (80063a0 <__ieee754_pow+0x768>)
 800606c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006070:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8006074:	4293      	cmp	r3, r2
 8006076:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800607a:	dd08      	ble.n	800608e <__ieee754_pow+0x456>
 800607c:	4ac9      	ldr	r2, [pc, #804]	@ (80063a4 <__ieee754_pow+0x76c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	f340 8163 	ble.w	800634a <__ieee754_pow+0x712>
 8006084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006086:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800608a:	3301      	adds	r3, #1
 800608c:	930a      	str	r3, [sp, #40]	@ 0x28
 800608e:	2600      	movs	r6, #0
 8006090:	00f3      	lsls	r3, r6, #3
 8006092:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006094:	4bc4      	ldr	r3, [pc, #784]	@ (80063a8 <__ieee754_pow+0x770>)
 8006096:	4629      	mov	r1, r5
 8006098:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800609c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060a0:	461a      	mov	r2, r3
 80060a2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80060a6:	4623      	mov	r3, r4
 80060a8:	4682      	mov	sl, r0
 80060aa:	f7fa f855 	bl	8000158 <__aeabi_dsub>
 80060ae:	4652      	mov	r2, sl
 80060b0:	462b      	mov	r3, r5
 80060b2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80060b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060ba:	f7fa f84f 	bl	800015c <__adddf3>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	2000      	movs	r0, #0
 80060c4:	49b9      	ldr	r1, [pc, #740]	@ (80063ac <__ieee754_pow+0x774>)
 80060c6:	f7fa fb29 	bl	800071c <__aeabi_ddiv>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80060d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060d6:	f7fa f9f7 	bl	80004c8 <__aeabi_dmul>
 80060da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80060e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060e6:	2300      	movs	r3, #0
 80060e8:	2200      	movs	r2, #0
 80060ea:	46ab      	mov	fp, r5
 80060ec:	106d      	asrs	r5, r5, #1
 80060ee:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80060f2:	9304      	str	r3, [sp, #16]
 80060f4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80060f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80060fc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006100:	4640      	mov	r0, r8
 8006102:	4649      	mov	r1, r9
 8006104:	4614      	mov	r4, r2
 8006106:	461d      	mov	r5, r3
 8006108:	f7fa f9de 	bl	80004c8 <__aeabi_dmul>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006114:	f7fa f820 	bl	8000158 <__aeabi_dsub>
 8006118:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800611c:	4606      	mov	r6, r0
 800611e:	460f      	mov	r7, r1
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	f7fa f818 	bl	8000158 <__aeabi_dsub>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4650      	mov	r0, sl
 800612e:	4659      	mov	r1, fp
 8006130:	f7fa f812 	bl	8000158 <__aeabi_dsub>
 8006134:	4642      	mov	r2, r8
 8006136:	464b      	mov	r3, r9
 8006138:	f7fa f9c6 	bl	80004c8 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4630      	mov	r0, r6
 8006142:	4639      	mov	r1, r7
 8006144:	f7fa f808 	bl	8000158 <__aeabi_dsub>
 8006148:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800614c:	f7fa f9bc 	bl	80004c8 <__aeabi_dmul>
 8006150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006154:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006158:	4610      	mov	r0, r2
 800615a:	4619      	mov	r1, r3
 800615c:	f7fa f9b4 	bl	80004c8 <__aeabi_dmul>
 8006160:	a37b      	add	r3, pc, #492	@ (adr r3, 8006350 <__ieee754_pow+0x718>)
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	4604      	mov	r4, r0
 8006168:	460d      	mov	r5, r1
 800616a:	f7fa f9ad 	bl	80004c8 <__aeabi_dmul>
 800616e:	a37a      	add	r3, pc, #488	@ (adr r3, 8006358 <__ieee754_pow+0x720>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7f9 fff2 	bl	800015c <__adddf3>
 8006178:	4622      	mov	r2, r4
 800617a:	462b      	mov	r3, r5
 800617c:	f7fa f9a4 	bl	80004c8 <__aeabi_dmul>
 8006180:	a377      	add	r3, pc, #476	@ (adr r3, 8006360 <__ieee754_pow+0x728>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7f9 ffe9 	bl	800015c <__adddf3>
 800618a:	4622      	mov	r2, r4
 800618c:	462b      	mov	r3, r5
 800618e:	f7fa f99b 	bl	80004c8 <__aeabi_dmul>
 8006192:	a375      	add	r3, pc, #468	@ (adr r3, 8006368 <__ieee754_pow+0x730>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f7f9 ffe0 	bl	800015c <__adddf3>
 800619c:	4622      	mov	r2, r4
 800619e:	462b      	mov	r3, r5
 80061a0:	f7fa f992 	bl	80004c8 <__aeabi_dmul>
 80061a4:	a372      	add	r3, pc, #456	@ (adr r3, 8006370 <__ieee754_pow+0x738>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f7f9 ffd7 	bl	800015c <__adddf3>
 80061ae:	4622      	mov	r2, r4
 80061b0:	462b      	mov	r3, r5
 80061b2:	f7fa f989 	bl	80004c8 <__aeabi_dmul>
 80061b6:	a370      	add	r3, pc, #448	@ (adr r3, 8006378 <__ieee754_pow+0x740>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f7f9 ffce 	bl	800015c <__adddf3>
 80061c0:	4622      	mov	r2, r4
 80061c2:	4606      	mov	r6, r0
 80061c4:	460f      	mov	r7, r1
 80061c6:	462b      	mov	r3, r5
 80061c8:	4620      	mov	r0, r4
 80061ca:	4629      	mov	r1, r5
 80061cc:	f7fa f97c 	bl	80004c8 <__aeabi_dmul>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4630      	mov	r0, r6
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa f976 	bl	80004c8 <__aeabi_dmul>
 80061dc:	4604      	mov	r4, r0
 80061de:	460d      	mov	r5, r1
 80061e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	f7f9 ffb8 	bl	800015c <__adddf3>
 80061ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061f0:	f7fa f96a 	bl	80004c8 <__aeabi_dmul>
 80061f4:	4622      	mov	r2, r4
 80061f6:	462b      	mov	r3, r5
 80061f8:	f7f9 ffb0 	bl	800015c <__adddf3>
 80061fc:	4642      	mov	r2, r8
 80061fe:	4682      	mov	sl, r0
 8006200:	468b      	mov	fp, r1
 8006202:	464b      	mov	r3, r9
 8006204:	4640      	mov	r0, r8
 8006206:	4649      	mov	r1, r9
 8006208:	f7fa f95e 	bl	80004c8 <__aeabi_dmul>
 800620c:	2200      	movs	r2, #0
 800620e:	4b68      	ldr	r3, [pc, #416]	@ (80063b0 <__ieee754_pow+0x778>)
 8006210:	4606      	mov	r6, r0
 8006212:	460f      	mov	r7, r1
 8006214:	f7f9 ffa2 	bl	800015c <__adddf3>
 8006218:	4652      	mov	r2, sl
 800621a:	465b      	mov	r3, fp
 800621c:	f7f9 ff9e 	bl	800015c <__adddf3>
 8006220:	2400      	movs	r4, #0
 8006222:	460d      	mov	r5, r1
 8006224:	4622      	mov	r2, r4
 8006226:	460b      	mov	r3, r1
 8006228:	4640      	mov	r0, r8
 800622a:	4649      	mov	r1, r9
 800622c:	f7fa f94c 	bl	80004c8 <__aeabi_dmul>
 8006230:	2200      	movs	r2, #0
 8006232:	4680      	mov	r8, r0
 8006234:	4689      	mov	r9, r1
 8006236:	4620      	mov	r0, r4
 8006238:	4629      	mov	r1, r5
 800623a:	4b5d      	ldr	r3, [pc, #372]	@ (80063b0 <__ieee754_pow+0x778>)
 800623c:	f7f9 ff8c 	bl	8000158 <__aeabi_dsub>
 8006240:	4632      	mov	r2, r6
 8006242:	463b      	mov	r3, r7
 8006244:	f7f9 ff88 	bl	8000158 <__aeabi_dsub>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4650      	mov	r0, sl
 800624e:	4659      	mov	r1, fp
 8006250:	f7f9 ff82 	bl	8000158 <__aeabi_dsub>
 8006254:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006258:	f7fa f936 	bl	80004c8 <__aeabi_dmul>
 800625c:	4622      	mov	r2, r4
 800625e:	4606      	mov	r6, r0
 8006260:	460f      	mov	r7, r1
 8006262:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006266:	462b      	mov	r3, r5
 8006268:	f7fa f92e 	bl	80004c8 <__aeabi_dmul>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7f9 ff72 	bl	800015c <__adddf3>
 8006278:	2400      	movs	r4, #0
 800627a:	4606      	mov	r6, r0
 800627c:	460f      	mov	r7, r1
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f7f9 ff69 	bl	800015c <__adddf3>
 800628a:	a33d      	add	r3, pc, #244	@ (adr r3, 8006380 <__ieee754_pow+0x748>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	4620      	mov	r0, r4
 8006292:	460d      	mov	r5, r1
 8006294:	f7fa f918 	bl	80004c8 <__aeabi_dmul>
 8006298:	4642      	mov	r2, r8
 800629a:	464b      	mov	r3, r9
 800629c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062a0:	4620      	mov	r0, r4
 80062a2:	4629      	mov	r1, r5
 80062a4:	f7f9 ff58 	bl	8000158 <__aeabi_dsub>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4630      	mov	r0, r6
 80062ae:	4639      	mov	r1, r7
 80062b0:	f7f9 ff52 	bl	8000158 <__aeabi_dsub>
 80062b4:	a334      	add	r3, pc, #208	@ (adr r3, 8006388 <__ieee754_pow+0x750>)
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f7fa f905 	bl	80004c8 <__aeabi_dmul>
 80062be:	a334      	add	r3, pc, #208	@ (adr r3, 8006390 <__ieee754_pow+0x758>)
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	4606      	mov	r6, r0
 80062c6:	460f      	mov	r7, r1
 80062c8:	4620      	mov	r0, r4
 80062ca:	4629      	mov	r1, r5
 80062cc:	f7fa f8fc 	bl	80004c8 <__aeabi_dmul>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4630      	mov	r0, r6
 80062d6:	4639      	mov	r1, r7
 80062d8:	f7f9 ff40 	bl	800015c <__adddf3>
 80062dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062de:	4b35      	ldr	r3, [pc, #212]	@ (80063b4 <__ieee754_pow+0x77c>)
 80062e0:	2400      	movs	r4, #0
 80062e2:	4413      	add	r3, r2
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f7f9 ff38 	bl	800015c <__adddf3>
 80062ec:	4682      	mov	sl, r0
 80062ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062f0:	468b      	mov	fp, r1
 80062f2:	f7fa f87f 	bl	80003f4 <__aeabi_i2d>
 80062f6:	4606      	mov	r6, r0
 80062f8:	460f      	mov	r7, r1
 80062fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062fc:	4b2e      	ldr	r3, [pc, #184]	@ (80063b8 <__ieee754_pow+0x780>)
 80062fe:	4413      	add	r3, r2
 8006300:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006304:	4652      	mov	r2, sl
 8006306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800630a:	465b      	mov	r3, fp
 800630c:	f7f9 ff26 	bl	800015c <__adddf3>
 8006310:	4642      	mov	r2, r8
 8006312:	464b      	mov	r3, r9
 8006314:	f7f9 ff22 	bl	800015c <__adddf3>
 8006318:	4632      	mov	r2, r6
 800631a:	463b      	mov	r3, r7
 800631c:	f7f9 ff1e 	bl	800015c <__adddf3>
 8006320:	4632      	mov	r2, r6
 8006322:	463b      	mov	r3, r7
 8006324:	4620      	mov	r0, r4
 8006326:	460d      	mov	r5, r1
 8006328:	f7f9 ff16 	bl	8000158 <__aeabi_dsub>
 800632c:	4642      	mov	r2, r8
 800632e:	464b      	mov	r3, r9
 8006330:	f7f9 ff12 	bl	8000158 <__aeabi_dsub>
 8006334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006338:	f7f9 ff0e 	bl	8000158 <__aeabi_dsub>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4650      	mov	r0, sl
 8006342:	4659      	mov	r1, fp
 8006344:	e618      	b.n	8005f78 <__ieee754_pow+0x340>
 8006346:	2400      	movs	r4, #0
 8006348:	e68a      	b.n	8006060 <__ieee754_pow+0x428>
 800634a:	2601      	movs	r6, #1
 800634c:	e6a0      	b.n	8006090 <__ieee754_pow+0x458>
 800634e:	bf00      	nop
 8006350:	4a454eef 	.word	0x4a454eef
 8006354:	3fca7e28 	.word	0x3fca7e28
 8006358:	93c9db65 	.word	0x93c9db65
 800635c:	3fcd864a 	.word	0x3fcd864a
 8006360:	a91d4101 	.word	0xa91d4101
 8006364:	3fd17460 	.word	0x3fd17460
 8006368:	518f264d 	.word	0x518f264d
 800636c:	3fd55555 	.word	0x3fd55555
 8006370:	db6fabff 	.word	0xdb6fabff
 8006374:	3fdb6db6 	.word	0x3fdb6db6
 8006378:	33333303 	.word	0x33333303
 800637c:	3fe33333 	.word	0x3fe33333
 8006380:	e0000000 	.word	0xe0000000
 8006384:	3feec709 	.word	0x3feec709
 8006388:	dc3a03fd 	.word	0xdc3a03fd
 800638c:	3feec709 	.word	0x3feec709
 8006390:	145b01f5 	.word	0x145b01f5
 8006394:	be3e2fe0 	.word	0xbe3e2fe0
 8006398:	7ff00000 	.word	0x7ff00000
 800639c:	43400000 	.word	0x43400000
 80063a0:	0003988e 	.word	0x0003988e
 80063a4:	000bb679 	.word	0x000bb679
 80063a8:	08006a70 	.word	0x08006a70
 80063ac:	3ff00000 	.word	0x3ff00000
 80063b0:	40080000 	.word	0x40080000
 80063b4:	08006a50 	.word	0x08006a50
 80063b8:	08006a60 	.word	0x08006a60
 80063bc:	a39a      	add	r3, pc, #616	@ (adr r3, 8006628 <__ieee754_pow+0x9f0>)
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	4630      	mov	r0, r6
 80063c4:	4639      	mov	r1, r7
 80063c6:	f7f9 fec9 	bl	800015c <__adddf3>
 80063ca:	4642      	mov	r2, r8
 80063cc:	e9cd 0100 	strd	r0, r1, [sp]
 80063d0:	464b      	mov	r3, r9
 80063d2:	4620      	mov	r0, r4
 80063d4:	4629      	mov	r1, r5
 80063d6:	f7f9 febf 	bl	8000158 <__aeabi_dsub>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063e2:	f7fa fb01 	bl	80009e8 <__aeabi_dcmpgt>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f47f ae09 	bne.w	8005ffe <__ieee754_pow+0x3c6>
 80063ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80063f0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80063f4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80063f8:	fa43 fa0a 	asr.w	sl, r3, sl
 80063fc:	44da      	add	sl, fp
 80063fe:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006402:	489b      	ldr	r0, [pc, #620]	@ (8006670 <__ieee754_pow+0xa38>)
 8006404:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006408:	4108      	asrs	r0, r1
 800640a:	ea00 030a 	and.w	r3, r0, sl
 800640e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006412:	f1c1 0114 	rsb	r1, r1, #20
 8006416:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800641a:	4640      	mov	r0, r8
 800641c:	fa4a fa01 	asr.w	sl, sl, r1
 8006420:	f1bb 0f00 	cmp.w	fp, #0
 8006424:	4649      	mov	r1, r9
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	bfb8      	it	lt
 800642c:	f1ca 0a00 	rsblt	sl, sl, #0
 8006430:	f7f9 fe92 	bl	8000158 <__aeabi_dsub>
 8006434:	4680      	mov	r8, r0
 8006436:	4689      	mov	r9, r1
 8006438:	2400      	movs	r4, #0
 800643a:	4632      	mov	r2, r6
 800643c:	463b      	mov	r3, r7
 800643e:	4640      	mov	r0, r8
 8006440:	4649      	mov	r1, r9
 8006442:	f7f9 fe8b 	bl	800015c <__adddf3>
 8006446:	a37a      	add	r3, pc, #488	@ (adr r3, 8006630 <__ieee754_pow+0x9f8>)
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	4620      	mov	r0, r4
 800644e:	460d      	mov	r5, r1
 8006450:	f7fa f83a 	bl	80004c8 <__aeabi_dmul>
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	e9cd 0100 	strd	r0, r1, [sp]
 800645c:	4620      	mov	r0, r4
 800645e:	4629      	mov	r1, r5
 8006460:	f7f9 fe7a 	bl	8000158 <__aeabi_dsub>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4630      	mov	r0, r6
 800646a:	4639      	mov	r1, r7
 800646c:	f7f9 fe74 	bl	8000158 <__aeabi_dsub>
 8006470:	a371      	add	r3, pc, #452	@ (adr r3, 8006638 <__ieee754_pow+0xa00>)
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f7fa f827 	bl	80004c8 <__aeabi_dmul>
 800647a:	a371      	add	r3, pc, #452	@ (adr r3, 8006640 <__ieee754_pow+0xa08>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	4680      	mov	r8, r0
 8006482:	4689      	mov	r9, r1
 8006484:	4620      	mov	r0, r4
 8006486:	4629      	mov	r1, r5
 8006488:	f7fa f81e 	bl	80004c8 <__aeabi_dmul>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4640      	mov	r0, r8
 8006492:	4649      	mov	r1, r9
 8006494:	f7f9 fe62 	bl	800015c <__adddf3>
 8006498:	4604      	mov	r4, r0
 800649a:	460d      	mov	r5, r1
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064a4:	f7f9 fe5a 	bl	800015c <__adddf3>
 80064a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ac:	4680      	mov	r8, r0
 80064ae:	4689      	mov	r9, r1
 80064b0:	f7f9 fe52 	bl	8000158 <__aeabi_dsub>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4620      	mov	r0, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	f7f9 fe4c 	bl	8000158 <__aeabi_dsub>
 80064c0:	4642      	mov	r2, r8
 80064c2:	4606      	mov	r6, r0
 80064c4:	460f      	mov	r7, r1
 80064c6:	464b      	mov	r3, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	4649      	mov	r1, r9
 80064cc:	f7f9 fffc 	bl	80004c8 <__aeabi_dmul>
 80064d0:	a35d      	add	r3, pc, #372	@ (adr r3, 8006648 <__ieee754_pow+0xa10>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	4604      	mov	r4, r0
 80064d8:	460d      	mov	r5, r1
 80064da:	f7f9 fff5 	bl	80004c8 <__aeabi_dmul>
 80064de:	a35c      	add	r3, pc, #368	@ (adr r3, 8006650 <__ieee754_pow+0xa18>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f7f9 fe38 	bl	8000158 <__aeabi_dsub>
 80064e8:	4622      	mov	r2, r4
 80064ea:	462b      	mov	r3, r5
 80064ec:	f7f9 ffec 	bl	80004c8 <__aeabi_dmul>
 80064f0:	a359      	add	r3, pc, #356	@ (adr r3, 8006658 <__ieee754_pow+0xa20>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7f9 fe31 	bl	800015c <__adddf3>
 80064fa:	4622      	mov	r2, r4
 80064fc:	462b      	mov	r3, r5
 80064fe:	f7f9 ffe3 	bl	80004c8 <__aeabi_dmul>
 8006502:	a357      	add	r3, pc, #348	@ (adr r3, 8006660 <__ieee754_pow+0xa28>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7f9 fe26 	bl	8000158 <__aeabi_dsub>
 800650c:	4622      	mov	r2, r4
 800650e:	462b      	mov	r3, r5
 8006510:	f7f9 ffda 	bl	80004c8 <__aeabi_dmul>
 8006514:	a354      	add	r3, pc, #336	@ (adr r3, 8006668 <__ieee754_pow+0xa30>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f7f9 fe1f 	bl	800015c <__adddf3>
 800651e:	4622      	mov	r2, r4
 8006520:	462b      	mov	r3, r5
 8006522:	f7f9 ffd1 	bl	80004c8 <__aeabi_dmul>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	f7f9 fe13 	bl	8000158 <__aeabi_dsub>
 8006532:	4604      	mov	r4, r0
 8006534:	460d      	mov	r5, r1
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4640      	mov	r0, r8
 800653c:	4649      	mov	r1, r9
 800653e:	f7f9 ffc3 	bl	80004c8 <__aeabi_dmul>
 8006542:	2200      	movs	r2, #0
 8006544:	e9cd 0100 	strd	r0, r1, [sp]
 8006548:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800654c:	4620      	mov	r0, r4
 800654e:	4629      	mov	r1, r5
 8006550:	f7f9 fe02 	bl	8000158 <__aeabi_dsub>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800655c:	f7fa f8de 	bl	800071c <__aeabi_ddiv>
 8006560:	4632      	mov	r2, r6
 8006562:	4604      	mov	r4, r0
 8006564:	460d      	mov	r5, r1
 8006566:	463b      	mov	r3, r7
 8006568:	4640      	mov	r0, r8
 800656a:	4649      	mov	r1, r9
 800656c:	f7f9 ffac 	bl	80004c8 <__aeabi_dmul>
 8006570:	4632      	mov	r2, r6
 8006572:	463b      	mov	r3, r7
 8006574:	f7f9 fdf2 	bl	800015c <__adddf3>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7f9 fdea 	bl	8000158 <__aeabi_dsub>
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	f7f9 fde6 	bl	8000158 <__aeabi_dsub>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	2000      	movs	r0, #0
 8006592:	4938      	ldr	r1, [pc, #224]	@ (8006674 <__ieee754_pow+0xa3c>)
 8006594:	f7f9 fde0 	bl	8000158 <__aeabi_dsub>
 8006598:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800659c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80065a0:	da2e      	bge.n	8006600 <__ieee754_pow+0x9c8>
 80065a2:	4652      	mov	r2, sl
 80065a4:	f000 f874 	bl	8006690 <scalbn>
 80065a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ac:	f7ff bbed 	b.w	8005d8a <__ieee754_pow+0x152>
 80065b0:	4c31      	ldr	r4, [pc, #196]	@ (8006678 <__ieee754_pow+0xa40>)
 80065b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80065b6:	42a3      	cmp	r3, r4
 80065b8:	d91a      	bls.n	80065f0 <__ieee754_pow+0x9b8>
 80065ba:	4b30      	ldr	r3, [pc, #192]	@ (800667c <__ieee754_pow+0xa44>)
 80065bc:	440b      	add	r3, r1
 80065be:	4303      	orrs	r3, r0
 80065c0:	d009      	beq.n	80065d6 <__ieee754_pow+0x99e>
 80065c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	2300      	movs	r3, #0
 80065ca:	f7fa f9ef 	bl	80009ac <__aeabi_dcmplt>
 80065ce:	3800      	subs	r0, #0
 80065d0:	bf18      	it	ne
 80065d2:	2001      	movne	r0, #1
 80065d4:	e444      	b.n	8005e60 <__ieee754_pow+0x228>
 80065d6:	4642      	mov	r2, r8
 80065d8:	464b      	mov	r3, r9
 80065da:	f7f9 fdbd 	bl	8000158 <__aeabi_dsub>
 80065de:	4632      	mov	r2, r6
 80065e0:	463b      	mov	r3, r7
 80065e2:	f7fa f9f7 	bl	80009d4 <__aeabi_dcmpge>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d1eb      	bne.n	80065c2 <__ieee754_pow+0x98a>
 80065ea:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8006680 <__ieee754_pow+0xa48>
 80065ee:	e6fd      	b.n	80063ec <__ieee754_pow+0x7b4>
 80065f0:	469a      	mov	sl, r3
 80065f2:	4b24      	ldr	r3, [pc, #144]	@ (8006684 <__ieee754_pow+0xa4c>)
 80065f4:	459a      	cmp	sl, r3
 80065f6:	f63f aef9 	bhi.w	80063ec <__ieee754_pow+0x7b4>
 80065fa:	f8dd a010 	ldr.w	sl, [sp, #16]
 80065fe:	e71b      	b.n	8006438 <__ieee754_pow+0x800>
 8006600:	4621      	mov	r1, r4
 8006602:	e7d1      	b.n	80065a8 <__ieee754_pow+0x970>
 8006604:	2000      	movs	r0, #0
 8006606:	491b      	ldr	r1, [pc, #108]	@ (8006674 <__ieee754_pow+0xa3c>)
 8006608:	f7ff bb34 	b.w	8005c74 <__ieee754_pow+0x3c>
 800660c:	2000      	movs	r0, #0
 800660e:	2100      	movs	r1, #0
 8006610:	f7ff bb30 	b.w	8005c74 <__ieee754_pow+0x3c>
 8006614:	4650      	mov	r0, sl
 8006616:	4659      	mov	r1, fp
 8006618:	f7ff bb2c 	b.w	8005c74 <__ieee754_pow+0x3c>
 800661c:	460c      	mov	r4, r1
 800661e:	f7ff bb79 	b.w	8005d14 <__ieee754_pow+0xdc>
 8006622:	2400      	movs	r4, #0
 8006624:	f7ff bb64 	b.w	8005cf0 <__ieee754_pow+0xb8>
 8006628:	652b82fe 	.word	0x652b82fe
 800662c:	3c971547 	.word	0x3c971547
 8006630:	00000000 	.word	0x00000000
 8006634:	3fe62e43 	.word	0x3fe62e43
 8006638:	fefa39ef 	.word	0xfefa39ef
 800663c:	3fe62e42 	.word	0x3fe62e42
 8006640:	0ca86c39 	.word	0x0ca86c39
 8006644:	be205c61 	.word	0xbe205c61
 8006648:	72bea4d0 	.word	0x72bea4d0
 800664c:	3e663769 	.word	0x3e663769
 8006650:	c5d26bf1 	.word	0xc5d26bf1
 8006654:	3ebbbd41 	.word	0x3ebbbd41
 8006658:	af25de2c 	.word	0xaf25de2c
 800665c:	3f11566a 	.word	0x3f11566a
 8006660:	16bebd93 	.word	0x16bebd93
 8006664:	3f66c16c 	.word	0x3f66c16c
 8006668:	5555553e 	.word	0x5555553e
 800666c:	3fc55555 	.word	0x3fc55555
 8006670:	fff00000 	.word	0xfff00000
 8006674:	3ff00000 	.word	0x3ff00000
 8006678:	4090cbff 	.word	0x4090cbff
 800667c:	3f6f3400 	.word	0x3f6f3400
 8006680:	4090cc00 	.word	0x4090cc00
 8006684:	3fe00000 	.word	0x3fe00000

08006688 <fabs>:
 8006688:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800668c:	4619      	mov	r1, r3
 800668e:	4770      	bx	lr

08006690 <scalbn>:
 8006690:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006694:	4616      	mov	r6, r2
 8006696:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800669a:	4683      	mov	fp, r0
 800669c:	468c      	mov	ip, r1
 800669e:	460b      	mov	r3, r1
 80066a0:	b982      	cbnz	r2, 80066c4 <scalbn+0x34>
 80066a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80066a6:	4303      	orrs	r3, r0
 80066a8:	d039      	beq.n	800671e <scalbn+0x8e>
 80066aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006768 <scalbn+0xd8>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	f7f9 ff0b 	bl	80004c8 <__aeabi_dmul>
 80066b2:	4b2e      	ldr	r3, [pc, #184]	@ (800676c <scalbn+0xdc>)
 80066b4:	4683      	mov	fp, r0
 80066b6:	429e      	cmp	r6, r3
 80066b8:	468c      	mov	ip, r1
 80066ba:	da0d      	bge.n	80066d8 <scalbn+0x48>
 80066bc:	a326      	add	r3, pc, #152	@ (adr r3, 8006758 <scalbn+0xc8>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	e01b      	b.n	80066fc <scalbn+0x6c>
 80066c4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80066c8:	42ba      	cmp	r2, r7
 80066ca:	d109      	bne.n	80066e0 <scalbn+0x50>
 80066cc:	4602      	mov	r2, r0
 80066ce:	f7f9 fd45 	bl	800015c <__adddf3>
 80066d2:	4683      	mov	fp, r0
 80066d4:	468c      	mov	ip, r1
 80066d6:	e022      	b.n	800671e <scalbn+0x8e>
 80066d8:	460b      	mov	r3, r1
 80066da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066de:	3a36      	subs	r2, #54	@ 0x36
 80066e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80066e4:	428e      	cmp	r6, r1
 80066e6:	dd0c      	ble.n	8006702 <scalbn+0x72>
 80066e8:	a31d      	add	r3, pc, #116	@ (adr r3, 8006760 <scalbn+0xd0>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	461c      	mov	r4, r3
 80066f0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80066f4:	f361 74df 	bfi	r4, r1, #31, #1
 80066f8:	4621      	mov	r1, r4
 80066fa:	481d      	ldr	r0, [pc, #116]	@ (8006770 <scalbn+0xe0>)
 80066fc:	f7f9 fee4 	bl	80004c8 <__aeabi_dmul>
 8006700:	e7e7      	b.n	80066d2 <scalbn+0x42>
 8006702:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006706:	4432      	add	r2, r6
 8006708:	428a      	cmp	r2, r1
 800670a:	dced      	bgt.n	80066e8 <scalbn+0x58>
 800670c:	2a00      	cmp	r2, #0
 800670e:	dd0a      	ble.n	8006726 <scalbn+0x96>
 8006710:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006714:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006718:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800671c:	46ac      	mov	ip, r5
 800671e:	4658      	mov	r0, fp
 8006720:	4661      	mov	r1, ip
 8006722:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8006726:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800672a:	da09      	bge.n	8006740 <scalbn+0xb0>
 800672c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8006730:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8006734:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8006738:	480e      	ldr	r0, [pc, #56]	@ (8006774 <scalbn+0xe4>)
 800673a:	f041 011f 	orr.w	r1, r1, #31
 800673e:	e7bd      	b.n	80066bc <scalbn+0x2c>
 8006740:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006744:	3236      	adds	r2, #54	@ 0x36
 8006746:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800674a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800674e:	4658      	mov	r0, fp
 8006750:	4629      	mov	r1, r5
 8006752:	2200      	movs	r2, #0
 8006754:	4b08      	ldr	r3, [pc, #32]	@ (8006778 <scalbn+0xe8>)
 8006756:	e7d1      	b.n	80066fc <scalbn+0x6c>
 8006758:	c2f8f359 	.word	0xc2f8f359
 800675c:	01a56e1f 	.word	0x01a56e1f
 8006760:	8800759c 	.word	0x8800759c
 8006764:	7e37e43c 	.word	0x7e37e43c
 8006768:	43500000 	.word	0x43500000
 800676c:	ffff3cb0 	.word	0xffff3cb0
 8006770:	8800759c 	.word	0x8800759c
 8006774:	c2f8f359 	.word	0xc2f8f359
 8006778:	3c900000 	.word	0x3c900000

0800677c <with_errno>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	4616      	mov	r6, r2
 8006784:	f7fe fd1c 	bl	80051c0 <__errno>
 8006788:	4629      	mov	r1, r5
 800678a:	6006      	str	r6, [r0, #0]
 800678c:	4620      	mov	r0, r4
 800678e:	bd70      	pop	{r4, r5, r6, pc}

08006790 <xflow>:
 8006790:	b513      	push	{r0, r1, r4, lr}
 8006792:	4604      	mov	r4, r0
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	b10c      	cbz	r4, 800679e <xflow+0xe>
 800679a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800679e:	e9cd 2300 	strd	r2, r3, [sp]
 80067a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067a6:	f7f9 fe8f 	bl	80004c8 <__aeabi_dmul>
 80067aa:	2222      	movs	r2, #34	@ 0x22
 80067ac:	b002      	add	sp, #8
 80067ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b2:	f7ff bfe3 	b.w	800677c <with_errno>

080067b6 <__math_uflow>:
 80067b6:	2200      	movs	r2, #0
 80067b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80067bc:	f7ff bfe8 	b.w	8006790 <xflow>

080067c0 <__math_oflow>:
 80067c0:	2200      	movs	r2, #0
 80067c2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80067c6:	f7ff bfe3 	b.w	8006790 <xflow>
	...

080067cc <__ieee754_sqrt>:
 80067cc:	4a67      	ldr	r2, [pc, #412]	@ (800696c <__ieee754_sqrt+0x1a0>)
 80067ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d2:	438a      	bics	r2, r1
 80067d4:	4606      	mov	r6, r0
 80067d6:	460f      	mov	r7, r1
 80067d8:	460b      	mov	r3, r1
 80067da:	4604      	mov	r4, r0
 80067dc:	d10e      	bne.n	80067fc <__ieee754_sqrt+0x30>
 80067de:	4602      	mov	r2, r0
 80067e0:	f7f9 fe72 	bl	80004c8 <__aeabi_dmul>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4630      	mov	r0, r6
 80067ea:	4639      	mov	r1, r7
 80067ec:	f7f9 fcb6 	bl	800015c <__adddf3>
 80067f0:	4606      	mov	r6, r0
 80067f2:	460f      	mov	r7, r1
 80067f4:	4630      	mov	r0, r6
 80067f6:	4639      	mov	r1, r7
 80067f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fc:	2900      	cmp	r1, #0
 80067fe:	dc0c      	bgt.n	800681a <__ieee754_sqrt+0x4e>
 8006800:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006804:	4302      	orrs	r2, r0
 8006806:	d0f5      	beq.n	80067f4 <__ieee754_sqrt+0x28>
 8006808:	b189      	cbz	r1, 800682e <__ieee754_sqrt+0x62>
 800680a:	4602      	mov	r2, r0
 800680c:	f7f9 fca4 	bl	8000158 <__aeabi_dsub>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	f7f9 ff82 	bl	800071c <__aeabi_ddiv>
 8006818:	e7ea      	b.n	80067f0 <__ieee754_sqrt+0x24>
 800681a:	150a      	asrs	r2, r1, #20
 800681c:	d115      	bne.n	800684a <__ieee754_sqrt+0x7e>
 800681e:	2100      	movs	r1, #0
 8006820:	e009      	b.n	8006836 <__ieee754_sqrt+0x6a>
 8006822:	0ae3      	lsrs	r3, r4, #11
 8006824:	3a15      	subs	r2, #21
 8006826:	0564      	lsls	r4, r4, #21
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0fa      	beq.n	8006822 <__ieee754_sqrt+0x56>
 800682c:	e7f7      	b.n	800681e <__ieee754_sqrt+0x52>
 800682e:	460a      	mov	r2, r1
 8006830:	e7fa      	b.n	8006828 <__ieee754_sqrt+0x5c>
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	3101      	adds	r1, #1
 8006836:	02d8      	lsls	r0, r3, #11
 8006838:	d5fb      	bpl.n	8006832 <__ieee754_sqrt+0x66>
 800683a:	1e48      	subs	r0, r1, #1
 800683c:	1a12      	subs	r2, r2, r0
 800683e:	f1c1 0020 	rsb	r0, r1, #32
 8006842:	fa24 f000 	lsr.w	r0, r4, r0
 8006846:	4303      	orrs	r3, r0
 8006848:	408c      	lsls	r4, r1
 800684a:	2600      	movs	r6, #0
 800684c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006850:	2116      	movs	r1, #22
 8006852:	07d2      	lsls	r2, r2, #31
 8006854:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006858:	4632      	mov	r2, r6
 800685a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800685e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006862:	bf5c      	itt	pl
 8006864:	005b      	lslpl	r3, r3, #1
 8006866:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800686a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800686e:	bf58      	it	pl
 8006870:	0064      	lslpl	r4, r4, #1
 8006872:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006876:	107f      	asrs	r7, r7, #1
 8006878:	0064      	lsls	r4, r4, #1
 800687a:	1815      	adds	r5, r2, r0
 800687c:	429d      	cmp	r5, r3
 800687e:	bfde      	ittt	le
 8006880:	182a      	addle	r2, r5, r0
 8006882:	1b5b      	suble	r3, r3, r5
 8006884:	1836      	addle	r6, r6, r0
 8006886:	0fe5      	lsrs	r5, r4, #31
 8006888:	3901      	subs	r1, #1
 800688a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800688e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006892:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006896:	d1f0      	bne.n	800687a <__ieee754_sqrt+0xae>
 8006898:	460d      	mov	r5, r1
 800689a:	f04f 0a20 	mov.w	sl, #32
 800689e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80068a2:	429a      	cmp	r2, r3
 80068a4:	eb01 0c00 	add.w	ip, r1, r0
 80068a8:	db02      	blt.n	80068b0 <__ieee754_sqrt+0xe4>
 80068aa:	d113      	bne.n	80068d4 <__ieee754_sqrt+0x108>
 80068ac:	45a4      	cmp	ip, r4
 80068ae:	d811      	bhi.n	80068d4 <__ieee754_sqrt+0x108>
 80068b0:	f1bc 0f00 	cmp.w	ip, #0
 80068b4:	eb0c 0100 	add.w	r1, ip, r0
 80068b8:	da42      	bge.n	8006940 <__ieee754_sqrt+0x174>
 80068ba:	2900      	cmp	r1, #0
 80068bc:	db40      	blt.n	8006940 <__ieee754_sqrt+0x174>
 80068be:	f102 0e01 	add.w	lr, r2, #1
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	4672      	mov	r2, lr
 80068c6:	45a4      	cmp	ip, r4
 80068c8:	bf88      	it	hi
 80068ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80068ce:	eba4 040c 	sub.w	r4, r4, ip
 80068d2:	4405      	add	r5, r0
 80068d4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80068d8:	f1ba 0a01 	subs.w	sl, sl, #1
 80068dc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80068e0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80068e4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80068e8:	d1db      	bne.n	80068a2 <__ieee754_sqrt+0xd6>
 80068ea:	431c      	orrs	r4, r3
 80068ec:	d01a      	beq.n	8006924 <__ieee754_sqrt+0x158>
 80068ee:	4c20      	ldr	r4, [pc, #128]	@ (8006970 <__ieee754_sqrt+0x1a4>)
 80068f0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006974 <__ieee754_sqrt+0x1a8>
 80068f4:	e9d4 0100 	ldrd	r0, r1, [r4]
 80068f8:	e9db 2300 	ldrd	r2, r3, [fp]
 80068fc:	f7f9 fc2c 	bl	8000158 <__aeabi_dsub>
 8006900:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7fa f858 	bl	80009c0 <__aeabi_dcmple>
 8006910:	b140      	cbz	r0, 8006924 <__ieee754_sqrt+0x158>
 8006912:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006916:	e9db 2300 	ldrd	r2, r3, [fp]
 800691a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800691e:	d111      	bne.n	8006944 <__ieee754_sqrt+0x178>
 8006920:	4655      	mov	r5, sl
 8006922:	3601      	adds	r6, #1
 8006924:	1072      	asrs	r2, r6, #1
 8006926:	086b      	lsrs	r3, r5, #1
 8006928:	07f1      	lsls	r1, r6, #31
 800692a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800692e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006932:	bf48      	it	mi
 8006934:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006938:	4618      	mov	r0, r3
 800693a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800693e:	e757      	b.n	80067f0 <__ieee754_sqrt+0x24>
 8006940:	4696      	mov	lr, r2
 8006942:	e7be      	b.n	80068c2 <__ieee754_sqrt+0xf6>
 8006944:	f7f9 fc0a 	bl	800015c <__adddf3>
 8006948:	e9d4 8900 	ldrd	r8, r9, [r4]
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7fa f82a 	bl	80009ac <__aeabi_dcmplt>
 8006958:	b120      	cbz	r0, 8006964 <__ieee754_sqrt+0x198>
 800695a:	1ca8      	adds	r0, r5, #2
 800695c:	bf08      	it	eq
 800695e:	3601      	addeq	r6, #1
 8006960:	3502      	adds	r5, #2
 8006962:	e7df      	b.n	8006924 <__ieee754_sqrt+0x158>
 8006964:	1c6b      	adds	r3, r5, #1
 8006966:	f023 0501 	bic.w	r5, r3, #1
 800696a:	e7db      	b.n	8006924 <__ieee754_sqrt+0x158>
 800696c:	7ff00000 	.word	0x7ff00000
 8006970:	20000068 	.word	0x20000068
 8006974:	20000060 	.word	0x20000060

08006978 <_init>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	bf00      	nop
 800697c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697e:	bc08      	pop	{r3}
 8006980:	469e      	mov	lr, r3
 8006982:	4770      	bx	lr

08006984 <_fini>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr
