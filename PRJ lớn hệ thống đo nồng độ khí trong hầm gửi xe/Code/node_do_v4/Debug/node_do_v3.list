
node_do_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008bb0  08008bb0  00009bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd0  08008dd0  0000a078  2**0
                  CONTENTS
  4 .ARM          00000000  08008dd0  08008dd0  0000a078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008dd0  08008dd0  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd0  08008dd0  00009dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dd4  08008dd4  00009dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008dd8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b6c  20000078  08008e50  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000be4  08008e50  0000abe4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140a1  00000000  00000000  0000a0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003103  00000000  00000000  0001e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00021248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdd  00000000  00000000  00022688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a086  00000000  00000000  00023665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019922  00000000  00000000  0003d6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000954a9  00000000  00000000  0005700d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc0  00000000  00000000  000ec4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f24bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b98 	.word	0x08008b98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008b98 	.word	0x08008b98

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <CCS811_ReadReg>:
extern I2C_HandleTypeDef hi2c2;

#define hi2cxc hi2c2
// Hàm đọc từ 1 thanh ghi (1byte)
uint8_t CCS811_ReadReg(uint8_t addr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &result, 1, 100);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	2364      	movs	r3, #100	@ 0x64
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	f107 030f 	add.w	r3, r7, #15
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	21b4      	movs	r1, #180	@ 0xb4
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <CCS811_ReadReg+0x34>)
 8000d5a:	f002 fee3 	bl	8003b24 <HAL_I2C_Mem_Read>
    return result;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000118 	.word	0x20000118

08000d6c <CCS811_ReadRegMulti>:
// hàm đọc nhiều byte từ thanh ghi
void CCS811_ReadRegMulti(uint8_t addr, uint8_t * val,uint8_t size)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read( &hi2cxc, CCS811_ADDR, ( uint8_t )addr, I2C_MEMADD_SIZE_8BIT, val, size,100 );
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	2164      	movs	r1, #100	@ 0x64
 8000d86:	9102      	str	r1, [sp, #8]
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	21b4      	movs	r1, #180	@ 0xb4
 8000d92:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <CCS811_ReadRegMulti+0x34>)
 8000d94:	f002 fec6 	bl	8003b24 <HAL_I2C_Mem_Read>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000118 	.word	0x20000118

08000da4 <CCS811_WriteReg>:

// Hàm viết vào 1 thanh ghi 1byte
void CCS811_WriteReg(uint8_t addr, uint8_t val)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	1dbb      	adds	r3, r7, #6
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	21b4      	movs	r1, #180	@ 0xb4
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <CCS811_WriteReg+0x34>)
 8000dca:	f002 fdb1 	bl	8003930 <HAL_I2C_Mem_Write>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000118 	.word	0x20000118

08000ddc <CCS811_Init>:
void CCS811_WriteRegMulti(uint8_t addr, uint8_t *data, uint8_t length)
{
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
}
// Hàm khởi tạo CCS811
void CCS811_Init() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
    uint8_t status[1] = {0};
 8000de2:	2300      	movs	r3, #0
 8000de4:	723b      	strb	r3, [r7, #8]
    int Init_OK = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000dea:	e026      	b.n	8000e3a <CCS811_Init+0x5e>
    {
		// Kiểm tra trạng thái cảm biến
    	status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ffa1 	bl	8000d34 <CCS811_ReadReg>
 8000df2:	4603      	mov	r3, r0
 8000df4:	723b      	strb	r3, [r7, #8]
		if ((status[0] & 0x10) == 0)
 8000df6:	7a3b      	ldrb	r3, [r7, #8]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <CCS811_Init+0x2a>
		{  // Kiểm tra nếu chưa sẵn sàng (bit 4 là 0)
			Init_OK = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	e019      	b.n	8000e3a <CCS811_Init+0x5e>
		}
		else
		{
			// Gửi lệnh bắt đầu ứng dụng
			uint8_t app_start = CCS811_APP_START;
 8000e06:	23f4      	movs	r3, #244	@ 0xf4
 8000e08:	71fb      	strb	r3, [r7, #7]
			HAL_I2C_Master_Transmit(&hi2cxc, CCS811_ADDR, &app_start, 1, HAL_MAX_DELAY);
 8000e0a:	1dfa      	adds	r2, r7, #7
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	21b4      	movs	r1, #180	@ 0xb4
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <CCS811_Init+0x70>)
 8000e18:	f002 fc8c 	bl	8003734 <HAL_I2C_Master_Transmit>
			// Kiểm tra lại trạng thái
			status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ff89 	bl	8000d34 <CCS811_ReadReg>
 8000e22:	4603      	mov	r3, r0
 8000e24:	723b      	strb	r3, [r7, #8]
			if ((status[0] & 0x90) != 0x90) //bit 7 và 4=1
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8000e2c:	2b90      	cmp	r3, #144	@ 0x90
 8000e2e:	d002      	beq.n	8000e36 <CCS811_Init+0x5a>
			{  // Kiểm tra nếu sẵn sàng và không có lỗi
				Init_OK = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e001      	b.n	8000e3a <CCS811_Init+0x5e>
			}
			else
			{
				Init_OK = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0d5      	beq.n	8000dec <CCS811_Init+0x10>
			}

		}
    }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000118 	.word	0x20000118

08000e50 <CCS811_Set_Mode>:
void CCS811_Set_Mode(uint8_t mode)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
   // Chế độ đo
	mode = mode <<4;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	71fb      	strb	r3, [r7, #7]
    CCS811_WriteReg(CCS811_MEAS_MODE, mode);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4619      	mov	r1, r3
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff ff9d 	bl	8000da4 <CCS811_WriteReg>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <CCS811_Read_Co2>:
	    //Mode 4 = RAW mode.
 */

//Hàm đọc giá trị Co2
void CCS811_Read_Co2(uint16_t *eCO2)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2208      	movs	r2, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f7ff ff6e 	bl	8000d6c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *eCO2 = (buf[0] << 8) | buf[1];
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	7a7b      	ldrb	r3, [r7, #9]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	801a      	strh	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <CCS811_EnableInt>:
    }
}

//Enable the nINT signal
void CCS811_EnableInt(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint8_t setting = CCS811_ReadReg(CCS811_MEAS_MODE); //đọc giá trị lúc trước
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff ff3e 	bl	8000d34 <CCS811_ReadReg>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
	setting |= (1 << 3); //Set INTERRUPT bit ( chế độ khi có giá trị mới sẽ ngắt)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	71fb      	strb	r3, [r7, #7]
	CCS811_WriteReg(CCS811_MEAS_MODE, setting);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff ff6b 	bl	8000da4 <CCS811_WriteReg>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <lcd_send_cmd>:
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f023 030f 	bic.w	r3, r3, #15
 8000ee8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f043 030c 	orr.w	r3, r3, #12
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	f043 030c 	orr.w	r3, r3, #12
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	2364      	movs	r3, #100	@ 0x64
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2304      	movs	r3, #4
 8000f22:	214e      	movs	r1, #78	@ 0x4e
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <lcd_send_cmd+0x5c>)
 8000f26:	f002 fc05 	bl	8003734 <HAL_I2C_Master_Transmit>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000c4 	.word	0x200000c4

08000f38 <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f023 030f 	bic.w	r3, r3, #15
 8000f48:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 030d 	orr.w	r3, r3, #13
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f043 0309 	orr.w	r3, r3, #9
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f043 030d 	orr.w	r3, r3, #13
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	f043 0309 	orr.w	r3, r3, #9
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2304      	movs	r3, #4
 8000f82:	214e      	movs	r1, #78	@ 0x4e
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <lcd_send_data+0x5c>)
 8000f86:	f002 fbd5 	bl	8003734 <HAL_I2C_Master_Transmit>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000c4 	.word	0x200000c4

08000f98 <lcd_put_cur>:
		lcd_send_data(' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <lcd_put_cur+0x18>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d005      	beq.n	8000fba <lcd_put_cur+0x22>
 8000fae:	e009      	b.n	8000fc4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb6:	603b      	str	r3, [r7, #0]
            break;
 8000fb8:	e004      	b.n	8000fc4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fc0:	603b      	str	r3, [r7, #0]
            break;
 8000fc2:	bf00      	nop
    }

    lcd_send_cmd(col);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff85 	bl	8000ed8 <lcd_send_cmd>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <lcd_init>:

void lcd_init (void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 8000fda:	2032      	movs	r0, #50	@ 0x32
 8000fdc:	f001 fab8 	bl	8002550 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000fe0:	2030      	movs	r0, #48	@ 0x30
 8000fe2:	f7ff ff79 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f001 fab2 	bl	8002550 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000fec:	2030      	movs	r0, #48	@ 0x30
 8000fee:	f7ff ff73 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f001 faac 	bl	8002550 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000ff8:	2030      	movs	r0, #48	@ 0x30
 8000ffa:	f7ff ff6d 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(10);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f001 faa6 	bl	8002550 <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 8001004:	2020      	movs	r0, #32
 8001006:	f7ff ff67 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(10);
 800100a:	200a      	movs	r0, #10
 800100c:	f001 faa0 	bl	8002550 <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 8001010:	2028      	movs	r0, #40	@ 0x28
 8001012:	f7ff ff61 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f001 fa9a 	bl	8002550 <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 800101c:	2008      	movs	r0, #8
 800101e:	f7ff ff5b 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f001 fa94 	bl	8002550 <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff ff55 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f001 fa8e 	bl	8002550 <HAL_Delay>
	HAL_Delay(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f001 fa8b 	bl	8002550 <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 800103a:	2006      	movs	r0, #6
 800103c:	f7ff ff4c 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f001 fa85 	bl	8002550 <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 8001046:	200c      	movs	r0, #12
 8001048:	f7ff ff46 	bl	8000ed8 <lcd_send_cmd>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8001058:	e006      	b.n	8001068 <lcd_send_string+0x18>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff68 	bl	8000f38 <lcd_send_data>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f4      	bne.n	800105a <lcd_send_string+0xa>
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <set_time>:
int save_ok = 0;
char string_data[100][20];
RTC_TimeTypeDef gTime;

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	460b      	mov	r3, r1
 8001088:	71bb      	strb	r3, [r7, #6]
 800108a:	4613      	mov	r3, r2
 800108c:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2100      	movs	r1, #0
 8001094:	460a      	mov	r2, r1
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	460a      	mov	r2, r1
 800109a:	709a      	strb	r2, [r3, #2]

	sTime.Hours = hr;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 80010a4:	797b      	ldrb	r3, [r7, #5]
 80010a6:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	4808      	ldr	r0, [pc, #32]	@ (80010d4 <set_time+0x58>)
 80010b2:	f004 f9f5 	bl	80054a0 <HAL_RTC_SetTime>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <set_time+0x44>
	{
		Error_Handler();
 80010bc:	f000 feea 	bl	8001e94 <Error_Handler>
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 80010c0:	f242 3245 	movw	r2, #9029	@ 0x2345
 80010c4:	2101      	movs	r1, #1
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <set_time+0x58>)
 80010c8:	f004 fdfc 	bl	8005cc4 <HAL_RTCEx_BKUPWrite>
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000016c 	.word	0x2000016c

080010d8 <get_time>:

void get_time()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80010dc:	2200      	movs	r2, #0
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <get_time+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <get_time+0x18>)
 80010e2:	f004 fa75 	bl	80055d0 <HAL_RTC_GetTime>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000a90 	.word	0x20000a90
 80010f0:	2000016c 	.word	0x2000016c
 80010f4:	00000000 	.word	0x00000000

080010f8 <CO_ppm_convert>:

int CO_ppm_convert(float CO_vol) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    float a = ((5.0 - CO_vol) / CO_vol) * (10/5);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff f989 	bl	8000418 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	4922      	ldr	r1, [pc, #136]	@ (8001198 <CO_ppm_convert+0xa0>)
 8001110:	f7ff f822 	bl	8000158 <__aeabi_dsub>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4614      	mov	r4, r2
 800111a:	461d      	mov	r5, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff f97b 	bl	8000418 <__aeabi_f2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4620      	mov	r0, r4
 8001128:	4629      	mov	r1, r5
 800112a:	f7ff faf7 	bl	800071c <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	f7ff f80f 	bl	800015c <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fc97 	bl	8000a78 <__aeabi_d2f>
 800114a:	4603      	mov	r3, r0
 800114c:	60fb      	str	r3, [r7, #12]
    return (int)round(100 * pow(a, -1.559));
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff f962 	bl	8000418 <__aeabi_f2d>
 8001154:	a30e      	add	r3, pc, #56	@ (adr r3, 8001190 <CO_ppm_convert+0x98>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f006 fdc7 	bl	8007cec <pow>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <CO_ppm_convert+0xa4>)
 8001164:	f7ff f9b0 	bl	80004c8 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f006 fe2a 	bl	8007dc8 <round>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc54 	bl	8000a28 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	fbe76c8b 	.word	0xfbe76c8b
 8001194:	bff8f1a9 	.word	0xbff8f1a9
 8001198:	40140000 	.word	0x40140000
 800119c:	40590000 	.word	0x40590000

080011a0 <Auto_Warning>:

void Auto_Warning ()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	  // khi không ấn nút( cảnh báo tự đông)
	  if(CO2_ppm<=1000 && CO_ppm <= 25)
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <Auto_Warning+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011ac:	dc06      	bgt.n	80011bc <Auto_Warning+0x1c>
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <Auto_Warning+0x44>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b19      	cmp	r3, #25
 80011b4:	dc02      	bgt.n	80011bc <Auto_Warning+0x1c>
	  {
		  L1_Warning_On();
 80011b6:	f001 f915 	bl	80023e4 <L1_Warning_On>
 80011ba:	e00e      	b.n	80011da <Auto_Warning+0x3a>
	  }
	  else if((CO2_ppm>=2000) || (CO_ppm>=50))
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <Auto_Warning+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011c4:	da03      	bge.n	80011ce <Auto_Warning+0x2e>
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <Auto_Warning+0x44>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b31      	cmp	r3, #49	@ 0x31
 80011cc:	dd02      	ble.n	80011d4 <Auto_Warning+0x34>
	  {
		  L3_Warning_On();
 80011ce:	f001 f8db 	bl	8002388 <L3_Warning_On>
 80011d2:	e002      	b.n	80011da <Auto_Warning+0x3a>
	  }
	  else
	  {
		  L2_Warning_On();
 80011d4:	f001 f8aa 	bl	800232c <L2_Warning_On>
	  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000290 	.word	0x20000290
 80011e4:	2000029c 	.word	0x2000029c

080011e8 <Manual_Warning>:
void Manual_Warning ()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    if(l1_state==1)
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <Manual_Warning+0x30>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d102      	bne.n	80011fa <Manual_Warning+0x12>
    {
      L1_Warning_On();
 80011f4:	f001 f8f6 	bl	80023e4 <L1_Warning_On>
    }
    else if(l3_state==1)
    {
      L3_Warning_On();
    }
}
 80011f8:	e00c      	b.n	8001214 <Manual_Warning+0x2c>
    else if (l2_state==1)
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <Manual_Warning+0x34>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <Manual_Warning+0x20>
      L2_Warning_On();
 8001202:	f001 f893 	bl	800232c <L2_Warning_On>
}
 8001206:	e005      	b.n	8001214 <Manual_Warning+0x2c>
    else if(l3_state==1)
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <Manual_Warning+0x38>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <Manual_Warning+0x2c>
      L3_Warning_On();
 8001210:	f001 f8ba 	bl	8002388 <L3_Warning_On>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000280 	.word	0x20000280
 800121c:	20000284 	.word	0x20000284
 8001220:	20000288 	.word	0x20000288

08001224 <Change_Timer_Period>:

void Change_Timer_Period(TIM_HandleTypeDef *htim)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
if (CO2_ppm <= 1000 && CO_ppm <= 25)
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <Change_Timer_Period+0x94>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001234:	dc13      	bgt.n	800125e <Change_Timer_Period+0x3a>
 8001236:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <Change_Timer_Period+0x98>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b19      	cmp	r3, #25
 800123c:	dc0f      	bgt.n	800125e <Change_Timer_Period+0x3a>
   {
       HAL_TIM_Base_Stop_IT(htim);                  // Dừng timer
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f004 fe18 	bl	8005e74 <HAL_TIM_Base_Stop_IT>
       __HAL_TIM_SET_AUTORELOAD(htim, T3);          // Cập nhật chu kỳ
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f241 7270 	movw	r2, #6000	@ 0x1770
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001254:	60da      	str	r2, [r3, #12]
       HAL_TIM_Base_Start_IT(htim);                 // Khởi động lại timer
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f004 fdba 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
 800125c:	e028      	b.n	80012b0 <Change_Timer_Period+0x8c>
   }
   else if (CO2_ppm >= 2000 || CO_ppm >= 25)
 800125e:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <Change_Timer_Period+0x94>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001266:	da03      	bge.n	8001270 <Change_Timer_Period+0x4c>
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <Change_Timer_Period+0x98>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b18      	cmp	r3, #24
 800126e:	dd0f      	ble.n	8001290 <Change_Timer_Period+0x6c>
   {
       HAL_TIM_Base_Stop_IT(htim);                  // Dừng timer
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f004 fdff 	bl	8005e74 <HAL_TIM_Base_Stop_IT>
       __HAL_TIM_SET_AUTORELOAD(htim, T1);          // Cập nhật chu kỳ
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800127e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001286:	60da      	str	r2, [r3, #12]
       HAL_TIM_Base_Start_IT(htim);                 // Khởi động lại timer
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f004 fda1 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
 800128e:	e00f      	b.n	80012b0 <Change_Timer_Period+0x8c>
   }
   else
   {
       HAL_TIM_Base_Stop_IT(htim);                  // Dừng timer
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f004 fdef 	bl	8005e74 <HAL_TIM_Base_Stop_IT>
       __HAL_TIM_SET_AUTORELOAD(htim, T2);          // Cập nhật chu kỳ
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80012a6:	60da      	str	r2, [r3, #12]
       HAL_TIM_Base_Start_IT(htim);                 // Khởi động lại timer
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f004 fd91 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
   }
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000290 	.word	0x20000290
 80012bc:	2000029c 	.word	0x2000029c

080012c0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d0:	d103      	bne.n	80012da <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
    	HAL_ADC_Start_IT(&hadc1);
 80012d2:	4823      	ldr	r0, [pc, #140]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012d4:	f001 fa38 	bl	8002748 <HAL_ADC_Start_IT>
   		 get_time();
   		sprintf(string_data[miss_inx], "%02d%02d%02d%5d%5d", gTime.Hours, gTime.Minutes, gTime.Seconds , CO_ppm, CO2_ppm);
   		save_ok=1;
   	 }
    }
}
 80012d8:	e03e      	b.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x98>
    else if (htim->Instance == TIM3)  // Kiểm tra nếu ngắt từ Timer 3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a21      	ldr	r2, [pc, #132]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d139      	bne.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x98>
    	Change_Timer_Period(&htim3);
 80012e4:	4820      	ldr	r0, [pc, #128]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012e6:	f7ff ff9d 	bl	8001224 <Change_Timer_Period>
    	connect_error_flag++;
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a1e      	ldr	r2, [pc, #120]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80012f2:	6013      	str	r3, [r2, #0]
    	save_ok=0;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
   	 if(connect_error_flag>=2 && save_ok==0)
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	dd2a      	ble.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x98>
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d126      	bne.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x98>
   		 miss_inx=connect_error_flag-2;
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3b02      	subs	r3, #2
 8001310:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001312:	6013      	str	r3, [r2, #0]
   		 get_time();
 8001314:	f7ff fee0 	bl	80010d8 <get_time>
   		sprintf(string_data[miss_inx], "%02d%02d%02d%5d%5d", gTime.Hours, gTime.Minutes, gTime.Seconds , CO_ppm, CO2_ppm);
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001326:	1898      	adds	r0, r3, r2
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461c      	mov	r4, r3
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	461d      	mov	r5, r3
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001336:	789b      	ldrb	r3, [r3, #2]
 8001338:	4619      	mov	r1, r3
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	9202      	str	r2, [sp, #8]
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	9100      	str	r1, [sp, #0]
 8001348:	462b      	mov	r3, r5
 800134a:	4622      	mov	r2, r4
 800134c:	490e      	ldr	r1, [pc, #56]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800134e:	f006 f801 	bl	8007354 <siprintf>
   		save_ok=1;
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bdb0      	pop	{r4, r5, r7, pc}
 8001360:	20000094 	.word	0x20000094
 8001364:	40000400 	.word	0x40000400
 8001368:	200001c8 	.word	0x200001c8
 800136c:	200002b8 	.word	0x200002b8
 8001370:	200002bc 	.word	0x200002bc
 8001374:	200002a8 	.word	0x200002a8
 8001378:	200002c0 	.word	0x200002c0
 800137c:	20000a90 	.word	0x20000a90
 8001380:	2000029c 	.word	0x2000029c
 8001384:	20000290 	.word	0x20000290
 8001388:	08008bb0 	.word	0x08008bb0
 800138c:	00000000 	.word	0x00000000

08001390 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a4e      	ldr	r2, [pc, #312]	@ (80014d8 <HAL_ADC_ConvCpltCallback+0x148>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d105      	bne.n	80013ae <HAL_ADC_ConvCpltCallback+0x1e>
    CO_adc_val = HAL_ADC_GetValue(&hadc1);
 80013a2:	484e      	ldr	r0, [pc, #312]	@ (80014dc <HAL_ADC_ConvCpltCallback+0x14c>)
 80013a4:	f001 fa86 	bl	80028b4 <HAL_ADC_GetValue>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a4d      	ldr	r2, [pc, #308]	@ (80014e0 <HAL_ADC_ConvCpltCallback+0x150>)
 80013ac:	6013      	str	r3, [r2, #0]
	CO_vol = ((float)CO_adc_val / 4095.0) * 5;
 80013ae:	4b4c      	ldr	r3, [pc, #304]	@ (80014e0 <HAL_ADC_ConvCpltCallback+0x150>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc66 	bl	8000c84 <__aeabi_ui2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f82c 	bl	8000418 <__aeabi_f2d>
 80013c0:	a343      	add	r3, pc, #268	@ (adr r3, 80014d0 <HAL_ADC_ConvCpltCallback+0x140>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f9a9 	bl	800071c <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b43      	ldr	r3, [pc, #268]	@ (80014e4 <HAL_ADC_ConvCpltCallback+0x154>)
 80013d8:	f7ff f876 	bl	80004c8 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fb48 	bl	8000a78 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a3f      	ldr	r2, [pc, #252]	@ (80014e8 <HAL_ADC_ConvCpltCallback+0x158>)
 80013ec:	6013      	str	r3, [r2, #0]
	CO_ppm = CO_ppm_convert(CO_vol);
 80013ee:	4b3e      	ldr	r3, [pc, #248]	@ (80014e8 <HAL_ADC_ConvCpltCallback+0x158>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fe80 	bl	80010f8 <CO_ppm_convert>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a3c      	ldr	r2, [pc, #240]	@ (80014ec <HAL_ADC_ConvCpltCallback+0x15c>)
 80013fc:	6013      	str	r3, [r2, #0]
	sprintf(CO_ppm_buf, "%d", CO_ppm);
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <HAL_ADC_ConvCpltCallback+0x15c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	493a      	ldr	r1, [pc, #232]	@ (80014f0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001406:	483b      	ldr	r0, [pc, #236]	@ (80014f4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001408:	f005 ffa4 	bl	8007354 <siprintf>
	// Xóa vị trí hiện tại trên LCD trước khi ghi chuỗi mới
	lcd_put_cur(1, 4);
 800140c:	2104      	movs	r1, #4
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff fdc2 	bl	8000f98 <lcd_put_cur>
	lcd_send_string("    ");  // Ghi đè 4f khoảng trắng tại vị trí đó
 8001414:	4838      	ldr	r0, [pc, #224]	@ (80014f8 <HAL_ADC_ConvCpltCallback+0x168>)
 8001416:	f7ff fe1b 	bl	8001050 <lcd_send_string>

	lcd_put_cur(1, 4);
 800141a:	2104      	movs	r1, #4
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff fdbb 	bl	8000f98 <lcd_put_cur>
	lcd_send_string (CO_ppm_buf);
 8001422:	4834      	ldr	r0, [pc, #208]	@ (80014f4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001424:	f7ff fe14 	bl	8001050 <lcd_send_string>
	if(CO_ppm > 9999)
 8001428:	4b30      	ldr	r3, [pc, #192]	@ (80014ec <HAL_ADC_ConvCpltCallback+0x15c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001430:	4293      	cmp	r3, r2
 8001432:	dd0d      	ble.n	8001450 <HAL_ADC_ConvCpltCallback+0xc0>
	{
	   lcd_put_cur(1, 8);
 8001434:	2108      	movs	r1, #8
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff fdae 	bl	8000f98 <lcd_put_cur>
	   lcd_send_string("        ");  // Ghi đè 8 khoảng trắng tại vị trí đó
 800143c:	482f      	ldr	r0, [pc, #188]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x16c>)
 800143e:	f7ff fe07 	bl	8001050 <lcd_send_string>
	   lcd_put_cur(1, 8);
 8001442:	2108      	movs	r1, #8
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fda7 	bl	8000f98 <lcd_put_cur>
	   lcd_send_string ("ppm|AUTO");
 800144a:	482d      	ldr	r0, [pc, #180]	@ (8001500 <HAL_ADC_ConvCpltCallback+0x170>)
 800144c:	f7ff fe00 	bl	8001050 <lcd_send_string>
	}
	CCS811_Read_Co2(&eCO2);
 8001450:	482c      	ldr	r0, [pc, #176]	@ (8001504 <HAL_ADC_ConvCpltCallback+0x174>)
 8001452:	f7ff fd0e 	bl	8000e72 <CCS811_Read_Co2>
    CO2_ppm = (int)(eCO2);
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <HAL_ADC_ConvCpltCallback+0x174>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_ADC_ConvCpltCallback+0x178>)
 800145e:	601a      	str	r2, [r3, #0]
	sprintf(CO2_ppm_buf, "%d", CO2_ppm);
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <HAL_ADC_ConvCpltCallback+0x178>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4922      	ldr	r1, [pc, #136]	@ (80014f0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001468:	4828      	ldr	r0, [pc, #160]	@ (800150c <HAL_ADC_ConvCpltCallback+0x17c>)
 800146a:	f005 ff73 	bl	8007354 <siprintf>
	// Xóa vị trí hiện tại trên LCD trước khi ghi chuỗi mới
	lcd_put_cur(0, 4);
 800146e:	2104      	movs	r1, #4
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fd91 	bl	8000f98 <lcd_put_cur>
	lcd_send_string("    ");  // Ghi đè 4 khoảng trắng tại vị trí đó
 8001476:	4820      	ldr	r0, [pc, #128]	@ (80014f8 <HAL_ADC_ConvCpltCallback+0x168>)
 8001478:	f7ff fdea 	bl	8001050 <lcd_send_string>
	// ghi vào vị trí này
	lcd_put_cur(0, 4);
 800147c:	2104      	movs	r1, #4
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fd8a 	bl	8000f98 <lcd_put_cur>
	lcd_send_string (CO2_ppm_buf);
 8001484:	4821      	ldr	r0, [pc, #132]	@ (800150c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001486:	f7ff fde3 	bl	8001050 <lcd_send_string>

	if(CO2_ppm > 9999)
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <HAL_ADC_ConvCpltCallback+0x178>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001492:	4293      	cmp	r3, r2
 8001494:	dd0d      	ble.n	80014b2 <HAL_ADC_ConvCpltCallback+0x122>
	{
	   lcd_put_cur(1, 8);
 8001496:	2108      	movs	r1, #8
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff fd7d 	bl	8000f98 <lcd_put_cur>
	   lcd_send_string("        ");
 800149e:	4817      	ldr	r0, [pc, #92]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x16c>)
 80014a0:	f7ff fdd6 	bl	8001050 <lcd_send_string>
	   lcd_put_cur(1, 8);
 80014a4:	2108      	movs	r1, #8
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff fd76 	bl	8000f98 <lcd_put_cur>
	   lcd_send_string ("ppm|MODE");
 80014ac:	4818      	ldr	r0, [pc, #96]	@ (8001510 <HAL_ADC_ConvCpltCallback+0x180>)
 80014ae:	f7ff fdcf 	bl	8001050 <lcd_send_string>
	}
	if(at_state==1)
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_ADC_ConvCpltCallback+0x184>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_ADC_ConvCpltCallback+0x12e>
	{
		Auto_Warning();
 80014ba:	f7ff fe71 	bl	80011a0 <Auto_Warning>
	}
	Change_Timer_Period(&htim2);
 80014be:	4816      	ldr	r0, [pc, #88]	@ (8001518 <HAL_ADC_ConvCpltCallback+0x188>)
 80014c0:	f7ff feb0 	bl	8001224 <Change_Timer_Period>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	f3af 8000 	nop.w
 80014d0:	00000000 	.word	0x00000000
 80014d4:	40affe00 	.word	0x40affe00
 80014d8:	40012400 	.word	0x40012400
 80014dc:	20000094 	.word	0x20000094
 80014e0:	20000294 	.word	0x20000294
 80014e4:	40140000 	.word	0x40140000
 80014e8:	20000298 	.word	0x20000298
 80014ec:	2000029c 	.word	0x2000029c
 80014f0:	08008bc4 	.word	0x08008bc4
 80014f4:	200002a0 	.word	0x200002a0
 80014f8:	08008bc8 	.word	0x08008bc8
 80014fc:	08008bd0 	.word	0x08008bd0
 8001500:	08008bdc 	.word	0x08008bdc
 8001504:	2000028c 	.word	0x2000028c
 8001508:	20000290 	.word	0x20000290
 800150c:	200002a4 	.word	0x200002a4
 8001510:	08008be8 	.word	0x08008be8
 8001514:	20000004 	.word	0x20000004
 8001518:	20000180 	.word	0x20000180

0800151c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
//    {
//        // đ�?c dữ liệu từ CCS811
//    	CCS811_Read_Co2(&eCO2);
//        CO2_ppm = (int)(eCO2);
//    }
     if (GPIO_Pin == L1_BUT_Pin)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b10      	cmp	r3, #16
 800152a:	d11b      	bne.n	8001564 <HAL_GPIO_EXTI_Callback+0x48>
    {
        while(HAL_GPIO_ReadPin(L1_BUT_GPIO_Port,L1_BUT_Pin)==0)
 800152c:	bf00      	nop
 800152e:	2110      	movs	r1, #16
 8001530:	482d      	ldr	r0, [pc, #180]	@ (80015e8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001532:	f001 ff73 	bl	800341c <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f8      	beq.n	800152e <HAL_GPIO_EXTI_Callback+0x12>
           {};
     l1_state = 1;
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_GPIO_EXTI_Callback+0xd0>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
     l2_state = 0;
 8001542:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
     l3_state = 0;
 8001548:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
     at_state = 0;
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 8001554:	210c      	movs	r1, #12
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fd1e 	bl	8000f98 <lcd_put_cur>
	lcd_send_string ("HAND");
 800155c:	4827      	ldr	r0, [pc, #156]	@ (80015fc <HAL_GPIO_EXTI_Callback+0xe0>)
 800155e:	f7ff fd77 	bl	8001050 <lcd_send_string>
     l3_state = 1;
     at_state = 0;
	lcd_put_cur(1, 12);
	lcd_send_string ("HAND");
    }
}
 8001562:	e03c      	b.n	80015de <HAL_GPIO_EXTI_Callback+0xc2>
    else if (GPIO_Pin == L2_BUT_Pin)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d11b      	bne.n	80015a2 <HAL_GPIO_EXTI_Callback+0x86>
      while(HAL_GPIO_ReadPin(L2_BUT_GPIO_Port,L2_BUT_Pin)==0)
 800156a:	bf00      	nop
 800156c:	2102      	movs	r1, #2
 800156e:	4824      	ldr	r0, [pc, #144]	@ (8001600 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001570:	f001 ff54 	bl	800341c <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f8      	beq.n	800156c <HAL_GPIO_EXTI_Callback+0x50>
     l1_state = 0;
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_GPIO_EXTI_Callback+0xd0>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
     l2_state = 1;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
     l3_state = 0;
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
     at_state = 0;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 8001592:	210c      	movs	r1, #12
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff fcff 	bl	8000f98 <lcd_put_cur>
	lcd_send_string ("HAND");
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <HAL_GPIO_EXTI_Callback+0xe0>)
 800159c:	f7ff fd58 	bl	8001050 <lcd_send_string>
}
 80015a0:	e01d      	b.n	80015de <HAL_GPIO_EXTI_Callback+0xc2>
    else if (GPIO_Pin == L3_BUT_Pin)
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d11a      	bne.n	80015de <HAL_GPIO_EXTI_Callback+0xc2>
     while(HAL_GPIO_ReadPin(L3_BUT_GPIO_Port,L3_BUT_Pin)==0)
 80015a8:	bf00      	nop
 80015aa:	2101      	movs	r1, #1
 80015ac:	4814      	ldr	r0, [pc, #80]	@ (8001600 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015ae:	f001 ff35 	bl	800341c <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f8      	beq.n	80015aa <HAL_GPIO_EXTI_Callback+0x8e>
     l1_state = 0;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <HAL_GPIO_EXTI_Callback+0xd0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
     l2_state = 0;
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
     l3_state = 1;
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_GPIO_EXTI_Callback+0xd8>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
     at_state = 0;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 80015d0:	210c      	movs	r1, #12
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fce0 	bl	8000f98 <lcd_put_cur>
	lcd_send_string ("HAND");
 80015d8:	4808      	ldr	r0, [pc, #32]	@ (80015fc <HAL_GPIO_EXTI_Callback+0xe0>)
 80015da:	f7ff fd39 	bl	8001050 <lcd_send_string>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40010800 	.word	0x40010800
 80015ec:	20000280 	.word	0x20000280
 80015f0:	20000284 	.word	0x20000284
 80015f4:	20000288 	.word	0x20000288
 80015f8:	20000004 	.word	0x20000004
 80015fc:	08008bf4 	.word	0x08008bf4
 8001600:	40010c00 	.word	0x40010c00

08001604 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b08c      	sub	sp, #48	@ 0x30
 8001608:	af04      	add	r7, sp, #16
 800160a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a50      	ldr	r2, [pc, #320]	@ (8001754 <HAL_UART_RxCpltCallback+0x150>)
 8001612:	4293      	cmp	r3, r2
 8001614:	f040 8099 	bne.w	800174a <HAL_UART_RxCpltCallback+0x146>
        if (RS_rxBuffer[0] == myID)
 8001618:	4b4f      	ldr	r3, [pc, #316]	@ (8001758 <HAL_UART_RxCpltCallback+0x154>)
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	4b4f      	ldr	r3, [pc, #316]	@ (800175c <HAL_UART_RxCpltCallback+0x158>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d14a      	bne.n	80016ba <HAL_UART_RxCpltCallback+0xb6>
        { // Kiểm tra địa chỉ
            // Xử lý lệnh
        	connect_error_flag=0;
 8001624:	4b4e      	ldr	r3, [pc, #312]	@ (8001760 <HAL_UART_RxCpltCallback+0x15c>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
            if (RS_rxBuffer[1] == 0x02)
 800162a:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <HAL_UART_RxCpltCallback+0x154>)
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d126      	bne.n	8001680 <HAL_UART_RxCpltCallback+0x7c>
            {
            	get_time();
 8001632:	f7ff fd51 	bl	80010d8 <get_time>
                // Gửi phản hồi
                RS_txBuffer[0] = myID;
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <HAL_UART_RxCpltCallback+0x158>)
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <HAL_UART_RxCpltCallback+0x160>)
 800163c:	701a      	strb	r2, [r3, #0]
                RS_txBuffer[1] = 0x02;
 800163e:	4b49      	ldr	r3, [pc, #292]	@ (8001764 <HAL_UART_RxCpltCallback+0x160>)
 8001640:	2202      	movs	r2, #2
 8001642:	705a      	strb	r2, [r3, #1]
        		sprintf((char *)(RS_txBuffer+2), "%02d%02d%02d%5d%5d", gTime.Hours, gTime.Minutes, gTime.Seconds , CO_ppm, CO2_ppm);
 8001644:	4848      	ldr	r0, [pc, #288]	@ (8001768 <HAL_UART_RxCpltCallback+0x164>)
 8001646:	4b49      	ldr	r3, [pc, #292]	@ (800176c <HAL_UART_RxCpltCallback+0x168>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461c      	mov	r4, r3
 800164c:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_UART_RxCpltCallback+0x168>)
 800164e:	785b      	ldrb	r3, [r3, #1]
 8001650:	461d      	mov	r5, r3
 8001652:	4b46      	ldr	r3, [pc, #280]	@ (800176c <HAL_UART_RxCpltCallback+0x168>)
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	4619      	mov	r1, r3
 8001658:	4b45      	ldr	r3, [pc, #276]	@ (8001770 <HAL_UART_RxCpltCallback+0x16c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a45      	ldr	r2, [pc, #276]	@ (8001774 <HAL_UART_RxCpltCallback+0x170>)
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	9202      	str	r2, [sp, #8]
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	9100      	str	r1, [sp, #0]
 8001666:	462b      	mov	r3, r5
 8001668:	4622      	mov	r2, r4
 800166a:	4943      	ldr	r1, [pc, #268]	@ (8001778 <HAL_UART_RxCpltCallback+0x174>)
 800166c:	f005 fe72 	bl	8007354 <siprintf>
                HAL_UART_Transmit(&huart1, RS_txBuffer, 20, HAL_MAX_DELAY);
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	2214      	movs	r2, #20
 8001676:	493b      	ldr	r1, [pc, #236]	@ (8001764 <HAL_UART_RxCpltCallback+0x160>)
 8001678:	4840      	ldr	r0, [pc, #256]	@ (800177c <HAL_UART_RxCpltCallback+0x178>)
 800167a:	f004 ffc9 	bl	8006610 <HAL_UART_Transmit>
 800167e:	e05f      	b.n	8001740 <HAL_UART_RxCpltCallback+0x13c>
            }
            else if(RS_rxBuffer[1] == 0x03)
 8001680:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_UART_RxCpltCallback+0x154>)
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d103      	bne.n	8001690 <HAL_UART_RxCpltCallback+0x8c>
            {
            	send_full=1;
 8001688:	4b3d      	ldr	r3, [pc, #244]	@ (8001780 <HAL_UART_RxCpltCallback+0x17c>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e057      	b.n	8001740 <HAL_UART_RxCpltCallback+0x13c>
            }
            else if(RS_rxBuffer[1] == 0xFF) // nhận lại oke
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_UART_RxCpltCallback+0x154>)
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	2bff      	cmp	r3, #255	@ 0xff
 8001696:	d103      	bne.n	80016a0 <HAL_UART_RxCpltCallback+0x9c>
			{
            	send_full=0;
 8001698:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <HAL_UART_RxCpltCallback+0x17c>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e04f      	b.n	8001740 <HAL_UART_RxCpltCallback+0x13c>
			}
            else if(RS_rxBuffer[1] == 0xEE) // nhan duoc lenh nhan xong 1 chuoi ( trong nhieu chuoi)
 80016a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <HAL_UART_RxCpltCallback+0x154>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	2bee      	cmp	r3, #238	@ 0xee
 80016a6:	d14b      	bne.n	8001740 <HAL_UART_RxCpltCallback+0x13c>
            {
            	sent_full=0;
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_UART_RxCpltCallback+0x180>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
            	send_inx++;
 80016ae:	4b36      	ldr	r3, [pc, #216]	@ (8001788 <HAL_UART_RxCpltCallback+0x184>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a34      	ldr	r2, [pc, #208]	@ (8001788 <HAL_UART_RxCpltCallback+0x184>)
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e042      	b.n	8001740 <HAL_UART_RxCpltCallback+0x13c>
            }
        }
        else if(RS_rxBuffer[0] == 0x77)
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_UART_RxCpltCallback+0x154>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b77      	cmp	r3, #119	@ 0x77
 80016c0:	d13e      	bne.n	8001740 <HAL_UART_RxCpltCallback+0x13c>
        {
        	int h,m,s;
        	char ho[3] = {0};
 80016c2:	4b32      	ldr	r3, [pc, #200]	@ (800178c <HAL_UART_RxCpltCallback+0x188>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	823b      	strh	r3, [r7, #16]
 80016c8:	2300      	movs	r3, #0
 80016ca:	74bb      	strb	r3, [r7, #18]
        	char mi[3] = {0};
 80016cc:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_UART_RxCpltCallback+0x188>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	81bb      	strh	r3, [r7, #12]
 80016d2:	2300      	movs	r3, #0
 80016d4:	73bb      	strb	r3, [r7, #14]
        	char se[3] = {0};
 80016d6:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <HAL_UART_RxCpltCallback+0x188>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	813b      	strh	r3, [r7, #8]
 80016dc:	2300      	movs	r3, #0
 80016de:	72bb      	strb	r3, [r7, #10]

        	strncpy(ho, (char*)&RS_rxBuffer[1], 2);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2202      	movs	r2, #2
 80016e6:	492a      	ldr	r1, [pc, #168]	@ (8001790 <HAL_UART_RxCpltCallback+0x18c>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 fe5b 	bl	80073a4 <strncpy>
        	strncpy(mi, (char*)&RS_rxBuffer[3], 2);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2202      	movs	r2, #2
 80016f4:	4927      	ldr	r1, [pc, #156]	@ (8001794 <HAL_UART_RxCpltCallback+0x190>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 fe54 	bl	80073a4 <strncpy>
        	strncpy(se, (char*)&RS_rxBuffer[5], 2);
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	2202      	movs	r2, #2
 8001702:	4925      	ldr	r1, [pc, #148]	@ (8001798 <HAL_UART_RxCpltCallback+0x194>)
 8001704:	4618      	mov	r0, r3
 8001706:	f005 fe4d 	bl	80073a4 <strncpy>

        	h= atoi(ho);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f005 fd98 	bl	8007244 <atoi>
 8001714:	61f8      	str	r0, [r7, #28]
        	m=atoi(mi);
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	4618      	mov	r0, r3
 800171c:	f005 fd92 	bl	8007244 <atoi>
 8001720:	61b8      	str	r0, [r7, #24]
        	s=atoi(se);
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fd8c 	bl	8007244 <atoi>
 800172c:	6178      	str	r0, [r7, #20]
        	set_time((uint8_t)h,(uint8_t) m ,(uint8_t)s);
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	b2d1      	uxtb	r1, r2
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fc9e 	bl	800107c <set_time>
        }
        // Tiếp tục nhận
        HAL_UART_Receive_IT(&huart1, RS_rxBuffer, 10);
 8001740:	220a      	movs	r2, #10
 8001742:	4905      	ldr	r1, [pc, #20]	@ (8001758 <HAL_UART_RxCpltCallback+0x154>)
 8001744:	480d      	ldr	r0, [pc, #52]	@ (800177c <HAL_UART_RxCpltCallback+0x178>)
 8001746:	f004 ffee 	bl	8006726 <HAL_UART_Receive_IT>
    }
}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bdb0      	pop	{r4, r5, r7, pc}
 8001752:	bf00      	nop
 8001754:	40013800 	.word	0x40013800
 8001758:	20000258 	.word	0x20000258
 800175c:	20000000 	.word	0x20000000
 8001760:	200002b8 	.word	0x200002b8
 8001764:	2000026c 	.word	0x2000026c
 8001768:	2000026e 	.word	0x2000026e
 800176c:	20000a90 	.word	0x20000a90
 8001770:	2000029c 	.word	0x2000029c
 8001774:	20000290 	.word	0x20000290
 8001778:	08008bb0 	.word	0x08008bb0
 800177c:	20000210 	.word	0x20000210
 8001780:	200002b0 	.word	0x200002b0
 8001784:	200002b4 	.word	0x200002b4
 8001788:	200002ac 	.word	0x200002ac
 800178c:	08008bfc 	.word	0x08008bfc
 8001790:	20000259 	.word	0x20000259
 8001794:	2000025b 	.word	0x2000025b
 8001798:	2000025d 	.word	0x2000025d

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f000 fe74 	bl	800248c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f8d8 	bl	8001958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f000 fab8 	bl	8001d1c <MX_GPIO_Init>
  MX_ADC1_Init();
 80017ac:	f000 f930 	bl	8001a10 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017b0:	f000 f96c 	bl	8001a8c <MX_I2C1_Init>
  MX_I2C2_Init();
 80017b4:	f000 f998 	bl	8001ae8 <MX_I2C2_Init>
  MX_TIM2_Init();
 80017b8:	f000 f9ea 	bl	8001b90 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017bc:	f000 fa84 	bl	8001cc8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80017c0:	f000 f9c0 	bl	8001b44 <MX_RTC_Init>
  MX_TIM3_Init();
 80017c4:	f000 fa32 	bl	8001c2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //while(!CCS811_CheckHW_ID());
  CCS811_Init();
 80017c8:	f7ff fb08 	bl	8000ddc <CCS811_Init>
  CCS811_Set_Mode(CCS811_MODE_1SEC);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff fb3f 	bl	8000e50 <CCS811_Set_Mode>
  CCS811_EnableInt();
 80017d2:	f7ff fb6b 	bl	8000eac <CCS811_EnableInt>
  //uint16_t baseline = CCS811_GetBaseline();
  lcd_init();
 80017d6:	f7ff fbfe 	bl	8000fd6 <lcd_init>
  lcd_put_cur(0, 0);
 80017da:	2100      	movs	r1, #0
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff fbdb 	bl	8000f98 <lcd_put_cur>
  lcd_send_string ("CO2:");
 80017e2:	484a      	ldr	r0, [pc, #296]	@ (800190c <main+0x170>)
 80017e4:	f7ff fc34 	bl	8001050 <lcd_send_string>
  lcd_put_cur(0, 8);
 80017e8:	2108      	movs	r1, #8
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fbd4 	bl	8000f98 <lcd_put_cur>
  lcd_send_string ("ppm|");
 80017f0:	4847      	ldr	r0, [pc, #284]	@ (8001910 <main+0x174>)
 80017f2:	f7ff fc2d 	bl	8001050 <lcd_send_string>
  lcd_put_cur(0, 12);
 80017f6:	210c      	movs	r1, #12
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fbcd 	bl	8000f98 <lcd_put_cur>
  lcd_send_string ("MODE");
 80017fe:	4845      	ldr	r0, [pc, #276]	@ (8001914 <main+0x178>)
 8001800:	f7ff fc26 	bl	8001050 <lcd_send_string>
  lcd_put_cur(1, 0);
 8001804:	2100      	movs	r1, #0
 8001806:	2001      	movs	r0, #1
 8001808:	f7ff fbc6 	bl	8000f98 <lcd_put_cur>
  lcd_send_string("CO :");
 800180c:	4842      	ldr	r0, [pc, #264]	@ (8001918 <main+0x17c>)
 800180e:	f7ff fc1f 	bl	8001050 <lcd_send_string>
  lcd_put_cur(1, 8);
 8001812:	2108      	movs	r1, #8
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fbbf 	bl	8000f98 <lcd_put_cur>
  lcd_send_string ("ppm|");
 800181a:	483d      	ldr	r0, [pc, #244]	@ (8001910 <main+0x174>)
 800181c:	f7ff fc18 	bl	8001050 <lcd_send_string>
  lcd_put_cur(1, 12);
 8001820:	210c      	movs	r1, #12
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff fbb8 	bl	8000f98 <lcd_put_cur>
  lcd_send_string ("AUTO");
 8001828:	483c      	ldr	r0, [pc, #240]	@ (800191c <main+0x180>)
 800182a:	f7ff fc11 	bl	8001050 <lcd_send_string>

  HAL_TIM_Base_Start_IT(&htim2);
 800182e:	483c      	ldr	r0, [pc, #240]	@ (8001920 <main+0x184>)
 8001830:	f004 face 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001834:	483b      	ldr	r0, [pc, #236]	@ (8001924 <main+0x188>)
 8001836:	f004 facb 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, RS_rxBuffer, 10);
 800183a:	220a      	movs	r2, #10
 800183c:	493a      	ldr	r1, [pc, #232]	@ (8001928 <main+0x18c>)
 800183e:	483b      	ldr	r0, [pc, #236]	@ (800192c <main+0x190>)
 8001840:	f004 ff71 	bl	8006726 <HAL_UART_Receive_IT>

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2345)
 8001844:	2101      	movs	r1, #1
 8001846:	483a      	ldr	r0, [pc, #232]	@ (8001930 <main+0x194>)
 8001848:	f004 fa56 	bl	8005cf8 <HAL_RTCEx_BKUPRead>
 800184c:	4603      	mov	r3, r0
 800184e:	f242 3245 	movw	r2, #9029	@ 0x2345
 8001852:	4293      	cmp	r3, r2
 8001854:	d004      	beq.n	8001860 <main+0xc4>
  {
	  set_time(12, 50, 50);
 8001856:	2232      	movs	r2, #50	@ 0x32
 8001858:	2132      	movs	r1, #50	@ 0x32
 800185a:	200c      	movs	r0, #12
 800185c:	f7ff fc0e 	bl	800107c <set_time>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		  // khi tắt chế độ tự động
	  if(at_state==0)
 8001860:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <main+0x198>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <main+0xd0>
	 {
	  Manual_Warning();
 8001868:	f7ff fcbe 	bl	80011e8 <Manual_Warning>
//		 miss_inx=connect_error_flag-2;
//		 get_time();
//		sprintf(string_data[miss_inx], "%02d%02d%02d%5d%5d", gTime.Hours, gTime.Minutes, gTime.Seconds , CO_ppm, CO2_ppm);
//		save_ok=1;
//	 }
	 if(send_full==1 && sent_full==0)
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <main+0x19c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d1f5      	bne.n	8001860 <main+0xc4>
 8001874:	4b31      	ldr	r3, [pc, #196]	@ (800193c <main+0x1a0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f1      	bne.n	8001860 <main+0xc4>
	 {
		 while(send_inx<miss_inx)
 800187c:	e01c      	b.n	80018b8 <main+0x11c>
		 {
		 RS_txBuffer[0] = myID;
 800187e:	4b30      	ldr	r3, [pc, #192]	@ (8001940 <main+0x1a4>)
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <main+0x1a8>)
 8001884:	701a      	strb	r2, [r3, #0]
		 RS_txBuffer[1] = 0x03;
 8001886:	4b2f      	ldr	r3, [pc, #188]	@ (8001944 <main+0x1a8>)
 8001888:	2203      	movs	r2, #3
 800188a:	705a      	strb	r2, [r3, #1]
		 strcpy((char *)(RS_txBuffer+2),string_data[send_inx]);
 800188c:	482e      	ldr	r0, [pc, #184]	@ (8001948 <main+0x1ac>)
 800188e:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <main+0x1b0>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4a2d      	ldr	r2, [pc, #180]	@ (8001950 <main+0x1b4>)
 800189c:	4413      	add	r3, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f005 fdc0 	bl	8007424 <strcpy>
		 HAL_UART_Transmit(&huart1, RS_txBuffer, 20, HAL_MAX_DELAY);
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	2214      	movs	r2, #20
 80018aa:	4926      	ldr	r1, [pc, #152]	@ (8001944 <main+0x1a8>)
 80018ac:	481f      	ldr	r0, [pc, #124]	@ (800192c <main+0x190>)
 80018ae:	f004 feaf 	bl	8006610 <HAL_UART_Transmit>
		 sent_full=1; // da gui xong lan nay phai doi node tong giai ma xong roi moi gui tiep
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <main+0x1a0>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
		 while(send_inx<miss_inx)
 80018b8:	4b24      	ldr	r3, [pc, #144]	@ (800194c <main+0x1b0>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <main+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbdc      	blt.n	800187e <main+0xe2>
		 }
		 if(send_inx==miss_inx)
 80018c4:	4b21      	ldr	r3, [pc, #132]	@ (800194c <main+0x1b0>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <main+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1c7      	bne.n	8001860 <main+0xc4>
		 {
		 RS_txBuffer[0] = myID;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <main+0x1a4>)
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <main+0x1a8>)
 80018d6:	701a      	strb	r2, [r3, #0]
		 RS_txBuffer[1] = 0x02;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <main+0x1a8>)
 80018da:	2202      	movs	r2, #2
 80018dc:	705a      	strb	r2, [r3, #1]
		 strcpy((char *)(RS_txBuffer+2),string_data[send_inx]);
 80018de:	481a      	ldr	r0, [pc, #104]	@ (8001948 <main+0x1ac>)
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <main+0x1b0>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4a18      	ldr	r2, [pc, #96]	@ (8001950 <main+0x1b4>)
 80018ee:	4413      	add	r3, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f005 fd97 	bl	8007424 <strcpy>
		 HAL_UART_Transmit(&huart1, RS_txBuffer, 20, HAL_MAX_DELAY);
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	2214      	movs	r2, #20
 80018fc:	4911      	ldr	r1, [pc, #68]	@ (8001944 <main+0x1a8>)
 80018fe:	480b      	ldr	r0, [pc, #44]	@ (800192c <main+0x190>)
 8001900:	f004 fe86 	bl	8006610 <HAL_UART_Transmit>
		 sent_full=1; // da gui xong lan nay phai doi node tong giai ma xong roi moi gui tiep
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <main+0x1a0>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
	  if(at_state==0)
 800190a:	e7a9      	b.n	8001860 <main+0xc4>
 800190c:	08008c00 	.word	0x08008c00
 8001910:	08008c08 	.word	0x08008c08
 8001914:	08008c10 	.word	0x08008c10
 8001918:	08008c18 	.word	0x08008c18
 800191c:	08008c20 	.word	0x08008c20
 8001920:	20000180 	.word	0x20000180
 8001924:	200001c8 	.word	0x200001c8
 8001928:	20000258 	.word	0x20000258
 800192c:	20000210 	.word	0x20000210
 8001930:	2000016c 	.word	0x2000016c
 8001934:	20000004 	.word	0x20000004
 8001938:	200002b0 	.word	0x200002b0
 800193c:	200002b4 	.word	0x200002b4
 8001940:	20000000 	.word	0x20000000
 8001944:	2000026c 	.word	0x2000026c
 8001948:	2000026e 	.word	0x2000026e
 800194c:	200002ac 	.word	0x200002ac
 8001950:	200002c0 	.word	0x200002c0
 8001954:	200002a8 	.word	0x200002a8

08001958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b094      	sub	sp, #80	@ 0x50
 800195c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001962:	2228      	movs	r2, #40	@ 0x28
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f005 fd14 	bl	8007394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001988:	2301      	movs	r3, #1
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800198c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001996:	2301      	movs	r3, #1
 8001998:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199a:	2302      	movs	r3, #2
 800199c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800199e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80019a4:	2300      	movs	r3, #0
 80019a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 ff6f 	bl	8004890 <HAL_RCC_OscConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80019b8:	f000 fa6c 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019bc:	230f      	movs	r3, #15
 80019be:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f9dc 	bl	8004d94 <HAL_RCC_ClockConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80019e2:	f000 fa57 	bl	8001e94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80019e6:	2303      	movs	r3, #3
 80019e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 80019ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fb5a 	bl	80050b0 <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a02:	f000 fa47 	bl	8001e94 <Error_Handler>
  }
}
 8001a06:	bf00      	nop
 8001a08:	3750      	adds	r7, #80	@ 0x50
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a22:	4a19      	ldr	r2, [pc, #100]	@ (8001a88 <MX_ADC1_Init+0x78>)
 8001a24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a26:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a3a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a40:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a4c:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a4e:	f000 fda3 	bl	8002598 <HAL_ADC_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a58:	f000 fa1c 	bl	8001e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a64:	2307      	movs	r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_ADC1_Init+0x74>)
 8001a6e:	f000 fff5 	bl	8002a5c <HAL_ADC_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a78:	f000 fa0c 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000094 	.word	0x20000094
 8001a88:	40012400 	.word	0x40012400

08001a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001a92:	4a13      	ldr	r2, [pc, #76]	@ (8001ae0 <MX_I2C1_Init+0x54>)
 8001a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001a98:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <MX_I2C1_Init+0x58>)
 8001a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac8:	4804      	ldr	r0, [pc, #16]	@ (8001adc <MX_I2C1_Init+0x50>)
 8001aca:	f001 fcef 	bl	80034ac <HAL_I2C_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad4:	f000 f9de 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200000c4 	.word	0x200000c4
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	000186a0 	.word	0x000186a0

08001ae8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001aee:	4a13      	ldr	r2, [pc, #76]	@ (8001b3c <MX_I2C2_Init+0x54>)
 8001af0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001af4:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <MX_I2C2_Init+0x58>)
 8001af6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b18:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b24:	4804      	ldr	r0, [pc, #16]	@ (8001b38 <MX_I2C2_Init+0x50>)
 8001b26:	f001 fcc1 	bl	80034ac <HAL_I2C_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b30:	f000 f9b0 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000118 	.word	0x20000118
 8001b3c:	40005800 	.word	0x40005800
 8001b40:	000186a0 	.word	0x000186a0

08001b44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	460a      	mov	r2, r1
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	460a      	mov	r2, r1
 8001b54:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <MX_RTC_Init+0x44>)
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b8c <MX_RTC_Init+0x48>)
 8001b5e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <MX_RTC_Init+0x44>)
 8001b62:	f04f 32ff 	mov.w	r2, #4294967295
 8001b66:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <MX_RTC_Init+0x44>)
 8001b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b6e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <MX_RTC_Init+0x44>)
 8001b72:	f003 fc09 	bl	8005388 <HAL_RTC_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001b7c:	f000 f98a 	bl	8001e94 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000016c 	.word	0x2000016c
 8001b8c:	40002800 	.word	0x40002800

08001b90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001bae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001bb6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001bba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001bc4:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001bc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd6:	4814      	ldr	r0, [pc, #80]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001bd8:	f004 f8aa 	bl	8005d30 <HAL_TIM_Base_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001be2:	f000 f957 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001bf4:	f004 fa5c 	bl	80060b0 <HAL_TIM_ConfigClockSource>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bfe:	f000 f949 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	@ (8001c28 <MX_TIM2_Init+0x98>)
 8001c10:	f004 fc3e 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c1a:	f000 f93b 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000180 	.word	0x20000180

08001c2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <MX_TIM3_Init+0x98>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001c50:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001c54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001c5e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001c62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c70:	4813      	ldr	r0, [pc, #76]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001c72:	f004 f85d 	bl	8005d30 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c7c:	f000 f90a 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001c8e:	f004 fa0f 	bl	80060b0 <HAL_TIM_ConfigClockSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001c98:	f000 f8fc 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_TIM3_Init+0x94>)
 8001caa:	f004 fbf1 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001cb4:	f000 f8ee 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200001c8 	.word	0x200001c8
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <MX_USART1_UART_Init+0x50>)
 8001cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cec:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cee:	220c      	movs	r2, #12
 8001cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f004 fc36 	bl	8006570 <HAL_UART_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d0a:	f000 f8c3 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000210 	.word	0x20000210
 8001d18:	40013800 	.word	0x40013800

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d30:	4b54      	ldr	r3, [pc, #336]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a53      	ldr	r2, [pc, #332]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d36:	f043 0320 	orr.w	r3, r3, #32
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b51      	ldr	r3, [pc, #324]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b4e      	ldr	r3, [pc, #312]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b4b      	ldr	r3, [pc, #300]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b48      	ldr	r3, [pc, #288]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a47      	ldr	r2, [pc, #284]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b45      	ldr	r3, [pc, #276]	@ (8001e84 <MX_GPIO_Init+0x168>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZ_Pin|RL3_Pin|RL2_Pin|RL1_Pin, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	21e2      	movs	r1, #226	@ 0xe2
 8001d7c:	4842      	ldr	r0, [pc, #264]	@ (8001e88 <MX_GPIO_Init+0x16c>)
 8001d7e:	f001 fb64 	bl	800344a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin, GPIO_PIN_SET);
 8001d82:	2201      	movs	r2, #1
 8001d84:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001d88:	4840      	ldr	r0, [pc, #256]	@ (8001e8c <MX_GPIO_Init+0x170>)
 8001d8a:	f001 fb5e 	bl	800344a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CCS_RST_GPIO_Port, CCS_RST_Pin, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d94:	483c      	ldr	r0, [pc, #240]	@ (8001e88 <MX_GPIO_Init+0x16c>)
 8001d96:	f001 fb58 	bl	800344a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZ_Pin RL3_Pin RL2_Pin RL1_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin|RL3_Pin|RL2_Pin|RL1_Pin;
 8001d9a:	23e2      	movs	r3, #226	@ 0xe2
 8001d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	4619      	mov	r1, r3
 8001db0:	4835      	ldr	r0, [pc, #212]	@ (8001e88 <MX_GPIO_Init+0x16c>)
 8001db2:	f001 f9af 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : L1_BUT_Pin */
  GPIO_InitStruct.Pin = L1_BUT_Pin;
 8001db6:	2310      	movs	r3, #16
 8001db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dba:	4b35      	ldr	r3, [pc, #212]	@ (8001e90 <MX_GPIO_Init+0x174>)
 8001dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L1_BUT_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	482f      	ldr	r0, [pc, #188]	@ (8001e88 <MX_GPIO_Init+0x16c>)
 8001dca:	f001 f9a3 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : L3_BUT_Pin L2_BUT_Pin */
  GPIO_InitStruct.Pin = L3_BUT_Pin|L2_BUT_Pin;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e90 <MX_GPIO_Init+0x174>)
 8001dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	482a      	ldr	r0, [pc, #168]	@ (8001e8c <MX_GPIO_Init+0x170>)
 8001de2:	f001 f997 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin;
 8001de6:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4823      	ldr	r0, [pc, #140]	@ (8001e8c <MX_GPIO_Init+0x170>)
 8001e00:	f001 f988 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : CCS_RST_Pin */
  GPIO_InitStruct.Pin = CCS_RST_Pin;
 8001e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CCS_RST_GPIO_Port, &GPIO_InitStruct);
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481a      	ldr	r0, [pc, #104]	@ (8001e88 <MX_GPIO_Init+0x16c>)
 8001e1e:	f001 f979 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : CCS811_INT_Pin */
  GPIO_InitStruct.Pin = CCS811_INT_Pin;
 8001e22:	2308      	movs	r3, #8
 8001e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_GPIO_Init+0x174>)
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CCS811_INT_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	4619      	mov	r1, r3
 8001e34:	4815      	ldr	r0, [pc, #84]	@ (8001e8c <MX_GPIO_Init+0x170>)
 8001e36:	f001 f96d 	bl	8003114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	2006      	movs	r0, #6
 8001e40:	f001 f87f 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e44:	2006      	movs	r0, #6
 8001e46:	f001 f898 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	2007      	movs	r0, #7
 8001e50:	f001 f877 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e54:	2007      	movs	r0, #7
 8001e56:	f001 f890 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	2009      	movs	r0, #9
 8001e60:	f001 f86f 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e64:	2009      	movs	r0, #9
 8001e66:	f001 f888 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	200a      	movs	r0, #10
 8001e70:	f001 f867 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e74:	200a      	movs	r0, #10
 8001e76:	f001 f880 	bl	8002f7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e7a:	bf00      	nop
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	10210000 	.word	0x10210000

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <Error_Handler+0x8>

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_MspInit+0x5c>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <HAL_MspInit+0x5c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <HAL_MspInit+0x5c>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <HAL_MspInit+0x5c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <HAL_MspInit+0x5c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <HAL_MspInit+0x5c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_MspInit+0x60>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <HAL_MspInit+0x60>)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000

08001f04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a18      	ldr	r2, [pc, #96]	@ (8001f80 <HAL_ADC_MspInit+0x7c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d129      	bne.n	8001f78 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f24:	4b17      	ldr	r3, [pc, #92]	@ (8001f84 <HAL_ADC_MspInit+0x80>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a16      	ldr	r2, [pc, #88]	@ (8001f84 <HAL_ADC_MspInit+0x80>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_ADC_MspInit+0x80>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_ADC_MspInit+0x80>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a10      	ldr	r2, [pc, #64]	@ (8001f84 <HAL_ADC_MspInit+0x80>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_ADC_MspInit+0x80>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	4809      	ldr	r0, [pc, #36]	@ (8001f88 <HAL_ADC_MspInit+0x84>)
 8001f64:	f001 f8d6 	bl	8003114 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2105      	movs	r1, #5
 8001f6c:	2012      	movs	r0, #18
 8001f6e:	f000 ffe8 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f72:	2012      	movs	r0, #18
 8001f74:	f001 f801 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40012400 	.word	0x40012400
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010800 	.word	0x40010800

08001f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	@ 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8002054 <HAL_I2C_MspInit+0xc8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d124      	bne.n	8001ff6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a29      	ldr	r2, [pc, #164]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b27      	ldr	r3, [pc, #156]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc4:	23c0      	movs	r3, #192	@ 0xc0
 8001fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc8:	2312      	movs	r3, #18
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4821      	ldr	r0, [pc, #132]	@ (800205c <HAL_I2C_MspInit+0xd0>)
 8001fd8:	f001 f89c 	bl	8003114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8001fe2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ff4:	e029      	b.n	800204a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <HAL_I2C_MspInit+0xd4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d124      	bne.n	800204a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002018:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201e:	2312      	movs	r3, #18
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0318 	add.w	r3, r7, #24
 800202a:	4619      	mov	r1, r3
 800202c:	480b      	ldr	r0, [pc, #44]	@ (800205c <HAL_I2C_MspInit+0xd0>)
 800202e:	f001 f871 	bl	8003114 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4a08      	ldr	r2, [pc, #32]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8002038:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800203c:	61d3      	str	r3, [r2, #28]
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_I2C_MspInit+0xcc>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	@ 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40005400 	.word	0x40005400
 8002058:	40021000 	.word	0x40021000
 800205c:	40010c00 	.word	0x40010c00
 8002060:	40005800 	.word	0x40005800

08002064 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0b      	ldr	r2, [pc, #44]	@ (80020a0 <HAL_RTC_MspInit+0x3c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d110      	bne.n	8002098 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002076:	f002 fbff 	bl	8004878 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800207a:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_RTC_MspInit+0x40>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <HAL_RTC_MspInit+0x40>)
 8002080:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002084:	61d3      	str	r3, [r2, #28]
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <HAL_RTC_MspInit+0x40>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002092:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <HAL_RTC_MspInit+0x44>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40002800 	.word	0x40002800
 80020a4:	40021000 	.word	0x40021000
 80020a8:	4242043c 	.word	0x4242043c

080020ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020bc:	d114      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020be:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a18      	ldr	r2, [pc, #96]	@ (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2104      	movs	r1, #4
 80020da:	201c      	movs	r0, #28
 80020dc:	f000 ff31 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e0:	201c      	movs	r0, #28
 80020e2:	f000 ff4a 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020e6:	e018      	b.n	800211a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002128 <HAL_TIM_Base_MspInit+0x7c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d113      	bne.n	800211a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_TIM_Base_MspInit+0x78>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2106      	movs	r1, #6
 800210e:	201d      	movs	r0, #29
 8002110:	f000 ff17 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002114:	201d      	movs	r0, #29
 8002116:	f000 ff30 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40000400 	.word	0x40000400

0800212c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a20      	ldr	r2, [pc, #128]	@ (80021c8 <HAL_UART_MspInit+0x9c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d139      	bne.n	80021c0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800214c:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <HAL_UART_MspInit+0xa0>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a1e      	ldr	r2, [pc, #120]	@ (80021cc <HAL_UART_MspInit+0xa0>)
 8002152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_UART_MspInit+0xa0>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_UART_MspInit+0xa0>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a18      	ldr	r2, [pc, #96]	@ (80021cc <HAL_UART_MspInit+0xa0>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <HAL_UART_MspInit+0xa0>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800217c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	4619      	mov	r1, r3
 8002190:	480f      	ldr	r0, [pc, #60]	@ (80021d0 <HAL_UART_MspInit+0xa4>)
 8002192:	f000 ffbf 	bl	8003114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800219a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4619      	mov	r1, r3
 80021aa:	4809      	ldr	r0, [pc, #36]	@ (80021d0 <HAL_UART_MspInit+0xa4>)
 80021ac:	f000 ffb2 	bl	8003114 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2025      	movs	r0, #37	@ 0x25
 80021b6:	f000 fec4 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ba:	2025      	movs	r0, #37	@ 0x25
 80021bc:	f000 fedd 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80021c0:	bf00      	nop
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010800 	.word	0x40010800

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <NMI_Handler+0x4>

080021dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <MemManage_Handler+0x4>

080021ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <BusFault_Handler+0x4>

080021f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <UsageFault_Handler+0x4>

080021fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002224:	f000 f978 	bl	8002518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L3_BUT_Pin);
 8002230:	2001      	movs	r0, #1
 8002232:	f001 f923 	bl	800347c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}

0800223a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L2_BUT_Pin);
 800223e:	2002      	movs	r0, #2
 8002240:	f001 f91c 	bl	800347c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CCS811_INT_Pin);
 800224c:	2008      	movs	r0, #8
 800224e:	f001 f915 	bl	800347c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}

08002256 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L1_BUT_Pin);
 800225a:	2010      	movs	r0, #16
 800225c:	f001 f90e 	bl	800347c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002268:	4802      	ldr	r0, [pc, #8]	@ (8002274 <ADC1_2_IRQHandler+0x10>)
 800226a:	f000 fb2f 	bl	80028cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000094 	.word	0x20000094

08002278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <TIM2_IRQHandler+0x10>)
 800227e:	f003 fe27 	bl	8005ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000180 	.word	0x20000180

0800228c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <TIM3_IRQHandler+0x10>)
 8002292:	f003 fe1d 	bl	8005ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200001c8 	.word	0x200001c8

080022a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a4:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <USART1_IRQHandler+0x10>)
 80022a6:	f004 fa63 	bl	8006770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000210 	.word	0x20000210

080022b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022bc:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <_sbrk+0x5c>)
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <_sbrk+0x60>)
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <_sbrk+0x64>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	@ (800231c <_sbrk+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d207      	bcs.n	80022f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e4:	f005 f872 	bl	80073cc <__errno>
 80022e8:	4603      	mov	r3, r0
 80022ea:	220c      	movs	r2, #12
 80022ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e009      	b.n	8002308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a05      	ldr	r2, [pc, #20]	@ (8002318 <_sbrk+0x64>)
 8002304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20005000 	.word	0x20005000
 8002314:	00000400 	.word	0x00000400
 8002318:	20000a94 	.word	0x20000a94
 800231c:	20000be8 	.word	0x20000be8

08002320 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <L2_Warning_On>:

#include "warning.h"


void L2_Warning_On ()
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL1_GPIO_Port,RL1_Pin, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	4812      	ldr	r0, [pc, #72]	@ (8002380 <L2_Warning_On+0x54>)
 8002336:	f001 f888 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL2_GPIO_Port,RL2_Pin, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	2140      	movs	r1, #64	@ 0x40
 800233e:	4810      	ldr	r0, [pc, #64]	@ (8002380 <L2_Warning_On+0x54>)
 8002340:	f001 f883 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL3_GPIO_Port,RL3_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	2120      	movs	r1, #32
 8002348:	480d      	ldr	r0, [pc, #52]	@ (8002380 <L2_Warning_On+0x54>)
 800234a:	f001 f87e 	bl	800344a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002354:	480b      	ldr	r0, [pc, #44]	@ (8002384 <L2_Warning_On+0x58>)
 8002356:	f001 f878 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002360:	4808      	ldr	r0, [pc, #32]	@ (8002384 <L2_Warning_On+0x58>)
 8002362:	f001 f872 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8002366:	2201      	movs	r2, #1
 8002368:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800236c:	4805      	ldr	r0, [pc, #20]	@ (8002384 <L2_Warning_On+0x58>)
 800236e:	f001 f86c 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2102      	movs	r1, #2
 8002376:	4802      	ldr	r0, [pc, #8]	@ (8002380 <L2_Warning_On+0x54>)
 8002378:	f001 f867 	bl	800344a <HAL_GPIO_WritePin>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010800 	.word	0x40010800
 8002384:	40010c00 	.word	0x40010c00

08002388 <L3_Warning_On>:
void L2_Warning_Off()
{
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
}
void L3_Warning_On ()
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL1_GPIO_Port,RL1_Pin, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	2180      	movs	r1, #128	@ 0x80
 8002390:	4812      	ldr	r0, [pc, #72]	@ (80023dc <L3_Warning_On+0x54>)
 8002392:	f001 f85a 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL2_GPIO_Port,RL2_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2140      	movs	r1, #64	@ 0x40
 800239a:	4810      	ldr	r0, [pc, #64]	@ (80023dc <L3_Warning_On+0x54>)
 800239c:	f001 f855 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL3_GPIO_Port,RL3_Pin, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2120      	movs	r1, #32
 80023a4:	480d      	ldr	r0, [pc, #52]	@ (80023dc <L3_Warning_On+0x54>)
 80023a6:	f001 f850 	bl	800344a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 80023aa:	2201      	movs	r2, #1
 80023ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023b0:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <L3_Warning_On+0x58>)
 80023b2:	f001 f84a 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023bc:	4808      	ldr	r0, [pc, #32]	@ (80023e0 <L3_Warning_On+0x58>)
 80023be:	f001 f844 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023c8:	4805      	ldr	r0, [pc, #20]	@ (80023e0 <L3_Warning_On+0x58>)
 80023ca:	f001 f83e 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2102      	movs	r1, #2
 80023d2:	4802      	ldr	r0, [pc, #8]	@ (80023dc <L3_Warning_On+0x54>)
 80023d4:	f001 f839 	bl	800344a <HAL_GPIO_WritePin>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40010800 	.word	0x40010800
 80023e0:	40010c00 	.word	0x40010c00

080023e4 <L1_Warning_On>:
{
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
}
void L1_Warning_On()
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL1_GPIO_Port,RL1_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	4812      	ldr	r0, [pc, #72]	@ (8002438 <L1_Warning_On+0x54>)
 80023ee:	f001 f82c 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL2_GPIO_Port,RL2_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2140      	movs	r1, #64	@ 0x40
 80023f6:	4810      	ldr	r0, [pc, #64]	@ (8002438 <L1_Warning_On+0x54>)
 80023f8:	f001 f827 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL3_GPIO_Port,RL3_Pin, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2120      	movs	r1, #32
 8002400:	480d      	ldr	r0, [pc, #52]	@ (8002438 <L1_Warning_On+0x54>)
 8002402:	f001 f822 	bl	800344a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800240c:	480b      	ldr	r0, [pc, #44]	@ (800243c <L1_Warning_On+0x58>)
 800240e:	f001 f81c 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8002412:	2201      	movs	r2, #1
 8002414:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002418:	4808      	ldr	r0, [pc, #32]	@ (800243c <L1_Warning_On+0x58>)
 800241a:	f001 f816 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 800241e:	2201      	movs	r2, #1
 8002420:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002424:	4805      	ldr	r0, [pc, #20]	@ (800243c <L1_Warning_On+0x58>)
 8002426:	f001 f810 	bl	800344a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2102      	movs	r1, #2
 800242e:	4802      	ldr	r0, [pc, #8]	@ (8002438 <L1_Warning_On+0x54>)
 8002430:	f001 f80b 	bl	800344a <HAL_GPIO_WritePin>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40010800 	.word	0x40010800
 800243c:	40010c00 	.word	0x40010c00

08002440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002440:	f7ff ff6e 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002444:	480b      	ldr	r0, [pc, #44]	@ (8002474 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002446:	490c      	ldr	r1, [pc, #48]	@ (8002478 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002448:	4a0c      	ldr	r2, [pc, #48]	@ (800247c <LoopFillZerobss+0x16>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a09      	ldr	r2, [pc, #36]	@ (8002480 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800245c:	4c09      	ldr	r4, [pc, #36]	@ (8002484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246a:	f004 ffb5 	bl	80073d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800246e:	f7ff f995 	bl	800179c <main>
  bx lr
 8002472:	4770      	bx	lr
  ldr r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002478:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800247c:	08008dd8 	.word	0x08008dd8
  ldr r2, =_sbss
 8002480:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002484:	20000be4 	.word	0x20000be4

08002488 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <CAN1_RX1_IRQHandler>
	...

0800248c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_Init+0x28>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <HAL_Init+0x28>)
 8002496:	f043 0310 	orr.w	r3, r3, #16
 800249a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249c:	2003      	movs	r0, #3
 800249e:	f000 fd45 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a2:	200f      	movs	r0, #15
 80024a4:	f000 f808 	bl	80024b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a8:	f7ff fcfa 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40022000 	.word	0x40022000

080024b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <HAL_InitTick+0x54>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_InitTick+0x58>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fd5d 	bl	8002f96 <HAL_SYSTICK_Config>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00e      	b.n	8002504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d80a      	bhi.n	8002502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ec:	2200      	movs	r2, #0
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f000 fd25 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f8:	4a06      	ldr	r2, [pc, #24]	@ (8002514 <HAL_InitTick+0x5c>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000008 	.word	0x20000008
 8002510:	20000010 	.word	0x20000010
 8002514:	2000000c 	.word	0x2000000c

08002518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800251c:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_IncTick+0x1c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_IncTick+0x20>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4413      	add	r3, r2
 8002528:	4a03      	ldr	r2, [pc, #12]	@ (8002538 <HAL_IncTick+0x20>)
 800252a:	6013      	str	r3, [r2, #0]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	20000010 	.word	0x20000010
 8002538:	20000a98 	.word	0x20000a98

0800253c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b02      	ldr	r3, [pc, #8]	@ (800254c <HAL_GetTick+0x10>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000a98 	.word	0x20000a98

08002550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff fff0 	bl	800253c <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d005      	beq.n	8002576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256a:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <HAL_Delay+0x44>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002576:	bf00      	nop
 8002578:	f7ff ffe0 	bl	800253c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d8f7      	bhi.n	8002578 <HAL_Delay+0x28>
  {
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000010 	.word	0x20000010

08002598 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0be      	b.n	8002738 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fc94 	bl	8001f04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fb8f 	bl	8002d00 <ADC_ConversionStop_Disable>
 80025e2:	4603      	mov	r3, r0
 80025e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 8099 	bne.w	8002726 <HAL_ADC_Init+0x18e>
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8095 	bne.w	8002726 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002600:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002604:	f023 0302 	bic.w	r3, r3, #2
 8002608:	f043 0202 	orr.w	r2, r3, #2
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002618:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7b1b      	ldrb	r3, [r3, #12]
 800261e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002620:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	4313      	orrs	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002630:	d003      	beq.n	800263a <HAL_ADC_Init+0xa2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d102      	bne.n	8002640 <HAL_ADC_Init+0xa8>
 800263a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800263e:	e000      	b.n	8002642 <HAL_ADC_Init+0xaa>
 8002640:	2300      	movs	r3, #0
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7d1b      	ldrb	r3, [r3, #20]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d119      	bne.n	8002684 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7b1b      	ldrb	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	3b01      	subs	r3, #1
 800265e:	035a      	lsls	r2, r3, #13
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e00b      	b.n	8002684 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	f043 0201 	orr.w	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <HAL_ADC_Init+0x1a8>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b4:	d003      	beq.n	80026be <HAL_ADC_Init+0x126>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d104      	bne.n	80026c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	051b      	lsls	r3, r3, #20
 80026c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	430a      	orrs	r2, r1
 80026da:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <HAL_ADC_Init+0x1ac>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d10b      	bne.n	8002704 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002702:	e018      	b.n	8002736 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	f023 0312 	bic.w	r3, r3, #18
 800270c:	f043 0210 	orr.w	r2, r3, #16
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002724:	e007      	b.n	8002736 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272a:	f043 0210 	orr.w	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	ffe1f7fd 	.word	0xffe1f7fd
 8002744:	ff1f0efe 	.word	0xff1f0efe

08002748 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_ADC_Start_IT+0x1a>
 800275e:	2302      	movs	r3, #2
 8002760:	e0a0      	b.n	80028a4 <HAL_ADC_Start_IT+0x15c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa6e 	bl	8002c4c <ADC_Enable>
 8002770:	4603      	mov	r3, r0
 8002772:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 808f 	bne.w	800289a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a45      	ldr	r2, [pc, #276]	@ (80028ac <HAL_ADC_Start_IT+0x164>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d105      	bne.n	80027a6 <HAL_ADC_Start_IT+0x5e>
 800279a:	4b45      	ldr	r3, [pc, #276]	@ (80028b0 <HAL_ADC_Start_IT+0x168>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d115      	bne.n	80027d2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d026      	beq.n	800280e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027d0:	e01d      	b.n	800280e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a33      	ldr	r2, [pc, #204]	@ (80028b0 <HAL_ADC_Start_IT+0x168>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_ADC_Start_IT+0xaa>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a2f      	ldr	r2, [pc, #188]	@ (80028ac <HAL_ADC_Start_IT+0x164>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10d      	bne.n	800280e <HAL_ADC_Start_IT+0xc6>
 80027f2:	4b2f      	ldr	r3, [pc, #188]	@ (80028b0 <HAL_ADC_Start_IT+0x168>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002806:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	f023 0206 	bic.w	r2, r3, #6
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002826:	e002      	b.n	800282e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0202 	mvn.w	r2, #2
 800283e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800285a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800285e:	d113      	bne.n	8002888 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002864:	4a11      	ldr	r2, [pc, #68]	@ (80028ac <HAL_ADC_Start_IT+0x164>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d105      	bne.n	8002876 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800286a:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <HAL_ADC_Start_IT+0x168>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	e00c      	b.n	80028a2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	e003      	b.n	80028a2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40012800 	.word	0x40012800
 80028b0:	40012400 	.word	0x40012400

080028b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03e      	beq.n	800296c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d039      	beq.n	800296c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002908:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800291a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800291e:	d11d      	bne.n	800295c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002924:	2b00      	cmp	r3, #0
 8002926:	d119      	bne.n	800295c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0220 	bic.w	r2, r2, #32
 8002936:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d105      	bne.n	800295c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fe fd17 	bl	8001390 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f06f 0212 	mvn.w	r2, #18
 800296a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d04d      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d048      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80029a2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80029a6:	d012      	beq.n	80029ce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d125      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029c0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029c4:	d11d      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d119      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029dc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9bd 	bl	8002d82 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 020c 	mvn.w	r2, #12
 8002a10:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00d      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f809 	bl	8002a4a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0201 	mvn.w	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x20>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e0dc      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x1da>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d81c      	bhi.n	8002ac6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b05      	subs	r3, #5
 8002a9e:	221f      	movs	r2, #31
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4019      	ands	r1, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3b05      	subs	r3, #5
 8002ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ac4:	e03c      	b.n	8002b40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d81c      	bhi.n	8002b08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	3b23      	subs	r3, #35	@ 0x23
 8002ae0:	221f      	movs	r2, #31
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	4019      	ands	r1, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b23      	subs	r3, #35	@ 0x23
 8002afa:	fa00 f203 	lsl.w	r2, r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b06:	e01b      	b.n	8002b40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b41      	subs	r3, #65	@ 0x41
 8002b1a:	221f      	movs	r2, #31
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	4019      	ands	r1, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	3b41      	subs	r3, #65	@ 0x41
 8002b34:	fa00 f203 	lsl.w	r2, r0, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b09      	cmp	r3, #9
 8002b46:	d91c      	bls.n	8002b82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68d9      	ldr	r1, [r3, #12]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	3b1e      	subs	r3, #30
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	4019      	ands	r1, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6898      	ldr	r0, [r3, #8]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	3b1e      	subs	r3, #30
 8002b74:	fa00 f203 	lsl.w	r2, r0, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	60da      	str	r2, [r3, #12]
 8002b80:	e019      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6919      	ldr	r1, [r3, #16]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	2207      	movs	r2, #7
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	4019      	ands	r1, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6898      	ldr	r0, [r3, #8]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d003      	beq.n	8002bc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bc2:	2b11      	cmp	r3, #17
 8002bc4:	d132      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d125      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d126      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002bec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d11a      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf6:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a13      	ldr	r2, [pc, #76]	@ (8002c48 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	0c9a      	lsrs	r2, r3, #18
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c0c:	e002      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f9      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x1b2>
 8002c1a:	e007      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40012400 	.word	0x40012400
 8002c44:	20000008 	.word	0x20000008
 8002c48:	431bde83 	.word	0x431bde83

08002c4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d040      	beq.n	8002cec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf8 <ADC_Enable+0xac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cfc <ADC_Enable+0xb0>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	0c9b      	lsrs	r3, r3, #18
 8002c86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c88:	e002      	b.n	8002c90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f9      	bne.n	8002c8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c96:	f7ff fc51 	bl	800253c <HAL_GetTick>
 8002c9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c9c:	e01f      	b.n	8002cde <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c9e:	f7ff fc4d 	bl	800253c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d918      	bls.n	8002cde <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d011      	beq.n	8002cde <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	f043 0210 	orr.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e007      	b.n	8002cee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d1d8      	bne.n	8002c9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000008 	.word	0x20000008
 8002cfc:	431bde83 	.word	0x431bde83

08002d00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d12e      	bne.n	8002d78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d2a:	f7ff fc07 	bl	800253c <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d30:	e01b      	b.n	8002d6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d32:	f7ff fc03 	bl	800253c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d914      	bls.n	8002d6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d10d      	bne.n	8002d6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	f043 0210 	orr.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e007      	b.n	8002d7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d0dc      	beq.n	8002d32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4906      	ldr	r1, [pc, #24]	@ (8002e2c <__NVIC_EnableIRQ+0x34>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	@ (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	@ (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	@ 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff90 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff2d 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff42 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff90 	bl	8002e84 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5f 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff35 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d008      	beq.n	8002fd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e020      	b.n	800301a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 020e 	bic.w	r2, r2, #14
 8002fe6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d005      	beq.n	8003048 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2204      	movs	r2, #4
 8003040:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
 8003046:	e051      	b.n	80030ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 020e 	bic.w	r2, r2, #14
 8003056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a22      	ldr	r2, [pc, #136]	@ (80030f8 <HAL_DMA_Abort_IT+0xd4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d029      	beq.n	80030c6 <HAL_DMA_Abort_IT+0xa2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a21      	ldr	r2, [pc, #132]	@ (80030fc <HAL_DMA_Abort_IT+0xd8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x9e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1f      	ldr	r2, [pc, #124]	@ (8003100 <HAL_DMA_Abort_IT+0xdc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01a      	beq.n	80030bc <HAL_DMA_Abort_IT+0x98>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1e      	ldr	r2, [pc, #120]	@ (8003104 <HAL_DMA_Abort_IT+0xe0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d012      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x92>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1c      	ldr	r2, [pc, #112]	@ (8003108 <HAL_DMA_Abort_IT+0xe4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00a      	beq.n	80030b0 <HAL_DMA_Abort_IT+0x8c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <HAL_DMA_Abort_IT+0xe8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d102      	bne.n	80030aa <HAL_DMA_Abort_IT+0x86>
 80030a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030a8:	e00e      	b.n	80030c8 <HAL_DMA_Abort_IT+0xa4>
 80030aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030ae:	e00b      	b.n	80030c8 <HAL_DMA_Abort_IT+0xa4>
 80030b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030b4:	e008      	b.n	80030c8 <HAL_DMA_Abort_IT+0xa4>
 80030b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ba:	e005      	b.n	80030c8 <HAL_DMA_Abort_IT+0xa4>
 80030bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030c0:	e002      	b.n	80030c8 <HAL_DMA_Abort_IT+0xa4>
 80030c2:	2310      	movs	r3, #16
 80030c4:	e000      	b.n	80030c8 <HAL_DMA_Abort_IT+0xa4>
 80030c6:	2301      	movs	r3, #1
 80030c8:	4a11      	ldr	r2, [pc, #68]	@ (8003110 <HAL_DMA_Abort_IT+0xec>)
 80030ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
    } 
  }
  return status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40020008 	.word	0x40020008
 80030fc:	4002001c 	.word	0x4002001c
 8003100:	40020030 	.word	0x40020030
 8003104:	40020044 	.word	0x40020044
 8003108:	40020058 	.word	0x40020058
 800310c:	4002006c 	.word	0x4002006c
 8003110:	40020000 	.word	0x40020000

08003114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003114:	b480      	push	{r7}
 8003116:	b08b      	sub	sp, #44	@ 0x2c
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003126:	e169      	b.n	80033fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003128:	2201      	movs	r2, #1
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	429a      	cmp	r2, r3
 8003142:	f040 8158 	bne.w	80033f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4a9a      	ldr	r2, [pc, #616]	@ (80033b4 <HAL_GPIO_Init+0x2a0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d05e      	beq.n	800320e <HAL_GPIO_Init+0xfa>
 8003150:	4a98      	ldr	r2, [pc, #608]	@ (80033b4 <HAL_GPIO_Init+0x2a0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d875      	bhi.n	8003242 <HAL_GPIO_Init+0x12e>
 8003156:	4a98      	ldr	r2, [pc, #608]	@ (80033b8 <HAL_GPIO_Init+0x2a4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d058      	beq.n	800320e <HAL_GPIO_Init+0xfa>
 800315c:	4a96      	ldr	r2, [pc, #600]	@ (80033b8 <HAL_GPIO_Init+0x2a4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d86f      	bhi.n	8003242 <HAL_GPIO_Init+0x12e>
 8003162:	4a96      	ldr	r2, [pc, #600]	@ (80033bc <HAL_GPIO_Init+0x2a8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d052      	beq.n	800320e <HAL_GPIO_Init+0xfa>
 8003168:	4a94      	ldr	r2, [pc, #592]	@ (80033bc <HAL_GPIO_Init+0x2a8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d869      	bhi.n	8003242 <HAL_GPIO_Init+0x12e>
 800316e:	4a94      	ldr	r2, [pc, #592]	@ (80033c0 <HAL_GPIO_Init+0x2ac>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d04c      	beq.n	800320e <HAL_GPIO_Init+0xfa>
 8003174:	4a92      	ldr	r2, [pc, #584]	@ (80033c0 <HAL_GPIO_Init+0x2ac>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d863      	bhi.n	8003242 <HAL_GPIO_Init+0x12e>
 800317a:	4a92      	ldr	r2, [pc, #584]	@ (80033c4 <HAL_GPIO_Init+0x2b0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d046      	beq.n	800320e <HAL_GPIO_Init+0xfa>
 8003180:	4a90      	ldr	r2, [pc, #576]	@ (80033c4 <HAL_GPIO_Init+0x2b0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d85d      	bhi.n	8003242 <HAL_GPIO_Init+0x12e>
 8003186:	2b12      	cmp	r3, #18
 8003188:	d82a      	bhi.n	80031e0 <HAL_GPIO_Init+0xcc>
 800318a:	2b12      	cmp	r3, #18
 800318c:	d859      	bhi.n	8003242 <HAL_GPIO_Init+0x12e>
 800318e:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <HAL_GPIO_Init+0x80>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	0800320f 	.word	0x0800320f
 8003198:	080031e9 	.word	0x080031e9
 800319c:	080031fb 	.word	0x080031fb
 80031a0:	0800323d 	.word	0x0800323d
 80031a4:	08003243 	.word	0x08003243
 80031a8:	08003243 	.word	0x08003243
 80031ac:	08003243 	.word	0x08003243
 80031b0:	08003243 	.word	0x08003243
 80031b4:	08003243 	.word	0x08003243
 80031b8:	08003243 	.word	0x08003243
 80031bc:	08003243 	.word	0x08003243
 80031c0:	08003243 	.word	0x08003243
 80031c4:	08003243 	.word	0x08003243
 80031c8:	08003243 	.word	0x08003243
 80031cc:	08003243 	.word	0x08003243
 80031d0:	08003243 	.word	0x08003243
 80031d4:	08003243 	.word	0x08003243
 80031d8:	080031f1 	.word	0x080031f1
 80031dc:	08003205 	.word	0x08003205
 80031e0:	4a79      	ldr	r2, [pc, #484]	@ (80033c8 <HAL_GPIO_Init+0x2b4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031e6:	e02c      	b.n	8003242 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	623b      	str	r3, [r7, #32]
          break;
 80031ee:	e029      	b.n	8003244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	3304      	adds	r3, #4
 80031f6:	623b      	str	r3, [r7, #32]
          break;
 80031f8:	e024      	b.n	8003244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	3308      	adds	r3, #8
 8003200:	623b      	str	r3, [r7, #32]
          break;
 8003202:	e01f      	b.n	8003244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	330c      	adds	r3, #12
 800320a:	623b      	str	r3, [r7, #32]
          break;
 800320c:	e01a      	b.n	8003244 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003216:	2304      	movs	r3, #4
 8003218:	623b      	str	r3, [r7, #32]
          break;
 800321a:	e013      	b.n	8003244 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003224:	2308      	movs	r3, #8
 8003226:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	611a      	str	r2, [r3, #16]
          break;
 800322e:	e009      	b.n	8003244 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003230:	2308      	movs	r3, #8
 8003232:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	615a      	str	r2, [r3, #20]
          break;
 800323a:	e003      	b.n	8003244 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800323c:	2300      	movs	r3, #0
 800323e:	623b      	str	r3, [r7, #32]
          break;
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0x130>
          break;
 8003242:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2bff      	cmp	r3, #255	@ 0xff
 8003248:	d801      	bhi.n	800324e <HAL_GPIO_Init+0x13a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	e001      	b.n	8003252 <HAL_GPIO_Init+0x13e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2bff      	cmp	r3, #255	@ 0xff
 8003258:	d802      	bhi.n	8003260 <HAL_GPIO_Init+0x14c>
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	e002      	b.n	8003266 <HAL_GPIO_Init+0x152>
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	3b08      	subs	r3, #8
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	210f      	movs	r1, #15
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	401a      	ands	r2, r3
 8003278:	6a39      	ldr	r1, [r7, #32]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	431a      	orrs	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80b1 	beq.w	80033f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003294:	4b4d      	ldr	r3, [pc, #308]	@ (80033cc <HAL_GPIO_Init+0x2b8>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4a4c      	ldr	r2, [pc, #304]	@ (80033cc <HAL_GPIO_Init+0x2b8>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6193      	str	r3, [r2, #24]
 80032a0:	4b4a      	ldr	r3, [pc, #296]	@ (80033cc <HAL_GPIO_Init+0x2b8>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032ac:	4a48      	ldr	r2, [pc, #288]	@ (80033d0 <HAL_GPIO_Init+0x2bc>)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3302      	adds	r3, #2
 80032b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a40      	ldr	r2, [pc, #256]	@ (80033d4 <HAL_GPIO_Init+0x2c0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <HAL_GPIO_Init+0x1ec>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3f      	ldr	r2, [pc, #252]	@ (80033d8 <HAL_GPIO_Init+0x2c4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00d      	beq.n	80032fc <HAL_GPIO_Init+0x1e8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3e      	ldr	r2, [pc, #248]	@ (80033dc <HAL_GPIO_Init+0x2c8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <HAL_GPIO_Init+0x1e4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3d      	ldr	r2, [pc, #244]	@ (80033e0 <HAL_GPIO_Init+0x2cc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_GPIO_Init+0x1e0>
 80032f0:	2303      	movs	r3, #3
 80032f2:	e006      	b.n	8003302 <HAL_GPIO_Init+0x1ee>
 80032f4:	2304      	movs	r3, #4
 80032f6:	e004      	b.n	8003302 <HAL_GPIO_Init+0x1ee>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e002      	b.n	8003302 <HAL_GPIO_Init+0x1ee>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_GPIO_Init+0x1ee>
 8003300:	2300      	movs	r3, #0
 8003302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003304:	f002 0203 	and.w	r2, r2, #3
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	4093      	lsls	r3, r2
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003312:	492f      	ldr	r1, [pc, #188]	@ (80033d0 <HAL_GPIO_Init+0x2bc>)
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d006      	beq.n	800333a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800332c:	4b2d      	ldr	r3, [pc, #180]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	492c      	ldr	r1, [pc, #176]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
 8003338:	e006      	b.n	8003348 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800333a:	4b2a      	ldr	r3, [pc, #168]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	43db      	mvns	r3, r3
 8003342:	4928      	ldr	r1, [pc, #160]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 8003344:	4013      	ands	r3, r2
 8003346:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003354:	4b23      	ldr	r3, [pc, #140]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4922      	ldr	r1, [pc, #136]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	60cb      	str	r3, [r1, #12]
 8003360:	e006      	b.n	8003370 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003362:	4b20      	ldr	r3, [pc, #128]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	43db      	mvns	r3, r3
 800336a:	491e      	ldr	r1, [pc, #120]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 800336c:	4013      	ands	r3, r2
 800336e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800337c:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4918      	ldr	r1, [pc, #96]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
 8003388:	e006      	b.n	8003398 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800338a:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	43db      	mvns	r3, r3
 8003392:	4914      	ldr	r1, [pc, #80]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 8003394:	4013      	ands	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d021      	beq.n	80033e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033a4:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	490e      	ldr	r1, [pc, #56]	@ (80033e4 <HAL_GPIO_Init+0x2d0>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
 80033b0:	e021      	b.n	80033f6 <HAL_GPIO_Init+0x2e2>
 80033b2:	bf00      	nop
 80033b4:	10320000 	.word	0x10320000
 80033b8:	10310000 	.word	0x10310000
 80033bc:	10220000 	.word	0x10220000
 80033c0:	10210000 	.word	0x10210000
 80033c4:	10120000 	.word	0x10120000
 80033c8:	10110000 	.word	0x10110000
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40010800 	.word	0x40010800
 80033d8:	40010c00 	.word	0x40010c00
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40011400 	.word	0x40011400
 80033e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <HAL_GPIO_Init+0x304>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	4909      	ldr	r1, [pc, #36]	@ (8003418 <HAL_GPIO_Init+0x304>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	3301      	adds	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	f47f ae8e 	bne.w	8003128 <HAL_GPIO_Init+0x14>
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	372c      	adds	r7, #44	@ 0x2c
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	40010400 	.word	0x40010400

0800341c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e001      	b.n	800343e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	807b      	strh	r3, [r7, #2]
 8003456:	4613      	mov	r3, r2
 8003458:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800345a:	787b      	ldrb	r3, [r7, #1]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003466:	e003      	b.n	8003470 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003468:	887b      	ldrh	r3, [r7, #2]
 800346a:	041a      	lsls	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	611a      	str	r2, [r3, #16]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
	...

0800347c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003486:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003492:	4a05      	ldr	r2, [pc, #20]	@ (80034a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe f83e 	bl	800151c <HAL_GPIO_EXTI_Callback>
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40010400 	.word	0x40010400

080034ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e12b      	b.n	8003716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe fd5a 	bl	8001f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	@ 0x24
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800350e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003510:	f001 fd88 	bl	8005024 <HAL_RCC_GetPCLK1Freq>
 8003514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4a81      	ldr	r2, [pc, #516]	@ (8003720 <HAL_I2C_Init+0x274>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d807      	bhi.n	8003530 <HAL_I2C_Init+0x84>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a80      	ldr	r2, [pc, #512]	@ (8003724 <HAL_I2C_Init+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	bf94      	ite	ls
 8003528:	2301      	movls	r3, #1
 800352a:	2300      	movhi	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e006      	b.n	800353e <HAL_I2C_Init+0x92>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a7d      	ldr	r2, [pc, #500]	@ (8003728 <HAL_I2C_Init+0x27c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	bf94      	ite	ls
 8003538:	2301      	movls	r3, #1
 800353a:	2300      	movhi	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e0e7      	b.n	8003716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a78      	ldr	r2, [pc, #480]	@ (800372c <HAL_I2C_Init+0x280>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0c9b      	lsrs	r3, r3, #18
 8003550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a6a      	ldr	r2, [pc, #424]	@ (8003720 <HAL_I2C_Init+0x274>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d802      	bhi.n	8003580 <HAL_I2C_Init+0xd4>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3301      	adds	r3, #1
 800357e:	e009      	b.n	8003594 <HAL_I2C_Init+0xe8>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	4a69      	ldr	r2, [pc, #420]	@ (8003730 <HAL_I2C_Init+0x284>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	3301      	adds	r3, #1
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	495c      	ldr	r1, [pc, #368]	@ (8003720 <HAL_I2C_Init+0x274>)
 80035b0:	428b      	cmp	r3, r1
 80035b2:	d819      	bhi.n	80035e8 <HAL_I2C_Init+0x13c>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e59      	subs	r1, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c2:	1c59      	adds	r1, r3, #1
 80035c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035c8:	400b      	ands	r3, r1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_I2C_Init+0x138>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1e59      	subs	r1, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e2:	e051      	b.n	8003688 <HAL_I2C_Init+0x1dc>
 80035e4:	2304      	movs	r3, #4
 80035e6:	e04f      	b.n	8003688 <HAL_I2C_Init+0x1dc>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d111      	bne.n	8003614 <HAL_I2C_Init+0x168>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e58      	subs	r0, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	440b      	add	r3, r1
 80035fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e012      	b.n	800363a <HAL_I2C_Init+0x18e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	0099      	lsls	r1, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Init+0x196>
 800363e:	2301      	movs	r3, #1
 8003640:	e022      	b.n	8003688 <HAL_I2C_Init+0x1dc>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10e      	bne.n	8003668 <HAL_I2C_Init+0x1bc>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1e58      	subs	r0, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	440b      	add	r3, r1
 8003658:	fbb0 f3f3 	udiv	r3, r0, r3
 800365c:	3301      	adds	r3, #1
 800365e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003666:	e00f      	b.n	8003688 <HAL_I2C_Init+0x1dc>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e58      	subs	r0, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	0099      	lsls	r1, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	fbb0 f3f3 	udiv	r3, r0, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	6809      	ldr	r1, [r1, #0]
 800368c:	4313      	orrs	r3, r2
 800368e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6911      	ldr	r1, [r2, #16]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68d2      	ldr	r2, [r2, #12]
 80036c2:	4311      	orrs	r1, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	000186a0 	.word	0x000186a0
 8003724:	001e847f 	.word	0x001e847f
 8003728:	003d08ff 	.word	0x003d08ff
 800372c:	431bde83 	.word	0x431bde83
 8003730:	10624dd3 	.word	0x10624dd3

08003734 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	461a      	mov	r2, r3
 8003740:	460b      	mov	r3, r1
 8003742:	817b      	strh	r3, [r7, #10]
 8003744:	4613      	mov	r3, r2
 8003746:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7fe fef8 	bl	800253c <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b20      	cmp	r3, #32
 8003758:	f040 80e0 	bne.w	800391c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2319      	movs	r3, #25
 8003762:	2201      	movs	r2, #1
 8003764:	4970      	ldr	r1, [pc, #448]	@ (8003928 <HAL_I2C_Master_Transmit+0x1f4>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fe50 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	e0d3      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_I2C_Master_Transmit+0x50>
 8003780:	2302      	movs	r3, #2
 8003782:	e0cc      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d007      	beq.n	80037aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2221      	movs	r2, #33	@ 0x21
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2210      	movs	r2, #16
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a50      	ldr	r2, [pc, #320]	@ (800392c <HAL_I2C_Master_Transmit+0x1f8>)
 80037ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037ec:	8979      	ldrh	r1, [r7, #10]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fc0a 	bl	800400c <I2C_MasterRequestWrite>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e08d      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003818:	e066      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6a39      	ldr	r1, [r7, #32]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 ff0e 	bl	8004640 <I2C_WaitOnTXEFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2b04      	cmp	r3, #4
 8003830:	d107      	bne.n	8003842 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06b      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11b      	bne.n	80038bc <HAL_I2C_Master_Transmit+0x188>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d017      	beq.n	80038bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	6a39      	ldr	r1, [r7, #32]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 ff05 	bl	80046d0 <I2C_WaitOnBTFFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d107      	bne.n	80038e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e01a      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d194      	bne.n	800381a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	00100002 	.word	0x00100002
 800392c:	ffff0000 	.word	0xffff0000

08003930 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	817b      	strh	r3, [r7, #10]
 8003942:	460b      	mov	r3, r1
 8003944:	813b      	strh	r3, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394a:	f7fe fdf7 	bl	800253c <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	f040 80d9 	bne.w	8003b10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2319      	movs	r3, #25
 8003964:	2201      	movs	r2, #1
 8003966:	496d      	ldr	r1, [pc, #436]	@ (8003b1c <HAL_I2C_Mem_Write+0x1ec>)
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fd4f 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
 8003976:	e0cc      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Mem_Write+0x56>
 8003982:	2302      	movs	r3, #2
 8003984:	e0c5      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d007      	beq.n	80039ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2221      	movs	r2, #33	@ 0x21
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2240      	movs	r2, #64	@ 0x40
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a3a      	ldr	r2, [r7, #32]
 80039d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003b20 <HAL_I2C_Mem_Write+0x1f0>)
 80039ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ee:	88f8      	ldrh	r0, [r7, #6]
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4603      	mov	r3, r0
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fb86 	bl	8004110 <I2C_RequestMemoryWrite>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d052      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e081      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fe14 	bl	8004640 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d107      	bne.n	8003a36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06b      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_I2C_Mem_Write+0x180>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d017      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1aa      	bne.n	8003a0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fe07 	bl	80046d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d107      	bne.n	8003ae0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ade:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e016      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	00100002 	.word	0x00100002
 8003b20:	ffff0000 	.word	0xffff0000

08003b24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	@ 0x30
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	817b      	strh	r3, [r7, #10]
 8003b36:	460b      	mov	r3, r1
 8003b38:	813b      	strh	r3, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b42:	f7fe fcfb 	bl	800253c <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	f040 8250 	bne.w	8003ff6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2319      	movs	r3, #25
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4982      	ldr	r1, [pc, #520]	@ (8003d68 <HAL_I2C_Mem_Read+0x244>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fc53 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e243      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Mem_Read+0x5a>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e23c      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d007      	beq.n	8003ba4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2222      	movs	r2, #34	@ 0x22
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2240      	movs	r2, #64	@ 0x40
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a62      	ldr	r2, [pc, #392]	@ (8003d6c <HAL_I2C_Mem_Read+0x248>)
 8003be4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003be6:	88f8      	ldrh	r0, [r7, #6]
 8003be8:	893a      	ldrh	r2, [r7, #8]
 8003bea:	8979      	ldrh	r1, [r7, #10]
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb20 	bl	800423c <I2C_RequestMemoryRead>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1f8      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d113      	bne.n	8003c36 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e1cc      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d11e      	bne.n	8003c7c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c4e:	b672      	cpsid	i
}
 8003c50:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c78:	b662      	cpsie	i
}
 8003c7a:	e035      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d11e      	bne.n	8003cc2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c94:	b672      	cpsid	i
}
 8003c96:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cbe:	b662      	cpsie	i
}
 8003cc0:	e012      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ce8:	e172      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	f200 811f 	bhi.w	8003f32 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d123      	bne.n	8003d44 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fd2d 	bl	8004760 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e173      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d42:	e145      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d152      	bne.n	8003df2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d52:	2200      	movs	r2, #0
 8003d54:	4906      	ldr	r1, [pc, #24]	@ (8003d70 <HAL_I2C_Mem_Read+0x24c>)
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb58 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e148      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
 8003d66:	bf00      	nop
 8003d68:	00100002 	.word	0x00100002
 8003d6c:	ffff0000 	.word	0xffff0000
 8003d70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d74:	b672      	cpsid	i
}
 8003d76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dba:	b662      	cpsie	i
}
 8003dbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003df0:	e0ee      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4981      	ldr	r1, [pc, #516]	@ (8004000 <HAL_I2C_Mem_Read+0x4dc>)
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fb05 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0f5      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e1c:	b672      	cpsid	i
}
 8003e1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e52:	4b6c      	ldr	r3, [pc, #432]	@ (8004004 <HAL_I2C_Mem_Read+0x4e0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	08db      	lsrs	r3, r3, #3
 8003e58:	4a6b      	ldr	r2, [pc, #428]	@ (8004008 <HAL_I2C_Mem_Read+0x4e4>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	0a1a      	lsrs	r2, r3, #8
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	00da      	lsls	r2, r3, #3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d118      	bne.n	8003eaa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f043 0220 	orr.w	r2, r3, #32
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e9a:	b662      	cpsie	i
}
 8003e9c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0a6      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d1d9      	bne.n	8003e6c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003efa:	b662      	cpsie	i
}
 8003efc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f30:	e04e      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fc12 	bl	8004760 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e058      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d124      	bne.n	8003fd0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d107      	bne.n	8003f9e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f ae88 	bne.w	8003cea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3728      	adds	r7, #40	@ 0x28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	00010004 	.word	0x00010004
 8004004:	20000008 	.word	0x20000008
 8004008:	14f8b589 	.word	0x14f8b589

0800400c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	460b      	mov	r3, r1
 800401a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d006      	beq.n	8004036 <I2C_MasterRequestWrite+0x2a>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d003      	beq.n	8004036 <I2C_MasterRequestWrite+0x2a>
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004034:	d108      	bne.n	8004048 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e00b      	b.n	8004060 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	2b12      	cmp	r3, #18
 800404e:	d107      	bne.n	8004060 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800405e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f9cd 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004086:	d103      	bne.n	8004090 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800408e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e035      	b.n	8004100 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800409c:	d108      	bne.n	80040b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	e01b      	b.n	80040e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040b0:	897b      	ldrh	r3, [r7, #10]
 80040b2:	11db      	asrs	r3, r3, #7
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 0306 	and.w	r3, r3, #6
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f063 030f 	orn	r3, r3, #15
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	490e      	ldr	r1, [pc, #56]	@ (8004108 <I2C_MasterRequestWrite+0xfc>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa16 	bl	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e010      	b.n	8004100 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040de:	897b      	ldrh	r3, [r7, #10]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4907      	ldr	r1, [pc, #28]	@ (800410c <I2C_MasterRequestWrite+0x100>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fa06 	bl	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	00010008 	.word	0x00010008
 800410c:	00010002 	.word	0x00010002

08004110 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	460b      	mov	r3, r1
 8004124:	813b      	strh	r3, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004138:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2200      	movs	r2, #0
 8004142:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f960 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004160:	d103      	bne.n	800416a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004168:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e05f      	b.n	800422e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800417c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	492d      	ldr	r1, [pc, #180]	@ (8004238 <I2C_RequestMemoryWrite+0x128>)
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f9bb 	bl	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e04c      	b.n	800422e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ac:	6a39      	ldr	r1, [r7, #32]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa46 	bl	8004640 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d107      	bne.n	80041d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e02b      	b.n	800422e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	611a      	str	r2, [r3, #16]
 80041e6:	e021      	b.n	800422c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041e8:	893b      	ldrh	r3, [r7, #8]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f8:	6a39      	ldr	r1, [r7, #32]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fa20 	bl	8004640 <I2C_WaitOnTXEFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	2b04      	cmp	r3, #4
 800420c:	d107      	bne.n	800421e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e005      	b.n	800422e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004222:	893b      	ldrh	r3, [r7, #8]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	00010002 	.word	0x00010002

0800423c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4603      	mov	r3, r0
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	460b      	mov	r3, r1
 8004250:	813b      	strh	r3, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004264:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	2200      	movs	r2, #0
 800427e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8c2 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800429c:	d103      	bne.n	80042a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0aa      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	4952      	ldr	r1, [pc, #328]	@ (8004408 <I2C_RequestMemoryRead+0x1cc>)
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f91d 	bl	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e097      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e8:	6a39      	ldr	r1, [r7, #32]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f9a8 	bl	8004640 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d107      	bne.n	800430e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800430c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e076      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d105      	bne.n	8004324 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004318:	893b      	ldrh	r3, [r7, #8]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	611a      	str	r2, [r3, #16]
 8004322:	e021      	b.n	8004368 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004324:	893b      	ldrh	r3, [r7, #8]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	b29b      	uxth	r3, r3
 800432a:	b2da      	uxtb	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004334:	6a39      	ldr	r1, [r7, #32]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f982 	bl	8004640 <I2C_WaitOnTXEFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00d      	beq.n	800435e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	2b04      	cmp	r3, #4
 8004348:	d107      	bne.n	800435a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004358:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e050      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800435e:	893b      	ldrh	r3, [r7, #8]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436a:	6a39      	ldr	r1, [r7, #32]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f967 	bl	8004640 <I2C_WaitOnTXEFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	2b04      	cmp	r3, #4
 800437e:	d107      	bne.n	8004390 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e035      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f82b 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ca:	d103      	bne.n	80043d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e013      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043d8:	897b      	ldrh	r3, [r7, #10]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	4906      	ldr	r1, [pc, #24]	@ (8004408 <I2C_RequestMemoryRead+0x1cc>)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f886 	bl	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	00010002 	.word	0x00010002

0800440c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800441c:	e048      	b.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d044      	beq.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe f889 	bl	800253c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d139      	bne.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10d      	bne.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	43da      	mvns	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4013      	ands	r3, r2
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf0c      	ite	eq
 8004458:	2301      	moveq	r3, #1
 800445a:	2300      	movne	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	e00c      	b.n	800447c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	43da      	mvns	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	429a      	cmp	r2, r3
 8004480:	d116      	bne.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e023      	b.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	0c1b      	lsrs	r3, r3, #16
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10d      	bne.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	43da      	mvns	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4013      	ands	r3, r2
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	e00c      	b.n	80044f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	43da      	mvns	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4013      	ands	r3, r2
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d093      	beq.n	800441e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800450e:	e071      	b.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451e:	d123      	bne.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800452e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	f043 0204 	orr.w	r2, r3, #4
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e067      	b.n	8004638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d041      	beq.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004570:	f7fd ffe4 	bl	800253c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d136      	bne.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10c      	bne.n	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	43da      	mvns	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4013      	ands	r3, r2
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bf14      	ite	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	2300      	moveq	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	e00b      	b.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	43da      	mvns	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4013      	ands	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e021      	b.n	8004638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	0c1b      	lsrs	r3, r3, #16
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d10c      	bne.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	43da      	mvns	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e00b      	b.n	8004630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	43da      	mvns	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf14      	ite	ne
 800462a:	2301      	movne	r3, #1
 800462c:	2300      	moveq	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f af6d 	bne.w	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800464c:	e034      	b.n	80046b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f8e3 	bl	800481a <I2C_IsAcknowledgeFailed>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e034      	b.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d028      	beq.n	80046b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004666:	f7fd ff69 	bl	800253c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	d302      	bcc.n	800467c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d11d      	bne.n	80046b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b80      	cmp	r3, #128	@ 0x80
 8004688:	d016      	beq.n	80046b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e007      	b.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c2:	2b80      	cmp	r3, #128	@ 0x80
 80046c4:	d1c3      	bne.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046dc:	e034      	b.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f89b 	bl	800481a <I2C_IsAcknowledgeFailed>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e034      	b.n	8004758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d028      	beq.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fd ff21 	bl	800253c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d11d      	bne.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d016      	beq.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e007      	b.n	8004758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b04      	cmp	r3, #4
 8004754:	d1c3      	bne.n	80046de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800476c:	e049      	b.n	8004802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b10      	cmp	r3, #16
 800477a:	d119      	bne.n	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0210 	mvn.w	r2, #16
 8004784:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e030      	b.n	8004812 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b0:	f7fd fec4 	bl	800253c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d302      	bcc.n	80047c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d11d      	bne.n	8004802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b40      	cmp	r3, #64	@ 0x40
 80047d2:	d016      	beq.n	8004802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e007      	b.n	8004812 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480c:	2b40      	cmp	r3, #64	@ 0x40
 800480e:	d1ae      	bne.n	800476e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004830:	d11b      	bne.n	800486a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800483a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	f043 0204 	orr.w	r2, r3, #4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
	...

08004878 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800487c:	4b03      	ldr	r3, [pc, #12]	@ (800488c <HAL_PWR_EnableBkUpAccess+0x14>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	420e0020 	.word	0x420e0020

08004890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e272      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8087 	beq.w	80049be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b0:	4b92      	ldr	r3, [pc, #584]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048bc:	4b8f      	ldr	r3, [pc, #572]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d112      	bne.n	80048ee <HAL_RCC_OscConfig+0x5e>
 80048c8:	4b8c      	ldr	r3, [pc, #560]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d4:	d10b      	bne.n	80048ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d6:	4b89      	ldr	r3, [pc, #548]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d06c      	beq.n	80049bc <HAL_RCC_OscConfig+0x12c>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d168      	bne.n	80049bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e24c      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x76>
 80048f8:	4b80      	ldr	r3, [pc, #512]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a7f      	ldr	r2, [pc, #508]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80048fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	e02e      	b.n	8004964 <HAL_RCC_OscConfig+0xd4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x98>
 800490e:	4b7b      	ldr	r3, [pc, #492]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7a      	ldr	r2, [pc, #488]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b78      	ldr	r3, [pc, #480]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a77      	ldr	r2, [pc, #476]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xd4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0xbc>
 8004932:	4b72      	ldr	r3, [pc, #456]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a71      	ldr	r2, [pc, #452]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b6f      	ldr	r3, [pc, #444]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6e      	ldr	r2, [pc, #440]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xd4>
 800494c:	4b6b      	ldr	r3, [pc, #428]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6a      	ldr	r2, [pc, #424]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b68      	ldr	r3, [pc, #416]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a67      	ldr	r2, [pc, #412]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fd fde6 	bl	800253c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd fde2 	bl	800253c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e200      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b5d      	ldr	r3, [pc, #372]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xe4>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fd fdd2 	bl	800253c <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7fd fdce 	bl	800253c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	@ 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1ec      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	4b53      	ldr	r3, [pc, #332]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x10c>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d063      	beq.n	8004a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ca:	4b4c      	ldr	r3, [pc, #304]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049d6:	4b49      	ldr	r3, [pc, #292]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d11c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x18c>
 80049e2:	4b46      	ldr	r3, [pc, #280]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d116      	bne.n	8004a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	4b43      	ldr	r3, [pc, #268]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x176>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1c0      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b3d      	ldr	r3, [pc, #244]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4939      	ldr	r1, [pc, #228]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	e03a      	b.n	8004a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a24:	4b36      	ldr	r3, [pc, #216]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fd fd87 	bl	800253c <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fd fd83 	bl	800253c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1a1      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	4b2d      	ldr	r3, [pc, #180]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a50:	4b2a      	ldr	r3, [pc, #168]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4927      	ldr	r1, [pc, #156]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]
 8004a64:	e015      	b.n	8004a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a66:	4b26      	ldr	r3, [pc, #152]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fd66 	bl	800253c <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fd fd62 	bl	800253c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e180      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	4b1d      	ldr	r3, [pc, #116]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d03a      	beq.n	8004b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d019      	beq.n	8004ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa6:	4b17      	ldr	r3, [pc, #92]	@ (8004b04 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aac:	f7fd fd46 	bl	800253c <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fd fd42 	bl	800253c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e160      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	f000 face 	bl	8005074 <RCC_Delay>
 8004ad8:	e01c      	b.n	8004b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ada:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <HAL_RCC_OscConfig+0x274>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae0:	f7fd fd2c 	bl	800253c <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae6:	e00f      	b.n	8004b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae8:	f7fd fd28 	bl	800253c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d908      	bls.n	8004b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e146      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	42420000 	.word	0x42420000
 8004b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b08:	4b92      	ldr	r3, [pc, #584]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e9      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80a6 	beq.w	8004c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b26:	4b8b      	ldr	r3, [pc, #556]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10d      	bne.n	8004b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	4b88      	ldr	r3, [pc, #544]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	4a87      	ldr	r2, [pc, #540]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b3c:	61d3      	str	r3, [r2, #28]
 8004b3e:	4b85      	ldr	r3, [pc, #532]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4e:	4b82      	ldr	r3, [pc, #520]	@ (8004d58 <HAL_RCC_OscConfig+0x4c8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d118      	bne.n	8004b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d58 <HAL_RCC_OscConfig+0x4c8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d58 <HAL_RCC_OscConfig+0x4c8>)
 8004b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b66:	f7fd fce9 	bl	800253c <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6e:	f7fd fce5 	bl	800253c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b64      	cmp	r3, #100	@ 0x64
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e103      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b80:	4b75      	ldr	r3, [pc, #468]	@ (8004d58 <HAL_RCC_OscConfig+0x4c8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d106      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x312>
 8004b94:	4b6f      	ldr	r3, [pc, #444]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	4a6e      	ldr	r2, [pc, #440]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6213      	str	r3, [r2, #32]
 8004ba0:	e02d      	b.n	8004bfe <HAL_RCC_OscConfig+0x36e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x334>
 8004baa:	4b6a      	ldr	r3, [pc, #424]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	4a69      	ldr	r2, [pc, #420]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6213      	str	r3, [r2, #32]
 8004bb6:	4b67      	ldr	r3, [pc, #412]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4a66      	ldr	r2, [pc, #408]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	6213      	str	r3, [r2, #32]
 8004bc2:	e01c      	b.n	8004bfe <HAL_RCC_OscConfig+0x36e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b05      	cmp	r3, #5
 8004bca:	d10c      	bne.n	8004be6 <HAL_RCC_OscConfig+0x356>
 8004bcc:	4b61      	ldr	r3, [pc, #388]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4a60      	ldr	r2, [pc, #384]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	6213      	str	r3, [r2, #32]
 8004bd8:	4b5e      	ldr	r3, [pc, #376]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6213      	str	r3, [r2, #32]
 8004be4:	e00b      	b.n	8004bfe <HAL_RCC_OscConfig+0x36e>
 8004be6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	4a5a      	ldr	r2, [pc, #360]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	6213      	str	r3, [r2, #32]
 8004bf2:	4b58      	ldr	r3, [pc, #352]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	4a57      	ldr	r2, [pc, #348]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d015      	beq.n	8004c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c06:	f7fd fc99 	bl	800253c <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fd fc95 	bl	800253c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e0b1      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c24:	4b4b      	ldr	r3, [pc, #300]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0ee      	beq.n	8004c0e <HAL_RCC_OscConfig+0x37e>
 8004c30:	e014      	b.n	8004c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c32:	f7fd fc83 	bl	800253c <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c38:	e00a      	b.n	8004c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3a:	f7fd fc7f 	bl	800253c <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e09b      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c50:	4b40      	ldr	r3, [pc, #256]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ee      	bne.n	8004c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c62:	4b3c      	ldr	r3, [pc, #240]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4a3b      	ldr	r2, [pc, #236]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8087 	beq.w	8004d86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c78:	4b36      	ldr	r3, [pc, #216]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d061      	beq.n	8004d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d146      	bne.n	8004d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8c:	4b33      	ldr	r3, [pc, #204]	@ (8004d5c <HAL_RCC_OscConfig+0x4cc>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c92:	f7fd fc53 	bl	800253c <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9a:	f7fd fc4f 	bl	800253c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e06d      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cac:	4b29      	ldr	r3, [pc, #164]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc0:	d108      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cc2:	4b24      	ldr	r3, [pc, #144]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	4921      	ldr	r1, [pc, #132]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a19      	ldr	r1, [r3, #32]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	491b      	ldr	r1, [pc, #108]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cec:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <HAL_RCC_OscConfig+0x4cc>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fd fc23 	bl	800253c <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fd fc1f 	bl	800253c <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e03d      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d0c:	4b11      	ldr	r3, [pc, #68]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x46a>
 8004d18:	e035      	b.n	8004d86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1a:	4b10      	ldr	r3, [pc, #64]	@ (8004d5c <HAL_RCC_OscConfig+0x4cc>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fd fc0c 	bl	800253c <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d28:	f7fd fc08 	bl	800253c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e026      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d3a:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <HAL_RCC_OscConfig+0x4c4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x498>
 8004d46:	e01e      	b.n	8004d86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e019      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d60:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <HAL_RCC_OscConfig+0x500>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d106      	bne.n	8004d82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d001      	beq.n	8004d86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000

08004d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0d0      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da8:	4b6a      	ldr	r3, [pc, #424]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d910      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b67      	ldr	r3, [pc, #412]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 0207 	bic.w	r2, r3, #7
 8004dbe:	4965      	ldr	r1, [pc, #404]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b63      	ldr	r3, [pc, #396]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0b8      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d020      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df0:	4b59      	ldr	r3, [pc, #356]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a58      	ldr	r2, [pc, #352]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e08:	4b53      	ldr	r3, [pc, #332]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4a52      	ldr	r2, [pc, #328]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e14:	4b50      	ldr	r3, [pc, #320]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	494d      	ldr	r1, [pc, #308]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d040      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b47      	ldr	r3, [pc, #284]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d115      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e07f      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d107      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e52:	4b41      	ldr	r3, [pc, #260]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e073      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e62:	4b3d      	ldr	r3, [pc, #244]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e06b      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e72:	4b39      	ldr	r3, [pc, #228]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f023 0203 	bic.w	r2, r3, #3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4936      	ldr	r1, [pc, #216]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e84:	f7fd fb5a 	bl	800253c <HAL_GetTick>
 8004e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8c:	f7fd fb56 	bl	800253c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e053      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 020c 	and.w	r2, r3, #12
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d1eb      	bne.n	8004e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b27      	ldr	r3, [pc, #156]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d210      	bcs.n	8004ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b24      	ldr	r3, [pc, #144]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 0207 	bic.w	r2, r3, #7
 8004eca:	4922      	ldr	r1, [pc, #136]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b20      	ldr	r3, [pc, #128]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e032      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef0:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4916      	ldr	r1, [pc, #88]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f0e:	4b12      	ldr	r3, [pc, #72]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	490e      	ldr	r1, [pc, #56]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f22:	f000 f821 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004f26:	4602      	mov	r2, r0
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	490a      	ldr	r1, [pc, #40]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c8>)
 8004f34:	5ccb      	ldrb	r3, [r1, r3]
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	4a09      	ldr	r2, [pc, #36]	@ (8004f60 <HAL_RCC_ClockConfig+0x1cc>)
 8004f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f3e:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <HAL_RCC_ClockConfig+0x1d0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fd fab8 	bl	80024b8 <HAL_InitTick>

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40022000 	.word	0x40022000
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	08008c28 	.word	0x08008c28
 8004f60:	20000008 	.word	0x20000008
 8004f64:	2000000c 	.word	0x2000000c

08004f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f82:	4b1e      	ldr	r3, [pc, #120]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x30>
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x36>
 8004f96:	e027      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f98:	4b19      	ldr	r3, [pc, #100]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f9a:	613b      	str	r3, [r7, #16]
      break;
 8004f9c:	e027      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	0c9b      	lsrs	r3, r3, #18
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	4a17      	ldr	r2, [pc, #92]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fa8:	5cd3      	ldrb	r3, [r2, r3]
 8004faa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fb6:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	0c5b      	lsrs	r3, r3, #17
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	4a11      	ldr	r2, [pc, #68]	@ (8005008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fc2:	5cd3      	ldrb	r3, [r2, r3]
 8004fc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fca:	fb03 f202 	mul.w	r2, r3, r2
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e004      	b.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0c      	ldr	r2, [pc, #48]	@ (800500c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fdc:	fb02 f303 	mul.w	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	613b      	str	r3, [r7, #16]
      break;
 8004fe6:	e002      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fea:	613b      	str	r3, [r7, #16]
      break;
 8004fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fee:	693b      	ldr	r3, [r7, #16]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40021000 	.word	0x40021000
 8005000:	007a1200 	.word	0x007a1200
 8005004:	08008c40 	.word	0x08008c40
 8005008:	08008c50 	.word	0x08008c50
 800500c:	003d0900 	.word	0x003d0900

08005010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005014:	4b02      	ldr	r3, [pc, #8]	@ (8005020 <HAL_RCC_GetHCLKFreq+0x10>)
 8005016:	681b      	ldr	r3, [r3, #0]
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr
 8005020:	20000008 	.word	0x20000008

08005024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005028:	f7ff fff2 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	@ (8005048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000
 8005048:	08008c38 	.word	0x08008c38

0800504c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005050:	f7ff ffde 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b05      	ldr	r3, [pc, #20]	@ (800506c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	0adb      	lsrs	r3, r3, #11
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	4903      	ldr	r1, [pc, #12]	@ (8005070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005062:	5ccb      	ldrb	r3, [r1, r3]
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40021000 	.word	0x40021000
 8005070:	08008c38 	.word	0x08008c38

08005074 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800507c:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <RCC_Delay+0x34>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0a      	ldr	r2, [pc, #40]	@ (80050ac <RCC_Delay+0x38>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0a5b      	lsrs	r3, r3, #9
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005090:	bf00      	nop
  }
  while (Delay --);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1e5a      	subs	r2, r3, #1
 8005096:	60fa      	str	r2, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f9      	bne.n	8005090 <RCC_Delay+0x1c>
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	20000008 	.word	0x20000008
 80050ac:	10624dd3 	.word	0x10624dd3

080050b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d07d      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80050cc:	2300      	movs	r3, #0
 80050ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e6:	61d3      	str	r3, [r2, #28]
 80050e8:	4b49      	ldr	r3, [pc, #292]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f4:	2301      	movs	r3, #1
 80050f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f8:	4b46      	ldr	r3, [pc, #280]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d118      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005104:	4b43      	ldr	r3, [pc, #268]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a42      	ldr	r2, [pc, #264]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800510a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005110:	f7fd fa14 	bl	800253c <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005116:	e008      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005118:	f7fd fa10 	bl	800253c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	@ 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e06d      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512a:	4b3a      	ldr	r3, [pc, #232]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005136:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800513e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d02e      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d027      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005154:	4b2e      	ldr	r3, [pc, #184]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800515c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800515e:	4b2e      	ldr	r3, [pc, #184]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005164:	4b2c      	ldr	r3, [pc, #176]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800516a:	4a29      	ldr	r2, [pc, #164]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d014      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517a:	f7fd f9df 	bl	800253c <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005180:	e00a      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005182:	f7fd f9db 	bl	800253c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e036      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005198:	4b1d      	ldr	r3, [pc, #116]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0ee      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4917      	ldr	r1, [pc, #92]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d105      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051bc:	4b14      	ldr	r3, [pc, #80]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	4a13      	ldr	r2, [pc, #76]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	490b      	ldr	r1, [pc, #44]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d008      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f2:	4b07      	ldr	r3, [pc, #28]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	4904      	ldr	r1, [pc, #16]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005200:	4313      	orrs	r3, r2
 8005202:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
 8005214:	40007000 	.word	0x40007000
 8005218:	42420440 	.word	0x42420440

0800521c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	2300      	movs	r3, #0
 800522e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b10      	cmp	r3, #16
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b10      	cmp	r3, #16
 8005242:	f200 808a 	bhi.w	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d045      	beq.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d075      	beq.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005252:	e082      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005254:	4b46      	ldr	r3, [pc, #280]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800525a:	4b45      	ldr	r3, [pc, #276]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d07b      	beq.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	0c9b      	lsrs	r3, r3, #18
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	4a41      	ldr	r2, [pc, #260]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005270:	5cd3      	ldrb	r3, [r2, r3]
 8005272:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d015      	beq.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800527e:	4b3c      	ldr	r3, [pc, #240]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	0c5b      	lsrs	r3, r3, #17
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	4a3b      	ldr	r2, [pc, #236]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800528a:	5cd3      	ldrb	r3, [r2, r3]
 800528c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005298:	4a38      	ldr	r2, [pc, #224]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	e004      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4a34      	ldr	r2, [pc, #208]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
 80052b2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80052b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052c0:	d102      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	61bb      	str	r3, [r7, #24]
      break;
 80052c6:	e04a      	b.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	61bb      	str	r3, [r7, #24]
      break;
 80052d6:	e042      	b.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80052d8:	4b25      	ldr	r3, [pc, #148]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e8:	d108      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80052f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e01f      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005306:	d109      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005308:	4b19      	ldr	r3, [pc, #100]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005314:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	e00f      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005326:	d11c      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005328:	4b11      	ldr	r3, [pc, #68]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d016      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005334:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005338:	61bb      	str	r3, [r7, #24]
      break;
 800533a:	e012      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800533c:	e011      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800533e:	f7ff fe85 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 8005342:	4602      	mov	r2, r0
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	0b9b      	lsrs	r3, r3, #14
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	3301      	adds	r3, #1
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	61bb      	str	r3, [r7, #24]
      break;
 8005358:	e004      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800535a:	bf00      	nop
 800535c:	e002      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800535e:	bf00      	nop
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005362:	bf00      	nop
    }
  }
  return (frequency);
 8005364:	69bb      	ldr	r3, [r7, #24]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
 8005374:	08008c54 	.word	0x08008c54
 8005378:	08008c64 	.word	0x08008c64
 800537c:	007a1200 	.word	0x007a1200
 8005380:	003d0900 	.word	0x003d0900
 8005384:	aaaaaaab 	.word	0xaaaaaaab

08005388 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e07a      	b.n	8005494 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	7c5b      	ldrb	r3, [r3, #17]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fc fe58 	bl	8002064 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f9e0 	bl	8005780 <HAL_RTC_WaitForSynchro>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2204      	movs	r2, #4
 80053ca:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e061      	b.n	8005494 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa99 	bl	8005908 <RTC_EnterInitMode>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2204      	movs	r2, #4
 80053e0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e056      	b.n	8005494 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0207 	bic.w	r2, r2, #7
 80053f4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80053fe:	4b27      	ldr	r3, [pc, #156]	@ (800549c <HAL_RTC_Init+0x114>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	4a26      	ldr	r2, [pc, #152]	@ (800549c <HAL_RTC_Init+0x114>)
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800540a:	4b24      	ldr	r3, [pc, #144]	@ (800549c <HAL_RTC_Init+0x114>)
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	4921      	ldr	r1, [pc, #132]	@ (800549c <HAL_RTC_Init+0x114>)
 8005418:	4313      	orrs	r3, r2
 800541a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d003      	beq.n	800542e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e00e      	b.n	800544c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800542e:	2001      	movs	r0, #1
 8005430:	f7ff fef4 	bl	800521c <HAL_RCCEx_GetPeriphCLKFreq>
 8005434:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d104      	bne.n	8005446 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2204      	movs	r2, #4
 8005440:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e026      	b.n	8005494 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3b01      	subs	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	0c1a      	lsrs	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f002 020f 	and.w	r2, r2, #15
 8005458:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	b292      	uxth	r2, r2
 8005462:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fa77 	bl	8005958 <RTC_ExitInitMode>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2204      	movs	r2, #4
 8005474:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e00c      	b.n	8005494 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005492:	2300      	movs	r3, #0
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40006c00 	.word	0x40006c00

080054a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_RTC_SetTime+0x20>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e080      	b.n	80055c6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	7c1b      	ldrb	r3, [r3, #16]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_RTC_SetTime+0x30>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e07a      	b.n	80055c6 <HAL_RTC_SetTime+0x126>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2202      	movs	r2, #2
 80054da:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d113      	bne.n	800550a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80054ec:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	4619      	mov	r1, r3
 80054f6:	460b      	mov	r3, r1
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a5b      	subs	r3, r3, r1
 80054fc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80054fe:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005504:	4413      	add	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e01e      	b.n	8005548 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fa67 	bl	80059e2 <RTC_Bcd2ToByte>
 8005514:	4603      	mov	r3, r0
 8005516:	461a      	mov	r2, r3
 8005518:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800551c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fa5c 	bl	80059e2 <RTC_Bcd2ToByte>
 800552a:	4603      	mov	r3, r0
 800552c:	461a      	mov	r2, r3
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005536:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	789b      	ldrb	r3, [r3, #2]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fa50 	bl	80059e2 <RTC_Bcd2ToByte>
 8005542:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005544:	4423      	add	r3, r4
 8005546:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f975 	bl	800583a <RTC_WriteTimeCounter>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2204      	movs	r2, #4
 800555a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e02f      	b.n	80055c6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0205 	bic.w	r2, r2, #5
 8005574:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f986 	bl	8005888 <RTC_ReadAlarmCounter>
 800557c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d018      	beq.n	80055b8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	429a      	cmp	r2, r3
 800558c:	d214      	bcs.n	80055b8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005594:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005598:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800559a:	6939      	ldr	r1, [r7, #16]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f98c 	bl	80058ba <RTC_WriteAlarmCounter>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2204      	movs	r2, #4
 80055ac:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e006      	b.n	80055c6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd90      	pop	{r4, r7, pc}
	...

080055d0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_RTC_GetTime+0x28>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0b5      	b.n	8005768 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e0ac      	b.n	8005768 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f8e3 	bl	80057da <RTC_ReadTimeCounter>
 8005614:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	4a55      	ldr	r2, [pc, #340]	@ (8005770 <HAL_RTC_GetTime+0x1a0>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	0adb      	lsrs	r3, r3, #11
 8005620:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4b52      	ldr	r3, [pc, #328]	@ (8005770 <HAL_RTC_GetTime+0x1a0>)
 8005626:	fba3 1302 	umull	r1, r3, r3, r2
 800562a:	0adb      	lsrs	r3, r3, #11
 800562c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	4a4f      	ldr	r2, [pc, #316]	@ (8005774 <HAL_RTC_GetTime+0x1a4>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	4a4a      	ldr	r2, [pc, #296]	@ (8005770 <HAL_RTC_GetTime+0x1a0>)
 8005648:	fba2 1203 	umull	r1, r2, r2, r3
 800564c:	0ad2      	lsrs	r2, r2, #11
 800564e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005652:	fb01 f202 	mul.w	r2, r1, r2
 8005656:	1a9a      	subs	r2, r3, r2
 8005658:	4b46      	ldr	r3, [pc, #280]	@ (8005774 <HAL_RTC_GetTime+0x1a4>)
 800565a:	fba3 1302 	umull	r1, r3, r3, r2
 800565e:	0959      	lsrs	r1, r3, #5
 8005660:	460b      	mov	r3, r1
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	1a5b      	subs	r3, r3, r1
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	1ad1      	subs	r1, r2, r3
 800566a:	b2ca      	uxtb	r2, r1
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b17      	cmp	r3, #23
 8005674:	d955      	bls.n	8005722 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4a3f      	ldr	r2, [pc, #252]	@ (8005778 <HAL_RTC_GetTime+0x1a8>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005682:	6939      	ldr	r1, [r7, #16]
 8005684:	4b3c      	ldr	r3, [pc, #240]	@ (8005778 <HAL_RTC_GetTime+0x1a8>)
 8005686:	fba3 2301 	umull	r2, r3, r3, r1
 800568a:	091a      	lsrs	r2, r3, #4
 800568c:	4613      	mov	r3, r2
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4413      	add	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1aca      	subs	r2, r1, r3
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f8f3 	bl	8005888 <RTC_ReadAlarmCounter>
 80056a2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d008      	beq.n	80056be <HAL_RTC_GetTime+0xee>
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d904      	bls.n	80056be <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	e002      	b.n	80056c4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295
 80056c2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4a2d      	ldr	r2, [pc, #180]	@ (800577c <HAL_RTC_GetTime+0x1ac>)
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80056d2:	69b9      	ldr	r1, [r7, #24]
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f8b0 	bl	800583a <RTC_WriteTimeCounter>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e041      	b.n	8005768 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d00c      	beq.n	8005706 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	4413      	add	r3, r2
 80056f2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80056f4:	69f9      	ldr	r1, [r7, #28]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f8df 	bl	80058ba <RTC_WriteAlarmCounter>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e030      	b.n	8005768 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005706:	69f9      	ldr	r1, [r7, #28]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f8d6 	bl	80058ba <RTC_WriteAlarmCounter>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e027      	b.n	8005768 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005718:	6979      	ldr	r1, [r7, #20]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f97e 	bl	8005a1c <RTC_DateUpdate>
 8005720:	e003      	b.n	800572a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01a      	beq.n	8005766 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f937 	bl	80059a8 <RTC_ByteToBcd2>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f92e 	bl	80059a8 <RTC_ByteToBcd2>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	789b      	ldrb	r3, [r3, #2]
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f925 	bl	80059a8 <RTC_ByteToBcd2>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	91a2b3c5 	.word	0x91a2b3c5
 8005774:	88888889 	.word	0x88888889
 8005778:	aaaaaaab 	.word	0xaaaaaaab
 800577c:	00015180 	.word	0x00015180

08005780 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e01d      	b.n	80057d2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0208 	bic.w	r2, r2, #8
 80057a4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80057a6:	f7fc fec9 	bl	800253c <HAL_GetTick>
 80057aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80057ac:	e009      	b.n	80057c2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80057ae:	f7fc fec5 	bl	800253c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057bc:	d901      	bls.n	80057c2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e007      	b.n	80057d2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ee      	beq.n	80057ae <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80057da:	b480      	push	{r7}
 80057dc:	b087      	sub	sp, #28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	827b      	strh	r3, [r7, #18]
 80057e6:	2300      	movs	r3, #0
 80057e8:	823b      	strh	r3, [r7, #16]
 80057ea:	2300      	movs	r3, #0
 80057ec:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800580a:	8a7a      	ldrh	r2, [r7, #18]
 800580c:	8a3b      	ldrh	r3, [r7, #16]
 800580e:	429a      	cmp	r2, r3
 8005810:	d008      	beq.n	8005824 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005812:	8a3b      	ldrh	r3, [r7, #16]
 8005814:	041a      	lsls	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	b29b      	uxth	r3, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	e004      	b.n	800582e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005824:	8a7b      	ldrh	r3, [r7, #18]
 8005826:	041a      	lsls	r2, r3, #16
 8005828:	89fb      	ldrh	r3, [r7, #14]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800582e:	697b      	ldr	r3, [r7, #20]
}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f85d 	bl	8005908 <RTC_EnterInitMode>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
 8005858:	e011      	b.n	800587e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	0c12      	lsrs	r2, r2, #16
 8005862:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	b292      	uxth	r2, r2
 800586c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f872 	bl	8005958 <RTC_ExitInitMode>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	81fb      	strh	r3, [r7, #14]
 8005894:	2300      	movs	r3, #0
 8005896:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80058a8:	89fb      	ldrh	r3, [r7, #14]
 80058aa:	041a      	lsls	r2, r3, #16
 80058ac:	89bb      	ldrh	r3, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f81d 	bl	8005908 <RTC_EnterInitMode>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
 80058d8:	e011      	b.n	80058fe <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	0c12      	lsrs	r2, r2, #16
 80058e2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	b292      	uxth	r2, r2
 80058ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f832 	bl	8005958 <RTC_ExitInitMode>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005914:	f7fc fe12 	bl	800253c <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800591a:	e009      	b.n	8005930 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800591c:	f7fc fe0e 	bl	800253c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800592a:	d901      	bls.n	8005930 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e00f      	b.n	8005950 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0ee      	beq.n	800591c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0210 	orr.w	r2, r2, #16
 800594c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0210 	bic.w	r2, r2, #16
 8005972:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005974:	f7fc fde2 	bl	800253c <HAL_GetTick>
 8005978:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800597a:	e009      	b.n	8005990 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800597c:	f7fc fdde 	bl	800253c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800598a:	d901      	bls.n	8005990 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e007      	b.n	80059a0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0ee      	beq.n	800597c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80059b6:	e005      	b.n	80059c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	3b0a      	subs	r3, #10
 80059c2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	2b09      	cmp	r3, #9
 80059c8:	d8f6      	bhi.n	80059b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	b2db      	uxtb	r3, r3
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	4603      	mov	r3, r0
 80059ea:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	b2db      	uxtb	r3, r3
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	7bdb      	ldrb	r3, [r3, #15]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	7b5b      	ldrb	r3, [r3, #13]
 8005a40:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7b9b      	ldrb	r3, [r3, #14]
 8005a46:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60bb      	str	r3, [r7, #8]
 8005a4c:	e06f      	b.n	8005b2e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d011      	beq.n	8005a78 <RTC_DateUpdate+0x5c>
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d00e      	beq.n	8005a78 <RTC_DateUpdate+0x5c>
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d00b      	beq.n	8005a78 <RTC_DateUpdate+0x5c>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b07      	cmp	r3, #7
 8005a64:	d008      	beq.n	8005a78 <RTC_DateUpdate+0x5c>
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d005      	beq.n	8005a78 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b0a      	cmp	r3, #10
 8005a70:	d002      	beq.n	8005a78 <RTC_DateUpdate+0x5c>
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	d117      	bne.n	8005aa8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b1e      	cmp	r3, #30
 8005a7c:	d803      	bhi.n	8005a86 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005a84:	e050      	b.n	8005b28 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b0c      	cmp	r3, #12
 8005a8a:	d005      	beq.n	8005a98 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a92:	2301      	movs	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005a96:	e047      	b.n	8005b28 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
          year++;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005aa6:	e03f      	b.n	8005b28 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d008      	beq.n	8005ac0 <RTC_DateUpdate+0xa4>
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b06      	cmp	r3, #6
 8005ab2:	d005      	beq.n	8005ac0 <RTC_DateUpdate+0xa4>
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b09      	cmp	r3, #9
 8005ab8:	d002      	beq.n	8005ac0 <RTC_DateUpdate+0xa4>
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b0b      	cmp	r3, #11
 8005abe:	d10c      	bne.n	8005ada <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b1d      	cmp	r3, #29
 8005ac4:	d803      	bhi.n	8005ace <RTC_DateUpdate+0xb2>
      {
        day++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005acc:	e02c      	b.n	8005b28 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005ad8:	e026      	b.n	8005b28 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d123      	bne.n	8005b28 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b1b      	cmp	r3, #27
 8005ae4:	d803      	bhi.n	8005aee <RTC_DateUpdate+0xd2>
      {
        day++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e01c      	b.n	8005b28 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b1c      	cmp	r3, #28
 8005af2:	d111      	bne.n	8005b18 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f839 	bl	8005b70 <RTC_IsLeapYear>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <RTC_DateUpdate+0xf0>
        {
          day++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	e00d      	b.n	8005b28 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b12:	2301      	movs	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e007      	b.n	8005b28 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b1d      	cmp	r3, #29
 8005b1c:	d104      	bne.n	8005b28 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3301      	adds	r3, #1
 8005b22:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005b24:	2301      	movs	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d38b      	bcc.n	8005a4e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	6978      	ldr	r0, [r7, #20]
 8005b5a:	f000 f83b 	bl	8005bd4 <RTC_WeekDayNum>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	731a      	strb	r2, [r3, #12]
}
 8005b66:	bf00      	nop
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e01d      	b.n	8005bc6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	4a10      	ldr	r2, [pc, #64]	@ (8005bd0 <RTC_IsLeapYear+0x60>)
 8005b8e:	fba2 1203 	umull	r1, r2, r2, r3
 8005b92:	0952      	lsrs	r2, r2, #5
 8005b94:	2164      	movs	r1, #100	@ 0x64
 8005b96:	fb01 f202 	mul.w	r2, r1, r2
 8005b9a:	1a9b      	subs	r3, r3, r2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e00f      	b.n	8005bc6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <RTC_IsLeapYear+0x60>)
 8005baa:	fba2 1203 	umull	r1, r2, r2, r3
 8005bae:	09d2      	lsrs	r2, r2, #7
 8005bb0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005bb4:	fb01 f202 	mul.w	r2, r1, r2
 8005bb8:	1a9b      	subs	r3, r3, r2
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005bc4:	2300      	movs	r3, #0
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr
 8005bd0:	51eb851f 	.word	0x51eb851f

08005bd4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
 8005be0:	4613      	mov	r3, r2
 8005be2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60bb      	str	r3, [r7, #8]
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005bf2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d82d      	bhi.n	8005c56 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	4a2c      	ldr	r2, [pc, #176]	@ (8005cb8 <RTC_WeekDayNum+0xe4>)
 8005c08:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0c:	085a      	lsrs	r2, r3, #1
 8005c0e:	78bb      	ldrb	r3, [r7, #2]
 8005c10:	441a      	add	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	441a      	add	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	089b      	lsrs	r3, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	4926      	ldr	r1, [pc, #152]	@ (8005cbc <RTC_WeekDayNum+0xe8>)
 8005c24:	fba1 1303 	umull	r1, r3, r1, r3
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	4922      	ldr	r1, [pc, #136]	@ (8005cbc <RTC_WeekDayNum+0xe8>)
 8005c32:	fba1 1303 	umull	r1, r3, r1, r3
 8005c36:	09db      	lsrs	r3, r3, #7
 8005c38:	4413      	add	r3, r2
 8005c3a:	1d1a      	adds	r2, r3, #4
 8005c3c:	4b20      	ldr	r3, [pc, #128]	@ (8005cc0 <RTC_WeekDayNum+0xec>)
 8005c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c42:	1ad1      	subs	r1, r2, r3
 8005c44:	0849      	lsrs	r1, r1, #1
 8005c46:	440b      	add	r3, r1
 8005c48:	0899      	lsrs	r1, r3, #2
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	1a5b      	subs	r3, r3, r1
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e029      	b.n	8005caa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005c56:	78fa      	ldrb	r2, [r7, #3]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	4a15      	ldr	r2, [pc, #84]	@ (8005cb8 <RTC_WeekDayNum+0xe4>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	085a      	lsrs	r2, r3, #1
 8005c6a:	78bb      	ldrb	r3, [r7, #2]
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	441a      	add	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	089b      	lsrs	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4910      	ldr	r1, [pc, #64]	@ (8005cbc <RTC_WeekDayNum+0xe8>)
 8005c7c:	fba1 1303 	umull	r1, r3, r1, r3
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	490d      	ldr	r1, [pc, #52]	@ (8005cbc <RTC_WeekDayNum+0xe8>)
 8005c88:	fba1 1303 	umull	r1, r3, r1, r3
 8005c8c:	09db      	lsrs	r3, r3, #7
 8005c8e:	4413      	add	r3, r2
 8005c90:	1c9a      	adds	r2, r3, #2
 8005c92:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <RTC_WeekDayNum+0xec>)
 8005c94:	fba3 1302 	umull	r1, r3, r3, r2
 8005c98:	1ad1      	subs	r1, r2, r3
 8005c9a:	0849      	lsrs	r1, r1, #1
 8005c9c:	440b      	add	r3, r1
 8005c9e:	0899      	lsrs	r1, r3, #2
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	1a5b      	subs	r3, r3, r1
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	b2db      	uxtb	r3, r3
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr
 8005cb8:	38e38e39 	.word	0x38e38e39
 8005cbc:	51eb851f 	.word	0x51eb851f
 8005cc0:	24924925 	.word	0x24924925

08005cc4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8005cd4:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <HAL_RTCEx_BKUPWrite+0x30>)
 8005cd6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	b292      	uxth	r2, r2
 8005ce8:	601a      	str	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	40006c00 	.word	0x40006c00

08005cf8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8005d0a:	4b08      	ldr	r3, [pc, #32]	@ (8005d2c <HAL_RTCEx_BKUPRead+0x34>)
 8005d0c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8005d20:	68bb      	ldr	r3, [r7, #8]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr
 8005d2c:	40006c00 	.word	0x40006c00

08005d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e041      	b.n	8005dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc f9a8 	bl	80020ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f000 fa8a 	bl	8006288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e03a      	b.n	8005e5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a18      	ldr	r2, [pc, #96]	@ (8005e68 <HAL_TIM_Base_Start_IT+0x98>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00e      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x58>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e12:	d009      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x58>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a14      	ldr	r2, [pc, #80]	@ (8005e6c <HAL_TIM_Base_Start_IT+0x9c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x58>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a13      	ldr	r2, [pc, #76]	@ (8005e70 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d111      	bne.n	8005e4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b06      	cmp	r3, #6
 8005e38:	d010      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	e007      	b.n	8005e5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800

08005e74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10f      	bne.n	8005ebc <HAL_TIM_Base_Stop_IT+0x48>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	f240 4344 	movw	r3, #1092	@ 0x444
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d107      	bne.n	8005ebc <HAL_TIM_Base_Stop_IT+0x48>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01b      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0202 	mvn.w	r2, #2
 8005f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f998 	bl	8006250 <HAL_TIM_IC_CaptureCallback>
 8005f20:	e005      	b.n	8005f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f98b 	bl	800623e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f99a 	bl	8006262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d020      	beq.n	8005f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0204 	mvn.w	r2, #4
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f972 	bl	8006250 <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f965 	bl	800623e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f974 	bl	8006262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d020      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01b      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0208 	mvn.w	r2, #8
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f94c 	bl	8006250 <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f93f 	bl	800623e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f94e 	bl	8006262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0210 	mvn.w	r2, #16
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2208      	movs	r2, #8
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f926 	bl	8006250 <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f919 	bl	800623e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f928 	bl	8006262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0201 	mvn.w	r2, #1
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fb f942 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa7f 	bl	800655e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8f8 	bl	8006274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0220 	mvn.w	r2, #32
 80060a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa52 	bl	800654c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_TIM_ConfigClockSource+0x1c>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e0b4      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x186>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006104:	d03e      	beq.n	8006184 <HAL_TIM_ConfigClockSource+0xd4>
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800610a:	f200 8087 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006112:	f000 8086 	beq.w	8006222 <HAL_TIM_ConfigClockSource+0x172>
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611a:	d87f      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b70      	cmp	r3, #112	@ 0x70
 800611e:	d01a      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0xa6>
 8006120:	2b70      	cmp	r3, #112	@ 0x70
 8006122:	d87b      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b60      	cmp	r3, #96	@ 0x60
 8006126:	d050      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x11a>
 8006128:	2b60      	cmp	r3, #96	@ 0x60
 800612a:	d877      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b50      	cmp	r3, #80	@ 0x50
 800612e:	d03c      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0xfa>
 8006130:	2b50      	cmp	r3, #80	@ 0x50
 8006132:	d873      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d058      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x13a>
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	d86f      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b30      	cmp	r3, #48	@ 0x30
 800613e:	d064      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15a>
 8006140:	2b30      	cmp	r3, #48	@ 0x30
 8006142:	d86b      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b20      	cmp	r3, #32
 8006146:	d060      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15a>
 8006148:	2b20      	cmp	r3, #32
 800614a:	d867      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d05c      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15a>
 8006150:	2b10      	cmp	r3, #16
 8006152:	d05a      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15a>
 8006154:	e062      	b.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006166:	f000 f974 	bl	8006452 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	609a      	str	r2, [r3, #8]
      break;
 8006182:	e04f      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006194:	f000 f95d 	bl	8006452 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061a6:	609a      	str	r2, [r3, #8]
      break;
 80061a8:	e03c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 f8d4 	bl	8006364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2150      	movs	r1, #80	@ 0x50
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f92b 	bl	800641e <TIM_ITRx_SetConfig>
      break;
 80061c8:	e02c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 f8f2 	bl	80063c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2160      	movs	r1, #96	@ 0x60
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f91b 	bl	800641e <TIM_ITRx_SetConfig>
      break;
 80061e8:	e01c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	461a      	mov	r2, r3
 80061f8:	f000 f8b4 	bl	8006364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2140      	movs	r1, #64	@ 0x40
 8006202:	4618      	mov	r0, r3
 8006204:	f000 f90b 	bl	800641e <TIM_ITRx_SetConfig>
      break;
 8006208:	e00c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f000 f902 	bl	800641e <TIM_ITRx_SetConfig>
      break;
 800621a:	e003      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e000      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr
	...

08006288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a2f      	ldr	r2, [pc, #188]	@ (8006358 <TIM_Base_SetConfig+0xd0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_Base_SetConfig+0x30>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062a6:	d007      	beq.n	80062b8 <TIM_Base_SetConfig+0x30>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a2c      	ldr	r2, [pc, #176]	@ (800635c <TIM_Base_SetConfig+0xd4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_Base_SetConfig+0x30>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006360 <TIM_Base_SetConfig+0xd8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a22      	ldr	r2, [pc, #136]	@ (8006358 <TIM_Base_SetConfig+0xd0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00b      	beq.n	80062ea <TIM_Base_SetConfig+0x62>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d8:	d007      	beq.n	80062ea <TIM_Base_SetConfig+0x62>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1f      	ldr	r2, [pc, #124]	@ (800635c <TIM_Base_SetConfig+0xd4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d003      	beq.n	80062ea <TIM_Base_SetConfig+0x62>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006360 <TIM_Base_SetConfig+0xd8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d108      	bne.n	80062fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a0d      	ldr	r2, [pc, #52]	@ (8006358 <TIM_Base_SetConfig+0xd0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d103      	bne.n	8006330 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f023 0201 	bic.w	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]
  }
}
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800

08006364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800638e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 030a 	bic.w	r3, r3, #10
 80063a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f023 0210 	bic.w	r2, r3, #16
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	031b      	lsls	r3, r3, #12
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	621a      	str	r2, [r3, #32]
}
 8006414:	bf00      	nop
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	f043 0307 	orr.w	r3, r3, #7
 8006440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	609a      	str	r2, [r3, #8]
}
 8006448:	bf00      	nop
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr

08006452 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006452:	b480      	push	{r7}
 8006454:	b087      	sub	sp, #28
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800646c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	021a      	lsls	r2, r3, #8
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	431a      	orrs	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4313      	orrs	r3, r2
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	609a      	str	r2, [r3, #8]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e046      	b.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a16      	ldr	r2, [pc, #88]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f4:	d009      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a12      	ldr	r2, [pc, #72]	@ (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a10      	ldr	r2, [pc, #64]	@ (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d10c      	bne.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	4313      	orrs	r3, r2
 800651a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800

0800654c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr

0800655e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e042      	b.n	8006608 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fb fdc8 	bl	800212c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	@ 0x24
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fdb7 	bl	8007128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af02      	add	r7, sp, #8
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	4613      	mov	r3, r2
 800661e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b20      	cmp	r3, #32
 800662e:	d175      	bne.n	800671c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_UART_Transmit+0x2c>
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e06e      	b.n	800671e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2221      	movs	r2, #33	@ 0x21
 800664a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800664e:	f7fb ff75 	bl	800253c <HAL_GetTick>
 8006652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	88fa      	ldrh	r2, [r7, #6]
 8006658:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	88fa      	ldrh	r2, [r7, #6]
 800665e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006668:	d108      	bne.n	800667c <HAL_UART_Transmit+0x6c>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	e003      	b.n	8006684 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006684:	e02e      	b.n	80066e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	2180      	movs	r1, #128	@ 0x80
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fb1c 	bl	8006cce <UART_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e03a      	b.n	800671e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	3302      	adds	r3, #2
 80066c2:	61bb      	str	r3, [r7, #24]
 80066c4:	e007      	b.n	80066d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	781a      	ldrb	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1cb      	bne.n	8006686 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2200      	movs	r2, #0
 80066f6:	2140      	movs	r1, #64	@ 0x40
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 fae8 	bl	8006cce <UART_WaitOnFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e006      	b.n	800671e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	4618      	mov	r0, r3
 8006720:	3720      	adds	r7, #32
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	4613      	mov	r3, r2
 8006732:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b20      	cmp	r3, #32
 800673e:	d112      	bne.n	8006766 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HAL_UART_Receive_IT+0x26>
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e00b      	b.n	8006768 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	461a      	mov	r2, r3
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fb0f 	bl	8006d80 <UART_Start_Receive_IT>
 8006762:	4603      	mov	r3, r0
 8006764:	e000      	b.n	8006768 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006766:	2302      	movs	r3, #2
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b0ba      	sub	sp, #232	@ 0xe8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006796:	2300      	movs	r3, #0
 8006798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800679c:	2300      	movs	r3, #0
 800679e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80067ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10f      	bne.n	80067d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <HAL_UART_IRQHandler+0x66>
 80067c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fbec 	bl	8006fac <UART_Receive_IT>
      return;
 80067d4:	e25b      	b.n	8006c8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80de 	beq.w	800699c <HAL_UART_IRQHandler+0x22c>
 80067e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80d1 	beq.w	800699c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <HAL_UART_IRQHandler+0xae>
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	f043 0201 	orr.w	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_UART_IRQHandler+0xd2>
 800682a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683a:	f043 0202 	orr.w	r2, r3, #2
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <HAL_UART_IRQHandler+0xf6>
 800684e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685e:	f043 0204 	orr.w	r2, r3, #4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d011      	beq.n	8006896 <HAL_UART_IRQHandler+0x126>
 8006872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800687e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688e:	f043 0208 	orr.w	r2, r3, #8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 81f2 	beq.w	8006c84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_UART_IRQHandler+0x14e>
 80068ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb77 	bl	8006fac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d103      	bne.n	80068ea <HAL_UART_IRQHandler+0x17a>
 80068e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d04f      	beq.n	800698a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa81 	bl	8006df2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d041      	beq.n	8006982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3314      	adds	r3, #20
 8006904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800691c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3314      	adds	r3, #20
 8006926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800692a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800692e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1d9      	bne.n	80068fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d013      	beq.n	800697a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006956:	4a7e      	ldr	r2, [pc, #504]	@ (8006b50 <HAL_UART_IRQHandler+0x3e0>)
 8006958:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695e:	4618      	mov	r0, r3
 8006960:	f7fc fb60 	bl	8003024 <HAL_DMA_Abort_IT>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800696e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006978:	e00e      	b.n	8006998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f993 	bl	8006ca6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	e00a      	b.n	8006998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f98f 	bl	8006ca6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006988:	e006      	b.n	8006998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f98b 	bl	8006ca6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006996:	e175      	b.n	8006c84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	bf00      	nop
    return;
 800699a:	e173      	b.n	8006c84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f040 814f 	bne.w	8006c44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8148 	beq.w	8006c44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8141 	beq.w	8006c44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80b6 	beq.w	8006b54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8145 	beq.w	8006c88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a06:	429a      	cmp	r2, r3
 8006a08:	f080 813e 	bcs.w	8006c88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	f000 8088 	beq.w	8006b30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1d9      	bne.n	8006a20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3314      	adds	r3, #20
 8006a72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e1      	bne.n	8006a6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006acc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ace:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ad2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e3      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b00:	f023 0310 	bic.w	r3, r3, #16
 8006b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e3      	bne.n	8006aee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fc fa3f 	bl	8002fae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8b6 	bl	8006cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b4c:	e09c      	b.n	8006c88 <HAL_UART_IRQHandler+0x518>
 8006b4e:	bf00      	nop
 8006b50:	08006eb7 	.word	0x08006eb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 808e 	beq.w	8006c8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8089 	beq.w	8006c8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e3      	bne.n	8006b7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3314      	adds	r3, #20
 8006bd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e3      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0310 	bic.w	r3, r3, #16
 8006c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c1c:	61fa      	str	r2, [r7, #28]
 8006c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	69b9      	ldr	r1, [r7, #24]
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	617b      	str	r3, [r7, #20]
   return(result);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e3      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f83b 	bl	8006cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c42:	e023      	b.n	8006c8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <HAL_UART_IRQHandler+0x4f4>
 8006c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f93e 	bl	8006ede <UART_Transmit_IT>
    return;
 8006c62:	e014      	b.n	8006c8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00e      	beq.n	8006c8e <HAL_UART_IRQHandler+0x51e>
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d008      	beq.n	8006c8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f97d 	bl	8006f7c <UART_EndTransmit_IT>
    return;
 8006c82:	e004      	b.n	8006c8e <HAL_UART_IRQHandler+0x51e>
    return;
 8006c84:	bf00      	nop
 8006c86:	e002      	b.n	8006c8e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c88:	bf00      	nop
 8006c8a:	e000      	b.n	8006c8e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c8c:	bf00      	nop
  }
}
 8006c8e:	37e8      	adds	r7, #232	@ 0xe8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cde:	e03b      	b.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	d037      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce8:	f7fb fc28 	bl	800253c <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	6a3a      	ldr	r2, [r7, #32]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e03a      	b.n	8006d78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d023      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b80      	cmp	r3, #128	@ 0x80
 8006d14:	d020      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b40      	cmp	r3, #64	@ 0x40
 8006d1a:	d01d      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d116      	bne.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f856 	bl	8006df2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2208      	movs	r2, #8
 8006d4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e00f      	b.n	8006d78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4013      	ands	r3, r2
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	bf0c      	ite	eq
 8006d68:	2301      	moveq	r3, #1
 8006d6a:	2300      	movne	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d0b4      	beq.n	8006ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2222      	movs	r2, #34	@ 0x22
 8006daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d007      	beq.n	8006dc6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dc4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695a      	ldr	r2, [r3, #20]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0201 	orr.w	r2, r2, #1
 8006dd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0220 	orr.w	r2, r2, #32
 8006de4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b095      	sub	sp, #84	@ 0x54
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	330c      	adds	r3, #12
 8006e18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e5      	bne.n	8006dfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3314      	adds	r3, #20
 8006e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f023 0301 	bic.w	r3, r3, #1
 8006e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3314      	adds	r3, #20
 8006e4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e5      	bne.n	8006e2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d119      	bne.n	8006e9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	330c      	adds	r3, #12
 8006e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f023 0310 	bic.w	r3, r3, #16
 8006e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	330c      	adds	r3, #12
 8006e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e8a:	61ba      	str	r2, [r7, #24]
 8006e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	6979      	ldr	r1, [r7, #20]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	613b      	str	r3, [r7, #16]
   return(result);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e5      	bne.n	8006e6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006eac:	bf00      	nop
 8006eae:	3754      	adds	r7, #84	@ 0x54
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr

08006eb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff fee8 	bl	8006ca6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b21      	cmp	r3, #33	@ 0x21
 8006ef0:	d13e      	bne.n	8006f70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006efa:	d114      	bne.n	8006f26 <UART_Transmit_IT+0x48>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d110      	bne.n	8006f26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	1c9a      	adds	r2, r3, #2
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	621a      	str	r2, [r3, #32]
 8006f24:	e008      	b.n	8006f38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	1c59      	adds	r1, r3, #1
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6211      	str	r1, [r2, #32]
 8006f30:	781a      	ldrb	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4619      	mov	r1, r3
 8006f46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10f      	bne.n	8006f6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e000      	b.n	8006f72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr

08006f7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff fe79 	bl	8006c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08c      	sub	sp, #48	@ 0x30
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b22      	cmp	r3, #34	@ 0x22
 8006fbe:	f040 80ae 	bne.w	800711e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fca:	d117      	bne.n	8006ffc <UART_Receive_IT+0x50>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d113      	bne.n	8006ffc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	1c9a      	adds	r2, r3, #2
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ffa:	e026      	b.n	800704a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007000:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800700e:	d007      	beq.n	8007020 <UART_Receive_IT+0x74>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <UART_Receive_IT+0x82>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	b2da      	uxtb	r2, r3
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e008      	b.n	8007040 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703a:	b2da      	uxtb	r2, r3
 800703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29b      	uxth	r3, r3
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4619      	mov	r1, r3
 8007058:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800705a:	2b00      	cmp	r3, #0
 800705c:	d15d      	bne.n	800711a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0220 	bic.w	r2, r2, #32
 800706c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800707c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695a      	ldr	r2, [r3, #20]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0201 	bic.w	r2, r2, #1
 800708c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d135      	bne.n	8007110 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f023 0310 	bic.w	r3, r3, #16
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ca:	623a      	str	r2, [r7, #32]
 80070cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	69f9      	ldr	r1, [r7, #28]
 80070d0:	6a3a      	ldr	r2, [r7, #32]
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d10a      	bne.n	8007102 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fdd5 	bl	8006cb8 <HAL_UARTEx_RxEventCallback>
 800710e:	e002      	b.n	8007116 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fa fa77 	bl	8001604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e002      	b.n	8007120 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	e000      	b.n	8007120 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800711e:	2302      	movs	r3, #2
  }
}
 8007120:	4618      	mov	r0, r3
 8007122:	3730      	adds	r7, #48	@ 0x30
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007162:	f023 030c 	bic.w	r3, r3, #12
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	430b      	orrs	r3, r1
 800716e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a2c      	ldr	r2, [pc, #176]	@ (800723c <UART_SetConfig+0x114>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d103      	bne.n	8007198 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007190:	f7fd ff5c 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	e002      	b.n	800719e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007198:	f7fd ff44 	bl	8005024 <HAL_RCC_GetPCLK1Freq>
 800719c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009a      	lsls	r2, r3, #2
 80071a8:	441a      	add	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b4:	4a22      	ldr	r2, [pc, #136]	@ (8007240 <UART_SetConfig+0x118>)
 80071b6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	0119      	lsls	r1, r3, #4
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009a      	lsls	r2, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80071d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007240 <UART_SetConfig+0x118>)
 80071d6:	fba3 0302 	umull	r0, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2064      	movs	r0, #100	@ 0x64
 80071de:	fb00 f303 	mul.w	r3, r0, r3
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	3332      	adds	r3, #50	@ 0x32
 80071e8:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <UART_SetConfig+0x118>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071f4:	4419      	add	r1, r3
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	009a      	lsls	r2, r3, #2
 8007200:	441a      	add	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	fbb2 f2f3 	udiv	r2, r2, r3
 800720c:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <UART_SetConfig+0x118>)
 800720e:	fba3 0302 	umull	r0, r3, r3, r2
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	2064      	movs	r0, #100	@ 0x64
 8007216:	fb00 f303 	mul.w	r3, r0, r3
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	3332      	adds	r3, #50	@ 0x32
 8007220:	4a07      	ldr	r2, [pc, #28]	@ (8007240 <UART_SetConfig+0x118>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	f003 020f 	and.w	r2, r3, #15
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	440a      	add	r2, r1
 8007232:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40013800 	.word	0x40013800
 8007240:	51eb851f 	.word	0x51eb851f

08007244 <atoi>:
 8007244:	220a      	movs	r2, #10
 8007246:	2100      	movs	r1, #0
 8007248:	f000 b87a 	b.w	8007340 <strtol>

0800724c <_strtol_l.constprop.0>:
 800724c:	2b24      	cmp	r3, #36	@ 0x24
 800724e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007252:	4686      	mov	lr, r0
 8007254:	4690      	mov	r8, r2
 8007256:	d801      	bhi.n	800725c <_strtol_l.constprop.0+0x10>
 8007258:	2b01      	cmp	r3, #1
 800725a:	d106      	bne.n	800726a <_strtol_l.constprop.0+0x1e>
 800725c:	f000 f8b6 	bl	80073cc <__errno>
 8007260:	2316      	movs	r3, #22
 8007262:	6003      	str	r3, [r0, #0]
 8007264:	2000      	movs	r0, #0
 8007266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726a:	460d      	mov	r5, r1
 800726c:	4833      	ldr	r0, [pc, #204]	@ (800733c <_strtol_l.constprop.0+0xf0>)
 800726e:	462a      	mov	r2, r5
 8007270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007274:	5d06      	ldrb	r6, [r0, r4]
 8007276:	f016 0608 	ands.w	r6, r6, #8
 800727a:	d1f8      	bne.n	800726e <_strtol_l.constprop.0+0x22>
 800727c:	2c2d      	cmp	r4, #45	@ 0x2d
 800727e:	d12d      	bne.n	80072dc <_strtol_l.constprop.0+0x90>
 8007280:	2601      	movs	r6, #1
 8007282:	782c      	ldrb	r4, [r5, #0]
 8007284:	1c95      	adds	r5, r2, #2
 8007286:	f033 0210 	bics.w	r2, r3, #16
 800728a:	d109      	bne.n	80072a0 <_strtol_l.constprop.0+0x54>
 800728c:	2c30      	cmp	r4, #48	@ 0x30
 800728e:	d12a      	bne.n	80072e6 <_strtol_l.constprop.0+0x9a>
 8007290:	782a      	ldrb	r2, [r5, #0]
 8007292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007296:	2a58      	cmp	r2, #88	@ 0x58
 8007298:	d125      	bne.n	80072e6 <_strtol_l.constprop.0+0x9a>
 800729a:	2310      	movs	r3, #16
 800729c:	786c      	ldrb	r4, [r5, #1]
 800729e:	3502      	adds	r5, #2
 80072a0:	2200      	movs	r2, #0
 80072a2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072aa:	fbbc f9f3 	udiv	r9, ip, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80072b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072b8:	2f09      	cmp	r7, #9
 80072ba:	d81b      	bhi.n	80072f4 <_strtol_l.constprop.0+0xa8>
 80072bc:	463c      	mov	r4, r7
 80072be:	42a3      	cmp	r3, r4
 80072c0:	dd27      	ble.n	8007312 <_strtol_l.constprop.0+0xc6>
 80072c2:	1c57      	adds	r7, r2, #1
 80072c4:	d007      	beq.n	80072d6 <_strtol_l.constprop.0+0x8a>
 80072c6:	4581      	cmp	r9, r0
 80072c8:	d320      	bcc.n	800730c <_strtol_l.constprop.0+0xc0>
 80072ca:	d101      	bne.n	80072d0 <_strtol_l.constprop.0+0x84>
 80072cc:	45a2      	cmp	sl, r4
 80072ce:	db1d      	blt.n	800730c <_strtol_l.constprop.0+0xc0>
 80072d0:	2201      	movs	r2, #1
 80072d2:	fb00 4003 	mla	r0, r0, r3, r4
 80072d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072da:	e7eb      	b.n	80072b4 <_strtol_l.constprop.0+0x68>
 80072dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80072de:	bf04      	itt	eq
 80072e0:	782c      	ldrbeq	r4, [r5, #0]
 80072e2:	1c95      	addeq	r5, r2, #2
 80072e4:	e7cf      	b.n	8007286 <_strtol_l.constprop.0+0x3a>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1da      	bne.n	80072a0 <_strtol_l.constprop.0+0x54>
 80072ea:	2c30      	cmp	r4, #48	@ 0x30
 80072ec:	bf0c      	ite	eq
 80072ee:	2308      	moveq	r3, #8
 80072f0:	230a      	movne	r3, #10
 80072f2:	e7d5      	b.n	80072a0 <_strtol_l.constprop.0+0x54>
 80072f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80072f8:	2f19      	cmp	r7, #25
 80072fa:	d801      	bhi.n	8007300 <_strtol_l.constprop.0+0xb4>
 80072fc:	3c37      	subs	r4, #55	@ 0x37
 80072fe:	e7de      	b.n	80072be <_strtol_l.constprop.0+0x72>
 8007300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007304:	2f19      	cmp	r7, #25
 8007306:	d804      	bhi.n	8007312 <_strtol_l.constprop.0+0xc6>
 8007308:	3c57      	subs	r4, #87	@ 0x57
 800730a:	e7d8      	b.n	80072be <_strtol_l.constprop.0+0x72>
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	e7e1      	b.n	80072d6 <_strtol_l.constprop.0+0x8a>
 8007312:	1c53      	adds	r3, r2, #1
 8007314:	d108      	bne.n	8007328 <_strtol_l.constprop.0+0xdc>
 8007316:	2322      	movs	r3, #34	@ 0x22
 8007318:	4660      	mov	r0, ip
 800731a:	f8ce 3000 	str.w	r3, [lr]
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	d0a0      	beq.n	8007266 <_strtol_l.constprop.0+0x1a>
 8007324:	1e69      	subs	r1, r5, #1
 8007326:	e006      	b.n	8007336 <_strtol_l.constprop.0+0xea>
 8007328:	b106      	cbz	r6, 800732c <_strtol_l.constprop.0+0xe0>
 800732a:	4240      	negs	r0, r0
 800732c:	f1b8 0f00 	cmp.w	r8, #0
 8007330:	d099      	beq.n	8007266 <_strtol_l.constprop.0+0x1a>
 8007332:	2a00      	cmp	r2, #0
 8007334:	d1f6      	bne.n	8007324 <_strtol_l.constprop.0+0xd8>
 8007336:	f8c8 1000 	str.w	r1, [r8]
 800733a:	e794      	b.n	8007266 <_strtol_l.constprop.0+0x1a>
 800733c:	08008c67 	.word	0x08008c67

08007340 <strtol>:
 8007340:	4613      	mov	r3, r2
 8007342:	460a      	mov	r2, r1
 8007344:	4601      	mov	r1, r0
 8007346:	4802      	ldr	r0, [pc, #8]	@ (8007350 <strtol+0x10>)
 8007348:	6800      	ldr	r0, [r0, #0]
 800734a:	f7ff bf7f 	b.w	800724c <_strtol_l.constprop.0>
 800734e:	bf00      	nop
 8007350:	20000014 	.word	0x20000014

08007354 <siprintf>:
 8007354:	b40e      	push	{r1, r2, r3}
 8007356:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800735a:	b500      	push	{lr}
 800735c:	b09c      	sub	sp, #112	@ 0x70
 800735e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007360:	9002      	str	r0, [sp, #8]
 8007362:	9006      	str	r0, [sp, #24]
 8007364:	9107      	str	r1, [sp, #28]
 8007366:	9104      	str	r1, [sp, #16]
 8007368:	4808      	ldr	r0, [pc, #32]	@ (800738c <siprintf+0x38>)
 800736a:	4909      	ldr	r1, [pc, #36]	@ (8007390 <siprintf+0x3c>)
 800736c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007370:	9105      	str	r1, [sp, #20]
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	a902      	add	r1, sp, #8
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	f000 f9ae 	bl	80076d8 <_svfiprintf_r>
 800737c:	2200      	movs	r2, #0
 800737e:	9b02      	ldr	r3, [sp, #8]
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	b01c      	add	sp, #112	@ 0x70
 8007384:	f85d eb04 	ldr.w	lr, [sp], #4
 8007388:	b003      	add	sp, #12
 800738a:	4770      	bx	lr
 800738c:	20000014 	.word	0x20000014
 8007390:	ffff0208 	.word	0xffff0208

08007394 <memset>:
 8007394:	4603      	mov	r3, r0
 8007396:	4402      	add	r2, r0
 8007398:	4293      	cmp	r3, r2
 800739a:	d100      	bne.n	800739e <memset+0xa>
 800739c:	4770      	bx	lr
 800739e:	f803 1b01 	strb.w	r1, [r3], #1
 80073a2:	e7f9      	b.n	8007398 <memset+0x4>

080073a4 <strncpy>:
 80073a4:	4603      	mov	r3, r0
 80073a6:	b510      	push	{r4, lr}
 80073a8:	3901      	subs	r1, #1
 80073aa:	b132      	cbz	r2, 80073ba <strncpy+0x16>
 80073ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073b0:	3a01      	subs	r2, #1
 80073b2:	f803 4b01 	strb.w	r4, [r3], #1
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	d1f7      	bne.n	80073aa <strncpy+0x6>
 80073ba:	2100      	movs	r1, #0
 80073bc:	441a      	add	r2, r3
 80073be:	4293      	cmp	r3, r2
 80073c0:	d100      	bne.n	80073c4 <strncpy+0x20>
 80073c2:	bd10      	pop	{r4, pc}
 80073c4:	f803 1b01 	strb.w	r1, [r3], #1
 80073c8:	e7f9      	b.n	80073be <strncpy+0x1a>
	...

080073cc <__errno>:
 80073cc:	4b01      	ldr	r3, [pc, #4]	@ (80073d4 <__errno+0x8>)
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20000014 	.word	0x20000014

080073d8 <__libc_init_array>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	2600      	movs	r6, #0
 80073dc:	4d0c      	ldr	r5, [pc, #48]	@ (8007410 <__libc_init_array+0x38>)
 80073de:	4c0d      	ldr	r4, [pc, #52]	@ (8007414 <__libc_init_array+0x3c>)
 80073e0:	1b64      	subs	r4, r4, r5
 80073e2:	10a4      	asrs	r4, r4, #2
 80073e4:	42a6      	cmp	r6, r4
 80073e6:	d109      	bne.n	80073fc <__libc_init_array+0x24>
 80073e8:	f001 fbd6 	bl	8008b98 <_init>
 80073ec:	2600      	movs	r6, #0
 80073ee:	4d0a      	ldr	r5, [pc, #40]	@ (8007418 <__libc_init_array+0x40>)
 80073f0:	4c0a      	ldr	r4, [pc, #40]	@ (800741c <__libc_init_array+0x44>)
 80073f2:	1b64      	subs	r4, r4, r5
 80073f4:	10a4      	asrs	r4, r4, #2
 80073f6:	42a6      	cmp	r6, r4
 80073f8:	d105      	bne.n	8007406 <__libc_init_array+0x2e>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007400:	4798      	blx	r3
 8007402:	3601      	adds	r6, #1
 8007404:	e7ee      	b.n	80073e4 <__libc_init_array+0xc>
 8007406:	f855 3b04 	ldr.w	r3, [r5], #4
 800740a:	4798      	blx	r3
 800740c:	3601      	adds	r6, #1
 800740e:	e7f2      	b.n	80073f6 <__libc_init_array+0x1e>
 8007410:	08008dd0 	.word	0x08008dd0
 8007414:	08008dd0 	.word	0x08008dd0
 8007418:	08008dd0 	.word	0x08008dd0
 800741c:	08008dd4 	.word	0x08008dd4

08007420 <__retarget_lock_acquire_recursive>:
 8007420:	4770      	bx	lr

08007422 <__retarget_lock_release_recursive>:
 8007422:	4770      	bx	lr

08007424 <strcpy>:
 8007424:	4603      	mov	r3, r0
 8007426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800742a:	f803 2b01 	strb.w	r2, [r3], #1
 800742e:	2a00      	cmp	r2, #0
 8007430:	d1f9      	bne.n	8007426 <strcpy+0x2>
 8007432:	4770      	bx	lr

08007434 <_free_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4605      	mov	r5, r0
 8007438:	2900      	cmp	r1, #0
 800743a:	d040      	beq.n	80074be <_free_r+0x8a>
 800743c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007440:	1f0c      	subs	r4, r1, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	bfb8      	it	lt
 8007446:	18e4      	addlt	r4, r4, r3
 8007448:	f000 f8de 	bl	8007608 <__malloc_lock>
 800744c:	4a1c      	ldr	r2, [pc, #112]	@ (80074c0 <_free_r+0x8c>)
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	b933      	cbnz	r3, 8007460 <_free_r+0x2c>
 8007452:	6063      	str	r3, [r4, #4]
 8007454:	6014      	str	r4, [r2, #0]
 8007456:	4628      	mov	r0, r5
 8007458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800745c:	f000 b8da 	b.w	8007614 <__malloc_unlock>
 8007460:	42a3      	cmp	r3, r4
 8007462:	d908      	bls.n	8007476 <_free_r+0x42>
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	1821      	adds	r1, r4, r0
 8007468:	428b      	cmp	r3, r1
 800746a:	bf01      	itttt	eq
 800746c:	6819      	ldreq	r1, [r3, #0]
 800746e:	685b      	ldreq	r3, [r3, #4]
 8007470:	1809      	addeq	r1, r1, r0
 8007472:	6021      	streq	r1, [r4, #0]
 8007474:	e7ed      	b.n	8007452 <_free_r+0x1e>
 8007476:	461a      	mov	r2, r3
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	b10b      	cbz	r3, 8007480 <_free_r+0x4c>
 800747c:	42a3      	cmp	r3, r4
 800747e:	d9fa      	bls.n	8007476 <_free_r+0x42>
 8007480:	6811      	ldr	r1, [r2, #0]
 8007482:	1850      	adds	r0, r2, r1
 8007484:	42a0      	cmp	r0, r4
 8007486:	d10b      	bne.n	80074a0 <_free_r+0x6c>
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	4401      	add	r1, r0
 800748c:	1850      	adds	r0, r2, r1
 800748e:	4283      	cmp	r3, r0
 8007490:	6011      	str	r1, [r2, #0]
 8007492:	d1e0      	bne.n	8007456 <_free_r+0x22>
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4408      	add	r0, r1
 800749a:	6010      	str	r0, [r2, #0]
 800749c:	6053      	str	r3, [r2, #4]
 800749e:	e7da      	b.n	8007456 <_free_r+0x22>
 80074a0:	d902      	bls.n	80074a8 <_free_r+0x74>
 80074a2:	230c      	movs	r3, #12
 80074a4:	602b      	str	r3, [r5, #0]
 80074a6:	e7d6      	b.n	8007456 <_free_r+0x22>
 80074a8:	6820      	ldr	r0, [r4, #0]
 80074aa:	1821      	adds	r1, r4, r0
 80074ac:	428b      	cmp	r3, r1
 80074ae:	bf01      	itttt	eq
 80074b0:	6819      	ldreq	r1, [r3, #0]
 80074b2:	685b      	ldreq	r3, [r3, #4]
 80074b4:	1809      	addeq	r1, r1, r0
 80074b6:	6021      	streq	r1, [r4, #0]
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	6054      	str	r4, [r2, #4]
 80074bc:	e7cb      	b.n	8007456 <_free_r+0x22>
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20000be0 	.word	0x20000be0

080074c4 <sbrk_aligned>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007504 <sbrk_aligned+0x40>)
 80074c8:	460c      	mov	r4, r1
 80074ca:	6831      	ldr	r1, [r6, #0]
 80074cc:	4605      	mov	r5, r0
 80074ce:	b911      	cbnz	r1, 80074d6 <sbrk_aligned+0x12>
 80074d0:	f000 fbaa 	bl	8007c28 <_sbrk_r>
 80074d4:	6030      	str	r0, [r6, #0]
 80074d6:	4621      	mov	r1, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 fba5 	bl	8007c28 <_sbrk_r>
 80074de:	1c43      	adds	r3, r0, #1
 80074e0:	d103      	bne.n	80074ea <sbrk_aligned+0x26>
 80074e2:	f04f 34ff 	mov.w	r4, #4294967295
 80074e6:	4620      	mov	r0, r4
 80074e8:	bd70      	pop	{r4, r5, r6, pc}
 80074ea:	1cc4      	adds	r4, r0, #3
 80074ec:	f024 0403 	bic.w	r4, r4, #3
 80074f0:	42a0      	cmp	r0, r4
 80074f2:	d0f8      	beq.n	80074e6 <sbrk_aligned+0x22>
 80074f4:	1a21      	subs	r1, r4, r0
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 fb96 	bl	8007c28 <_sbrk_r>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d1f2      	bne.n	80074e6 <sbrk_aligned+0x22>
 8007500:	e7ef      	b.n	80074e2 <sbrk_aligned+0x1e>
 8007502:	bf00      	nop
 8007504:	20000bdc 	.word	0x20000bdc

08007508 <_malloc_r>:
 8007508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750c:	1ccd      	adds	r5, r1, #3
 800750e:	f025 0503 	bic.w	r5, r5, #3
 8007512:	3508      	adds	r5, #8
 8007514:	2d0c      	cmp	r5, #12
 8007516:	bf38      	it	cc
 8007518:	250c      	movcc	r5, #12
 800751a:	2d00      	cmp	r5, #0
 800751c:	4606      	mov	r6, r0
 800751e:	db01      	blt.n	8007524 <_malloc_r+0x1c>
 8007520:	42a9      	cmp	r1, r5
 8007522:	d904      	bls.n	800752e <_malloc_r+0x26>
 8007524:	230c      	movs	r3, #12
 8007526:	6033      	str	r3, [r6, #0]
 8007528:	2000      	movs	r0, #0
 800752a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007604 <_malloc_r+0xfc>
 8007532:	f000 f869 	bl	8007608 <__malloc_lock>
 8007536:	f8d8 3000 	ldr.w	r3, [r8]
 800753a:	461c      	mov	r4, r3
 800753c:	bb44      	cbnz	r4, 8007590 <_malloc_r+0x88>
 800753e:	4629      	mov	r1, r5
 8007540:	4630      	mov	r0, r6
 8007542:	f7ff ffbf 	bl	80074c4 <sbrk_aligned>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	4604      	mov	r4, r0
 800754a:	d158      	bne.n	80075fe <_malloc_r+0xf6>
 800754c:	f8d8 4000 	ldr.w	r4, [r8]
 8007550:	4627      	mov	r7, r4
 8007552:	2f00      	cmp	r7, #0
 8007554:	d143      	bne.n	80075de <_malloc_r+0xd6>
 8007556:	2c00      	cmp	r4, #0
 8007558:	d04b      	beq.n	80075f2 <_malloc_r+0xea>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	4639      	mov	r1, r7
 800755e:	4630      	mov	r0, r6
 8007560:	eb04 0903 	add.w	r9, r4, r3
 8007564:	f000 fb60 	bl	8007c28 <_sbrk_r>
 8007568:	4581      	cmp	r9, r0
 800756a:	d142      	bne.n	80075f2 <_malloc_r+0xea>
 800756c:	6821      	ldr	r1, [r4, #0]
 800756e:	4630      	mov	r0, r6
 8007570:	1a6d      	subs	r5, r5, r1
 8007572:	4629      	mov	r1, r5
 8007574:	f7ff ffa6 	bl	80074c4 <sbrk_aligned>
 8007578:	3001      	adds	r0, #1
 800757a:	d03a      	beq.n	80075f2 <_malloc_r+0xea>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	442b      	add	r3, r5
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	f8d8 3000 	ldr.w	r3, [r8]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	bb62      	cbnz	r2, 80075e4 <_malloc_r+0xdc>
 800758a:	f8c8 7000 	str.w	r7, [r8]
 800758e:	e00f      	b.n	80075b0 <_malloc_r+0xa8>
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	1b52      	subs	r2, r2, r5
 8007594:	d420      	bmi.n	80075d8 <_malloc_r+0xd0>
 8007596:	2a0b      	cmp	r2, #11
 8007598:	d917      	bls.n	80075ca <_malloc_r+0xc2>
 800759a:	1961      	adds	r1, r4, r5
 800759c:	42a3      	cmp	r3, r4
 800759e:	6025      	str	r5, [r4, #0]
 80075a0:	bf18      	it	ne
 80075a2:	6059      	strne	r1, [r3, #4]
 80075a4:	6863      	ldr	r3, [r4, #4]
 80075a6:	bf08      	it	eq
 80075a8:	f8c8 1000 	streq.w	r1, [r8]
 80075ac:	5162      	str	r2, [r4, r5]
 80075ae:	604b      	str	r3, [r1, #4]
 80075b0:	4630      	mov	r0, r6
 80075b2:	f000 f82f 	bl	8007614 <__malloc_unlock>
 80075b6:	f104 000b 	add.w	r0, r4, #11
 80075ba:	1d23      	adds	r3, r4, #4
 80075bc:	f020 0007 	bic.w	r0, r0, #7
 80075c0:	1ac2      	subs	r2, r0, r3
 80075c2:	bf1c      	itt	ne
 80075c4:	1a1b      	subne	r3, r3, r0
 80075c6:	50a3      	strne	r3, [r4, r2]
 80075c8:	e7af      	b.n	800752a <_malloc_r+0x22>
 80075ca:	6862      	ldr	r2, [r4, #4]
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	bf0c      	ite	eq
 80075d0:	f8c8 2000 	streq.w	r2, [r8]
 80075d4:	605a      	strne	r2, [r3, #4]
 80075d6:	e7eb      	b.n	80075b0 <_malloc_r+0xa8>
 80075d8:	4623      	mov	r3, r4
 80075da:	6864      	ldr	r4, [r4, #4]
 80075dc:	e7ae      	b.n	800753c <_malloc_r+0x34>
 80075de:	463c      	mov	r4, r7
 80075e0:	687f      	ldr	r7, [r7, #4]
 80075e2:	e7b6      	b.n	8007552 <_malloc_r+0x4a>
 80075e4:	461a      	mov	r2, r3
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d1fb      	bne.n	80075e4 <_malloc_r+0xdc>
 80075ec:	2300      	movs	r3, #0
 80075ee:	6053      	str	r3, [r2, #4]
 80075f0:	e7de      	b.n	80075b0 <_malloc_r+0xa8>
 80075f2:	230c      	movs	r3, #12
 80075f4:	4630      	mov	r0, r6
 80075f6:	6033      	str	r3, [r6, #0]
 80075f8:	f000 f80c 	bl	8007614 <__malloc_unlock>
 80075fc:	e794      	b.n	8007528 <_malloc_r+0x20>
 80075fe:	6005      	str	r5, [r0, #0]
 8007600:	e7d6      	b.n	80075b0 <_malloc_r+0xa8>
 8007602:	bf00      	nop
 8007604:	20000be0 	.word	0x20000be0

08007608 <__malloc_lock>:
 8007608:	4801      	ldr	r0, [pc, #4]	@ (8007610 <__malloc_lock+0x8>)
 800760a:	f7ff bf09 	b.w	8007420 <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	20000bd8 	.word	0x20000bd8

08007614 <__malloc_unlock>:
 8007614:	4801      	ldr	r0, [pc, #4]	@ (800761c <__malloc_unlock+0x8>)
 8007616:	f7ff bf04 	b.w	8007422 <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	20000bd8 	.word	0x20000bd8

08007620 <__ssputs_r>:
 8007620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007624:	461f      	mov	r7, r3
 8007626:	688e      	ldr	r6, [r1, #8]
 8007628:	4682      	mov	sl, r0
 800762a:	42be      	cmp	r6, r7
 800762c:	460c      	mov	r4, r1
 800762e:	4690      	mov	r8, r2
 8007630:	680b      	ldr	r3, [r1, #0]
 8007632:	d82d      	bhi.n	8007690 <__ssputs_r+0x70>
 8007634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800763c:	d026      	beq.n	800768c <__ssputs_r+0x6c>
 800763e:	6965      	ldr	r5, [r4, #20]
 8007640:	6909      	ldr	r1, [r1, #16]
 8007642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007646:	eba3 0901 	sub.w	r9, r3, r1
 800764a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800764e:	1c7b      	adds	r3, r7, #1
 8007650:	444b      	add	r3, r9
 8007652:	106d      	asrs	r5, r5, #1
 8007654:	429d      	cmp	r5, r3
 8007656:	bf38      	it	cc
 8007658:	461d      	movcc	r5, r3
 800765a:	0553      	lsls	r3, r2, #21
 800765c:	d527      	bpl.n	80076ae <__ssputs_r+0x8e>
 800765e:	4629      	mov	r1, r5
 8007660:	f7ff ff52 	bl	8007508 <_malloc_r>
 8007664:	4606      	mov	r6, r0
 8007666:	b360      	cbz	r0, 80076c2 <__ssputs_r+0xa2>
 8007668:	464a      	mov	r2, r9
 800766a:	6921      	ldr	r1, [r4, #16]
 800766c:	f000 fafa 	bl	8007c64 <memcpy>
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	6126      	str	r6, [r4, #16]
 800767e:	444e      	add	r6, r9
 8007680:	6026      	str	r6, [r4, #0]
 8007682:	463e      	mov	r6, r7
 8007684:	6165      	str	r5, [r4, #20]
 8007686:	eba5 0509 	sub.w	r5, r5, r9
 800768a:	60a5      	str	r5, [r4, #8]
 800768c:	42be      	cmp	r6, r7
 800768e:	d900      	bls.n	8007692 <__ssputs_r+0x72>
 8007690:	463e      	mov	r6, r7
 8007692:	4632      	mov	r2, r6
 8007694:	4641      	mov	r1, r8
 8007696:	6820      	ldr	r0, [r4, #0]
 8007698:	f000 faac 	bl	8007bf4 <memmove>
 800769c:	2000      	movs	r0, #0
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	1b9b      	subs	r3, r3, r6
 80076a2:	60a3      	str	r3, [r4, #8]
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	4433      	add	r3, r6
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ae:	462a      	mov	r2, r5
 80076b0:	f000 fae6 	bl	8007c80 <_realloc_r>
 80076b4:	4606      	mov	r6, r0
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d1e0      	bne.n	800767c <__ssputs_r+0x5c>
 80076ba:	4650      	mov	r0, sl
 80076bc:	6921      	ldr	r1, [r4, #16]
 80076be:	f7ff feb9 	bl	8007434 <_free_r>
 80076c2:	230c      	movs	r3, #12
 80076c4:	f8ca 3000 	str.w	r3, [sl]
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	f04f 30ff 	mov.w	r0, #4294967295
 80076ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	e7e9      	b.n	80076aa <__ssputs_r+0x8a>
	...

080076d8 <_svfiprintf_r>:
 80076d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	4698      	mov	r8, r3
 80076de:	898b      	ldrh	r3, [r1, #12]
 80076e0:	4607      	mov	r7, r0
 80076e2:	061b      	lsls	r3, r3, #24
 80076e4:	460d      	mov	r5, r1
 80076e6:	4614      	mov	r4, r2
 80076e8:	b09d      	sub	sp, #116	@ 0x74
 80076ea:	d510      	bpl.n	800770e <_svfiprintf_r+0x36>
 80076ec:	690b      	ldr	r3, [r1, #16]
 80076ee:	b973      	cbnz	r3, 800770e <_svfiprintf_r+0x36>
 80076f0:	2140      	movs	r1, #64	@ 0x40
 80076f2:	f7ff ff09 	bl	8007508 <_malloc_r>
 80076f6:	6028      	str	r0, [r5, #0]
 80076f8:	6128      	str	r0, [r5, #16]
 80076fa:	b930      	cbnz	r0, 800770a <_svfiprintf_r+0x32>
 80076fc:	230c      	movs	r3, #12
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	b01d      	add	sp, #116	@ 0x74
 8007706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770a:	2340      	movs	r3, #64	@ 0x40
 800770c:	616b      	str	r3, [r5, #20]
 800770e:	2300      	movs	r3, #0
 8007710:	9309      	str	r3, [sp, #36]	@ 0x24
 8007712:	2320      	movs	r3, #32
 8007714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007718:	2330      	movs	r3, #48	@ 0x30
 800771a:	f04f 0901 	mov.w	r9, #1
 800771e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007722:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80078bc <_svfiprintf_r+0x1e4>
 8007726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800772a:	4623      	mov	r3, r4
 800772c:	469a      	mov	sl, r3
 800772e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007732:	b10a      	cbz	r2, 8007738 <_svfiprintf_r+0x60>
 8007734:	2a25      	cmp	r2, #37	@ 0x25
 8007736:	d1f9      	bne.n	800772c <_svfiprintf_r+0x54>
 8007738:	ebba 0b04 	subs.w	fp, sl, r4
 800773c:	d00b      	beq.n	8007756 <_svfiprintf_r+0x7e>
 800773e:	465b      	mov	r3, fp
 8007740:	4622      	mov	r2, r4
 8007742:	4629      	mov	r1, r5
 8007744:	4638      	mov	r0, r7
 8007746:	f7ff ff6b 	bl	8007620 <__ssputs_r>
 800774a:	3001      	adds	r0, #1
 800774c:	f000 80a7 	beq.w	800789e <_svfiprintf_r+0x1c6>
 8007750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007752:	445a      	add	r2, fp
 8007754:	9209      	str	r2, [sp, #36]	@ 0x24
 8007756:	f89a 3000 	ldrb.w	r3, [sl]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 809f 	beq.w	800789e <_svfiprintf_r+0x1c6>
 8007760:	2300      	movs	r3, #0
 8007762:	f04f 32ff 	mov.w	r2, #4294967295
 8007766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800776a:	f10a 0a01 	add.w	sl, sl, #1
 800776e:	9304      	str	r3, [sp, #16]
 8007770:	9307      	str	r3, [sp, #28]
 8007772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007776:	931a      	str	r3, [sp, #104]	@ 0x68
 8007778:	4654      	mov	r4, sl
 800777a:	2205      	movs	r2, #5
 800777c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007780:	484e      	ldr	r0, [pc, #312]	@ (80078bc <_svfiprintf_r+0x1e4>)
 8007782:	f000 fa61 	bl	8007c48 <memchr>
 8007786:	9a04      	ldr	r2, [sp, #16]
 8007788:	b9d8      	cbnz	r0, 80077c2 <_svfiprintf_r+0xea>
 800778a:	06d0      	lsls	r0, r2, #27
 800778c:	bf44      	itt	mi
 800778e:	2320      	movmi	r3, #32
 8007790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007794:	0711      	lsls	r1, r2, #28
 8007796:	bf44      	itt	mi
 8007798:	232b      	movmi	r3, #43	@ 0x2b
 800779a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800779e:	f89a 3000 	ldrb.w	r3, [sl]
 80077a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a4:	d015      	beq.n	80077d2 <_svfiprintf_r+0xfa>
 80077a6:	4654      	mov	r4, sl
 80077a8:	2000      	movs	r0, #0
 80077aa:	f04f 0c0a 	mov.w	ip, #10
 80077ae:	9a07      	ldr	r2, [sp, #28]
 80077b0:	4621      	mov	r1, r4
 80077b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b6:	3b30      	subs	r3, #48	@ 0x30
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	d94b      	bls.n	8007854 <_svfiprintf_r+0x17c>
 80077bc:	b1b0      	cbz	r0, 80077ec <_svfiprintf_r+0x114>
 80077be:	9207      	str	r2, [sp, #28]
 80077c0:	e014      	b.n	80077ec <_svfiprintf_r+0x114>
 80077c2:	eba0 0308 	sub.w	r3, r0, r8
 80077c6:	fa09 f303 	lsl.w	r3, r9, r3
 80077ca:	4313      	orrs	r3, r2
 80077cc:	46a2      	mov	sl, r4
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	e7d2      	b.n	8007778 <_svfiprintf_r+0xa0>
 80077d2:	9b03      	ldr	r3, [sp, #12]
 80077d4:	1d19      	adds	r1, r3, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	9103      	str	r1, [sp, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	bfbb      	ittet	lt
 80077de:	425b      	neglt	r3, r3
 80077e0:	f042 0202 	orrlt.w	r2, r2, #2
 80077e4:	9307      	strge	r3, [sp, #28]
 80077e6:	9307      	strlt	r3, [sp, #28]
 80077e8:	bfb8      	it	lt
 80077ea:	9204      	strlt	r2, [sp, #16]
 80077ec:	7823      	ldrb	r3, [r4, #0]
 80077ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80077f0:	d10a      	bne.n	8007808 <_svfiprintf_r+0x130>
 80077f2:	7863      	ldrb	r3, [r4, #1]
 80077f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077f6:	d132      	bne.n	800785e <_svfiprintf_r+0x186>
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	3402      	adds	r4, #2
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	9203      	str	r2, [sp, #12]
 8007802:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007806:	9305      	str	r3, [sp, #20]
 8007808:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80078c0 <_svfiprintf_r+0x1e8>
 800780c:	2203      	movs	r2, #3
 800780e:	4650      	mov	r0, sl
 8007810:	7821      	ldrb	r1, [r4, #0]
 8007812:	f000 fa19 	bl	8007c48 <memchr>
 8007816:	b138      	cbz	r0, 8007828 <_svfiprintf_r+0x150>
 8007818:	2240      	movs	r2, #64	@ 0x40
 800781a:	9b04      	ldr	r3, [sp, #16]
 800781c:	eba0 000a 	sub.w	r0, r0, sl
 8007820:	4082      	lsls	r2, r0
 8007822:	4313      	orrs	r3, r2
 8007824:	3401      	adds	r4, #1
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782c:	2206      	movs	r2, #6
 800782e:	4825      	ldr	r0, [pc, #148]	@ (80078c4 <_svfiprintf_r+0x1ec>)
 8007830:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007834:	f000 fa08 	bl	8007c48 <memchr>
 8007838:	2800      	cmp	r0, #0
 800783a:	d036      	beq.n	80078aa <_svfiprintf_r+0x1d2>
 800783c:	4b22      	ldr	r3, [pc, #136]	@ (80078c8 <_svfiprintf_r+0x1f0>)
 800783e:	bb1b      	cbnz	r3, 8007888 <_svfiprintf_r+0x1b0>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	3307      	adds	r3, #7
 8007844:	f023 0307 	bic.w	r3, r3, #7
 8007848:	3308      	adds	r3, #8
 800784a:	9303      	str	r3, [sp, #12]
 800784c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784e:	4433      	add	r3, r6
 8007850:	9309      	str	r3, [sp, #36]	@ 0x24
 8007852:	e76a      	b.n	800772a <_svfiprintf_r+0x52>
 8007854:	460c      	mov	r4, r1
 8007856:	2001      	movs	r0, #1
 8007858:	fb0c 3202 	mla	r2, ip, r2, r3
 800785c:	e7a8      	b.n	80077b0 <_svfiprintf_r+0xd8>
 800785e:	2300      	movs	r3, #0
 8007860:	f04f 0c0a 	mov.w	ip, #10
 8007864:	4619      	mov	r1, r3
 8007866:	3401      	adds	r4, #1
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	4620      	mov	r0, r4
 800786c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007870:	3a30      	subs	r2, #48	@ 0x30
 8007872:	2a09      	cmp	r2, #9
 8007874:	d903      	bls.n	800787e <_svfiprintf_r+0x1a6>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0c6      	beq.n	8007808 <_svfiprintf_r+0x130>
 800787a:	9105      	str	r1, [sp, #20]
 800787c:	e7c4      	b.n	8007808 <_svfiprintf_r+0x130>
 800787e:	4604      	mov	r4, r0
 8007880:	2301      	movs	r3, #1
 8007882:	fb0c 2101 	mla	r1, ip, r1, r2
 8007886:	e7f0      	b.n	800786a <_svfiprintf_r+0x192>
 8007888:	ab03      	add	r3, sp, #12
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	462a      	mov	r2, r5
 800788e:	4638      	mov	r0, r7
 8007890:	4b0e      	ldr	r3, [pc, #56]	@ (80078cc <_svfiprintf_r+0x1f4>)
 8007892:	a904      	add	r1, sp, #16
 8007894:	f3af 8000 	nop.w
 8007898:	1c42      	adds	r2, r0, #1
 800789a:	4606      	mov	r6, r0
 800789c:	d1d6      	bne.n	800784c <_svfiprintf_r+0x174>
 800789e:	89ab      	ldrh	r3, [r5, #12]
 80078a0:	065b      	lsls	r3, r3, #25
 80078a2:	f53f af2d 	bmi.w	8007700 <_svfiprintf_r+0x28>
 80078a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078a8:	e72c      	b.n	8007704 <_svfiprintf_r+0x2c>
 80078aa:	ab03      	add	r3, sp, #12
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	462a      	mov	r2, r5
 80078b0:	4638      	mov	r0, r7
 80078b2:	4b06      	ldr	r3, [pc, #24]	@ (80078cc <_svfiprintf_r+0x1f4>)
 80078b4:	a904      	add	r1, sp, #16
 80078b6:	f000 f87d 	bl	80079b4 <_printf_i>
 80078ba:	e7ed      	b.n	8007898 <_svfiprintf_r+0x1c0>
 80078bc:	08008d67 	.word	0x08008d67
 80078c0:	08008d6d 	.word	0x08008d6d
 80078c4:	08008d71 	.word	0x08008d71
 80078c8:	00000000 	.word	0x00000000
 80078cc:	08007621 	.word	0x08007621

080078d0 <_printf_common>:
 80078d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d4:	4616      	mov	r6, r2
 80078d6:	4698      	mov	r8, r3
 80078d8:	688a      	ldr	r2, [r1, #8]
 80078da:	690b      	ldr	r3, [r1, #16]
 80078dc:	4607      	mov	r7, r0
 80078de:	4293      	cmp	r3, r2
 80078e0:	bfb8      	it	lt
 80078e2:	4613      	movlt	r3, r2
 80078e4:	6033      	str	r3, [r6, #0]
 80078e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078ea:	460c      	mov	r4, r1
 80078ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078f0:	b10a      	cbz	r2, 80078f6 <_printf_common+0x26>
 80078f2:	3301      	adds	r3, #1
 80078f4:	6033      	str	r3, [r6, #0]
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	0699      	lsls	r1, r3, #26
 80078fa:	bf42      	ittt	mi
 80078fc:	6833      	ldrmi	r3, [r6, #0]
 80078fe:	3302      	addmi	r3, #2
 8007900:	6033      	strmi	r3, [r6, #0]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	f015 0506 	ands.w	r5, r5, #6
 8007908:	d106      	bne.n	8007918 <_printf_common+0x48>
 800790a:	f104 0a19 	add.w	sl, r4, #25
 800790e:	68e3      	ldr	r3, [r4, #12]
 8007910:	6832      	ldr	r2, [r6, #0]
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	42ab      	cmp	r3, r5
 8007916:	dc2b      	bgt.n	8007970 <_printf_common+0xa0>
 8007918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800791c:	6822      	ldr	r2, [r4, #0]
 800791e:	3b00      	subs	r3, #0
 8007920:	bf18      	it	ne
 8007922:	2301      	movne	r3, #1
 8007924:	0692      	lsls	r2, r2, #26
 8007926:	d430      	bmi.n	800798a <_printf_common+0xba>
 8007928:	4641      	mov	r1, r8
 800792a:	4638      	mov	r0, r7
 800792c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007930:	47c8      	blx	r9
 8007932:	3001      	adds	r0, #1
 8007934:	d023      	beq.n	800797e <_printf_common+0xae>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	6922      	ldr	r2, [r4, #16]
 800793a:	f003 0306 	and.w	r3, r3, #6
 800793e:	2b04      	cmp	r3, #4
 8007940:	bf14      	ite	ne
 8007942:	2500      	movne	r5, #0
 8007944:	6833      	ldreq	r3, [r6, #0]
 8007946:	f04f 0600 	mov.w	r6, #0
 800794a:	bf08      	it	eq
 800794c:	68e5      	ldreq	r5, [r4, #12]
 800794e:	f104 041a 	add.w	r4, r4, #26
 8007952:	bf08      	it	eq
 8007954:	1aed      	subeq	r5, r5, r3
 8007956:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800795a:	bf08      	it	eq
 800795c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007960:	4293      	cmp	r3, r2
 8007962:	bfc4      	itt	gt
 8007964:	1a9b      	subgt	r3, r3, r2
 8007966:	18ed      	addgt	r5, r5, r3
 8007968:	42b5      	cmp	r5, r6
 800796a:	d11a      	bne.n	80079a2 <_printf_common+0xd2>
 800796c:	2000      	movs	r0, #0
 800796e:	e008      	b.n	8007982 <_printf_common+0xb2>
 8007970:	2301      	movs	r3, #1
 8007972:	4652      	mov	r2, sl
 8007974:	4641      	mov	r1, r8
 8007976:	4638      	mov	r0, r7
 8007978:	47c8      	blx	r9
 800797a:	3001      	adds	r0, #1
 800797c:	d103      	bne.n	8007986 <_printf_common+0xb6>
 800797e:	f04f 30ff 	mov.w	r0, #4294967295
 8007982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007986:	3501      	adds	r5, #1
 8007988:	e7c1      	b.n	800790e <_printf_common+0x3e>
 800798a:	2030      	movs	r0, #48	@ 0x30
 800798c:	18e1      	adds	r1, r4, r3
 800798e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007998:	4422      	add	r2, r4
 800799a:	3302      	adds	r3, #2
 800799c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079a0:	e7c2      	b.n	8007928 <_printf_common+0x58>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4622      	mov	r2, r4
 80079a6:	4641      	mov	r1, r8
 80079a8:	4638      	mov	r0, r7
 80079aa:	47c8      	blx	r9
 80079ac:	3001      	adds	r0, #1
 80079ae:	d0e6      	beq.n	800797e <_printf_common+0xae>
 80079b0:	3601      	adds	r6, #1
 80079b2:	e7d9      	b.n	8007968 <_printf_common+0x98>

080079b4 <_printf_i>:
 80079b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	7e0f      	ldrb	r7, [r1, #24]
 80079ba:	4691      	mov	r9, r2
 80079bc:	2f78      	cmp	r7, #120	@ 0x78
 80079be:	4680      	mov	r8, r0
 80079c0:	460c      	mov	r4, r1
 80079c2:	469a      	mov	sl, r3
 80079c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079ca:	d807      	bhi.n	80079dc <_printf_i+0x28>
 80079cc:	2f62      	cmp	r7, #98	@ 0x62
 80079ce:	d80a      	bhi.n	80079e6 <_printf_i+0x32>
 80079d0:	2f00      	cmp	r7, #0
 80079d2:	f000 80d3 	beq.w	8007b7c <_printf_i+0x1c8>
 80079d6:	2f58      	cmp	r7, #88	@ 0x58
 80079d8:	f000 80ba 	beq.w	8007b50 <_printf_i+0x19c>
 80079dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079e4:	e03a      	b.n	8007a5c <_printf_i+0xa8>
 80079e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079ea:	2b15      	cmp	r3, #21
 80079ec:	d8f6      	bhi.n	80079dc <_printf_i+0x28>
 80079ee:	a101      	add	r1, pc, #4	@ (adr r1, 80079f4 <_printf_i+0x40>)
 80079f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079f4:	08007a4d 	.word	0x08007a4d
 80079f8:	08007a61 	.word	0x08007a61
 80079fc:	080079dd 	.word	0x080079dd
 8007a00:	080079dd 	.word	0x080079dd
 8007a04:	080079dd 	.word	0x080079dd
 8007a08:	080079dd 	.word	0x080079dd
 8007a0c:	08007a61 	.word	0x08007a61
 8007a10:	080079dd 	.word	0x080079dd
 8007a14:	080079dd 	.word	0x080079dd
 8007a18:	080079dd 	.word	0x080079dd
 8007a1c:	080079dd 	.word	0x080079dd
 8007a20:	08007b63 	.word	0x08007b63
 8007a24:	08007a8b 	.word	0x08007a8b
 8007a28:	08007b1d 	.word	0x08007b1d
 8007a2c:	080079dd 	.word	0x080079dd
 8007a30:	080079dd 	.word	0x080079dd
 8007a34:	08007b85 	.word	0x08007b85
 8007a38:	080079dd 	.word	0x080079dd
 8007a3c:	08007a8b 	.word	0x08007a8b
 8007a40:	080079dd 	.word	0x080079dd
 8007a44:	080079dd 	.word	0x080079dd
 8007a48:	08007b25 	.word	0x08007b25
 8007a4c:	6833      	ldr	r3, [r6, #0]
 8007a4e:	1d1a      	adds	r2, r3, #4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6032      	str	r2, [r6, #0]
 8007a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e09e      	b.n	8007b9e <_printf_i+0x1ea>
 8007a60:	6833      	ldr	r3, [r6, #0]
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	1d19      	adds	r1, r3, #4
 8007a66:	6031      	str	r1, [r6, #0]
 8007a68:	0606      	lsls	r6, r0, #24
 8007a6a:	d501      	bpl.n	8007a70 <_printf_i+0xbc>
 8007a6c:	681d      	ldr	r5, [r3, #0]
 8007a6e:	e003      	b.n	8007a78 <_printf_i+0xc4>
 8007a70:	0645      	lsls	r5, r0, #25
 8007a72:	d5fb      	bpl.n	8007a6c <_printf_i+0xb8>
 8007a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	da03      	bge.n	8007a84 <_printf_i+0xd0>
 8007a7c:	232d      	movs	r3, #45	@ 0x2d
 8007a7e:	426d      	negs	r5, r5
 8007a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a84:	230a      	movs	r3, #10
 8007a86:	4859      	ldr	r0, [pc, #356]	@ (8007bec <_printf_i+0x238>)
 8007a88:	e011      	b.n	8007aae <_printf_i+0xfa>
 8007a8a:	6821      	ldr	r1, [r4, #0]
 8007a8c:	6833      	ldr	r3, [r6, #0]
 8007a8e:	0608      	lsls	r0, r1, #24
 8007a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a94:	d402      	bmi.n	8007a9c <_printf_i+0xe8>
 8007a96:	0649      	lsls	r1, r1, #25
 8007a98:	bf48      	it	mi
 8007a9a:	b2ad      	uxthmi	r5, r5
 8007a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a9e:	6033      	str	r3, [r6, #0]
 8007aa0:	bf14      	ite	ne
 8007aa2:	230a      	movne	r3, #10
 8007aa4:	2308      	moveq	r3, #8
 8007aa6:	4851      	ldr	r0, [pc, #324]	@ (8007bec <_printf_i+0x238>)
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007aae:	6866      	ldr	r6, [r4, #4]
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	bfa8      	it	ge
 8007ab4:	6821      	ldrge	r1, [r4, #0]
 8007ab6:	60a6      	str	r6, [r4, #8]
 8007ab8:	bfa4      	itt	ge
 8007aba:	f021 0104 	bicge.w	r1, r1, #4
 8007abe:	6021      	strge	r1, [r4, #0]
 8007ac0:	b90d      	cbnz	r5, 8007ac6 <_printf_i+0x112>
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d04b      	beq.n	8007b5e <_printf_i+0x1aa>
 8007ac6:	4616      	mov	r6, r2
 8007ac8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007acc:	fb03 5711 	mls	r7, r3, r1, r5
 8007ad0:	5dc7      	ldrb	r7, [r0, r7]
 8007ad2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ad6:	462f      	mov	r7, r5
 8007ad8:	42bb      	cmp	r3, r7
 8007ada:	460d      	mov	r5, r1
 8007adc:	d9f4      	bls.n	8007ac8 <_printf_i+0x114>
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d10b      	bne.n	8007afa <_printf_i+0x146>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	07df      	lsls	r7, r3, #31
 8007ae6:	d508      	bpl.n	8007afa <_printf_i+0x146>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	6861      	ldr	r1, [r4, #4]
 8007aec:	4299      	cmp	r1, r3
 8007aee:	bfde      	ittt	le
 8007af0:	2330      	movle	r3, #48	@ 0x30
 8007af2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007af6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007afa:	1b92      	subs	r2, r2, r6
 8007afc:	6122      	str	r2, [r4, #16]
 8007afe:	464b      	mov	r3, r9
 8007b00:	4621      	mov	r1, r4
 8007b02:	4640      	mov	r0, r8
 8007b04:	f8cd a000 	str.w	sl, [sp]
 8007b08:	aa03      	add	r2, sp, #12
 8007b0a:	f7ff fee1 	bl	80078d0 <_printf_common>
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d14a      	bne.n	8007ba8 <_printf_i+0x1f4>
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	b004      	add	sp, #16
 8007b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	f043 0320 	orr.w	r3, r3, #32
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	2778      	movs	r7, #120	@ 0x78
 8007b26:	4832      	ldr	r0, [pc, #200]	@ (8007bf0 <_printf_i+0x23c>)
 8007b28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	6831      	ldr	r1, [r6, #0]
 8007b30:	061f      	lsls	r7, r3, #24
 8007b32:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b36:	d402      	bmi.n	8007b3e <_printf_i+0x18a>
 8007b38:	065f      	lsls	r7, r3, #25
 8007b3a:	bf48      	it	mi
 8007b3c:	b2ad      	uxthmi	r5, r5
 8007b3e:	6031      	str	r1, [r6, #0]
 8007b40:	07d9      	lsls	r1, r3, #31
 8007b42:	bf44      	itt	mi
 8007b44:	f043 0320 	orrmi.w	r3, r3, #32
 8007b48:	6023      	strmi	r3, [r4, #0]
 8007b4a:	b11d      	cbz	r5, 8007b54 <_printf_i+0x1a0>
 8007b4c:	2310      	movs	r3, #16
 8007b4e:	e7ab      	b.n	8007aa8 <_printf_i+0xf4>
 8007b50:	4826      	ldr	r0, [pc, #152]	@ (8007bec <_printf_i+0x238>)
 8007b52:	e7e9      	b.n	8007b28 <_printf_i+0x174>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	f023 0320 	bic.w	r3, r3, #32
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	e7f6      	b.n	8007b4c <_printf_i+0x198>
 8007b5e:	4616      	mov	r6, r2
 8007b60:	e7bd      	b.n	8007ade <_printf_i+0x12a>
 8007b62:	6833      	ldr	r3, [r6, #0]
 8007b64:	6825      	ldr	r5, [r4, #0]
 8007b66:	1d18      	adds	r0, r3, #4
 8007b68:	6961      	ldr	r1, [r4, #20]
 8007b6a:	6030      	str	r0, [r6, #0]
 8007b6c:	062e      	lsls	r6, r5, #24
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	d501      	bpl.n	8007b76 <_printf_i+0x1c2>
 8007b72:	6019      	str	r1, [r3, #0]
 8007b74:	e002      	b.n	8007b7c <_printf_i+0x1c8>
 8007b76:	0668      	lsls	r0, r5, #25
 8007b78:	d5fb      	bpl.n	8007b72 <_printf_i+0x1be>
 8007b7a:	8019      	strh	r1, [r3, #0]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4616      	mov	r6, r2
 8007b80:	6123      	str	r3, [r4, #16]
 8007b82:	e7bc      	b.n	8007afe <_printf_i+0x14a>
 8007b84:	6833      	ldr	r3, [r6, #0]
 8007b86:	2100      	movs	r1, #0
 8007b88:	1d1a      	adds	r2, r3, #4
 8007b8a:	6032      	str	r2, [r6, #0]
 8007b8c:	681e      	ldr	r6, [r3, #0]
 8007b8e:	6862      	ldr	r2, [r4, #4]
 8007b90:	4630      	mov	r0, r6
 8007b92:	f000 f859 	bl	8007c48 <memchr>
 8007b96:	b108      	cbz	r0, 8007b9c <_printf_i+0x1e8>
 8007b98:	1b80      	subs	r0, r0, r6
 8007b9a:	6060      	str	r0, [r4, #4]
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ba6:	e7aa      	b.n	8007afe <_printf_i+0x14a>
 8007ba8:	4632      	mov	r2, r6
 8007baa:	4649      	mov	r1, r9
 8007bac:	4640      	mov	r0, r8
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	47d0      	blx	sl
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d0ad      	beq.n	8007b12 <_printf_i+0x15e>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	079b      	lsls	r3, r3, #30
 8007bba:	d413      	bmi.n	8007be4 <_printf_i+0x230>
 8007bbc:	68e0      	ldr	r0, [r4, #12]
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	4298      	cmp	r0, r3
 8007bc2:	bfb8      	it	lt
 8007bc4:	4618      	movlt	r0, r3
 8007bc6:	e7a6      	b.n	8007b16 <_printf_i+0x162>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4632      	mov	r2, r6
 8007bcc:	4649      	mov	r1, r9
 8007bce:	4640      	mov	r0, r8
 8007bd0:	47d0      	blx	sl
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	d09d      	beq.n	8007b12 <_printf_i+0x15e>
 8007bd6:	3501      	adds	r5, #1
 8007bd8:	68e3      	ldr	r3, [r4, #12]
 8007bda:	9903      	ldr	r1, [sp, #12]
 8007bdc:	1a5b      	subs	r3, r3, r1
 8007bde:	42ab      	cmp	r3, r5
 8007be0:	dcf2      	bgt.n	8007bc8 <_printf_i+0x214>
 8007be2:	e7eb      	b.n	8007bbc <_printf_i+0x208>
 8007be4:	2500      	movs	r5, #0
 8007be6:	f104 0619 	add.w	r6, r4, #25
 8007bea:	e7f5      	b.n	8007bd8 <_printf_i+0x224>
 8007bec:	08008d78 	.word	0x08008d78
 8007bf0:	08008d89 	.word	0x08008d89

08007bf4 <memmove>:
 8007bf4:	4288      	cmp	r0, r1
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	eb01 0402 	add.w	r4, r1, r2
 8007bfc:	d902      	bls.n	8007c04 <memmove+0x10>
 8007bfe:	4284      	cmp	r4, r0
 8007c00:	4623      	mov	r3, r4
 8007c02:	d807      	bhi.n	8007c14 <memmove+0x20>
 8007c04:	1e43      	subs	r3, r0, #1
 8007c06:	42a1      	cmp	r1, r4
 8007c08:	d008      	beq.n	8007c1c <memmove+0x28>
 8007c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c12:	e7f8      	b.n	8007c06 <memmove+0x12>
 8007c14:	4601      	mov	r1, r0
 8007c16:	4402      	add	r2, r0
 8007c18:	428a      	cmp	r2, r1
 8007c1a:	d100      	bne.n	8007c1e <memmove+0x2a>
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c26:	e7f7      	b.n	8007c18 <memmove+0x24>

08007c28 <_sbrk_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4d05      	ldr	r5, [pc, #20]	@ (8007c44 <_sbrk_r+0x1c>)
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7fa fb3e 	bl	80022b4 <_sbrk>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_sbrk_r+0x1a>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_sbrk_r+0x1a>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20000bd4 	.word	0x20000bd4

08007c48 <memchr>:
 8007c48:	4603      	mov	r3, r0
 8007c4a:	b510      	push	{r4, lr}
 8007c4c:	b2c9      	uxtb	r1, r1
 8007c4e:	4402      	add	r2, r0
 8007c50:	4293      	cmp	r3, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	d101      	bne.n	8007c5a <memchr+0x12>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e003      	b.n	8007c62 <memchr+0x1a>
 8007c5a:	7804      	ldrb	r4, [r0, #0]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	428c      	cmp	r4, r1
 8007c60:	d1f6      	bne.n	8007c50 <memchr+0x8>
 8007c62:	bd10      	pop	{r4, pc}

08007c64 <memcpy>:
 8007c64:	440a      	add	r2, r1
 8007c66:	4291      	cmp	r1, r2
 8007c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c6c:	d100      	bne.n	8007c70 <memcpy+0xc>
 8007c6e:	4770      	bx	lr
 8007c70:	b510      	push	{r4, lr}
 8007c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c76:	4291      	cmp	r1, r2
 8007c78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c7c:	d1f9      	bne.n	8007c72 <memcpy+0xe>
 8007c7e:	bd10      	pop	{r4, pc}

08007c80 <_realloc_r>:
 8007c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c84:	4680      	mov	r8, r0
 8007c86:	4615      	mov	r5, r2
 8007c88:	460c      	mov	r4, r1
 8007c8a:	b921      	cbnz	r1, 8007c96 <_realloc_r+0x16>
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c92:	f7ff bc39 	b.w	8007508 <_malloc_r>
 8007c96:	b92a      	cbnz	r2, 8007ca4 <_realloc_r+0x24>
 8007c98:	f7ff fbcc 	bl	8007434 <_free_r>
 8007c9c:	2400      	movs	r4, #0
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca4:	f000 f81a 	bl	8007cdc <_malloc_usable_size_r>
 8007ca8:	4285      	cmp	r5, r0
 8007caa:	4606      	mov	r6, r0
 8007cac:	d802      	bhi.n	8007cb4 <_realloc_r+0x34>
 8007cae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007cb2:	d8f4      	bhi.n	8007c9e <_realloc_r+0x1e>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	f7ff fc26 	bl	8007508 <_malloc_r>
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d0ec      	beq.n	8007c9c <_realloc_r+0x1c>
 8007cc2:	42b5      	cmp	r5, r6
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	bf28      	it	cs
 8007cca:	4632      	movcs	r2, r6
 8007ccc:	f7ff ffca 	bl	8007c64 <memcpy>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	f7ff fbae 	bl	8007434 <_free_r>
 8007cd8:	463c      	mov	r4, r7
 8007cda:	e7e0      	b.n	8007c9e <_realloc_r+0x1e>

08007cdc <_malloc_usable_size_r>:
 8007cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ce0:	1f18      	subs	r0, r3, #4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	bfbc      	itt	lt
 8007ce6:	580b      	ldrlt	r3, [r1, r0]
 8007ce8:	18c0      	addlt	r0, r0, r3
 8007cea:	4770      	bx	lr

08007cec <pow>:
 8007cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	461d      	mov	r5, r3
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	4689      	mov	r9, r1
 8007cf8:	f000 f8ae 	bl	8007e58 <__ieee754_pow>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4606      	mov	r6, r0
 8007d00:	460f      	mov	r7, r1
 8007d02:	462b      	mov	r3, r5
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fe78 	bl	80009fc <__aeabi_dcmpun>
 8007d0c:	bbc8      	cbnz	r0, 8007d82 <pow+0x96>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2300      	movs	r3, #0
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fe3f 	bl	8000998 <__aeabi_dcmpeq>
 8007d1a:	b1b8      	cbz	r0, 8007d4c <pow+0x60>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4620      	mov	r0, r4
 8007d22:	4629      	mov	r1, r5
 8007d24:	f7f8 fe38 	bl	8000998 <__aeabi_dcmpeq>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d141      	bne.n	8007db0 <pow+0xc4>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	f000 f844 	bl	8007dbc <finite>
 8007d34:	b328      	cbz	r0, 8007d82 <pow+0x96>
 8007d36:	2200      	movs	r2, #0
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7f8 fe35 	bl	80009ac <__aeabi_dcmplt>
 8007d42:	b1f0      	cbz	r0, 8007d82 <pow+0x96>
 8007d44:	f7ff fb42 	bl	80073cc <__errno>
 8007d48:	2322      	movs	r3, #34	@ 0x22
 8007d4a:	e019      	b.n	8007d80 <pow+0x94>
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	4639      	mov	r1, r7
 8007d50:	f000 f834 	bl	8007dbc <finite>
 8007d54:	b9c8      	cbnz	r0, 8007d8a <pow+0x9e>
 8007d56:	4640      	mov	r0, r8
 8007d58:	4649      	mov	r1, r9
 8007d5a:	f000 f82f 	bl	8007dbc <finite>
 8007d5e:	b1a0      	cbz	r0, 8007d8a <pow+0x9e>
 8007d60:	4620      	mov	r0, r4
 8007d62:	4629      	mov	r1, r5
 8007d64:	f000 f82a 	bl	8007dbc <finite>
 8007d68:	b178      	cbz	r0, 8007d8a <pow+0x9e>
 8007d6a:	4632      	mov	r2, r6
 8007d6c:	463b      	mov	r3, r7
 8007d6e:	4630      	mov	r0, r6
 8007d70:	4639      	mov	r1, r7
 8007d72:	f7f8 fe43 	bl	80009fc <__aeabi_dcmpun>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d0e4      	beq.n	8007d44 <pow+0x58>
 8007d7a:	f7ff fb27 	bl	80073cc <__errno>
 8007d7e:	2321      	movs	r3, #33	@ 0x21
 8007d80:	6003      	str	r3, [r0, #0]
 8007d82:	4630      	mov	r0, r6
 8007d84:	4639      	mov	r1, r7
 8007d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4630      	mov	r0, r6
 8007d90:	4639      	mov	r1, r7
 8007d92:	f7f8 fe01 	bl	8000998 <__aeabi_dcmpeq>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d0f3      	beq.n	8007d82 <pow+0x96>
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	f000 f80d 	bl	8007dbc <finite>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d0ed      	beq.n	8007d82 <pow+0x96>
 8007da6:	4620      	mov	r0, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	f000 f807 	bl	8007dbc <finite>
 8007dae:	e7c8      	b.n	8007d42 <pow+0x56>
 8007db0:	2600      	movs	r6, #0
 8007db2:	4f01      	ldr	r7, [pc, #4]	@ (8007db8 <pow+0xcc>)
 8007db4:	e7e5      	b.n	8007d82 <pow+0x96>
 8007db6:	bf00      	nop
 8007db8:	3ff00000 	.word	0x3ff00000

08007dbc <finite>:
 8007dbc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8007dc0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007dc4:	0fc0      	lsrs	r0, r0, #31
 8007dc6:	4770      	bx	lr

08007dc8 <round>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007dce:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8007dd2:	2a13      	cmp	r2, #19
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	460b      	mov	r3, r1
 8007dda:	dc1a      	bgt.n	8007e12 <round+0x4a>
 8007ddc:	2a00      	cmp	r2, #0
 8007dde:	da0b      	bge.n	8007df8 <round+0x30>
 8007de0:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8007de4:	3201      	adds	r2, #1
 8007de6:	bf04      	itt	eq
 8007de8:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8007dec:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8007df0:	2200      	movs	r2, #0
 8007df2:	461d      	mov	r5, r3
 8007df4:	4614      	mov	r4, r2
 8007df6:	e016      	b.n	8007e26 <round+0x5e>
 8007df8:	4815      	ldr	r0, [pc, #84]	@ (8007e50 <round+0x88>)
 8007dfa:	4110      	asrs	r0, r2
 8007dfc:	4001      	ands	r1, r0
 8007dfe:	4321      	orrs	r1, r4
 8007e00:	d011      	beq.n	8007e26 <round+0x5e>
 8007e02:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007e06:	fa41 f202 	asr.w	r2, r1, r2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	ea23 0300 	bic.w	r3, r3, r0
 8007e10:	e7ee      	b.n	8007df0 <round+0x28>
 8007e12:	2a33      	cmp	r2, #51	@ 0x33
 8007e14:	dd0a      	ble.n	8007e2c <round+0x64>
 8007e16:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007e1a:	d104      	bne.n	8007e26 <round+0x5e>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	f7f8 f99d 	bl	800015c <__adddf3>
 8007e22:	4604      	mov	r4, r0
 8007e24:	460d      	mov	r5, r1
 8007e26:	4620      	mov	r0, r4
 8007e28:	4629      	mov	r1, r5
 8007e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8007e34:	40f8      	lsrs	r0, r7
 8007e36:	4220      	tst	r0, r4
 8007e38:	d0f5      	beq.n	8007e26 <round+0x5e>
 8007e3a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8007e3e:	2201      	movs	r2, #1
 8007e40:	408a      	lsls	r2, r1
 8007e42:	1912      	adds	r2, r2, r4
 8007e44:	bf28      	it	cs
 8007e46:	3301      	addcs	r3, #1
 8007e48:	ea22 0200 	bic.w	r2, r2, r0
 8007e4c:	e7d1      	b.n	8007df2 <round+0x2a>
 8007e4e:	bf00      	nop
 8007e50:	000fffff 	.word	0x000fffff
 8007e54:	00000000 	.word	0x00000000

08007e58 <__ieee754_pow>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	b091      	sub	sp, #68	@ 0x44
 8007e5e:	e9cd 2300 	strd	r2, r3, [sp]
 8007e62:	468b      	mov	fp, r1
 8007e64:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007e68:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	ea57 0001 	orrs.w	r0, r7, r1
 8007e72:	d112      	bne.n	8007e9a <__ieee754_pow+0x42>
 8007e74:	4653      	mov	r3, sl
 8007e76:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8007e7a:	18db      	adds	r3, r3, r3
 8007e7c:	4152      	adcs	r2, r2
 8007e7e:	4298      	cmp	r0, r3
 8007e80:	4b91      	ldr	r3, [pc, #580]	@ (80080c8 <__ieee754_pow+0x270>)
 8007e82:	4193      	sbcs	r3, r2
 8007e84:	f080 84ce 	bcs.w	8008824 <__ieee754_pow+0x9cc>
 8007e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	4659      	mov	r1, fp
 8007e90:	f7f8 f964 	bl	800015c <__adddf3>
 8007e94:	b011      	add	sp, #68	@ 0x44
 8007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9a:	4b8c      	ldr	r3, [pc, #560]	@ (80080cc <__ieee754_pow+0x274>)
 8007e9c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8007ea0:	429e      	cmp	r6, r3
 8007ea2:	465d      	mov	r5, fp
 8007ea4:	46d1      	mov	r9, sl
 8007ea6:	d807      	bhi.n	8007eb8 <__ieee754_pow+0x60>
 8007ea8:	d102      	bne.n	8007eb0 <__ieee754_pow+0x58>
 8007eaa:	f1ba 0f00 	cmp.w	sl, #0
 8007eae:	d1eb      	bne.n	8007e88 <__ieee754_pow+0x30>
 8007eb0:	429f      	cmp	r7, r3
 8007eb2:	d801      	bhi.n	8007eb8 <__ieee754_pow+0x60>
 8007eb4:	d10f      	bne.n	8007ed6 <__ieee754_pow+0x7e>
 8007eb6:	b171      	cbz	r1, 8007ed6 <__ieee754_pow+0x7e>
 8007eb8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007ebc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007ec0:	ea55 0509 	orrs.w	r5, r5, r9
 8007ec4:	d1e0      	bne.n	8007e88 <__ieee754_pow+0x30>
 8007ec6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007eca:	18db      	adds	r3, r3, r3
 8007ecc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007ed0:	4152      	adcs	r2, r2
 8007ed2:	429d      	cmp	r5, r3
 8007ed4:	e7d4      	b.n	8007e80 <__ieee754_pow+0x28>
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	4633      	mov	r3, r6
 8007eda:	da39      	bge.n	8007f50 <__ieee754_pow+0xf8>
 8007edc:	4a7c      	ldr	r2, [pc, #496]	@ (80080d0 <__ieee754_pow+0x278>)
 8007ede:	4297      	cmp	r7, r2
 8007ee0:	d84e      	bhi.n	8007f80 <__ieee754_pow+0x128>
 8007ee2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007ee6:	4297      	cmp	r7, r2
 8007ee8:	f240 84ab 	bls.w	8008842 <__ieee754_pow+0x9ea>
 8007eec:	153a      	asrs	r2, r7, #20
 8007eee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007ef2:	2a14      	cmp	r2, #20
 8007ef4:	dd0f      	ble.n	8007f16 <__ieee754_pow+0xbe>
 8007ef6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007efa:	fa21 f402 	lsr.w	r4, r1, r2
 8007efe:	fa04 f202 	lsl.w	r2, r4, r2
 8007f02:	428a      	cmp	r2, r1
 8007f04:	f040 849d 	bne.w	8008842 <__ieee754_pow+0x9ea>
 8007f08:	f004 0401 	and.w	r4, r4, #1
 8007f0c:	f1c4 0402 	rsb	r4, r4, #2
 8007f10:	2900      	cmp	r1, #0
 8007f12:	d15a      	bne.n	8007fca <__ieee754_pow+0x172>
 8007f14:	e00e      	b.n	8007f34 <__ieee754_pow+0xdc>
 8007f16:	2900      	cmp	r1, #0
 8007f18:	d156      	bne.n	8007fc8 <__ieee754_pow+0x170>
 8007f1a:	f1c2 0214 	rsb	r2, r2, #20
 8007f1e:	fa47 f402 	asr.w	r4, r7, r2
 8007f22:	fa04 f202 	lsl.w	r2, r4, r2
 8007f26:	42ba      	cmp	r2, r7
 8007f28:	f040 8488 	bne.w	800883c <__ieee754_pow+0x9e4>
 8007f2c:	f004 0401 	and.w	r4, r4, #1
 8007f30:	f1c4 0402 	rsb	r4, r4, #2
 8007f34:	4a67      	ldr	r2, [pc, #412]	@ (80080d4 <__ieee754_pow+0x27c>)
 8007f36:	4297      	cmp	r7, r2
 8007f38:	d130      	bne.n	8007f9c <__ieee754_pow+0x144>
 8007f3a:	f1b8 0f00 	cmp.w	r8, #0
 8007f3e:	f280 8479 	bge.w	8008834 <__ieee754_pow+0x9dc>
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	2000      	movs	r0, #0
 8007f48:	4962      	ldr	r1, [pc, #392]	@ (80080d4 <__ieee754_pow+0x27c>)
 8007f4a:	f7f8 fbe7 	bl	800071c <__aeabi_ddiv>
 8007f4e:	e7a1      	b.n	8007e94 <__ieee754_pow+0x3c>
 8007f50:	2400      	movs	r4, #0
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d139      	bne.n	8007fca <__ieee754_pow+0x172>
 8007f56:	4a5d      	ldr	r2, [pc, #372]	@ (80080cc <__ieee754_pow+0x274>)
 8007f58:	4297      	cmp	r7, r2
 8007f5a:	d1eb      	bne.n	8007f34 <__ieee754_pow+0xdc>
 8007f5c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8007f60:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007f64:	ea53 0309 	orrs.w	r3, r3, r9
 8007f68:	f000 845c 	beq.w	8008824 <__ieee754_pow+0x9cc>
 8007f6c:	4b5a      	ldr	r3, [pc, #360]	@ (80080d8 <__ieee754_pow+0x280>)
 8007f6e:	429e      	cmp	r6, r3
 8007f70:	d908      	bls.n	8007f84 <__ieee754_pow+0x12c>
 8007f72:	f1b8 0f00 	cmp.w	r8, #0
 8007f76:	f2c0 8459 	blt.w	800882c <__ieee754_pow+0x9d4>
 8007f7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f7e:	e789      	b.n	8007e94 <__ieee754_pow+0x3c>
 8007f80:	2402      	movs	r4, #2
 8007f82:	e7e6      	b.n	8007f52 <__ieee754_pow+0xfa>
 8007f84:	f1b8 0f00 	cmp.w	r8, #0
 8007f88:	f04f 0000 	mov.w	r0, #0
 8007f8c:	f04f 0100 	mov.w	r1, #0
 8007f90:	da80      	bge.n	8007e94 <__ieee754_pow+0x3c>
 8007f92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007f96:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007f9a:	e77b      	b.n	8007e94 <__ieee754_pow+0x3c>
 8007f9c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007fa0:	d106      	bne.n	8007fb0 <__ieee754_pow+0x158>
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	4650      	mov	r0, sl
 8007fa8:	4659      	mov	r1, fp
 8007faa:	f7f8 fa8d 	bl	80004c8 <__aeabi_dmul>
 8007fae:	e771      	b.n	8007e94 <__ieee754_pow+0x3c>
 8007fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80080dc <__ieee754_pow+0x284>)
 8007fb2:	4590      	cmp	r8, r2
 8007fb4:	d109      	bne.n	8007fca <__ieee754_pow+0x172>
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	db07      	blt.n	8007fca <__ieee754_pow+0x172>
 8007fba:	4650      	mov	r0, sl
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	b011      	add	sp, #68	@ 0x44
 8007fc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	f000 bd12 	b.w	80089ec <__ieee754_sqrt>
 8007fc8:	2400      	movs	r4, #0
 8007fca:	4650      	mov	r0, sl
 8007fcc:	4659      	mov	r1, fp
 8007fce:	9302      	str	r3, [sp, #8]
 8007fd0:	f000 fc6a 	bl	80088a8 <fabs>
 8007fd4:	9b02      	ldr	r3, [sp, #8]
 8007fd6:	f1b9 0f00 	cmp.w	r9, #0
 8007fda:	d127      	bne.n	800802c <__ieee754_pow+0x1d4>
 8007fdc:	4a3d      	ldr	r2, [pc, #244]	@ (80080d4 <__ieee754_pow+0x27c>)
 8007fde:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8007fe2:	4594      	cmp	ip, r2
 8007fe4:	d000      	beq.n	8007fe8 <__ieee754_pow+0x190>
 8007fe6:	bb0e      	cbnz	r6, 800802c <__ieee754_pow+0x1d4>
 8007fe8:	f1b8 0f00 	cmp.w	r8, #0
 8007fec:	da05      	bge.n	8007ffa <__ieee754_pow+0x1a2>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	4937      	ldr	r1, [pc, #220]	@ (80080d4 <__ieee754_pow+0x27c>)
 8007ff6:	f7f8 fb91 	bl	800071c <__aeabi_ddiv>
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	f6bf af4a 	bge.w	8007e94 <__ieee754_pow+0x3c>
 8008000:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008004:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008008:	4326      	orrs	r6, r4
 800800a:	d108      	bne.n	800801e <__ieee754_pow+0x1c6>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	f7f8 f8a0 	bl	8000158 <__aeabi_dsub>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	e795      	b.n	8007f4a <__ieee754_pow+0xf2>
 800801e:	2c01      	cmp	r4, #1
 8008020:	f47f af38 	bne.w	8007e94 <__ieee754_pow+0x3c>
 8008024:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008028:	4619      	mov	r1, r3
 800802a:	e733      	b.n	8007e94 <__ieee754_pow+0x3c>
 800802c:	0fea      	lsrs	r2, r5, #31
 800802e:	3a01      	subs	r2, #1
 8008030:	ea52 0c04 	orrs.w	ip, r2, r4
 8008034:	d102      	bne.n	800803c <__ieee754_pow+0x1e4>
 8008036:	4652      	mov	r2, sl
 8008038:	465b      	mov	r3, fp
 800803a:	e7e9      	b.n	8008010 <__ieee754_pow+0x1b8>
 800803c:	f04f 0900 	mov.w	r9, #0
 8008040:	3c01      	subs	r4, #1
 8008042:	4314      	orrs	r4, r2
 8008044:	bf14      	ite	ne
 8008046:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80080d4 <__ieee754_pow+0x27c>
 800804a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80080e0 <__ieee754_pow+0x288>
 800804e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008052:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008056:	f240 8107 	bls.w	8008268 <__ieee754_pow+0x410>
 800805a:	4b22      	ldr	r3, [pc, #136]	@ (80080e4 <__ieee754_pow+0x28c>)
 800805c:	429f      	cmp	r7, r3
 800805e:	4b1e      	ldr	r3, [pc, #120]	@ (80080d8 <__ieee754_pow+0x280>)
 8008060:	d913      	bls.n	800808a <__ieee754_pow+0x232>
 8008062:	429e      	cmp	r6, r3
 8008064:	d808      	bhi.n	8008078 <__ieee754_pow+0x220>
 8008066:	f1b8 0f00 	cmp.w	r8, #0
 800806a:	da08      	bge.n	800807e <__ieee754_pow+0x226>
 800806c:	2000      	movs	r0, #0
 800806e:	b011      	add	sp, #68	@ 0x44
 8008070:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	f000 bcb4 	b.w	80089e0 <__math_oflow>
 8008078:	f1b8 0f00 	cmp.w	r8, #0
 800807c:	dcf6      	bgt.n	800806c <__ieee754_pow+0x214>
 800807e:	2000      	movs	r0, #0
 8008080:	b011      	add	sp, #68	@ 0x44
 8008082:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008086:	f000 bca6 	b.w	80089d6 <__math_uflow>
 800808a:	429e      	cmp	r6, r3
 800808c:	d20c      	bcs.n	80080a8 <__ieee754_pow+0x250>
 800808e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008092:	2200      	movs	r2, #0
 8008094:	2300      	movs	r3, #0
 8008096:	f7f8 fc89 	bl	80009ac <__aeabi_dcmplt>
 800809a:	3800      	subs	r0, #0
 800809c:	bf18      	it	ne
 800809e:	2001      	movne	r0, #1
 80080a0:	f1b8 0f00 	cmp.w	r8, #0
 80080a4:	daec      	bge.n	8008080 <__ieee754_pow+0x228>
 80080a6:	e7e2      	b.n	800806e <__ieee754_pow+0x216>
 80080a8:	4b0a      	ldr	r3, [pc, #40]	@ (80080d4 <__ieee754_pow+0x27c>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	429e      	cmp	r6, r3
 80080ae:	d91b      	bls.n	80080e8 <__ieee754_pow+0x290>
 80080b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b4:	2300      	movs	r3, #0
 80080b6:	f7f8 fc79 	bl	80009ac <__aeabi_dcmplt>
 80080ba:	3800      	subs	r0, #0
 80080bc:	bf18      	it	ne
 80080be:	2001      	movne	r0, #1
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	dcd3      	bgt.n	800806e <__ieee754_pow+0x216>
 80080c6:	e7db      	b.n	8008080 <__ieee754_pow+0x228>
 80080c8:	fff00000 	.word	0xfff00000
 80080cc:	7ff00000 	.word	0x7ff00000
 80080d0:	433fffff 	.word	0x433fffff
 80080d4:	3ff00000 	.word	0x3ff00000
 80080d8:	3fefffff 	.word	0x3fefffff
 80080dc:	3fe00000 	.word	0x3fe00000
 80080e0:	bff00000 	.word	0xbff00000
 80080e4:	43f00000 	.word	0x43f00000
 80080e8:	4b5b      	ldr	r3, [pc, #364]	@ (8008258 <__ieee754_pow+0x400>)
 80080ea:	f7f8 f835 	bl	8000158 <__aeabi_dsub>
 80080ee:	a352      	add	r3, pc, #328	@ (adr r3, 8008238 <__ieee754_pow+0x3e0>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	f7f8 f9e6 	bl	80004c8 <__aeabi_dmul>
 80080fc:	a350      	add	r3, pc, #320	@ (adr r3, 8008240 <__ieee754_pow+0x3e8>)
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	4606      	mov	r6, r0
 8008104:	460f      	mov	r7, r1
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 f9dd 	bl	80004c8 <__aeabi_dmul>
 800810e:	2200      	movs	r2, #0
 8008110:	4682      	mov	sl, r0
 8008112:	468b      	mov	fp, r1
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	4b50      	ldr	r3, [pc, #320]	@ (800825c <__ieee754_pow+0x404>)
 800811a:	f7f8 f9d5 	bl	80004c8 <__aeabi_dmul>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	a149      	add	r1, pc, #292	@ (adr r1, 8008248 <__ieee754_pow+0x3f0>)
 8008124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008128:	f7f8 f816 	bl	8000158 <__aeabi_dsub>
 800812c:	4622      	mov	r2, r4
 800812e:	462b      	mov	r3, r5
 8008130:	f7f8 f9ca 	bl	80004c8 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	2000      	movs	r0, #0
 800813a:	4949      	ldr	r1, [pc, #292]	@ (8008260 <__ieee754_pow+0x408>)
 800813c:	f7f8 f80c 	bl	8000158 <__aeabi_dsub>
 8008140:	4622      	mov	r2, r4
 8008142:	4680      	mov	r8, r0
 8008144:	4689      	mov	r9, r1
 8008146:	462b      	mov	r3, r5
 8008148:	4620      	mov	r0, r4
 800814a:	4629      	mov	r1, r5
 800814c:	f7f8 f9bc 	bl	80004c8 <__aeabi_dmul>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4640      	mov	r0, r8
 8008156:	4649      	mov	r1, r9
 8008158:	f7f8 f9b6 	bl	80004c8 <__aeabi_dmul>
 800815c:	a33c      	add	r3, pc, #240	@ (adr r3, 8008250 <__ieee754_pow+0x3f8>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 f9b1 	bl	80004c8 <__aeabi_dmul>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4650      	mov	r0, sl
 800816c:	4659      	mov	r1, fp
 800816e:	f7f7 fff3 	bl	8000158 <__aeabi_dsub>
 8008172:	2400      	movs	r4, #0
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4680      	mov	r8, r0
 800817a:	4689      	mov	r9, r1
 800817c:	4630      	mov	r0, r6
 800817e:	4639      	mov	r1, r7
 8008180:	f7f7 ffec 	bl	800015c <__adddf3>
 8008184:	4632      	mov	r2, r6
 8008186:	463b      	mov	r3, r7
 8008188:	4620      	mov	r0, r4
 800818a:	460d      	mov	r5, r1
 800818c:	f7f7 ffe4 	bl	8000158 <__aeabi_dsub>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f7 ffde 	bl	8000158 <__aeabi_dsub>
 800819c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081a4:	2300      	movs	r3, #0
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80081ac:	4606      	mov	r6, r0
 80081ae:	460f      	mov	r7, r1
 80081b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081b4:	4652      	mov	r2, sl
 80081b6:	465b      	mov	r3, fp
 80081b8:	f7f7 ffce 	bl	8000158 <__aeabi_dsub>
 80081bc:	4622      	mov	r2, r4
 80081be:	462b      	mov	r3, r5
 80081c0:	f7f8 f982 	bl	80004c8 <__aeabi_dmul>
 80081c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081c8:	4680      	mov	r8, r0
 80081ca:	4689      	mov	r9, r1
 80081cc:	4630      	mov	r0, r6
 80081ce:	4639      	mov	r1, r7
 80081d0:	f7f8 f97a 	bl	80004c8 <__aeabi_dmul>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f7 ffbe 	bl	800015c <__adddf3>
 80081e0:	4652      	mov	r2, sl
 80081e2:	465b      	mov	r3, fp
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	4620      	mov	r0, r4
 80081ea:	4629      	mov	r1, r5
 80081ec:	f7f8 f96c 	bl	80004c8 <__aeabi_dmul>
 80081f0:	460b      	mov	r3, r1
 80081f2:	4602      	mov	r2, r0
 80081f4:	4680      	mov	r8, r0
 80081f6:	4689      	mov	r9, r1
 80081f8:	4630      	mov	r0, r6
 80081fa:	4639      	mov	r1, r7
 80081fc:	f7f7 ffae 	bl	800015c <__adddf3>
 8008200:	4b18      	ldr	r3, [pc, #96]	@ (8008264 <__ieee754_pow+0x40c>)
 8008202:	4604      	mov	r4, r0
 8008204:	4299      	cmp	r1, r3
 8008206:	460d      	mov	r5, r1
 8008208:	468a      	mov	sl, r1
 800820a:	468b      	mov	fp, r1
 800820c:	f340 82e0 	ble.w	80087d0 <__ieee754_pow+0x978>
 8008210:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008214:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008218:	4303      	orrs	r3, r0
 800821a:	f000 81df 	beq.w	80085dc <__ieee754_pow+0x784>
 800821e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	f7f8 fbc1 	bl	80009ac <__aeabi_dcmplt>
 800822a:	3800      	subs	r0, #0
 800822c:	bf18      	it	ne
 800822e:	2001      	movne	r0, #1
 8008230:	e71d      	b.n	800806e <__ieee754_pow+0x216>
 8008232:	bf00      	nop
 8008234:	f3af 8000 	nop.w
 8008238:	60000000 	.word	0x60000000
 800823c:	3ff71547 	.word	0x3ff71547
 8008240:	f85ddf44 	.word	0xf85ddf44
 8008244:	3e54ae0b 	.word	0x3e54ae0b
 8008248:	55555555 	.word	0x55555555
 800824c:	3fd55555 	.word	0x3fd55555
 8008250:	652b82fe 	.word	0x652b82fe
 8008254:	3ff71547 	.word	0x3ff71547
 8008258:	3ff00000 	.word	0x3ff00000
 800825c:	3fd00000 	.word	0x3fd00000
 8008260:	3fe00000 	.word	0x3fe00000
 8008264:	408fffff 	.word	0x408fffff
 8008268:	4ad3      	ldr	r2, [pc, #844]	@ (80085b8 <__ieee754_pow+0x760>)
 800826a:	402a      	ands	r2, r5
 800826c:	2a00      	cmp	r2, #0
 800826e:	f040 817a 	bne.w	8008566 <__ieee754_pow+0x70e>
 8008272:	4bd2      	ldr	r3, [pc, #840]	@ (80085bc <__ieee754_pow+0x764>)
 8008274:	2200      	movs	r2, #0
 8008276:	f7f8 f927 	bl	80004c8 <__aeabi_dmul>
 800827a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800827e:	460b      	mov	r3, r1
 8008280:	151a      	asrs	r2, r3, #20
 8008282:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008286:	4422      	add	r2, r4
 8008288:	920a      	str	r2, [sp, #40]	@ 0x28
 800828a:	4acd      	ldr	r2, [pc, #820]	@ (80085c0 <__ieee754_pow+0x768>)
 800828c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008290:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008294:	4293      	cmp	r3, r2
 8008296:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800829a:	dd08      	ble.n	80082ae <__ieee754_pow+0x456>
 800829c:	4ac9      	ldr	r2, [pc, #804]	@ (80085c4 <__ieee754_pow+0x76c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	f340 8163 	ble.w	800856a <__ieee754_pow+0x712>
 80082a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082a6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80082aa:	3301      	adds	r3, #1
 80082ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ae:	2600      	movs	r6, #0
 80082b0:	00f3      	lsls	r3, r6, #3
 80082b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082b4:	4bc4      	ldr	r3, [pc, #784]	@ (80085c8 <__ieee754_pow+0x770>)
 80082b6:	4629      	mov	r1, r5
 80082b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80082bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082c0:	461a      	mov	r2, r3
 80082c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80082c6:	4623      	mov	r3, r4
 80082c8:	4682      	mov	sl, r0
 80082ca:	f7f7 ff45 	bl	8000158 <__aeabi_dsub>
 80082ce:	4652      	mov	r2, sl
 80082d0:	462b      	mov	r3, r5
 80082d2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80082d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082da:	f7f7 ff3f 	bl	800015c <__adddf3>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	2000      	movs	r0, #0
 80082e4:	49b9      	ldr	r1, [pc, #740]	@ (80085cc <__ieee754_pow+0x774>)
 80082e6:	f7f8 fa19 	bl	800071c <__aeabi_ddiv>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80082f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082f6:	f7f8 f8e7 	bl	80004c8 <__aeabi_dmul>
 80082fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008302:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008306:	2300      	movs	r3, #0
 8008308:	2200      	movs	r2, #0
 800830a:	46ab      	mov	fp, r5
 800830c:	106d      	asrs	r5, r5, #1
 800830e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008318:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800831c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	4614      	mov	r4, r2
 8008326:	461d      	mov	r5, r3
 8008328:	f7f8 f8ce 	bl	80004c8 <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008334:	f7f7 ff10 	bl	8000158 <__aeabi_dsub>
 8008338:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	4620      	mov	r0, r4
 8008342:	4629      	mov	r1, r5
 8008344:	f7f7 ff08 	bl	8000158 <__aeabi_dsub>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4650      	mov	r0, sl
 800834e:	4659      	mov	r1, fp
 8008350:	f7f7 ff02 	bl	8000158 <__aeabi_dsub>
 8008354:	4642      	mov	r2, r8
 8008356:	464b      	mov	r3, r9
 8008358:	f7f8 f8b6 	bl	80004c8 <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f7 fef8 	bl	8000158 <__aeabi_dsub>
 8008368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800836c:	f7f8 f8ac 	bl	80004c8 <__aeabi_dmul>
 8008370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008374:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008378:	4610      	mov	r0, r2
 800837a:	4619      	mov	r1, r3
 800837c:	f7f8 f8a4 	bl	80004c8 <__aeabi_dmul>
 8008380:	a37b      	add	r3, pc, #492	@ (adr r3, 8008570 <__ieee754_pow+0x718>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
 800838a:	f7f8 f89d 	bl	80004c8 <__aeabi_dmul>
 800838e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008578 <__ieee754_pow+0x720>)
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	f7f7 fee2 	bl	800015c <__adddf3>
 8008398:	4622      	mov	r2, r4
 800839a:	462b      	mov	r3, r5
 800839c:	f7f8 f894 	bl	80004c8 <__aeabi_dmul>
 80083a0:	a377      	add	r3, pc, #476	@ (adr r3, 8008580 <__ieee754_pow+0x728>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f7f7 fed9 	bl	800015c <__adddf3>
 80083aa:	4622      	mov	r2, r4
 80083ac:	462b      	mov	r3, r5
 80083ae:	f7f8 f88b 	bl	80004c8 <__aeabi_dmul>
 80083b2:	a375      	add	r3, pc, #468	@ (adr r3, 8008588 <__ieee754_pow+0x730>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f7f7 fed0 	bl	800015c <__adddf3>
 80083bc:	4622      	mov	r2, r4
 80083be:	462b      	mov	r3, r5
 80083c0:	f7f8 f882 	bl	80004c8 <__aeabi_dmul>
 80083c4:	a372      	add	r3, pc, #456	@ (adr r3, 8008590 <__ieee754_pow+0x738>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f7f7 fec7 	bl	800015c <__adddf3>
 80083ce:	4622      	mov	r2, r4
 80083d0:	462b      	mov	r3, r5
 80083d2:	f7f8 f879 	bl	80004c8 <__aeabi_dmul>
 80083d6:	a370      	add	r3, pc, #448	@ (adr r3, 8008598 <__ieee754_pow+0x740>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f7f7 febe 	bl	800015c <__adddf3>
 80083e0:	4622      	mov	r2, r4
 80083e2:	4606      	mov	r6, r0
 80083e4:	460f      	mov	r7, r1
 80083e6:	462b      	mov	r3, r5
 80083e8:	4620      	mov	r0, r4
 80083ea:	4629      	mov	r1, r5
 80083ec:	f7f8 f86c 	bl	80004c8 <__aeabi_dmul>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4630      	mov	r0, r6
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f8 f866 	bl	80004c8 <__aeabi_dmul>
 80083fc:	4604      	mov	r4, r0
 80083fe:	460d      	mov	r5, r1
 8008400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008404:	4642      	mov	r2, r8
 8008406:	464b      	mov	r3, r9
 8008408:	f7f7 fea8 	bl	800015c <__adddf3>
 800840c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008410:	f7f8 f85a 	bl	80004c8 <__aeabi_dmul>
 8008414:	4622      	mov	r2, r4
 8008416:	462b      	mov	r3, r5
 8008418:	f7f7 fea0 	bl	800015c <__adddf3>
 800841c:	4642      	mov	r2, r8
 800841e:	4682      	mov	sl, r0
 8008420:	468b      	mov	fp, r1
 8008422:	464b      	mov	r3, r9
 8008424:	4640      	mov	r0, r8
 8008426:	4649      	mov	r1, r9
 8008428:	f7f8 f84e 	bl	80004c8 <__aeabi_dmul>
 800842c:	2200      	movs	r2, #0
 800842e:	4b68      	ldr	r3, [pc, #416]	@ (80085d0 <__ieee754_pow+0x778>)
 8008430:	4606      	mov	r6, r0
 8008432:	460f      	mov	r7, r1
 8008434:	f7f7 fe92 	bl	800015c <__adddf3>
 8008438:	4652      	mov	r2, sl
 800843a:	465b      	mov	r3, fp
 800843c:	f7f7 fe8e 	bl	800015c <__adddf3>
 8008440:	2400      	movs	r4, #0
 8008442:	460d      	mov	r5, r1
 8008444:	4622      	mov	r2, r4
 8008446:	460b      	mov	r3, r1
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f8 f83c 	bl	80004c8 <__aeabi_dmul>
 8008450:	2200      	movs	r2, #0
 8008452:	4680      	mov	r8, r0
 8008454:	4689      	mov	r9, r1
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	4b5d      	ldr	r3, [pc, #372]	@ (80085d0 <__ieee754_pow+0x778>)
 800845c:	f7f7 fe7c 	bl	8000158 <__aeabi_dsub>
 8008460:	4632      	mov	r2, r6
 8008462:	463b      	mov	r3, r7
 8008464:	f7f7 fe78 	bl	8000158 <__aeabi_dsub>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4650      	mov	r0, sl
 800846e:	4659      	mov	r1, fp
 8008470:	f7f7 fe72 	bl	8000158 <__aeabi_dsub>
 8008474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008478:	f7f8 f826 	bl	80004c8 <__aeabi_dmul>
 800847c:	4622      	mov	r2, r4
 800847e:	4606      	mov	r6, r0
 8008480:	460f      	mov	r7, r1
 8008482:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008486:	462b      	mov	r3, r5
 8008488:	f7f8 f81e 	bl	80004c8 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4630      	mov	r0, r6
 8008492:	4639      	mov	r1, r7
 8008494:	f7f7 fe62 	bl	800015c <__adddf3>
 8008498:	2400      	movs	r4, #0
 800849a:	4606      	mov	r6, r0
 800849c:	460f      	mov	r7, r1
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f7 fe59 	bl	800015c <__adddf3>
 80084aa:	a33d      	add	r3, pc, #244	@ (adr r3, 80085a0 <__ieee754_pow+0x748>)
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	4620      	mov	r0, r4
 80084b2:	460d      	mov	r5, r1
 80084b4:	f7f8 f808 	bl	80004c8 <__aeabi_dmul>
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084c0:	4620      	mov	r0, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	f7f7 fe48 	bl	8000158 <__aeabi_dsub>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4630      	mov	r0, r6
 80084ce:	4639      	mov	r1, r7
 80084d0:	f7f7 fe42 	bl	8000158 <__aeabi_dsub>
 80084d4:	a334      	add	r3, pc, #208	@ (adr r3, 80085a8 <__ieee754_pow+0x750>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f7f7 fff5 	bl	80004c8 <__aeabi_dmul>
 80084de:	a334      	add	r3, pc, #208	@ (adr r3, 80085b0 <__ieee754_pow+0x758>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	4606      	mov	r6, r0
 80084e6:	460f      	mov	r7, r1
 80084e8:	4620      	mov	r0, r4
 80084ea:	4629      	mov	r1, r5
 80084ec:	f7f7 ffec 	bl	80004c8 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	f7f7 fe30 	bl	800015c <__adddf3>
 80084fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084fe:	4b35      	ldr	r3, [pc, #212]	@ (80085d4 <__ieee754_pow+0x77c>)
 8008500:	2400      	movs	r4, #0
 8008502:	4413      	add	r3, r2
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f7 fe28 	bl	800015c <__adddf3>
 800850c:	4682      	mov	sl, r0
 800850e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008510:	468b      	mov	fp, r1
 8008512:	f7f7 ff6f 	bl	80003f4 <__aeabi_i2d>
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800851c:	4b2e      	ldr	r3, [pc, #184]	@ (80085d8 <__ieee754_pow+0x780>)
 800851e:	4413      	add	r3, r2
 8008520:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008524:	4652      	mov	r2, sl
 8008526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800852a:	465b      	mov	r3, fp
 800852c:	f7f7 fe16 	bl	800015c <__adddf3>
 8008530:	4642      	mov	r2, r8
 8008532:	464b      	mov	r3, r9
 8008534:	f7f7 fe12 	bl	800015c <__adddf3>
 8008538:	4632      	mov	r2, r6
 800853a:	463b      	mov	r3, r7
 800853c:	f7f7 fe0e 	bl	800015c <__adddf3>
 8008540:	4632      	mov	r2, r6
 8008542:	463b      	mov	r3, r7
 8008544:	4620      	mov	r0, r4
 8008546:	460d      	mov	r5, r1
 8008548:	f7f7 fe06 	bl	8000158 <__aeabi_dsub>
 800854c:	4642      	mov	r2, r8
 800854e:	464b      	mov	r3, r9
 8008550:	f7f7 fe02 	bl	8000158 <__aeabi_dsub>
 8008554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008558:	f7f7 fdfe 	bl	8000158 <__aeabi_dsub>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4650      	mov	r0, sl
 8008562:	4659      	mov	r1, fp
 8008564:	e618      	b.n	8008198 <__ieee754_pow+0x340>
 8008566:	2400      	movs	r4, #0
 8008568:	e68a      	b.n	8008280 <__ieee754_pow+0x428>
 800856a:	2601      	movs	r6, #1
 800856c:	e6a0      	b.n	80082b0 <__ieee754_pow+0x458>
 800856e:	bf00      	nop
 8008570:	4a454eef 	.word	0x4a454eef
 8008574:	3fca7e28 	.word	0x3fca7e28
 8008578:	93c9db65 	.word	0x93c9db65
 800857c:	3fcd864a 	.word	0x3fcd864a
 8008580:	a91d4101 	.word	0xa91d4101
 8008584:	3fd17460 	.word	0x3fd17460
 8008588:	518f264d 	.word	0x518f264d
 800858c:	3fd55555 	.word	0x3fd55555
 8008590:	db6fabff 	.word	0xdb6fabff
 8008594:	3fdb6db6 	.word	0x3fdb6db6
 8008598:	33333303 	.word	0x33333303
 800859c:	3fe33333 	.word	0x3fe33333
 80085a0:	e0000000 	.word	0xe0000000
 80085a4:	3feec709 	.word	0x3feec709
 80085a8:	dc3a03fd 	.word	0xdc3a03fd
 80085ac:	3feec709 	.word	0x3feec709
 80085b0:	145b01f5 	.word	0x145b01f5
 80085b4:	be3e2fe0 	.word	0xbe3e2fe0
 80085b8:	7ff00000 	.word	0x7ff00000
 80085bc:	43400000 	.word	0x43400000
 80085c0:	0003988e 	.word	0x0003988e
 80085c4:	000bb679 	.word	0x000bb679
 80085c8:	08008dc0 	.word	0x08008dc0
 80085cc:	3ff00000 	.word	0x3ff00000
 80085d0:	40080000 	.word	0x40080000
 80085d4:	08008da0 	.word	0x08008da0
 80085d8:	08008db0 	.word	0x08008db0
 80085dc:	a39a      	add	r3, pc, #616	@ (adr r3, 8008848 <__ieee754_pow+0x9f0>)
 80085de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e2:	4630      	mov	r0, r6
 80085e4:	4639      	mov	r1, r7
 80085e6:	f7f7 fdb9 	bl	800015c <__adddf3>
 80085ea:	4642      	mov	r2, r8
 80085ec:	e9cd 0100 	strd	r0, r1, [sp]
 80085f0:	464b      	mov	r3, r9
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f7 fdaf 	bl	8000158 <__aeabi_dsub>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008602:	f7f8 f9f1 	bl	80009e8 <__aeabi_dcmpgt>
 8008606:	2800      	cmp	r0, #0
 8008608:	f47f ae09 	bne.w	800821e <__ieee754_pow+0x3c6>
 800860c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008610:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008614:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008618:	fa43 fa0a 	asr.w	sl, r3, sl
 800861c:	44da      	add	sl, fp
 800861e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008622:	489b      	ldr	r0, [pc, #620]	@ (8008890 <__ieee754_pow+0xa38>)
 8008624:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008628:	4108      	asrs	r0, r1
 800862a:	ea00 030a 	and.w	r3, r0, sl
 800862e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008632:	f1c1 0114 	rsb	r1, r1, #20
 8008636:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800863a:	4640      	mov	r0, r8
 800863c:	fa4a fa01 	asr.w	sl, sl, r1
 8008640:	f1bb 0f00 	cmp.w	fp, #0
 8008644:	4649      	mov	r1, r9
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	bfb8      	it	lt
 800864c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008650:	f7f7 fd82 	bl	8000158 <__aeabi_dsub>
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	2400      	movs	r4, #0
 800865a:	4632      	mov	r2, r6
 800865c:	463b      	mov	r3, r7
 800865e:	4640      	mov	r0, r8
 8008660:	4649      	mov	r1, r9
 8008662:	f7f7 fd7b 	bl	800015c <__adddf3>
 8008666:	a37a      	add	r3, pc, #488	@ (adr r3, 8008850 <__ieee754_pow+0x9f8>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	4620      	mov	r0, r4
 800866e:	460d      	mov	r5, r1
 8008670:	f7f7 ff2a 	bl	80004c8 <__aeabi_dmul>
 8008674:	4642      	mov	r2, r8
 8008676:	464b      	mov	r3, r9
 8008678:	e9cd 0100 	strd	r0, r1, [sp]
 800867c:	4620      	mov	r0, r4
 800867e:	4629      	mov	r1, r5
 8008680:	f7f7 fd6a 	bl	8000158 <__aeabi_dsub>
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	4630      	mov	r0, r6
 800868a:	4639      	mov	r1, r7
 800868c:	f7f7 fd64 	bl	8000158 <__aeabi_dsub>
 8008690:	a371      	add	r3, pc, #452	@ (adr r3, 8008858 <__ieee754_pow+0xa00>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 ff17 	bl	80004c8 <__aeabi_dmul>
 800869a:	a371      	add	r3, pc, #452	@ (adr r3, 8008860 <__ieee754_pow+0xa08>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	4680      	mov	r8, r0
 80086a2:	4689      	mov	r9, r1
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f7 ff0e 	bl	80004c8 <__aeabi_dmul>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4640      	mov	r0, r8
 80086b2:	4649      	mov	r1, r9
 80086b4:	f7f7 fd52 	bl	800015c <__adddf3>
 80086b8:	4604      	mov	r4, r0
 80086ba:	460d      	mov	r5, r1
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c4:	f7f7 fd4a 	bl	800015c <__adddf3>
 80086c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086cc:	4680      	mov	r8, r0
 80086ce:	4689      	mov	r9, r1
 80086d0:	f7f7 fd42 	bl	8000158 <__aeabi_dsub>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4620      	mov	r0, r4
 80086da:	4629      	mov	r1, r5
 80086dc:	f7f7 fd3c 	bl	8000158 <__aeabi_dsub>
 80086e0:	4642      	mov	r2, r8
 80086e2:	4606      	mov	r6, r0
 80086e4:	460f      	mov	r7, r1
 80086e6:	464b      	mov	r3, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f7 feec 	bl	80004c8 <__aeabi_dmul>
 80086f0:	a35d      	add	r3, pc, #372	@ (adr r3, 8008868 <__ieee754_pow+0xa10>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	4604      	mov	r4, r0
 80086f8:	460d      	mov	r5, r1
 80086fa:	f7f7 fee5 	bl	80004c8 <__aeabi_dmul>
 80086fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8008870 <__ieee754_pow+0xa18>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f7f7 fd28 	bl	8000158 <__aeabi_dsub>
 8008708:	4622      	mov	r2, r4
 800870a:	462b      	mov	r3, r5
 800870c:	f7f7 fedc 	bl	80004c8 <__aeabi_dmul>
 8008710:	a359      	add	r3, pc, #356	@ (adr r3, 8008878 <__ieee754_pow+0xa20>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	f7f7 fd21 	bl	800015c <__adddf3>
 800871a:	4622      	mov	r2, r4
 800871c:	462b      	mov	r3, r5
 800871e:	f7f7 fed3 	bl	80004c8 <__aeabi_dmul>
 8008722:	a357      	add	r3, pc, #348	@ (adr r3, 8008880 <__ieee754_pow+0xa28>)
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	f7f7 fd16 	bl	8000158 <__aeabi_dsub>
 800872c:	4622      	mov	r2, r4
 800872e:	462b      	mov	r3, r5
 8008730:	f7f7 feca 	bl	80004c8 <__aeabi_dmul>
 8008734:	a354      	add	r3, pc, #336	@ (adr r3, 8008888 <__ieee754_pow+0xa30>)
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	f7f7 fd0f 	bl	800015c <__adddf3>
 800873e:	4622      	mov	r2, r4
 8008740:	462b      	mov	r3, r5
 8008742:	f7f7 fec1 	bl	80004c8 <__aeabi_dmul>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4640      	mov	r0, r8
 800874c:	4649      	mov	r1, r9
 800874e:	f7f7 fd03 	bl	8000158 <__aeabi_dsub>
 8008752:	4604      	mov	r4, r0
 8008754:	460d      	mov	r5, r1
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f7 feb3 	bl	80004c8 <__aeabi_dmul>
 8008762:	2200      	movs	r2, #0
 8008764:	e9cd 0100 	strd	r0, r1, [sp]
 8008768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f7 fcf2 	bl	8000158 <__aeabi_dsub>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800877c:	f7f7 ffce 	bl	800071c <__aeabi_ddiv>
 8008780:	4632      	mov	r2, r6
 8008782:	4604      	mov	r4, r0
 8008784:	460d      	mov	r5, r1
 8008786:	463b      	mov	r3, r7
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f7 fe9c 	bl	80004c8 <__aeabi_dmul>
 8008790:	4632      	mov	r2, r6
 8008792:	463b      	mov	r3, r7
 8008794:	f7f7 fce2 	bl	800015c <__adddf3>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4620      	mov	r0, r4
 800879e:	4629      	mov	r1, r5
 80087a0:	f7f7 fcda 	bl	8000158 <__aeabi_dsub>
 80087a4:	4642      	mov	r2, r8
 80087a6:	464b      	mov	r3, r9
 80087a8:	f7f7 fcd6 	bl	8000158 <__aeabi_dsub>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	2000      	movs	r0, #0
 80087b2:	4938      	ldr	r1, [pc, #224]	@ (8008894 <__ieee754_pow+0xa3c>)
 80087b4:	f7f7 fcd0 	bl	8000158 <__aeabi_dsub>
 80087b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80087bc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80087c0:	da2e      	bge.n	8008820 <__ieee754_pow+0x9c8>
 80087c2:	4652      	mov	r2, sl
 80087c4:	f000 f874 	bl	80088b0 <scalbn>
 80087c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087cc:	f7ff bbed 	b.w	8007faa <__ieee754_pow+0x152>
 80087d0:	4c31      	ldr	r4, [pc, #196]	@ (8008898 <__ieee754_pow+0xa40>)
 80087d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80087d6:	42a3      	cmp	r3, r4
 80087d8:	d91a      	bls.n	8008810 <__ieee754_pow+0x9b8>
 80087da:	4b30      	ldr	r3, [pc, #192]	@ (800889c <__ieee754_pow+0xa44>)
 80087dc:	440b      	add	r3, r1
 80087de:	4303      	orrs	r3, r0
 80087e0:	d009      	beq.n	80087f6 <__ieee754_pow+0x99e>
 80087e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	f7f8 f8df 	bl	80009ac <__aeabi_dcmplt>
 80087ee:	3800      	subs	r0, #0
 80087f0:	bf18      	it	ne
 80087f2:	2001      	movne	r0, #1
 80087f4:	e444      	b.n	8008080 <__ieee754_pow+0x228>
 80087f6:	4642      	mov	r2, r8
 80087f8:	464b      	mov	r3, r9
 80087fa:	f7f7 fcad 	bl	8000158 <__aeabi_dsub>
 80087fe:	4632      	mov	r2, r6
 8008800:	463b      	mov	r3, r7
 8008802:	f7f8 f8e7 	bl	80009d4 <__aeabi_dcmpge>
 8008806:	2800      	cmp	r0, #0
 8008808:	d1eb      	bne.n	80087e2 <__ieee754_pow+0x98a>
 800880a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80088a0 <__ieee754_pow+0xa48>
 800880e:	e6fd      	b.n	800860c <__ieee754_pow+0x7b4>
 8008810:	469a      	mov	sl, r3
 8008812:	4b24      	ldr	r3, [pc, #144]	@ (80088a4 <__ieee754_pow+0xa4c>)
 8008814:	459a      	cmp	sl, r3
 8008816:	f63f aef9 	bhi.w	800860c <__ieee754_pow+0x7b4>
 800881a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800881e:	e71b      	b.n	8008658 <__ieee754_pow+0x800>
 8008820:	4621      	mov	r1, r4
 8008822:	e7d1      	b.n	80087c8 <__ieee754_pow+0x970>
 8008824:	2000      	movs	r0, #0
 8008826:	491b      	ldr	r1, [pc, #108]	@ (8008894 <__ieee754_pow+0xa3c>)
 8008828:	f7ff bb34 	b.w	8007e94 <__ieee754_pow+0x3c>
 800882c:	2000      	movs	r0, #0
 800882e:	2100      	movs	r1, #0
 8008830:	f7ff bb30 	b.w	8007e94 <__ieee754_pow+0x3c>
 8008834:	4650      	mov	r0, sl
 8008836:	4659      	mov	r1, fp
 8008838:	f7ff bb2c 	b.w	8007e94 <__ieee754_pow+0x3c>
 800883c:	460c      	mov	r4, r1
 800883e:	f7ff bb79 	b.w	8007f34 <__ieee754_pow+0xdc>
 8008842:	2400      	movs	r4, #0
 8008844:	f7ff bb64 	b.w	8007f10 <__ieee754_pow+0xb8>
 8008848:	652b82fe 	.word	0x652b82fe
 800884c:	3c971547 	.word	0x3c971547
 8008850:	00000000 	.word	0x00000000
 8008854:	3fe62e43 	.word	0x3fe62e43
 8008858:	fefa39ef 	.word	0xfefa39ef
 800885c:	3fe62e42 	.word	0x3fe62e42
 8008860:	0ca86c39 	.word	0x0ca86c39
 8008864:	be205c61 	.word	0xbe205c61
 8008868:	72bea4d0 	.word	0x72bea4d0
 800886c:	3e663769 	.word	0x3e663769
 8008870:	c5d26bf1 	.word	0xc5d26bf1
 8008874:	3ebbbd41 	.word	0x3ebbbd41
 8008878:	af25de2c 	.word	0xaf25de2c
 800887c:	3f11566a 	.word	0x3f11566a
 8008880:	16bebd93 	.word	0x16bebd93
 8008884:	3f66c16c 	.word	0x3f66c16c
 8008888:	5555553e 	.word	0x5555553e
 800888c:	3fc55555 	.word	0x3fc55555
 8008890:	fff00000 	.word	0xfff00000
 8008894:	3ff00000 	.word	0x3ff00000
 8008898:	4090cbff 	.word	0x4090cbff
 800889c:	3f6f3400 	.word	0x3f6f3400
 80088a0:	4090cc00 	.word	0x4090cc00
 80088a4:	3fe00000 	.word	0x3fe00000

080088a8 <fabs>:
 80088a8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088ac:	4619      	mov	r1, r3
 80088ae:	4770      	bx	lr

080088b0 <scalbn>:
 80088b0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80088b4:	4616      	mov	r6, r2
 80088b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80088ba:	4683      	mov	fp, r0
 80088bc:	468c      	mov	ip, r1
 80088be:	460b      	mov	r3, r1
 80088c0:	b982      	cbnz	r2, 80088e4 <scalbn+0x34>
 80088c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088c6:	4303      	orrs	r3, r0
 80088c8:	d039      	beq.n	800893e <scalbn+0x8e>
 80088ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008988 <scalbn+0xd8>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	f7f7 fdfb 	bl	80004c8 <__aeabi_dmul>
 80088d2:	4b2e      	ldr	r3, [pc, #184]	@ (800898c <scalbn+0xdc>)
 80088d4:	4683      	mov	fp, r0
 80088d6:	429e      	cmp	r6, r3
 80088d8:	468c      	mov	ip, r1
 80088da:	da0d      	bge.n	80088f8 <scalbn+0x48>
 80088dc:	a326      	add	r3, pc, #152	@ (adr r3, 8008978 <scalbn+0xc8>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	e01b      	b.n	800891c <scalbn+0x6c>
 80088e4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80088e8:	42ba      	cmp	r2, r7
 80088ea:	d109      	bne.n	8008900 <scalbn+0x50>
 80088ec:	4602      	mov	r2, r0
 80088ee:	f7f7 fc35 	bl	800015c <__adddf3>
 80088f2:	4683      	mov	fp, r0
 80088f4:	468c      	mov	ip, r1
 80088f6:	e022      	b.n	800893e <scalbn+0x8e>
 80088f8:	460b      	mov	r3, r1
 80088fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80088fe:	3a36      	subs	r2, #54	@ 0x36
 8008900:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008904:	428e      	cmp	r6, r1
 8008906:	dd0c      	ble.n	8008922 <scalbn+0x72>
 8008908:	a31d      	add	r3, pc, #116	@ (adr r3, 8008980 <scalbn+0xd0>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	461c      	mov	r4, r3
 8008910:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008914:	f361 74df 	bfi	r4, r1, #31, #1
 8008918:	4621      	mov	r1, r4
 800891a:	481d      	ldr	r0, [pc, #116]	@ (8008990 <scalbn+0xe0>)
 800891c:	f7f7 fdd4 	bl	80004c8 <__aeabi_dmul>
 8008920:	e7e7      	b.n	80088f2 <scalbn+0x42>
 8008922:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008926:	4432      	add	r2, r6
 8008928:	428a      	cmp	r2, r1
 800892a:	dced      	bgt.n	8008908 <scalbn+0x58>
 800892c:	2a00      	cmp	r2, #0
 800892e:	dd0a      	ble.n	8008946 <scalbn+0x96>
 8008930:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008934:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008938:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800893c:	46ac      	mov	ip, r5
 800893e:	4658      	mov	r0, fp
 8008940:	4661      	mov	r1, ip
 8008942:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008946:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800894a:	da09      	bge.n	8008960 <scalbn+0xb0>
 800894c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008950:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008954:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008958:	480e      	ldr	r0, [pc, #56]	@ (8008994 <scalbn+0xe4>)
 800895a:	f041 011f 	orr.w	r1, r1, #31
 800895e:	e7bd      	b.n	80088dc <scalbn+0x2c>
 8008960:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008964:	3236      	adds	r2, #54	@ 0x36
 8008966:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800896a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800896e:	4658      	mov	r0, fp
 8008970:	4629      	mov	r1, r5
 8008972:	2200      	movs	r2, #0
 8008974:	4b08      	ldr	r3, [pc, #32]	@ (8008998 <scalbn+0xe8>)
 8008976:	e7d1      	b.n	800891c <scalbn+0x6c>
 8008978:	c2f8f359 	.word	0xc2f8f359
 800897c:	01a56e1f 	.word	0x01a56e1f
 8008980:	8800759c 	.word	0x8800759c
 8008984:	7e37e43c 	.word	0x7e37e43c
 8008988:	43500000 	.word	0x43500000
 800898c:	ffff3cb0 	.word	0xffff3cb0
 8008990:	8800759c 	.word	0x8800759c
 8008994:	c2f8f359 	.word	0xc2f8f359
 8008998:	3c900000 	.word	0x3c900000

0800899c <with_errno>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	4604      	mov	r4, r0
 80089a0:	460d      	mov	r5, r1
 80089a2:	4616      	mov	r6, r2
 80089a4:	f7fe fd12 	bl	80073cc <__errno>
 80089a8:	4629      	mov	r1, r5
 80089aa:	6006      	str	r6, [r0, #0]
 80089ac:	4620      	mov	r0, r4
 80089ae:	bd70      	pop	{r4, r5, r6, pc}

080089b0 <xflow>:
 80089b0:	b513      	push	{r0, r1, r4, lr}
 80089b2:	4604      	mov	r4, r0
 80089b4:	4619      	mov	r1, r3
 80089b6:	4610      	mov	r0, r2
 80089b8:	b10c      	cbz	r4, 80089be <xflow+0xe>
 80089ba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80089be:	e9cd 2300 	strd	r2, r3, [sp]
 80089c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c6:	f7f7 fd7f 	bl	80004c8 <__aeabi_dmul>
 80089ca:	2222      	movs	r2, #34	@ 0x22
 80089cc:	b002      	add	sp, #8
 80089ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d2:	f7ff bfe3 	b.w	800899c <with_errno>

080089d6 <__math_uflow>:
 80089d6:	2200      	movs	r2, #0
 80089d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80089dc:	f7ff bfe8 	b.w	80089b0 <xflow>

080089e0 <__math_oflow>:
 80089e0:	2200      	movs	r2, #0
 80089e2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80089e6:	f7ff bfe3 	b.w	80089b0 <xflow>
	...

080089ec <__ieee754_sqrt>:
 80089ec:	4a67      	ldr	r2, [pc, #412]	@ (8008b8c <__ieee754_sqrt+0x1a0>)
 80089ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f2:	438a      	bics	r2, r1
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	460b      	mov	r3, r1
 80089fa:	4604      	mov	r4, r0
 80089fc:	d10e      	bne.n	8008a1c <__ieee754_sqrt+0x30>
 80089fe:	4602      	mov	r2, r0
 8008a00:	f7f7 fd62 	bl	80004c8 <__aeabi_dmul>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4630      	mov	r0, r6
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	f7f7 fba6 	bl	800015c <__adddf3>
 8008a10:	4606      	mov	r6, r0
 8008a12:	460f      	mov	r7, r1
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	dc0c      	bgt.n	8008a3a <__ieee754_sqrt+0x4e>
 8008a20:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008a24:	4302      	orrs	r2, r0
 8008a26:	d0f5      	beq.n	8008a14 <__ieee754_sqrt+0x28>
 8008a28:	b189      	cbz	r1, 8008a4e <__ieee754_sqrt+0x62>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	f7f7 fb94 	bl	8000158 <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	f7f7 fe72 	bl	800071c <__aeabi_ddiv>
 8008a38:	e7ea      	b.n	8008a10 <__ieee754_sqrt+0x24>
 8008a3a:	150a      	asrs	r2, r1, #20
 8008a3c:	d115      	bne.n	8008a6a <__ieee754_sqrt+0x7e>
 8008a3e:	2100      	movs	r1, #0
 8008a40:	e009      	b.n	8008a56 <__ieee754_sqrt+0x6a>
 8008a42:	0ae3      	lsrs	r3, r4, #11
 8008a44:	3a15      	subs	r2, #21
 8008a46:	0564      	lsls	r4, r4, #21
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0fa      	beq.n	8008a42 <__ieee754_sqrt+0x56>
 8008a4c:	e7f7      	b.n	8008a3e <__ieee754_sqrt+0x52>
 8008a4e:	460a      	mov	r2, r1
 8008a50:	e7fa      	b.n	8008a48 <__ieee754_sqrt+0x5c>
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	3101      	adds	r1, #1
 8008a56:	02d8      	lsls	r0, r3, #11
 8008a58:	d5fb      	bpl.n	8008a52 <__ieee754_sqrt+0x66>
 8008a5a:	1e48      	subs	r0, r1, #1
 8008a5c:	1a12      	subs	r2, r2, r0
 8008a5e:	f1c1 0020 	rsb	r0, r1, #32
 8008a62:	fa24 f000 	lsr.w	r0, r4, r0
 8008a66:	4303      	orrs	r3, r0
 8008a68:	408c      	lsls	r4, r1
 8008a6a:	2600      	movs	r6, #0
 8008a6c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008a70:	2116      	movs	r1, #22
 8008a72:	07d2      	lsls	r2, r2, #31
 8008a74:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008a78:	4632      	mov	r2, r6
 8008a7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a82:	bf5c      	itt	pl
 8008a84:	005b      	lslpl	r3, r3, #1
 8008a86:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008a8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a8e:	bf58      	it	pl
 8008a90:	0064      	lslpl	r4, r4, #1
 8008a92:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008a96:	107f      	asrs	r7, r7, #1
 8008a98:	0064      	lsls	r4, r4, #1
 8008a9a:	1815      	adds	r5, r2, r0
 8008a9c:	429d      	cmp	r5, r3
 8008a9e:	bfde      	ittt	le
 8008aa0:	182a      	addle	r2, r5, r0
 8008aa2:	1b5b      	suble	r3, r3, r5
 8008aa4:	1836      	addle	r6, r6, r0
 8008aa6:	0fe5      	lsrs	r5, r4, #31
 8008aa8:	3901      	subs	r1, #1
 8008aaa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008aae:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008ab2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008ab6:	d1f0      	bne.n	8008a9a <__ieee754_sqrt+0xae>
 8008ab8:	460d      	mov	r5, r1
 8008aba:	f04f 0a20 	mov.w	sl, #32
 8008abe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	eb01 0c00 	add.w	ip, r1, r0
 8008ac8:	db02      	blt.n	8008ad0 <__ieee754_sqrt+0xe4>
 8008aca:	d113      	bne.n	8008af4 <__ieee754_sqrt+0x108>
 8008acc:	45a4      	cmp	ip, r4
 8008ace:	d811      	bhi.n	8008af4 <__ieee754_sqrt+0x108>
 8008ad0:	f1bc 0f00 	cmp.w	ip, #0
 8008ad4:	eb0c 0100 	add.w	r1, ip, r0
 8008ad8:	da42      	bge.n	8008b60 <__ieee754_sqrt+0x174>
 8008ada:	2900      	cmp	r1, #0
 8008adc:	db40      	blt.n	8008b60 <__ieee754_sqrt+0x174>
 8008ade:	f102 0e01 	add.w	lr, r2, #1
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	4672      	mov	r2, lr
 8008ae6:	45a4      	cmp	ip, r4
 8008ae8:	bf88      	it	hi
 8008aea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008aee:	eba4 040c 	sub.w	r4, r4, ip
 8008af2:	4405      	add	r5, r0
 8008af4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008af8:	f1ba 0a01 	subs.w	sl, sl, #1
 8008afc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008b00:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008b04:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008b08:	d1db      	bne.n	8008ac2 <__ieee754_sqrt+0xd6>
 8008b0a:	431c      	orrs	r4, r3
 8008b0c:	d01a      	beq.n	8008b44 <__ieee754_sqrt+0x158>
 8008b0e:	4c20      	ldr	r4, [pc, #128]	@ (8008b90 <__ieee754_sqrt+0x1a4>)
 8008b10:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008b94 <__ieee754_sqrt+0x1a8>
 8008b14:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008b18:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b1c:	f7f7 fb1c 	bl	8000158 <__aeabi_dsub>
 8008b20:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f7 ff48 	bl	80009c0 <__aeabi_dcmple>
 8008b30:	b140      	cbz	r0, 8008b44 <__ieee754_sqrt+0x158>
 8008b32:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008b36:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b3a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008b3e:	d111      	bne.n	8008b64 <__ieee754_sqrt+0x178>
 8008b40:	4655      	mov	r5, sl
 8008b42:	3601      	adds	r6, #1
 8008b44:	1072      	asrs	r2, r6, #1
 8008b46:	086b      	lsrs	r3, r5, #1
 8008b48:	07f1      	lsls	r1, r6, #31
 8008b4a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008b4e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008b52:	bf48      	it	mi
 8008b54:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008b58:	4618      	mov	r0, r3
 8008b5a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008b5e:	e757      	b.n	8008a10 <__ieee754_sqrt+0x24>
 8008b60:	4696      	mov	lr, r2
 8008b62:	e7be      	b.n	8008ae2 <__ieee754_sqrt+0xf6>
 8008b64:	f7f7 fafa 	bl	800015c <__adddf3>
 8008b68:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4640      	mov	r0, r8
 8008b72:	4649      	mov	r1, r9
 8008b74:	f7f7 ff1a 	bl	80009ac <__aeabi_dcmplt>
 8008b78:	b120      	cbz	r0, 8008b84 <__ieee754_sqrt+0x198>
 8008b7a:	1ca8      	adds	r0, r5, #2
 8008b7c:	bf08      	it	eq
 8008b7e:	3601      	addeq	r6, #1
 8008b80:	3502      	adds	r5, #2
 8008b82:	e7df      	b.n	8008b44 <__ieee754_sqrt+0x158>
 8008b84:	1c6b      	adds	r3, r5, #1
 8008b86:	f023 0501 	bic.w	r5, r3, #1
 8008b8a:	e7db      	b.n	8008b44 <__ieee754_sqrt+0x158>
 8008b8c:	7ff00000 	.word	0x7ff00000
 8008b90:	20000070 	.word	0x20000070
 8008b94:	20000068 	.word	0x20000068

08008b98 <_init>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	bf00      	nop
 8008b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9e:	bc08      	pop	{r3}
 8008ba0:	469e      	mov	lr, r3
 8008ba2:	4770      	bx	lr

08008ba4 <_fini>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	bf00      	nop
 8008ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008baa:	bc08      	pop	{r3}
 8008bac:	469e      	mov	lr, r3
 8008bae:	4770      	bx	lr
