
node_do_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007990  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007aa0  08007aa0  00008aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b98  08007b98  00009078  2**0
                  CONTENTS
  4 .ARM          00000000  08007b98  08007b98  00009078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b98  08007b98  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b98  08007b98  00008b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b9c  08007b9c  00008b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007ba0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000078  08007c18  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08007c18  000093a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fc4  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a31  00000000  00000000  0001b065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dff  00000000  00000000  0001ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019419  00000000  00000000  0001fa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b26  00000000  00000000  00038e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b68  00000000  00000000  0004f99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2506  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a0  00000000  00000000  000e254c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e79ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a88 	.word	0x08007a88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007a88 	.word	0x08007a88

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <CCS811_ReadReg>:
extern I2C_HandleTypeDef hi2c2;

#define hi2cxc hi2c2
// Hàm đọc từ 1 thanh ghi (1byte)
uint8_t CCS811_ReadReg(uint8_t addr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &result, 1, 100);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	2364      	movs	r3, #100	@ 0x64
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	f107 030f 	add.w	r3, r7, #15
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	21b4      	movs	r1, #180	@ 0xb4
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <CCS811_ReadReg+0x34>)
 8000d5a:	f002 fc95 	bl	8003688 <HAL_I2C_Mem_Read>
    return result;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000118 	.word	0x20000118

08000d6c <CCS811_ReadRegMulti>:
// hàm đọc nhiều byte từ thanh ghi
void CCS811_ReadRegMulti(uint8_t addr, uint8_t * val,uint8_t size)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read( &hi2cxc, CCS811_ADDR, ( uint8_t )addr, I2C_MEMADD_SIZE_8BIT, val, size,100 );
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	2164      	movs	r1, #100	@ 0x64
 8000d86:	9102      	str	r1, [sp, #8]
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	21b4      	movs	r1, #180	@ 0xb4
 8000d92:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <CCS811_ReadRegMulti+0x34>)
 8000d94:	f002 fc78 	bl	8003688 <HAL_I2C_Mem_Read>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000118 	.word	0x20000118

08000da4 <CCS811_WriteReg>:

// Hàm viết vào 1 thanh ghi 1byte
void CCS811_WriteReg(uint8_t addr, uint8_t val)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	1dbb      	adds	r3, r7, #6
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	21b4      	movs	r1, #180	@ 0xb4
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <CCS811_WriteReg+0x34>)
 8000dca:	f002 fb63 	bl	8003494 <HAL_I2C_Mem_Write>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000118 	.word	0x20000118

08000ddc <CCS811_Init>:
void CCS811_WriteRegMulti(uint8_t addr, uint8_t *data, uint8_t length)
{
    HAL_I2C_Mem_Write(&hi2cxc, CCS811_ADDR, addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
}
// Hàm khởi tạo CCS811
void CCS811_Init() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
    uint8_t status[1] = {0};
 8000de2:	2300      	movs	r3, #0
 8000de4:	723b      	strb	r3, [r7, #8]
    int Init_OK = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000dea:	e026      	b.n	8000e3a <CCS811_Init+0x5e>
    {
		// Kiểm tra trạng thái cảm biến
    	status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ffa1 	bl	8000d34 <CCS811_ReadReg>
 8000df2:	4603      	mov	r3, r0
 8000df4:	723b      	strb	r3, [r7, #8]
		if ((status[0] & 0x10) == 0)
 8000df6:	7a3b      	ldrb	r3, [r7, #8]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <CCS811_Init+0x2a>
		{  // Kiểm tra nếu chưa sẵn sàng (bit 4 là 0)
			Init_OK = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	e019      	b.n	8000e3a <CCS811_Init+0x5e>
		}
		else
		{
			// Gửi lệnh bắt đầu ứng dụng
			uint8_t app_start = CCS811_APP_START;
 8000e06:	23f4      	movs	r3, #244	@ 0xf4
 8000e08:	71fb      	strb	r3, [r7, #7]
			HAL_I2C_Master_Transmit(&hi2cxc, CCS811_ADDR, &app_start, 1, HAL_MAX_DELAY);
 8000e0a:	1dfa      	adds	r2, r7, #7
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	21b4      	movs	r1, #180	@ 0xb4
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <CCS811_Init+0x70>)
 8000e18:	f002 fa3e 	bl	8003298 <HAL_I2C_Master_Transmit>
			// Kiểm tra lại trạng thái
			status[0]=CCS811_ReadReg(CCS811_STATUS);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ff89 	bl	8000d34 <CCS811_ReadReg>
 8000e22:	4603      	mov	r3, r0
 8000e24:	723b      	strb	r3, [r7, #8]
			if ((status[0] & 0x90) != 0x90) //bit 7 và 4=1
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8000e2c:	2b90      	cmp	r3, #144	@ 0x90
 8000e2e:	d002      	beq.n	8000e36 <CCS811_Init+0x5a>
			{  // Kiểm tra nếu sẵn sàng và không có lỗi
				Init_OK = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e001      	b.n	8000e3a <CCS811_Init+0x5e>
			}
			else
			{
				Init_OK = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
    while(!Init_OK)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0d5      	beq.n	8000dec <CCS811_Init+0x10>
			}

		}
    }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000118 	.word	0x20000118

08000e50 <CCS811_Set_Mode>:
void CCS811_Set_Mode(uint8_t mode)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint8_t meas_mode = CCS811_ReadReg(CCS811_MEAS_MODE); //đọc giá trị lúc trước
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff ff6a 	bl	8000d34 <CCS811_ReadReg>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
	meas_mode = meas_mode|(mode <<4); //Set mode
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	73fb      	strb	r3, [r7, #15]
   // Chế độ đo
    CCS811_WriteReg(CCS811_MEAS_MODE, meas_mode);
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	4619      	mov	r1, r3
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff ff93 	bl	8000da4 <CCS811_WriteReg>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <CCS811_Read_Co2>:
	    //Mode 4 = RAW mode.
 */

//Hàm đọc giá trị Co2
void CCS811_Read_Co2(uint16_t *eCO2)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
    uint8_t buf[8]={0};
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
    CCS811_ReadRegMulti(CCS811_ALG_RESULT_DATA, buf, 8);
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f7ff ff64 	bl	8000d6c <CCS811_ReadRegMulti>
    // Ghép hai byte đầu để lấy giá trị eCO2
    *eCO2 = (buf[0] << 8) | buf[1];
 8000ea4:	7a3b      	ldrb	r3, [r7, #8]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	7a7b      	ldrb	r3, [r7, #9]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	801a      	strh	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <CCS811_EnableInt>:
    }
}

//Enable the nINT signal
void CCS811_EnableInt(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	uint8_t setting = CCS811_ReadReg(CCS811_MEAS_MODE); //đọc giá trị lúc trước
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff ff34 	bl	8000d34 <CCS811_ReadReg>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
	setting |= (1 << 3); //Set INTERRUPT bit ( chế độ khi có giá trị mới sẽ ngắt)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	71fb      	strb	r3, [r7, #7]
	CCS811_WriteReg(CCS811_MEAS_MODE, setting);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4619      	mov	r1, r3
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff ff61 	bl	8000da4 <CCS811_WriteReg>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <lcd_send_cmd>:
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f023 030f 	bic.w	r3, r3, #15
 8000efc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 030c 	orr.w	r3, r3, #12
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	f043 030c 	orr.w	r3, r3, #12
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000f2c:	f107 0208 	add.w	r2, r7, #8
 8000f30:	2364      	movs	r3, #100	@ 0x64
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2304      	movs	r3, #4
 8000f36:	214e      	movs	r1, #78	@ 0x4e
 8000f38:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <lcd_send_cmd+0x5c>)
 8000f3a:	f002 f9ad 	bl	8003298 <HAL_I2C_Master_Transmit>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000c4 	.word	0x200000c4

08000f4c <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f023 030f 	bic.w	r3, r3, #15
 8000f5c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	f043 030d 	orr.w	r3, r3, #13
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f043 0309 	orr.w	r3, r3, #9
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	f043 030d 	orr.w	r3, r3, #13
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	f043 0309 	orr.w	r3, r3, #9
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	2364      	movs	r3, #100	@ 0x64
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2304      	movs	r3, #4
 8000f96:	214e      	movs	r1, #78	@ 0x4e
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <lcd_send_data+0x5c>)
 8000f9a:	f002 f97d 	bl	8003298 <HAL_I2C_Master_Transmit>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200000c4 	.word	0x200000c4

08000fac <lcd_put_cur>:
		lcd_send_data(' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <lcd_put_cur+0x18>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d005      	beq.n	8000fce <lcd_put_cur+0x22>
 8000fc2:	e009      	b.n	8000fd8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fca:	603b      	str	r3, [r7, #0]
            break;
 8000fcc:	e004      	b.n	8000fd8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fd4:	603b      	str	r3, [r7, #0]
            break;
 8000fd6:	bf00      	nop
    }

    lcd_send_cmd(col);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff85 	bl	8000eec <lcd_send_cmd>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <lcd_init>:

void lcd_init (void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 8000fee:	2032      	movs	r0, #50	@ 0x32
 8000ff0:	f001 f860 	bl	80020b4 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000ff4:	2030      	movs	r0, #48	@ 0x30
 8000ff6:	f7ff ff79 	bl	8000eec <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f001 f85a 	bl	80020b4 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001000:	2030      	movs	r0, #48	@ 0x30
 8001002:	f7ff ff73 	bl	8000eec <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 8001006:	2001      	movs	r0, #1
 8001008:	f001 f854 	bl	80020b4 <HAL_Delay>
	lcd_send_cmd(0x30);
 800100c:	2030      	movs	r0, #48	@ 0x30
 800100e:	f7ff ff6d 	bl	8000eec <lcd_send_cmd>
	HAL_Delay(10);
 8001012:	200a      	movs	r0, #10
 8001014:	f001 f84e 	bl	80020b4 <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 8001018:	2020      	movs	r0, #32
 800101a:	f7ff ff67 	bl	8000eec <lcd_send_cmd>
	HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f001 f848 	bl	80020b4 <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 8001024:	2028      	movs	r0, #40	@ 0x28
 8001026:	f7ff ff61 	bl	8000eec <lcd_send_cmd>
	HAL_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f001 f842 	bl	80020b4 <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 8001030:	2008      	movs	r0, #8
 8001032:	f7ff ff5b 	bl	8000eec <lcd_send_cmd>
	HAL_Delay(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f001 f83c 	bl	80020b4 <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ff55 	bl	8000eec <lcd_send_cmd>
	HAL_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f001 f836 	bl	80020b4 <HAL_Delay>
	HAL_Delay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f001 f833 	bl	80020b4 <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 800104e:	2006      	movs	r0, #6
 8001050:	f7ff ff4c 	bl	8000eec <lcd_send_cmd>
	HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f001 f82d 	bl	80020b4 <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 800105a:	200c      	movs	r0, #12
 800105c:	f7ff ff46 	bl	8000eec <lcd_send_cmd>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 800106c:	e006      	b.n	800107c <lcd_send_string+0x18>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff68 	bl	8000f4c <lcd_send_data>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f4      	bne.n	800106e <lcd_send_string+0xa>
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <CO_ppm_convert>:
char CO_ppm_buf[4];
char CO2_ppm_buf[4];

int connect_error_flag=0;
int connect_miss_flag=0;
int CO_ppm_convert(float CO_vol) {
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    float a = ((5.0 - CO_vol) / CO_vol) * (10/5);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff f9bd 	bl	8000418 <__aeabi_f2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4922      	ldr	r1, [pc, #136]	@ (8001130 <CO_ppm_convert+0xa0>)
 80010a8:	f7ff f856 	bl	8000158 <__aeabi_dsub>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	461d      	mov	r5, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff f9af 	bl	8000418 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff fb2b 	bl	800071c <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	f7ff f843 	bl	800015c <__adddf3>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fccb 	bl	8000a78 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	60fb      	str	r3, [r7, #12]
    return (int)round(100 * pow(a, -1.559));
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f7ff f996 	bl	8000418 <__aeabi_f2d>
 80010ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8001128 <CO_ppm_convert+0x98>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f005 fd73 	bl	8006bdc <pow>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <CO_ppm_convert+0xa4>)
 80010fc:	f7ff f9e4 	bl	80004c8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f005 fdd6 	bl	8006cb8 <round>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fc88 	bl	8000a28 <__aeabi_d2iz>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bdb0      	pop	{r4, r5, r7, pc}
 8001122:	bf00      	nop
 8001124:	f3af 8000 	nop.w
 8001128:	fbe76c8b 	.word	0xfbe76c8b
 800112c:	bff8f1a9 	.word	0xbff8f1a9
 8001130:	40140000 	.word	0x40140000
 8001134:	40590000 	.word	0x40590000

08001138 <Auto_Warning>:

void Auto_Warning ()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	  // khi không ấn nút( cảnh báo tự đông)
	  if(CO2_ppm<=1000 && CO_ppm <= 25)
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <Auto_Warning+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001144:	dc06      	bgt.n	8001154 <Auto_Warning+0x1c>
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <Auto_Warning+0x44>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b19      	cmp	r3, #25
 800114c:	dc02      	bgt.n	8001154 <Auto_Warning+0x1c>
	  {
		  L1_Warning_On();
 800114e:	f000 ff09 	bl	8001f64 <L1_Warning_On>
 8001152:	e00e      	b.n	8001172 <Auto_Warning+0x3a>
	  }
	  else if((CO2_ppm>=2000) || (CO_ppm>=50))
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <Auto_Warning+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800115c:	da03      	bge.n	8001166 <Auto_Warning+0x2e>
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <Auto_Warning+0x44>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b31      	cmp	r3, #49	@ 0x31
 8001164:	dd02      	ble.n	800116c <Auto_Warning+0x34>
	  {
		  L3_Warning_On();
 8001166:	f000 fedd 	bl	8001f24 <L3_Warning_On>
 800116a:	e002      	b.n	8001172 <Auto_Warning+0x3a>
	  }
	  else
	  {
		  L2_Warning_On();
 800116c:	f000 feba 	bl	8001ee4 <L2_Warning_On>
	  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000238 	.word	0x20000238
 800117c:	20000244 	.word	0x20000244

08001180 <Manual_Warning>:
void Manual_Warning ()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    if(l1_state==1)
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <Manual_Warning+0x30>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d102      	bne.n	8001192 <Manual_Warning+0x12>
    {
      L1_Warning_On();
 800118c:	f000 feea 	bl	8001f64 <L1_Warning_On>
    }
    else if(l3_state==1)
    {
      L3_Warning_On();
    }
}
 8001190:	e00c      	b.n	80011ac <Manual_Warning+0x2c>
    else if (l2_state==1)
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <Manual_Warning+0x34>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d102      	bne.n	80011a0 <Manual_Warning+0x20>
      L2_Warning_On();
 800119a:	f000 fea3 	bl	8001ee4 <L2_Warning_On>
}
 800119e:	e005      	b.n	80011ac <Manual_Warning+0x2c>
    else if(l3_state==1)
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <Manual_Warning+0x38>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <Manual_Warning+0x2c>
      L3_Warning_On();
 80011a8:	f000 febc 	bl	8001f24 <L3_Warning_On>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000224 	.word	0x20000224
 80011b4:	20000228 	.word	0x20000228
 80011b8:	2000022c 	.word	0x2000022c

080011bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011cc:	d102      	bne.n	80011d4 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
    	HAL_ADC_Start_IT(&hadc1);
 80011ce:	4803      	ldr	r0, [pc, #12]	@ (80011dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011d0:	f001 f86c 	bl	80022ac <HAL_ADC_Start_IT>
    }
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000094 	.word	0x20000094

080011e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a50      	ldr	r2, [pc, #320]	@ (8001330 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d105      	bne.n	80011fe <HAL_ADC_ConvCpltCallback+0x1e>
    CO_adc_val = HAL_ADC_GetValue(&hadc1);
 80011f2:	4850      	ldr	r0, [pc, #320]	@ (8001334 <HAL_ADC_ConvCpltCallback+0x154>)
 80011f4:	f001 f910 	bl	8002418 <HAL_ADC_GetValue>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001338 <HAL_ADC_ConvCpltCallback+0x158>)
 80011fc:	6013      	str	r3, [r2, #0]
	CO_vol = ((float)CO_adc_val / 4095.0) * 5;
 80011fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001338 <HAL_ADC_ConvCpltCallback+0x158>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fd3e 	bl	8000c84 <__aeabi_ui2f>
 8001208:	4603      	mov	r3, r0
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f904 	bl	8000418 <__aeabi_f2d>
 8001210:	a345      	add	r3, pc, #276	@ (adr r3, 8001328 <HAL_ADC_ConvCpltCallback+0x148>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff fa81 	bl	800071c <__aeabi_ddiv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b45      	ldr	r3, [pc, #276]	@ (800133c <HAL_ADC_ConvCpltCallback+0x15c>)
 8001228:	f7ff f94e 	bl	80004c8 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fc20 	bl	8000a78 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <HAL_ADC_ConvCpltCallback+0x160>)
 800123c:	6013      	str	r3, [r2, #0]
	CO_ppm = CO_ppm_convert(CO_vol);
 800123e:	4b40      	ldr	r3, [pc, #256]	@ (8001340 <HAL_ADC_ConvCpltCallback+0x160>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff24 	bl	8001090 <CO_ppm_convert>
 8001248:	4603      	mov	r3, r0
 800124a:	4a3e      	ldr	r2, [pc, #248]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x164>)
 800124c:	6013      	str	r3, [r2, #0]
	sprintf(CO_ppm_buf, "%d", CO_ppm);
 800124e:	4b3d      	ldr	r3, [pc, #244]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x164>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	493c      	ldr	r1, [pc, #240]	@ (8001348 <HAL_ADC_ConvCpltCallback+0x168>)
 8001256:	483d      	ldr	r0, [pc, #244]	@ (800134c <HAL_ADC_ConvCpltCallback+0x16c>)
 8001258:	f005 f810 	bl	800627c <siprintf>
	// Xóa vị trí hiện tại trên LCD trước khi ghi chuỗi mới
	lcd_put_cur(1, 4);
 800125c:	2104      	movs	r1, #4
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fea4 	bl	8000fac <lcd_put_cur>
	lcd_send_string("    ");  // Ghi đè 4f khoảng trắng tại vị trí đó
 8001264:	483a      	ldr	r0, [pc, #232]	@ (8001350 <HAL_ADC_ConvCpltCallback+0x170>)
 8001266:	f7ff fefd 	bl	8001064 <lcd_send_string>

	lcd_put_cur(1, 4);
 800126a:	2104      	movs	r1, #4
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fe9d 	bl	8000fac <lcd_put_cur>
	lcd_send_string (CO_ppm_buf);
 8001272:	4836      	ldr	r0, [pc, #216]	@ (800134c <HAL_ADC_ConvCpltCallback+0x16c>)
 8001274:	f7ff fef6 	bl	8001064 <lcd_send_string>
	if (CO_ppm <=25 )
 8001278:	4b32      	ldr	r3, [pc, #200]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x164>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b19      	cmp	r3, #25
 800127e:	dc0e      	bgt.n	800129e <HAL_ADC_ConvCpltCallback+0xbe>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8001280:	4834      	ldr	r0, [pc, #208]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 8001282:	f003 fe13 	bl	8004eac <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 60000);     // Cập nhật chu kỳ
 8001286:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800128e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001290:	4b30      	ldr	r3, [pc, #192]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 8001292:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001296:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 8001298:	482e      	ldr	r0, [pc, #184]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 800129a:	f003 fdb5 	bl	8004e08 <HAL_TIM_Base_Start_IT>
	}
    if(CO_ppm >25 && CO_ppm <50)
 800129e:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x164>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b19      	cmp	r3, #25
 80012a4:	dd13      	ble.n	80012ce <HAL_ADC_ConvCpltCallback+0xee>
 80012a6:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x164>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b31      	cmp	r3, #49	@ 0x31
 80012ac:	dc0f      	bgt.n	80012ce <HAL_ADC_ConvCpltCallback+0xee>
    {
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 80012ae:	4829      	ldr	r0, [pc, #164]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 80012b0:	f003 fdfc 	bl	8004eac <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 30000);     // Cập nhật chu kỳ
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80012bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012be:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 80012c0:	f247 5230 	movw	r2, #30000	@ 0x7530
 80012c4:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 80012c6:	4823      	ldr	r0, [pc, #140]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 80012c8:	f003 fd9e 	bl	8004e08 <HAL_TIM_Base_Start_IT>
 80012cc:	e012      	b.n	80012f4 <HAL_ADC_ConvCpltCallback+0x114>
    }
    else if( CO_ppm >=50)
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x164>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b31      	cmp	r3, #49	@ 0x31
 80012d4:	dd0e      	ble.n	80012f4 <HAL_ADC_ConvCpltCallback+0x114>
    {
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 80012d6:	481f      	ldr	r0, [pc, #124]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 80012d8:	f003 fde8 	bl	8004eac <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 10000);     // Cập nhật chu kỳ
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 80012e8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012ec:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 80012ee:	4819      	ldr	r0, [pc, #100]	@ (8001354 <HAL_ADC_ConvCpltCallback+0x174>)
 80012f0:	f003 fd8a 	bl	8004e08 <HAL_TIM_Base_Start_IT>
    }
	if(CO_ppm > 9999)
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x164>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012fc:	4293      	cmp	r3, r2
 80012fe:	dd0d      	ble.n	800131c <HAL_ADC_ConvCpltCallback+0x13c>
	{
	   lcd_put_cur(1, 8);
 8001300:	2108      	movs	r1, #8
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fe52 	bl	8000fac <lcd_put_cur>
	   lcd_send_string("        ");  // Ghi đè 8 khoảng trắng tại vị trí đó
 8001308:	4813      	ldr	r0, [pc, #76]	@ (8001358 <HAL_ADC_ConvCpltCallback+0x178>)
 800130a:	f7ff feab 	bl	8001064 <lcd_send_string>
	   lcd_put_cur(1, 8);
 800130e:	2108      	movs	r1, #8
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff fe4b 	bl	8000fac <lcd_put_cur>
	   lcd_send_string ("ppm|AUTO");
 8001316:	4811      	ldr	r0, [pc, #68]	@ (800135c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001318:	f7ff fea4 	bl	8001064 <lcd_send_string>
	}
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	40affe00 	.word	0x40affe00
 8001330:	40012400 	.word	0x40012400
 8001334:	20000094 	.word	0x20000094
 8001338:	2000023c 	.word	0x2000023c
 800133c:	40140000 	.word	0x40140000
 8001340:	20000240 	.word	0x20000240
 8001344:	20000244 	.word	0x20000244
 8001348:	08007aa0 	.word	0x08007aa0
 800134c:	20000248 	.word	0x20000248
 8001350:	08007aa4 	.word	0x08007aa4
 8001354:	2000016c 	.word	0x2000016c
 8001358:	08007aac 	.word	0x08007aac
 800135c:	08007ab8 	.word	0x08007ab8

08001360 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
    if (GPIO_Pin == CCS811_INT_Pin)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	2b08      	cmp	r3, #8
 800136e:	d14f      	bne.n	8001410 <HAL_GPIO_EXTI_Callback+0xb0>
    {  // Kiểm tra chân ngắt từ CCS811
        // đ�?c dữ liệu từ CCS811
    	CCS811_Read_Co2(&eCO2);
 8001370:	4857      	ldr	r0, [pc, #348]	@ (80014d0 <HAL_GPIO_EXTI_Callback+0x170>)
 8001372:	f7ff fd88 	bl	8000e86 <CCS811_Read_Co2>
        CO2_ppm = (int)(eCO2);
 8001376:	4b56      	ldr	r3, [pc, #344]	@ (80014d0 <HAL_GPIO_EXTI_Callback+0x170>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b55      	ldr	r3, [pc, #340]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x174>)
 800137e:	601a      	str	r2, [r3, #0]
		sprintf(CO2_ppm_buf, "%d", CO2_ppm);
 8001380:	4b54      	ldr	r3, [pc, #336]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x174>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4954      	ldr	r1, [pc, #336]	@ (80014d8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001388:	4854      	ldr	r0, [pc, #336]	@ (80014dc <HAL_GPIO_EXTI_Callback+0x17c>)
 800138a:	f004 ff77 	bl	800627c <siprintf>
		// Xóa vị trí hiện tại trên LCD trước khi ghi chuỗi mới
		lcd_put_cur(0, 4);
 800138e:	2104      	movs	r1, #4
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fe0b 	bl	8000fac <lcd_put_cur>
		lcd_send_string("    ");  // Ghi đè 4 khoảng trắng tại vị trí đó
 8001396:	4852      	ldr	r0, [pc, #328]	@ (80014e0 <HAL_GPIO_EXTI_Callback+0x180>)
 8001398:	f7ff fe64 	bl	8001064 <lcd_send_string>
        // ghi vào vị trí này
		lcd_put_cur(0, 4);
 800139c:	2104      	movs	r1, #4
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fe04 	bl	8000fac <lcd_put_cur>
		lcd_send_string (CO2_ppm_buf);
 80013a4:	484d      	ldr	r0, [pc, #308]	@ (80014dc <HAL_GPIO_EXTI_Callback+0x17c>)
 80013a6:	f7ff fe5d 	bl	8001064 <lcd_send_string>
	    if(CO2_ppm>1000 && co2_flag==0)
 80013aa:	4b4a      	ldr	r3, [pc, #296]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x174>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013b2:	dd09      	ble.n	80013c8 <HAL_GPIO_EXTI_Callback+0x68>
 80013b4:	4b4b      	ldr	r3, [pc, #300]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x184>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_GPIO_EXTI_Callback+0x68>
		{
			CCS811_Set_Mode(CCS811_MODE_10SEC);
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff fd47 	bl	8000e50 <CCS811_Set_Mode>
			co2_flag= 1;
 80013c2:	4b48      	ldr	r3, [pc, #288]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x184>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
		}
        if(CO2_ppm<=1000 && co2_flag==1)
 80013c8:	4b42      	ldr	r3, [pc, #264]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x174>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013d0:	dc09      	bgt.n	80013e6 <HAL_GPIO_EXTI_Callback+0x86>
 80013d2:	4b44      	ldr	r3, [pc, #272]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x184>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_GPIO_EXTI_Callback+0x86>
        {
			CCS811_Set_Mode(CCS811_MODE_60SEC);
 80013da:	2003      	movs	r0, #3
 80013dc:	f7ff fd38 	bl	8000e50 <CCS811_Set_Mode>
			co2_flag= 0;
 80013e0:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x184>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
        }
		if(CO2_ppm > 9999)
 80013e6:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x174>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013ee:	4293      	cmp	r3, r2
 80013f0:	dd6a      	ble.n	80014c8 <HAL_GPIO_EXTI_Callback+0x168>
		{
		   lcd_put_cur(1, 8);
 80013f2:	2108      	movs	r1, #8
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fdd9 	bl	8000fac <lcd_put_cur>
		   lcd_send_string("        ");  // Ghi đè 8 khoảng trắng tại vị trí đó
 80013fa:	483b      	ldr	r0, [pc, #236]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0x188>)
 80013fc:	f7ff fe32 	bl	8001064 <lcd_send_string>
		   lcd_put_cur(1, 8);
 8001400:	2108      	movs	r1, #8
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fdd2 	bl	8000fac <lcd_put_cur>
		   lcd_send_string ("ppm|MODE");
 8001408:	4838      	ldr	r0, [pc, #224]	@ (80014ec <HAL_GPIO_EXTI_Callback+0x18c>)
 800140a:	f7ff fe2b 	bl	8001064 <lcd_send_string>
     l3_state = 1;
     at_state = 0;
	lcd_put_cur(1, 12);
	lcd_send_string ("HAND");
    }
}
 800140e:	e05b      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x168>
    else if (GPIO_Pin == L1_BUT_Pin)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	2b10      	cmp	r3, #16
 8001414:	d11b      	bne.n	800144e <HAL_GPIO_EXTI_Callback+0xee>
        while(HAL_GPIO_ReadPin(L1_BUT_GPIO_Port,L1_BUT_Pin)==0)
 8001416:	bf00      	nop
 8001418:	2110      	movs	r1, #16
 800141a:	4835      	ldr	r0, [pc, #212]	@ (80014f0 <HAL_GPIO_EXTI_Callback+0x190>)
 800141c:	f001 fdb0 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f8      	beq.n	8001418 <HAL_GPIO_EXTI_Callback+0xb8>
     l1_state = 1;
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <HAL_GPIO_EXTI_Callback+0x194>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]
     l2_state = 0;
 800142c:	4b32      	ldr	r3, [pc, #200]	@ (80014f8 <HAL_GPIO_EXTI_Callback+0x198>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
     l3_state = 0;
 8001432:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <HAL_GPIO_EXTI_Callback+0x19c>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
     at_state = 0;
 8001438:	4b31      	ldr	r3, [pc, #196]	@ (8001500 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 800143e:	210c      	movs	r1, #12
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff fdb3 	bl	8000fac <lcd_put_cur>
	lcd_send_string ("HAND");
 8001446:	482f      	ldr	r0, [pc, #188]	@ (8001504 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001448:	f7ff fe0c 	bl	8001064 <lcd_send_string>
}
 800144c:	e03c      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x168>
    else if (GPIO_Pin == L2_BUT_Pin)
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d11b      	bne.n	800148c <HAL_GPIO_EXTI_Callback+0x12c>
      while(HAL_GPIO_ReadPin(L2_BUT_GPIO_Port,L2_BUT_Pin)==0)
 8001454:	bf00      	nop
 8001456:	2102      	movs	r1, #2
 8001458:	482b      	ldr	r0, [pc, #172]	@ (8001508 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800145a:	f001 fd91 	bl	8002f80 <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f8      	beq.n	8001456 <HAL_GPIO_EXTI_Callback+0xf6>
     l1_state = 0;
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <HAL_GPIO_EXTI_Callback+0x194>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
     l2_state = 1;
 800146a:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <HAL_GPIO_EXTI_Callback+0x198>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
     l3_state = 0;
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <HAL_GPIO_EXTI_Callback+0x19c>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
     at_state = 0;
 8001476:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 800147c:	210c      	movs	r1, #12
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff fd94 	bl	8000fac <lcd_put_cur>
	lcd_send_string ("HAND");
 8001484:	481f      	ldr	r0, [pc, #124]	@ (8001504 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001486:	f7ff fded 	bl	8001064 <lcd_send_string>
}
 800148a:	e01d      	b.n	80014c8 <HAL_GPIO_EXTI_Callback+0x168>
    else if (GPIO_Pin == L3_BUT_Pin)
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d11a      	bne.n	80014c8 <HAL_GPIO_EXTI_Callback+0x168>
     while(HAL_GPIO_ReadPin(L3_BUT_GPIO_Port,L3_BUT_Pin)==0)
 8001492:	bf00      	nop
 8001494:	2101      	movs	r1, #1
 8001496:	481c      	ldr	r0, [pc, #112]	@ (8001508 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001498:	f001 fd72 	bl	8002f80 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f8      	beq.n	8001494 <HAL_GPIO_EXTI_Callback+0x134>
     l1_state = 0;
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_GPIO_EXTI_Callback+0x194>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
     l2_state = 0;
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <HAL_GPIO_EXTI_Callback+0x198>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
     l3_state = 1;
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_GPIO_EXTI_Callback+0x19c>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
     at_state = 0;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
	lcd_put_cur(1, 12);
 80014ba:	210c      	movs	r1, #12
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fd75 	bl	8000fac <lcd_put_cur>
	lcd_send_string ("HAND");
 80014c2:	4810      	ldr	r0, [pc, #64]	@ (8001504 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80014c4:	f7ff fdce 	bl	8001064 <lcd_send_string>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000234 	.word	0x20000234
 80014d4:	20000238 	.word	0x20000238
 80014d8:	08007aa0 	.word	0x08007aa0
 80014dc:	2000024c 	.word	0x2000024c
 80014e0:	08007aa4 	.word	0x08007aa4
 80014e4:	20000230 	.word	0x20000230
 80014e8:	08007aac 	.word	0x08007aac
 80014ec:	08007ac4 	.word	0x08007ac4
 80014f0:	40010800 	.word	0x40010800
 80014f4:	20000224 	.word	0x20000224
 80014f8:	20000228 	.word	0x20000228
 80014fc:	2000022c 	.word	0x2000022c
 8001500:	20000004 	.word	0x20000004
 8001504:	08007ad0 	.word	0x08007ad0
 8001508:	40010c00 	.word	0x40010c00

0800150c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <HAL_UART_RxCpltCallback+0x88>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d135      	bne.n	800158a <HAL_UART_RxCpltCallback+0x7e>
        if (RS_rxBuffer[0] == myID) { // Kiểm tra địa chỉ
 800151e:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <HAL_UART_RxCpltCallback+0x8c>)
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <HAL_UART_RxCpltCallback+0x90>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d12a      	bne.n	8001580 <HAL_UART_RxCpltCallback+0x74>
            // Xử lý lệnh
            if (RS_rxBuffer[1] == 0x02) {
 800152a:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_UART_RxCpltCallback+0x8c>)
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d113      	bne.n	800155a <HAL_UART_RxCpltCallback+0x4e>
                // Gửi phản hồi
                RS_txBuffer[0] = myID;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_UART_RxCpltCallback+0x90>)
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <HAL_UART_RxCpltCallback+0x94>)
 8001538:	701a      	strb	r2, [r3, #0]
        		sprintf((char *)(RS_txBuffer+1), ",%d,%d,", CO_ppm, CO2_ppm);
 800153a:	481a      	ldr	r0, [pc, #104]	@ (80015a4 <HAL_UART_RxCpltCallback+0x98>)
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_UART_RxCpltCallback+0x9c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <HAL_UART_RxCpltCallback+0xa0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	491a      	ldr	r1, [pc, #104]	@ (80015b0 <HAL_UART_RxCpltCallback+0xa4>)
 8001546:	f004 fe99 	bl	800627c <siprintf>
                HAL_UART_Transmit(&huart1, RS_txBuffer, 15, HAL_MAX_DELAY);
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	220f      	movs	r2, #15
 8001550:	4913      	ldr	r1, [pc, #76]	@ (80015a0 <HAL_UART_RxCpltCallback+0x94>)
 8001552:	4818      	ldr	r0, [pc, #96]	@ (80015b4 <HAL_UART_RxCpltCallback+0xa8>)
 8001554:	f004 f878 	bl	8005648 <HAL_UART_Transmit>
 8001558:	e012      	b.n	8001580 <HAL_UART_RxCpltCallback+0x74>
            }
            else if(RS_rxBuffer[1] == 0xFF) // nhận lại oke
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_UART_RxCpltCallback+0x8c>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	2bff      	cmp	r3, #255	@ 0xff
 8001560:	d103      	bne.n	800156a <HAL_UART_RxCpltCallback+0x5e>
			{
            	connect_error_flag=0;
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_UART_RxCpltCallback+0xac>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e00a      	b.n	8001580 <HAL_UART_RxCpltCallback+0x74>
			}
            else if(RS_rxBuffer[1] == 0xEE) // thiếu dữ liệu gửi
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_UART_RxCpltCallback+0x8c>)
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	2bee      	cmp	r3, #238	@ 0xee
 8001570:	d103      	bne.n	800157a <HAL_UART_RxCpltCallback+0x6e>
            {
            	connect_miss_flag=1;
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <HAL_UART_RxCpltCallback+0xb0>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e002      	b.n	8001580 <HAL_UART_RxCpltCallback+0x74>
            }
            else
            {
            	connect_error_flag=1; // lỗi kết nối
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_UART_RxCpltCallback+0xac>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
            }
        }
        // Tiếp tục nhận
        HAL_UART_Receive_IT(&huart1, RS_rxBuffer, 3);
 8001580:	2203      	movs	r2, #3
 8001582:	4905      	ldr	r1, [pc, #20]	@ (8001598 <HAL_UART_RxCpltCallback+0x8c>)
 8001584:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <HAL_UART_RxCpltCallback+0xa8>)
 8001586:	f004 f8ea 	bl	800575e <HAL_UART_Receive_IT>
    }
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40013800 	.word	0x40013800
 8001598:	200001fc 	.word	0x200001fc
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000210 	.word	0x20000210
 80015a4:	20000211 	.word	0x20000211
 80015a8:	20000244 	.word	0x20000244
 80015ac:	20000238 	.word	0x20000238
 80015b0:	08007ad8 	.word	0x08007ad8
 80015b4:	200001b4 	.word	0x200001b4
 80015b8:	20000250 	.word	0x20000250
 80015bc:	20000254 	.word	0x20000254

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c4:	f000 fd14 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c8:	f000 f864 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015cc:	f000 f9cc 	bl	8001968 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015d0:	f000 f8b8 	bl	8001744 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015d4:	f000 f8f4 	bl	80017c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80015d8:	f000 f920 	bl	800181c <MX_I2C2_Init>
  MX_TIM2_Init();
 80015dc:	f000 f94c 	bl	8001878 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80015e0:	f000 f998 	bl	8001914 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //while(!CCS811_CheckHW_ID());
  CCS811_Init();
 80015e4:	f7ff fbfa 	bl	8000ddc <CCS811_Init>
  CCS811_Set_Mode(CCS811_MODE_60SEC);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f7ff fc31 	bl	8000e50 <CCS811_Set_Mode>
  CCS811_EnableInt();
 80015ee:	f7ff fc67 	bl	8000ec0 <CCS811_EnableInt>

  lcd_init();
 80015f2:	f7ff fcfa 	bl	8000fea <lcd_init>
  lcd_put_cur(0, 0);
 80015f6:	2100      	movs	r1, #0
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff fcd7 	bl	8000fac <lcd_put_cur>
  lcd_send_string ("CO2:");
 80015fe:	481c      	ldr	r0, [pc, #112]	@ (8001670 <main+0xb0>)
 8001600:	f7ff fd30 	bl	8001064 <lcd_send_string>
  lcd_put_cur(0, 8);
 8001604:	2108      	movs	r1, #8
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff fcd0 	bl	8000fac <lcd_put_cur>
  lcd_send_string ("ppm|");
 800160c:	4819      	ldr	r0, [pc, #100]	@ (8001674 <main+0xb4>)
 800160e:	f7ff fd29 	bl	8001064 <lcd_send_string>
  lcd_put_cur(0, 12);
 8001612:	210c      	movs	r1, #12
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff fcc9 	bl	8000fac <lcd_put_cur>
  lcd_send_string ("MODE");
 800161a:	4817      	ldr	r0, [pc, #92]	@ (8001678 <main+0xb8>)
 800161c:	f7ff fd22 	bl	8001064 <lcd_send_string>
  lcd_put_cur(1, 0);
 8001620:	2100      	movs	r1, #0
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff fcc2 	bl	8000fac <lcd_put_cur>
  lcd_send_string("CO :");
 8001628:	4814      	ldr	r0, [pc, #80]	@ (800167c <main+0xbc>)
 800162a:	f7ff fd1b 	bl	8001064 <lcd_send_string>
  lcd_put_cur(1, 8);
 800162e:	2108      	movs	r1, #8
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fcbb 	bl	8000fac <lcd_put_cur>
  lcd_send_string ("ppm|");
 8001636:	480f      	ldr	r0, [pc, #60]	@ (8001674 <main+0xb4>)
 8001638:	f7ff fd14 	bl	8001064 <lcd_send_string>
  lcd_put_cur(1, 12);
 800163c:	210c      	movs	r1, #12
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff fcb4 	bl	8000fac <lcd_put_cur>
  lcd_send_string ("AUTO");
 8001644:	480e      	ldr	r0, [pc, #56]	@ (8001680 <main+0xc0>)
 8001646:	f7ff fd0d 	bl	8001064 <lcd_send_string>

  HAL_TIM_Base_Start_IT(&htim2);
 800164a:	480e      	ldr	r0, [pc, #56]	@ (8001684 <main+0xc4>)
 800164c:	f003 fbdc 	bl	8004e08 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart1, RS_rxBuffer, 3);
 8001650:	2203      	movs	r2, #3
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <main+0xc8>)
 8001654:	480d      	ldr	r0, [pc, #52]	@ (800168c <main+0xcc>)
 8001656:	f004 f882 	bl	800575e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(at_state==1) // chế độ tự động
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <main+0xd0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <main+0xa8>
	 {
		Auto_Warning();
 8001662:	f7ff fd69 	bl	8001138 <Auto_Warning>
 8001666:	e7f8      	b.n	800165a <main+0x9a>
	 }
		  // khi tắt chế độ tự động
	 else
	 {
	  Manual_Warning();
 8001668:	f7ff fd8a 	bl	8001180 <Manual_Warning>
	 if(at_state==1) // chế độ tự động
 800166c:	e7f5      	b.n	800165a <main+0x9a>
 800166e:	bf00      	nop
 8001670:	08007ae0 	.word	0x08007ae0
 8001674:	08007ae8 	.word	0x08007ae8
 8001678:	08007af0 	.word	0x08007af0
 800167c:	08007af8 	.word	0x08007af8
 8001680:	08007b00 	.word	0x08007b00
 8001684:	2000016c 	.word	0x2000016c
 8001688:	200001fc 	.word	0x200001fc
 800168c:	200001b4 	.word	0x200001b4
 8001690:	20000004 	.word	0x20000004

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b094      	sub	sp, #80	@ 0x50
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800169e:	2228      	movs	r2, #40	@ 0x28
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fe0a 	bl	80062bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d2:	2301      	movs	r3, #1
 80016d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80016e0:	2300      	movs	r3, #0
 80016e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fe77 	bl	80043dc <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80016f4:	f000 f9f4 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f8e4 	bl	80048e0 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800171e:	f000 f9df 	bl	8001ae0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001722:	2302      	movs	r3, #2
 8001724:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4618      	mov	r0, r3
 800172e:	f003 fa65 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001738:	f000 f9d2 	bl	8001ae0 <Error_Handler>
  }
}
 800173c:	bf00      	nop
 800173e:	3750      	adds	r7, #80	@ 0x50
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001754:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <MX_ADC1_Init+0x74>)
 8001756:	4a19      	ldr	r2, [pc, #100]	@ (80017bc <MX_ADC1_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800175a:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <MX_ADC1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <MX_ADC1_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_ADC1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <MX_ADC1_Init+0x74>)
 800176e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001772:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_ADC1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MX_ADC1_Init+0x74>)
 800177c:	2201      	movs	r2, #1
 800177e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001780:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <MX_ADC1_Init+0x74>)
 8001782:	f000 fcbb 	bl	80020fc <HAL_ADC_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800178c:	f000 f9a8 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001794:	2301      	movs	r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001798:	2307      	movs	r3, #7
 800179a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_ADC1_Init+0x74>)
 80017a2:	f000 ff0d 	bl	80025c0 <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017ac:	f000 f998 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000094 	.word	0x20000094
 80017bc:	40012400 	.word	0x40012400

080017c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017c6:	4a13      	ldr	r2, [pc, #76]	@ (8001814 <MX_I2C1_Init+0x54>)
 80017c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017cc:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <MX_I2C1_Init+0x58>)
 80017ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f0:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	@ (8001810 <MX_I2C1_Init+0x50>)
 80017fe:	f001 fc07 	bl	8003010 <HAL_I2C_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001808:	f000 f96a 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200000c4 	.word	0x200000c4
 8001814:	40005400 	.word	0x40005400
 8001818:	000186a0 	.word	0x000186a0

0800181c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_I2C2_Init+0x50>)
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <MX_I2C2_Init+0x54>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_I2C2_Init+0x50>)
 8001828:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <MX_I2C2_Init+0x58>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_I2C2_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_I2C2_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_I2C2_Init+0x50>)
 800183a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800183e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <MX_I2C2_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_I2C2_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <MX_I2C2_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_I2C2_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <MX_I2C2_Init+0x50>)
 800185a:	f001 fbd9 	bl	8003010 <HAL_I2C_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001864:	f000 f93c 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000118 	.word	0x20000118
 8001870:	40005800 	.word	0x40005800
 8001874:	000186a0 	.word	0x000186a0

08001878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	463b      	mov	r3, r7
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001894:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <MX_TIM2_Init+0x98>)
 8001896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800189a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 800189c:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_TIM2_Init+0x98>)
 800189e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80018a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018ac:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80018b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018be:	4814      	ldr	r0, [pc, #80]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018c0:	f003 fa52 	bl	8004d68 <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018ca:	f000 f909 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018dc:	f003 fc04 	bl	80050e8 <HAL_TIM_ConfigClockSource>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018e6:	f000 f8fb 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018f8:	f003 fde6 	bl	80054c8 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001902:	f000 f8ed 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000016c 	.word	0x2000016c

08001914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <MX_USART1_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_USART1_UART_Init+0x4c>)
 800194c:	f003 fe2c 	bl	80055a8 <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f000 f8c3 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200001b4 	.word	0x200001b4
 8001964:	40013800 	.word	0x40013800

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197c:	4b54      	ldr	r3, [pc, #336]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a53      	ldr	r2, [pc, #332]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b51      	ldr	r3, [pc, #324]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ac:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a47      	ldr	r2, [pc, #284]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b45      	ldr	r3, [pc, #276]	@ (8001ad0 <MX_GPIO_Init+0x168>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2102      	movs	r1, #2
 80019c8:	4842      	ldr	r0, [pc, #264]	@ (8001ad4 <MX_GPIO_Init+0x16c>)
 80019ca:	f001 faf0 	bl	8002fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin, GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80019d4:	4840      	ldr	r0, [pc, #256]	@ (8001ad8 <MX_GPIO_Init+0x170>)
 80019d6:	f001 faea 	bl	8002fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CCS_RST_GPIO_Port, CCS_RST_Pin, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e0:	483c      	ldr	r0, [pc, #240]	@ (8001ad4 <MX_GPIO_Init+0x16c>)
 80019e2:	f001 fae4 	bl	8002fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80019e6:	2302      	movs	r3, #2
 80019e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4619      	mov	r1, r3
 80019fc:	4835      	ldr	r0, [pc, #212]	@ (8001ad4 <MX_GPIO_Init+0x16c>)
 80019fe:	f001 f93b 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : L1_BUT_Pin */
  GPIO_InitStruct.Pin = L1_BUT_Pin;
 8001a02:	2310      	movs	r3, #16
 8001a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a06:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <MX_GPIO_Init+0x174>)
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L1_BUT_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	482f      	ldr	r0, [pc, #188]	@ (8001ad4 <MX_GPIO_Init+0x16c>)
 8001a16:	f001 f92f 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : L3_BUT_Pin L2_BUT_Pin */
  GPIO_InitStruct.Pin = L3_BUT_Pin|L2_BUT_Pin;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <MX_GPIO_Init+0x174>)
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	482a      	ldr	r0, [pc, #168]	@ (8001ad8 <MX_GPIO_Init+0x170>)
 8001a2e:	f001 f923 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin;
 8001a32:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4823      	ldr	r0, [pc, #140]	@ (8001ad8 <MX_GPIO_Init+0x170>)
 8001a4c:	f001 f914 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CCS_RST_Pin */
  GPIO_InitStruct.Pin = CCS_RST_Pin;
 8001a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CCS_RST_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	4619      	mov	r1, r3
 8001a68:	481a      	ldr	r0, [pc, #104]	@ (8001ad4 <MX_GPIO_Init+0x16c>)
 8001a6a:	f001 f905 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CCS811_INT_Pin */
  GPIO_InitStruct.Pin = CCS811_INT_Pin;
 8001a6e:	2308      	movs	r3, #8
 8001a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_GPIO_Init+0x174>)
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CCS811_INT_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4815      	ldr	r0, [pc, #84]	@ (8001ad8 <MX_GPIO_Init+0x170>)
 8001a82:	f001 f8f9 	bl	8002c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2102      	movs	r1, #2
 8001a8a:	2006      	movs	r0, #6
 8001a8c:	f001 f80b 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a90:	2006      	movs	r0, #6
 8001a92:	f001 f824 	bl	8002ade <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2102      	movs	r1, #2
 8001a9a:	2007      	movs	r0, #7
 8001a9c:	f001 f803 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001aa0:	2007      	movs	r0, #7
 8001aa2:	f001 f81c 	bl	8002ade <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	2009      	movs	r0, #9
 8001aac:	f000 fffb 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ab0:	2009      	movs	r0, #9
 8001ab2:	f001 f814 	bl	8002ade <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2102      	movs	r1, #2
 8001aba:	200a      	movs	r0, #10
 8001abc:	f000 fff3 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f001 f80c 	bl	8002ade <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	10210000 	.word	0x10210000

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <Error_Handler+0x8>

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_MspInit+0x5c>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <HAL_MspInit+0x5c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6193      	str	r3, [r2, #24]
 8001afe:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_MspInit+0x5c>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <HAL_MspInit+0x5c>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <HAL_MspInit+0x5c>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <HAL_MspInit+0x5c>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <HAL_MspInit+0x60>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <HAL_MspInit+0x60>)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010000 	.word	0x40010000

08001b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a18      	ldr	r2, [pc, #96]	@ (8001bcc <HAL_ADC_MspInit+0x7c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d129      	bne.n	8001bc4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b70:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <HAL_ADC_MspInit+0x80>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <HAL_ADC_MspInit+0x80>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <HAL_ADC_MspInit+0x80>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <HAL_ADC_MspInit+0x80>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a10      	ldr	r2, [pc, #64]	@ (8001bd0 <HAL_ADC_MspInit+0x80>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <HAL_ADC_MspInit+0x80>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	4619      	mov	r1, r3
 8001bae:	4809      	ldr	r0, [pc, #36]	@ (8001bd4 <HAL_ADC_MspInit+0x84>)
 8001bb0:	f001 f862 	bl	8002c78 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2105      	movs	r1, #5
 8001bb8:	2012      	movs	r0, #18
 8001bba:	f000 ff74 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bbe:	2012      	movs	r0, #18
 8001bc0:	f000 ff8d 	bl	8002ade <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40012400 	.word	0x40012400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010800 	.word	0x40010800

08001bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0318 	add.w	r3, r7, #24
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <HAL_I2C_MspInit+0xc8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d124      	bne.n	8001c42 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a29      	ldr	r2, [pc, #164]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c10:	23c0      	movs	r3, #192	@ 0xc0
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4821      	ldr	r0, [pc, #132]	@ (8001ca8 <HAL_I2C_MspInit+0xd0>)
 8001c24:	f001 f828 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c32:	61d3      	str	r3, [r2, #28]
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c40:	e029      	b.n	8001c96 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a19      	ldr	r2, [pc, #100]	@ (8001cac <HAL_I2C_MspInit+0xd4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d124      	bne.n	8001c96 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a14      	ldr	r2, [pc, #80]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c64:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6a:	2312      	movs	r3, #18
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	4619      	mov	r1, r3
 8001c78:	480b      	ldr	r0, [pc, #44]	@ (8001ca8 <HAL_I2C_MspInit+0xd0>)
 8001c7a:	f000 fffd 	bl	8002c78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_I2C_MspInit+0xcc>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	@ 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010c00 	.word	0x40010c00
 8001cac:	40005800 	.word	0x40005800

08001cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc0:	d113      	bne.n	8001cea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x44>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x44>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x44>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2104      	movs	r1, #4
 8001cde:	201c      	movs	r0, #28
 8001ce0:	f000 fee1 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce4:	201c      	movs	r0, #28
 8001ce6:	f000 fefa 	bl	8002ade <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a20      	ldr	r2, [pc, #128]	@ (8001d94 <HAL_UART_MspInit+0x9c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d139      	bne.n	8001d8c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d18:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <HAL_UART_MspInit+0xa0>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_UART_MspInit+0xa0>)
 8001d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <HAL_UART_MspInit+0xa0>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <HAL_UART_MspInit+0xa0>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a18      	ldr	r2, [pc, #96]	@ (8001d98 <HAL_UART_MspInit+0xa0>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <HAL_UART_MspInit+0xa0>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480f      	ldr	r0, [pc, #60]	@ (8001d9c <HAL_UART_MspInit+0xa4>)
 8001d5e:	f000 ff8b 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <HAL_UART_MspInit+0xa4>)
 8001d78:	f000 ff7e 	bl	8002c78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2025      	movs	r0, #37	@ 0x25
 8001d82:	f000 fe90 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d86:	2025      	movs	r0, #37	@ 0x25
 8001d88:	f000 fea9 	bl	8002ade <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010800 	.word	0x40010800

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <NMI_Handler+0x4>

08001da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <MemManage_Handler+0x4>

08001db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f944 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L3_BUT_Pin);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f001 f8ef 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L2_BUT_Pin);
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	f001 f8e8 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CCS811_INT_Pin);
 8001e18:	2008      	movs	r0, #8
 8001e1a:	f001 f8e1 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L1_BUT_Pin);
 8001e26:	2010      	movs	r0, #16
 8001e28:	f001 f8da 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <ADC1_2_IRQHandler+0x10>)
 8001e36:	f000 fafb 	bl	8002430 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000094 	.word	0x20000094

08001e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <TIM2_IRQHandler+0x10>)
 8001e4a:	f003 f85d 	bl	8004f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000016c 	.word	0x2000016c

08001e58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <USART1_IRQHandler+0x10>)
 8001e5e:	f003 fca3 	bl	80057a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200001b4 	.word	0x200001b4

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f004 fa16 	bl	80062cc <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20005000 	.word	0x20005000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	20000258 	.word	0x20000258
 8001ed4:	200003a8 	.word	0x200003a8

08001ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <L2_Warning_On>:

#include "warning.h"


void L2_Warning_On ()
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001eee:	480b      	ldr	r0, [pc, #44]	@ (8001f1c <L2_Warning_On+0x38>)
 8001ef0:	f001 f85d 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001efa:	4808      	ldr	r0, [pc, #32]	@ (8001f1c <L2_Warning_On+0x38>)
 8001efc:	f001 f857 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f06:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <L2_Warning_On+0x38>)
 8001f08:	f001 f851 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2102      	movs	r1, #2
 8001f10:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <L2_Warning_On+0x3c>)
 8001f12:	f001 f84c 	bl	8002fae <HAL_GPIO_WritePin>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40010c00 	.word	0x40010c00
 8001f20:	40010800 	.word	0x40010800

08001f24 <L3_Warning_On>:
void L2_Warning_Off()
{
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
}
void L3_Warning_On ()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f2e:	480b      	ldr	r0, [pc, #44]	@ (8001f5c <L3_Warning_On+0x38>)
 8001f30:	f001 f83d 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f3a:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <L3_Warning_On+0x38>)
 8001f3c:	f001 f837 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f46:	4805      	ldr	r0, [pc, #20]	@ (8001f5c <L3_Warning_On+0x38>)
 8001f48:	f001 f831 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4803      	ldr	r0, [pc, #12]	@ (8001f60 <L3_Warning_On+0x3c>)
 8001f52:	f001 f82c 	bl	8002fae <HAL_GPIO_WritePin>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	40010800 	.word	0x40010800

08001f64 <L1_Warning_On>:
{
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
}
void L1_Warning_On()
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f6e:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <L1_Warning_On+0x38>)
 8001f70:	f001 f81d 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f7a:	4808      	ldr	r0, [pc, #32]	@ (8001f9c <L1_Warning_On+0x38>)
 8001f7c:	f001 f817 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f86:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <L1_Warning_On+0x38>)
 8001f88:	f001 f811 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <L1_Warning_On+0x3c>)
 8001f92:	f001 f80c 	bl	8002fae <HAL_GPIO_WritePin>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40010800 	.word	0x40010800

08001fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa4:	f7ff ff98 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480b      	ldr	r0, [pc, #44]	@ (8001fd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001faa:	490c      	ldr	r1, [pc, #48]	@ (8001fdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fac:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fc0:	4c09      	ldr	r4, [pc, #36]	@ (8001fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f004 f983 	bl	80062d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd2:	f7ff faf5 	bl	80015c0 <main>
  bx lr
 8001fd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fe0:	08007ba0 	.word	0x08007ba0
  ldr r2, =_sbss
 8001fe4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fe8:	200003a8 	.word	0x200003a8

08001fec <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <CAN1_RX1_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <HAL_Init+0x28>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	@ (8002018 <HAL_Init+0x28>)
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002000:	2003      	movs	r0, #3
 8002002:	f000 fd45 	bl	8002a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002006:	200f      	movs	r0, #15
 8002008:	f000 f808 	bl	800201c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800200c:	f7ff fd6e 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002024:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_InitTick+0x54>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_InitTick+0x58>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002032:	fbb3 f3f1 	udiv	r3, r3, r1
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fd5d 	bl	8002afa <HAL_SYSTICK_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e00e      	b.n	8002068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b0f      	cmp	r3, #15
 800204e:	d80a      	bhi.n	8002066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002050:	2200      	movs	r2, #0
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f000 fd25 	bl	8002aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800205c:	4a06      	ldr	r2, [pc, #24]	@ (8002078 <HAL_InitTick+0x5c>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000008 	.word	0x20000008
 8002074:	20000010 	.word	0x20000010
 8002078:	2000000c 	.word	0x2000000c

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_IncTick+0x1c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_IncTick+0x20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a03      	ldr	r2, [pc, #12]	@ (800209c <HAL_IncTick+0x20>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000010 	.word	0x20000010
 800209c:	2000025c 	.word	0x2000025c

080020a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b02      	ldr	r3, [pc, #8]	@ (80020b0 <HAL_GetTick+0x10>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	2000025c 	.word	0x2000025c

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <HAL_Delay+0x44>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffe0 	bl	80020a0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000010 	.word	0x20000010

080020fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0be      	b.n	800229c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fd08 	bl	8001b50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fb8f 	bl	8002864 <ADC_ConversionStop_Disable>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 8099 	bne.w	800228a <HAL_ADC_Init+0x18e>
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 8095 	bne.w	800228a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002168:	f023 0302 	bic.w	r3, r3, #2
 800216c:	f043 0202 	orr.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800217c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7b1b      	ldrb	r3, [r3, #12]
 8002182:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002184:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	4313      	orrs	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002194:	d003      	beq.n	800219e <HAL_ADC_Init+0xa2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_ADC_Init+0xa8>
 800219e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021a2:	e000      	b.n	80021a6 <HAL_ADC_Init+0xaa>
 80021a4:	2300      	movs	r3, #0
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7d1b      	ldrb	r3, [r3, #20]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d119      	bne.n	80021e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7b1b      	ldrb	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	035a      	lsls	r2, r3, #13
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	e00b      	b.n	80021e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_ADC_Init+0x1a8>)
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	430b      	orrs	r3, r1
 800220e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002218:	d003      	beq.n	8002222 <HAL_ADC_Init+0x126>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d104      	bne.n	800222c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	3b01      	subs	r3, #1
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	430a      	orrs	r2, r1
 800223e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <HAL_ADC_Init+0x1ac>)
 8002248:	4013      	ands	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	d10b      	bne.n	8002268 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002266:	e018      	b.n	800229a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	f023 0312 	bic.w	r3, r3, #18
 8002270:	f043 0210 	orr.w	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002288:	e007      	b.n	800229a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	ffe1f7fd 	.word	0xffe1f7fd
 80022a8:	ff1f0efe 	.word	0xff1f0efe

080022ac <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_Start_IT+0x1a>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0a0      	b.n	8002408 <HAL_ADC_Start_IT+0x15c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa6e 	bl	80027b0 <ADC_Enable>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 808f 	bne.w	80023fe <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a45      	ldr	r2, [pc, #276]	@ (8002410 <HAL_ADC_Start_IT+0x164>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d105      	bne.n	800230a <HAL_ADC_Start_IT+0x5e>
 80022fe:	4b45      	ldr	r3, [pc, #276]	@ (8002414 <HAL_ADC_Start_IT+0x168>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d026      	beq.n	8002372 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800232c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002334:	e01d      	b.n	8002372 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a33      	ldr	r2, [pc, #204]	@ (8002414 <HAL_ADC_Start_IT+0x168>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_ADC_Start_IT+0xaa>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2f      	ldr	r2, [pc, #188]	@ (8002410 <HAL_ADC_Start_IT+0x164>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10d      	bne.n	8002372 <HAL_ADC_Start_IT+0xc6>
 8002356:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <HAL_ADC_Start_IT+0x168>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800236a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002382:	f023 0206 	bic.w	r2, r3, #6
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	62da      	str	r2, [r3, #44]	@ 0x2c
 800238a:	e002      	b.n	8002392 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0202 	mvn.w	r2, #2
 80023a2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0220 	orr.w	r2, r2, #32
 80023b2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023be:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023c2:	d113      	bne.n	80023ec <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023c8:	4a11      	ldr	r2, [pc, #68]	@ (8002410 <HAL_ADC_Start_IT+0x164>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d105      	bne.n	80023da <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_ADC_Start_IT+0x168>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	e00c      	b.n	8002406 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	e003      	b.n	8002406 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40012800 	.word	0x40012800
 8002414:	40012400 	.word	0x40012400

08002418 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03e      	beq.n	80024d0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d039      	beq.n	80024d0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800247e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002482:	d11d      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002488:	2b00      	cmp	r3, #0
 800248a:	d119      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0220 	bic.w	r2, r2, #32
 800249a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7fe fe8d 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f06f 0212 	mvn.w	r2, #18
 80024ce:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04d      	beq.n	8002576 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d048      	beq.n	8002576 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002506:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800250a:	d012      	beq.n	8002532 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002516:	2b00      	cmp	r3, #0
 8002518:	d125      	bne.n	8002566 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002524:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002528:	d11d      	bne.n	8002566 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d119      	bne.n	8002566 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002540:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f9bd 	bl	80028e6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 020c 	mvn.w	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d012      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f809 	bl	80025ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0201 	mvn.w	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x20>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0dc      	b.n	800279a <HAL_ADC_ConfigChannel+0x1da>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d81c      	bhi.n	800262a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b05      	subs	r3, #5
 8002602:	221f      	movs	r2, #31
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	4019      	ands	r1, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b05      	subs	r3, #5
 800261c:	fa00 f203 	lsl.w	r2, r0, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34
 8002628:	e03c      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d81c      	bhi.n	800266c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b23      	subs	r3, #35	@ 0x23
 8002644:	221f      	movs	r2, #31
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	4019      	ands	r1, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b23      	subs	r3, #35	@ 0x23
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
 800266a:	e01b      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	@ 0x41
 800267e:	221f      	movs	r2, #31
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3b41      	subs	r3, #65	@ 0x41
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d91c      	bls.n	80026e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	2207      	movs	r2, #7
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4019      	ands	r1, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6898      	ldr	r0, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	fa00 f203 	lsl.w	r2, r0, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	e019      	b.n	800271a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	fa00 f203 	lsl.w	r2, r0, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b10      	cmp	r3, #16
 8002720:	d003      	beq.n	800272a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002726:	2b11      	cmp	r3, #17
 8002728:	d132      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d125      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d126      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002750:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d11a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a13      	ldr	r2, [pc, #76]	@ (80027ac <HAL_ADC_ConfigChannel+0x1ec>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	0c9a      	lsrs	r2, r3, #18
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002770:	e002      	b.n	8002778 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f9      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x1b2>
 800277e:	e007      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012400 	.word	0x40012400
 80027a8:	20000008 	.word	0x20000008
 80027ac:	431bde83 	.word	0x431bde83

080027b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d040      	beq.n	8002850 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027de:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <ADC_Enable+0xac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <ADC_Enable+0xb0>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	0c9b      	lsrs	r3, r3, #18
 80027ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027ec:	e002      	b.n	80027f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027fa:	f7ff fc51 	bl	80020a0 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002800:	e01f      	b.n	8002842 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002802:	f7ff fc4d 	bl	80020a0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d918      	bls.n	8002842 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d011      	beq.n	8002842 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e007      	b.n	8002852 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d1d8      	bne.n	8002802 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000008 	.word	0x20000008
 8002860:	431bde83 	.word	0x431bde83

08002864 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d12e      	bne.n	80028dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800288e:	f7ff fc07 	bl	80020a0 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002894:	e01b      	b.n	80028ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002896:	f7ff fc03 	bl	80020a0 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d914      	bls.n	80028ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10d      	bne.n	80028ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d0dc      	beq.n	8002896 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292a:	4a04      	ldr	r2, [pc, #16]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	60d3      	str	r3, [r2, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <__NVIC_GetPriorityGrouping+0x18>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 0307 	and.w	r3, r3, #7
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db0b      	blt.n	8002986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4906      	ldr	r1, [pc, #24]	@ (8002990 <__NVIC_EnableIRQ+0x34>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	@ (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	@ 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a5c:	d301      	bcc.n	8002a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00f      	b.n	8002a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a62:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <SysTick_Config+0x40>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f7ff ff90 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <SysTick_Config+0x40>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7a:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <SysTick_Config+0x40>)
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	e000e010 	.word	0xe000e010

08002a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff2d 	bl	80028f8 <__NVIC_SetPriorityGrouping>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab8:	f7ff ff42 	bl	8002940 <__NVIC_GetPriorityGrouping>
 8002abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7ff ff90 	bl	80029e8 <NVIC_EncodePriority>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff5f 	bl	8002994 <__NVIC_SetPriority>
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff35 	bl	800295c <__NVIC_EnableIRQ>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffa2 	bl	8002a4c <SysTick_Config>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d008      	beq.n	8002b3c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e020      	b.n	8002b7e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 020e 	bic.w	r2, r2, #14
 8002b4a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d005      	beq.n	8002bac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e051      	b.n	8002c50 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 020e 	bic.w	r2, r2, #14
 8002bba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <HAL_DMA_Abort_IT+0xd4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d029      	beq.n	8002c2a <HAL_DMA_Abort_IT+0xa2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a21      	ldr	r2, [pc, #132]	@ (8002c60 <HAL_DMA_Abort_IT+0xd8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <HAL_DMA_Abort_IT+0x9e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c64 <HAL_DMA_Abort_IT+0xdc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01a      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x98>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1e      	ldr	r2, [pc, #120]	@ (8002c68 <HAL_DMA_Abort_IT+0xe0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d012      	beq.n	8002c1a <HAL_DMA_Abort_IT+0x92>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c6c <HAL_DMA_Abort_IT+0xe4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00a      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x8c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1b      	ldr	r2, [pc, #108]	@ (8002c70 <HAL_DMA_Abort_IT+0xe8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d102      	bne.n	8002c0e <HAL_DMA_Abort_IT+0x86>
 8002c08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c0c:	e00e      	b.n	8002c2c <HAL_DMA_Abort_IT+0xa4>
 8002c0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c12:	e00b      	b.n	8002c2c <HAL_DMA_Abort_IT+0xa4>
 8002c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c18:	e008      	b.n	8002c2c <HAL_DMA_Abort_IT+0xa4>
 8002c1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c1e:	e005      	b.n	8002c2c <HAL_DMA_Abort_IT+0xa4>
 8002c20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c24:	e002      	b.n	8002c2c <HAL_DMA_Abort_IT+0xa4>
 8002c26:	2310      	movs	r3, #16
 8002c28:	e000      	b.n	8002c2c <HAL_DMA_Abort_IT+0xa4>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4a11      	ldr	r2, [pc, #68]	@ (8002c74 <HAL_DMA_Abort_IT+0xec>)
 8002c2e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
    } 
  }
  return status;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40020008 	.word	0x40020008
 8002c60:	4002001c 	.word	0x4002001c
 8002c64:	40020030 	.word	0x40020030
 8002c68:	40020044 	.word	0x40020044
 8002c6c:	40020058 	.word	0x40020058
 8002c70:	4002006c 	.word	0x4002006c
 8002c74:	40020000 	.word	0x40020000

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b08b      	sub	sp, #44	@ 0x2c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8a:	e169      	b.n	8002f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8158 	bne.w	8002f5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a9a      	ldr	r2, [pc, #616]	@ (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d05e      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a98      	ldr	r2, [pc, #608]	@ (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d875      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cba:	4a98      	ldr	r2, [pc, #608]	@ (8002f1c <HAL_GPIO_Init+0x2a4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d058      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cc0:	4a96      	ldr	r2, [pc, #600]	@ (8002f1c <HAL_GPIO_Init+0x2a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d86f      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cc6:	4a96      	ldr	r2, [pc, #600]	@ (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d052      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ccc:	4a94      	ldr	r2, [pc, #592]	@ (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d869      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cd2:	4a94      	ldr	r2, [pc, #592]	@ (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d04c      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cd8:	4a92      	ldr	r2, [pc, #584]	@ (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d863      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cde:	4a92      	ldr	r2, [pc, #584]	@ (8002f28 <HAL_GPIO_Init+0x2b0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d046      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ce4:	4a90      	ldr	r2, [pc, #576]	@ (8002f28 <HAL_GPIO_Init+0x2b0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d85d      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cea:	2b12      	cmp	r3, #18
 8002cec:	d82a      	bhi.n	8002d44 <HAL_GPIO_Init+0xcc>
 8002cee:	2b12      	cmp	r3, #18
 8002cf0:	d859      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <HAL_GPIO_Init+0x80>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d73 	.word	0x08002d73
 8002cfc:	08002d4d 	.word	0x08002d4d
 8002d00:	08002d5f 	.word	0x08002d5f
 8002d04:	08002da1 	.word	0x08002da1
 8002d08:	08002da7 	.word	0x08002da7
 8002d0c:	08002da7 	.word	0x08002da7
 8002d10:	08002da7 	.word	0x08002da7
 8002d14:	08002da7 	.word	0x08002da7
 8002d18:	08002da7 	.word	0x08002da7
 8002d1c:	08002da7 	.word	0x08002da7
 8002d20:	08002da7 	.word	0x08002da7
 8002d24:	08002da7 	.word	0x08002da7
 8002d28:	08002da7 	.word	0x08002da7
 8002d2c:	08002da7 	.word	0x08002da7
 8002d30:	08002da7 	.word	0x08002da7
 8002d34:	08002da7 	.word	0x08002da7
 8002d38:	08002da7 	.word	0x08002da7
 8002d3c:	08002d55 	.word	0x08002d55
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	4a79      	ldr	r2, [pc, #484]	@ (8002f2c <HAL_GPIO_Init+0x2b4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d4a:	e02c      	b.n	8002da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e029      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e024      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	3308      	adds	r3, #8
 8002d64:	623b      	str	r3, [r7, #32]
          break;
 8002d66:	e01f      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	623b      	str	r3, [r7, #32]
          break;
 8002d70:	e01a      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e013      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	611a      	str	r2, [r3, #16]
          break;
 8002d92:	e009      	b.n	8002da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d94:	2308      	movs	r3, #8
 8002d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	615a      	str	r2, [r3, #20]
          break;
 8002d9e:	e003      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
          break;
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          break;
 8002da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2bff      	cmp	r3, #255	@ 0xff
 8002dac:	d801      	bhi.n	8002db2 <HAL_GPIO_Init+0x13a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	e001      	b.n	8002db6 <HAL_GPIO_Init+0x13e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2bff      	cmp	r3, #255	@ 0xff
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_GPIO_Init+0x14c>
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_Init+0x152>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	3b08      	subs	r3, #8
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	401a      	ands	r2, r3
 8002ddc:	6a39      	ldr	r1, [r7, #32]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80b1 	beq.w	8002f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b4a      	ldr	r3, [pc, #296]	@ (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e10:	4a48      	ldr	r2, [pc, #288]	@ (8002f34 <HAL_GPIO_Init+0x2bc>)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a40      	ldr	r2, [pc, #256]	@ (8002f38 <HAL_GPIO_Init+0x2c0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_GPIO_Init+0x1ec>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f3c <HAL_GPIO_Init+0x2c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00d      	beq.n	8002e60 <HAL_GPIO_Init+0x1e8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3e      	ldr	r2, [pc, #248]	@ (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <HAL_GPIO_Init+0x1e4>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f44 <HAL_GPIO_Init+0x2cc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_GPIO_Init+0x1e0>
 8002e54:	2303      	movs	r3, #3
 8002e56:	e006      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	e004      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e002      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e64:	2300      	movs	r3, #0
 8002e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e68:	f002 0203 	and.w	r2, r2, #3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e76:	492f      	ldr	r1, [pc, #188]	@ (8002f34 <HAL_GPIO_Init+0x2bc>)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e90:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	492c      	ldr	r1, [pc, #176]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4928      	ldr	r1, [pc, #160]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eb8:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	4922      	ldr	r1, [pc, #136]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	491e      	ldr	r1, [pc, #120]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4918      	ldr	r1, [pc, #96]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	4914      	ldr	r1, [pc, #80]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d021      	beq.n	8002f4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	490e      	ldr	r1, [pc, #56]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
 8002f14:	e021      	b.n	8002f5a <HAL_GPIO_Init+0x2e2>
 8002f16:	bf00      	nop
 8002f18:	10320000 	.word	0x10320000
 8002f1c:	10310000 	.word	0x10310000
 8002f20:	10220000 	.word	0x10220000
 8002f24:	10210000 	.word	0x10210000
 8002f28:	10120000 	.word	0x10120000
 8002f2c:	10110000 	.word	0x10110000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40010800 	.word	0x40010800
 8002f3c:	40010c00 	.word	0x40010c00
 8002f40:	40011000 	.word	0x40011000
 8002f44:	40011400 	.word	0x40011400
 8002f48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	4909      	ldr	r1, [pc, #36]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f47f ae8e 	bne.w	8002c8c <HAL_GPIO_Init+0x14>
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	372c      	adds	r7, #44	@ 0x2c
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e001      	b.n	8002fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fbe:	787b      	ldrb	r3, [r7, #1]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc4:	887a      	ldrh	r2, [r7, #2]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fca:	e003      	b.n	8002fd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	041a      	lsls	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	611a      	str	r2, [r3, #16]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fea:	4b08      	ldr	r3, [pc, #32]	@ (800300c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ff6:	4a05      	ldr	r2, [pc, #20]	@ (800300c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe f9ae 	bl	8001360 <HAL_GPIO_EXTI_Callback>
  }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40010400 	.word	0x40010400

08003010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e12b      	b.n	800327a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fdce 	bl	8001bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	@ 0x24
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003074:	f001 fd7c 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8003078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4a81      	ldr	r2, [pc, #516]	@ (8003284 <HAL_I2C_Init+0x274>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d807      	bhi.n	8003094 <HAL_I2C_Init+0x84>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4a80      	ldr	r2, [pc, #512]	@ (8003288 <HAL_I2C_Init+0x278>)
 8003088:	4293      	cmp	r3, r2
 800308a:	bf94      	ite	ls
 800308c:	2301      	movls	r3, #1
 800308e:	2300      	movhi	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e006      	b.n	80030a2 <HAL_I2C_Init+0x92>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a7d      	ldr	r2, [pc, #500]	@ (800328c <HAL_I2C_Init+0x27c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	bf94      	ite	ls
 800309c:	2301      	movls	r3, #1
 800309e:	2300      	movhi	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0e7      	b.n	800327a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4a78      	ldr	r2, [pc, #480]	@ (8003290 <HAL_I2C_Init+0x280>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0c9b      	lsrs	r3, r3, #18
 80030b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003284 <HAL_I2C_Init+0x274>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d802      	bhi.n	80030e4 <HAL_I2C_Init+0xd4>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3301      	adds	r3, #1
 80030e2:	e009      	b.n	80030f8 <HAL_I2C_Init+0xe8>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	4a69      	ldr	r2, [pc, #420]	@ (8003294 <HAL_I2C_Init+0x284>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	3301      	adds	r3, #1
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800310a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	495c      	ldr	r1, [pc, #368]	@ (8003284 <HAL_I2C_Init+0x274>)
 8003114:	428b      	cmp	r3, r1
 8003116:	d819      	bhi.n	800314c <HAL_I2C_Init+0x13c>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e59      	subs	r1, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fbb1 f3f3 	udiv	r3, r1, r3
 8003126:	1c59      	adds	r1, r3, #1
 8003128:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800312c:	400b      	ands	r3, r1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_I2C_Init+0x138>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1e59      	subs	r1, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	e051      	b.n	80031ec <HAL_I2C_Init+0x1dc>
 8003148:	2304      	movs	r3, #4
 800314a:	e04f      	b.n	80031ec <HAL_I2C_Init+0x1dc>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d111      	bne.n	8003178 <HAL_I2C_Init+0x168>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	440b      	add	r3, r1
 8003162:	fbb0 f3f3 	udiv	r3, r0, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e012      	b.n	800319e <HAL_I2C_Init+0x18e>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1e58      	subs	r0, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	0099      	lsls	r1, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	fbb0 f3f3 	udiv	r3, r0, r3
 800318e:	3301      	adds	r3, #1
 8003190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Init+0x196>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e022      	b.n	80031ec <HAL_I2C_Init+0x1dc>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10e      	bne.n	80031cc <HAL_I2C_Init+0x1bc>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1e58      	subs	r0, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	440b      	add	r3, r1
 80031bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ca:	e00f      	b.n	80031ec <HAL_I2C_Init+0x1dc>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	0099      	lsls	r1, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	6809      	ldr	r1, [r1, #0]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800321a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6911      	ldr	r1, [r2, #16]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68d2      	ldr	r2, [r2, #12]
 8003226:	4311      	orrs	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	430b      	orrs	r3, r1
 800322e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	000186a0 	.word	0x000186a0
 8003288:	001e847f 	.word	0x001e847f
 800328c:	003d08ff 	.word	0x003d08ff
 8003290:	431bde83 	.word	0x431bde83
 8003294:	10624dd3 	.word	0x10624dd3

08003298 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	461a      	mov	r2, r3
 80032a4:	460b      	mov	r3, r1
 80032a6:	817b      	strh	r3, [r7, #10]
 80032a8:	4613      	mov	r3, r2
 80032aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7fe fef8 	bl	80020a0 <HAL_GetTick>
 80032b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	f040 80e0 	bne.w	8003480 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2319      	movs	r3, #25
 80032c6:	2201      	movs	r2, #1
 80032c8:	4970      	ldr	r1, [pc, #448]	@ (800348c <HAL_I2C_Master_Transmit+0x1f4>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fe50 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
 80032d8:	e0d3      	b.n	8003482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x50>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e0cc      	b.n	8003482 <HAL_I2C_Master_Transmit+0x1ea>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d007      	beq.n	800330e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800331c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2221      	movs	r2, #33	@ 0x21
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2210      	movs	r2, #16
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	893a      	ldrh	r2, [r7, #8]
 800333e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a50      	ldr	r2, [pc, #320]	@ (8003490 <HAL_I2C_Master_Transmit+0x1f8>)
 800334e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003350:	8979      	ldrh	r1, [r7, #10]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fc0a 	bl	8003b70 <I2C_MasterRequestWrite>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e08d      	b.n	8003482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800337c:	e066      	b.n	800344c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	6a39      	ldr	r1, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 ff0e 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	2b04      	cmp	r3, #4
 8003394:	d107      	bne.n	80033a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06b      	b.n	8003482 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d11b      	bne.n	8003420 <HAL_I2C_Master_Transmit+0x188>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d017      	beq.n	8003420 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	6a39      	ldr	r1, [r7, #32]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 ff05 	bl	8004234 <I2C_WaitOnBTFFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	2b04      	cmp	r3, #4
 8003436:	d107      	bne.n	8003448 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e01a      	b.n	8003482 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d194      	bne.n	800337e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	00100002 	.word	0x00100002
 8003490:	ffff0000 	.word	0xffff0000

08003494 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	817b      	strh	r3, [r7, #10]
 80034a6:	460b      	mov	r3, r1
 80034a8:	813b      	strh	r3, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ae:	f7fe fdf7 	bl	80020a0 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b20      	cmp	r3, #32
 80034be:	f040 80d9 	bne.w	8003674 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2319      	movs	r3, #25
 80034c8:	2201      	movs	r2, #1
 80034ca:	496d      	ldr	r1, [pc, #436]	@ (8003680 <HAL_I2C_Mem_Write+0x1ec>)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 fd4f 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
 80034da:	e0cc      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Mem_Write+0x56>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0c5      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d007      	beq.n	8003510 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2221      	movs	r2, #33	@ 0x21
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2240      	movs	r2, #64	@ 0x40
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a3a      	ldr	r2, [r7, #32]
 800353a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003540:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a4d      	ldr	r2, [pc, #308]	@ (8003684 <HAL_I2C_Mem_Write+0x1f0>)
 8003550:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003552:	88f8      	ldrh	r0, [r7, #6]
 8003554:	893a      	ldrh	r2, [r7, #8]
 8003556:	8979      	ldrh	r1, [r7, #10]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	4603      	mov	r3, r0
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fb86 	bl	8003c74 <I2C_RequestMemoryWrite>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d052      	beq.n	8003614 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e081      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fe14 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2b04      	cmp	r3, #4
 8003588:	d107      	bne.n	800359a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06b      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d11b      	bne.n	8003614 <HAL_I2C_Mem_Write+0x180>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d017      	beq.n	8003614 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1aa      	bne.n	8003572 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fe07 	bl	8004234 <I2C_WaitOnBTFFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	2b04      	cmp	r3, #4
 8003632:	d107      	bne.n	8003644 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e016      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	00100002 	.word	0x00100002
 8003684:	ffff0000 	.word	0xffff0000

08003688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	@ 0x30
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	461a      	mov	r2, r3
 8003696:	4603      	mov	r3, r0
 8003698:	817b      	strh	r3, [r7, #10]
 800369a:	460b      	mov	r3, r1
 800369c:	813b      	strh	r3, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036a6:	f7fe fcfb 	bl	80020a0 <HAL_GetTick>
 80036aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	f040 8250 	bne.w	8003b5a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2319      	movs	r3, #25
 80036c0:	2201      	movs	r2, #1
 80036c2:	4982      	ldr	r1, [pc, #520]	@ (80038cc <HAL_I2C_Mem_Read+0x244>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fc53 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	e243      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x5a>
 80036de:	2302      	movs	r3, #2
 80036e0:	e23c      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d007      	beq.n	8003708 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2222      	movs	r2, #34	@ 0x22
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2240      	movs	r2, #64	@ 0x40
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003732:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a62      	ldr	r2, [pc, #392]	@ (80038d0 <HAL_I2C_Mem_Read+0x248>)
 8003748:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800374a:	88f8      	ldrh	r0, [r7, #6]
 800374c:	893a      	ldrh	r2, [r7, #8]
 800374e:	8979      	ldrh	r1, [r7, #10]
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4603      	mov	r3, r0
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fb20 	bl	8003da0 <I2C_RequestMemoryRead>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e1f8      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376e:	2b00      	cmp	r3, #0
 8003770:	d113      	bne.n	800379a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e1cc      	b.n	8003b34 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d11e      	bne.n	80037e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037b2:	b672      	cpsid	i
}
 80037b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037dc:	b662      	cpsie	i
}
 80037de:	e035      	b.n	800384c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d11e      	bne.n	8003826 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037f8:	b672      	cpsid	i
}
 80037fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003820:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003822:	b662      	cpsie	i
}
 8003824:	e012      	b.n	800384c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003834:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800384c:	e172      	b.n	8003b34 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	2b03      	cmp	r3, #3
 8003854:	f200 811f 	bhi.w	8003a96 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	2b01      	cmp	r3, #1
 800385e:	d123      	bne.n	80038a8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003862:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fd2d 	bl	80042c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e173      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038a6:	e145      	b.n	8003b34 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d152      	bne.n	8003956 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	2200      	movs	r2, #0
 80038b8:	4906      	ldr	r1, [pc, #24]	@ (80038d4 <HAL_I2C_Mem_Read+0x24c>)
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fb58 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e148      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
 80038ca:	bf00      	nop
 80038cc:	00100002 	.word	0x00100002
 80038d0:	ffff0000 	.word	0xffff0000
 80038d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038d8:	b672      	cpsid	i
}
 80038da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800391e:	b662      	cpsie	i
}
 8003920:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003954:	e0ee      	b.n	8003b34 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395c:	2200      	movs	r2, #0
 800395e:	4981      	ldr	r1, [pc, #516]	@ (8003b64 <HAL_I2C_Mem_Read+0x4dc>)
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fb05 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0f5      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800397e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003980:	b672      	cpsid	i
}
 8003982:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b68 <HAL_I2C_Mem_Read+0x4e0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	08db      	lsrs	r3, r3, #3
 80039bc:	4a6b      	ldr	r2, [pc, #428]	@ (8003b6c <HAL_I2C_Mem_Read+0x4e4>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0a1a      	lsrs	r2, r3, #8
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00da      	lsls	r2, r3, #3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d118      	bne.n	8003a0e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f043 0220 	orr.w	r2, r3, #32
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039fe:	b662      	cpsie	i
}
 8003a00:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0a6      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d1d9      	bne.n	80039d0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a5e:	b662      	cpsie	i
}
 8003a60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a94:	e04e      	b.n	8003b34 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fc12 	bl	80042c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e058      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d124      	bne.n	8003b34 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d107      	bne.n	8003b02 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f47f ae88 	bne.w	800384e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e000      	b.n	8003b5c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3728      	adds	r7, #40	@ 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	00010004 	.word	0x00010004
 8003b68:	20000008 	.word	0x20000008
 8003b6c:	14f8b589 	.word	0x14f8b589

08003b70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d006      	beq.n	8003b9a <I2C_MasterRequestWrite+0x2a>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d003      	beq.n	8003b9a <I2C_MasterRequestWrite+0x2a>
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b98:	d108      	bne.n	8003bac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e00b      	b.n	8003bc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	2b12      	cmp	r3, #18
 8003bb2:	d107      	bne.n	8003bc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f9cd 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bea:	d103      	bne.n	8003bf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e035      	b.n	8003c64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c00:	d108      	bne.n	8003c14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c10:	611a      	str	r2, [r3, #16]
 8003c12:	e01b      	b.n	8003c4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c14:	897b      	ldrh	r3, [r7, #10]
 8003c16:	11db      	asrs	r3, r3, #7
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 0306 	and.w	r3, r3, #6
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f063 030f 	orn	r3, r3, #15
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	490e      	ldr	r1, [pc, #56]	@ (8003c6c <I2C_MasterRequestWrite+0xfc>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fa16 	bl	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e010      	b.n	8003c64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c42:	897b      	ldrh	r3, [r7, #10]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4907      	ldr	r1, [pc, #28]	@ (8003c70 <I2C_MasterRequestWrite+0x100>)
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fa06 	bl	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	00010008 	.word	0x00010008
 8003c70:	00010002 	.word	0x00010002

08003c74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	817b      	strh	r3, [r7, #10]
 8003c86:	460b      	mov	r3, r1
 8003c88:	813b      	strh	r3, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f960 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc4:	d103      	bne.n	8003cce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e05f      	b.n	8003d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cd2:	897b      	ldrh	r3, [r7, #10]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ce0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	492d      	ldr	r1, [pc, #180]	@ (8003d9c <I2C_RequestMemoryWrite+0x128>)
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f9bb 	bl	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e04c      	b.n	8003d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d10:	6a39      	ldr	r1, [r7, #32]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fa46 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d107      	bne.n	8003d36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e02b      	b.n	8003d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d40:	893b      	ldrh	r3, [r7, #8]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	611a      	str	r2, [r3, #16]
 8003d4a:	e021      	b.n	8003d90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d4c:	893b      	ldrh	r3, [r7, #8]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5c:	6a39      	ldr	r1, [r7, #32]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa20 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d107      	bne.n	8003d82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e005      	b.n	8003d92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d86:	893b      	ldrh	r3, [r7, #8]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	00010002 	.word	0x00010002

08003da0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	4608      	mov	r0, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	461a      	mov	r2, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	817b      	strh	r3, [r7, #10]
 8003db2:	460b      	mov	r3, r1
 8003db4:	813b      	strh	r3, [r7, #8]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f8c2 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e00:	d103      	bne.n	8003e0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0aa      	b.n	8003f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	4952      	ldr	r1, [pc, #328]	@ (8003f6c <I2C_RequestMemoryRead+0x1cc>)
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f91d 	bl	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e097      	b.n	8003f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4c:	6a39      	ldr	r1, [r7, #32]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f9a8 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d107      	bne.n	8003e72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e076      	b.n	8003f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d105      	bne.n	8003e88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7c:	893b      	ldrh	r3, [r7, #8]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	611a      	str	r2, [r3, #16]
 8003e86:	e021      	b.n	8003ecc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e88:	893b      	ldrh	r3, [r7, #8]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e98:	6a39      	ldr	r1, [r7, #32]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f982 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d107      	bne.n	8003ebe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ebc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e050      	b.n	8003f64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec2:	893b      	ldrh	r3, [r7, #8]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ece:	6a39      	ldr	r1, [r7, #32]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f967 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d107      	bne.n	8003ef4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e035      	b.n	8003f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f82b 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f2e:	d103      	bne.n	8003f38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e013      	b.n	8003f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f3c:	897b      	ldrh	r3, [r7, #10]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	6a3a      	ldr	r2, [r7, #32]
 8003f50:	4906      	ldr	r1, [pc, #24]	@ (8003f6c <I2C_RequestMemoryRead+0x1cc>)
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f886 	bl	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	00010002 	.word	0x00010002

08003f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f80:	e048      	b.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d044      	beq.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fe f889 	bl	80020a0 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d139      	bne.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	0c1b      	lsrs	r3, r3, #16
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d10d      	bne.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	e00c      	b.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d116      	bne.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e023      	b.n	800405c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10d      	bne.n	800403a <I2C_WaitOnFlagUntilTimeout+0xca>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	43da      	mvns	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	e00c      	b.n	8004054 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	43da      	mvns	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	429a      	cmp	r2, r3
 8004058:	d093      	beq.n	8003f82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004072:	e071      	b.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004082:	d123      	bne.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004092:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800409c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e067      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d041      	beq.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d4:	f7fd ffe4 	bl	80020a0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d136      	bne.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10c      	bne.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	e00b      	b.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	43da      	mvns	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	f043 0220 	orr.w	r2, r3, #32
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e021      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d10c      	bne.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	43da      	mvns	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e00b      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf14      	ite	ne
 800418e:	2301      	movne	r3, #1
 8004190:	2300      	moveq	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	f47f af6d 	bne.w	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b0:	e034      	b.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f8e3 	bl	800437e <I2C_IsAcknowledgeFailed>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e034      	b.n	800422c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d028      	beq.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fd ff69 	bl	80020a0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d11d      	bne.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d016      	beq.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e007      	b.n	800422c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004226:	2b80      	cmp	r3, #128	@ 0x80
 8004228:	d1c3      	bne.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004240:	e034      	b.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f89b 	bl	800437e <I2C_IsAcknowledgeFailed>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e034      	b.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d028      	beq.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fd ff21 	bl	80020a0 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11d      	bne.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b04      	cmp	r3, #4
 800427c:	d016      	beq.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e007      	b.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d1c3      	bne.n	8004242 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042d0:	e049      	b.n	8004366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d119      	bne.n	8004314 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0210 	mvn.w	r2, #16
 80042e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e030      	b.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004314:	f7fd fec4 	bl	80020a0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11d      	bne.n	8004366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004334:	2b40      	cmp	r3, #64	@ 0x40
 8004336:	d016      	beq.n	8004366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e007      	b.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004370:	2b40      	cmp	r3, #64	@ 0x40
 8004372:	d1ae      	bne.n	80042d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004394:	d11b      	bne.n	80043ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800439e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e272      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8087 	beq.w	800450a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043fc:	4b92      	ldr	r3, [pc, #584]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b04      	cmp	r3, #4
 8004406:	d00c      	beq.n	8004422 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004408:	4b8f      	ldr	r3, [pc, #572]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b08      	cmp	r3, #8
 8004412:	d112      	bne.n	800443a <HAL_RCC_OscConfig+0x5e>
 8004414:	4b8c      	ldr	r3, [pc, #560]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004420:	d10b      	bne.n	800443a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004422:	4b89      	ldr	r3, [pc, #548]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d06c      	beq.n	8004508 <HAL_RCC_OscConfig+0x12c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d168      	bne.n	8004508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e24c      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x76>
 8004444:	4b80      	ldr	r3, [pc, #512]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a7f      	ldr	r2, [pc, #508]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800444a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e02e      	b.n	80044b0 <HAL_RCC_OscConfig+0xd4>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x98>
 800445a:	4b7b      	ldr	r3, [pc, #492]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7a      	ldr	r2, [pc, #488]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b78      	ldr	r3, [pc, #480]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a77      	ldr	r2, [pc, #476]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800446c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e01d      	b.n	80044b0 <HAL_RCC_OscConfig+0xd4>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0xbc>
 800447e:	4b72      	ldr	r3, [pc, #456]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a71      	ldr	r2, [pc, #452]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b6f      	ldr	r3, [pc, #444]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6e      	ldr	r2, [pc, #440]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0xd4>
 8004498:	4b6b      	ldr	r3, [pc, #428]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a6a      	ldr	r2, [pc, #424]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800449e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b68      	ldr	r3, [pc, #416]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a67      	ldr	r2, [pc, #412]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 80044aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fd fdf2 	bl	80020a0 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c0:	f7fd fdee 	bl	80020a0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	@ 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e200      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b5d      	ldr	r3, [pc, #372]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0xe4>
 80044de:	e014      	b.n	800450a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fd fdde 	bl	80020a0 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fd fdda 	bl	80020a0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	@ 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e1ec      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	4b53      	ldr	r3, [pc, #332]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x10c>
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d063      	beq.n	80045de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004516:	4b4c      	ldr	r3, [pc, #304]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004522:	4b49      	ldr	r3, [pc, #292]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d11c      	bne.n	8004568 <HAL_RCC_OscConfig+0x18c>
 800452e:	4b46      	ldr	r3, [pc, #280]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_RCC_OscConfig+0x176>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e1c0      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b3d      	ldr	r3, [pc, #244]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4939      	ldr	r1, [pc, #228]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	e03a      	b.n	80045de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004570:	4b36      	ldr	r3, [pc, #216]	@ (800464c <HAL_RCC_OscConfig+0x270>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fd fd93 	bl	80020a0 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457e:	f7fd fd8f 	bl	80020a0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e1a1      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004590:	4b2d      	ldr	r3, [pc, #180]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459c:	4b2a      	ldr	r3, [pc, #168]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4927      	ldr	r1, [pc, #156]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]
 80045b0:	e015      	b.n	80045de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b2:	4b26      	ldr	r3, [pc, #152]	@ (800464c <HAL_RCC_OscConfig+0x270>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fd fd72 	bl	80020a0 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c0:	f7fd fd6e 	bl	80020a0 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e180      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03a      	beq.n	8004660 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d019      	beq.n	8004626 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f2:	4b17      	ldr	r3, [pc, #92]	@ (8004650 <HAL_RCC_OscConfig+0x274>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f8:	f7fd fd52 	bl	80020a0 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004600:	f7fd fd4e 	bl	80020a0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e160      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <HAL_RCC_OscConfig+0x26c>)
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800461e:	2001      	movs	r0, #1
 8004620:	f000 face 	bl	8004bc0 <RCC_Delay>
 8004624:	e01c      	b.n	8004660 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004626:	4b0a      	ldr	r3, [pc, #40]	@ (8004650 <HAL_RCC_OscConfig+0x274>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462c:	f7fd fd38 	bl	80020a0 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004632:	e00f      	b.n	8004654 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004634:	f7fd fd34 	bl	80020a0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d908      	bls.n	8004654 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e146      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	42420000 	.word	0x42420000
 8004650:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004654:	4b92      	ldr	r3, [pc, #584]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e9      	bne.n	8004634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80a6 	beq.w	80047ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004672:	4b8b      	ldr	r3, [pc, #556]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10d      	bne.n	800469a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	4b88      	ldr	r3, [pc, #544]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	4a87      	ldr	r2, [pc, #540]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004688:	61d3      	str	r3, [r2, #28]
 800468a:	4b85      	ldr	r3, [pc, #532]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	4b82      	ldr	r3, [pc, #520]	@ (80048a4 <HAL_RCC_OscConfig+0x4c8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d118      	bne.n	80046d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a6:	4b7f      	ldr	r3, [pc, #508]	@ (80048a4 <HAL_RCC_OscConfig+0x4c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a7e      	ldr	r2, [pc, #504]	@ (80048a4 <HAL_RCC_OscConfig+0x4c8>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b2:	f7fd fcf5 	bl	80020a0 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ba:	f7fd fcf1 	bl	80020a0 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b64      	cmp	r3, #100	@ 0x64
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e103      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	4b75      	ldr	r3, [pc, #468]	@ (80048a4 <HAL_RCC_OscConfig+0x4c8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0x312>
 80046e0:	4b6f      	ldr	r3, [pc, #444]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	4a6e      	ldr	r2, [pc, #440]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6213      	str	r3, [r2, #32]
 80046ec:	e02d      	b.n	800474a <HAL_RCC_OscConfig+0x36e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x334>
 80046f6:	4b6a      	ldr	r3, [pc, #424]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4a69      	ldr	r2, [pc, #420]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	6213      	str	r3, [r2, #32]
 8004702:	4b67      	ldr	r3, [pc, #412]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	4a66      	ldr	r2, [pc, #408]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004708:	f023 0304 	bic.w	r3, r3, #4
 800470c:	6213      	str	r3, [r2, #32]
 800470e:	e01c      	b.n	800474a <HAL_RCC_OscConfig+0x36e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b05      	cmp	r3, #5
 8004716:	d10c      	bne.n	8004732 <HAL_RCC_OscConfig+0x356>
 8004718:	4b61      	ldr	r3, [pc, #388]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	4a60      	ldr	r2, [pc, #384]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 800471e:	f043 0304 	orr.w	r3, r3, #4
 8004722:	6213      	str	r3, [r2, #32]
 8004724:	4b5e      	ldr	r3, [pc, #376]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	4a5d      	ldr	r2, [pc, #372]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	6213      	str	r3, [r2, #32]
 8004730:	e00b      	b.n	800474a <HAL_RCC_OscConfig+0x36e>
 8004732:	4b5b      	ldr	r3, [pc, #364]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	4a5a      	ldr	r2, [pc, #360]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	6213      	str	r3, [r2, #32]
 800473e:	4b58      	ldr	r3, [pc, #352]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	4a57      	ldr	r2, [pc, #348]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	f023 0304 	bic.w	r3, r3, #4
 8004748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d015      	beq.n	800477e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004752:	f7fd fca5 	bl	80020a0 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004758:	e00a      	b.n	8004770 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475a:	f7fd fca1 	bl	80020a0 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004768:	4293      	cmp	r3, r2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e0b1      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004770:	4b4b      	ldr	r3, [pc, #300]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ee      	beq.n	800475a <HAL_RCC_OscConfig+0x37e>
 800477c:	e014      	b.n	80047a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fd fc8f 	bl	80020a0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fd fc8b 	bl	80020a0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e09b      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479c:	4b40      	ldr	r3, [pc, #256]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1ee      	bne.n	8004786 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d105      	bne.n	80047ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ae:	4b3c      	ldr	r3, [pc, #240]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	4a3b      	ldr	r2, [pc, #236]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8087 	beq.w	80048d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c4:	4b36      	ldr	r3, [pc, #216]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d061      	beq.n	8004894 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d146      	bne.n	8004866 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d8:	4b33      	ldr	r3, [pc, #204]	@ (80048a8 <HAL_RCC_OscConfig+0x4cc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fd fc5f 	bl	80020a0 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fd fc5b 	bl	80020a0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e06d      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f8:	4b29      	ldr	r3, [pc, #164]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800480c:	d108      	bne.n	8004820 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800480e:	4b24      	ldr	r3, [pc, #144]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	4921      	ldr	r1, [pc, #132]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004820:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a19      	ldr	r1, [r3, #32]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	430b      	orrs	r3, r1
 8004832:	491b      	ldr	r1, [pc, #108]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004838:	4b1b      	ldr	r3, [pc, #108]	@ (80048a8 <HAL_RCC_OscConfig+0x4cc>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fd fc2f 	bl	80020a0 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004846:	f7fd fc2b 	bl	80020a0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e03d      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004858:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x46a>
 8004864:	e035      	b.n	80048d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004866:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <HAL_RCC_OscConfig+0x4cc>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fd fc18 	bl	80020a0 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004874:	f7fd fc14 	bl	80020a0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e026      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x498>
 8004892:	e01e      	b.n	80048d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d107      	bne.n	80048ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e019      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
 80048a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048ac:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <HAL_RCC_OscConfig+0x500>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000

080048e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0d0      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d910      	bls.n	8004924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b67      	ldr	r3, [pc, #412]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 0207 	bic.w	r2, r3, #7
 800490a:	4965      	ldr	r1, [pc, #404]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	4313      	orrs	r3, r2
 8004910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004912:	4b63      	ldr	r3, [pc, #396]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0b8      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d020      	beq.n	8004972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800493c:	4b59      	ldr	r3, [pc, #356]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4a58      	ldr	r2, [pc, #352]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004954:	4b53      	ldr	r3, [pc, #332]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a52      	ldr	r2, [pc, #328]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800495a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800495e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b50      	ldr	r3, [pc, #320]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	494d      	ldr	r1, [pc, #308]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d040      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d107      	bne.n	8004996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b47      	ldr	r3, [pc, #284]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d115      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e07f      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499e:	4b41      	ldr	r3, [pc, #260]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e073      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e06b      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049be:	4b39      	ldr	r3, [pc, #228]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4936      	ldr	r1, [pc, #216]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d0:	f7fd fb66 	bl	80020a0 <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fd fb62 	bl	80020a0 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e053      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f003 020c 	and.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1eb      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a00:	4b27      	ldr	r3, [pc, #156]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d210      	bcs.n	8004a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b24      	ldr	r3, [pc, #144]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 0207 	bic.w	r2, r3, #7
 8004a16:	4922      	ldr	r1, [pc, #136]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e032      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a3c:	4b19      	ldr	r3, [pc, #100]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4916      	ldr	r1, [pc, #88]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a5a:	4b12      	ldr	r3, [pc, #72]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	490e      	ldr	r1, [pc, #56]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a6e:	f000 f821 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8004a72:	4602      	mov	r2, r0
 8004a74:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	490a      	ldr	r1, [pc, #40]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a80:	5ccb      	ldrb	r3, [r1, r3]
 8004a82:	fa22 f303 	lsr.w	r3, r2, r3
 8004a86:	4a09      	ldr	r2, [pc, #36]	@ (8004aac <HAL_RCC_ClockConfig+0x1cc>)
 8004a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a8a:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fd fac4 	bl	800201c <HAL_InitTick>

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	08007b08 	.word	0x08007b08
 8004aac:	20000008 	.word	0x20000008
 8004ab0:	2000000c 	.word	0x2000000c

08004ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ace:	4b1e      	ldr	r3, [pc, #120]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d002      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x36>
 8004ae2:	e027      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ae4:	4b19      	ldr	r3, [pc, #100]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ae6:	613b      	str	r3, [r7, #16]
      break;
 8004ae8:	e027      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	0c9b      	lsrs	r3, r3, #18
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	4a17      	ldr	r2, [pc, #92]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004af4:	5cd3      	ldrb	r3, [r2, r3]
 8004af6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d010      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b02:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	0c5b      	lsrs	r3, r3, #17
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	4a11      	ldr	r2, [pc, #68]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a0d      	ldr	r2, [pc, #52]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b16:	fb03 f202 	mul.w	r2, r3, r2
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e004      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a0c      	ldr	r2, [pc, #48]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	613b      	str	r3, [r7, #16]
      break;
 8004b32:	e002      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b36:	613b      	str	r3, [r7, #16]
      break;
 8004b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3a:	693b      	ldr	r3, [r7, #16]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	007a1200 	.word	0x007a1200
 8004b50:	08007b20 	.word	0x08007b20
 8004b54:	08007b30 	.word	0x08007b30
 8004b58:	003d0900 	.word	0x003d0900

08004b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b60:	4b02      	ldr	r3, [pc, #8]	@ (8004b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	20000008 	.word	0x20000008

08004b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b74:	f7ff fff2 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4903      	ldr	r1, [pc, #12]	@ (8004b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40021000 	.word	0x40021000
 8004b94:	08007b18 	.word	0x08007b18

08004b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b9c:	f7ff ffde 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	0adb      	lsrs	r3, r3, #11
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4903      	ldr	r1, [pc, #12]	@ (8004bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	08007b18 	.word	0x08007b18

08004bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <RCC_Delay+0x34>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf8 <RCC_Delay+0x38>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0a5b      	lsrs	r3, r3, #9
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bdc:	bf00      	nop
  }
  while (Delay --);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1e5a      	subs	r2, r3, #1
 8004be2:	60fa      	str	r2, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f9      	bne.n	8004bdc <RCC_Delay+0x1c>
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	20000008 	.word	0x20000008
 8004bf8:	10624dd3 	.word	0x10624dd3

08004bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d07d      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10d      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c28:	4b4c      	ldr	r3, [pc, #304]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c32:	61d3      	str	r3, [r2, #28]
 8004c34:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c40:	2301      	movs	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	4b46      	ldr	r3, [pc, #280]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d118      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c50:	4b43      	ldr	r3, [pc, #268]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a42      	ldr	r2, [pc, #264]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5c:	f7fd fa20 	bl	80020a0 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c64:	f7fd fa1c 	bl	80020a0 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	@ 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e06d      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c76:	4b3a      	ldr	r3, [pc, #232]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c82:	4b36      	ldr	r3, [pc, #216]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d02e      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d027      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004caa:	4b2e      	ldr	r3, [pc, #184]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cb6:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d014      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc6:	f7fd f9eb 	bl	80020a0 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ccc:	e00a      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fd f9e7 	bl	80020a0 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e036      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ee      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4917      	ldr	r1, [pc, #92]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d105      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d08:	4b14      	ldr	r3, [pc, #80]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d20:	4b0e      	ldr	r3, [pc, #56]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	490b      	ldr	r1, [pc, #44]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d3e:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	4904      	ldr	r1, [pc, #16]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40007000 	.word	0x40007000
 8004d64:	42420440 	.word	0x42420440

08004d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e041      	b.n	8004dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fc ff8e 	bl	8001cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f000 fa8a 	bl	80052c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d001      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e03a      	b.n	8004e96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ea0 <HAL_TIM_Base_Start_IT+0x98>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x58>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x58>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a14      	ldr	r2, [pc, #80]	@ (8004ea4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x58>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ea8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d111      	bne.n	8004e84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d010      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e82:	e007      	b.n	8004e94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800

08004eac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0201 	bic.w	r2, r2, #1
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10f      	bne.n	8004ef4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a1a      	ldr	r2, [r3, #32]
 8004eda:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d020      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01b      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0202 	mvn.w	r2, #2
 8004f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f998 	bl	8005288 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f98b 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f99a 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d020      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01b      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0204 	mvn.w	r2, #4
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f972 	bl	8005288 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f965 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f974 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d020      	beq.n	8005004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0208 	mvn.w	r2, #8
 8004fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f94c 	bl	8005288 <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f93f 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f94e 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b00      	cmp	r3, #0
 800500c:	d020      	beq.n	8005050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01b      	beq.n	8005050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0210 	mvn.w	r2, #16
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2208      	movs	r2, #8
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f926 	bl	8005288 <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f919 	bl	8005276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f928 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0201 	mvn.w	r2, #1
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc f8a4 	bl	80011bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00c      	beq.n	8005098 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa7f 	bl	8005596 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00c      	beq.n	80050bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8f8 	bl	80052ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0220 	mvn.w	r2, #32
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa52 	bl	8005584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_ConfigClockSource+0x1c>
 8005100:	2302      	movs	r3, #2
 8005102:	e0b4      	b.n	800526e <HAL_TIM_ConfigClockSource+0x186>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800512a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513c:	d03e      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0xd4>
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005142:	f200 8087 	bhi.w	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800514a:	f000 8086 	beq.w	800525a <HAL_TIM_ConfigClockSource+0x172>
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005152:	d87f      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b70      	cmp	r3, #112	@ 0x70
 8005156:	d01a      	beq.n	800518e <HAL_TIM_ConfigClockSource+0xa6>
 8005158:	2b70      	cmp	r3, #112	@ 0x70
 800515a:	d87b      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b60      	cmp	r3, #96	@ 0x60
 800515e:	d050      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x11a>
 8005160:	2b60      	cmp	r3, #96	@ 0x60
 8005162:	d877      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b50      	cmp	r3, #80	@ 0x50
 8005166:	d03c      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005168:	2b50      	cmp	r3, #80	@ 0x50
 800516a:	d873      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d058      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x13a>
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	d86f      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b30      	cmp	r3, #48	@ 0x30
 8005176:	d064      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15a>
 8005178:	2b30      	cmp	r3, #48	@ 0x30
 800517a:	d86b      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b20      	cmp	r3, #32
 800517e:	d060      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15a>
 8005180:	2b20      	cmp	r3, #32
 8005182:	d867      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d05c      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15a>
 8005188:	2b10      	cmp	r3, #16
 800518a:	d05a      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x15a>
 800518c:	e062      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800519e:	f000 f974 	bl	800548a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	609a      	str	r2, [r3, #8]
      break;
 80051ba:	e04f      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051cc:	f000 f95d 	bl	800548a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051de:	609a      	str	r2, [r3, #8]
      break;
 80051e0:	e03c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ee:	461a      	mov	r2, r3
 80051f0:	f000 f8d4 	bl	800539c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2150      	movs	r1, #80	@ 0x50
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f92b 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8005200:	e02c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800520e:	461a      	mov	r2, r3
 8005210:	f000 f8f2 	bl	80053f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2160      	movs	r1, #96	@ 0x60
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f91b 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8005220:	e01c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800522e:	461a      	mov	r2, r3
 8005230:	f000 f8b4 	bl	800539c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2140      	movs	r1, #64	@ 0x40
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f90b 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8005240:	e00c      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f000 f902 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8005252:	e003      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e000      	b.n	800525c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800525a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr

0800529a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr
	...

080052c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005390 <TIM_Base_SetConfig+0xd0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <TIM_Base_SetConfig+0x30>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052de:	d007      	beq.n	80052f0 <TIM_Base_SetConfig+0x30>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005394 <TIM_Base_SetConfig+0xd4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_Base_SetConfig+0x30>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005398 <TIM_Base_SetConfig+0xd8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d108      	bne.n	8005302 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <TIM_Base_SetConfig+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00b      	beq.n	8005322 <TIM_Base_SetConfig+0x62>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005310:	d007      	beq.n	8005322 <TIM_Base_SetConfig+0x62>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a1f      	ldr	r2, [pc, #124]	@ (8005394 <TIM_Base_SetConfig+0xd4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_Base_SetConfig+0x62>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1e      	ldr	r2, [pc, #120]	@ (8005398 <TIM_Base_SetConfig+0xd8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d108      	bne.n	8005334 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a0d      	ldr	r2, [pc, #52]	@ (8005390 <TIM_Base_SetConfig+0xd0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d103      	bne.n	8005368 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f023 0201 	bic.w	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	611a      	str	r2, [r3, #16]
  }
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800

0800539c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0201 	bic.w	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 030a 	bic.w	r3, r3, #10
 80053d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0210 	bic.w	r2, r3, #16
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	031b      	lsls	r3, r3, #12
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005434:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	f043 0307 	orr.w	r3, r3, #7
 8005478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	609a      	str	r2, [r3, #8]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800548a:	b480      	push	{r7}
 800548c:	b087      	sub	sp, #28
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	021a      	lsls	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	609a      	str	r2, [r3, #8]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054dc:	2302      	movs	r3, #2
 80054de:	e046      	b.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a16      	ldr	r2, [pc, #88]	@ (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552c:	d009      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a12      	ldr	r2, [pc, #72]	@ (800557c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a10      	ldr	r2, [pc, #64]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10c      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800

08005584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e042      	b.n	8005640 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc fb92 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2224      	movs	r2, #36	@ 0x24
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fdb7 	bl	8006160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	@ 0x28
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	d175      	bne.n	8005754 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_UART_Transmit+0x2c>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e06e      	b.n	8005756 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2221      	movs	r2, #33	@ 0x21
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005686:	f7fc fd0b 	bl	80020a0 <HAL_GetTick>
 800568a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	88fa      	ldrh	r2, [r7, #6]
 8005690:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a0:	d108      	bne.n	80056b4 <HAL_UART_Transmit+0x6c>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	e003      	b.n	80056bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056bc:	e02e      	b.n	800571c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2180      	movs	r1, #128	@ 0x80
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fb1c 	bl	8005d06 <UART_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e03a      	b.n	8005756 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	3302      	adds	r3, #2
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e007      	b.n	800570e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1cb      	bne.n	80056be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2200      	movs	r2, #0
 800572e:	2140      	movs	r1, #64	@ 0x40
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fae8 	bl	8005d06 <UART_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e006      	b.n	8005756 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	4613      	mov	r3, r2
 800576a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b20      	cmp	r3, #32
 8005776:	d112      	bne.n	800579e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Receive_IT+0x26>
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e00b      	b.n	80057a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	461a      	mov	r2, r3
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fb0f 	bl	8005db8 <UART_Start_Receive_IT>
 800579a:	4603      	mov	r3, r0
 800579c:	e000      	b.n	80057a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b0ba      	sub	sp, #232	@ 0xe8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10f      	bne.n	800580e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_UART_IRQHandler+0x66>
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fbec 	bl	8005fe4 <UART_Receive_IT>
      return;
 800580c:	e25b      	b.n	8005cc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800580e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80de 	beq.w	80059d4 <HAL_UART_IRQHandler+0x22c>
 8005818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d106      	bne.n	8005832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005828:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80d1 	beq.w	80059d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <HAL_UART_IRQHandler+0xae>
 800583e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	f043 0201 	orr.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_UART_IRQHandler+0xd2>
 8005862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	f043 0202 	orr.w	r2, r3, #2
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_UART_IRQHandler+0xf6>
 8005886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005896:	f043 0204 	orr.w	r2, r3, #4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d011      	beq.n	80058ce <HAL_UART_IRQHandler+0x126>
 80058aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d105      	bne.n	80058c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c6:	f043 0208 	orr.w	r2, r3, #8
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 81f2 	beq.w	8005cbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_UART_IRQHandler+0x14e>
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fb77 	bl	8005fe4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <HAL_UART_IRQHandler+0x17a>
 800591a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d04f      	beq.n	80059c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fa81 	bl	8005e2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d041      	beq.n	80059ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3314      	adds	r3, #20
 800593c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800594c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005962:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800596e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800597a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1d9      	bne.n	8005936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d013      	beq.n	80059b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b88 <HAL_UART_IRQHandler+0x3e0>)
 8005990:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005996:	4618      	mov	r0, r3
 8005998:	f7fd f8f6 	bl	8002b88 <HAL_DMA_Abort_IT>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059ac:	4610      	mov	r0, r2
 80059ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	e00e      	b.n	80059d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f993 	bl	8005cde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	e00a      	b.n	80059d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f98f 	bl	8005cde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	e006      	b.n	80059d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f98b 	bl	8005cde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059ce:	e175      	b.n	8005cbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	bf00      	nop
    return;
 80059d2:	e173      	b.n	8005cbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d8:	2b01      	cmp	r3, #1
 80059da:	f040 814f 	bne.w	8005c7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8148 	beq.w	8005c7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8141 	beq.w	8005c7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80b6 	beq.w	8005b8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8145 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	f080 813e 	bcs.w	8005cc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	f000 8088 	beq.w	8005b68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a84:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a90:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1d9      	bne.n	8005a58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ab4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3314      	adds	r3, #20
 8005ac4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ac8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005acc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ad0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e1      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3314      	adds	r3, #20
 8005ae6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3314      	adds	r3, #20
 8005b00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b04:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b06:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e3      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b38:	f023 0310 	bic.w	r3, r3, #16
 8005b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b4c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e3      	bne.n	8005b26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fc ffd5 	bl	8002b12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8b6 	bl	8005cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b84:	e09c      	b.n	8005cc0 <HAL_UART_IRQHandler+0x518>
 8005b86:	bf00      	nop
 8005b88:	08005eef 	.word	0x08005eef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 808e 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8089 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005bd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e3      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3314      	adds	r3, #20
 8005c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e3      	bne.n	8005bea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0310 	bic.w	r3, r3, #16
 8005c46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c54:	61fa      	str	r2, [r7, #28]
 8005c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	69b9      	ldr	r1, [r7, #24]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	617b      	str	r3, [r7, #20]
   return(result);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e3      	bne.n	8005c30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f83b 	bl	8005cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c7a:	e023      	b.n	8005cc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d009      	beq.n	8005c9c <HAL_UART_IRQHandler+0x4f4>
 8005c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f93e 	bl	8005f16 <UART_Transmit_IT>
    return;
 8005c9a:	e014      	b.n	8005cc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x51e>
 8005ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f97d 	bl	8005fb4 <UART_EndTransmit_IT>
    return;
 8005cba:	e004      	b.n	8005cc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005cbc:	bf00      	nop
 8005cbe:	e002      	b.n	8005cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005cc0:	bf00      	nop
 8005cc2:	e000      	b.n	8005cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005cc4:	bf00      	nop
  }
}
 8005cc6:	37e8      	adds	r7, #232	@ 0xe8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	4613      	mov	r3, r2
 8005d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d16:	e03b      	b.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d037      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d20:	f7fc f9be 	bl	80020a0 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d302      	bcc.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e03a      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d023      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b80      	cmp	r3, #128	@ 0x80
 8005d4c:	d020      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b40      	cmp	r3, #64	@ 0x40
 8005d52:	d01d      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d116      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f856 	bl	8005e2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2208      	movs	r2, #8
 8005d82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e00f      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d0b4      	beq.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2222      	movs	r2, #34	@ 0x22
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dfc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0220 	orr.w	r2, r2, #32
 8005e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b095      	sub	sp, #84	@ 0x54
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e52:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e5      	bne.n	8005e32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e5      	bne.n	8005e66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d119      	bne.n	8005ed6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f023 0310 	bic.w	r3, r3, #16
 8005eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ec2:	61ba      	str	r2, [r7, #24]
 8005ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6979      	ldr	r1, [r7, #20]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e5      	bne.n	8005ea2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ee4:	bf00      	nop
 8005ee6:	3754      	adds	r7, #84	@ 0x54
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7ff fee8 	bl	8005cde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b21      	cmp	r3, #33	@ 0x21
 8005f28:	d13e      	bne.n	8005fa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f32:	d114      	bne.n	8005f5e <UART_Transmit_IT+0x48>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d110      	bne.n	8005f5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	1c9a      	adds	r2, r3, #2
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	621a      	str	r2, [r3, #32]
 8005f5c:	e008      	b.n	8005f70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	1c59      	adds	r1, r3, #1
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6211      	str	r1, [r2, #32]
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10f      	bne.n	8005fa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff fe79 	bl	8005ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08c      	sub	sp, #48	@ 0x30
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b22      	cmp	r3, #34	@ 0x22
 8005ff6:	f040 80ae 	bne.w	8006156 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006002:	d117      	bne.n	8006034 <UART_Receive_IT+0x50>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d113      	bne.n	8006034 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	b29a      	uxth	r2, r3
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602c:	1c9a      	adds	r2, r3, #2
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	629a      	str	r2, [r3, #40]	@ 0x28
 8006032:	e026      	b.n	8006082 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800603a:	2300      	movs	r3, #0
 800603c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006046:	d007      	beq.n	8006058 <UART_Receive_IT+0x74>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <UART_Receive_IT+0x82>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e008      	b.n	8006078 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006072:	b2da      	uxtb	r2, r3
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29b      	uxth	r3, r3
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4619      	mov	r1, r3
 8006090:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006092:	2b00      	cmp	r3, #0
 8006094:	d15d      	bne.n	8006152 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0220 	bic.w	r2, r2, #32
 80060a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d135      	bne.n	8006148 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	613b      	str	r3, [r7, #16]
   return(result);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f023 0310 	bic.w	r3, r3, #16
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006102:	623a      	str	r2, [r7, #32]
 8006104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	69f9      	ldr	r1, [r7, #28]
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b10      	cmp	r3, #16
 8006122:	d10a      	bne.n	800613a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fdd5 	bl	8005cf0 <HAL_UARTEx_RxEventCallback>
 8006146:	e002      	b.n	800614e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fb f9df 	bl	800150c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e002      	b.n	8006158 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006156:	2302      	movs	r3, #2
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3730      	adds	r7, #48	@ 0x30
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800619a:	f023 030c 	bic.w	r3, r3, #12
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	430b      	orrs	r3, r1
 80061a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006274 <UART_SetConfig+0x114>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061c8:	f7fe fce6 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	e002      	b.n	80061d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061d0:	f7fe fcce 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 80061d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009a      	lsls	r2, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	4a22      	ldr	r2, [pc, #136]	@ (8006278 <UART_SetConfig+0x118>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	0119      	lsls	r1, r3, #4
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009a      	lsls	r2, r3, #2
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	fbb2 f2f3 	udiv	r2, r2, r3
 800620c:	4b1a      	ldr	r3, [pc, #104]	@ (8006278 <UART_SetConfig+0x118>)
 800620e:	fba3 0302 	umull	r0, r3, r3, r2
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	2064      	movs	r0, #100	@ 0x64
 8006216:	fb00 f303 	mul.w	r3, r0, r3
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	3332      	adds	r3, #50	@ 0x32
 8006220:	4a15      	ldr	r2, [pc, #84]	@ (8006278 <UART_SetConfig+0x118>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800622c:	4419      	add	r1, r3
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009a      	lsls	r2, r3, #2
 8006238:	441a      	add	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	fbb2 f2f3 	udiv	r2, r2, r3
 8006244:	4b0c      	ldr	r3, [pc, #48]	@ (8006278 <UART_SetConfig+0x118>)
 8006246:	fba3 0302 	umull	r0, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	2064      	movs	r0, #100	@ 0x64
 800624e:	fb00 f303 	mul.w	r3, r0, r3
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	3332      	adds	r3, #50	@ 0x32
 8006258:	4a07      	ldr	r2, [pc, #28]	@ (8006278 <UART_SetConfig+0x118>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	f003 020f 	and.w	r2, r3, #15
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	440a      	add	r2, r1
 800626a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40013800 	.word	0x40013800
 8006278:	51eb851f 	.word	0x51eb851f

0800627c <siprintf>:
 800627c:	b40e      	push	{r1, r2, r3}
 800627e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006282:	b500      	push	{lr}
 8006284:	b09c      	sub	sp, #112	@ 0x70
 8006286:	ab1d      	add	r3, sp, #116	@ 0x74
 8006288:	9002      	str	r0, [sp, #8]
 800628a:	9006      	str	r0, [sp, #24]
 800628c:	9107      	str	r1, [sp, #28]
 800628e:	9104      	str	r1, [sp, #16]
 8006290:	4808      	ldr	r0, [pc, #32]	@ (80062b4 <siprintf+0x38>)
 8006292:	4909      	ldr	r1, [pc, #36]	@ (80062b8 <siprintf+0x3c>)
 8006294:	f853 2b04 	ldr.w	r2, [r3], #4
 8006298:	9105      	str	r1, [sp, #20]
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	a902      	add	r1, sp, #8
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	f000 f992 	bl	80065c8 <_svfiprintf_r>
 80062a4:	2200      	movs	r2, #0
 80062a6:	9b02      	ldr	r3, [sp, #8]
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	b01c      	add	sp, #112	@ 0x70
 80062ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b0:	b003      	add	sp, #12
 80062b2:	4770      	bx	lr
 80062b4:	20000014 	.word	0x20000014
 80062b8:	ffff0208 	.word	0xffff0208

080062bc <memset>:
 80062bc:	4603      	mov	r3, r0
 80062be:	4402      	add	r2, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>

080062cc <__errno>:
 80062cc:	4b01      	ldr	r3, [pc, #4]	@ (80062d4 <__errno+0x8>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000014 	.word	0x20000014

080062d8 <__libc_init_array>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	2600      	movs	r6, #0
 80062dc:	4d0c      	ldr	r5, [pc, #48]	@ (8006310 <__libc_init_array+0x38>)
 80062de:	4c0d      	ldr	r4, [pc, #52]	@ (8006314 <__libc_init_array+0x3c>)
 80062e0:	1b64      	subs	r4, r4, r5
 80062e2:	10a4      	asrs	r4, r4, #2
 80062e4:	42a6      	cmp	r6, r4
 80062e6:	d109      	bne.n	80062fc <__libc_init_array+0x24>
 80062e8:	f001 fbce 	bl	8007a88 <_init>
 80062ec:	2600      	movs	r6, #0
 80062ee:	4d0a      	ldr	r5, [pc, #40]	@ (8006318 <__libc_init_array+0x40>)
 80062f0:	4c0a      	ldr	r4, [pc, #40]	@ (800631c <__libc_init_array+0x44>)
 80062f2:	1b64      	subs	r4, r4, r5
 80062f4:	10a4      	asrs	r4, r4, #2
 80062f6:	42a6      	cmp	r6, r4
 80062f8:	d105      	bne.n	8006306 <__libc_init_array+0x2e>
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006300:	4798      	blx	r3
 8006302:	3601      	adds	r6, #1
 8006304:	e7ee      	b.n	80062e4 <__libc_init_array+0xc>
 8006306:	f855 3b04 	ldr.w	r3, [r5], #4
 800630a:	4798      	blx	r3
 800630c:	3601      	adds	r6, #1
 800630e:	e7f2      	b.n	80062f6 <__libc_init_array+0x1e>
 8006310:	08007b98 	.word	0x08007b98
 8006314:	08007b98 	.word	0x08007b98
 8006318:	08007b98 	.word	0x08007b98
 800631c:	08007b9c 	.word	0x08007b9c

08006320 <__retarget_lock_acquire_recursive>:
 8006320:	4770      	bx	lr

08006322 <__retarget_lock_release_recursive>:
 8006322:	4770      	bx	lr

08006324 <_free_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4605      	mov	r5, r0
 8006328:	2900      	cmp	r1, #0
 800632a:	d040      	beq.n	80063ae <_free_r+0x8a>
 800632c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006330:	1f0c      	subs	r4, r1, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	bfb8      	it	lt
 8006336:	18e4      	addlt	r4, r4, r3
 8006338:	f000 f8de 	bl	80064f8 <__malloc_lock>
 800633c:	4a1c      	ldr	r2, [pc, #112]	@ (80063b0 <_free_r+0x8c>)
 800633e:	6813      	ldr	r3, [r2, #0]
 8006340:	b933      	cbnz	r3, 8006350 <_free_r+0x2c>
 8006342:	6063      	str	r3, [r4, #4]
 8006344:	6014      	str	r4, [r2, #0]
 8006346:	4628      	mov	r0, r5
 8006348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800634c:	f000 b8da 	b.w	8006504 <__malloc_unlock>
 8006350:	42a3      	cmp	r3, r4
 8006352:	d908      	bls.n	8006366 <_free_r+0x42>
 8006354:	6820      	ldr	r0, [r4, #0]
 8006356:	1821      	adds	r1, r4, r0
 8006358:	428b      	cmp	r3, r1
 800635a:	bf01      	itttt	eq
 800635c:	6819      	ldreq	r1, [r3, #0]
 800635e:	685b      	ldreq	r3, [r3, #4]
 8006360:	1809      	addeq	r1, r1, r0
 8006362:	6021      	streq	r1, [r4, #0]
 8006364:	e7ed      	b.n	8006342 <_free_r+0x1e>
 8006366:	461a      	mov	r2, r3
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	b10b      	cbz	r3, 8006370 <_free_r+0x4c>
 800636c:	42a3      	cmp	r3, r4
 800636e:	d9fa      	bls.n	8006366 <_free_r+0x42>
 8006370:	6811      	ldr	r1, [r2, #0]
 8006372:	1850      	adds	r0, r2, r1
 8006374:	42a0      	cmp	r0, r4
 8006376:	d10b      	bne.n	8006390 <_free_r+0x6c>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	4401      	add	r1, r0
 800637c:	1850      	adds	r0, r2, r1
 800637e:	4283      	cmp	r3, r0
 8006380:	6011      	str	r1, [r2, #0]
 8006382:	d1e0      	bne.n	8006346 <_free_r+0x22>
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	4408      	add	r0, r1
 800638a:	6010      	str	r0, [r2, #0]
 800638c:	6053      	str	r3, [r2, #4]
 800638e:	e7da      	b.n	8006346 <_free_r+0x22>
 8006390:	d902      	bls.n	8006398 <_free_r+0x74>
 8006392:	230c      	movs	r3, #12
 8006394:	602b      	str	r3, [r5, #0]
 8006396:	e7d6      	b.n	8006346 <_free_r+0x22>
 8006398:	6820      	ldr	r0, [r4, #0]
 800639a:	1821      	adds	r1, r4, r0
 800639c:	428b      	cmp	r3, r1
 800639e:	bf01      	itttt	eq
 80063a0:	6819      	ldreq	r1, [r3, #0]
 80063a2:	685b      	ldreq	r3, [r3, #4]
 80063a4:	1809      	addeq	r1, r1, r0
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	6063      	str	r3, [r4, #4]
 80063aa:	6054      	str	r4, [r2, #4]
 80063ac:	e7cb      	b.n	8006346 <_free_r+0x22>
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	200003a4 	.word	0x200003a4

080063b4 <sbrk_aligned>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4e0f      	ldr	r6, [pc, #60]	@ (80063f4 <sbrk_aligned+0x40>)
 80063b8:	460c      	mov	r4, r1
 80063ba:	6831      	ldr	r1, [r6, #0]
 80063bc:	4605      	mov	r5, r0
 80063be:	b911      	cbnz	r1, 80063c6 <sbrk_aligned+0x12>
 80063c0:	f000 fbaa 	bl	8006b18 <_sbrk_r>
 80063c4:	6030      	str	r0, [r6, #0]
 80063c6:	4621      	mov	r1, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 fba5 	bl	8006b18 <_sbrk_r>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d103      	bne.n	80063da <sbrk_aligned+0x26>
 80063d2:	f04f 34ff 	mov.w	r4, #4294967295
 80063d6:	4620      	mov	r0, r4
 80063d8:	bd70      	pop	{r4, r5, r6, pc}
 80063da:	1cc4      	adds	r4, r0, #3
 80063dc:	f024 0403 	bic.w	r4, r4, #3
 80063e0:	42a0      	cmp	r0, r4
 80063e2:	d0f8      	beq.n	80063d6 <sbrk_aligned+0x22>
 80063e4:	1a21      	subs	r1, r4, r0
 80063e6:	4628      	mov	r0, r5
 80063e8:	f000 fb96 	bl	8006b18 <_sbrk_r>
 80063ec:	3001      	adds	r0, #1
 80063ee:	d1f2      	bne.n	80063d6 <sbrk_aligned+0x22>
 80063f0:	e7ef      	b.n	80063d2 <sbrk_aligned+0x1e>
 80063f2:	bf00      	nop
 80063f4:	200003a0 	.word	0x200003a0

080063f8 <_malloc_r>:
 80063f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063fc:	1ccd      	adds	r5, r1, #3
 80063fe:	f025 0503 	bic.w	r5, r5, #3
 8006402:	3508      	adds	r5, #8
 8006404:	2d0c      	cmp	r5, #12
 8006406:	bf38      	it	cc
 8006408:	250c      	movcc	r5, #12
 800640a:	2d00      	cmp	r5, #0
 800640c:	4606      	mov	r6, r0
 800640e:	db01      	blt.n	8006414 <_malloc_r+0x1c>
 8006410:	42a9      	cmp	r1, r5
 8006412:	d904      	bls.n	800641e <_malloc_r+0x26>
 8006414:	230c      	movs	r3, #12
 8006416:	6033      	str	r3, [r6, #0]
 8006418:	2000      	movs	r0, #0
 800641a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800641e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064f4 <_malloc_r+0xfc>
 8006422:	f000 f869 	bl	80064f8 <__malloc_lock>
 8006426:	f8d8 3000 	ldr.w	r3, [r8]
 800642a:	461c      	mov	r4, r3
 800642c:	bb44      	cbnz	r4, 8006480 <_malloc_r+0x88>
 800642e:	4629      	mov	r1, r5
 8006430:	4630      	mov	r0, r6
 8006432:	f7ff ffbf 	bl	80063b4 <sbrk_aligned>
 8006436:	1c43      	adds	r3, r0, #1
 8006438:	4604      	mov	r4, r0
 800643a:	d158      	bne.n	80064ee <_malloc_r+0xf6>
 800643c:	f8d8 4000 	ldr.w	r4, [r8]
 8006440:	4627      	mov	r7, r4
 8006442:	2f00      	cmp	r7, #0
 8006444:	d143      	bne.n	80064ce <_malloc_r+0xd6>
 8006446:	2c00      	cmp	r4, #0
 8006448:	d04b      	beq.n	80064e2 <_malloc_r+0xea>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	4639      	mov	r1, r7
 800644e:	4630      	mov	r0, r6
 8006450:	eb04 0903 	add.w	r9, r4, r3
 8006454:	f000 fb60 	bl	8006b18 <_sbrk_r>
 8006458:	4581      	cmp	r9, r0
 800645a:	d142      	bne.n	80064e2 <_malloc_r+0xea>
 800645c:	6821      	ldr	r1, [r4, #0]
 800645e:	4630      	mov	r0, r6
 8006460:	1a6d      	subs	r5, r5, r1
 8006462:	4629      	mov	r1, r5
 8006464:	f7ff ffa6 	bl	80063b4 <sbrk_aligned>
 8006468:	3001      	adds	r0, #1
 800646a:	d03a      	beq.n	80064e2 <_malloc_r+0xea>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	442b      	add	r3, r5
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	f8d8 3000 	ldr.w	r3, [r8]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	bb62      	cbnz	r2, 80064d4 <_malloc_r+0xdc>
 800647a:	f8c8 7000 	str.w	r7, [r8]
 800647e:	e00f      	b.n	80064a0 <_malloc_r+0xa8>
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	1b52      	subs	r2, r2, r5
 8006484:	d420      	bmi.n	80064c8 <_malloc_r+0xd0>
 8006486:	2a0b      	cmp	r2, #11
 8006488:	d917      	bls.n	80064ba <_malloc_r+0xc2>
 800648a:	1961      	adds	r1, r4, r5
 800648c:	42a3      	cmp	r3, r4
 800648e:	6025      	str	r5, [r4, #0]
 8006490:	bf18      	it	ne
 8006492:	6059      	strne	r1, [r3, #4]
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	bf08      	it	eq
 8006498:	f8c8 1000 	streq.w	r1, [r8]
 800649c:	5162      	str	r2, [r4, r5]
 800649e:	604b      	str	r3, [r1, #4]
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f82f 	bl	8006504 <__malloc_unlock>
 80064a6:	f104 000b 	add.w	r0, r4, #11
 80064aa:	1d23      	adds	r3, r4, #4
 80064ac:	f020 0007 	bic.w	r0, r0, #7
 80064b0:	1ac2      	subs	r2, r0, r3
 80064b2:	bf1c      	itt	ne
 80064b4:	1a1b      	subne	r3, r3, r0
 80064b6:	50a3      	strne	r3, [r4, r2]
 80064b8:	e7af      	b.n	800641a <_malloc_r+0x22>
 80064ba:	6862      	ldr	r2, [r4, #4]
 80064bc:	42a3      	cmp	r3, r4
 80064be:	bf0c      	ite	eq
 80064c0:	f8c8 2000 	streq.w	r2, [r8]
 80064c4:	605a      	strne	r2, [r3, #4]
 80064c6:	e7eb      	b.n	80064a0 <_malloc_r+0xa8>
 80064c8:	4623      	mov	r3, r4
 80064ca:	6864      	ldr	r4, [r4, #4]
 80064cc:	e7ae      	b.n	800642c <_malloc_r+0x34>
 80064ce:	463c      	mov	r4, r7
 80064d0:	687f      	ldr	r7, [r7, #4]
 80064d2:	e7b6      	b.n	8006442 <_malloc_r+0x4a>
 80064d4:	461a      	mov	r2, r3
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	42a3      	cmp	r3, r4
 80064da:	d1fb      	bne.n	80064d4 <_malloc_r+0xdc>
 80064dc:	2300      	movs	r3, #0
 80064de:	6053      	str	r3, [r2, #4]
 80064e0:	e7de      	b.n	80064a0 <_malloc_r+0xa8>
 80064e2:	230c      	movs	r3, #12
 80064e4:	4630      	mov	r0, r6
 80064e6:	6033      	str	r3, [r6, #0]
 80064e8:	f000 f80c 	bl	8006504 <__malloc_unlock>
 80064ec:	e794      	b.n	8006418 <_malloc_r+0x20>
 80064ee:	6005      	str	r5, [r0, #0]
 80064f0:	e7d6      	b.n	80064a0 <_malloc_r+0xa8>
 80064f2:	bf00      	nop
 80064f4:	200003a4 	.word	0x200003a4

080064f8 <__malloc_lock>:
 80064f8:	4801      	ldr	r0, [pc, #4]	@ (8006500 <__malloc_lock+0x8>)
 80064fa:	f7ff bf11 	b.w	8006320 <__retarget_lock_acquire_recursive>
 80064fe:	bf00      	nop
 8006500:	2000039c 	.word	0x2000039c

08006504 <__malloc_unlock>:
 8006504:	4801      	ldr	r0, [pc, #4]	@ (800650c <__malloc_unlock+0x8>)
 8006506:	f7ff bf0c 	b.w	8006322 <__retarget_lock_release_recursive>
 800650a:	bf00      	nop
 800650c:	2000039c 	.word	0x2000039c

08006510 <__ssputs_r>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	461f      	mov	r7, r3
 8006516:	688e      	ldr	r6, [r1, #8]
 8006518:	4682      	mov	sl, r0
 800651a:	42be      	cmp	r6, r7
 800651c:	460c      	mov	r4, r1
 800651e:	4690      	mov	r8, r2
 8006520:	680b      	ldr	r3, [r1, #0]
 8006522:	d82d      	bhi.n	8006580 <__ssputs_r+0x70>
 8006524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006528:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800652c:	d026      	beq.n	800657c <__ssputs_r+0x6c>
 800652e:	6965      	ldr	r5, [r4, #20]
 8006530:	6909      	ldr	r1, [r1, #16]
 8006532:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006536:	eba3 0901 	sub.w	r9, r3, r1
 800653a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800653e:	1c7b      	adds	r3, r7, #1
 8006540:	444b      	add	r3, r9
 8006542:	106d      	asrs	r5, r5, #1
 8006544:	429d      	cmp	r5, r3
 8006546:	bf38      	it	cc
 8006548:	461d      	movcc	r5, r3
 800654a:	0553      	lsls	r3, r2, #21
 800654c:	d527      	bpl.n	800659e <__ssputs_r+0x8e>
 800654e:	4629      	mov	r1, r5
 8006550:	f7ff ff52 	bl	80063f8 <_malloc_r>
 8006554:	4606      	mov	r6, r0
 8006556:	b360      	cbz	r0, 80065b2 <__ssputs_r+0xa2>
 8006558:	464a      	mov	r2, r9
 800655a:	6921      	ldr	r1, [r4, #16]
 800655c:	f000 fafa 	bl	8006b54 <memcpy>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	6126      	str	r6, [r4, #16]
 800656e:	444e      	add	r6, r9
 8006570:	6026      	str	r6, [r4, #0]
 8006572:	463e      	mov	r6, r7
 8006574:	6165      	str	r5, [r4, #20]
 8006576:	eba5 0509 	sub.w	r5, r5, r9
 800657a:	60a5      	str	r5, [r4, #8]
 800657c:	42be      	cmp	r6, r7
 800657e:	d900      	bls.n	8006582 <__ssputs_r+0x72>
 8006580:	463e      	mov	r6, r7
 8006582:	4632      	mov	r2, r6
 8006584:	4641      	mov	r1, r8
 8006586:	6820      	ldr	r0, [r4, #0]
 8006588:	f000 faac 	bl	8006ae4 <memmove>
 800658c:	2000      	movs	r0, #0
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	1b9b      	subs	r3, r3, r6
 8006592:	60a3      	str	r3, [r4, #8]
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	4433      	add	r3, r6
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659e:	462a      	mov	r2, r5
 80065a0:	f000 fae6 	bl	8006b70 <_realloc_r>
 80065a4:	4606      	mov	r6, r0
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d1e0      	bne.n	800656c <__ssputs_r+0x5c>
 80065aa:	4650      	mov	r0, sl
 80065ac:	6921      	ldr	r1, [r4, #16]
 80065ae:	f7ff feb9 	bl	8006324 <_free_r>
 80065b2:	230c      	movs	r3, #12
 80065b4:	f8ca 3000 	str.w	r3, [sl]
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	f04f 30ff 	mov.w	r0, #4294967295
 80065be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	e7e9      	b.n	800659a <__ssputs_r+0x8a>
	...

080065c8 <_svfiprintf_r>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	4698      	mov	r8, r3
 80065ce:	898b      	ldrh	r3, [r1, #12]
 80065d0:	4607      	mov	r7, r0
 80065d2:	061b      	lsls	r3, r3, #24
 80065d4:	460d      	mov	r5, r1
 80065d6:	4614      	mov	r4, r2
 80065d8:	b09d      	sub	sp, #116	@ 0x74
 80065da:	d510      	bpl.n	80065fe <_svfiprintf_r+0x36>
 80065dc:	690b      	ldr	r3, [r1, #16]
 80065de:	b973      	cbnz	r3, 80065fe <_svfiprintf_r+0x36>
 80065e0:	2140      	movs	r1, #64	@ 0x40
 80065e2:	f7ff ff09 	bl	80063f8 <_malloc_r>
 80065e6:	6028      	str	r0, [r5, #0]
 80065e8:	6128      	str	r0, [r5, #16]
 80065ea:	b930      	cbnz	r0, 80065fa <_svfiprintf_r+0x32>
 80065ec:	230c      	movs	r3, #12
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	b01d      	add	sp, #116	@ 0x74
 80065f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fa:	2340      	movs	r3, #64	@ 0x40
 80065fc:	616b      	str	r3, [r5, #20]
 80065fe:	2300      	movs	r3, #0
 8006600:	9309      	str	r3, [sp, #36]	@ 0x24
 8006602:	2320      	movs	r3, #32
 8006604:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006608:	2330      	movs	r3, #48	@ 0x30
 800660a:	f04f 0901 	mov.w	r9, #1
 800660e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006612:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80067ac <_svfiprintf_r+0x1e4>
 8006616:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800661a:	4623      	mov	r3, r4
 800661c:	469a      	mov	sl, r3
 800661e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006622:	b10a      	cbz	r2, 8006628 <_svfiprintf_r+0x60>
 8006624:	2a25      	cmp	r2, #37	@ 0x25
 8006626:	d1f9      	bne.n	800661c <_svfiprintf_r+0x54>
 8006628:	ebba 0b04 	subs.w	fp, sl, r4
 800662c:	d00b      	beq.n	8006646 <_svfiprintf_r+0x7e>
 800662e:	465b      	mov	r3, fp
 8006630:	4622      	mov	r2, r4
 8006632:	4629      	mov	r1, r5
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ff6b 	bl	8006510 <__ssputs_r>
 800663a:	3001      	adds	r0, #1
 800663c:	f000 80a7 	beq.w	800678e <_svfiprintf_r+0x1c6>
 8006640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006642:	445a      	add	r2, fp
 8006644:	9209      	str	r2, [sp, #36]	@ 0x24
 8006646:	f89a 3000 	ldrb.w	r3, [sl]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 809f 	beq.w	800678e <_svfiprintf_r+0x1c6>
 8006650:	2300      	movs	r3, #0
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800665a:	f10a 0a01 	add.w	sl, sl, #1
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	9307      	str	r3, [sp, #28]
 8006662:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006666:	931a      	str	r3, [sp, #104]	@ 0x68
 8006668:	4654      	mov	r4, sl
 800666a:	2205      	movs	r2, #5
 800666c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006670:	484e      	ldr	r0, [pc, #312]	@ (80067ac <_svfiprintf_r+0x1e4>)
 8006672:	f000 fa61 	bl	8006b38 <memchr>
 8006676:	9a04      	ldr	r2, [sp, #16]
 8006678:	b9d8      	cbnz	r0, 80066b2 <_svfiprintf_r+0xea>
 800667a:	06d0      	lsls	r0, r2, #27
 800667c:	bf44      	itt	mi
 800667e:	2320      	movmi	r3, #32
 8006680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006684:	0711      	lsls	r1, r2, #28
 8006686:	bf44      	itt	mi
 8006688:	232b      	movmi	r3, #43	@ 0x2b
 800668a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800668e:	f89a 3000 	ldrb.w	r3, [sl]
 8006692:	2b2a      	cmp	r3, #42	@ 0x2a
 8006694:	d015      	beq.n	80066c2 <_svfiprintf_r+0xfa>
 8006696:	4654      	mov	r4, sl
 8006698:	2000      	movs	r0, #0
 800669a:	f04f 0c0a 	mov.w	ip, #10
 800669e:	9a07      	ldr	r2, [sp, #28]
 80066a0:	4621      	mov	r1, r4
 80066a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a6:	3b30      	subs	r3, #48	@ 0x30
 80066a8:	2b09      	cmp	r3, #9
 80066aa:	d94b      	bls.n	8006744 <_svfiprintf_r+0x17c>
 80066ac:	b1b0      	cbz	r0, 80066dc <_svfiprintf_r+0x114>
 80066ae:	9207      	str	r2, [sp, #28]
 80066b0:	e014      	b.n	80066dc <_svfiprintf_r+0x114>
 80066b2:	eba0 0308 	sub.w	r3, r0, r8
 80066b6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	46a2      	mov	sl, r4
 80066be:	9304      	str	r3, [sp, #16]
 80066c0:	e7d2      	b.n	8006668 <_svfiprintf_r+0xa0>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	1d19      	adds	r1, r3, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	9103      	str	r1, [sp, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfbb      	ittet	lt
 80066ce:	425b      	neglt	r3, r3
 80066d0:	f042 0202 	orrlt.w	r2, r2, #2
 80066d4:	9307      	strge	r3, [sp, #28]
 80066d6:	9307      	strlt	r3, [sp, #28]
 80066d8:	bfb8      	it	lt
 80066da:	9204      	strlt	r2, [sp, #16]
 80066dc:	7823      	ldrb	r3, [r4, #0]
 80066de:	2b2e      	cmp	r3, #46	@ 0x2e
 80066e0:	d10a      	bne.n	80066f8 <_svfiprintf_r+0x130>
 80066e2:	7863      	ldrb	r3, [r4, #1]
 80066e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066e6:	d132      	bne.n	800674e <_svfiprintf_r+0x186>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	3402      	adds	r4, #2
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	9203      	str	r2, [sp, #12]
 80066f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066f6:	9305      	str	r3, [sp, #20]
 80066f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80067b0 <_svfiprintf_r+0x1e8>
 80066fc:	2203      	movs	r2, #3
 80066fe:	4650      	mov	r0, sl
 8006700:	7821      	ldrb	r1, [r4, #0]
 8006702:	f000 fa19 	bl	8006b38 <memchr>
 8006706:	b138      	cbz	r0, 8006718 <_svfiprintf_r+0x150>
 8006708:	2240      	movs	r2, #64	@ 0x40
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	eba0 000a 	sub.w	r0, r0, sl
 8006710:	4082      	lsls	r2, r0
 8006712:	4313      	orrs	r3, r2
 8006714:	3401      	adds	r4, #1
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671c:	2206      	movs	r2, #6
 800671e:	4825      	ldr	r0, [pc, #148]	@ (80067b4 <_svfiprintf_r+0x1ec>)
 8006720:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006724:	f000 fa08 	bl	8006b38 <memchr>
 8006728:	2800      	cmp	r0, #0
 800672a:	d036      	beq.n	800679a <_svfiprintf_r+0x1d2>
 800672c:	4b22      	ldr	r3, [pc, #136]	@ (80067b8 <_svfiprintf_r+0x1f0>)
 800672e:	bb1b      	cbnz	r3, 8006778 <_svfiprintf_r+0x1b0>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	3307      	adds	r3, #7
 8006734:	f023 0307 	bic.w	r3, r3, #7
 8006738:	3308      	adds	r3, #8
 800673a:	9303      	str	r3, [sp, #12]
 800673c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673e:	4433      	add	r3, r6
 8006740:	9309      	str	r3, [sp, #36]	@ 0x24
 8006742:	e76a      	b.n	800661a <_svfiprintf_r+0x52>
 8006744:	460c      	mov	r4, r1
 8006746:	2001      	movs	r0, #1
 8006748:	fb0c 3202 	mla	r2, ip, r2, r3
 800674c:	e7a8      	b.n	80066a0 <_svfiprintf_r+0xd8>
 800674e:	2300      	movs	r3, #0
 8006750:	f04f 0c0a 	mov.w	ip, #10
 8006754:	4619      	mov	r1, r3
 8006756:	3401      	adds	r4, #1
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	4620      	mov	r0, r4
 800675c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006760:	3a30      	subs	r2, #48	@ 0x30
 8006762:	2a09      	cmp	r2, #9
 8006764:	d903      	bls.n	800676e <_svfiprintf_r+0x1a6>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0c6      	beq.n	80066f8 <_svfiprintf_r+0x130>
 800676a:	9105      	str	r1, [sp, #20]
 800676c:	e7c4      	b.n	80066f8 <_svfiprintf_r+0x130>
 800676e:	4604      	mov	r4, r0
 8006770:	2301      	movs	r3, #1
 8006772:	fb0c 2101 	mla	r1, ip, r1, r2
 8006776:	e7f0      	b.n	800675a <_svfiprintf_r+0x192>
 8006778:	ab03      	add	r3, sp, #12
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	462a      	mov	r2, r5
 800677e:	4638      	mov	r0, r7
 8006780:	4b0e      	ldr	r3, [pc, #56]	@ (80067bc <_svfiprintf_r+0x1f4>)
 8006782:	a904      	add	r1, sp, #16
 8006784:	f3af 8000 	nop.w
 8006788:	1c42      	adds	r2, r0, #1
 800678a:	4606      	mov	r6, r0
 800678c:	d1d6      	bne.n	800673c <_svfiprintf_r+0x174>
 800678e:	89ab      	ldrh	r3, [r5, #12]
 8006790:	065b      	lsls	r3, r3, #25
 8006792:	f53f af2d 	bmi.w	80065f0 <_svfiprintf_r+0x28>
 8006796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006798:	e72c      	b.n	80065f4 <_svfiprintf_r+0x2c>
 800679a:	ab03      	add	r3, sp, #12
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	462a      	mov	r2, r5
 80067a0:	4638      	mov	r0, r7
 80067a2:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <_svfiprintf_r+0x1f4>)
 80067a4:	a904      	add	r1, sp, #16
 80067a6:	f000 f87d 	bl	80068a4 <_printf_i>
 80067aa:	e7ed      	b.n	8006788 <_svfiprintf_r+0x1c0>
 80067ac:	08007b32 	.word	0x08007b32
 80067b0:	08007b38 	.word	0x08007b38
 80067b4:	08007b3c 	.word	0x08007b3c
 80067b8:	00000000 	.word	0x00000000
 80067bc:	08006511 	.word	0x08006511

080067c0 <_printf_common>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	4616      	mov	r6, r2
 80067c6:	4698      	mov	r8, r3
 80067c8:	688a      	ldr	r2, [r1, #8]
 80067ca:	690b      	ldr	r3, [r1, #16]
 80067cc:	4607      	mov	r7, r0
 80067ce:	4293      	cmp	r3, r2
 80067d0:	bfb8      	it	lt
 80067d2:	4613      	movlt	r3, r2
 80067d4:	6033      	str	r3, [r6, #0]
 80067d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067da:	460c      	mov	r4, r1
 80067dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067e0:	b10a      	cbz	r2, 80067e6 <_printf_common+0x26>
 80067e2:	3301      	adds	r3, #1
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	0699      	lsls	r1, r3, #26
 80067ea:	bf42      	ittt	mi
 80067ec:	6833      	ldrmi	r3, [r6, #0]
 80067ee:	3302      	addmi	r3, #2
 80067f0:	6033      	strmi	r3, [r6, #0]
 80067f2:	6825      	ldr	r5, [r4, #0]
 80067f4:	f015 0506 	ands.w	r5, r5, #6
 80067f8:	d106      	bne.n	8006808 <_printf_common+0x48>
 80067fa:	f104 0a19 	add.w	sl, r4, #25
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	6832      	ldr	r2, [r6, #0]
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	42ab      	cmp	r3, r5
 8006806:	dc2b      	bgt.n	8006860 <_printf_common+0xa0>
 8006808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	3b00      	subs	r3, #0
 8006810:	bf18      	it	ne
 8006812:	2301      	movne	r3, #1
 8006814:	0692      	lsls	r2, r2, #26
 8006816:	d430      	bmi.n	800687a <_printf_common+0xba>
 8006818:	4641      	mov	r1, r8
 800681a:	4638      	mov	r0, r7
 800681c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006820:	47c8      	blx	r9
 8006822:	3001      	adds	r0, #1
 8006824:	d023      	beq.n	800686e <_printf_common+0xae>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	6922      	ldr	r2, [r4, #16]
 800682a:	f003 0306 	and.w	r3, r3, #6
 800682e:	2b04      	cmp	r3, #4
 8006830:	bf14      	ite	ne
 8006832:	2500      	movne	r5, #0
 8006834:	6833      	ldreq	r3, [r6, #0]
 8006836:	f04f 0600 	mov.w	r6, #0
 800683a:	bf08      	it	eq
 800683c:	68e5      	ldreq	r5, [r4, #12]
 800683e:	f104 041a 	add.w	r4, r4, #26
 8006842:	bf08      	it	eq
 8006844:	1aed      	subeq	r5, r5, r3
 8006846:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800684a:	bf08      	it	eq
 800684c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006850:	4293      	cmp	r3, r2
 8006852:	bfc4      	itt	gt
 8006854:	1a9b      	subgt	r3, r3, r2
 8006856:	18ed      	addgt	r5, r5, r3
 8006858:	42b5      	cmp	r5, r6
 800685a:	d11a      	bne.n	8006892 <_printf_common+0xd2>
 800685c:	2000      	movs	r0, #0
 800685e:	e008      	b.n	8006872 <_printf_common+0xb2>
 8006860:	2301      	movs	r3, #1
 8006862:	4652      	mov	r2, sl
 8006864:	4641      	mov	r1, r8
 8006866:	4638      	mov	r0, r7
 8006868:	47c8      	blx	r9
 800686a:	3001      	adds	r0, #1
 800686c:	d103      	bne.n	8006876 <_printf_common+0xb6>
 800686e:	f04f 30ff 	mov.w	r0, #4294967295
 8006872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006876:	3501      	adds	r5, #1
 8006878:	e7c1      	b.n	80067fe <_printf_common+0x3e>
 800687a:	2030      	movs	r0, #48	@ 0x30
 800687c:	18e1      	adds	r1, r4, r3
 800687e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006888:	4422      	add	r2, r4
 800688a:	3302      	adds	r3, #2
 800688c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006890:	e7c2      	b.n	8006818 <_printf_common+0x58>
 8006892:	2301      	movs	r3, #1
 8006894:	4622      	mov	r2, r4
 8006896:	4641      	mov	r1, r8
 8006898:	4638      	mov	r0, r7
 800689a:	47c8      	blx	r9
 800689c:	3001      	adds	r0, #1
 800689e:	d0e6      	beq.n	800686e <_printf_common+0xae>
 80068a0:	3601      	adds	r6, #1
 80068a2:	e7d9      	b.n	8006858 <_printf_common+0x98>

080068a4 <_printf_i>:
 80068a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	7e0f      	ldrb	r7, [r1, #24]
 80068aa:	4691      	mov	r9, r2
 80068ac:	2f78      	cmp	r7, #120	@ 0x78
 80068ae:	4680      	mov	r8, r0
 80068b0:	460c      	mov	r4, r1
 80068b2:	469a      	mov	sl, r3
 80068b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068ba:	d807      	bhi.n	80068cc <_printf_i+0x28>
 80068bc:	2f62      	cmp	r7, #98	@ 0x62
 80068be:	d80a      	bhi.n	80068d6 <_printf_i+0x32>
 80068c0:	2f00      	cmp	r7, #0
 80068c2:	f000 80d3 	beq.w	8006a6c <_printf_i+0x1c8>
 80068c6:	2f58      	cmp	r7, #88	@ 0x58
 80068c8:	f000 80ba 	beq.w	8006a40 <_printf_i+0x19c>
 80068cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068d4:	e03a      	b.n	800694c <_printf_i+0xa8>
 80068d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068da:	2b15      	cmp	r3, #21
 80068dc:	d8f6      	bhi.n	80068cc <_printf_i+0x28>
 80068de:	a101      	add	r1, pc, #4	@ (adr r1, 80068e4 <_printf_i+0x40>)
 80068e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068e4:	0800693d 	.word	0x0800693d
 80068e8:	08006951 	.word	0x08006951
 80068ec:	080068cd 	.word	0x080068cd
 80068f0:	080068cd 	.word	0x080068cd
 80068f4:	080068cd 	.word	0x080068cd
 80068f8:	080068cd 	.word	0x080068cd
 80068fc:	08006951 	.word	0x08006951
 8006900:	080068cd 	.word	0x080068cd
 8006904:	080068cd 	.word	0x080068cd
 8006908:	080068cd 	.word	0x080068cd
 800690c:	080068cd 	.word	0x080068cd
 8006910:	08006a53 	.word	0x08006a53
 8006914:	0800697b 	.word	0x0800697b
 8006918:	08006a0d 	.word	0x08006a0d
 800691c:	080068cd 	.word	0x080068cd
 8006920:	080068cd 	.word	0x080068cd
 8006924:	08006a75 	.word	0x08006a75
 8006928:	080068cd 	.word	0x080068cd
 800692c:	0800697b 	.word	0x0800697b
 8006930:	080068cd 	.word	0x080068cd
 8006934:	080068cd 	.word	0x080068cd
 8006938:	08006a15 	.word	0x08006a15
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	1d1a      	adds	r2, r3, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6032      	str	r2, [r6, #0]
 8006944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800694c:	2301      	movs	r3, #1
 800694e:	e09e      	b.n	8006a8e <_printf_i+0x1ea>
 8006950:	6833      	ldr	r3, [r6, #0]
 8006952:	6820      	ldr	r0, [r4, #0]
 8006954:	1d19      	adds	r1, r3, #4
 8006956:	6031      	str	r1, [r6, #0]
 8006958:	0606      	lsls	r6, r0, #24
 800695a:	d501      	bpl.n	8006960 <_printf_i+0xbc>
 800695c:	681d      	ldr	r5, [r3, #0]
 800695e:	e003      	b.n	8006968 <_printf_i+0xc4>
 8006960:	0645      	lsls	r5, r0, #25
 8006962:	d5fb      	bpl.n	800695c <_printf_i+0xb8>
 8006964:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006968:	2d00      	cmp	r5, #0
 800696a:	da03      	bge.n	8006974 <_printf_i+0xd0>
 800696c:	232d      	movs	r3, #45	@ 0x2d
 800696e:	426d      	negs	r5, r5
 8006970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006974:	230a      	movs	r3, #10
 8006976:	4859      	ldr	r0, [pc, #356]	@ (8006adc <_printf_i+0x238>)
 8006978:	e011      	b.n	800699e <_printf_i+0xfa>
 800697a:	6821      	ldr	r1, [r4, #0]
 800697c:	6833      	ldr	r3, [r6, #0]
 800697e:	0608      	lsls	r0, r1, #24
 8006980:	f853 5b04 	ldr.w	r5, [r3], #4
 8006984:	d402      	bmi.n	800698c <_printf_i+0xe8>
 8006986:	0649      	lsls	r1, r1, #25
 8006988:	bf48      	it	mi
 800698a:	b2ad      	uxthmi	r5, r5
 800698c:	2f6f      	cmp	r7, #111	@ 0x6f
 800698e:	6033      	str	r3, [r6, #0]
 8006990:	bf14      	ite	ne
 8006992:	230a      	movne	r3, #10
 8006994:	2308      	moveq	r3, #8
 8006996:	4851      	ldr	r0, [pc, #324]	@ (8006adc <_printf_i+0x238>)
 8006998:	2100      	movs	r1, #0
 800699a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800699e:	6866      	ldr	r6, [r4, #4]
 80069a0:	2e00      	cmp	r6, #0
 80069a2:	bfa8      	it	ge
 80069a4:	6821      	ldrge	r1, [r4, #0]
 80069a6:	60a6      	str	r6, [r4, #8]
 80069a8:	bfa4      	itt	ge
 80069aa:	f021 0104 	bicge.w	r1, r1, #4
 80069ae:	6021      	strge	r1, [r4, #0]
 80069b0:	b90d      	cbnz	r5, 80069b6 <_printf_i+0x112>
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	d04b      	beq.n	8006a4e <_printf_i+0x1aa>
 80069b6:	4616      	mov	r6, r2
 80069b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80069bc:	fb03 5711 	mls	r7, r3, r1, r5
 80069c0:	5dc7      	ldrb	r7, [r0, r7]
 80069c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069c6:	462f      	mov	r7, r5
 80069c8:	42bb      	cmp	r3, r7
 80069ca:	460d      	mov	r5, r1
 80069cc:	d9f4      	bls.n	80069b8 <_printf_i+0x114>
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d10b      	bne.n	80069ea <_printf_i+0x146>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	07df      	lsls	r7, r3, #31
 80069d6:	d508      	bpl.n	80069ea <_printf_i+0x146>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	6861      	ldr	r1, [r4, #4]
 80069dc:	4299      	cmp	r1, r3
 80069de:	bfde      	ittt	le
 80069e0:	2330      	movle	r3, #48	@ 0x30
 80069e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069ea:	1b92      	subs	r2, r2, r6
 80069ec:	6122      	str	r2, [r4, #16]
 80069ee:	464b      	mov	r3, r9
 80069f0:	4621      	mov	r1, r4
 80069f2:	4640      	mov	r0, r8
 80069f4:	f8cd a000 	str.w	sl, [sp]
 80069f8:	aa03      	add	r2, sp, #12
 80069fa:	f7ff fee1 	bl	80067c0 <_printf_common>
 80069fe:	3001      	adds	r0, #1
 8006a00:	d14a      	bne.n	8006a98 <_printf_i+0x1f4>
 8006a02:	f04f 30ff 	mov.w	r0, #4294967295
 8006a06:	b004      	add	sp, #16
 8006a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	f043 0320 	orr.w	r3, r3, #32
 8006a12:	6023      	str	r3, [r4, #0]
 8006a14:	2778      	movs	r7, #120	@ 0x78
 8006a16:	4832      	ldr	r0, [pc, #200]	@ (8006ae0 <_printf_i+0x23c>)
 8006a18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	6831      	ldr	r1, [r6, #0]
 8006a20:	061f      	lsls	r7, r3, #24
 8006a22:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a26:	d402      	bmi.n	8006a2e <_printf_i+0x18a>
 8006a28:	065f      	lsls	r7, r3, #25
 8006a2a:	bf48      	it	mi
 8006a2c:	b2ad      	uxthmi	r5, r5
 8006a2e:	6031      	str	r1, [r6, #0]
 8006a30:	07d9      	lsls	r1, r3, #31
 8006a32:	bf44      	itt	mi
 8006a34:	f043 0320 	orrmi.w	r3, r3, #32
 8006a38:	6023      	strmi	r3, [r4, #0]
 8006a3a:	b11d      	cbz	r5, 8006a44 <_printf_i+0x1a0>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	e7ab      	b.n	8006998 <_printf_i+0xf4>
 8006a40:	4826      	ldr	r0, [pc, #152]	@ (8006adc <_printf_i+0x238>)
 8006a42:	e7e9      	b.n	8006a18 <_printf_i+0x174>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	f023 0320 	bic.w	r3, r3, #32
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	e7f6      	b.n	8006a3c <_printf_i+0x198>
 8006a4e:	4616      	mov	r6, r2
 8006a50:	e7bd      	b.n	80069ce <_printf_i+0x12a>
 8006a52:	6833      	ldr	r3, [r6, #0]
 8006a54:	6825      	ldr	r5, [r4, #0]
 8006a56:	1d18      	adds	r0, r3, #4
 8006a58:	6961      	ldr	r1, [r4, #20]
 8006a5a:	6030      	str	r0, [r6, #0]
 8006a5c:	062e      	lsls	r6, r5, #24
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	d501      	bpl.n	8006a66 <_printf_i+0x1c2>
 8006a62:	6019      	str	r1, [r3, #0]
 8006a64:	e002      	b.n	8006a6c <_printf_i+0x1c8>
 8006a66:	0668      	lsls	r0, r5, #25
 8006a68:	d5fb      	bpl.n	8006a62 <_printf_i+0x1be>
 8006a6a:	8019      	strh	r1, [r3, #0]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4616      	mov	r6, r2
 8006a70:	6123      	str	r3, [r4, #16]
 8006a72:	e7bc      	b.n	80069ee <_printf_i+0x14a>
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	2100      	movs	r1, #0
 8006a78:	1d1a      	adds	r2, r3, #4
 8006a7a:	6032      	str	r2, [r6, #0]
 8006a7c:	681e      	ldr	r6, [r3, #0]
 8006a7e:	6862      	ldr	r2, [r4, #4]
 8006a80:	4630      	mov	r0, r6
 8006a82:	f000 f859 	bl	8006b38 <memchr>
 8006a86:	b108      	cbz	r0, 8006a8c <_printf_i+0x1e8>
 8006a88:	1b80      	subs	r0, r0, r6
 8006a8a:	6060      	str	r0, [r4, #4]
 8006a8c:	6863      	ldr	r3, [r4, #4]
 8006a8e:	6123      	str	r3, [r4, #16]
 8006a90:	2300      	movs	r3, #0
 8006a92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a96:	e7aa      	b.n	80069ee <_printf_i+0x14a>
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	47d0      	blx	sl
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d0ad      	beq.n	8006a02 <_printf_i+0x15e>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	079b      	lsls	r3, r3, #30
 8006aaa:	d413      	bmi.n	8006ad4 <_printf_i+0x230>
 8006aac:	68e0      	ldr	r0, [r4, #12]
 8006aae:	9b03      	ldr	r3, [sp, #12]
 8006ab0:	4298      	cmp	r0, r3
 8006ab2:	bfb8      	it	lt
 8006ab4:	4618      	movlt	r0, r3
 8006ab6:	e7a6      	b.n	8006a06 <_printf_i+0x162>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	4632      	mov	r2, r6
 8006abc:	4649      	mov	r1, r9
 8006abe:	4640      	mov	r0, r8
 8006ac0:	47d0      	blx	sl
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d09d      	beq.n	8006a02 <_printf_i+0x15e>
 8006ac6:	3501      	adds	r5, #1
 8006ac8:	68e3      	ldr	r3, [r4, #12]
 8006aca:	9903      	ldr	r1, [sp, #12]
 8006acc:	1a5b      	subs	r3, r3, r1
 8006ace:	42ab      	cmp	r3, r5
 8006ad0:	dcf2      	bgt.n	8006ab8 <_printf_i+0x214>
 8006ad2:	e7eb      	b.n	8006aac <_printf_i+0x208>
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	f104 0619 	add.w	r6, r4, #25
 8006ada:	e7f5      	b.n	8006ac8 <_printf_i+0x224>
 8006adc:	08007b43 	.word	0x08007b43
 8006ae0:	08007b54 	.word	0x08007b54

08006ae4 <memmove>:
 8006ae4:	4288      	cmp	r0, r1
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	eb01 0402 	add.w	r4, r1, r2
 8006aec:	d902      	bls.n	8006af4 <memmove+0x10>
 8006aee:	4284      	cmp	r4, r0
 8006af0:	4623      	mov	r3, r4
 8006af2:	d807      	bhi.n	8006b04 <memmove+0x20>
 8006af4:	1e43      	subs	r3, r0, #1
 8006af6:	42a1      	cmp	r1, r4
 8006af8:	d008      	beq.n	8006b0c <memmove+0x28>
 8006afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b02:	e7f8      	b.n	8006af6 <memmove+0x12>
 8006b04:	4601      	mov	r1, r0
 8006b06:	4402      	add	r2, r0
 8006b08:	428a      	cmp	r2, r1
 8006b0a:	d100      	bne.n	8006b0e <memmove+0x2a>
 8006b0c:	bd10      	pop	{r4, pc}
 8006b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b16:	e7f7      	b.n	8006b08 <memmove+0x24>

08006b18 <_sbrk_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4d05      	ldr	r5, [pc, #20]	@ (8006b34 <_sbrk_r+0x1c>)
 8006b1e:	4604      	mov	r4, r0
 8006b20:	4608      	mov	r0, r1
 8006b22:	602b      	str	r3, [r5, #0]
 8006b24:	f7fb f9a2 	bl	8001e6c <_sbrk>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_sbrk_r+0x1a>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_sbrk_r+0x1a>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20000398 	.word	0x20000398

08006b38 <memchr>:
 8006b38:	4603      	mov	r3, r0
 8006b3a:	b510      	push	{r4, lr}
 8006b3c:	b2c9      	uxtb	r1, r1
 8006b3e:	4402      	add	r2, r0
 8006b40:	4293      	cmp	r3, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	d101      	bne.n	8006b4a <memchr+0x12>
 8006b46:	2000      	movs	r0, #0
 8006b48:	e003      	b.n	8006b52 <memchr+0x1a>
 8006b4a:	7804      	ldrb	r4, [r0, #0]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	428c      	cmp	r4, r1
 8006b50:	d1f6      	bne.n	8006b40 <memchr+0x8>
 8006b52:	bd10      	pop	{r4, pc}

08006b54 <memcpy>:
 8006b54:	440a      	add	r2, r1
 8006b56:	4291      	cmp	r1, r2
 8006b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b5c:	d100      	bne.n	8006b60 <memcpy+0xc>
 8006b5e:	4770      	bx	lr
 8006b60:	b510      	push	{r4, lr}
 8006b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b66:	4291      	cmp	r1, r2
 8006b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b6c:	d1f9      	bne.n	8006b62 <memcpy+0xe>
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <_realloc_r>:
 8006b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	4680      	mov	r8, r0
 8006b76:	4615      	mov	r5, r2
 8006b78:	460c      	mov	r4, r1
 8006b7a:	b921      	cbnz	r1, 8006b86 <_realloc_r+0x16>
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b82:	f7ff bc39 	b.w	80063f8 <_malloc_r>
 8006b86:	b92a      	cbnz	r2, 8006b94 <_realloc_r+0x24>
 8006b88:	f7ff fbcc 	bl	8006324 <_free_r>
 8006b8c:	2400      	movs	r4, #0
 8006b8e:	4620      	mov	r0, r4
 8006b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b94:	f000 f81a 	bl	8006bcc <_malloc_usable_size_r>
 8006b98:	4285      	cmp	r5, r0
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	d802      	bhi.n	8006ba4 <_realloc_r+0x34>
 8006b9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ba2:	d8f4      	bhi.n	8006b8e <_realloc_r+0x1e>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f7ff fc26 	bl	80063f8 <_malloc_r>
 8006bac:	4607      	mov	r7, r0
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d0ec      	beq.n	8006b8c <_realloc_r+0x1c>
 8006bb2:	42b5      	cmp	r5, r6
 8006bb4:	462a      	mov	r2, r5
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	bf28      	it	cs
 8006bba:	4632      	movcs	r2, r6
 8006bbc:	f7ff ffca 	bl	8006b54 <memcpy>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff fbae 	bl	8006324 <_free_r>
 8006bc8:	463c      	mov	r4, r7
 8006bca:	e7e0      	b.n	8006b8e <_realloc_r+0x1e>

08006bcc <_malloc_usable_size_r>:
 8006bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd0:	1f18      	subs	r0, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bfbc      	itt	lt
 8006bd6:	580b      	ldrlt	r3, [r1, r0]
 8006bd8:	18c0      	addlt	r0, r0, r3
 8006bda:	4770      	bx	lr

08006bdc <pow>:
 8006bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be0:	4614      	mov	r4, r2
 8006be2:	461d      	mov	r5, r3
 8006be4:	4680      	mov	r8, r0
 8006be6:	4689      	mov	r9, r1
 8006be8:	f000 f8ae 	bl	8006d48 <__ieee754_pow>
 8006bec:	4622      	mov	r2, r4
 8006bee:	4606      	mov	r6, r0
 8006bf0:	460f      	mov	r7, r1
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7f9 ff00 	bl	80009fc <__aeabi_dcmpun>
 8006bfc:	bbc8      	cbnz	r0, 8006c72 <pow+0x96>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2300      	movs	r3, #0
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	f7f9 fec7 	bl	8000998 <__aeabi_dcmpeq>
 8006c0a:	b1b8      	cbz	r0, 8006c3c <pow+0x60>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4620      	mov	r0, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	f7f9 fec0 	bl	8000998 <__aeabi_dcmpeq>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d141      	bne.n	8006ca0 <pow+0xc4>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f000 f844 	bl	8006cac <finite>
 8006c24:	b328      	cbz	r0, 8006c72 <pow+0x96>
 8006c26:	2200      	movs	r2, #0
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 febd 	bl	80009ac <__aeabi_dcmplt>
 8006c32:	b1f0      	cbz	r0, 8006c72 <pow+0x96>
 8006c34:	f7ff fb4a 	bl	80062cc <__errno>
 8006c38:	2322      	movs	r3, #34	@ 0x22
 8006c3a:	e019      	b.n	8006c70 <pow+0x94>
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	4639      	mov	r1, r7
 8006c40:	f000 f834 	bl	8006cac <finite>
 8006c44:	b9c8      	cbnz	r0, 8006c7a <pow+0x9e>
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f000 f82f 	bl	8006cac <finite>
 8006c4e:	b1a0      	cbz	r0, 8006c7a <pow+0x9e>
 8006c50:	4620      	mov	r0, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	f000 f82a 	bl	8006cac <finite>
 8006c58:	b178      	cbz	r0, 8006c7a <pow+0x9e>
 8006c5a:	4632      	mov	r2, r6
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	4630      	mov	r0, r6
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7f9 fecb 	bl	80009fc <__aeabi_dcmpun>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d0e4      	beq.n	8006c34 <pow+0x58>
 8006c6a:	f7ff fb2f 	bl	80062cc <__errno>
 8006c6e:	2321      	movs	r3, #33	@ 0x21
 8006c70:	6003      	str	r3, [r0, #0]
 8006c72:	4630      	mov	r0, r6
 8006c74:	4639      	mov	r1, r7
 8006c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 fe89 	bl	8000998 <__aeabi_dcmpeq>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d0f3      	beq.n	8006c72 <pow+0x96>
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	f000 f80d 	bl	8006cac <finite>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d0ed      	beq.n	8006c72 <pow+0x96>
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f000 f807 	bl	8006cac <finite>
 8006c9e:	e7c8      	b.n	8006c32 <pow+0x56>
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	4f01      	ldr	r7, [pc, #4]	@ (8006ca8 <pow+0xcc>)
 8006ca4:	e7e5      	b.n	8006c72 <pow+0x96>
 8006ca6:	bf00      	nop
 8006ca8:	3ff00000 	.word	0x3ff00000

08006cac <finite>:
 8006cac:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006cb0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006cb4:	0fc0      	lsrs	r0, r0, #31
 8006cb6:	4770      	bx	lr

08006cb8 <round>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006cbe:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8006cc2:	2a13      	cmp	r2, #19
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	460d      	mov	r5, r1
 8006cc8:	460b      	mov	r3, r1
 8006cca:	dc1a      	bgt.n	8006d02 <round+0x4a>
 8006ccc:	2a00      	cmp	r2, #0
 8006cce:	da0b      	bge.n	8006ce8 <round+0x30>
 8006cd0:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8006cd4:	3201      	adds	r2, #1
 8006cd6:	bf04      	itt	eq
 8006cd8:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8006cdc:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	461d      	mov	r5, r3
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	e016      	b.n	8006d16 <round+0x5e>
 8006ce8:	4815      	ldr	r0, [pc, #84]	@ (8006d40 <round+0x88>)
 8006cea:	4110      	asrs	r0, r2
 8006cec:	4001      	ands	r1, r0
 8006cee:	4321      	orrs	r1, r4
 8006cf0:	d011      	beq.n	8006d16 <round+0x5e>
 8006cf2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8006cf6:	fa41 f202 	asr.w	r2, r1, r2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	ea23 0300 	bic.w	r3, r3, r0
 8006d00:	e7ee      	b.n	8006ce0 <round+0x28>
 8006d02:	2a33      	cmp	r2, #51	@ 0x33
 8006d04:	dd0a      	ble.n	8006d1c <round+0x64>
 8006d06:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006d0a:	d104      	bne.n	8006d16 <round+0x5e>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	f7f9 fa25 	bl	800015c <__adddf3>
 8006d12:	4604      	mov	r4, r0
 8006d14:	460d      	mov	r5, r1
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8006d24:	40f8      	lsrs	r0, r7
 8006d26:	4220      	tst	r0, r4
 8006d28:	d0f5      	beq.n	8006d16 <round+0x5e>
 8006d2a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8006d2e:	2201      	movs	r2, #1
 8006d30:	408a      	lsls	r2, r1
 8006d32:	1912      	adds	r2, r2, r4
 8006d34:	bf28      	it	cs
 8006d36:	3301      	addcs	r3, #1
 8006d38:	ea22 0200 	bic.w	r2, r2, r0
 8006d3c:	e7d1      	b.n	8006ce2 <round+0x2a>
 8006d3e:	bf00      	nop
 8006d40:	000fffff 	.word	0x000fffff
 8006d44:	00000000 	.word	0x00000000

08006d48 <__ieee754_pow>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	b091      	sub	sp, #68	@ 0x44
 8006d4e:	e9cd 2300 	strd	r2, r3, [sp]
 8006d52:	468b      	mov	fp, r1
 8006d54:	e9dd 1800 	ldrd	r1, r8, [sp]
 8006d58:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8006d5c:	4682      	mov	sl, r0
 8006d5e:	ea57 0001 	orrs.w	r0, r7, r1
 8006d62:	d112      	bne.n	8006d8a <__ieee754_pow+0x42>
 8006d64:	4653      	mov	r3, sl
 8006d66:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8006d6a:	18db      	adds	r3, r3, r3
 8006d6c:	4152      	adcs	r2, r2
 8006d6e:	4298      	cmp	r0, r3
 8006d70:	4b91      	ldr	r3, [pc, #580]	@ (8006fb8 <__ieee754_pow+0x270>)
 8006d72:	4193      	sbcs	r3, r2
 8006d74:	f080 84ce 	bcs.w	8007714 <__ieee754_pow+0x9cc>
 8006d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d7c:	4650      	mov	r0, sl
 8006d7e:	4659      	mov	r1, fp
 8006d80:	f7f9 f9ec 	bl	800015c <__adddf3>
 8006d84:	b011      	add	sp, #68	@ 0x44
 8006d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8a:	4b8c      	ldr	r3, [pc, #560]	@ (8006fbc <__ieee754_pow+0x274>)
 8006d8c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8006d90:	429e      	cmp	r6, r3
 8006d92:	465d      	mov	r5, fp
 8006d94:	46d1      	mov	r9, sl
 8006d96:	d807      	bhi.n	8006da8 <__ieee754_pow+0x60>
 8006d98:	d102      	bne.n	8006da0 <__ieee754_pow+0x58>
 8006d9a:	f1ba 0f00 	cmp.w	sl, #0
 8006d9e:	d1eb      	bne.n	8006d78 <__ieee754_pow+0x30>
 8006da0:	429f      	cmp	r7, r3
 8006da2:	d801      	bhi.n	8006da8 <__ieee754_pow+0x60>
 8006da4:	d10f      	bne.n	8006dc6 <__ieee754_pow+0x7e>
 8006da6:	b171      	cbz	r1, 8006dc6 <__ieee754_pow+0x7e>
 8006da8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006dac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006db0:	ea55 0509 	orrs.w	r5, r5, r9
 8006db4:	d1e0      	bne.n	8006d78 <__ieee754_pow+0x30>
 8006db6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006dba:	18db      	adds	r3, r3, r3
 8006dbc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006dc0:	4152      	adcs	r2, r2
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	e7d4      	b.n	8006d70 <__ieee754_pow+0x28>
 8006dc6:	2d00      	cmp	r5, #0
 8006dc8:	4633      	mov	r3, r6
 8006dca:	da39      	bge.n	8006e40 <__ieee754_pow+0xf8>
 8006dcc:	4a7c      	ldr	r2, [pc, #496]	@ (8006fc0 <__ieee754_pow+0x278>)
 8006dce:	4297      	cmp	r7, r2
 8006dd0:	d84e      	bhi.n	8006e70 <__ieee754_pow+0x128>
 8006dd2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006dd6:	4297      	cmp	r7, r2
 8006dd8:	f240 84ab 	bls.w	8007732 <__ieee754_pow+0x9ea>
 8006ddc:	153a      	asrs	r2, r7, #20
 8006dde:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006de2:	2a14      	cmp	r2, #20
 8006de4:	dd0f      	ble.n	8006e06 <__ieee754_pow+0xbe>
 8006de6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006dea:	fa21 f402 	lsr.w	r4, r1, r2
 8006dee:	fa04 f202 	lsl.w	r2, r4, r2
 8006df2:	428a      	cmp	r2, r1
 8006df4:	f040 849d 	bne.w	8007732 <__ieee754_pow+0x9ea>
 8006df8:	f004 0401 	and.w	r4, r4, #1
 8006dfc:	f1c4 0402 	rsb	r4, r4, #2
 8006e00:	2900      	cmp	r1, #0
 8006e02:	d15a      	bne.n	8006eba <__ieee754_pow+0x172>
 8006e04:	e00e      	b.n	8006e24 <__ieee754_pow+0xdc>
 8006e06:	2900      	cmp	r1, #0
 8006e08:	d156      	bne.n	8006eb8 <__ieee754_pow+0x170>
 8006e0a:	f1c2 0214 	rsb	r2, r2, #20
 8006e0e:	fa47 f402 	asr.w	r4, r7, r2
 8006e12:	fa04 f202 	lsl.w	r2, r4, r2
 8006e16:	42ba      	cmp	r2, r7
 8006e18:	f040 8488 	bne.w	800772c <__ieee754_pow+0x9e4>
 8006e1c:	f004 0401 	and.w	r4, r4, #1
 8006e20:	f1c4 0402 	rsb	r4, r4, #2
 8006e24:	4a67      	ldr	r2, [pc, #412]	@ (8006fc4 <__ieee754_pow+0x27c>)
 8006e26:	4297      	cmp	r7, r2
 8006e28:	d130      	bne.n	8006e8c <__ieee754_pow+0x144>
 8006e2a:	f1b8 0f00 	cmp.w	r8, #0
 8006e2e:	f280 8479 	bge.w	8007724 <__ieee754_pow+0x9dc>
 8006e32:	4652      	mov	r2, sl
 8006e34:	465b      	mov	r3, fp
 8006e36:	2000      	movs	r0, #0
 8006e38:	4962      	ldr	r1, [pc, #392]	@ (8006fc4 <__ieee754_pow+0x27c>)
 8006e3a:	f7f9 fc6f 	bl	800071c <__aeabi_ddiv>
 8006e3e:	e7a1      	b.n	8006d84 <__ieee754_pow+0x3c>
 8006e40:	2400      	movs	r4, #0
 8006e42:	2900      	cmp	r1, #0
 8006e44:	d139      	bne.n	8006eba <__ieee754_pow+0x172>
 8006e46:	4a5d      	ldr	r2, [pc, #372]	@ (8006fbc <__ieee754_pow+0x274>)
 8006e48:	4297      	cmp	r7, r2
 8006e4a:	d1eb      	bne.n	8006e24 <__ieee754_pow+0xdc>
 8006e4c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8006e50:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8006e54:	ea53 0309 	orrs.w	r3, r3, r9
 8006e58:	f000 845c 	beq.w	8007714 <__ieee754_pow+0x9cc>
 8006e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8006fc8 <__ieee754_pow+0x280>)
 8006e5e:	429e      	cmp	r6, r3
 8006e60:	d908      	bls.n	8006e74 <__ieee754_pow+0x12c>
 8006e62:	f1b8 0f00 	cmp.w	r8, #0
 8006e66:	f2c0 8459 	blt.w	800771c <__ieee754_pow+0x9d4>
 8006e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e6e:	e789      	b.n	8006d84 <__ieee754_pow+0x3c>
 8006e70:	2402      	movs	r4, #2
 8006e72:	e7e6      	b.n	8006e42 <__ieee754_pow+0xfa>
 8006e74:	f1b8 0f00 	cmp.w	r8, #0
 8006e78:	f04f 0000 	mov.w	r0, #0
 8006e7c:	f04f 0100 	mov.w	r1, #0
 8006e80:	da80      	bge.n	8006d84 <__ieee754_pow+0x3c>
 8006e82:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006e86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006e8a:	e77b      	b.n	8006d84 <__ieee754_pow+0x3c>
 8006e8c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8006e90:	d106      	bne.n	8006ea0 <__ieee754_pow+0x158>
 8006e92:	4652      	mov	r2, sl
 8006e94:	465b      	mov	r3, fp
 8006e96:	4650      	mov	r0, sl
 8006e98:	4659      	mov	r1, fp
 8006e9a:	f7f9 fb15 	bl	80004c8 <__aeabi_dmul>
 8006e9e:	e771      	b.n	8006d84 <__ieee754_pow+0x3c>
 8006ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8006fcc <__ieee754_pow+0x284>)
 8006ea2:	4590      	cmp	r8, r2
 8006ea4:	d109      	bne.n	8006eba <__ieee754_pow+0x172>
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	db07      	blt.n	8006eba <__ieee754_pow+0x172>
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	b011      	add	sp, #68	@ 0x44
 8006eb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb4:	f000 bd12 	b.w	80078dc <__ieee754_sqrt>
 8006eb8:	2400      	movs	r4, #0
 8006eba:	4650      	mov	r0, sl
 8006ebc:	4659      	mov	r1, fp
 8006ebe:	9302      	str	r3, [sp, #8]
 8006ec0:	f000 fc6a 	bl	8007798 <fabs>
 8006ec4:	9b02      	ldr	r3, [sp, #8]
 8006ec6:	f1b9 0f00 	cmp.w	r9, #0
 8006eca:	d127      	bne.n	8006f1c <__ieee754_pow+0x1d4>
 8006ecc:	4a3d      	ldr	r2, [pc, #244]	@ (8006fc4 <__ieee754_pow+0x27c>)
 8006ece:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8006ed2:	4594      	cmp	ip, r2
 8006ed4:	d000      	beq.n	8006ed8 <__ieee754_pow+0x190>
 8006ed6:	bb0e      	cbnz	r6, 8006f1c <__ieee754_pow+0x1d4>
 8006ed8:	f1b8 0f00 	cmp.w	r8, #0
 8006edc:	da05      	bge.n	8006eea <__ieee754_pow+0x1a2>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	4937      	ldr	r1, [pc, #220]	@ (8006fc4 <__ieee754_pow+0x27c>)
 8006ee6:	f7f9 fc19 	bl	800071c <__aeabi_ddiv>
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	f6bf af4a 	bge.w	8006d84 <__ieee754_pow+0x3c>
 8006ef0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8006ef4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006ef8:	4326      	orrs	r6, r4
 8006efa:	d108      	bne.n	8006f0e <__ieee754_pow+0x1c6>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4610      	mov	r0, r2
 8006f02:	4619      	mov	r1, r3
 8006f04:	f7f9 f928 	bl	8000158 <__aeabi_dsub>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	e795      	b.n	8006e3a <__ieee754_pow+0xf2>
 8006f0e:	2c01      	cmp	r4, #1
 8006f10:	f47f af38 	bne.w	8006d84 <__ieee754_pow+0x3c>
 8006f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f18:	4619      	mov	r1, r3
 8006f1a:	e733      	b.n	8006d84 <__ieee754_pow+0x3c>
 8006f1c:	0fea      	lsrs	r2, r5, #31
 8006f1e:	3a01      	subs	r2, #1
 8006f20:	ea52 0c04 	orrs.w	ip, r2, r4
 8006f24:	d102      	bne.n	8006f2c <__ieee754_pow+0x1e4>
 8006f26:	4652      	mov	r2, sl
 8006f28:	465b      	mov	r3, fp
 8006f2a:	e7e9      	b.n	8006f00 <__ieee754_pow+0x1b8>
 8006f2c:	f04f 0900 	mov.w	r9, #0
 8006f30:	3c01      	subs	r4, #1
 8006f32:	4314      	orrs	r4, r2
 8006f34:	bf14      	ite	ne
 8006f36:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8006fc4 <__ieee754_pow+0x27c>
 8006f3a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8006fd0 <__ieee754_pow+0x288>
 8006f3e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8006f42:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8006f46:	f240 8107 	bls.w	8007158 <__ieee754_pow+0x410>
 8006f4a:	4b22      	ldr	r3, [pc, #136]	@ (8006fd4 <__ieee754_pow+0x28c>)
 8006f4c:	429f      	cmp	r7, r3
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc8 <__ieee754_pow+0x280>)
 8006f50:	d913      	bls.n	8006f7a <__ieee754_pow+0x232>
 8006f52:	429e      	cmp	r6, r3
 8006f54:	d808      	bhi.n	8006f68 <__ieee754_pow+0x220>
 8006f56:	f1b8 0f00 	cmp.w	r8, #0
 8006f5a:	da08      	bge.n	8006f6e <__ieee754_pow+0x226>
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	b011      	add	sp, #68	@ 0x44
 8006f60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	f000 bcb4 	b.w	80078d0 <__math_oflow>
 8006f68:	f1b8 0f00 	cmp.w	r8, #0
 8006f6c:	dcf6      	bgt.n	8006f5c <__ieee754_pow+0x214>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	b011      	add	sp, #68	@ 0x44
 8006f72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f76:	f000 bca6 	b.w	80078c6 <__math_uflow>
 8006f7a:	429e      	cmp	r6, r3
 8006f7c:	d20c      	bcs.n	8006f98 <__ieee754_pow+0x250>
 8006f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	2300      	movs	r3, #0
 8006f86:	f7f9 fd11 	bl	80009ac <__aeabi_dcmplt>
 8006f8a:	3800      	subs	r0, #0
 8006f8c:	bf18      	it	ne
 8006f8e:	2001      	movne	r0, #1
 8006f90:	f1b8 0f00 	cmp.w	r8, #0
 8006f94:	daec      	bge.n	8006f70 <__ieee754_pow+0x228>
 8006f96:	e7e2      	b.n	8006f5e <__ieee754_pow+0x216>
 8006f98:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc4 <__ieee754_pow+0x27c>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	429e      	cmp	r6, r3
 8006f9e:	d91b      	bls.n	8006fd8 <__ieee754_pow+0x290>
 8006fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f7f9 fd01 	bl	80009ac <__aeabi_dcmplt>
 8006faa:	3800      	subs	r0, #0
 8006fac:	bf18      	it	ne
 8006fae:	2001      	movne	r0, #1
 8006fb0:	f1b8 0f00 	cmp.w	r8, #0
 8006fb4:	dcd3      	bgt.n	8006f5e <__ieee754_pow+0x216>
 8006fb6:	e7db      	b.n	8006f70 <__ieee754_pow+0x228>
 8006fb8:	fff00000 	.word	0xfff00000
 8006fbc:	7ff00000 	.word	0x7ff00000
 8006fc0:	433fffff 	.word	0x433fffff
 8006fc4:	3ff00000 	.word	0x3ff00000
 8006fc8:	3fefffff 	.word	0x3fefffff
 8006fcc:	3fe00000 	.word	0x3fe00000
 8006fd0:	bff00000 	.word	0xbff00000
 8006fd4:	43f00000 	.word	0x43f00000
 8006fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8007148 <__ieee754_pow+0x400>)
 8006fda:	f7f9 f8bd 	bl	8000158 <__aeabi_dsub>
 8006fde:	a352      	add	r3, pc, #328	@ (adr r3, 8007128 <__ieee754_pow+0x3e0>)
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	f7f9 fa6e 	bl	80004c8 <__aeabi_dmul>
 8006fec:	a350      	add	r3, pc, #320	@ (adr r3, 8007130 <__ieee754_pow+0x3e8>)
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460f      	mov	r7, r1
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7f9 fa65 	bl	80004c8 <__aeabi_dmul>
 8006ffe:	2200      	movs	r2, #0
 8007000:	4682      	mov	sl, r0
 8007002:	468b      	mov	fp, r1
 8007004:	4620      	mov	r0, r4
 8007006:	4629      	mov	r1, r5
 8007008:	4b50      	ldr	r3, [pc, #320]	@ (800714c <__ieee754_pow+0x404>)
 800700a:	f7f9 fa5d 	bl	80004c8 <__aeabi_dmul>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	a149      	add	r1, pc, #292	@ (adr r1, 8007138 <__ieee754_pow+0x3f0>)
 8007014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007018:	f7f9 f89e 	bl	8000158 <__aeabi_dsub>
 800701c:	4622      	mov	r2, r4
 800701e:	462b      	mov	r3, r5
 8007020:	f7f9 fa52 	bl	80004c8 <__aeabi_dmul>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	2000      	movs	r0, #0
 800702a:	4949      	ldr	r1, [pc, #292]	@ (8007150 <__ieee754_pow+0x408>)
 800702c:	f7f9 f894 	bl	8000158 <__aeabi_dsub>
 8007030:	4622      	mov	r2, r4
 8007032:	4680      	mov	r8, r0
 8007034:	4689      	mov	r9, r1
 8007036:	462b      	mov	r3, r5
 8007038:	4620      	mov	r0, r4
 800703a:	4629      	mov	r1, r5
 800703c:	f7f9 fa44 	bl	80004c8 <__aeabi_dmul>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4640      	mov	r0, r8
 8007046:	4649      	mov	r1, r9
 8007048:	f7f9 fa3e 	bl	80004c8 <__aeabi_dmul>
 800704c:	a33c      	add	r3, pc, #240	@ (adr r3, 8007140 <__ieee754_pow+0x3f8>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 fa39 	bl	80004c8 <__aeabi_dmul>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4650      	mov	r0, sl
 800705c:	4659      	mov	r1, fp
 800705e:	f7f9 f87b 	bl	8000158 <__aeabi_dsub>
 8007062:	2400      	movs	r4, #0
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4680      	mov	r8, r0
 800706a:	4689      	mov	r9, r1
 800706c:	4630      	mov	r0, r6
 800706e:	4639      	mov	r1, r7
 8007070:	f7f9 f874 	bl	800015c <__adddf3>
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	4620      	mov	r0, r4
 800707a:	460d      	mov	r5, r1
 800707c:	f7f9 f86c 	bl	8000158 <__aeabi_dsub>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 f866 	bl	8000158 <__aeabi_dsub>
 800708c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007090:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007094:	2300      	movs	r3, #0
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070a4:	4652      	mov	r2, sl
 80070a6:	465b      	mov	r3, fp
 80070a8:	f7f9 f856 	bl	8000158 <__aeabi_dsub>
 80070ac:	4622      	mov	r2, r4
 80070ae:	462b      	mov	r3, r5
 80070b0:	f7f9 fa0a 	bl	80004c8 <__aeabi_dmul>
 80070b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070b8:	4680      	mov	r8, r0
 80070ba:	4689      	mov	r9, r1
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 fa02 	bl	80004c8 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4640      	mov	r0, r8
 80070ca:	4649      	mov	r1, r9
 80070cc:	f7f9 f846 	bl	800015c <__adddf3>
 80070d0:	4652      	mov	r2, sl
 80070d2:	465b      	mov	r3, fp
 80070d4:	4606      	mov	r6, r0
 80070d6:	460f      	mov	r7, r1
 80070d8:	4620      	mov	r0, r4
 80070da:	4629      	mov	r1, r5
 80070dc:	f7f9 f9f4 	bl	80004c8 <__aeabi_dmul>
 80070e0:	460b      	mov	r3, r1
 80070e2:	4602      	mov	r2, r0
 80070e4:	4680      	mov	r8, r0
 80070e6:	4689      	mov	r9, r1
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 f836 	bl	800015c <__adddf3>
 80070f0:	4b18      	ldr	r3, [pc, #96]	@ (8007154 <__ieee754_pow+0x40c>)
 80070f2:	4604      	mov	r4, r0
 80070f4:	4299      	cmp	r1, r3
 80070f6:	460d      	mov	r5, r1
 80070f8:	468a      	mov	sl, r1
 80070fa:	468b      	mov	fp, r1
 80070fc:	f340 82e0 	ble.w	80076c0 <__ieee754_pow+0x978>
 8007100:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007104:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007108:	4303      	orrs	r3, r0
 800710a:	f000 81df 	beq.w	80074cc <__ieee754_pow+0x784>
 800710e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007112:	2200      	movs	r2, #0
 8007114:	2300      	movs	r3, #0
 8007116:	f7f9 fc49 	bl	80009ac <__aeabi_dcmplt>
 800711a:	3800      	subs	r0, #0
 800711c:	bf18      	it	ne
 800711e:	2001      	movne	r0, #1
 8007120:	e71d      	b.n	8006f5e <__ieee754_pow+0x216>
 8007122:	bf00      	nop
 8007124:	f3af 8000 	nop.w
 8007128:	60000000 	.word	0x60000000
 800712c:	3ff71547 	.word	0x3ff71547
 8007130:	f85ddf44 	.word	0xf85ddf44
 8007134:	3e54ae0b 	.word	0x3e54ae0b
 8007138:	55555555 	.word	0x55555555
 800713c:	3fd55555 	.word	0x3fd55555
 8007140:	652b82fe 	.word	0x652b82fe
 8007144:	3ff71547 	.word	0x3ff71547
 8007148:	3ff00000 	.word	0x3ff00000
 800714c:	3fd00000 	.word	0x3fd00000
 8007150:	3fe00000 	.word	0x3fe00000
 8007154:	408fffff 	.word	0x408fffff
 8007158:	4ad3      	ldr	r2, [pc, #844]	@ (80074a8 <__ieee754_pow+0x760>)
 800715a:	402a      	ands	r2, r5
 800715c:	2a00      	cmp	r2, #0
 800715e:	f040 817a 	bne.w	8007456 <__ieee754_pow+0x70e>
 8007162:	4bd2      	ldr	r3, [pc, #840]	@ (80074ac <__ieee754_pow+0x764>)
 8007164:	2200      	movs	r2, #0
 8007166:	f7f9 f9af 	bl	80004c8 <__aeabi_dmul>
 800716a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800716e:	460b      	mov	r3, r1
 8007170:	151a      	asrs	r2, r3, #20
 8007172:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007176:	4422      	add	r2, r4
 8007178:	920a      	str	r2, [sp, #40]	@ 0x28
 800717a:	4acd      	ldr	r2, [pc, #820]	@ (80074b0 <__ieee754_pow+0x768>)
 800717c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007180:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8007184:	4293      	cmp	r3, r2
 8007186:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800718a:	dd08      	ble.n	800719e <__ieee754_pow+0x456>
 800718c:	4ac9      	ldr	r2, [pc, #804]	@ (80074b4 <__ieee754_pow+0x76c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	f340 8163 	ble.w	800745a <__ieee754_pow+0x712>
 8007194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007196:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800719a:	3301      	adds	r3, #1
 800719c:	930a      	str	r3, [sp, #40]	@ 0x28
 800719e:	2600      	movs	r6, #0
 80071a0:	00f3      	lsls	r3, r6, #3
 80071a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071a4:	4bc4      	ldr	r3, [pc, #784]	@ (80074b8 <__ieee754_pow+0x770>)
 80071a6:	4629      	mov	r1, r5
 80071a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071b0:	461a      	mov	r2, r3
 80071b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80071b6:	4623      	mov	r3, r4
 80071b8:	4682      	mov	sl, r0
 80071ba:	f7f8 ffcd 	bl	8000158 <__aeabi_dsub>
 80071be:	4652      	mov	r2, sl
 80071c0:	462b      	mov	r3, r5
 80071c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80071c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071ca:	f7f8 ffc7 	bl	800015c <__adddf3>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	2000      	movs	r0, #0
 80071d4:	49b9      	ldr	r1, [pc, #740]	@ (80074bc <__ieee754_pow+0x774>)
 80071d6:	f7f9 faa1 	bl	800071c <__aeabi_ddiv>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071e6:	f7f9 f96f 	bl	80004c8 <__aeabi_dmul>
 80071ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071ee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80071f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071f6:	2300      	movs	r3, #0
 80071f8:	2200      	movs	r2, #0
 80071fa:	46ab      	mov	fp, r5
 80071fc:	106d      	asrs	r5, r5, #1
 80071fe:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007208:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800720c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007210:	4640      	mov	r0, r8
 8007212:	4649      	mov	r1, r9
 8007214:	4614      	mov	r4, r2
 8007216:	461d      	mov	r5, r3
 8007218:	f7f9 f956 	bl	80004c8 <__aeabi_dmul>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007224:	f7f8 ff98 	bl	8000158 <__aeabi_dsub>
 8007228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800722c:	4606      	mov	r6, r0
 800722e:	460f      	mov	r7, r1
 8007230:	4620      	mov	r0, r4
 8007232:	4629      	mov	r1, r5
 8007234:	f7f8 ff90 	bl	8000158 <__aeabi_dsub>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4650      	mov	r0, sl
 800723e:	4659      	mov	r1, fp
 8007240:	f7f8 ff8a 	bl	8000158 <__aeabi_dsub>
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	f7f9 f93e 	bl	80004c8 <__aeabi_dmul>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4630      	mov	r0, r6
 8007252:	4639      	mov	r1, r7
 8007254:	f7f8 ff80 	bl	8000158 <__aeabi_dsub>
 8007258:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800725c:	f7f9 f934 	bl	80004c8 <__aeabi_dmul>
 8007260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007264:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007268:	4610      	mov	r0, r2
 800726a:	4619      	mov	r1, r3
 800726c:	f7f9 f92c 	bl	80004c8 <__aeabi_dmul>
 8007270:	a37b      	add	r3, pc, #492	@ (adr r3, 8007460 <__ieee754_pow+0x718>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	f7f9 f925 	bl	80004c8 <__aeabi_dmul>
 800727e:	a37a      	add	r3, pc, #488	@ (adr r3, 8007468 <__ieee754_pow+0x720>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	f7f8 ff6a 	bl	800015c <__adddf3>
 8007288:	4622      	mov	r2, r4
 800728a:	462b      	mov	r3, r5
 800728c:	f7f9 f91c 	bl	80004c8 <__aeabi_dmul>
 8007290:	a377      	add	r3, pc, #476	@ (adr r3, 8007470 <__ieee754_pow+0x728>)
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f7f8 ff61 	bl	800015c <__adddf3>
 800729a:	4622      	mov	r2, r4
 800729c:	462b      	mov	r3, r5
 800729e:	f7f9 f913 	bl	80004c8 <__aeabi_dmul>
 80072a2:	a375      	add	r3, pc, #468	@ (adr r3, 8007478 <__ieee754_pow+0x730>)
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f7f8 ff58 	bl	800015c <__adddf3>
 80072ac:	4622      	mov	r2, r4
 80072ae:	462b      	mov	r3, r5
 80072b0:	f7f9 f90a 	bl	80004c8 <__aeabi_dmul>
 80072b4:	a372      	add	r3, pc, #456	@ (adr r3, 8007480 <__ieee754_pow+0x738>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f8 ff4f 	bl	800015c <__adddf3>
 80072be:	4622      	mov	r2, r4
 80072c0:	462b      	mov	r3, r5
 80072c2:	f7f9 f901 	bl	80004c8 <__aeabi_dmul>
 80072c6:	a370      	add	r3, pc, #448	@ (adr r3, 8007488 <__ieee754_pow+0x740>)
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f7f8 ff46 	bl	800015c <__adddf3>
 80072d0:	4622      	mov	r2, r4
 80072d2:	4606      	mov	r6, r0
 80072d4:	460f      	mov	r7, r1
 80072d6:	462b      	mov	r3, r5
 80072d8:	4620      	mov	r0, r4
 80072da:	4629      	mov	r1, r5
 80072dc:	f7f9 f8f4 	bl	80004c8 <__aeabi_dmul>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 f8ee 	bl	80004c8 <__aeabi_dmul>
 80072ec:	4604      	mov	r4, r0
 80072ee:	460d      	mov	r5, r1
 80072f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072f4:	4642      	mov	r2, r8
 80072f6:	464b      	mov	r3, r9
 80072f8:	f7f8 ff30 	bl	800015c <__adddf3>
 80072fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007300:	f7f9 f8e2 	bl	80004c8 <__aeabi_dmul>
 8007304:	4622      	mov	r2, r4
 8007306:	462b      	mov	r3, r5
 8007308:	f7f8 ff28 	bl	800015c <__adddf3>
 800730c:	4642      	mov	r2, r8
 800730e:	4682      	mov	sl, r0
 8007310:	468b      	mov	fp, r1
 8007312:	464b      	mov	r3, r9
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7f9 f8d6 	bl	80004c8 <__aeabi_dmul>
 800731c:	2200      	movs	r2, #0
 800731e:	4b68      	ldr	r3, [pc, #416]	@ (80074c0 <__ieee754_pow+0x778>)
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	f7f8 ff1a 	bl	800015c <__adddf3>
 8007328:	4652      	mov	r2, sl
 800732a:	465b      	mov	r3, fp
 800732c:	f7f8 ff16 	bl	800015c <__adddf3>
 8007330:	2400      	movs	r4, #0
 8007332:	460d      	mov	r5, r1
 8007334:	4622      	mov	r2, r4
 8007336:	460b      	mov	r3, r1
 8007338:	4640      	mov	r0, r8
 800733a:	4649      	mov	r1, r9
 800733c:	f7f9 f8c4 	bl	80004c8 <__aeabi_dmul>
 8007340:	2200      	movs	r2, #0
 8007342:	4680      	mov	r8, r0
 8007344:	4689      	mov	r9, r1
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	4b5d      	ldr	r3, [pc, #372]	@ (80074c0 <__ieee754_pow+0x778>)
 800734c:	f7f8 ff04 	bl	8000158 <__aeabi_dsub>
 8007350:	4632      	mov	r2, r6
 8007352:	463b      	mov	r3, r7
 8007354:	f7f8 ff00 	bl	8000158 <__aeabi_dsub>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4650      	mov	r0, sl
 800735e:	4659      	mov	r1, fp
 8007360:	f7f8 fefa 	bl	8000158 <__aeabi_dsub>
 8007364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007368:	f7f9 f8ae 	bl	80004c8 <__aeabi_dmul>
 800736c:	4622      	mov	r2, r4
 800736e:	4606      	mov	r6, r0
 8007370:	460f      	mov	r7, r1
 8007372:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007376:	462b      	mov	r3, r5
 8007378:	f7f9 f8a6 	bl	80004c8 <__aeabi_dmul>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	f7f8 feea 	bl	800015c <__adddf3>
 8007388:	2400      	movs	r4, #0
 800738a:	4606      	mov	r6, r0
 800738c:	460f      	mov	r7, r1
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4640      	mov	r0, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f7f8 fee1 	bl	800015c <__adddf3>
 800739a:	a33d      	add	r3, pc, #244	@ (adr r3, 8007490 <__ieee754_pow+0x748>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	4620      	mov	r0, r4
 80073a2:	460d      	mov	r5, r1
 80073a4:	f7f9 f890 	bl	80004c8 <__aeabi_dmul>
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073b0:	4620      	mov	r0, r4
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7f8 fed0 	bl	8000158 <__aeabi_dsub>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4630      	mov	r0, r6
 80073be:	4639      	mov	r1, r7
 80073c0:	f7f8 feca 	bl	8000158 <__aeabi_dsub>
 80073c4:	a334      	add	r3, pc, #208	@ (adr r3, 8007498 <__ieee754_pow+0x750>)
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f7f9 f87d 	bl	80004c8 <__aeabi_dmul>
 80073ce:	a334      	add	r3, pc, #208	@ (adr r3, 80074a0 <__ieee754_pow+0x758>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	4606      	mov	r6, r0
 80073d6:	460f      	mov	r7, r1
 80073d8:	4620      	mov	r0, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	f7f9 f874 	bl	80004c8 <__aeabi_dmul>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f8 feb8 	bl	800015c <__adddf3>
 80073ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073ee:	4b35      	ldr	r3, [pc, #212]	@ (80074c4 <__ieee754_pow+0x77c>)
 80073f0:	2400      	movs	r4, #0
 80073f2:	4413      	add	r3, r2
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f8 feb0 	bl	800015c <__adddf3>
 80073fc:	4682      	mov	sl, r0
 80073fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007400:	468b      	mov	fp, r1
 8007402:	f7f8 fff7 	bl	80003f4 <__aeabi_i2d>
 8007406:	4606      	mov	r6, r0
 8007408:	460f      	mov	r7, r1
 800740a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800740c:	4b2e      	ldr	r3, [pc, #184]	@ (80074c8 <__ieee754_pow+0x780>)
 800740e:	4413      	add	r3, r2
 8007410:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007414:	4652      	mov	r2, sl
 8007416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800741a:	465b      	mov	r3, fp
 800741c:	f7f8 fe9e 	bl	800015c <__adddf3>
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	f7f8 fe9a 	bl	800015c <__adddf3>
 8007428:	4632      	mov	r2, r6
 800742a:	463b      	mov	r3, r7
 800742c:	f7f8 fe96 	bl	800015c <__adddf3>
 8007430:	4632      	mov	r2, r6
 8007432:	463b      	mov	r3, r7
 8007434:	4620      	mov	r0, r4
 8007436:	460d      	mov	r5, r1
 8007438:	f7f8 fe8e 	bl	8000158 <__aeabi_dsub>
 800743c:	4642      	mov	r2, r8
 800743e:	464b      	mov	r3, r9
 8007440:	f7f8 fe8a 	bl	8000158 <__aeabi_dsub>
 8007444:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007448:	f7f8 fe86 	bl	8000158 <__aeabi_dsub>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4650      	mov	r0, sl
 8007452:	4659      	mov	r1, fp
 8007454:	e618      	b.n	8007088 <__ieee754_pow+0x340>
 8007456:	2400      	movs	r4, #0
 8007458:	e68a      	b.n	8007170 <__ieee754_pow+0x428>
 800745a:	2601      	movs	r6, #1
 800745c:	e6a0      	b.n	80071a0 <__ieee754_pow+0x458>
 800745e:	bf00      	nop
 8007460:	4a454eef 	.word	0x4a454eef
 8007464:	3fca7e28 	.word	0x3fca7e28
 8007468:	93c9db65 	.word	0x93c9db65
 800746c:	3fcd864a 	.word	0x3fcd864a
 8007470:	a91d4101 	.word	0xa91d4101
 8007474:	3fd17460 	.word	0x3fd17460
 8007478:	518f264d 	.word	0x518f264d
 800747c:	3fd55555 	.word	0x3fd55555
 8007480:	db6fabff 	.word	0xdb6fabff
 8007484:	3fdb6db6 	.word	0x3fdb6db6
 8007488:	33333303 	.word	0x33333303
 800748c:	3fe33333 	.word	0x3fe33333
 8007490:	e0000000 	.word	0xe0000000
 8007494:	3feec709 	.word	0x3feec709
 8007498:	dc3a03fd 	.word	0xdc3a03fd
 800749c:	3feec709 	.word	0x3feec709
 80074a0:	145b01f5 	.word	0x145b01f5
 80074a4:	be3e2fe0 	.word	0xbe3e2fe0
 80074a8:	7ff00000 	.word	0x7ff00000
 80074ac:	43400000 	.word	0x43400000
 80074b0:	0003988e 	.word	0x0003988e
 80074b4:	000bb679 	.word	0x000bb679
 80074b8:	08007b88 	.word	0x08007b88
 80074bc:	3ff00000 	.word	0x3ff00000
 80074c0:	40080000 	.word	0x40080000
 80074c4:	08007b68 	.word	0x08007b68
 80074c8:	08007b78 	.word	0x08007b78
 80074cc:	a39a      	add	r3, pc, #616	@ (adr r3, 8007738 <__ieee754_pow+0x9f0>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	4630      	mov	r0, r6
 80074d4:	4639      	mov	r1, r7
 80074d6:	f7f8 fe41 	bl	800015c <__adddf3>
 80074da:	4642      	mov	r2, r8
 80074dc:	e9cd 0100 	strd	r0, r1, [sp]
 80074e0:	464b      	mov	r3, r9
 80074e2:	4620      	mov	r0, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	f7f8 fe37 	bl	8000158 <__aeabi_dsub>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074f2:	f7f9 fa79 	bl	80009e8 <__aeabi_dcmpgt>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f47f ae09 	bne.w	800710e <__ieee754_pow+0x3c6>
 80074fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007500:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007504:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007508:	fa43 fa0a 	asr.w	sl, r3, sl
 800750c:	44da      	add	sl, fp
 800750e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007512:	489b      	ldr	r0, [pc, #620]	@ (8007780 <__ieee754_pow+0xa38>)
 8007514:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007518:	4108      	asrs	r0, r1
 800751a:	ea00 030a 	and.w	r3, r0, sl
 800751e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007522:	f1c1 0114 	rsb	r1, r1, #20
 8007526:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800752a:	4640      	mov	r0, r8
 800752c:	fa4a fa01 	asr.w	sl, sl, r1
 8007530:	f1bb 0f00 	cmp.w	fp, #0
 8007534:	4649      	mov	r1, r9
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	bfb8      	it	lt
 800753c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007540:	f7f8 fe0a 	bl	8000158 <__aeabi_dsub>
 8007544:	4680      	mov	r8, r0
 8007546:	4689      	mov	r9, r1
 8007548:	2400      	movs	r4, #0
 800754a:	4632      	mov	r2, r6
 800754c:	463b      	mov	r3, r7
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f8 fe03 	bl	800015c <__adddf3>
 8007556:	a37a      	add	r3, pc, #488	@ (adr r3, 8007740 <__ieee754_pow+0x9f8>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	4620      	mov	r0, r4
 800755e:	460d      	mov	r5, r1
 8007560:	f7f8 ffb2 	bl	80004c8 <__aeabi_dmul>
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	e9cd 0100 	strd	r0, r1, [sp]
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	f7f8 fdf2 	bl	8000158 <__aeabi_dsub>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4630      	mov	r0, r6
 800757a:	4639      	mov	r1, r7
 800757c:	f7f8 fdec 	bl	8000158 <__aeabi_dsub>
 8007580:	a371      	add	r3, pc, #452	@ (adr r3, 8007748 <__ieee754_pow+0xa00>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 ff9f 	bl	80004c8 <__aeabi_dmul>
 800758a:	a371      	add	r3, pc, #452	@ (adr r3, 8007750 <__ieee754_pow+0xa08>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	4680      	mov	r8, r0
 8007592:	4689      	mov	r9, r1
 8007594:	4620      	mov	r0, r4
 8007596:	4629      	mov	r1, r5
 8007598:	f7f8 ff96 	bl	80004c8 <__aeabi_dmul>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4640      	mov	r0, r8
 80075a2:	4649      	mov	r1, r9
 80075a4:	f7f8 fdda 	bl	800015c <__adddf3>
 80075a8:	4604      	mov	r4, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075b4:	f7f8 fdd2 	bl	800015c <__adddf3>
 80075b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075bc:	4680      	mov	r8, r0
 80075be:	4689      	mov	r9, r1
 80075c0:	f7f8 fdca 	bl	8000158 <__aeabi_dsub>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4620      	mov	r0, r4
 80075ca:	4629      	mov	r1, r5
 80075cc:	f7f8 fdc4 	bl	8000158 <__aeabi_dsub>
 80075d0:	4642      	mov	r2, r8
 80075d2:	4606      	mov	r6, r0
 80075d4:	460f      	mov	r7, r1
 80075d6:	464b      	mov	r3, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f8 ff74 	bl	80004c8 <__aeabi_dmul>
 80075e0:	a35d      	add	r3, pc, #372	@ (adr r3, 8007758 <__ieee754_pow+0xa10>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	4604      	mov	r4, r0
 80075e8:	460d      	mov	r5, r1
 80075ea:	f7f8 ff6d 	bl	80004c8 <__aeabi_dmul>
 80075ee:	a35c      	add	r3, pc, #368	@ (adr r3, 8007760 <__ieee754_pow+0xa18>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f7f8 fdb0 	bl	8000158 <__aeabi_dsub>
 80075f8:	4622      	mov	r2, r4
 80075fa:	462b      	mov	r3, r5
 80075fc:	f7f8 ff64 	bl	80004c8 <__aeabi_dmul>
 8007600:	a359      	add	r3, pc, #356	@ (adr r3, 8007768 <__ieee754_pow+0xa20>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f7f8 fda9 	bl	800015c <__adddf3>
 800760a:	4622      	mov	r2, r4
 800760c:	462b      	mov	r3, r5
 800760e:	f7f8 ff5b 	bl	80004c8 <__aeabi_dmul>
 8007612:	a357      	add	r3, pc, #348	@ (adr r3, 8007770 <__ieee754_pow+0xa28>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f8 fd9e 	bl	8000158 <__aeabi_dsub>
 800761c:	4622      	mov	r2, r4
 800761e:	462b      	mov	r3, r5
 8007620:	f7f8 ff52 	bl	80004c8 <__aeabi_dmul>
 8007624:	a354      	add	r3, pc, #336	@ (adr r3, 8007778 <__ieee754_pow+0xa30>)
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 fd97 	bl	800015c <__adddf3>
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	f7f8 ff49 	bl	80004c8 <__aeabi_dmul>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 fd8b 	bl	8000158 <__aeabi_dsub>
 8007642:	4604      	mov	r4, r0
 8007644:	460d      	mov	r5, r1
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	f7f8 ff3b 	bl	80004c8 <__aeabi_dmul>
 8007652:	2200      	movs	r2, #0
 8007654:	e9cd 0100 	strd	r0, r1, [sp]
 8007658:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800765c:	4620      	mov	r0, r4
 800765e:	4629      	mov	r1, r5
 8007660:	f7f8 fd7a 	bl	8000158 <__aeabi_dsub>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800766c:	f7f9 f856 	bl	800071c <__aeabi_ddiv>
 8007670:	4632      	mov	r2, r6
 8007672:	4604      	mov	r4, r0
 8007674:	460d      	mov	r5, r1
 8007676:	463b      	mov	r3, r7
 8007678:	4640      	mov	r0, r8
 800767a:	4649      	mov	r1, r9
 800767c:	f7f8 ff24 	bl	80004c8 <__aeabi_dmul>
 8007680:	4632      	mov	r2, r6
 8007682:	463b      	mov	r3, r7
 8007684:	f7f8 fd6a 	bl	800015c <__adddf3>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f7f8 fd62 	bl	8000158 <__aeabi_dsub>
 8007694:	4642      	mov	r2, r8
 8007696:	464b      	mov	r3, r9
 8007698:	f7f8 fd5e 	bl	8000158 <__aeabi_dsub>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	2000      	movs	r0, #0
 80076a2:	4938      	ldr	r1, [pc, #224]	@ (8007784 <__ieee754_pow+0xa3c>)
 80076a4:	f7f8 fd58 	bl	8000158 <__aeabi_dsub>
 80076a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80076ac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80076b0:	da2e      	bge.n	8007710 <__ieee754_pow+0x9c8>
 80076b2:	4652      	mov	r2, sl
 80076b4:	f000 f874 	bl	80077a0 <scalbn>
 80076b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076bc:	f7ff bbed 	b.w	8006e9a <__ieee754_pow+0x152>
 80076c0:	4c31      	ldr	r4, [pc, #196]	@ (8007788 <__ieee754_pow+0xa40>)
 80076c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	d91a      	bls.n	8007700 <__ieee754_pow+0x9b8>
 80076ca:	4b30      	ldr	r3, [pc, #192]	@ (800778c <__ieee754_pow+0xa44>)
 80076cc:	440b      	add	r3, r1
 80076ce:	4303      	orrs	r3, r0
 80076d0:	d009      	beq.n	80076e6 <__ieee754_pow+0x99e>
 80076d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	2300      	movs	r3, #0
 80076da:	f7f9 f967 	bl	80009ac <__aeabi_dcmplt>
 80076de:	3800      	subs	r0, #0
 80076e0:	bf18      	it	ne
 80076e2:	2001      	movne	r0, #1
 80076e4:	e444      	b.n	8006f70 <__ieee754_pow+0x228>
 80076e6:	4642      	mov	r2, r8
 80076e8:	464b      	mov	r3, r9
 80076ea:	f7f8 fd35 	bl	8000158 <__aeabi_dsub>
 80076ee:	4632      	mov	r2, r6
 80076f0:	463b      	mov	r3, r7
 80076f2:	f7f9 f96f 	bl	80009d4 <__aeabi_dcmpge>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d1eb      	bne.n	80076d2 <__ieee754_pow+0x98a>
 80076fa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007790 <__ieee754_pow+0xa48>
 80076fe:	e6fd      	b.n	80074fc <__ieee754_pow+0x7b4>
 8007700:	469a      	mov	sl, r3
 8007702:	4b24      	ldr	r3, [pc, #144]	@ (8007794 <__ieee754_pow+0xa4c>)
 8007704:	459a      	cmp	sl, r3
 8007706:	f63f aef9 	bhi.w	80074fc <__ieee754_pow+0x7b4>
 800770a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800770e:	e71b      	b.n	8007548 <__ieee754_pow+0x800>
 8007710:	4621      	mov	r1, r4
 8007712:	e7d1      	b.n	80076b8 <__ieee754_pow+0x970>
 8007714:	2000      	movs	r0, #0
 8007716:	491b      	ldr	r1, [pc, #108]	@ (8007784 <__ieee754_pow+0xa3c>)
 8007718:	f7ff bb34 	b.w	8006d84 <__ieee754_pow+0x3c>
 800771c:	2000      	movs	r0, #0
 800771e:	2100      	movs	r1, #0
 8007720:	f7ff bb30 	b.w	8006d84 <__ieee754_pow+0x3c>
 8007724:	4650      	mov	r0, sl
 8007726:	4659      	mov	r1, fp
 8007728:	f7ff bb2c 	b.w	8006d84 <__ieee754_pow+0x3c>
 800772c:	460c      	mov	r4, r1
 800772e:	f7ff bb79 	b.w	8006e24 <__ieee754_pow+0xdc>
 8007732:	2400      	movs	r4, #0
 8007734:	f7ff bb64 	b.w	8006e00 <__ieee754_pow+0xb8>
 8007738:	652b82fe 	.word	0x652b82fe
 800773c:	3c971547 	.word	0x3c971547
 8007740:	00000000 	.word	0x00000000
 8007744:	3fe62e43 	.word	0x3fe62e43
 8007748:	fefa39ef 	.word	0xfefa39ef
 800774c:	3fe62e42 	.word	0x3fe62e42
 8007750:	0ca86c39 	.word	0x0ca86c39
 8007754:	be205c61 	.word	0xbe205c61
 8007758:	72bea4d0 	.word	0x72bea4d0
 800775c:	3e663769 	.word	0x3e663769
 8007760:	c5d26bf1 	.word	0xc5d26bf1
 8007764:	3ebbbd41 	.word	0x3ebbbd41
 8007768:	af25de2c 	.word	0xaf25de2c
 800776c:	3f11566a 	.word	0x3f11566a
 8007770:	16bebd93 	.word	0x16bebd93
 8007774:	3f66c16c 	.word	0x3f66c16c
 8007778:	5555553e 	.word	0x5555553e
 800777c:	3fc55555 	.word	0x3fc55555
 8007780:	fff00000 	.word	0xfff00000
 8007784:	3ff00000 	.word	0x3ff00000
 8007788:	4090cbff 	.word	0x4090cbff
 800778c:	3f6f3400 	.word	0x3f6f3400
 8007790:	4090cc00 	.word	0x4090cc00
 8007794:	3fe00000 	.word	0x3fe00000

08007798 <fabs>:
 8007798:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800779c:	4619      	mov	r1, r3
 800779e:	4770      	bx	lr

080077a0 <scalbn>:
 80077a0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80077a4:	4616      	mov	r6, r2
 80077a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80077aa:	4683      	mov	fp, r0
 80077ac:	468c      	mov	ip, r1
 80077ae:	460b      	mov	r3, r1
 80077b0:	b982      	cbnz	r2, 80077d4 <scalbn+0x34>
 80077b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80077b6:	4303      	orrs	r3, r0
 80077b8:	d039      	beq.n	800782e <scalbn+0x8e>
 80077ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007878 <scalbn+0xd8>)
 80077bc:	2200      	movs	r2, #0
 80077be:	f7f8 fe83 	bl	80004c8 <__aeabi_dmul>
 80077c2:	4b2e      	ldr	r3, [pc, #184]	@ (800787c <scalbn+0xdc>)
 80077c4:	4683      	mov	fp, r0
 80077c6:	429e      	cmp	r6, r3
 80077c8:	468c      	mov	ip, r1
 80077ca:	da0d      	bge.n	80077e8 <scalbn+0x48>
 80077cc:	a326      	add	r3, pc, #152	@ (adr r3, 8007868 <scalbn+0xc8>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	e01b      	b.n	800780c <scalbn+0x6c>
 80077d4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80077d8:	42ba      	cmp	r2, r7
 80077da:	d109      	bne.n	80077f0 <scalbn+0x50>
 80077dc:	4602      	mov	r2, r0
 80077de:	f7f8 fcbd 	bl	800015c <__adddf3>
 80077e2:	4683      	mov	fp, r0
 80077e4:	468c      	mov	ip, r1
 80077e6:	e022      	b.n	800782e <scalbn+0x8e>
 80077e8:	460b      	mov	r3, r1
 80077ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80077ee:	3a36      	subs	r2, #54	@ 0x36
 80077f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80077f4:	428e      	cmp	r6, r1
 80077f6:	dd0c      	ble.n	8007812 <scalbn+0x72>
 80077f8:	a31d      	add	r3, pc, #116	@ (adr r3, 8007870 <scalbn+0xd0>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	461c      	mov	r4, r3
 8007800:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8007804:	f361 74df 	bfi	r4, r1, #31, #1
 8007808:	4621      	mov	r1, r4
 800780a:	481d      	ldr	r0, [pc, #116]	@ (8007880 <scalbn+0xe0>)
 800780c:	f7f8 fe5c 	bl	80004c8 <__aeabi_dmul>
 8007810:	e7e7      	b.n	80077e2 <scalbn+0x42>
 8007812:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007816:	4432      	add	r2, r6
 8007818:	428a      	cmp	r2, r1
 800781a:	dced      	bgt.n	80077f8 <scalbn+0x58>
 800781c:	2a00      	cmp	r2, #0
 800781e:	dd0a      	ble.n	8007836 <scalbn+0x96>
 8007820:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007824:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007828:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800782c:	46ac      	mov	ip, r5
 800782e:	4658      	mov	r0, fp
 8007830:	4661      	mov	r1, ip
 8007832:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007836:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800783a:	da09      	bge.n	8007850 <scalbn+0xb0>
 800783c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007840:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8007844:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007848:	480e      	ldr	r0, [pc, #56]	@ (8007884 <scalbn+0xe4>)
 800784a:	f041 011f 	orr.w	r1, r1, #31
 800784e:	e7bd      	b.n	80077cc <scalbn+0x2c>
 8007850:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007854:	3236      	adds	r2, #54	@ 0x36
 8007856:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800785a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800785e:	4658      	mov	r0, fp
 8007860:	4629      	mov	r1, r5
 8007862:	2200      	movs	r2, #0
 8007864:	4b08      	ldr	r3, [pc, #32]	@ (8007888 <scalbn+0xe8>)
 8007866:	e7d1      	b.n	800780c <scalbn+0x6c>
 8007868:	c2f8f359 	.word	0xc2f8f359
 800786c:	01a56e1f 	.word	0x01a56e1f
 8007870:	8800759c 	.word	0x8800759c
 8007874:	7e37e43c 	.word	0x7e37e43c
 8007878:	43500000 	.word	0x43500000
 800787c:	ffff3cb0 	.word	0xffff3cb0
 8007880:	8800759c 	.word	0x8800759c
 8007884:	c2f8f359 	.word	0xc2f8f359
 8007888:	3c900000 	.word	0x3c900000

0800788c <with_errno>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	4616      	mov	r6, r2
 8007894:	f7fe fd1a 	bl	80062cc <__errno>
 8007898:	4629      	mov	r1, r5
 800789a:	6006      	str	r6, [r0, #0]
 800789c:	4620      	mov	r0, r4
 800789e:	bd70      	pop	{r4, r5, r6, pc}

080078a0 <xflow>:
 80078a0:	b513      	push	{r0, r1, r4, lr}
 80078a2:	4604      	mov	r4, r0
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	b10c      	cbz	r4, 80078ae <xflow+0xe>
 80078aa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80078ae:	e9cd 2300 	strd	r2, r3, [sp]
 80078b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078b6:	f7f8 fe07 	bl	80004c8 <__aeabi_dmul>
 80078ba:	2222      	movs	r2, #34	@ 0x22
 80078bc:	b002      	add	sp, #8
 80078be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c2:	f7ff bfe3 	b.w	800788c <with_errno>

080078c6 <__math_uflow>:
 80078c6:	2200      	movs	r2, #0
 80078c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80078cc:	f7ff bfe8 	b.w	80078a0 <xflow>

080078d0 <__math_oflow>:
 80078d0:	2200      	movs	r2, #0
 80078d2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80078d6:	f7ff bfe3 	b.w	80078a0 <xflow>
	...

080078dc <__ieee754_sqrt>:
 80078dc:	4a67      	ldr	r2, [pc, #412]	@ (8007a7c <__ieee754_sqrt+0x1a0>)
 80078de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e2:	438a      	bics	r2, r1
 80078e4:	4606      	mov	r6, r0
 80078e6:	460f      	mov	r7, r1
 80078e8:	460b      	mov	r3, r1
 80078ea:	4604      	mov	r4, r0
 80078ec:	d10e      	bne.n	800790c <__ieee754_sqrt+0x30>
 80078ee:	4602      	mov	r2, r0
 80078f0:	f7f8 fdea 	bl	80004c8 <__aeabi_dmul>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4630      	mov	r0, r6
 80078fa:	4639      	mov	r1, r7
 80078fc:	f7f8 fc2e 	bl	800015c <__adddf3>
 8007900:	4606      	mov	r6, r0
 8007902:	460f      	mov	r7, r1
 8007904:	4630      	mov	r0, r6
 8007906:	4639      	mov	r1, r7
 8007908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	2900      	cmp	r1, #0
 800790e:	dc0c      	bgt.n	800792a <__ieee754_sqrt+0x4e>
 8007910:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007914:	4302      	orrs	r2, r0
 8007916:	d0f5      	beq.n	8007904 <__ieee754_sqrt+0x28>
 8007918:	b189      	cbz	r1, 800793e <__ieee754_sqrt+0x62>
 800791a:	4602      	mov	r2, r0
 800791c:	f7f8 fc1c 	bl	8000158 <__aeabi_dsub>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	f7f8 fefa 	bl	800071c <__aeabi_ddiv>
 8007928:	e7ea      	b.n	8007900 <__ieee754_sqrt+0x24>
 800792a:	150a      	asrs	r2, r1, #20
 800792c:	d115      	bne.n	800795a <__ieee754_sqrt+0x7e>
 800792e:	2100      	movs	r1, #0
 8007930:	e009      	b.n	8007946 <__ieee754_sqrt+0x6a>
 8007932:	0ae3      	lsrs	r3, r4, #11
 8007934:	3a15      	subs	r2, #21
 8007936:	0564      	lsls	r4, r4, #21
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0fa      	beq.n	8007932 <__ieee754_sqrt+0x56>
 800793c:	e7f7      	b.n	800792e <__ieee754_sqrt+0x52>
 800793e:	460a      	mov	r2, r1
 8007940:	e7fa      	b.n	8007938 <__ieee754_sqrt+0x5c>
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	3101      	adds	r1, #1
 8007946:	02d8      	lsls	r0, r3, #11
 8007948:	d5fb      	bpl.n	8007942 <__ieee754_sqrt+0x66>
 800794a:	1e48      	subs	r0, r1, #1
 800794c:	1a12      	subs	r2, r2, r0
 800794e:	f1c1 0020 	rsb	r0, r1, #32
 8007952:	fa24 f000 	lsr.w	r0, r4, r0
 8007956:	4303      	orrs	r3, r0
 8007958:	408c      	lsls	r4, r1
 800795a:	2600      	movs	r6, #0
 800795c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007960:	2116      	movs	r1, #22
 8007962:	07d2      	lsls	r2, r2, #31
 8007964:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007968:	4632      	mov	r2, r6
 800796a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800796e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007972:	bf5c      	itt	pl
 8007974:	005b      	lslpl	r3, r3, #1
 8007976:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800797a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800797e:	bf58      	it	pl
 8007980:	0064      	lslpl	r4, r4, #1
 8007982:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007986:	107f      	asrs	r7, r7, #1
 8007988:	0064      	lsls	r4, r4, #1
 800798a:	1815      	adds	r5, r2, r0
 800798c:	429d      	cmp	r5, r3
 800798e:	bfde      	ittt	le
 8007990:	182a      	addle	r2, r5, r0
 8007992:	1b5b      	suble	r3, r3, r5
 8007994:	1836      	addle	r6, r6, r0
 8007996:	0fe5      	lsrs	r5, r4, #31
 8007998:	3901      	subs	r1, #1
 800799a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800799e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80079a2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80079a6:	d1f0      	bne.n	800798a <__ieee754_sqrt+0xae>
 80079a8:	460d      	mov	r5, r1
 80079aa:	f04f 0a20 	mov.w	sl, #32
 80079ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80079b2:	429a      	cmp	r2, r3
 80079b4:	eb01 0c00 	add.w	ip, r1, r0
 80079b8:	db02      	blt.n	80079c0 <__ieee754_sqrt+0xe4>
 80079ba:	d113      	bne.n	80079e4 <__ieee754_sqrt+0x108>
 80079bc:	45a4      	cmp	ip, r4
 80079be:	d811      	bhi.n	80079e4 <__ieee754_sqrt+0x108>
 80079c0:	f1bc 0f00 	cmp.w	ip, #0
 80079c4:	eb0c 0100 	add.w	r1, ip, r0
 80079c8:	da42      	bge.n	8007a50 <__ieee754_sqrt+0x174>
 80079ca:	2900      	cmp	r1, #0
 80079cc:	db40      	blt.n	8007a50 <__ieee754_sqrt+0x174>
 80079ce:	f102 0e01 	add.w	lr, r2, #1
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	4672      	mov	r2, lr
 80079d6:	45a4      	cmp	ip, r4
 80079d8:	bf88      	it	hi
 80079da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80079de:	eba4 040c 	sub.w	r4, r4, ip
 80079e2:	4405      	add	r5, r0
 80079e4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80079e8:	f1ba 0a01 	subs.w	sl, sl, #1
 80079ec:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80079f0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80079f4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80079f8:	d1db      	bne.n	80079b2 <__ieee754_sqrt+0xd6>
 80079fa:	431c      	orrs	r4, r3
 80079fc:	d01a      	beq.n	8007a34 <__ieee754_sqrt+0x158>
 80079fe:	4c20      	ldr	r4, [pc, #128]	@ (8007a80 <__ieee754_sqrt+0x1a4>)
 8007a00:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8007a84 <__ieee754_sqrt+0x1a8>
 8007a04:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007a08:	e9db 2300 	ldrd	r2, r3, [fp]
 8007a0c:	f7f8 fba4 	bl	8000158 <__aeabi_dsub>
 8007a10:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	f7f8 ffd0 	bl	80009c0 <__aeabi_dcmple>
 8007a20:	b140      	cbz	r0, 8007a34 <__ieee754_sqrt+0x158>
 8007a22:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007a26:	e9db 2300 	ldrd	r2, r3, [fp]
 8007a2a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007a2e:	d111      	bne.n	8007a54 <__ieee754_sqrt+0x178>
 8007a30:	4655      	mov	r5, sl
 8007a32:	3601      	adds	r6, #1
 8007a34:	1072      	asrs	r2, r6, #1
 8007a36:	086b      	lsrs	r3, r5, #1
 8007a38:	07f1      	lsls	r1, r6, #31
 8007a3a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007a3e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007a42:	bf48      	it	mi
 8007a44:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007a48:	4618      	mov	r0, r3
 8007a4a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8007a4e:	e757      	b.n	8007900 <__ieee754_sqrt+0x24>
 8007a50:	4696      	mov	lr, r2
 8007a52:	e7be      	b.n	80079d2 <__ieee754_sqrt+0xf6>
 8007a54:	f7f8 fb82 	bl	800015c <__adddf3>
 8007a58:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4640      	mov	r0, r8
 8007a62:	4649      	mov	r1, r9
 8007a64:	f7f8 ffa2 	bl	80009ac <__aeabi_dcmplt>
 8007a68:	b120      	cbz	r0, 8007a74 <__ieee754_sqrt+0x198>
 8007a6a:	1ca8      	adds	r0, r5, #2
 8007a6c:	bf08      	it	eq
 8007a6e:	3601      	addeq	r6, #1
 8007a70:	3502      	adds	r5, #2
 8007a72:	e7df      	b.n	8007a34 <__ieee754_sqrt+0x158>
 8007a74:	1c6b      	adds	r3, r5, #1
 8007a76:	f023 0501 	bic.w	r5, r3, #1
 8007a7a:	e7db      	b.n	8007a34 <__ieee754_sqrt+0x158>
 8007a7c:	7ff00000 	.word	0x7ff00000
 8007a80:	20000070 	.word	0x20000070
 8007a84:	20000068 	.word	0x20000068

08007a88 <_init>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr

08007a94 <_fini>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr
