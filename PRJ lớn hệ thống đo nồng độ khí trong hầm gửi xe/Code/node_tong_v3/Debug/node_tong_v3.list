
node_tong_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e3c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009f50  08009f50  0000af50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b8  0800a3b8  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b8  0800a3b8  0000b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3c0  0800a3c0  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3c0  0800a3c0  0000b3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3c4  0800a3c4  0000b3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a3c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022c0  200001dc  0800a5a4  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000249c  0800a5a4  0000c49c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de01  00000000  00000000  0000c205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002324  00000000  00000000  0001a006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001c330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab1  00000000  00000000  0001d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ed5  00000000  00000000  0001dba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112d5  00000000  00000000  00036a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c6ce  00000000  00000000  00047d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4419  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d7c  00000000  00000000  000d445c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d91d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f34 	.word	0x08009f34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08009f34 	.word	0x08009f34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <L2_LED_On>:
 *      Author: DELL
 */

#include"led.h"
void L2_LED_On ()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bde:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <L2_LED_On+0x2c>)
 8000be0:	f002 fb16 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <L2_LED_On+0x2c>)
 8000bec:	f002 fb10 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bf6:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <L2_LED_On+0x2c>)
 8000bf8:	f002 fb0a 	bl	8003210 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40010c00 	.word	0x40010c00

08000c04 <L3_LED_On>:
void L3_LED_On ()
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0e:	4808      	ldr	r0, [pc, #32]	@ (8000c30 <L3_LED_On+0x2c>)
 8000c10:	f002 fafe 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <L3_LED_On+0x2c>)
 8000c1c:	f002 faf8 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c26:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <L3_LED_On+0x2c>)
 8000c28:	f002 faf2 	bl	8003210 <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <L1_LED_On>:
void L1_LED_On()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3e:	4808      	ldr	r0, [pc, #32]	@ (8000c60 <L1_LED_On+0x2c>)
 8000c40:	f002 fae6 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <L1_LED_On+0x2c>)
 8000c4c:	f002 fae0 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c56:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <L1_LED_On+0x2c>)
 8000c58:	f002 fada 	bl	8003210 <HAL_GPIO_WritePin>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010c00 	.word	0x40010c00

08000c64 <L1_3_LED_Off>:
void L1_3_LED_Off()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6e:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <L1_3_LED_Off+0x2c>)
 8000c70:	f002 face 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <L1_3_LED_Off+0x2c>)
 8000c7c:	f002 fac8 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c86:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <L1_3_LED_Off+0x2c>)
 8000c88:	f002 fac2 	bl	8003210 <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40010c00 	.word	0x40010c00

08000c94 <AT_LED_On>:
void AT_LED_On()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AT_LED_GPIO_Port,AT_LED_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c9e:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <AT_LED_On+0x14>)
 8000ca0:	f002 fab6 	bl	8003210 <HAL_GPIO_WritePin>
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// gửi lệnh đ�?c v�? node đo theo th�?i gian
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cbc:	d14b      	bne.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0xaa>
    {
    	if(node_flag==1 && receive_node1_flag==1)
 8000cbe:	4b47      	ldr	r3, [pc, #284]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10e      	bne.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000cc6:	4b46      	ldr	r3, [pc, #280]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10a      	bne.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x38>
    	{
    	RS485_SendCommand(0x01, 0x02);  // Gửi lệnh "02" tới Slave 1 ( lệnh gửi 1 dữ liệu)
 8000cce:	2102      	movs	r1, #2
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f001 f9fd 	bl	80020d0 <RS485_SendCommand>
    	node_flag=2;
 8000cd6:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	701a      	strb	r2, [r3, #0]
    	receive_node1_flag=0;
 8000cdc:	4b40      	ldr	r3, [pc, #256]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e076      	b.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
    	}
    	else if(node_flag==1 && receive_node1_flag==0)
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10e      	bne.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000cec:	4b3c      	ldr	r3, [pc, #240]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10a      	bne.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x5e>
    	{
    	RS485_SendCommand(0x01, 0x03);  // Gửi lệnh "03" tới Slave 1 ( lệnh gửi tất cả dữ liệu chưa gửi được)
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f001 f9ea 	bl	80020d0 <RS485_SendCommand>
    	node_flag=2;
 8000cfc:	4b37      	ldr	r3, [pc, #220]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	701a      	strb	r2, [r3, #0]
    	receive_node1_flag=0;
 8000d02:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e063      	b.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
    	}

    	else if(node_flag==2 && receive_node2_flag==1)
 8000d0a:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d10e      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000d12:	4b34      	ldr	r3, [pc, #208]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d10a      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x84>
    	{
		RS485_SendCommand(0x02, 0x02);  // Gửi lệnh "02" tới Slave 2
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f001 f9d7 	bl	80020d0 <RS485_SendCommand>
		node_flag=1;
 8000d22:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
		receive_node2_flag=0;
 8000d28:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e050      	b.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
    	}
    	else if(node_flag==2 && receive_node2_flag==0)
 8000d30:	4b2a      	ldr	r3, [pc, #168]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d14c      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
 8000d38:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d148      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
    	{
    		RS485_SendCommand(0x02, 0x03);  // Gửi lệnh "03" tới Slave 2
 8000d40:	2103      	movs	r1, #3
 8000d42:	2002      	movs	r0, #2
 8000d44:	f001 f9c4 	bl	80020d0 <RS485_SendCommand>
    		node_flag=1;
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
    		receive_node2_flag=0;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
			encode_ppm_data(ppm_data_1,(uint8_t*)string_data_tran[miss_data_nodet_to_gw_inx] , 5);
			encode_ppm_data(ppm_data_2,(uint8_t*)string_data_tran[miss_data_nodet_to_gw_inx] , 19);
			save_ok=1;
		 }
    }
}
 8000d54:	e03d      	b.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
    else if (htim->Instance == TIM3)  // Kiểm tra nếu ngắt từ Timer 3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a23      	ldr	r2, [pc, #140]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d138      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
    	Change_Time_Save_Data();
 8000d60:	f001 fdec 	bl	800293c <Change_Time_Save_Data>
    	connect_gw_error_flag++;
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d6e:	701a      	strb	r2, [r3, #0]
    	save_ok=0;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
		 if(connect_gw_error_flag>=2 && save_ok==0)
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d929      	bls.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d125      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
			miss_data_nodet_to_gw_inx=connect_gw_error_flag-2;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	3b02      	subs	r3, #2
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d90:	701a      	strb	r2, [r3, #0]
			encode_ppm_data(ppm_data_1,(uint8_t*)string_data_tran[miss_data_nodet_to_gw_inx] , 5);
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000da2:	441a      	add	r2, r3
 8000da4:	4915      	ldr	r1, [pc, #84]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000da6:	2305      	movs	r3, #5
 8000da8:	c903      	ldmia	r1, {r0, r1}
 8000daa:	f001 f9cd 	bl	8002148 <encode_ppm_data>
			encode_ppm_data(ppm_data_2,(uint8_t*)string_data_tran[miss_data_nodet_to_gw_inx] , 19);
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000dbe:	441a      	add	r2, r3
 8000dc0:	490f      	ldr	r1, [pc, #60]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000dc2:	2313      	movs	r3, #19
 8000dc4:	c903      	ldmia	r1, {r0, r1}
 8000dc6:	f001 f9bf 	bl	8002148 <encode_ppm_data>
			save_ok=1;
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
}
 8000dd0:	e7ff      	b.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x126>
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	20000006 	.word	0x20000006
 8000de4:	20000007 	.word	0x20000007
 8000de8:	40000400 	.word	0x40000400
 8000dec:	200003fd 	.word	0x200003fd
 8000df0:	200003fe 	.word	0x200003fe
 8000df4:	20000401 	.word	0x20000401
 8000df8:	20000408 	.word	0x20000408
 8000dfc:	200003ec 	.word	0x200003ec
 8000e00:	200003f4 	.word	0x200003f4

08000e04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	// Nhận dữ liệu từ node đo
    if (huart->Instance == USART1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a7e      	ldr	r2, [pc, #504]	@ (800100c <HAL_UART_RxCpltCallback+0x208>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f040 80d5 	bne.w	8000fc2 <HAL_UART_RxCpltCallback+0x1be>
    {
			// nhận chuỗi từ : đến \n
	if(rs1_temp[0] != '\n')
 8000e18:	4b7d      	ldr	r3, [pc, #500]	@ (8001010 <HAL_UART_RxCpltCallback+0x20c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b0a      	cmp	r3, #10
 8000e1e:	d017      	beq.n	8000e50 <HAL_UART_RxCpltCallback+0x4c>
	{
		if(rs1_temp[0]==':')
 8000e20:	4b7b      	ldr	r3, [pc, #492]	@ (8001010 <HAL_UART_RxCpltCallback+0x20c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b3a      	cmp	r3, #58	@ 0x3a
 8000e26:	d107      	bne.n	8000e38 <HAL_UART_RxCpltCallback+0x34>
		{
			RS1_rxBuffer[0]=rs1_temp[0];
 8000e28:	4b79      	ldr	r3, [pc, #484]	@ (8001010 <HAL_UART_RxCpltCallback+0x20c>)
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	4b79      	ldr	r3, [pc, #484]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000e2e:	701a      	strb	r2, [r3, #0]
			rs1_inx=1;
 8000e30:	4b79      	ldr	r3, [pc, #484]	@ (8001018 <HAL_UART_RxCpltCallback+0x214>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e0bf      	b.n	8000fb8 <HAL_UART_RxCpltCallback+0x1b4>
		}
		else
		{
			RS1_rxBuffer[rs1_inx++]=rs1_temp[0];
 8000e38:	4b77      	ldr	r3, [pc, #476]	@ (8001018 <HAL_UART_RxCpltCallback+0x214>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	b2d1      	uxtb	r1, r2
 8000e40:	4a75      	ldr	r2, [pc, #468]	@ (8001018 <HAL_UART_RxCpltCallback+0x214>)
 8000e42:	7011      	strb	r1, [r2, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b72      	ldr	r3, [pc, #456]	@ (8001010 <HAL_UART_RxCpltCallback+0x20c>)
 8000e48:	7819      	ldrb	r1, [r3, #0]
 8000e4a:	4b72      	ldr	r3, [pc, #456]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000e4c:	5499      	strb	r1, [r3, r2]
 8000e4e:	e0b3      	b.n	8000fb8 <HAL_UART_RxCpltCallback+0x1b4>
		}
	}
	else
	{
		RS1_rxBuffer[rs1_inx++]='\n';
 8000e50:	4b71      	ldr	r3, [pc, #452]	@ (8001018 <HAL_UART_RxCpltCallback+0x214>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	b2d1      	uxtb	r1, r2
 8000e58:	4a6f      	ldr	r2, [pc, #444]	@ (8001018 <HAL_UART_RxCpltCallback+0x214>)
 8000e5a:	7011      	strb	r1, [r2, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000e60:	210a      	movs	r1, #10
 8000e62:	5499      	strb	r1, [r3, r2]
    	if(check_lrc(&RS1_rxBuffer[1],18,(char*)&RS1_rxBuffer[19]) == 1)
 8000e64:	4a6d      	ldr	r2, [pc, #436]	@ (800101c <HAL_UART_RxCpltCallback+0x218>)
 8000e66:	2112      	movs	r1, #18
 8000e68:	486d      	ldr	r0, [pc, #436]	@ (8001020 <HAL_UART_RxCpltCallback+0x21c>)
 8000e6a:	f001 f8f4 	bl	8002056 <check_lrc>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	f040 8099 	bne.w	8000fa8 <HAL_UART_RxCpltCallback+0x1a4>
    	{
			if (RS1_rxBuffer[1] == '0' && RS1_rxBuffer[2] == '1')
 8000e76:	4b67      	ldr	r3, [pc, #412]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	2b30      	cmp	r3, #48	@ 0x30
 8000e7c:	d147      	bne.n	8000f0e <HAL_UART_RxCpltCallback+0x10a>
 8000e7e:	4b65      	ldr	r3, [pc, #404]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b31      	cmp	r3, #49	@ 0x31
 8000e84:	d143      	bne.n	8000f0e <HAL_UART_RxCpltCallback+0x10a>
					{ // Kiểm tra địa chỉ
				if (RS1_rxBuffer[3] == '0' && RS1_rxBuffer[4] == '2')
 8000e86:	4b63      	ldr	r3, [pc, #396]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000e88:	78db      	ldrb	r3, [r3, #3]
 8000e8a:	2b30      	cmp	r3, #48	@ 0x30
 8000e8c:	d117      	bne.n	8000ebe <HAL_UART_RxCpltCallback+0xba>
 8000e8e:	4b61      	ldr	r3, [pc, #388]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	2b32      	cmp	r3, #50	@ 0x32
 8000e94:	d113      	bne.n	8000ebe <HAL_UART_RxCpltCallback+0xba>
				{
					HAL_TIM_Base_Start_IT(&htim2);
 8000e96:	4863      	ldr	r0, [pc, #396]	@ (8001024 <HAL_UART_RxCpltCallback+0x220>)
 8000e98:	f002 fe4a 	bl	8003b30 <HAL_TIM_Base_Start_IT>
					decode_ppm_ver3((char*)RS1_rxBuffer,&ppm_data_1);
 8000e9c:	4962      	ldr	r1, [pc, #392]	@ (8001028 <HAL_UART_RxCpltCallback+0x224>)
 8000e9e:	485d      	ldr	r0, [pc, #372]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000ea0:	f001 f99e 	bl	80021e0 <decode_ppm_ver3>
					receive_node1_flag=1; // c�? nhận được dữ liệu từ node1
 8000ea4:	4b61      	ldr	r3, [pc, #388]	@ (800102c <HAL_UART_RxCpltCallback+0x228>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
					miss_data_node1_to_nodet_inx=0;
 8000eaa:	4b61      	ldr	r3, [pc, #388]	@ (8001030 <HAL_UART_RxCpltCallback+0x22c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
					Change_Time_Read_Data();
 8000eb0:	f001 fce6 	bl	8002880 <Change_Time_Read_Data>
					RS485_SendCommand(0x01, 0xAA); //AA = OK
 8000eb4:	21aa      	movs	r1, #170	@ 0xaa
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f001 f90a 	bl	80020d0 <RS485_SendCommand>
				if (RS1_rxBuffer[3] == '0' && RS1_rxBuffer[4] == '2')
 8000ebc:	e073      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x1a2>
				}
				 else if(RS1_rxBuffer[3] == '0' && RS1_rxBuffer[4] == '3') // nhận được nhi�?u dữ liệu
 8000ebe:	4b55      	ldr	r3, [pc, #340]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000ec0:	78db      	ldrb	r3, [r3, #3]
 8000ec2:	2b30      	cmp	r3, #48	@ 0x30
 8000ec4:	d16f      	bne.n	8000fa6 <HAL_UART_RxCpltCallback+0x1a2>
 8000ec6:	4b53      	ldr	r3, [pc, #332]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000ec8:	791b      	ldrb	r3, [r3, #4]
 8000eca:	2b33      	cmp	r3, #51	@ 0x33
 8000ecc:	d16b      	bne.n	8000fa6 <HAL_UART_RxCpltCallback+0x1a2>
				{
					HAL_TIM_Base_Stop_IT(&htim2);
 8000ece:	4855      	ldr	r0, [pc, #340]	@ (8001024 <HAL_UART_RxCpltCallback+0x220>)
 8000ed0:	f002 fe80 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
					strcpy(&string_data_rec1[miss_data_node1_to_nodet_inx][5],(char*)&RS1_rxBuffer[5]);
 8000ed4:	4b56      	ldr	r3, [pc, #344]	@ (8001030 <HAL_UART_RxCpltCallback+0x22c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	3305      	adds	r3, #5
 8000ee4:	4a53      	ldr	r2, [pc, #332]	@ (8001034 <HAL_UART_RxCpltCallback+0x230>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4953      	ldr	r1, [pc, #332]	@ (8001038 <HAL_UART_RxCpltCallback+0x234>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fd4b 	bl	8006986 <strcpy>
					miss_data_node1_to_nodet_inx++;
 8000ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8001030 <HAL_UART_RxCpltCallback+0x22c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8001030 <HAL_UART_RxCpltCallback+0x22c>)
 8000efa:	701a      	strb	r2, [r3, #0]
					miss_data_node1_to_gw_inx = miss_data_node1_to_nodet_inx;
 8000efc:	4b4c      	ldr	r3, [pc, #304]	@ (8001030 <HAL_UART_RxCpltCallback+0x22c>)
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	4b4e      	ldr	r3, [pc, #312]	@ (800103c <HAL_UART_RxCpltCallback+0x238>)
 8000f02:	701a      	strb	r2, [r3, #0]
					RS485_SendCommand(0x01, 0xBB); // gui ve node do la da luu thanh cong
 8000f04:	21bb      	movs	r1, #187	@ 0xbb
 8000f06:	2001      	movs	r0, #1
 8000f08:	f001 f8e2 	bl	80020d0 <RS485_SendCommand>
				if (RS1_rxBuffer[3] == '0' && RS1_rxBuffer[4] == '2')
 8000f0c:	e04b      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x1a2>
				}
			   }
			// node 2
			else if (RS1_rxBuffer[1] == '0' && RS1_rxBuffer[2] == '2')
 8000f0e:	4b41      	ldr	r3, [pc, #260]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	2b30      	cmp	r3, #48	@ 0x30
 8000f14:	d148      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x1a4>
 8000f16:	4b3f      	ldr	r3, [pc, #252]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	2b32      	cmp	r3, #50	@ 0x32
 8000f1c:	d144      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x1a4>
					{ // Kiểm tra địa chỉ
				if (RS1_rxBuffer[3] == '0' && RS1_rxBuffer[4] == '2')
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000f20:	78db      	ldrb	r3, [r3, #3]
 8000f22:	2b30      	cmp	r3, #48	@ 0x30
 8000f24:	d117      	bne.n	8000f56 <HAL_UART_RxCpltCallback+0x152>
 8000f26:	4b3b      	ldr	r3, [pc, #236]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	2b32      	cmp	r3, #50	@ 0x32
 8000f2c:	d113      	bne.n	8000f56 <HAL_UART_RxCpltCallback+0x152>
				{
					HAL_TIM_Base_Start_IT(&htim2);
 8000f2e:	483d      	ldr	r0, [pc, #244]	@ (8001024 <HAL_UART_RxCpltCallback+0x220>)
 8000f30:	f002 fdfe 	bl	8003b30 <HAL_TIM_Base_Start_IT>
					decode_ppm_ver3((char*)RS1_rxBuffer,&ppm_data_2);
 8000f34:	4942      	ldr	r1, [pc, #264]	@ (8001040 <HAL_UART_RxCpltCallback+0x23c>)
 8000f36:	4837      	ldr	r0, [pc, #220]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000f38:	f001 f952 	bl	80021e0 <decode_ppm_ver3>
					receive_node2_flag=1;
 8000f3c:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <HAL_UART_RxCpltCallback+0x240>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
					miss_data_node2_to_nodet_inx=0;
 8000f42:	4b41      	ldr	r3, [pc, #260]	@ (8001048 <HAL_UART_RxCpltCallback+0x244>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
					Change_Time_Read_Data();
 8000f48:	f001 fc9a 	bl	8002880 <Change_Time_Read_Data>
					RS485_SendCommand(0x02, 0xAA);
 8000f4c:	21aa      	movs	r1, #170	@ 0xaa
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f001 f8be 	bl	80020d0 <RS485_SendCommand>
 8000f54:	e028      	b.n	8000fa8 <HAL_UART_RxCpltCallback+0x1a4>
				}
				else if(RS1_rxBuffer[3] == '0' && RS1_rxBuffer[4] == '3')
 8000f56:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000f58:	78db      	ldrb	r3, [r3, #3]
 8000f5a:	2b30      	cmp	r3, #48	@ 0x30
 8000f5c:	d124      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x1a4>
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000f60:	791b      	ldrb	r3, [r3, #4]
 8000f62:	2b33      	cmp	r3, #51	@ 0x33
 8000f64:	d120      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x1a4>
				{
					HAL_TIM_Base_Stop_IT(&htim2);
 8000f66:	482f      	ldr	r0, [pc, #188]	@ (8001024 <HAL_UART_RxCpltCallback+0x220>)
 8000f68:	f002 fe34 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
					strcpy(&string_data_rec2[miss_data_node2_to_nodet_inx][5],(char*)&RS1_rxBuffer[5]);
 8000f6c:	4b36      	ldr	r3, [pc, #216]	@ (8001048 <HAL_UART_RxCpltCallback+0x244>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	3305      	adds	r3, #5
 8000f7c:	4a33      	ldr	r2, [pc, #204]	@ (800104c <HAL_UART_RxCpltCallback+0x248>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	492d      	ldr	r1, [pc, #180]	@ (8001038 <HAL_UART_RxCpltCallback+0x234>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 fcff 	bl	8006986 <strcpy>
					miss_data_node2_to_nodet_inx++;
 8000f88:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <HAL_UART_RxCpltCallback+0x244>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <HAL_UART_RxCpltCallback+0x244>)
 8000f92:	701a      	strb	r2, [r3, #0]
					miss_data_node2_to_gw_inx = miss_data_node2_to_nodet_inx;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <HAL_UART_RxCpltCallback+0x244>)
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <HAL_UART_RxCpltCallback+0x24c>)
 8000f9a:	701a      	strb	r2, [r3, #0]
					RS485_SendCommand(0x02, 0xBB);
 8000f9c:	21bb      	movs	r1, #187	@ 0xbb
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f001 f896 	bl	80020d0 <RS485_SendCommand>
 8000fa4:	e000      	b.n	8000fa8 <HAL_UART_RxCpltCallback+0x1a4>
				if (RS1_rxBuffer[3] == '0' && RS1_rxBuffer[4] == '2')
 8000fa6:	bf00      	nop
				}
			   }
		 }
 		rs1_inx=0;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <HAL_UART_RxCpltCallback+0x214>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
 		memset(RS1_rxBuffer,0,sizeof(RS1_rxBuffer));
 8000fae:	221e      	movs	r2, #30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4818      	ldr	r0, [pc, #96]	@ (8001014 <HAL_UART_RxCpltCallback+0x210>)
 8000fb4:	f005 fc55 	bl	8006862 <memset>
    }
        HAL_UART_Receive_IT(&huart1, rs1_temp, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4915      	ldr	r1, [pc, #84]	@ (8001010 <HAL_UART_RxCpltCallback+0x20c>)
 8000fbc:	4825      	ldr	r0, [pc, #148]	@ (8001054 <HAL_UART_RxCpltCallback+0x250>)
 8000fbe:	f003 feaa 	bl	8004d16 <HAL_UART_Receive_IT>
    }


       //Nhận lệnh từ gateway
        if (huart->Instance == USART2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a24      	ldr	r2, [pc, #144]	@ (8001058 <HAL_UART_RxCpltCallback+0x254>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	f040 850c 	bne.w	80019e6 <HAL_UART_RxCpltCallback+0xbe2>
        {
		// nhận bản tin từ từ : đến \n
		if(rs2_temp[0] != '\n') // nhận các kí tự đến \n
 8000fce:	4b23      	ldr	r3, [pc, #140]	@ (800105c <HAL_UART_RxCpltCallback+0x258>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b0a      	cmp	r3, #10
 8000fd4:	d048      	beq.n	8001068 <HAL_UART_RxCpltCallback+0x264>
		{
			if(rs2_temp[0]==':') // kí tự bắt đầu phải là :
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <HAL_UART_RxCpltCallback+0x258>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b3a      	cmp	r3, #58	@ 0x3a
 8000fdc:	d108      	bne.n	8000ff0 <HAL_UART_RxCpltCallback+0x1ec>
			{
				RS2_rxBuffer[0]=rs2_temp[0];
 8000fde:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <HAL_UART_RxCpltCallback+0x258>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <HAL_UART_RxCpltCallback+0x25c>)
 8000fe4:	701a      	strb	r2, [r3, #0]
				rs2_inx=1;
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <HAL_UART_RxCpltCallback+0x260>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	f000 bcf6 	b.w	80019dc <HAL_UART_RxCpltCallback+0xbd8>
			}
			else
			{
				RS2_rxBuffer[rs2_inx++]=rs2_temp[0];  // nhận các kí tự tiếp theo
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <HAL_UART_RxCpltCallback+0x260>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	b2d1      	uxtb	r1, r2
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8001064 <HAL_UART_RxCpltCallback+0x260>)
 8000ffa:	7011      	strb	r1, [r2, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <HAL_UART_RxCpltCallback+0x258>)
 8001000:	7819      	ldrb	r1, [r3, #0]
 8001002:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <HAL_UART_RxCpltCallback+0x25c>)
 8001004:	5499      	strb	r1, [r3, r2]
 8001006:	f000 bce9 	b.w	80019dc <HAL_UART_RxCpltCallback+0xbd8>
 800100a:	bf00      	nop
 800100c:	40013800 	.word	0x40013800
 8001010:	200003e4 	.word	0x200003e4
 8001014:	20000374 	.word	0x20000374
 8001018:	200003e6 	.word	0x200003e6
 800101c:	20000387 	.word	0x20000387
 8001020:	20000375 	.word	0x20000375
 8001024:	20000240 	.word	0x20000240
 8001028:	200003ec 	.word	0x200003ec
 800102c:	20000006 	.word	0x20000006
 8001030:	200003ff 	.word	0x200003ff
 8001034:	200013a8 	.word	0x200013a8
 8001038:	20000379 	.word	0x20000379
 800103c:	20000402 	.word	0x20000402
 8001040:	200003f4 	.word	0x200003f4
 8001044:	20000007 	.word	0x20000007
 8001048:	20000400 	.word	0x20000400
 800104c:	20001b78 	.word	0x20001b78
 8001050:	20000403 	.word	0x20000403
 8001054:	200002d0 	.word	0x200002d0
 8001058:	40004400 	.word	0x40004400
 800105c:	200003e8 	.word	0x200003e8
 8001060:	200003bc 	.word	0x200003bc
 8001064:	200003ea 	.word	0x200003ea
			}
		}
		else // nhận xong 1 bản tin rồi xử lý dữ liệu
		{
			RS2_rxBuffer[rs2_inx++]='\n'; // chèn kí tự \n vào cuối bản tin
 8001068:	4bb2      	ldr	r3, [pc, #712]	@ (8001334 <HAL_UART_RxCpltCallback+0x530>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	b2d1      	uxtb	r1, r2
 8001070:	4ab0      	ldr	r2, [pc, #704]	@ (8001334 <HAL_UART_RxCpltCallback+0x530>)
 8001072:	7011      	strb	r1, [r2, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4bb0      	ldr	r3, [pc, #704]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 8001078:	210a      	movs	r1, #10
 800107a:	5499      	strb	r1, [r3, r2]
        	if(check_lrc(&RS2_rxBuffer[1],4,(char*)&RS2_rxBuffer[5]) == 1)
 800107c:	4aaf      	ldr	r2, [pc, #700]	@ (800133c <HAL_UART_RxCpltCallback+0x538>)
 800107e:	2104      	movs	r1, #4
 8001080:	48af      	ldr	r0, [pc, #700]	@ (8001340 <HAL_UART_RxCpltCallback+0x53c>)
 8001082:	f000 ffe8 	bl	8002056 <check_lrc>
 8001086:	4603      	mov	r3, r0
 8001088:	2b01      	cmp	r3, #1
 800108a:	f040 8494 	bne.w	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
        	 {
				if (RS2_rxBuffer[1] == '1' && RS2_rxBuffer[2] == '1')
 800108e:	4baa      	ldr	r3, [pc, #680]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	2b31      	cmp	r3, #49	@ 0x31
 8001094:	f040 848f 	bne.w	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
 8001098:	4ba7      	ldr	r3, [pc, #668]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 800109a:	789b      	ldrb	r3, [r3, #2]
 800109c:	2b31      	cmp	r3, #49	@ 0x31
 800109e:	f040 848a 	bne.w	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
				{ // Kiểm tra địa chỉ
					connect_gw_error_flag=0;
 80010a2:	4ba8      	ldr	r3, [pc, #672]	@ (8001344 <HAL_UART_RxCpltCallback+0x540>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
					if (RS2_rxBuffer[3] == '0' && RS2_rxBuffer[4] == '2')
 80010a8:	4ba3      	ldr	r3, [pc, #652]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 80010aa:	78db      	ldrb	r3, [r3, #3]
 80010ac:	2b30      	cmp	r3, #48	@ 0x30
 80010ae:	d13d      	bne.n	800112c <HAL_UART_RxCpltCallback+0x328>
 80010b0:	4ba1      	ldr	r3, [pc, #644]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 80010b2:	791b      	ldrb	r3, [r3, #4]
 80010b4:	2b32      	cmp	r3, #50	@ 0x32
 80010b6:	d139      	bne.n	800112c <HAL_UART_RxCpltCallback+0x328>
					{
						RS2_txBuffer[0]=':';
 80010b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80010ba:	223a      	movs	r2, #58	@ 0x3a
 80010bc:	701a      	strb	r2, [r3, #0]
						// Gửi phản hồi
						hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 80010be:	4ba3      	ldr	r3, [pc, #652]	@ (800134c <HAL_UART_RxCpltCallback+0x548>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	49a3      	ldr	r1, [pc, #652]	@ (8001350 <HAL_UART_RxCpltCallback+0x54c>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fff1 	bl	80020ac <hexdec_to_ascii>
						RS2_txBuffer[3] = '0';
 80010ca:	4b9f      	ldr	r3, [pc, #636]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80010cc:	2230      	movs	r2, #48	@ 0x30
 80010ce:	70da      	strb	r2, [r3, #3]
						RS2_txBuffer[4] = '2';
 80010d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80010d2:	2232      	movs	r2, #50	@ 0x32
 80010d4:	711a      	strb	r2, [r3, #4]

						// G�?i hàm để mã hóa dữ liệu ppm_data_1 vào RS2_txBuffer bắt đầu từ vị trí 5
						encode_ppm_data(ppm_data_1, RS2_txBuffer, 5);
 80010d6:	499f      	ldr	r1, [pc, #636]	@ (8001354 <HAL_UART_RxCpltCallback+0x550>)
 80010d8:	2305      	movs	r3, #5
 80010da:	4a9b      	ldr	r2, [pc, #620]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80010dc:	c903      	ldmia	r1, {r0, r1}
 80010de:	f001 f833 	bl	8002148 <encode_ppm_data>

						// G�?i hàm để mã hóa dữ liệu ppm_data_2 vào RS2_txBuffer bắt đầu từ vị trí 19
						encode_ppm_data(ppm_data_2, RS2_txBuffer, 19);
 80010e2:	499d      	ldr	r1, [pc, #628]	@ (8001358 <HAL_UART_RxCpltCallback+0x554>)
 80010e4:	2313      	movs	r3, #19
 80010e6:	4a98      	ldr	r2, [pc, #608]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80010e8:	c903      	ldmia	r1, {r0, r1}
 80010ea:	f001 f82d 	bl	8002148 <encode_ppm_data>

						lrc = calculate_lrc(&RS2_txBuffer[1],32);
 80010ee:	2120      	movs	r1, #32
 80010f0:	4897      	ldr	r0, [pc, #604]	@ (8001350 <HAL_UART_RxCpltCallback+0x54c>)
 80010f2:	f000 ff77 	bl	8001fe4 <calculate_lrc>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b98      	ldr	r3, [pc, #608]	@ (800135c <HAL_UART_RxCpltCallback+0x558>)
 80010fc:	701a      	strb	r2, [r3, #0]
						hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 80010fe:	4b97      	ldr	r3, [pc, #604]	@ (800135c <HAL_UART_RxCpltCallback+0x558>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4997      	ldr	r1, [pc, #604]	@ (8001360 <HAL_UART_RxCpltCallback+0x55c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f000 ffd1 	bl	80020ac <hexdec_to_ascii>
						RS2_txBuffer[35]=0x0D ;
 800110a:	4b8f      	ldr	r3, [pc, #572]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 800110c:	220d      	movs	r2, #13
 800110e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
						RS2_txBuffer[36]=0x0A ;
 8001112:	4b8d      	ldr	r3, [pc, #564]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 8001114:	220a      	movs	r2, #10
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
						HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	2228      	movs	r2, #40	@ 0x28
 8001120:	4989      	ldr	r1, [pc, #548]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 8001122:	4890      	ldr	r0, [pc, #576]	@ (8001364 <HAL_UART_RxCpltCallback+0x560>)
 8001124:	f003 fcd5 	bl	8004ad2 <HAL_UART_Transmit>
 8001128:	f000 bc45 	b.w	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
					}
					else if(RS2_rxBuffer[3] == 'A' && RS2_rxBuffer[4] == 'A') // nhận lại oke
 800112c:	4b82      	ldr	r3, [pc, #520]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	2b41      	cmp	r3, #65	@ 0x41
 8001132:	d12c      	bne.n	800118e <HAL_UART_RxCpltCallback+0x38a>
 8001134:	4b80      	ldr	r3, [pc, #512]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	2b41      	cmp	r3, #65	@ 0x41
 800113a:	d128      	bne.n	800118e <HAL_UART_RxCpltCallback+0x38a>
					{
						HAL_TIM_Base_Start_IT(&htim3);
 800113c:	488a      	ldr	r0, [pc, #552]	@ (8001368 <HAL_UART_RxCpltCallback+0x564>)
 800113e:	f002 fcf7 	bl	8003b30 <HAL_TIM_Base_Start_IT>
						connect_gw_error_flag=0;
 8001142:	4b80      	ldr	r3, [pc, #512]	@ (8001344 <HAL_UART_RxCpltCallback+0x540>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
						miss_data_nodet_to_gw_inx=0;
 8001148:	4b88      	ldr	r3, [pc, #544]	@ (800136c <HAL_UART_RxCpltCallback+0x568>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
						miss_data_node1_to_gw_inx=0;
 800114e:	4b88      	ldr	r3, [pc, #544]	@ (8001370 <HAL_UART_RxCpltCallback+0x56c>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
						miss_data_node2_to_gw_inx=0;
 8001154:	4b87      	ldr	r3, [pc, #540]	@ (8001374 <HAL_UART_RxCpltCallback+0x570>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
						send_n1_inx=0;
 800115a:	4b87      	ldr	r3, [pc, #540]	@ (8001378 <HAL_UART_RxCpltCallback+0x574>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
						send_n2_inx=0;
 8001160:	4b86      	ldr	r3, [pc, #536]	@ (800137c <HAL_UART_RxCpltCallback+0x578>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
						memset(string_data_rec1, 0, sizeof(string_data_rec1));
 8001166:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800116a:	2100      	movs	r1, #0
 800116c:	4884      	ldr	r0, [pc, #528]	@ (8001380 <HAL_UART_RxCpltCallback+0x57c>)
 800116e:	f005 fb78 	bl	8006862 <memset>
						memset(string_data_rec2, 0, sizeof(string_data_rec2));
 8001172:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001176:	2100      	movs	r1, #0
 8001178:	4882      	ldr	r0, [pc, #520]	@ (8001384 <HAL_UART_RxCpltCallback+0x580>)
 800117a:	f005 fb72 	bl	8006862 <memset>
						memset(string_data_tran, 0, sizeof(string_data_tran));
 800117e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001182:	2100      	movs	r1, #0
 8001184:	4880      	ldr	r0, [pc, #512]	@ (8001388 <HAL_UART_RxCpltCallback+0x584>)
 8001186:	f005 fb6c 	bl	8006862 <memset>
 800118a:	f000 bc14 	b.w	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
					}
					else if(RS2_rxBuffer[3] == '0' && RS2_rxBuffer[4] == '3') // th mat ket noi len gw
 800118e:	4b6a      	ldr	r3, [pc, #424]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 8001190:	78db      	ldrb	r3, [r3, #3]
 8001192:	2b30      	cmp	r3, #48	@ 0x30
 8001194:	f040 8100 	bne.w	8001398 <HAL_UART_RxCpltCallback+0x594>
 8001198:	4b67      	ldr	r3, [pc, #412]	@ (8001338 <HAL_UART_RxCpltCallback+0x534>)
 800119a:	791b      	ldrb	r3, [r3, #4]
 800119c:	2b33      	cmp	r3, #51	@ 0x33
 800119e:	f040 80fb 	bne.w	8001398 <HAL_UART_RxCpltCallback+0x594>
					{
						 if( miss_data_nodet_to_gw_inx!=0)
 80011a2:	4b72      	ldr	r3, [pc, #456]	@ (800136c <HAL_UART_RxCpltCallback+0x568>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8097 	beq.w	80012da <HAL_UART_RxCpltCallback+0x4d6>
						 {
							 while(send_gw_inx<miss_data_nodet_to_gw_inx)
 80011ac:	e04d      	b.n	800124a <HAL_UART_RxCpltCallback+0x446>
							 {
								RS2_txBuffer[0]=':';
 80011ae:	4b66      	ldr	r3, [pc, #408]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80011b0:	223a      	movs	r2, #58	@ 0x3a
 80011b2:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 80011b4:	4b65      	ldr	r3, [pc, #404]	@ (800134c <HAL_UART_RxCpltCallback+0x548>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4965      	ldr	r1, [pc, #404]	@ (8001350 <HAL_UART_RxCpltCallback+0x54c>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 ff76 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[3] = '0';
 80011c0:	4b61      	ldr	r3, [pc, #388]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80011c2:	2230      	movs	r2, #48	@ 0x30
 80011c4:	70da      	strb	r2, [r3, #3]
								RS2_txBuffer[4] = '3';
 80011c6:	4b60      	ldr	r3, [pc, #384]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80011c8:	2233      	movs	r2, #51	@ 0x33
 80011ca:	711a      	strb	r2, [r3, #4]
								strcpy((char*)&RS2_txBuffer[5], &string_data_tran[send_gw_inx][5]);
 80011cc:	4b6f      	ldr	r3, [pc, #444]	@ (800138c <HAL_UART_RxCpltCallback+0x588>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	3305      	adds	r3, #5
 80011dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001388 <HAL_UART_RxCpltCallback+0x584>)
 80011de:	4413      	add	r3, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	486b      	ldr	r0, [pc, #428]	@ (8001390 <HAL_UART_RxCpltCallback+0x58c>)
 80011e4:	f005 fbcf 	bl	8006986 <strcpy>
								lrc = calculate_lrc(&RS2_txBuffer[1],32);
 80011e8:	2120      	movs	r1, #32
 80011ea:	4859      	ldr	r0, [pc, #356]	@ (8001350 <HAL_UART_RxCpltCallback+0x54c>)
 80011ec:	f000 fefa 	bl	8001fe4 <calculate_lrc>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b59      	ldr	r3, [pc, #356]	@ (800135c <HAL_UART_RxCpltCallback+0x558>)
 80011f6:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 80011f8:	4b58      	ldr	r3, [pc, #352]	@ (800135c <HAL_UART_RxCpltCallback+0x558>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4958      	ldr	r1, [pc, #352]	@ (8001360 <HAL_UART_RxCpltCallback+0x55c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 ff54 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[35]=0x0D ;
 8001204:	4b50      	ldr	r3, [pc, #320]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 8001206:	220d      	movs	r2, #13
 8001208:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
								RS2_txBuffer[36]=0x0A ;
 800120c:	4b4e      	ldr	r3, [pc, #312]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 800120e:	220a      	movs	r2, #10
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
								 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	2228      	movs	r2, #40	@ 0x28
 800121a:	494b      	ldr	r1, [pc, #300]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 800121c:	4851      	ldr	r0, [pc, #324]	@ (8001364 <HAL_UART_RxCpltCallback+0x560>)
 800121e:	f003 fc58 	bl	8004ad2 <HAL_UART_Transmit>
								 HAL_UART_Receive(&huart2 ,RS2_rx, 10, HAL_MAX_DELAY);
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	220a      	movs	r2, #10
 8001228:	495a      	ldr	r1, [pc, #360]	@ (8001394 <HAL_UART_RxCpltCallback+0x590>)
 800122a:	484e      	ldr	r0, [pc, #312]	@ (8001364 <HAL_UART_RxCpltCallback+0x560>)
 800122c:	f003 fcdc 	bl	8004be8 <HAL_UART_Receive>
								 if( RS2_rx[4] == 'B')
 8001230:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <HAL_UART_RxCpltCallback+0x590>)
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	2b42      	cmp	r3, #66	@ 0x42
 8001236:	d108      	bne.n	800124a <HAL_UART_RxCpltCallback+0x446>
								 {
									 HAL_TIM_Base_Stop_IT(&htim3);
 8001238:	484b      	ldr	r0, [pc, #300]	@ (8001368 <HAL_UART_RxCpltCallback+0x564>)
 800123a:	f002 fccb 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
									 send_gw_inx++;
 800123e:	4b53      	ldr	r3, [pc, #332]	@ (800138c <HAL_UART_RxCpltCallback+0x588>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b51      	ldr	r3, [pc, #324]	@ (800138c <HAL_UART_RxCpltCallback+0x588>)
 8001248:	701a      	strb	r2, [r3, #0]
							 while(send_gw_inx<miss_data_nodet_to_gw_inx)
 800124a:	4b50      	ldr	r3, [pc, #320]	@ (800138c <HAL_UART_RxCpltCallback+0x588>)
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <HAL_UART_RxCpltCallback+0x568>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3ab      	bcc.n	80011ae <HAL_UART_RxCpltCallback+0x3aa>
								 }
							 }
							 if(send_gw_inx==miss_data_nodet_to_gw_inx)
 8001256:	4b4d      	ldr	r3, [pc, #308]	@ (800138c <HAL_UART_RxCpltCallback+0x588>)
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	4b44      	ldr	r3, [pc, #272]	@ (800136c <HAL_UART_RxCpltCallback+0x568>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	f040 83a4 	bne.w	80019ac <HAL_UART_RxCpltCallback+0xba8>
							 {
								RS2_txBuffer[0]=':';
 8001264:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 8001266:	223a      	movs	r2, #58	@ 0x3a
 8001268:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 800126a:	4b38      	ldr	r3, [pc, #224]	@ (800134c <HAL_UART_RxCpltCallback+0x548>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4938      	ldr	r1, [pc, #224]	@ (8001350 <HAL_UART_RxCpltCallback+0x54c>)
 8001270:	4618      	mov	r0, r3
 8001272:	f000 ff1b 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[3] = '0';
 8001276:	4b34      	ldr	r3, [pc, #208]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 8001278:	2230      	movs	r2, #48	@ 0x30
 800127a:	70da      	strb	r2, [r3, #3]
								RS2_txBuffer[4] = '2';
 800127c:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 800127e:	2232      	movs	r2, #50	@ 0x32
 8001280:	711a      	strb	r2, [r3, #4]
								strcpy((char*)&RS2_txBuffer[5], &string_data_tran[send_gw_inx][5]);
 8001282:	4b42      	ldr	r3, [pc, #264]	@ (800138c <HAL_UART_RxCpltCallback+0x588>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	3305      	adds	r3, #5
 8001292:	4a3d      	ldr	r2, [pc, #244]	@ (8001388 <HAL_UART_RxCpltCallback+0x584>)
 8001294:	4413      	add	r3, r2
 8001296:	4619      	mov	r1, r3
 8001298:	483d      	ldr	r0, [pc, #244]	@ (8001390 <HAL_UART_RxCpltCallback+0x58c>)
 800129a:	f005 fb74 	bl	8006986 <strcpy>
								lrc = calculate_lrc(&RS2_txBuffer[1],32);
 800129e:	2120      	movs	r1, #32
 80012a0:	482b      	ldr	r0, [pc, #172]	@ (8001350 <HAL_UART_RxCpltCallback+0x54c>)
 80012a2:	f000 fe9f 	bl	8001fe4 <calculate_lrc>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <HAL_UART_RxCpltCallback+0x558>)
 80012ac:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 80012ae:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <HAL_UART_RxCpltCallback+0x558>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	492b      	ldr	r1, [pc, #172]	@ (8001360 <HAL_UART_RxCpltCallback+0x55c>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fef9 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[35]=0x0D ;
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80012bc:	220d      	movs	r2, #13
 80012be:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
								RS2_txBuffer[36]=0x0A ;
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80012c4:	220a      	movs	r2, #10
 80012c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
								HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	2228      	movs	r2, #40	@ 0x28
 80012d0:	491d      	ldr	r1, [pc, #116]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80012d2:	4824      	ldr	r0, [pc, #144]	@ (8001364 <HAL_UART_RxCpltCallback+0x560>)
 80012d4:	f003 fbfd 	bl	8004ad2 <HAL_UART_Transmit>
						 if( miss_data_nodet_to_gw_inx!=0)
 80012d8:	e368      	b.n	80019ac <HAL_UART_RxCpltCallback+0xba8>
							 }
						 }
						 else // them vao neu k chay thi xoa
						 {
							RS2_txBuffer[0]=':';
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80012dc:	223a      	movs	r2, #58	@ 0x3a
 80012de:	701a      	strb	r2, [r3, #0]
							// Gửi phản hồi
							hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_UART_RxCpltCallback+0x548>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	491a      	ldr	r1, [pc, #104]	@ (8001350 <HAL_UART_RxCpltCallback+0x54c>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fee0 	bl	80020ac <hexdec_to_ascii>
							RS2_txBuffer[3] = '0';
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80012ee:	2230      	movs	r2, #48	@ 0x30
 80012f0:	70da      	strb	r2, [r3, #3]
							RS2_txBuffer[4] = '0';
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 80012f4:	2230      	movs	r2, #48	@ 0x30
 80012f6:	711a      	strb	r2, [r3, #4]
							lrc = calculate_lrc(&RS2_txBuffer[1],32);
 80012f8:	2120      	movs	r1, #32
 80012fa:	4815      	ldr	r0, [pc, #84]	@ (8001350 <HAL_UART_RxCpltCallback+0x54c>)
 80012fc:	f000 fe72 	bl	8001fe4 <calculate_lrc>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_UART_RxCpltCallback+0x558>)
 8001306:	701a      	strb	r2, [r3, #0]
							hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_UART_RxCpltCallback+0x558>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4914      	ldr	r1, [pc, #80]	@ (8001360 <HAL_UART_RxCpltCallback+0x55c>)
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fecc 	bl	80020ac <hexdec_to_ascii>
							RS2_txBuffer[35]=0x0D ;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 8001316:	220d      	movs	r2, #13
 8001318:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
							RS2_txBuffer[36]=0x0A ;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 800131e:	220a      	movs	r2, #10
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
							HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	2228      	movs	r2, #40	@ 0x28
 800132a:	4907      	ldr	r1, [pc, #28]	@ (8001348 <HAL_UART_RxCpltCallback+0x544>)
 800132c:	480d      	ldr	r0, [pc, #52]	@ (8001364 <HAL_UART_RxCpltCallback+0x560>)
 800132e:	f003 fbd0 	bl	8004ad2 <HAL_UART_Transmit>
						 if( miss_data_nodet_to_gw_inx!=0)
 8001332:	e33b      	b.n	80019ac <HAL_UART_RxCpltCallback+0xba8>
 8001334:	200003ea 	.word	0x200003ea
 8001338:	200003bc 	.word	0x200003bc
 800133c:	200003c1 	.word	0x200003c1
 8001340:	200003bd 	.word	0x200003bd
 8001344:	200003fd 	.word	0x200003fd
 8001348:	20000394 	.word	0x20000394
 800134c:	20000005 	.word	0x20000005
 8001350:	20000395 	.word	0x20000395
 8001354:	200003ec 	.word	0x200003ec
 8001358:	200003f4 	.word	0x200003f4
 800135c:	200003fc 	.word	0x200003fc
 8001360:	200003b5 	.word	0x200003b5
 8001364:	20000318 	.word	0x20000318
 8001368:	20000288 	.word	0x20000288
 800136c:	20000401 	.word	0x20000401
 8001370:	20000402 	.word	0x20000402
 8001374:	20000403 	.word	0x20000403
 8001378:	20000405 	.word	0x20000405
 800137c:	20000406 	.word	0x20000406
 8001380:	200013a8 	.word	0x200013a8
 8001384:	20001b78 	.word	0x20001b78
 8001388:	20000408 	.word	0x20000408
 800138c:	20000404 	.word	0x20000404
 8001390:	20000399 	.word	0x20000399
 8001394:	200003d0 	.word	0x200003d0
						 }
					}
				   else if(RS2_rxBuffer[3] == '2' && RS2_rxBuffer[4] == '1') // nhận lệnh gửi dữ liệu bị miss từ node1 lên node tổng
 8001398:	4b9c      	ldr	r3, [pc, #624]	@ (800160c <HAL_UART_RxCpltCallback+0x808>)
 800139a:	78db      	ldrb	r3, [r3, #3]
 800139c:	2b32      	cmp	r3, #50	@ 0x32
 800139e:	f040 80ec 	bne.w	800157a <HAL_UART_RxCpltCallback+0x776>
 80013a2:	4b9a      	ldr	r3, [pc, #616]	@ (800160c <HAL_UART_RxCpltCallback+0x808>)
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	2b31      	cmp	r3, #49	@ 0x31
 80013a8:	f040 80e7 	bne.w	800157a <HAL_UART_RxCpltCallback+0x776>
				   {
					   if(miss_data_node1_to_gw_inx==0) // chưa có dữ liệu từ node 1 lên node tổng
 80013ac:	4b98      	ldr	r3, [pc, #608]	@ (8001610 <HAL_UART_RxCpltCallback+0x80c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f040 808a 	bne.w	80014ca <HAL_UART_RxCpltCallback+0x6c6>
					   {
							RS2_txBuffer[0]=':';
 80013b6:	4b97      	ldr	r3, [pc, #604]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80013b8:	223a      	movs	r2, #58	@ 0x3a
 80013ba:	701a      	strb	r2, [r3, #0]
							// Gửi phản hồi
							hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 80013bc:	4b96      	ldr	r3, [pc, #600]	@ (8001618 <HAL_UART_RxCpltCallback+0x814>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4996      	ldr	r1, [pc, #600]	@ (800161c <HAL_UART_RxCpltCallback+0x818>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fe72 	bl	80020ac <hexdec_to_ascii>
							RS2_txBuffer[3] = '0';
 80013c8:	4b92      	ldr	r3, [pc, #584]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80013ca:	2230      	movs	r2, #48	@ 0x30
 80013cc:	70da      	strb	r2, [r3, #3]
							RS2_txBuffer[4] = '2';
 80013ce:	4b91      	ldr	r3, [pc, #580]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80013d0:	2232      	movs	r2, #50	@ 0x32
 80013d2:	711a      	strb	r2, [r3, #4]

							// G�?i hàm để mã hóa dữ liệu ppm_data_1 vào RS2_txBuffer bắt đầu từ vị trí 5
							encode_ppm_data(ppm_data_1, RS2_txBuffer, 5);
 80013d4:	4992      	ldr	r1, [pc, #584]	@ (8001620 <HAL_UART_RxCpltCallback+0x81c>)
 80013d6:	2305      	movs	r3, #5
 80013d8:	4a8e      	ldr	r2, [pc, #568]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80013da:	c903      	ldmia	r1, {r0, r1}
 80013dc:	f000 feb4 	bl	8002148 <encode_ppm_data>

							// G�?i hàm để mã hóa dữ liệu ppm_data_2 vào RS2_txBuffer bắt đầu từ vị trí 19
							encode_ppm_data(ppm_data_2, RS2_txBuffer, 19);
 80013e0:	4990      	ldr	r1, [pc, #576]	@ (8001624 <HAL_UART_RxCpltCallback+0x820>)
 80013e2:	2313      	movs	r3, #19
 80013e4:	4a8b      	ldr	r2, [pc, #556]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80013e6:	c903      	ldmia	r1, {r0, r1}
 80013e8:	f000 feae 	bl	8002148 <encode_ppm_data>

							lrc = calculate_lrc(&RS2_txBuffer[1],32);
 80013ec:	2120      	movs	r1, #32
 80013ee:	488b      	ldr	r0, [pc, #556]	@ (800161c <HAL_UART_RxCpltCallback+0x818>)
 80013f0:	f000 fdf8 	bl	8001fe4 <calculate_lrc>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b8b      	ldr	r3, [pc, #556]	@ (8001628 <HAL_UART_RxCpltCallback+0x824>)
 80013fa:	701a      	strb	r2, [r3, #0]
							hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 80013fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001628 <HAL_UART_RxCpltCallback+0x824>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	498a      	ldr	r1, [pc, #552]	@ (800162c <HAL_UART_RxCpltCallback+0x828>)
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fe52 	bl	80020ac <hexdec_to_ascii>
							RS2_txBuffer[35]=0x0D ;
 8001408:	4b82      	ldr	r3, [pc, #520]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 800140a:	220d      	movs	r2, #13
 800140c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
							RS2_txBuffer[36]=0x0A ;
 8001410:	4b80      	ldr	r3, [pc, #512]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001412:	220a      	movs	r2, #10
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
							HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	2228      	movs	r2, #40	@ 0x28
 800141e:	497d      	ldr	r1, [pc, #500]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001420:	4883      	ldr	r0, [pc, #524]	@ (8001630 <HAL_UART_RxCpltCallback+0x82c>)
 8001422:	f003 fb56 	bl	8004ad2 <HAL_UART_Transmit>
					   if(miss_data_node1_to_gw_inx==0) // chưa có dữ liệu từ node 1 lên node tổng
 8001426:	e2c3      	b.n	80019b0 <HAL_UART_RxCpltCallback+0xbac>
					   }
					   else // đã có dữ liệu từ node đo lên node tổng
					   {
							while(send_n1_inx<miss_data_node1_to_gw_inx -1)
							{
								RS2_txBuffer[0]=':';
 8001428:	4b7a      	ldr	r3, [pc, #488]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 800142a:	223a      	movs	r2, #58	@ 0x3a
 800142c:	701a      	strb	r2, [r3, #0]
								// Gửi phản hồi
								hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 800142e:	4b7a      	ldr	r3, [pc, #488]	@ (8001618 <HAL_UART_RxCpltCallback+0x814>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	497a      	ldr	r1, [pc, #488]	@ (800161c <HAL_UART_RxCpltCallback+0x818>)
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fe39 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[3] = '2';
 800143a:	4b76      	ldr	r3, [pc, #472]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 800143c:	2232      	movs	r2, #50	@ 0x32
 800143e:	70da      	strb	r2, [r3, #3]
								RS2_txBuffer[4] = '1';
 8001440:	4b74      	ldr	r3, [pc, #464]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001442:	2231      	movs	r2, #49	@ 0x31
 8001444:	711a      	strb	r2, [r3, #4]
								strncpy((char *)&RS2_txBuffer[5], &string_data_rec1[send_n1_inx][5], 14);
 8001446:	4b7b      	ldr	r3, [pc, #492]	@ (8001634 <HAL_UART_RxCpltCallback+0x830>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	3305      	adds	r3, #5
 8001456:	4a78      	ldr	r2, [pc, #480]	@ (8001638 <HAL_UART_RxCpltCallback+0x834>)
 8001458:	4413      	add	r3, r2
 800145a:	220e      	movs	r2, #14
 800145c:	4619      	mov	r1, r3
 800145e:	4877      	ldr	r0, [pc, #476]	@ (800163c <HAL_UART_RxCpltCallback+0x838>)
 8001460:	f005 fa07 	bl	8006872 <strncpy>
								memset(&RS2_txBuffer[19], 0, 14);
 8001464:	220e      	movs	r2, #14
 8001466:	2100      	movs	r1, #0
 8001468:	4875      	ldr	r0, [pc, #468]	@ (8001640 <HAL_UART_RxCpltCallback+0x83c>)
 800146a:	f005 f9fa 	bl	8006862 <memset>
								lrc = calculate_lrc(&RS2_txBuffer[1],32);
 800146e:	2120      	movs	r1, #32
 8001470:	486a      	ldr	r0, [pc, #424]	@ (800161c <HAL_UART_RxCpltCallback+0x818>)
 8001472:	f000 fdb7 	bl	8001fe4 <calculate_lrc>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b6b      	ldr	r3, [pc, #428]	@ (8001628 <HAL_UART_RxCpltCallback+0x824>)
 800147c:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 800147e:	4b6a      	ldr	r3, [pc, #424]	@ (8001628 <HAL_UART_RxCpltCallback+0x824>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	496a      	ldr	r1, [pc, #424]	@ (800162c <HAL_UART_RxCpltCallback+0x828>)
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fe11 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[35]=0x0D ;
 800148a:	4b62      	ldr	r3, [pc, #392]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 800148c:	220d      	movs	r2, #13
 800148e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
								RS2_txBuffer[36]=0x0A ;
 8001492:	4b60      	ldr	r3, [pc, #384]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001494:	220a      	movs	r2, #10
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
								 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	2228      	movs	r2, #40	@ 0x28
 80014a0:	495c      	ldr	r1, [pc, #368]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80014a2:	4863      	ldr	r0, [pc, #396]	@ (8001630 <HAL_UART_RxCpltCallback+0x82c>)
 80014a4:	f003 fb15 	bl	8004ad2 <HAL_UART_Transmit>
								 HAL_UART_Receive(&huart2 ,RS2_rx, 10, HAL_MAX_DELAY);
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	220a      	movs	r2, #10
 80014ae:	4965      	ldr	r1, [pc, #404]	@ (8001644 <HAL_UART_RxCpltCallback+0x840>)
 80014b0:	485f      	ldr	r0, [pc, #380]	@ (8001630 <HAL_UART_RxCpltCallback+0x82c>)
 80014b2:	f003 fb99 	bl	8004be8 <HAL_UART_Receive>
								 if(RS2_rx[4] == 'C')
 80014b6:	4b63      	ldr	r3, [pc, #396]	@ (8001644 <HAL_UART_RxCpltCallback+0x840>)
 80014b8:	791b      	ldrb	r3, [r3, #4]
 80014ba:	2b43      	cmp	r3, #67	@ 0x43
 80014bc:	d105      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x6c6>
								 {
									 send_n1_inx++;
 80014be:	4b5d      	ldr	r3, [pc, #372]	@ (8001634 <HAL_UART_RxCpltCallback+0x830>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001634 <HAL_UART_RxCpltCallback+0x830>)
 80014c8:	701a      	strb	r2, [r3, #0]
							while(send_n1_inx<miss_data_node1_to_gw_inx -1)
 80014ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001634 <HAL_UART_RxCpltCallback+0x830>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001610 <HAL_UART_RxCpltCallback+0x80c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dba6      	blt.n	8001428 <HAL_UART_RxCpltCallback+0x624>
								 }
							}
							 if(send_n1_inx == miss_data_node1_to_gw_inx -1) // gửi dữ liệu cuối cùng của vugnf nhớ (có lệnh 0x02) để gw quay v�? thực hiện tiếp như chưa có lỗi
 80014da:	4b56      	ldr	r3, [pc, #344]	@ (8001634 <HAL_UART_RxCpltCallback+0x830>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001610 <HAL_UART_RxCpltCallback+0x80c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	429a      	cmp	r2, r3
 80014e8:	f040 8262 	bne.w	80019b0 <HAL_UART_RxCpltCallback+0xbac>
							 {
								RS2_txBuffer[0]=':';
 80014ec:	4b49      	ldr	r3, [pc, #292]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80014ee:	223a      	movs	r2, #58	@ 0x3a
 80014f0:	701a      	strb	r2, [r3, #0]
								// Gửi phản hồi
								hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 80014f2:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <HAL_UART_RxCpltCallback+0x814>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4949      	ldr	r1, [pc, #292]	@ (800161c <HAL_UART_RxCpltCallback+0x818>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fdd7 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[3] = '0';
 80014fe:	4b45      	ldr	r3, [pc, #276]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001500:	2230      	movs	r2, #48	@ 0x30
 8001502:	70da      	strb	r2, [r3, #3]
								RS2_txBuffer[4] = '2';
 8001504:	4b43      	ldr	r3, [pc, #268]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001506:	2232      	movs	r2, #50	@ 0x32
 8001508:	711a      	strb	r2, [r3, #4]
								strncpy((char *)&RS2_txBuffer[5], &string_data_rec1[send_n1_inx][5], 14);
 800150a:	4b4a      	ldr	r3, [pc, #296]	@ (8001634 <HAL_UART_RxCpltCallback+0x830>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	3305      	adds	r3, #5
 800151a:	4a47      	ldr	r2, [pc, #284]	@ (8001638 <HAL_UART_RxCpltCallback+0x834>)
 800151c:	4413      	add	r3, r2
 800151e:	220e      	movs	r2, #14
 8001520:	4619      	mov	r1, r3
 8001522:	4846      	ldr	r0, [pc, #280]	@ (800163c <HAL_UART_RxCpltCallback+0x838>)
 8001524:	f005 f9a5 	bl	8006872 <strncpy>
								memset(&RS2_txBuffer[19], 0, 14);
 8001528:	220e      	movs	r2, #14
 800152a:	2100      	movs	r1, #0
 800152c:	4844      	ldr	r0, [pc, #272]	@ (8001640 <HAL_UART_RxCpltCallback+0x83c>)
 800152e:	f005 f998 	bl	8006862 <memset>
								lrc = calculate_lrc(&RS2_txBuffer[1],32);
 8001532:	2120      	movs	r1, #32
 8001534:	4839      	ldr	r0, [pc, #228]	@ (800161c <HAL_UART_RxCpltCallback+0x818>)
 8001536:	f000 fd55 	bl	8001fe4 <calculate_lrc>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <HAL_UART_RxCpltCallback+0x824>)
 8001540:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 8001542:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <HAL_UART_RxCpltCallback+0x824>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4939      	ldr	r1, [pc, #228]	@ (800162c <HAL_UART_RxCpltCallback+0x828>)
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fdaf 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[35]=0x0D ;
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001550:	220d      	movs	r2, #13
 8001552:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
								RS2_txBuffer[36]=0x0A ;
 8001556:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001558:	220a      	movs	r2, #10
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
								 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	2228      	movs	r2, #40	@ 0x28
 8001564:	492b      	ldr	r1, [pc, #172]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001566:	4832      	ldr	r0, [pc, #200]	@ (8001630 <HAL_UART_RxCpltCallback+0x82c>)
 8001568:	f003 fab3 	bl	8004ad2 <HAL_UART_Transmit>
								 send_n1_inx++;
 800156c:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <HAL_UART_RxCpltCallback+0x830>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b2f      	ldr	r3, [pc, #188]	@ (8001634 <HAL_UART_RxCpltCallback+0x830>)
 8001576:	701a      	strb	r2, [r3, #0]
					   if(miss_data_node1_to_gw_inx==0) // chưa có dữ liệu từ node 1 lên node tổng
 8001578:	e21a      	b.n	80019b0 <HAL_UART_RxCpltCallback+0xbac>
							 }
						 }
				   }
				   else if(RS2_rxBuffer[3] == '2' && RS2_rxBuffer[4] == '2')
 800157a:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_UART_RxCpltCallback+0x808>)
 800157c:	78db      	ldrb	r3, [r3, #3]
 800157e:	2b32      	cmp	r3, #50	@ 0x32
 8001580:	f040 8107 	bne.w	8001792 <HAL_UART_RxCpltCallback+0x98e>
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_UART_RxCpltCallback+0x808>)
 8001586:	791b      	ldrb	r3, [r3, #4]
 8001588:	2b32      	cmp	r3, #50	@ 0x32
 800158a:	f040 8102 	bne.w	8001792 <HAL_UART_RxCpltCallback+0x98e>
				   {
					   if(miss_data_node2_to_gw_inx==0) // chưa có dữ liệu từ node 2 lên node tổng
 800158e:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <HAL_UART_RxCpltCallback+0x844>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 80ab 	bne.w	80016ee <HAL_UART_RxCpltCallback+0x8ea>
					   {
							RS2_txBuffer[0]=':';
 8001598:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 800159a:	223a      	movs	r2, #58	@ 0x3a
 800159c:	701a      	strb	r2, [r3, #0]
							// Gửi phản hồi
							hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <HAL_UART_RxCpltCallback+0x814>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	491e      	ldr	r1, [pc, #120]	@ (800161c <HAL_UART_RxCpltCallback+0x818>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fd81 	bl	80020ac <hexdec_to_ascii>
							RS2_txBuffer[3] = '0';
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80015ac:	2230      	movs	r2, #48	@ 0x30
 80015ae:	70da      	strb	r2, [r3, #3]
							RS2_txBuffer[4] = '2';
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80015b2:	2232      	movs	r2, #50	@ 0x32
 80015b4:	711a      	strb	r2, [r3, #4]

							// G�?i hàm để mã hóa dữ liệu ppm_data_1 vào RS2_txBuffer bắt đầu từ vị trí 5
							encode_ppm_data(ppm_data_1, RS2_txBuffer, 5);
 80015b6:	491a      	ldr	r1, [pc, #104]	@ (8001620 <HAL_UART_RxCpltCallback+0x81c>)
 80015b8:	2305      	movs	r3, #5
 80015ba:	4a16      	ldr	r2, [pc, #88]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80015bc:	c903      	ldmia	r1, {r0, r1}
 80015be:	f000 fdc3 	bl	8002148 <encode_ppm_data>

							// G�?i hàm để mã hóa dữ liệu ppm_data_2 vào RS2_txBuffer bắt đầu từ vị trí 19
							encode_ppm_data(ppm_data_2, RS2_txBuffer, 19);
 80015c2:	4918      	ldr	r1, [pc, #96]	@ (8001624 <HAL_UART_RxCpltCallback+0x820>)
 80015c4:	2313      	movs	r3, #19
 80015c6:	4a13      	ldr	r2, [pc, #76]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80015c8:	c903      	ldmia	r1, {r0, r1}
 80015ca:	f000 fdbd 	bl	8002148 <encode_ppm_data>

							lrc = calculate_lrc(&RS2_txBuffer[1],32);
 80015ce:	2120      	movs	r1, #32
 80015d0:	4812      	ldr	r0, [pc, #72]	@ (800161c <HAL_UART_RxCpltCallback+0x818>)
 80015d2:	f000 fd07 	bl	8001fe4 <calculate_lrc>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_UART_RxCpltCallback+0x824>)
 80015dc:	701a      	strb	r2, [r3, #0]
							hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_UART_RxCpltCallback+0x824>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4912      	ldr	r1, [pc, #72]	@ (800162c <HAL_UART_RxCpltCallback+0x828>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fd61 	bl	80020ac <hexdec_to_ascii>
							RS2_txBuffer[35]=0x0D ;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80015ec:	220d      	movs	r2, #13
 80015ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
							RS2_txBuffer[36]=0x0A ;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 80015f4:	220a      	movs	r2, #10
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
							HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	2228      	movs	r2, #40	@ 0x28
 8001600:	4904      	ldr	r1, [pc, #16]	@ (8001614 <HAL_UART_RxCpltCallback+0x810>)
 8001602:	480b      	ldr	r0, [pc, #44]	@ (8001630 <HAL_UART_RxCpltCallback+0x82c>)
 8001604:	f003 fa65 	bl	8004ad2 <HAL_UART_Transmit>
					   if(miss_data_node2_to_gw_inx==0) // chưa có dữ liệu từ node 2 lên node tổng
 8001608:	e1d4      	b.n	80019b4 <HAL_UART_RxCpltCallback+0xbb0>
 800160a:	bf00      	nop
 800160c:	200003bc 	.word	0x200003bc
 8001610:	20000402 	.word	0x20000402
 8001614:	20000394 	.word	0x20000394
 8001618:	20000005 	.word	0x20000005
 800161c:	20000395 	.word	0x20000395
 8001620:	200003ec 	.word	0x200003ec
 8001624:	200003f4 	.word	0x200003f4
 8001628:	200003fc 	.word	0x200003fc
 800162c:	200003b5 	.word	0x200003b5
 8001630:	20000318 	.word	0x20000318
 8001634:	20000405 	.word	0x20000405
 8001638:	200013a8 	.word	0x200013a8
 800163c:	20000399 	.word	0x20000399
 8001640:	200003a7 	.word	0x200003a7
 8001644:	200003d0 	.word	0x200003d0
 8001648:	20000403 	.word	0x20000403
					   }
					   else // đã có dữ liệu từ node đo lên node tổng
					   {
							 while(send_n2_inx<miss_data_node2_to_gw_inx -1)
							{
								RS2_txBuffer[0]=':';
 800164c:	4b6f      	ldr	r3, [pc, #444]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 800164e:	223a      	movs	r2, #58	@ 0x3a
 8001650:	701a      	strb	r2, [r3, #0]
								// Gửi phản hồi
								hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 8001652:	4b6f      	ldr	r3, [pc, #444]	@ (8001810 <HAL_UART_RxCpltCallback+0xa0c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	496f      	ldr	r1, [pc, #444]	@ (8001814 <HAL_UART_RxCpltCallback+0xa10>)
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fd27 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[3] = '2';
 800165e:	4b6b      	ldr	r3, [pc, #428]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 8001660:	2232      	movs	r2, #50	@ 0x32
 8001662:	70da      	strb	r2, [r3, #3]
								RS2_txBuffer[4] = '2';
 8001664:	4b69      	ldr	r3, [pc, #420]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 8001666:	2232      	movs	r2, #50	@ 0x32
 8001668:	711a      	strb	r2, [r3, #4]
								memset(&RS2_txBuffer[5], 0, 14);
 800166a:	220e      	movs	r2, #14
 800166c:	2100      	movs	r1, #0
 800166e:	486a      	ldr	r0, [pc, #424]	@ (8001818 <HAL_UART_RxCpltCallback+0xa14>)
 8001670:	f005 f8f7 	bl	8006862 <memset>
								strncpy((char *)&RS2_txBuffer[19], &string_data_rec2[send_n2_inx][5], 14);
 8001674:	4b69      	ldr	r3, [pc, #420]	@ (800181c <HAL_UART_RxCpltCallback+0xa18>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	3305      	adds	r3, #5
 8001684:	4a66      	ldr	r2, [pc, #408]	@ (8001820 <HAL_UART_RxCpltCallback+0xa1c>)
 8001686:	4413      	add	r3, r2
 8001688:	220e      	movs	r2, #14
 800168a:	4619      	mov	r1, r3
 800168c:	4865      	ldr	r0, [pc, #404]	@ (8001824 <HAL_UART_RxCpltCallback+0xa20>)
 800168e:	f005 f8f0 	bl	8006872 <strncpy>
								lrc = calculate_lrc(&RS2_txBuffer[1],32);
 8001692:	2120      	movs	r1, #32
 8001694:	485f      	ldr	r0, [pc, #380]	@ (8001814 <HAL_UART_RxCpltCallback+0xa10>)
 8001696:	f000 fca5 	bl	8001fe4 <calculate_lrc>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b62      	ldr	r3, [pc, #392]	@ (8001828 <HAL_UART_RxCpltCallback+0xa24>)
 80016a0:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 80016a2:	4b61      	ldr	r3, [pc, #388]	@ (8001828 <HAL_UART_RxCpltCallback+0xa24>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4961      	ldr	r1, [pc, #388]	@ (800182c <HAL_UART_RxCpltCallback+0xa28>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fcff 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[35]=0x0D ;
 80016ae:	4b57      	ldr	r3, [pc, #348]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 80016b0:	220d      	movs	r2, #13
 80016b2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
								RS2_txBuffer[36]=0x0A ;
 80016b6:	4b55      	ldr	r3, [pc, #340]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 80016b8:	220a      	movs	r2, #10
 80016ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
								 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	2228      	movs	r2, #40	@ 0x28
 80016c4:	4951      	ldr	r1, [pc, #324]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 80016c6:	485a      	ldr	r0, [pc, #360]	@ (8001830 <HAL_UART_RxCpltCallback+0xa2c>)
 80016c8:	f003 fa03 	bl	8004ad2 <HAL_UART_Transmit>
								 HAL_UART_Receive(&huart2 ,RS2_rx, 10, HAL_MAX_DELAY);
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
 80016d0:	220a      	movs	r2, #10
 80016d2:	4958      	ldr	r1, [pc, #352]	@ (8001834 <HAL_UART_RxCpltCallback+0xa30>)
 80016d4:	4856      	ldr	r0, [pc, #344]	@ (8001830 <HAL_UART_RxCpltCallback+0xa2c>)
 80016d6:	f003 fa87 	bl	8004be8 <HAL_UART_Receive>
								 if( RS2_rx[4] == 'D')
 80016da:	4b56      	ldr	r3, [pc, #344]	@ (8001834 <HAL_UART_RxCpltCallback+0xa30>)
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	2b44      	cmp	r3, #68	@ 0x44
 80016e0:	d105      	bne.n	80016ee <HAL_UART_RxCpltCallback+0x8ea>
								 {
									 send_n2_inx++;
 80016e2:	4b4e      	ldr	r3, [pc, #312]	@ (800181c <HAL_UART_RxCpltCallback+0xa18>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b4c      	ldr	r3, [pc, #304]	@ (800181c <HAL_UART_RxCpltCallback+0xa18>)
 80016ec:	701a      	strb	r2, [r3, #0]
							 while(send_n2_inx<miss_data_node2_to_gw_inx -1)
 80016ee:	4b4b      	ldr	r3, [pc, #300]	@ (800181c <HAL_UART_RxCpltCallback+0xa18>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <HAL_UART_RxCpltCallback+0xa34>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dba6      	blt.n	800164c <HAL_UART_RxCpltCallback+0x848>
								 }
							}
							 if(send_n2_inx == miss_data_node2_to_gw_inx -1)// gửi dữ liệu cuối cùng của vugnf nhớ (có lệnh 0x02) để gw quay v�? thực hiện tiếp như chưa có lỗi
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_UART_RxCpltCallback+0xa18>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4b4c      	ldr	r3, [pc, #304]	@ (8001838 <HAL_UART_RxCpltCallback+0xa34>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	429a      	cmp	r2, r3
 800170c:	f040 8152 	bne.w	80019b4 <HAL_UART_RxCpltCallback+0xbb0>
							 {
								RS2_txBuffer[0]=':';
 8001710:	4b3e      	ldr	r3, [pc, #248]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 8001712:	223a      	movs	r2, #58	@ 0x3a
 8001714:	701a      	strb	r2, [r3, #0]
								// Gửi phản hồi
								hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 8001716:	4b3e      	ldr	r3, [pc, #248]	@ (8001810 <HAL_UART_RxCpltCallback+0xa0c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	493e      	ldr	r1, [pc, #248]	@ (8001814 <HAL_UART_RxCpltCallback+0xa10>)
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fcc5 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[3] = '0';
 8001722:	4b3a      	ldr	r3, [pc, #232]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 8001724:	2230      	movs	r2, #48	@ 0x30
 8001726:	70da      	strb	r2, [r3, #3]
								RS2_txBuffer[4] = '2';
 8001728:	4b38      	ldr	r3, [pc, #224]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 800172a:	2232      	movs	r2, #50	@ 0x32
 800172c:	711a      	strb	r2, [r3, #4]
								memset(&RS2_txBuffer[5], 0, 14);
 800172e:	220e      	movs	r2, #14
 8001730:	2100      	movs	r1, #0
 8001732:	4839      	ldr	r0, [pc, #228]	@ (8001818 <HAL_UART_RxCpltCallback+0xa14>)
 8001734:	f005 f895 	bl	8006862 <memset>
								strncpy((char *)&RS2_txBuffer[19], &string_data_rec2[send_n2_inx][5], 14);
 8001738:	4b38      	ldr	r3, [pc, #224]	@ (800181c <HAL_UART_RxCpltCallback+0xa18>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	3305      	adds	r3, #5
 8001748:	4a35      	ldr	r2, [pc, #212]	@ (8001820 <HAL_UART_RxCpltCallback+0xa1c>)
 800174a:	4413      	add	r3, r2
 800174c:	220e      	movs	r2, #14
 800174e:	4619      	mov	r1, r3
 8001750:	4834      	ldr	r0, [pc, #208]	@ (8001824 <HAL_UART_RxCpltCallback+0xa20>)
 8001752:	f005 f88e 	bl	8006872 <strncpy>
								lrc = calculate_lrc(&RS2_txBuffer[1],32);
 8001756:	2120      	movs	r1, #32
 8001758:	482e      	ldr	r0, [pc, #184]	@ (8001814 <HAL_UART_RxCpltCallback+0xa10>)
 800175a:	f000 fc43 	bl	8001fe4 <calculate_lrc>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <HAL_UART_RxCpltCallback+0xa24>)
 8001764:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 8001766:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <HAL_UART_RxCpltCallback+0xa24>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4930      	ldr	r1, [pc, #192]	@ (800182c <HAL_UART_RxCpltCallback+0xa28>)
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fc9d 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[35]=0x0D ;
 8001772:	4b26      	ldr	r3, [pc, #152]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 8001774:	220d      	movs	r2, #13
 8001776:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
								RS2_txBuffer[36]=0x0A ;
 800177a:	4b24      	ldr	r3, [pc, #144]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 800177c:	220a      	movs	r2, #10
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
								 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	2228      	movs	r2, #40	@ 0x28
 8001788:	4920      	ldr	r1, [pc, #128]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 800178a:	4829      	ldr	r0, [pc, #164]	@ (8001830 <HAL_UART_RxCpltCallback+0xa2c>)
 800178c:	f003 f9a1 	bl	8004ad2 <HAL_UART_Transmit>
					   if(miss_data_node2_to_gw_inx==0) // chưa có dữ liệu từ node 2 lên node tổng
 8001790:	e110      	b.n	80019b4 <HAL_UART_RxCpltCallback+0xbb0>
							 }
					   }
				   }
				   else if(RS2_rxBuffer[3] == '2' && RS2_rxBuffer[4] == '3')
 8001792:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <HAL_UART_RxCpltCallback+0xa38>)
 8001794:	78db      	ldrb	r3, [r3, #3]
 8001796:	2b32      	cmp	r3, #50	@ 0x32
 8001798:	f040 810d 	bne.w	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
 800179c:	4b27      	ldr	r3, [pc, #156]	@ (800183c <HAL_UART_RxCpltCallback+0xa38>)
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	2b33      	cmp	r3, #51	@ 0x33
 80017a2:	f040 8108 	bne.w	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
				   {
					   if(miss_data_node2_to_gw_inx==0) // chưa có dữ liệu từ 2 node lên node tổng
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_UART_RxCpltCallback+0xa34>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80a3 	bne.w	80018f6 <HAL_UART_RxCpltCallback+0xaf2>
					   {
							RS2_txBuffer[0]=':';
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 80017b2:	223a      	movs	r2, #58	@ 0x3a
 80017b4:	701a      	strb	r2, [r3, #0]
							// Gửi phản hồi
							hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_UART_RxCpltCallback+0xa0c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4916      	ldr	r1, [pc, #88]	@ (8001814 <HAL_UART_RxCpltCallback+0xa10>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fc75 	bl	80020ac <hexdec_to_ascii>
							RS2_txBuffer[3] = '0';
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 80017c4:	2230      	movs	r2, #48	@ 0x30
 80017c6:	70da      	strb	r2, [r3, #3]
							RS2_txBuffer[4] = '0';
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 80017ca:	2230      	movs	r2, #48	@ 0x30
 80017cc:	711a      	strb	r2, [r3, #4]
							lrc = calculate_lrc(&RS2_txBuffer[1],32);
 80017ce:	2120      	movs	r1, #32
 80017d0:	4810      	ldr	r0, [pc, #64]	@ (8001814 <HAL_UART_RxCpltCallback+0xa10>)
 80017d2:	f000 fc07 	bl	8001fe4 <calculate_lrc>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <HAL_UART_RxCpltCallback+0xa24>)
 80017dc:	701a      	strb	r2, [r3, #0]
							hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_UART_RxCpltCallback+0xa24>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	4912      	ldr	r1, [pc, #72]	@ (800182c <HAL_UART_RxCpltCallback+0xa28>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fc61 	bl	80020ac <hexdec_to_ascii>
							RS2_txBuffer[35]=0x0D ;
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 80017ec:	220d      	movs	r2, #13
 80017ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
							RS2_txBuffer[36]=0x0A ;
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 80017f4:	220a      	movs	r2, #10
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
							 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	2228      	movs	r2, #40	@ 0x28
 8001800:	4902      	ldr	r1, [pc, #8]	@ (800180c <HAL_UART_RxCpltCallback+0xa08>)
 8001802:	480b      	ldr	r0, [pc, #44]	@ (8001830 <HAL_UART_RxCpltCallback+0xa2c>)
 8001804:	f003 f965 	bl	8004ad2 <HAL_UART_Transmit>
 8001808:	e0d5      	b.n	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
 800180a:	bf00      	nop
 800180c:	20000394 	.word	0x20000394
 8001810:	20000005 	.word	0x20000005
 8001814:	20000395 	.word	0x20000395
 8001818:	20000399 	.word	0x20000399
 800181c:	20000406 	.word	0x20000406
 8001820:	20001b78 	.word	0x20001b78
 8001824:	200003a7 	.word	0x200003a7
 8001828:	200003fc 	.word	0x200003fc
 800182c:	200003b5 	.word	0x200003b5
 8001830:	20000318 	.word	0x20000318
 8001834:	200003d0 	.word	0x200003d0
 8001838:	20000403 	.word	0x20000403
 800183c:	200003bc 	.word	0x200003bc
					   }
					   else // đã có dữ liệu từ node đo lên node tổng
					   {
							 while(send_n2_inx<miss_data_node2_to_gw_inx -1)
							{
								RS2_txBuffer[0]=':';
 8001840:	4b6b      	ldr	r3, [pc, #428]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 8001842:	223a      	movs	r2, #58	@ 0x3a
 8001844:	701a      	strb	r2, [r3, #0]
								// Gửi phản hồi
								hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 8001846:	4b6b      	ldr	r3, [pc, #428]	@ (80019f4 <HAL_UART_RxCpltCallback+0xbf0>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	496b      	ldr	r1, [pc, #428]	@ (80019f8 <HAL_UART_RxCpltCallback+0xbf4>)
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fc2d 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[3] = '2';
 8001852:	4b67      	ldr	r3, [pc, #412]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 8001854:	2232      	movs	r2, #50	@ 0x32
 8001856:	70da      	strb	r2, [r3, #3]
								RS2_txBuffer[4] = '3';
 8001858:	4b65      	ldr	r3, [pc, #404]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 800185a:	2233      	movs	r2, #51	@ 0x33
 800185c:	711a      	strb	r2, [r3, #4]
								strncpy((char *)&RS2_txBuffer[5], &string_data_rec1[send_n2_inx][5], 14);
 800185e:	4b67      	ldr	r3, [pc, #412]	@ (80019fc <HAL_UART_RxCpltCallback+0xbf8>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	3305      	adds	r3, #5
 800186e:	4a64      	ldr	r2, [pc, #400]	@ (8001a00 <HAL_UART_RxCpltCallback+0xbfc>)
 8001870:	4413      	add	r3, r2
 8001872:	220e      	movs	r2, #14
 8001874:	4619      	mov	r1, r3
 8001876:	4863      	ldr	r0, [pc, #396]	@ (8001a04 <HAL_UART_RxCpltCallback+0xc00>)
 8001878:	f004 fffb 	bl	8006872 <strncpy>
								strncpy((char *)&RS2_txBuffer[19], &string_data_rec2[send_n2_inx][5], 14);
 800187c:	4b5f      	ldr	r3, [pc, #380]	@ (80019fc <HAL_UART_RxCpltCallback+0xbf8>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	3305      	adds	r3, #5
 800188c:	4a5e      	ldr	r2, [pc, #376]	@ (8001a08 <HAL_UART_RxCpltCallback+0xc04>)
 800188e:	4413      	add	r3, r2
 8001890:	220e      	movs	r2, #14
 8001892:	4619      	mov	r1, r3
 8001894:	485d      	ldr	r0, [pc, #372]	@ (8001a0c <HAL_UART_RxCpltCallback+0xc08>)
 8001896:	f004 ffec 	bl	8006872 <strncpy>
								lrc = calculate_lrc(&RS2_txBuffer[1],32);
 800189a:	2120      	movs	r1, #32
 800189c:	4856      	ldr	r0, [pc, #344]	@ (80019f8 <HAL_UART_RxCpltCallback+0xbf4>)
 800189e:	f000 fba1 	bl	8001fe4 <calculate_lrc>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a10 <HAL_UART_RxCpltCallback+0xc0c>)
 80018a8:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 80018aa:	4b59      	ldr	r3, [pc, #356]	@ (8001a10 <HAL_UART_RxCpltCallback+0xc0c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4959      	ldr	r1, [pc, #356]	@ (8001a14 <HAL_UART_RxCpltCallback+0xc10>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fbfb 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[35]=0x0D ;
 80018b6:	4b4e      	ldr	r3, [pc, #312]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 80018b8:	220d      	movs	r2, #13
 80018ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
								RS2_txBuffer[36]=0x0A ;
 80018be:	4b4c      	ldr	r3, [pc, #304]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
								 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	2228      	movs	r2, #40	@ 0x28
 80018cc:	4948      	ldr	r1, [pc, #288]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 80018ce:	4852      	ldr	r0, [pc, #328]	@ (8001a18 <HAL_UART_RxCpltCallback+0xc14>)
 80018d0:	f003 f8ff 	bl	8004ad2 <HAL_UART_Transmit>
								 HAL_UART_Receive(&huart2 ,RS2_rx, 10, HAL_MAX_DELAY);
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	220a      	movs	r2, #10
 80018da:	4950      	ldr	r1, [pc, #320]	@ (8001a1c <HAL_UART_RxCpltCallback+0xc18>)
 80018dc:	484e      	ldr	r0, [pc, #312]	@ (8001a18 <HAL_UART_RxCpltCallback+0xc14>)
 80018de:	f003 f983 	bl	8004be8 <HAL_UART_Receive>
								 if( RS2_rx[4] == 'D')
 80018e2:	4b4e      	ldr	r3, [pc, #312]	@ (8001a1c <HAL_UART_RxCpltCallback+0xc18>)
 80018e4:	791b      	ldrb	r3, [r3, #4]
 80018e6:	2b44      	cmp	r3, #68	@ 0x44
 80018e8:	d105      	bne.n	80018f6 <HAL_UART_RxCpltCallback+0xaf2>
								 {
									 send_n2_inx++;
 80018ea:	4b44      	ldr	r3, [pc, #272]	@ (80019fc <HAL_UART_RxCpltCallback+0xbf8>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b42      	ldr	r3, [pc, #264]	@ (80019fc <HAL_UART_RxCpltCallback+0xbf8>)
 80018f4:	701a      	strb	r2, [r3, #0]
							 while(send_n2_inx<miss_data_node2_to_gw_inx -1)
 80018f6:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <HAL_UART_RxCpltCallback+0xbf8>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b48      	ldr	r3, [pc, #288]	@ (8001a20 <HAL_UART_RxCpltCallback+0xc1c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	429a      	cmp	r2, r3
 8001904:	db9c      	blt.n	8001840 <HAL_UART_RxCpltCallback+0xa3c>
								 }
							}
							 if(send_n2_inx == miss_data_node2_to_gw_inx -1)// gửi dữ liệu cuối cùng của vugnf nhớ (có lệnh 0x02) để gw quay v�? thực hiện tiếp như chưa có lỗi
 8001906:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <HAL_UART_RxCpltCallback+0xbf8>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b44      	ldr	r3, [pc, #272]	@ (8001a20 <HAL_UART_RxCpltCallback+0xc1c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	429a      	cmp	r2, r3
 8001914:	d14f      	bne.n	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
							 {
								RS2_txBuffer[0]=':';
 8001916:	4b36      	ldr	r3, [pc, #216]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 8001918:	223a      	movs	r2, #58	@ 0x3a
 800191a:	701a      	strb	r2, [r3, #0]
								// Gửi phản hồi
								hexdec_to_ascii(myID,(char*)&RS2_txBuffer[1]);
 800191c:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_UART_RxCpltCallback+0xbf0>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4935      	ldr	r1, [pc, #212]	@ (80019f8 <HAL_UART_RxCpltCallback+0xbf4>)
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fbc2 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[3] = '0';
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 800192a:	2230      	movs	r2, #48	@ 0x30
 800192c:	70da      	strb	r2, [r3, #3]
								RS2_txBuffer[4] = '2';
 800192e:	4b30      	ldr	r3, [pc, #192]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 8001930:	2232      	movs	r2, #50	@ 0x32
 8001932:	711a      	strb	r2, [r3, #4]
								strncpy((char *)&RS2_txBuffer[5], &string_data_rec1[send_n2_inx][5], 14);
 8001934:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <HAL_UART_RxCpltCallback+0xbf8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	3305      	adds	r3, #5
 8001944:	4a2e      	ldr	r2, [pc, #184]	@ (8001a00 <HAL_UART_RxCpltCallback+0xbfc>)
 8001946:	4413      	add	r3, r2
 8001948:	220e      	movs	r2, #14
 800194a:	4619      	mov	r1, r3
 800194c:	482d      	ldr	r0, [pc, #180]	@ (8001a04 <HAL_UART_RxCpltCallback+0xc00>)
 800194e:	f004 ff90 	bl	8006872 <strncpy>
								strncpy((char *)&RS2_txBuffer[19], &string_data_rec2[send_n2_inx][5], 14);
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_UART_RxCpltCallback+0xbf8>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	3305      	adds	r3, #5
 8001962:	4a29      	ldr	r2, [pc, #164]	@ (8001a08 <HAL_UART_RxCpltCallback+0xc04>)
 8001964:	4413      	add	r3, r2
 8001966:	220e      	movs	r2, #14
 8001968:	4619      	mov	r1, r3
 800196a:	4828      	ldr	r0, [pc, #160]	@ (8001a0c <HAL_UART_RxCpltCallback+0xc08>)
 800196c:	f004 ff81 	bl	8006872 <strncpy>
								lrc = calculate_lrc(&RS2_txBuffer[1],32);
 8001970:	2120      	movs	r1, #32
 8001972:	4821      	ldr	r0, [pc, #132]	@ (80019f8 <HAL_UART_RxCpltCallback+0xbf4>)
 8001974:	f000 fb36 	bl	8001fe4 <calculate_lrc>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_UART_RxCpltCallback+0xc0c>)
 800197e:	701a      	strb	r2, [r3, #0]
								hexdec_to_ascii(lrc,(char*)&RS2_txBuffer[33]);
 8001980:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <HAL_UART_RxCpltCallback+0xc0c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4923      	ldr	r1, [pc, #140]	@ (8001a14 <HAL_UART_RxCpltCallback+0xc10>)
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fb90 	bl	80020ac <hexdec_to_ascii>
								RS2_txBuffer[35]=0x0D ;
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 800198e:	220d      	movs	r2, #13
 8001990:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
								RS2_txBuffer[36]=0x0A ;
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 8001996:	220a      	movs	r2, #10
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
								 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	2228      	movs	r2, #40	@ 0x28
 80019a2:	4913      	ldr	r1, [pc, #76]	@ (80019f0 <HAL_UART_RxCpltCallback+0xbec>)
 80019a4:	481c      	ldr	r0, [pc, #112]	@ (8001a18 <HAL_UART_RxCpltCallback+0xc14>)
 80019a6:	f003 f894 	bl	8004ad2 <HAL_UART_Transmit>
 80019aa:	e004      	b.n	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
						 if( miss_data_nodet_to_gw_inx!=0)
 80019ac:	bf00      	nop
 80019ae:	e002      	b.n	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
					   if(miss_data_node1_to_gw_inx==0) // chưa có dữ liệu từ node 1 lên node tổng
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <HAL_UART_RxCpltCallback+0xbb2>
					   if(miss_data_node2_to_gw_inx==0) // chưa có dữ liệu từ node 2 lên node tổng
 80019b4:	bf00      	nop
					   }
				   }
				}
        	 }
        	// nhận bản tin th�?i gian từ gw và gửi v�? các node đo
            if(RS2_rxBuffer[2] == 0x77)
 80019b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_UART_RxCpltCallback+0xc20>)
 80019b8:	789b      	ldrb	r3, [r3, #2]
 80019ba:	2b77      	cmp	r3, #119	@ 0x77
 80019bc:	d106      	bne.n	80019cc <HAL_UART_RxCpltCallback+0xbc8>
			{
				 HAL_UART_Transmit(&huart1, RS2_rxBuffer, 11, HAL_MAX_DELAY); // truyen ve node do thoi gian
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	220b      	movs	r2, #11
 80019c4:	4917      	ldr	r1, [pc, #92]	@ (8001a24 <HAL_UART_RxCpltCallback+0xc20>)
 80019c6:	4818      	ldr	r0, [pc, #96]	@ (8001a28 <HAL_UART_RxCpltCallback+0xc24>)
 80019c8:	f003 f883 	bl	8004ad2 <HAL_UART_Transmit>
			}
            // reset rs2 và RS2_rxbuf để tiếp tục nhận bản tin khác
      		rs2_inx=0;
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <HAL_UART_RxCpltCallback+0xc28>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
      		memset(RS2_rxBuffer,0,sizeof(RS2_rxBuffer));
 80019d2:	2214      	movs	r2, #20
 80019d4:	2100      	movs	r1, #0
 80019d6:	4813      	ldr	r0, [pc, #76]	@ (8001a24 <HAL_UART_RxCpltCallback+0xc20>)
 80019d8:	f004 ff43 	bl	8006862 <memset>
       }
               HAL_UART_Receive_IT(&huart2, rs2_temp, 1);
 80019dc:	2201      	movs	r2, #1
 80019de:	4914      	ldr	r1, [pc, #80]	@ (8001a30 <HAL_UART_RxCpltCallback+0xc2c>)
 80019e0:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <HAL_UART_RxCpltCallback+0xc14>)
 80019e2:	f003 f998 	bl	8004d16 <HAL_UART_Receive_IT>
               // nhận mỗi lần 1 kí tự
        }
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000394 	.word	0x20000394
 80019f4:	20000005 	.word	0x20000005
 80019f8:	20000395 	.word	0x20000395
 80019fc:	20000406 	.word	0x20000406
 8001a00:	200013a8 	.word	0x200013a8
 8001a04:	20000399 	.word	0x20000399
 8001a08:	20001b78 	.word	0x20001b78
 8001a0c:	200003a7 	.word	0x200003a7
 8001a10:	200003fc 	.word	0x200003fc
 8001a14:	200003b5 	.word	0x200003b5
 8001a18:	20000318 	.word	0x20000318
 8001a1c:	200003d0 	.word	0x200003d0
 8001a20:	20000403 	.word	0x20000403
 8001a24:	200003bc 	.word	0x200003bc
 8001a28:	200002d0 	.word	0x200002d0
 8001a2c:	200003ea 	.word	0x200003ea
 8001a30:	200003e8 	.word	0x200003e8

08001a34 <HAL_GPIO_EXTI_Callback>:
// chương trình đk quạt = tay
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == DOWN_BUT_Pin)
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d116      	bne.n	8001a72 <HAL_GPIO_EXTI_Callback+0x3e>
  {
	  at_state=0; // c�? trạng thái đi�?u khiển quạt tự động =0
 8001a44:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	  AT_LED_On(); // bật đèn báo hiệu đk quạt = tay
 8001a4a:	f7ff f923 	bl	8000c94 <AT_LED_On>
	  if(duty<=50)
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	2b32      	cmp	r3, #50	@ 0x32
 8001a54:	d803      	bhi.n	8001a5e <HAL_GPIO_EXTI_Callback+0x2a>
	  {
		duty = 0;
 8001a56:	4b2a      	ldr	r3, [pc, #168]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	801a      	strh	r2, [r3, #0]
 8001a5c:	e005      	b.n	8001a6a <HAL_GPIO_EXTI_Callback+0x36>
	  }
	  else
	  {
		duty = duty -25;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	3b19      	subs	r3, #25
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a68:	801a      	strh	r2, [r3, #0]
	  }
	  TIM1->CCR1 = duty;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a70:	635a      	str	r2, [r3, #52]	@ 0x34

  }
  if(GPIO_Pin == UP_BUT_Pin)
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d11e      	bne.n	8001ab6 <HAL_GPIO_EXTI_Callback+0x82>
  {
	  at_state=0;
 8001a78:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
	  AT_LED_On();
 8001a7e:	f7ff f909 	bl	8000c94 <AT_LED_On>
	  if(duty==100)
 8001a82:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d103      	bne.n	8001a92 <HAL_GPIO_EXTI_Callback+0x5e>
	  {
		duty =100;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a8c:	2264      	movs	r2, #100	@ 0x64
 8001a8e:	801a      	strh	r2, [r3, #0]
 8001a90:	e00d      	b.n	8001aae <HAL_GPIO_EXTI_Callback+0x7a>
	  }
	  else
	  {
		  if(duty==0)
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d103      	bne.n	8001aa2 <HAL_GPIO_EXTI_Callback+0x6e>
		  {
			  duty=50;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a9c:	2232      	movs	r2, #50	@ 0x32
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	e005      	b.n	8001aae <HAL_GPIO_EXTI_Callback+0x7a>
		  }
		  else
		  {
		    duty = duty +25;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	3319      	adds	r3, #25
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001aac:	801a      	strh	r2, [r3, #0]
		  }
	  }
	  TIM1->CCR1 = duty;
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ab4:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if(at_state==0)
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d11a      	bne.n	8001af4 <HAL_GPIO_EXTI_Callback+0xc0>
  {
	  // hiển thị led
	  if(duty<50)
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	2b31      	cmp	r3, #49	@ 0x31
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_EXTI_Callback+0x98>
	  {
		  L1_3_LED_Off();
 8001ac6:	f7ff f8cd 	bl	8000c64 <L1_3_LED_Off>
	  else if(duty==100)
	  {
		  L3_LED_On();
	  }
  }
}
 8001aca:	e013      	b.n	8001af4 <HAL_GPIO_EXTI_Callback+0xc0>
	  else if (duty==50)
 8001acc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	2b32      	cmp	r3, #50	@ 0x32
 8001ad2:	d102      	bne.n	8001ada <HAL_GPIO_EXTI_Callback+0xa6>
		  L1_LED_On();
 8001ad4:	f7ff f8ae 	bl	8000c34 <L1_LED_On>
}
 8001ad8:	e00c      	b.n	8001af4 <HAL_GPIO_EXTI_Callback+0xc0>
	  else if (duty==75)
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2b4b      	cmp	r3, #75	@ 0x4b
 8001ae0:	d102      	bne.n	8001ae8 <HAL_GPIO_EXTI_Callback+0xb4>
		  L2_LED_On();
 8001ae2:	f7ff f877 	bl	8000bd4 <L2_LED_On>
}
 8001ae6:	e005      	b.n	8001af4 <HAL_GPIO_EXTI_Callback+0xc0>
	  else if(duty==100)
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	2b64      	cmp	r3, #100	@ 0x64
 8001aee:	d101      	bne.n	8001af4 <HAL_GPIO_EXTI_Callback+0xc0>
		  L3_LED_On();
 8001af0:	f7ff f888 	bl	8000c04 <L3_LED_On>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000002 	.word	0x20000002
 8001b04:	40012c00 	.word	0x40012c00

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0c:	f000 ffda 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b10:	f000 f840 	bl	8001b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b14:	f000 f9f6 	bl	8001f04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b18:	f000 f9a0 	bl	8001e5c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001b1c:	f000 f902 	bl	8001d24 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001b20:	f000 f87c 	bl	8001c1c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001b24:	f000 f9c4 	bl	8001eb0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001b28:	f000 f94a 	bl	8001dc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = duty;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <main+0x64>)
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <main+0x68>)
 8001b32:	635a      	str	r2, [r3, #52]	@ 0x34
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b34:	2100      	movs	r1, #0
 8001b36:	480f      	ldr	r0, [pc, #60]	@ (8001b74 <main+0x6c>)
 8001b38:	f002 f8ca 	bl	8003cd0 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, rs1_temp, 1); // nhận dữ liệu từ node đo
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	490e      	ldr	r1, [pc, #56]	@ (8001b78 <main+0x70>)
 8001b40:	480e      	ldr	r0, [pc, #56]	@ (8001b7c <main+0x74>)
 8001b42:	f003 f8e8 	bl	8004d16 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rs2_temp, 1); // nhận dữ liệu từ gateway
 8001b46:	2201      	movs	r2, #1
 8001b48:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <main+0x78>)
 8001b4a:	480e      	ldr	r0, [pc, #56]	@ (8001b84 <main+0x7c>)
 8001b4c:	f003 f8e3 	bl	8004d16 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8001b50:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <main+0x80>)
 8001b52:	f001 ffed 	bl	8003b30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <main+0x84>)
 8001b58:	f001 ffea 	bl	8003b30 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   if(at_state==1) //dk quạt tự động
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <main+0x88>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d1fb      	bne.n	8001b5c <main+0x54>
   {
	   Control_Fan_Auto();
 8001b64:	f000 ff48 	bl	80029f8 <Control_Fan_Auto>
   if(at_state==1) //dk quạt tự động
 8001b68:	e7f8      	b.n	8001b5c <main+0x54>
 8001b6a:	bf00      	nop
 8001b6c:	20000002 	.word	0x20000002
 8001b70:	40012c00 	.word	0x40012c00
 8001b74:	200001f8 	.word	0x200001f8
 8001b78:	200003e4 	.word	0x200003e4
 8001b7c:	200002d0 	.word	0x200002d0
 8001b80:	200003e8 	.word	0x200003e8
 8001b84:	20000318 	.word	0x20000318
 8001b88:	20000240 	.word	0x20000240
 8001b8c:	20000288 	.word	0x20000288
 8001b90:	20000000 	.word	0x20000000

08001b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b090      	sub	sp, #64	@ 0x40
 8001b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	f107 0318 	add.w	r3, r7, #24
 8001b9e:	2228      	movs	r2, #40	@ 0x28
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 fe5d 	bl	8006862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd6:	f107 0318 	add.w	r3, r7, #24
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fb48 	bl	8003270 <HAL_RCC_OscConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001be6:	f000 f9f7 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bea:	230f      	movs	r3, #15
 8001bec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fdb5 	bl	8003774 <HAL_RCC_ClockConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c10:	f000 f9e2 	bl	8001fd8 <Error_Handler>
  }
}
 8001c14:	bf00      	nop
 8001c16:	3740      	adds	r7, #64	@ 0x40
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b092      	sub	sp, #72	@ 0x48
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fe0b 	bl	8006862 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c4c:	4b33      	ldr	r3, [pc, #204]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c4e:	4a34      	ldr	r2, [pc, #208]	@ (8001d20 <MX_TIM1_Init+0x104>)
 8001c50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 8001c52:	4b32      	ldr	r3, [pc, #200]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c54:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001c58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001c60:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c62:	2264      	movs	r2, #100	@ 0x64
 8001c64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c78:	4828      	ldr	r0, [pc, #160]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c7a:	f001 ffd9 	bl	8003c30 <HAL_TIM_PWM_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c84:	f000 f9a8 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c94:	4619      	mov	r1, r3
 8001c96:	4821      	ldr	r0, [pc, #132]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001c98:	f002 fe0a 	bl	80048b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ca2:	f000 f999 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca6:	2360      	movs	r3, #96	@ 0x60
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4814      	ldr	r0, [pc, #80]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001ccc:	f002 f992 	bl	8003ff4 <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001cd6:	f000 f97f 	bl	8001fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cf2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4807      	ldr	r0, [pc, #28]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001cfe:	f002 fe35 	bl	800496c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001d08:	f000 f966 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <MX_TIM1_Init+0x100>)
 8001d0e:	f000 fbc5 	bl	800249c <HAL_TIM_MspPostInit>

}
 8001d12:	bf00      	nop
 8001d14:	3748      	adds	r7, #72	@ 0x48
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200001f8 	.word	0x200001f8
 8001d20:	40012c00 	.word	0x40012c00

08001d24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001d42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001d4a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001d4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001d58:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d6a:	4814      	ldr	r0, [pc, #80]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001d6c:	f001 fe90 	bl	8003a90 <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d76:	f000 f92f 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	4619      	mov	r1, r3
 8001d86:	480d      	ldr	r0, [pc, #52]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001d88:	f002 f9f6 	bl	8004178 <HAL_TIM_ConfigClockSource>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d92:	f000 f921 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	@ (8001dbc <MX_TIM2_Init+0x98>)
 8001da4:	f002 fd84 	bl	80048b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dae:	f000 f913 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000240 	.word	0x20000240

08001dc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001dde:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <MX_TIM3_Init+0x98>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001de4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001de8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000;
 8001df0:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001df2:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001df6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df8:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e04:	4813      	ldr	r0, [pc, #76]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001e06:	f001 fe43 	bl	8003a90 <HAL_TIM_Base_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e10:	f000 f8e2 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001e22:	f002 f9a9 	bl	8004178 <HAL_TIM_ConfigClockSource>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e2c:	f000 f8d4 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e38:	463b      	mov	r3, r7
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_TIM3_Init+0x94>)
 8001e3e:	f002 fd37 	bl	80048b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e48:	f000 f8c6 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000288 	.word	0x20000288
 8001e58:	40000400 	.word	0x40000400

08001e5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <MX_USART1_UART_Init+0x50>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <MX_USART1_UART_Init+0x4c>)
 8001e94:	f002 fdcd 	bl	8004a32 <HAL_UART_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e9e:	f000 f89b 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002d0 	.word	0x200002d0
 8001eac:	40013800 	.word	0x40013800

08001eb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	@ (8001f00 <MX_USART2_UART_Init+0x50>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_USART2_UART_Init+0x4c>)
 8001ee8:	f002 fda3 	bl	8004a32 <HAL_UART_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ef2:	f000 f871 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000318 	.word	0x20000318
 8001f00:	40004400 	.word	0x40004400

08001f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f18:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f1e:	f043 0320 	orr.w	r3, r3, #32
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b29      	ldr	r3, [pc, #164]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a25      	ldr	r2, [pc, #148]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <MX_GPIO_Init+0xc8>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin|AT_LED_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001f66:	481a      	ldr	r0, [pc, #104]	@ (8001fd0 <MX_GPIO_Init+0xcc>)
 8001f68:	f001 f952 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOWN_BUT_Pin UP_BUT_Pin */
  GPIO_InitStruct.Pin = DOWN_BUT_Pin|UP_BUT_Pin;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f70:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <MX_GPIO_Init+0xd0>)
 8001f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4814      	ldr	r0, [pc, #80]	@ (8001fd0 <MX_GPIO_Init+0xcc>)
 8001f80:	f000 ffc2 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin AT_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin|AT_LED_Pin;
 8001f84:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <MX_GPIO_Init+0xcc>)
 8001f9e:	f000 ffb3 	bl	8002f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2103      	movs	r1, #3
 8001fa6:	2006      	movs	r0, #6
 8001fa8:	f000 fec5 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fac:	2006      	movs	r0, #6
 8001fae:	f000 fede 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	2007      	movs	r0, #7
 8001fb8:	f000 febd 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fbc:	2007      	movs	r0, #7
 8001fbe:	f000 fed6 	bl	8002d6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010c00 	.word	0x40010c00
 8001fd4:	10210000 	.word	0x10210000

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <Error_Handler+0x8>

08001fe4 <calculate_lrc>:
 *
 *  Created on: Dec 19, 2024
 *      Author: DELL
 */
#include <rs_related_node_tong.h>
uint8_t calculate_lrc(uint8_t *ascii_data, uint16_t length) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
    uint8_t lrc = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]

    // Kiểm tra nếu chiều dài mảng là hợp lệ
    if (length < 2) {
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d801      	bhi.n	8001ffe <calculate_lrc+0x1a>
        return 0;  // Trả về 0 nếu chiều dài không hợp lệ
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e027      	b.n	800204e <calculate_lrc+0x6a>
    }

    // Mỗi byte nhị phân được biểu diễn bằng 2 ký tự ASCII
    for (uint16_t i = 0; i < length; i += 2) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	81bb      	strh	r3, [r7, #12]
 8002002:	e01c      	b.n	800203e <calculate_lrc+0x5a>
        // Chuyển đổi 2 ký tự ASCII thành 1 byte nhị phân
        char hex_byte[3] = {ascii_data[i], ascii_data[i + 1], '\0'};
 8002004:	89bb      	ldrh	r3, [r7, #12]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	723b      	strb	r3, [r7, #8]
 800200e:	89bb      	ldrh	r3, [r7, #12]
 8002010:	3301      	adds	r3, #1
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	727b      	strb	r3, [r7, #9]
 800201a:	2300      	movs	r3, #0
 800201c:	72bb      	strb	r3, [r7, #10]
        uint8_t byte_value = (uint8_t)strtol(hex_byte, NULL, 16);
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	2210      	movs	r2, #16
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fc80 	bl	800592c <strtol>
 800202c:	4603      	mov	r3, r0
 800202e:	72fb      	strb	r3, [r7, #11]

        // Cộng giá trị vào tổng LRC
        lrc += byte_value;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	4413      	add	r3, r2
 8002036:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i += 2) {
 8002038:	89bb      	ldrh	r3, [r7, #12]
 800203a:	3302      	adds	r3, #2
 800203c:	81bb      	strh	r3, [r7, #12]
 800203e:	89ba      	ldrh	r2, [r7, #12]
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	429a      	cmp	r2, r3
 8002044:	d3de      	bcc.n	8002004 <calculate_lrc+0x20>
    }

    // Lấy phần bù 2 (2's complement)
    lrc = (uint8_t)(-((int8_t)lrc));
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	425b      	negs	r3, r3
 800204a:	73fb      	strb	r3, [r7, #15]
    return lrc;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <check_lrc>:

uint8_t check_lrc(uint8_t *ascii_data, uint16_t length, char* ascii_lrc)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	460b      	mov	r3, r1
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	817b      	strh	r3, [r7, #10]

    // Tính LRC từ dữ liệu
    uint8_t calculated_lrc = calculate_lrc(ascii_data, length);
 8002064:	897b      	ldrh	r3, [r7, #10]
 8002066:	4619      	mov	r1, r3
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff ffbb 	bl	8001fe4 <calculate_lrc>
 800206e:	4603      	mov	r3, r0
 8002070:	75fb      	strb	r3, [r7, #23]

    char hex_byte[3] = {ascii_lrc[0], ascii_lrc[1], '\0'};
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	743b      	strb	r3, [r7, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	747b      	strb	r3, [r7, #17]
 800207e:	2300      	movs	r3, #0
 8002080:	74bb      	strb	r3, [r7, #18]
    uint8_t received_lrc = (uint8_t)strtol(hex_byte, NULL, 16);
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	2210      	movs	r2, #16
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fc4e 	bl	800592c <strtol>
 8002090:	4603      	mov	r3, r0
 8002092:	75bb      	strb	r3, [r7, #22]

    // So sánh LRC tính toán và LRC nhận được
    if (calculated_lrc == received_lrc)
 8002094:	7dfa      	ldrb	r2, [r7, #23]
 8002096:	7dbb      	ldrb	r3, [r7, #22]
 8002098:	429a      	cmp	r2, r3
 800209a:	d101      	bne.n	80020a0 <check_lrc+0x4a>
    {
    	return 1;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <check_lrc+0x4c>
    }
    else
    	return 0;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <hexdec_to_ascii>:

// Mã hóa LRC thành chuỗi ASCII
void hexdec_to_ascii(uint8_t hexdec, char *ascii_out)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
    sprintf(ascii_out, "%02X", hexdec); // Mã hóa thành 2 ký tự HEX ASCII
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4903      	ldr	r1, [pc, #12]	@ (80020cc <hexdec_to_ascii+0x20>)
 80020be:	6838      	ldr	r0, [r7, #0]
 80020c0:	f004 fb6c 	bl	800679c <siprintf>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	08009f50 	.word	0x08009f50

080020d0 <RS485_SendCommand>:

// Gửi lệnh tới Slave với địa chỉ ID
void RS485_SendCommand(uint8_t slaveID, uint8_t command)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	460a      	mov	r2, r1
 80020da:	71fb      	strb	r3, [r7, #7]
 80020dc:	4613      	mov	r3, r2
 80020de:	71bb      	strb	r3, [r7, #6]
	RS1_txBuffer[0] = ':';
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <RS485_SendCommand+0x64>)
 80020e2:	223a      	movs	r2, #58	@ 0x3a
 80020e4:	701a      	strb	r2, [r3, #0]
    //RS1_txBuffer[1] = slaveID;  // �?ịa chỉ Slave
	hexdec_to_ascii(slaveID,(char*)&RS1_txBuffer[1]);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	4913      	ldr	r1, [pc, #76]	@ (8002138 <RS485_SendCommand+0x68>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ffde 	bl	80020ac <hexdec_to_ascii>
    //RS1_txBuffer[2] = command;  // Lệnh
	hexdec_to_ascii(command,(char*)&RS1_txBuffer[3]);
 80020f0:	79bb      	ldrb	r3, [r7, #6]
 80020f2:	4912      	ldr	r1, [pc, #72]	@ (800213c <RS485_SendCommand+0x6c>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ffd9 	bl	80020ac <hexdec_to_ascii>
    //RS1_txBuffer[5] = '\n';     // Ký tự kết thúc
	uint8_t lrc = calculate_lrc(&RS1_txBuffer[1], 4);
 80020fa:	2104      	movs	r1, #4
 80020fc:	480e      	ldr	r0, [pc, #56]	@ (8002138 <RS485_SendCommand+0x68>)
 80020fe:	f7ff ff71 	bl	8001fe4 <calculate_lrc>
 8002102:	4603      	mov	r3, r0
 8002104:	73fb      	strb	r3, [r7, #15]
	hexdec_to_ascii(lrc,(char*)&RS1_txBuffer[5]);
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	490d      	ldr	r1, [pc, #52]	@ (8002140 <RS485_SendCommand+0x70>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ffce 	bl	80020ac <hexdec_to_ascii>
	RS1_txBuffer[7]=0x0D ;
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <RS485_SendCommand+0x64>)
 8002112:	220d      	movs	r2, #13
 8002114:	71da      	strb	r2, [r3, #7]
	RS1_txBuffer[8]=0x0A ;
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <RS485_SendCommand+0x64>)
 8002118:	220a      	movs	r2, #10
 800211a:	721a      	strb	r2, [r3, #8]
    HAL_UART_Transmit(&huart1, RS1_txBuffer, 10, HAL_MAX_DELAY);
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	220a      	movs	r2, #10
 8002122:	4904      	ldr	r1, [pc, #16]	@ (8002134 <RS485_SendCommand+0x64>)
 8002124:	4807      	ldr	r0, [pc, #28]	@ (8002144 <RS485_SendCommand+0x74>)
 8002126:	f002 fcd4 	bl	8004ad2 <HAL_UART_Transmit>
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000360 	.word	0x20000360
 8002138:	20000361 	.word	0x20000361
 800213c:	20000363 	.word	0x20000363
 8002140:	20000365 	.word	0x20000365
 8002144:	200002d0 	.word	0x200002d0

08002148 <encode_ppm_data>:
void encode_ppm_data(PPM ppm_data, uint8_t *txBuffer, uint16_t start_index) {
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	f107 0408 	add.w	r4, r7, #8
 8002152:	e884 0003 	stmia.w	r4, {r0, r1}
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	807b      	strh	r3, [r7, #2]
    hexdec_to_ascii(ppm_data.hour, (char*)&txBuffer[start_index]);
 800215a:	7a38      	ldrb	r0, [r7, #8]
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7ff ffa2 	bl	80020ac <hexdec_to_ascii>
    hexdec_to_ascii(ppm_data.min, (char*)&txBuffer[start_index + 2]);
 8002168:	7a78      	ldrb	r0, [r7, #9]
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	3302      	adds	r3, #2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7ff ff9a 	bl	80020ac <hexdec_to_ascii>
    hexdec_to_ascii(ppm_data.sec, (char*)&txBuffer[start_index + 4]);
 8002178:	7ab8      	ldrb	r0, [r7, #10]
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	3304      	adds	r3, #4
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4619      	mov	r1, r3
 8002184:	f7ff ff92 	bl	80020ac <hexdec_to_ascii>
    hexdec_to_ascii((uint8_t)(ppm_data.CO_ppm >> 8), (char*)&txBuffer[start_index + 6]);
 8002188:	89bb      	ldrh	r3, [r7, #12]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b2d8      	uxtb	r0, r3
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	3306      	adds	r3, #6
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7ff ff87 	bl	80020ac <hexdec_to_ascii>
    hexdec_to_ascii((uint8_t)(ppm_data.CO_ppm), (char*)&txBuffer[start_index + 8]);
 800219e:	89bb      	ldrh	r3, [r7, #12]
 80021a0:	b2d8      	uxtb	r0, r3
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	3308      	adds	r3, #8
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7ff ff7e 	bl	80020ac <hexdec_to_ascii>
    hexdec_to_ascii((uint8_t)(ppm_data.CO2_ppm >> 8), (char*)&txBuffer[start_index + 10]);
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	b2d8      	uxtb	r0, r3
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	330a      	adds	r3, #10
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7ff ff73 	bl	80020ac <hexdec_to_ascii>
    hexdec_to_ascii((uint8_t)(ppm_data.CO2_ppm), (char*)&txBuffer[start_index + 12]);
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	b2d8      	uxtb	r0, r3
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	330c      	adds	r3, #12
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7ff ff6a 	bl	80020ac <hexdec_to_ascii>
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}

080021e0 <decode_ppm_ver3>:
void decode_ppm_ver3 (char *RS1_rxBuffer,PPM *ppm)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b08d      	sub	sp, #52	@ 0x34
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	char hour_buf[3] = {0}; // Lưu chuỗi th�?i gian
 80021ea:	4b63      	ldr	r3, [pc, #396]	@ (8002378 <decode_ppm_ver3+0x198>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	char min_buf[3] = {0};
 80021f6:	4b60      	ldr	r3, [pc, #384]	@ (8002378 <decode_ppm_ver3+0x198>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	843b      	strh	r3, [r7, #32]
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	char sec_buf[3] = {0};
 8002202:	4b5d      	ldr	r3, [pc, #372]	@ (8002378 <decode_ppm_ver3+0x198>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	83bb      	strh	r3, [r7, #28]
 8002208:	2300      	movs	r3, #0
 800220a:	77bb      	strb	r3, [r7, #30]
	char co_high[3] = {0};   // Lưu chuỗi giá trị CO
 800220c:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <decode_ppm_ver3+0x198>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	833b      	strh	r3, [r7, #24]
 8002212:	2300      	movs	r3, #0
 8002214:	76bb      	strb	r3, [r7, #26]
	char co_low[3] = {0};   // Lưu chuỗi giá trị CO
 8002216:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <decode_ppm_ver3+0x198>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	82bb      	strh	r3, [r7, #20]
 800221c:	2300      	movs	r3, #0
 800221e:	75bb      	strb	r3, [r7, #22]
	char co2_high[3] = {0};   // Lưu chuỗi giá trị CO
 8002220:	4b55      	ldr	r3, [pc, #340]	@ (8002378 <decode_ppm_ver3+0x198>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	823b      	strh	r3, [r7, #16]
 8002226:	2300      	movs	r3, #0
 8002228:	74bb      	strb	r3, [r7, #18]
	char co2_low[3] = {0};  // Lưu chuỗi giá trị CO2
 800222a:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <decode_ppm_ver3+0x198>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	81bb      	strh	r3, [r7, #12]
 8002230:	2300      	movs	r3, #0
 8002232:	73bb      	strb	r3, [r7, #14]
	uint16_t CO2;
	uint8_t ho;
	uint8_t mi;
	uint8_t se;
	// Tách chuỗi từ buffer
    hour_buf[0] = RS1_rxBuffer[5];
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	795b      	ldrb	r3, [r3, #5]
 8002238:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    hour_buf[1] = RS1_rxBuffer[6];
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	799b      	ldrb	r3, [r3, #6]
 8002240:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    hour_buf[2] = '\0';
 8002244:	2300      	movs	r3, #0
 8002246:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    min_buf[0] = RS1_rxBuffer[7];
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	79db      	ldrb	r3, [r3, #7]
 800224e:	f887 3020 	strb.w	r3, [r7, #32]
    min_buf[1] = RS1_rxBuffer[8];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7a1b      	ldrb	r3, [r3, #8]
 8002256:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    min_buf[2] = '\0';
 800225a:	2300      	movs	r3, #0
 800225c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    sec_buf[0] = RS1_rxBuffer[9];
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7a5b      	ldrb	r3, [r3, #9]
 8002264:	773b      	strb	r3, [r7, #28]
    sec_buf[1] = RS1_rxBuffer[10];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7a9b      	ldrb	r3, [r3, #10]
 800226a:	777b      	strb	r3, [r7, #29]
    sec_buf[2] = '\0';
 800226c:	2300      	movs	r3, #0
 800226e:	77bb      	strb	r3, [r7, #30]

    co_high[0] = RS1_rxBuffer[11];
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7adb      	ldrb	r3, [r3, #11]
 8002274:	763b      	strb	r3, [r7, #24]
    co_high[1] = RS1_rxBuffer[12];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7b1b      	ldrb	r3, [r3, #12]
 800227a:	767b      	strb	r3, [r7, #25]
    co_high[2] = '\0';
 800227c:	2300      	movs	r3, #0
 800227e:	76bb      	strb	r3, [r7, #26]

    co_low[0] = RS1_rxBuffer[13];
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7b5b      	ldrb	r3, [r3, #13]
 8002284:	753b      	strb	r3, [r7, #20]
    co_low[1] = RS1_rxBuffer[14];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7b9b      	ldrb	r3, [r3, #14]
 800228a:	757b      	strb	r3, [r7, #21]
    co_low[2] = '\0';
 800228c:	2300      	movs	r3, #0
 800228e:	75bb      	strb	r3, [r7, #22]

    co2_high[0] = RS1_rxBuffer[15];
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7bdb      	ldrb	r3, [r3, #15]
 8002294:	743b      	strb	r3, [r7, #16]
    co2_high[1] = RS1_rxBuffer[16];
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7c1b      	ldrb	r3, [r3, #16]
 800229a:	747b      	strb	r3, [r7, #17]
    co2_high[2] = '\0';
 800229c:	2300      	movs	r3, #0
 800229e:	74bb      	strb	r3, [r7, #18]

    co2_low[0] = RS1_rxBuffer[17];
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7c5b      	ldrb	r3, [r3, #17]
 80022a4:	733b      	strb	r3, [r7, #12]
    co2_low[1] = RS1_rxBuffer[18];
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7c9b      	ldrb	r3, [r3, #18]
 80022aa:	737b      	strb	r3, [r7, #13]
    co2_low[2] = '\0';
 80022ac:	2300      	movs	r3, #0
 80022ae:	73bb      	strb	r3, [r7, #14]

	ho = (uint8_t)strtol(hour_buf, NULL, 16);
 80022b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022b4:	2210      	movs	r2, #16
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fb37 	bl	800592c <strtol>
 80022be:	4603      	mov	r3, r0
 80022c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	mi = (uint8_t)strtol(min_buf, NULL, 16);
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	2210      	movs	r2, #16
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fb2d 	bl	800592c <strtol>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	se = (uint8_t)strtol(sec_buf, NULL, 16);
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	2210      	movs	r2, #16
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fb23 	bl	800592c <strtol>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	CO = ((uint8_t)(strtol(co_high, NULL, 16)) << 8) | ((uint8_t)(strtol(co_low, NULL, 16)));
 80022ec:	f107 0318 	add.w	r3, r7, #24
 80022f0:	2210      	movs	r2, #16
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fb19 	bl	800592c <strtol>
 80022fa:	4603      	mov	r3, r0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	b21c      	sxth	r4, r3
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	2210      	movs	r2, #16
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fb0e 	bl	800592c <strtol>
 8002310:	4603      	mov	r3, r0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	b21b      	sxth	r3, r3
 8002316:	4323      	orrs	r3, r4
 8002318:	b21b      	sxth	r3, r3
 800231a:	857b      	strh	r3, [r7, #42]	@ 0x2a
	CO2 = ((uint8_t)(strtol(co2_high, NULL, 16)) << 8) | ((uint8_t)(strtol(co2_low, NULL, 16)));
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2210      	movs	r2, #16
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f003 fb01 	bl	800592c <strtol>
 800232a:	4603      	mov	r3, r0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21c      	sxth	r4, r3
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	2210      	movs	r2, #16
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f003 faf6 	bl	800592c <strtol>
 8002340:	4603      	mov	r3, r0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	b21b      	sxth	r3, r3
 8002346:	4323      	orrs	r3, r4
 8002348:	b21b      	sxth	r3, r3
 800234a:	853b      	strh	r3, [r7, #40]	@ 0x28

	ppm->hour = ho;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002352:	701a      	strb	r2, [r3, #0]
    ppm->min = mi;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800235a:	705a      	strb	r2, [r3, #1]
	ppm->sec = se;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8002362:	709a      	strb	r2, [r3, #2]
	ppm->CO_ppm = CO;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002368:	809a      	strh	r2, [r3, #4]
    ppm->CO2_ppm = CO2;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800236e:	80da      	strh	r2, [r3, #6]

}
 8002370:	bf00      	nop
 8002372:	3734      	adds	r7, #52	@ 0x34
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}
 8002378:	08009f58 	.word	0x08009f58

0800237c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_MspInit+0x5c>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <HAL_MspInit+0x5c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6193      	str	r3, [r2, #24]
 800238e:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_MspInit+0x5c>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_MspInit+0x5c>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a0e      	ldr	r2, [pc, #56]	@ (80023d8 <HAL_MspInit+0x5c>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <HAL_MspInit+0x5c>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023b2:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <HAL_MspInit+0x60>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <HAL_MspInit+0x60>)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010000 	.word	0x40010000

080023e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <HAL_TIM_PWM_MspInit+0x34>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10b      	bne.n	800240a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023f2:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <HAL_TIM_PWM_MspInit+0x38>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	4a08      	ldr	r2, [pc, #32]	@ (8002418 <HAL_TIM_PWM_MspInit+0x38>)
 80023f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023fc:	6193      	str	r3, [r2, #24]
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_TIM_PWM_MspInit+0x38>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800242c:	d114      	bne.n	8002458 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800242e:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_TIM_Base_MspInit+0x78>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <HAL_TIM_Base_MspInit+0x78>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	61d3      	str	r3, [r2, #28]
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <HAL_TIM_Base_MspInit+0x78>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2104      	movs	r1, #4
 800244a:	201c      	movs	r0, #28
 800244c:	f000 fc73 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002450:	201c      	movs	r0, #28
 8002452:	f000 fc8c 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002456:	e018      	b.n	800248a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0e      	ldr	r2, [pc, #56]	@ (8002498 <HAL_TIM_Base_MspInit+0x7c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d113      	bne.n	800248a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002462:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <HAL_TIM_Base_MspInit+0x78>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a0b      	ldr	r2, [pc, #44]	@ (8002494 <HAL_TIM_Base_MspInit+0x78>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_TIM_Base_MspInit+0x78>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2105      	movs	r1, #5
 800247e:	201d      	movs	r0, #29
 8002480:	f000 fc59 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002484:	201d      	movs	r0, #29
 8002486:	f000 fc72 	bl	8002d6e <HAL_NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	40000400 	.word	0x40000400

0800249c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a10      	ldr	r2, [pc, #64]	@ (80024f8 <HAL_TIM_MspPostInit+0x5c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d118      	bne.n	80024ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <HAL_TIM_MspPostInit+0x60>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a0e      	ldr	r2, [pc, #56]	@ (80024fc <HAL_TIM_MspPostInit+0x60>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <HAL_TIM_MspPostInit+0x60>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2302      	movs	r3, #2
 80024e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4619      	mov	r1, r3
 80024e8:	4805      	ldr	r0, [pc, #20]	@ (8002500 <HAL_TIM_MspPostInit+0x64>)
 80024ea:	f000 fd0d 	bl	8002f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010800 	.word	0x40010800

08002504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3f      	ldr	r2, [pc, #252]	@ (800261c <HAL_UART_MspInit+0x118>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d13a      	bne.n	800259a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002524:	4b3e      	ldr	r3, [pc, #248]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a3d      	ldr	r2, [pc, #244]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 800252a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b3b      	ldr	r3, [pc, #236]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253c:	4b38      	ldr	r3, [pc, #224]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4a37      	ldr	r2, [pc, #220]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6193      	str	r3, [r2, #24]
 8002548:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 0318 	add.w	r3, r7, #24
 8002566:	4619      	mov	r1, r3
 8002568:	482e      	ldr	r0, [pc, #184]	@ (8002624 <HAL_UART_MspInit+0x120>)
 800256a:	f000 fccd 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800256e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f107 0318 	add.w	r3, r7, #24
 8002580:	4619      	mov	r1, r3
 8002582:	4828      	ldr	r0, [pc, #160]	@ (8002624 <HAL_UART_MspInit+0x120>)
 8002584:	f000 fcc0 	bl	8002f08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2025      	movs	r0, #37	@ 0x25
 800258e:	f000 fbd2 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002592:	2025      	movs	r0, #37	@ 0x25
 8002594:	f000 fbeb 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002598:	e03c      	b.n	8002614 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a22      	ldr	r2, [pc, #136]	@ (8002628 <HAL_UART_MspInit+0x124>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d137      	bne.n	8002614 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 80025aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ae:	61d3      	str	r3, [r2, #28]
 80025b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a17      	ldr	r2, [pc, #92]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6193      	str	r3, [r2, #24]
 80025c8:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <HAL_UART_MspInit+0x11c>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025d4:	2304      	movs	r3, #4
 80025d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e0:	f107 0318 	add.w	r3, r7, #24
 80025e4:	4619      	mov	r1, r3
 80025e6:	480f      	ldr	r0, [pc, #60]	@ (8002624 <HAL_UART_MspInit+0x120>)
 80025e8:	f000 fc8e 	bl	8002f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025ec:	2308      	movs	r3, #8
 80025ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f8:	f107 0318 	add.w	r3, r7, #24
 80025fc:	4619      	mov	r1, r3
 80025fe:	4809      	ldr	r0, [pc, #36]	@ (8002624 <HAL_UART_MspInit+0x120>)
 8002600:	f000 fc82 	bl	8002f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2101      	movs	r1, #1
 8002608:	2026      	movs	r0, #38	@ 0x26
 800260a:	f000 fb94 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800260e:	2026      	movs	r0, #38	@ 0x26
 8002610:	f000 fbad 	bl	8002d6e <HAL_NVIC_EnableIRQ>
}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	@ 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013800 	.word	0x40013800
 8002620:	40021000 	.word	0x40021000
 8002624:	40010800 	.word	0x40010800
 8002628:	40004400 	.word	0x40004400

0800262c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <NMI_Handler+0x4>

08002634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <HardFault_Handler+0x4>

0800263c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <MemManage_Handler+0x4>

08002644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <UsageFault_Handler+0x4>

08002654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800267c:	f000 fa68 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_BUT_Pin);
 8002688:	2001      	movs	r0, #1
 800268a:	f000 fdd9 	bl	8003240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}

08002692 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_BUT_Pin);
 8002696:	2002      	movs	r0, #2
 8002698:	f000 fdd2 	bl	8003240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <TIM2_IRQHandler+0x10>)
 80026a6:	f001 fbb5 	bl	8003e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000240 	.word	0x20000240

080026b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026b8:	4802      	ldr	r0, [pc, #8]	@ (80026c4 <TIM3_IRQHandler+0x10>)
 80026ba:	f001 fbab 	bl	8003e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000288 	.word	0x20000288

080026c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <USART1_IRQHandler+0x10>)
 80026ce:	f002 fb47 	bl	8004d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200002d0 	.word	0x200002d0

080026dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <USART2_IRQHandler+0x10>)
 80026e2:	f002 fb3d 	bl	8004d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000318 	.word	0x20000318

080026f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return 1;
 80026f4:	2301      	movs	r3, #1
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <_kill>:

int _kill(int pid, int sig)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002708:	f004 f910 	bl	800692c <__errno>
 800270c:	4603      	mov	r3, r0
 800270e:	2216      	movs	r2, #22
 8002710:	601a      	str	r2, [r3, #0]
  return -1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_exit>:

void _exit (int status)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002726:	f04f 31ff 	mov.w	r1, #4294967295
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffe7 	bl	80026fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <_exit+0x12>

08002734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e00a      	b.n	800275c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002746:	f3af 8000 	nop.w
 800274a:	4601      	mov	r1, r0
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	60ba      	str	r2, [r7, #8]
 8002752:	b2ca      	uxtb	r2, r1
 8002754:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3301      	adds	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	dbf0      	blt.n	8002746 <_read+0x12>
  }

  return len;
 8002764:	687b      	ldr	r3, [r7, #4]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	e009      	b.n	8002794 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	60ba      	str	r2, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbf1      	blt.n	8002780 <_write+0x12>
  }
  return len;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_close>:

int _close(int file)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027cc:	605a      	str	r2, [r3, #4]
  return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <_isatty>:

int _isatty(int file)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002810:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <_sbrk+0x5c>)
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <_sbrk+0x60>)
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800281c:	4b13      	ldr	r3, [pc, #76]	@ (800286c <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <_sbrk+0x64>)
 8002826:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <_sbrk+0x68>)
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	429a      	cmp	r2, r3
 8002836:	d207      	bcs.n	8002848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002838:	f004 f878 	bl	800692c <__errno>
 800283c:	4603      	mov	r3, r0
 800283e:	220c      	movs	r2, #12
 8002840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	e009      	b.n	800285c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002848:	4b08      	ldr	r3, [pc, #32]	@ (800286c <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	4a05      	ldr	r2, [pc, #20]	@ (800286c <_sbrk+0x64>)
 8002858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20005000 	.word	0x20005000
 8002868:	00000400 	.word	0x00000400
 800286c:	20002348 	.word	0x20002348
 8002870:	200024a0 	.word	0x200024a0

08002874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <Change_Time_Read_Data>:
 *      Author: DELL
 */
#include <time_related_node_tong.h>

void Change_Time_Read_Data()
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 8002884:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <Change_Time_Read_Data+0xb0>)
 8002886:	88db      	ldrh	r3, [r3, #6]
 8002888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800288c:	d81c      	bhi.n	80028c8 <Change_Time_Read_Data+0x48>
 800288e:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <Change_Time_Read_Data+0xb0>)
 8002890:	889b      	ldrh	r3, [r3, #4]
 8002892:	2b19      	cmp	r3, #25
 8002894:	d818      	bhi.n	80028c8 <Change_Time_Read_Data+0x48>
 8002896:	4b27      	ldr	r3, [pc, #156]	@ (8002934 <Change_Time_Read_Data+0xb4>)
 8002898:	88db      	ldrh	r3, [r3, #6]
 800289a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800289e:	d813      	bhi.n	80028c8 <Change_Time_Read_Data+0x48>
 80028a0:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <Change_Time_Read_Data+0xb4>)
 80028a2:	889b      	ldrh	r3, [r3, #4]
 80028a4:	2b19      	cmp	r3, #25
 80028a6:	d80f      	bhi.n	80028c8 <Change_Time_Read_Data+0x48>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 80028a8:	4823      	ldr	r0, [pc, #140]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 80028aa:	f001 f993 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 3000);     // Cập nhật chu kỳ
 80028ae:	4b22      	ldr	r3, [pc, #136]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 80028ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80028be:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 80028c0:	481d      	ldr	r0, [pc, #116]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 80028c2:	f001 f935 	bl	8003b30 <HAL_TIM_Base_Start_IT>
 80028c6:	e031      	b.n	800292c <Change_Time_Read_Data+0xac>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=50 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <Change_Time_Read_Data+0xb0>)
 80028ca:	88db      	ldrh	r3, [r3, #6]
 80028cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80028d0:	d20c      	bcs.n	80028ec <Change_Time_Read_Data+0x6c>
 80028d2:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <Change_Time_Read_Data+0xb0>)
 80028d4:	889b      	ldrh	r3, [r3, #4]
 80028d6:	2b31      	cmp	r3, #49	@ 0x31
 80028d8:	d808      	bhi.n	80028ec <Change_Time_Read_Data+0x6c>
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <Change_Time_Read_Data+0xb4>)
 80028dc:	88db      	ldrh	r3, [r3, #6]
 80028de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80028e2:	d203      	bcs.n	80028ec <Change_Time_Read_Data+0x6c>
 80028e4:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <Change_Time_Read_Data+0xb4>)
 80028e6:	889b      	ldrh	r3, [r3, #4]
 80028e8:	2b31      	cmp	r3, #49	@ 0x31
 80028ea:	d90f      	bls.n	800290c <Change_Time_Read_Data+0x8c>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 80028ec:	4812      	ldr	r0, [pc, #72]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 80028ee:	f001 f971 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 500);     // Cập nhật chu kỳ
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 80028fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002902:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 8002904:	480c      	ldr	r0, [pc, #48]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 8002906:	f001 f913 	bl	8003b30 <HAL_TIM_Base_Start_IT>
 800290a:	e00f      	b.n	800292c <Change_Time_Read_Data+0xac>
	}
	else
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 800290c:	480a      	ldr	r0, [pc, #40]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 800290e:	f001 f961 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 1500);     // Cập nhật chu kỳ
 8002912:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800291a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 800291e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002922:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 8002924:	4804      	ldr	r0, [pc, #16]	@ (8002938 <Change_Time_Read_Data+0xb8>)
 8002926:	f001 f903 	bl	8003b30 <HAL_TIM_Base_Start_IT>
	}
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	200003ec 	.word	0x200003ec
 8002934:	200003f4 	.word	0x200003f4
 8002938:	20000240 	.word	0x20000240

0800293c <Change_Time_Save_Data>:
void Change_Time_Save_Data()
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 8002940:	4b2a      	ldr	r3, [pc, #168]	@ (80029ec <Change_Time_Save_Data+0xb0>)
 8002942:	88db      	ldrh	r3, [r3, #6]
 8002944:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002948:	d81c      	bhi.n	8002984 <Change_Time_Save_Data+0x48>
 800294a:	4b28      	ldr	r3, [pc, #160]	@ (80029ec <Change_Time_Save_Data+0xb0>)
 800294c:	889b      	ldrh	r3, [r3, #4]
 800294e:	2b19      	cmp	r3, #25
 8002950:	d818      	bhi.n	8002984 <Change_Time_Save_Data+0x48>
 8002952:	4b27      	ldr	r3, [pc, #156]	@ (80029f0 <Change_Time_Save_Data+0xb4>)
 8002954:	88db      	ldrh	r3, [r3, #6]
 8002956:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800295a:	d813      	bhi.n	8002984 <Change_Time_Save_Data+0x48>
 800295c:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <Change_Time_Save_Data+0xb4>)
 800295e:	889b      	ldrh	r3, [r3, #4]
 8002960:	2b19      	cmp	r3, #25
 8002962:	d80f      	bhi.n	8002984 <Change_Time_Save_Data+0x48>
	{
    	HAL_TIM_Base_Stop_IT(&htim3);                  // Dừng timer
 8002964:	4823      	ldr	r0, [pc, #140]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 8002966:	f001 f935 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim3, T3);     // Cập nhật chu kỳ
 800296a:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002974:	4b1f      	ldr	r3, [pc, #124]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 8002976:	f241 7270 	movw	r2, #6000	@ 0x1770
 800297a:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim3);                 // Khởi động lại timer
 800297c:	481d      	ldr	r0, [pc, #116]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 800297e:	f001 f8d7 	bl	8003b30 <HAL_TIM_Base_Start_IT>
 8002982:	e031      	b.n	80029e8 <Change_Time_Save_Data+0xac>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=50 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 8002984:	4b19      	ldr	r3, [pc, #100]	@ (80029ec <Change_Time_Save_Data+0xb0>)
 8002986:	88db      	ldrh	r3, [r3, #6]
 8002988:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800298c:	d20c      	bcs.n	80029a8 <Change_Time_Save_Data+0x6c>
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <Change_Time_Save_Data+0xb0>)
 8002990:	889b      	ldrh	r3, [r3, #4]
 8002992:	2b31      	cmp	r3, #49	@ 0x31
 8002994:	d808      	bhi.n	80029a8 <Change_Time_Save_Data+0x6c>
 8002996:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <Change_Time_Save_Data+0xb4>)
 8002998:	88db      	ldrh	r3, [r3, #6]
 800299a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800299e:	d203      	bcs.n	80029a8 <Change_Time_Save_Data+0x6c>
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <Change_Time_Save_Data+0xb4>)
 80029a2:	889b      	ldrh	r3, [r3, #4]
 80029a4:	2b31      	cmp	r3, #49	@ 0x31
 80029a6:	d90f      	bls.n	80029c8 <Change_Time_Save_Data+0x8c>
	{
    	HAL_TIM_Base_Stop_IT(&htim3);                  // Dừng timer
 80029a8:	4812      	ldr	r0, [pc, #72]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 80029aa:	f001 f913 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim3, T2);     // Cập nhật chu kỳ
 80029ae:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80029b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029b8:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 80029ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80029be:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim3);                 // Khởi động lại timer
 80029c0:	480c      	ldr	r0, [pc, #48]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 80029c2:	f001 f8b5 	bl	8003b30 <HAL_TIM_Base_Start_IT>
 80029c6:	e00f      	b.n	80029e8 <Change_Time_Save_Data+0xac>
	}
	else
	{
    	HAL_TIM_Base_Stop_IT(&htim3);                  // Dừng timer
 80029c8:	480a      	ldr	r0, [pc, #40]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 80029ca:	f001 f903 	bl	8003bd4 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim3, T1);     // Cập nhật chu kỳ
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 80029da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029de:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim3);                 // Khởi động lại timer
 80029e0:	4804      	ldr	r0, [pc, #16]	@ (80029f4 <Change_Time_Save_Data+0xb8>)
 80029e2:	f001 f8a5 	bl	8003b30 <HAL_TIM_Base_Start_IT>
	}
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200003ec 	.word	0x200003ec
 80029f0:	200003f4 	.word	0x200003f4
 80029f4:	20000288 	.word	0x20000288

080029f8 <Control_Fan_Auto>:

void Control_Fan_Auto()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <Control_Fan_Auto+0x74>)
 80029fe:	88db      	ldrh	r3, [r3, #6]
 8002a00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a04:	d812      	bhi.n	8002a2c <Control_Fan_Auto+0x34>
 8002a06:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <Control_Fan_Auto+0x74>)
 8002a08:	889b      	ldrh	r3, [r3, #4]
 8002a0a:	2b19      	cmp	r3, #25
 8002a0c:	d80e      	bhi.n	8002a2c <Control_Fan_Auto+0x34>
 8002a0e:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <Control_Fan_Auto+0x78>)
 8002a10:	88db      	ldrh	r3, [r3, #6]
 8002a12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a16:	d809      	bhi.n	8002a2c <Control_Fan_Auto+0x34>
 8002a18:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <Control_Fan_Auto+0x78>)
 8002a1a:	889b      	ldrh	r3, [r3, #4]
 8002a1c:	2b19      	cmp	r3, #25
 8002a1e:	d805      	bhi.n	8002a2c <Control_Fan_Auto+0x34>
	{
		TIM1->CCR1 = 50;
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <Control_Fan_Auto+0x7c>)
 8002a22:	2232      	movs	r2, #50	@ 0x32
 8002a24:	635a      	str	r2, [r3, #52]	@ 0x34
		L1_LED_On();
 8002a26:	f7fe f905 	bl	8000c34 <L1_LED_On>
 8002a2a:	e01d      	b.n	8002a68 <Control_Fan_Auto+0x70>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=50 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <Control_Fan_Auto+0x74>)
 8002a2e:	88db      	ldrh	r3, [r3, #6]
 8002a30:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002a34:	d20c      	bcs.n	8002a50 <Control_Fan_Auto+0x58>
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <Control_Fan_Auto+0x74>)
 8002a38:	889b      	ldrh	r3, [r3, #4]
 8002a3a:	2b31      	cmp	r3, #49	@ 0x31
 8002a3c:	d808      	bhi.n	8002a50 <Control_Fan_Auto+0x58>
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <Control_Fan_Auto+0x78>)
 8002a40:	88db      	ldrh	r3, [r3, #6]
 8002a42:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002a46:	d203      	bcs.n	8002a50 <Control_Fan_Auto+0x58>
 8002a48:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <Control_Fan_Auto+0x78>)
 8002a4a:	889b      	ldrh	r3, [r3, #4]
 8002a4c:	2b31      	cmp	r3, #49	@ 0x31
 8002a4e:	d905      	bls.n	8002a5c <Control_Fan_Auto+0x64>
	{
		TIM1->CCR1 = 100;
 8002a50:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <Control_Fan_Auto+0x7c>)
 8002a52:	2264      	movs	r2, #100	@ 0x64
 8002a54:	635a      	str	r2, [r3, #52]	@ 0x34
		L3_LED_On();
 8002a56:	f7fe f8d5 	bl	8000c04 <L3_LED_On>
 8002a5a:	e005      	b.n	8002a68 <Control_Fan_Auto+0x70>
	}
	else
	{
		TIM1->CCR1 = 75;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <Control_Fan_Auto+0x7c>)
 8002a5e:	224b      	movs	r2, #75	@ 0x4b
 8002a60:	635a      	str	r2, [r3, #52]	@ 0x34
		L2_LED_On();
 8002a62:	f7fe f8b7 	bl	8000bd4 <L2_LED_On>
	}
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200003ec 	.word	0x200003ec
 8002a70:	200003f4 	.word	0x200003f4
 8002a74:	40012c00 	.word	0x40012c00

08002a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a78:	f7ff fefc 	bl	8002874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480b      	ldr	r0, [pc, #44]	@ (8002aac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a7e:	490c      	ldr	r1, [pc, #48]	@ (8002ab0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a80:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a94:	4c09      	ldr	r4, [pc, #36]	@ (8002abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f003 ff49 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aa6:	f7ff f82f 	bl	8001b08 <main>
  bx lr
 8002aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002ab4:	0800a3c8 	.word	0x0800a3c8
  ldr r2, =_sbss
 8002ab8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002abc:	2000249c 	.word	0x2000249c

08002ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC1_2_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac8:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <HAL_Init+0x28>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a07      	ldr	r2, [pc, #28]	@ (8002aec <HAL_Init+0x28>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f000 f923 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ada:	200f      	movs	r0, #15
 8002adc:	f000 f808 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae0:	f7ff fc4c 	bl	800237c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_InitTick+0x54>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_InitTick+0x58>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f93b 	bl	8002d8a <HAL_SYSTICK_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00e      	b.n	8002b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d80a      	bhi.n	8002b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b24:	2200      	movs	r2, #0
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f000 f903 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b30:	4a06      	ldr	r2, [pc, #24]	@ (8002b4c <HAL_InitTick+0x5c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000008 	.word	0x20000008
 8002b48:	20000010 	.word	0x20000010
 8002b4c:	2000000c 	.word	0x2000000c

08002b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_IncTick+0x1c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_IncTick+0x20>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a03      	ldr	r2, [pc, #12]	@ (8002b70 <HAL_IncTick+0x20>)
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	20000010 	.word	0x20000010
 8002b70:	2000234c 	.word	0x2000234c

08002b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return uwTick;
 8002b78:	4b02      	ldr	r3, [pc, #8]	@ (8002b84 <HAL_GetTick+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	2000234c 	.word	0x2000234c

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4906      	ldr	r1, [pc, #24]	@ (8002c20 <__NVIC_EnableIRQ+0x34>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	@ (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	@ (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	@ 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff90 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff2d 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff42 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff90 	bl	8002c78 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5f 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff35 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d008      	beq.n	8002dcc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e020      	b.n	8002e0e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d005      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e051      	b.n	8002ee0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 020e 	bic.w	r2, r2, #14
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a22      	ldr	r2, [pc, #136]	@ (8002eec <HAL_DMA_Abort_IT+0xd4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d029      	beq.n	8002eba <HAL_DMA_Abort_IT+0xa2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a21      	ldr	r2, [pc, #132]	@ (8002ef0 <HAL_DMA_Abort_IT+0xd8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d022      	beq.n	8002eb6 <HAL_DMA_Abort_IT+0x9e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef4 <HAL_DMA_Abort_IT+0xdc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01a      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x98>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef8 <HAL_DMA_Abort_IT+0xe0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d012      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x92>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1c      	ldr	r2, [pc, #112]	@ (8002efc <HAL_DMA_Abort_IT+0xe4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0x8c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1b      	ldr	r2, [pc, #108]	@ (8002f00 <HAL_DMA_Abort_IT+0xe8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d102      	bne.n	8002e9e <HAL_DMA_Abort_IT+0x86>
 8002e98:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e9c:	e00e      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002e9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ea2:	e00b      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ea8:	e008      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eae:	e005      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eb4:	e002      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	e000      	b.n	8002ebc <HAL_DMA_Abort_IT+0xa4>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4a11      	ldr	r2, [pc, #68]	@ (8002f04 <HAL_DMA_Abort_IT+0xec>)
 8002ebe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
    } 
  }
  return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40020008 	.word	0x40020008
 8002ef0:	4002001c 	.word	0x4002001c
 8002ef4:	40020030 	.word	0x40020030
 8002ef8:	40020044 	.word	0x40020044
 8002efc:	40020058 	.word	0x40020058
 8002f00:	4002006c 	.word	0x4002006c
 8002f04:	40020000 	.word	0x40020000

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b08b      	sub	sp, #44	@ 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1a:	e169      	b.n	80031f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8158 	bne.w	80031ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a9a      	ldr	r2, [pc, #616]	@ (80031a8 <HAL_GPIO_Init+0x2a0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d05e      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f44:	4a98      	ldr	r2, [pc, #608]	@ (80031a8 <HAL_GPIO_Init+0x2a0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d875      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f4a:	4a98      	ldr	r2, [pc, #608]	@ (80031ac <HAL_GPIO_Init+0x2a4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d058      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f50:	4a96      	ldr	r2, [pc, #600]	@ (80031ac <HAL_GPIO_Init+0x2a4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d86f      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f56:	4a96      	ldr	r2, [pc, #600]	@ (80031b0 <HAL_GPIO_Init+0x2a8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d052      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f5c:	4a94      	ldr	r2, [pc, #592]	@ (80031b0 <HAL_GPIO_Init+0x2a8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d869      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f62:	4a94      	ldr	r2, [pc, #592]	@ (80031b4 <HAL_GPIO_Init+0x2ac>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d04c      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f68:	4a92      	ldr	r2, [pc, #584]	@ (80031b4 <HAL_GPIO_Init+0x2ac>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d863      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f6e:	4a92      	ldr	r2, [pc, #584]	@ (80031b8 <HAL_GPIO_Init+0x2b0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d046      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f74:	4a90      	ldr	r2, [pc, #576]	@ (80031b8 <HAL_GPIO_Init+0x2b0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d85d      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d82a      	bhi.n	8002fd4 <HAL_GPIO_Init+0xcc>
 8002f7e:	2b12      	cmp	r3, #18
 8002f80:	d859      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f82:	a201      	add	r2, pc, #4	@ (adr r2, 8002f88 <HAL_GPIO_Init+0x80>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08003003 	.word	0x08003003
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08002fef 	.word	0x08002fef
 8002f94:	08003031 	.word	0x08003031
 8002f98:	08003037 	.word	0x08003037
 8002f9c:	08003037 	.word	0x08003037
 8002fa0:	08003037 	.word	0x08003037
 8002fa4:	08003037 	.word	0x08003037
 8002fa8:	08003037 	.word	0x08003037
 8002fac:	08003037 	.word	0x08003037
 8002fb0:	08003037 	.word	0x08003037
 8002fb4:	08003037 	.word	0x08003037
 8002fb8:	08003037 	.word	0x08003037
 8002fbc:	08003037 	.word	0x08003037
 8002fc0:	08003037 	.word	0x08003037
 8002fc4:	08003037 	.word	0x08003037
 8002fc8:	08003037 	.word	0x08003037
 8002fcc:	08002fe5 	.word	0x08002fe5
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	4a79      	ldr	r2, [pc, #484]	@ (80031bc <HAL_GPIO_Init+0x2b4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fda:	e02c      	b.n	8003036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	623b      	str	r3, [r7, #32]
          break;
 8002fe2:	e029      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	623b      	str	r3, [r7, #32]
          break;
 8002fec:	e024      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	623b      	str	r3, [r7, #32]
          break;
 8002ff6:	e01f      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	623b      	str	r3, [r7, #32]
          break;
 8003000:	e01a      	b.n	8003038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800300a:	2304      	movs	r3, #4
 800300c:	623b      	str	r3, [r7, #32]
          break;
 800300e:	e013      	b.n	8003038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003018:	2308      	movs	r3, #8
 800301a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	611a      	str	r2, [r3, #16]
          break;
 8003022:	e009      	b.n	8003038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003024:	2308      	movs	r3, #8
 8003026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	615a      	str	r2, [r3, #20]
          break;
 800302e:	e003      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003030:	2300      	movs	r3, #0
 8003032:	623b      	str	r3, [r7, #32]
          break;
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x130>
          break;
 8003036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2bff      	cmp	r3, #255	@ 0xff
 800303c:	d801      	bhi.n	8003042 <HAL_GPIO_Init+0x13a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	e001      	b.n	8003046 <HAL_GPIO_Init+0x13e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2bff      	cmp	r3, #255	@ 0xff
 800304c:	d802      	bhi.n	8003054 <HAL_GPIO_Init+0x14c>
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	e002      	b.n	800305a <HAL_GPIO_Init+0x152>
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	3b08      	subs	r3, #8
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	210f      	movs	r1, #15
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	6a39      	ldr	r1, [r7, #32]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	431a      	orrs	r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80b1 	beq.w	80031ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003088:	4b4d      	ldr	r3, [pc, #308]	@ (80031c0 <HAL_GPIO_Init+0x2b8>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4a4c      	ldr	r2, [pc, #304]	@ (80031c0 <HAL_GPIO_Init+0x2b8>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6193      	str	r3, [r2, #24]
 8003094:	4b4a      	ldr	r3, [pc, #296]	@ (80031c0 <HAL_GPIO_Init+0x2b8>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030a0:	4a48      	ldr	r2, [pc, #288]	@ (80031c4 <HAL_GPIO_Init+0x2bc>)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a40      	ldr	r2, [pc, #256]	@ (80031c8 <HAL_GPIO_Init+0x2c0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_GPIO_Init+0x1ec>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a3f      	ldr	r2, [pc, #252]	@ (80031cc <HAL_GPIO_Init+0x2c4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00d      	beq.n	80030f0 <HAL_GPIO_Init+0x1e8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a3e      	ldr	r2, [pc, #248]	@ (80031d0 <HAL_GPIO_Init+0x2c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <HAL_GPIO_Init+0x1e4>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3d      	ldr	r2, [pc, #244]	@ (80031d4 <HAL_GPIO_Init+0x2cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_GPIO_Init+0x1e0>
 80030e4:	2303      	movs	r3, #3
 80030e6:	e006      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e004      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e002      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030f4:	2300      	movs	r3, #0
 80030f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f8:	f002 0203 	and.w	r2, r2, #3
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	4093      	lsls	r3, r2
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003106:	492f      	ldr	r1, [pc, #188]	@ (80031c4 <HAL_GPIO_Init+0x2bc>)
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	3302      	adds	r3, #2
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003120:	4b2d      	ldr	r3, [pc, #180]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	492c      	ldr	r1, [pc, #176]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800312e:	4b2a      	ldr	r3, [pc, #168]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	43db      	mvns	r3, r3
 8003136:	4928      	ldr	r1, [pc, #160]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003138:	4013      	ands	r3, r2
 800313a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003148:	4b23      	ldr	r3, [pc, #140]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	4922      	ldr	r1, [pc, #136]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	60cb      	str	r3, [r1, #12]
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003156:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	43db      	mvns	r3, r3
 800315e:	491e      	ldr	r1, [pc, #120]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003160:	4013      	ands	r3, r2
 8003162:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4918      	ldr	r1, [pc, #96]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800317e:	4b16      	ldr	r3, [pc, #88]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	43db      	mvns	r3, r3
 8003186:	4914      	ldr	r1, [pc, #80]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003188:	4013      	ands	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d021      	beq.n	80031dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003198:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	490e      	ldr	r1, [pc, #56]	@ (80031d8 <HAL_GPIO_Init+0x2d0>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e021      	b.n	80031ea <HAL_GPIO_Init+0x2e2>
 80031a6:	bf00      	nop
 80031a8:	10320000 	.word	0x10320000
 80031ac:	10310000 	.word	0x10310000
 80031b0:	10220000 	.word	0x10220000
 80031b4:	10210000 	.word	0x10210000
 80031b8:	10120000 	.word	0x10120000
 80031bc:	10110000 	.word	0x10110000
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40010800 	.word	0x40010800
 80031cc:	40010c00 	.word	0x40010c00
 80031d0:	40011000 	.word	0x40011000
 80031d4:	40011400 	.word	0x40011400
 80031d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_GPIO_Init+0x304>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4909      	ldr	r1, [pc, #36]	@ (800320c <HAL_GPIO_Init+0x304>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	3301      	adds	r3, #1
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f47f ae8e 	bne.w	8002f1c <HAL_GPIO_Init+0x14>
  }
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	372c      	adds	r7, #44	@ 0x2c
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40010400 	.word	0x40010400

08003210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
 800321c:	4613      	mov	r3, r2
 800321e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800322c:	e003      	b.n	8003236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	041a      	lsls	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800324a:	4b08      	ldr	r3, [pc, #32]	@ (800326c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003256:	4a05      	ldr	r2, [pc, #20]	@ (800326c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fbe8 	bl	8001a34 <HAL_GPIO_EXTI_Callback>
  }
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40010400 	.word	0x40010400

08003270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e272      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003290:	4b92      	ldr	r3, [pc, #584]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b04      	cmp	r3, #4
 800329a:	d00c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800329c:	4b8f      	ldr	r3, [pc, #572]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d112      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
 80032a8:	4b8c      	ldr	r3, [pc, #560]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b4:	d10b      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	4b89      	ldr	r3, [pc, #548]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d06c      	beq.n	800339c <HAL_RCC_OscConfig+0x12c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d168      	bne.n	800339c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e24c      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x76>
 80032d8:	4b80      	ldr	r3, [pc, #512]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a7f      	ldr	r2, [pc, #508]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e02e      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x98>
 80032ee:	4b7b      	ldr	r3, [pc, #492]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7a      	ldr	r2, [pc, #488]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b78      	ldr	r3, [pc, #480]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a77      	ldr	r2, [pc, #476]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003300:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0xbc>
 8003312:	4b72      	ldr	r3, [pc, #456]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a71      	ldr	r2, [pc, #452]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b6f      	ldr	r3, [pc, #444]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6e      	ldr	r2, [pc, #440]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 800332c:	4b6b      	ldr	r3, [pc, #428]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6a      	ldr	r2, [pc, #424]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b68      	ldr	r3, [pc, #416]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a67      	ldr	r2, [pc, #412]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7ff fc12 	bl	8002b74 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7ff fc0e 	bl	8002b74 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e200      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b5d      	ldr	r3, [pc, #372]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xe4>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7ff fbfe 	bl	8002b74 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7ff fbfa 	bl	8002b74 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1ec      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b53      	ldr	r3, [pc, #332]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x10c>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033aa:	4b4c      	ldr	r3, [pc, #304]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033b6:	4b49      	ldr	r3, [pc, #292]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11c      	bne.n	80033fc <HAL_RCC_OscConfig+0x18c>
 80033c2:	4b46      	ldr	r3, [pc, #280]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	4b43      	ldr	r3, [pc, #268]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1c0      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b3d      	ldr	r3, [pc, #244]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4939      	ldr	r1, [pc, #228]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	e03a      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b36      	ldr	r3, [pc, #216]	@ (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7ff fbb3 	bl	8002b74 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003412:	f7ff fbaf 	bl	8002b74 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1a1      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b2a      	ldr	r3, [pc, #168]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4927      	ldr	r1, [pc, #156]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003446:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7ff fb92 	bl	8002b74 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7ff fb8e 	bl	8002b74 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e180      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03a      	beq.n	80034f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d019      	beq.n	80034ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <HAL_RCC_OscConfig+0x274>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7ff fb72 	bl	8002b74 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003494:	f7ff fb6e 	bl	8002b74 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e160      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034b2:	2001      	movs	r0, #1
 80034b4:	f000 face 	bl	8003a54 <RCC_Delay>
 80034b8:	e01c      	b.n	80034f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ba:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <HAL_RCC_OscConfig+0x274>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7ff fb58 	bl	8002b74 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c8:	f7ff fb54 	bl	8002b74 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d908      	bls.n	80034e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e146      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	42420000 	.word	0x42420000
 80034e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b92      	ldr	r3, [pc, #584]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e9      	bne.n	80034c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80a6 	beq.w	800364e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b8b      	ldr	r3, [pc, #556]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10d      	bne.n	800352e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	4b88      	ldr	r3, [pc, #544]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4a87      	ldr	r2, [pc, #540]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800351c:	61d3      	str	r3, [r2, #28]
 800351e:	4b85      	ldr	r3, [pc, #532]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b82      	ldr	r3, [pc, #520]	@ (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b7f      	ldr	r3, [pc, #508]	@ (8003738 <HAL_RCC_OscConfig+0x4c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7e      	ldr	r2, [pc, #504]	@ (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7ff fb15 	bl	8002b74 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7ff fb11 	bl	8002b74 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	@ 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e103      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b75      	ldr	r3, [pc, #468]	@ (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x312>
 8003574:	4b6f      	ldr	r3, [pc, #444]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4a6e      	ldr	r2, [pc, #440]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6213      	str	r3, [r2, #32]
 8003580:	e02d      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x334>
 800358a:	4b6a      	ldr	r3, [pc, #424]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a69      	ldr	r2, [pc, #420]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	4b67      	ldr	r3, [pc, #412]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a66      	ldr	r2, [pc, #408]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	e01c      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x356>
 80035ac:	4b61      	ldr	r3, [pc, #388]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a60      	ldr	r2, [pc, #384]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	e00b      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 80035c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	4b58      	ldr	r3, [pc, #352]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a57      	ldr	r2, [pc, #348]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d015      	beq.n	8003612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7ff fac5 	bl	8002b74 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7ff fac1 	bl	8002b74 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0b1      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ee      	beq.n	80035ee <HAL_RCC_OscConfig+0x37e>
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7ff faaf 	bl	8002b74 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7ff faab 	bl	8002b74 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e09b      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	4b40      	ldr	r3, [pc, #256]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ee      	bne.n	800361a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d105      	bne.n	800364e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003642:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a3b      	ldr	r2, [pc, #236]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800364c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8087 	beq.w	8003766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	4b36      	ldr	r3, [pc, #216]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d061      	beq.n	8003728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d146      	bne.n	80036fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	4b33      	ldr	r3, [pc, #204]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7ff fa7f 	bl	8002b74 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7ff fa7b 	bl	8002b74 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e06d      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	4b29      	ldr	r3, [pc, #164]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a0:	d108      	bne.n	80036b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036a2:	4b24      	ldr	r3, [pc, #144]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4921      	ldr	r1, [pc, #132]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a19      	ldr	r1, [r3, #32]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	430b      	orrs	r3, r1
 80036c6:	491b      	ldr	r1, [pc, #108]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7ff fa4f 	bl	8002b74 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7ff fa4b 	bl	8002b74 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e03d      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x46a>
 80036f8:	e035      	b.n	8003766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7ff fa38 	bl	8002b74 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7ff fa34 	bl	8002b74 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e026      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x498>
 8003726:	e01e      	b.n	8003766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e019      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
 800373c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_OscConfig+0x500>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	429a      	cmp	r2, r3
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0d0      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b6a      	ldr	r3, [pc, #424]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d910      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b67      	ldr	r3, [pc, #412]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 0207 	bic.w	r2, r3, #7
 800379e:	4965      	ldr	r1, [pc, #404]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a58      	ldr	r2, [pc, #352]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a52      	ldr	r2, [pc, #328]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d040      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d115      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b41      	ldr	r3, [pc, #260]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e073      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3d      	ldr	r3, [pc, #244]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06b      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4936      	ldr	r1, [pc, #216]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7ff f986 	bl	8002b74 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7ff f982 	bl	8002b74 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e053      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b27      	ldr	r3, [pc, #156]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d210      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 0207 	bic.w	r2, r3, #7
 80038aa:	4922      	ldr	r1, [pc, #136]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	@ (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	@ (8003940 <HAL_RCC_ClockConfig+0x1cc>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1d0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f8e4 	bl	8002af0 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40022000 	.word	0x40022000
 8003938:	40021000 	.word	0x40021000
 800393c:	08009f5c 	.word	0x08009f5c
 8003940:	20000008 	.word	0x20000008
 8003944:	2000000c 	.word	0x2000000c

08003948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003962:	4b1e      	ldr	r3, [pc, #120]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b04      	cmp	r3, #4
 8003970:	d002      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x30>
 8003972:	2b08      	cmp	r3, #8
 8003974:	d003      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x36>
 8003976:	e027      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800397a:	613b      	str	r3, [r7, #16]
      break;
 800397c:	e027      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0c9b      	lsrs	r3, r3, #18
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	4a17      	ldr	r2, [pc, #92]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003996:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0c5b      	lsrs	r3, r3, #17
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	4a11      	ldr	r2, [pc, #68]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80039aa:	fb03 f202 	mul.w	r2, r3, r2
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e004      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0c      	ldr	r2, [pc, #48]	@ (80039ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	613b      	str	r3, [r7, #16]
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ca:	613b      	str	r3, [r7, #16]
      break;
 80039cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ce:	693b      	ldr	r3, [r7, #16]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	007a1200 	.word	0x007a1200
 80039e4:	08009f74 	.word	0x08009f74
 80039e8:	08009f84 	.word	0x08009f84
 80039ec:	003d0900 	.word	0x003d0900

080039f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b02      	ldr	r3, [pc, #8]	@ (8003a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	20000008 	.word	0x20000008

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a08:	f7ff fff2 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	@ (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08009f6c 	.word	0x08009f6c

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a30:	f7ff ffde 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	@ (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08009f6c 	.word	0x08009f6c

08003a54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <RCC_Delay+0x34>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <RCC_Delay+0x38>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	0a5b      	lsrs	r3, r3, #9
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a70:	bf00      	nop
  }
  while (Delay --);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	60fa      	str	r2, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f9      	bne.n	8003a70 <RCC_Delay+0x1c>
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	20000008 	.word	0x20000008
 8003a8c:	10624dd3 	.word	0x10624dd3

08003a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e041      	b.n	8003b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fe fcb0 	bl	800241c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 fc3e 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d001      	beq.n	8003b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e03a      	b.n	8003bbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a18      	ldr	r2, [pc, #96]	@ (8003bc8 <HAL_TIM_Base_Start_IT+0x98>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_TIM_Base_Start_IT+0x58>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b72:	d009      	beq.n	8003b88 <HAL_TIM_Base_Start_IT+0x58>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a14      	ldr	r2, [pc, #80]	@ (8003bcc <HAL_TIM_Base_Start_IT+0x9c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_TIM_Base_Start_IT+0x58>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a13      	ldr	r2, [pc, #76]	@ (8003bd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d111      	bne.n	8003bac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d010      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003baa:	e007      	b.n	8003bbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800

08003bd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a1a      	ldr	r2, [r3, #32]
 8003bf2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10f      	bne.n	8003c1c <HAL_TIM_Base_Stop_IT+0x48>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a1a      	ldr	r2, [r3, #32]
 8003c02:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_Base_Stop_IT+0x48>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e041      	b.n	8003cc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe fbc2 	bl	80023e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f000 fb6e 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_TIM_PWM_Start+0x24>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e022      	b.n	8003d3a <HAL_TIM_PWM_Start+0x6a>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d109      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x3e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e015      	b.n	8003d3a <HAL_TIM_PWM_Start+0x6a>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d109      	bne.n	8003d28 <HAL_TIM_PWM_Start+0x58>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e008      	b.n	8003d3a <HAL_TIM_PWM_Start+0x6a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	bf14      	ite	ne
 8003d34:	2301      	movne	r3, #1
 8003d36:	2300      	moveq	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e05e      	b.n	8003e00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_PWM_Start+0x82>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d50:	e013      	b.n	8003d7a <HAL_TIM_PWM_Start+0xaa>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_PWM_Start+0x92>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d60:	e00b      	b.n	8003d7a <HAL_TIM_PWM_Start+0xaa>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_PWM_Start+0xa2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d70:	e003      	b.n	8003d7a <HAL_TIM_PWM_Start+0xaa>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fd70 	bl	8004868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <HAL_TIM_PWM_Start+0x138>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d107      	bne.n	8003da2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a18      	ldr	r2, [pc, #96]	@ (8003e08 <HAL_TIM_PWM_Start+0x138>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_TIM_PWM_Start+0xfa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db4:	d009      	beq.n	8003dca <HAL_TIM_PWM_Start+0xfa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a14      	ldr	r2, [pc, #80]	@ (8003e0c <HAL_TIM_PWM_Start+0x13c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIM_PWM_Start+0xfa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a12      	ldr	r2, [pc, #72]	@ (8003e10 <HAL_TIM_PWM_Start+0x140>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d111      	bne.n	8003dee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d010      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	e007      	b.n	8003dfe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800

08003e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d020      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01b      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0202 	mvn.w	r2, #2
 8003e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa5a 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa4d 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa5c 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d020      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01b      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0204 	mvn.w	r2, #4
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fa34 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa27 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa36 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d020      	beq.n	8003f10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0208 	mvn.w	r2, #8
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fa0e 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa01 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa10 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d020      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0210 	mvn.w	r2, #16
 8003f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2208      	movs	r2, #8
 8003f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9e8 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f9db 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f9ea 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00c      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0201 	mvn.w	r2, #1
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc fe96 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fd3e 	bl	8004a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00c      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9ba 	bl	800433c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0220 	mvn.w	r2, #32
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fd11 	bl	8004a0e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800400e:	2302      	movs	r3, #2
 8004010:	e0ae      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	f200 809f 	bhi.w	8004160 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004022:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	0800405d 	.word	0x0800405d
 800402c:	08004161 	.word	0x08004161
 8004030:	08004161 	.word	0x08004161
 8004034:	08004161 	.word	0x08004161
 8004038:	0800409d 	.word	0x0800409d
 800403c:	08004161 	.word	0x08004161
 8004040:	08004161 	.word	0x08004161
 8004044:	08004161 	.word	0x08004161
 8004048:	080040df 	.word	0x080040df
 800404c:	08004161 	.word	0x08004161
 8004050:	08004161 	.word	0x08004161
 8004054:	08004161 	.word	0x08004161
 8004058:	0800411f 	.word	0x0800411f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f9e2 	bl	800442c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0208 	orr.w	r2, r2, #8
 8004076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6999      	ldr	r1, [r3, #24]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	619a      	str	r2, [r3, #24]
      break;
 800409a:	e064      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fa28 	bl	80044f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6999      	ldr	r1, [r3, #24]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	619a      	str	r2, [r3, #24]
      break;
 80040dc:	e043      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fa71 	bl	80045cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0208 	orr.w	r2, r2, #8
 80040f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0204 	bic.w	r2, r2, #4
 8004108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69d9      	ldr	r1, [r3, #28]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	61da      	str	r2, [r3, #28]
      break;
 800411c:	e023      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fabb 	bl	80046a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69d9      	ldr	r1, [r3, #28]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	021a      	lsls	r2, r3, #8
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	61da      	str	r2, [r3, #28]
      break;
 800415e:	e002      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
      break;
 8004164:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_TIM_ConfigClockSource+0x1c>
 8004190:	2302      	movs	r3, #2
 8004192:	e0b4      	b.n	80042fe <HAL_TIM_ConfigClockSource+0x186>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041cc:	d03e      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xd4>
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d2:	f200 8087 	bhi.w	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041da:	f000 8086 	beq.w	80042ea <HAL_TIM_ConfigClockSource+0x172>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e2:	d87f      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e4:	2b70      	cmp	r3, #112	@ 0x70
 80041e6:	d01a      	beq.n	800421e <HAL_TIM_ConfigClockSource+0xa6>
 80041e8:	2b70      	cmp	r3, #112	@ 0x70
 80041ea:	d87b      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041ec:	2b60      	cmp	r3, #96	@ 0x60
 80041ee:	d050      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x11a>
 80041f0:	2b60      	cmp	r3, #96	@ 0x60
 80041f2:	d877      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b50      	cmp	r3, #80	@ 0x50
 80041f6:	d03c      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0xfa>
 80041f8:	2b50      	cmp	r3, #80	@ 0x50
 80041fa:	d873      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d058      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004200:	2b40      	cmp	r3, #64	@ 0x40
 8004202:	d86f      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b30      	cmp	r3, #48	@ 0x30
 8004206:	d064      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004208:	2b30      	cmp	r3, #48	@ 0x30
 800420a:	d86b      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d060      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004210:	2b20      	cmp	r3, #32
 8004212:	d867      	bhi.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05c      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b10      	cmp	r3, #16
 800421a:	d05a      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x15a>
 800421c:	e062      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	f000 fafc 	bl	800482a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	609a      	str	r2, [r3, #8]
      break;
 800424a:	e04f      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	f000 fae5 	bl	800482a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800426e:	609a      	str	r2, [r3, #8]
      break;
 8004270:	e03c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427e:	461a      	mov	r2, r3
 8004280:	f000 fa5c 	bl	800473c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2150      	movs	r1, #80	@ 0x50
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fab3 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 8004290:	e02c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429e:	461a      	mov	r2, r3
 80042a0:	f000 fa7a 	bl	8004798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2160      	movs	r1, #96	@ 0x60
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 faa3 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 80042b0:	e01c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042be:	461a      	mov	r2, r3
 80042c0:	f000 fa3c 	bl	800473c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2140      	movs	r1, #64	@ 0x40
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fa93 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 80042d0:	e00c      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f000 fa8a 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 80042e2:	e003      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      break;
 80042e8:	e000      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
	...

08004350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a2f      	ldr	r2, [pc, #188]	@ (8004420 <TIM_Base_SetConfig+0xd0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a2c      	ldr	r2, [pc, #176]	@ (8004424 <TIM_Base_SetConfig+0xd4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a2b      	ldr	r2, [pc, #172]	@ (8004428 <TIM_Base_SetConfig+0xd8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a22      	ldr	r2, [pc, #136]	@ (8004420 <TIM_Base_SetConfig+0xd0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004424 <TIM_Base_SetConfig+0xd4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <TIM_Base_SetConfig+0xd8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004420 <TIM_Base_SetConfig+0xd0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	611a      	str	r2, [r3, #16]
  }
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800

0800442c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f023 0201 	bic.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0303 	bic.w	r3, r3, #3
 8004462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f023 0302 	bic.w	r3, r3, #2
 8004474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a1c      	ldr	r2, [pc, #112]	@ (80044f4 <TIM_OC1_SetConfig+0xc8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d10c      	bne.n	80044a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0308 	bic.w	r3, r3, #8
 800448e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 0304 	bic.w	r3, r3, #4
 80044a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a13      	ldr	r2, [pc, #76]	@ (80044f4 <TIM_OC1_SetConfig+0xc8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d111      	bne.n	80044ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00

080044f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f023 0210 	bic.w	r2, r3, #16
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800452e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0320 	bic.w	r3, r3, #32
 8004542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <TIM_OC2_SetConfig+0xd0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d10d      	bne.n	8004574 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800455e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004572:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <TIM_OC2_SetConfig+0xd0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d113      	bne.n	80045a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800458a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	40012c00 	.word	0x40012c00

080045cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1d      	ldr	r2, [pc, #116]	@ (800469c <TIM_OC3_SetConfig+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d10d      	bne.n	8004646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a14      	ldr	r2, [pc, #80]	@ (800469c <TIM_OC3_SetConfig+0xd0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d113      	bne.n	8004676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	621a      	str	r2, [r3, #32]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40012c00 	.word	0x40012c00

080046a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	031b      	lsls	r3, r3, #12
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004738 <TIM_OC4_SetConfig+0x98>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d109      	bne.n	8004714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	40012c00 	.word	0x40012c00

0800473c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0201 	bic.w	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 030a 	bic.w	r3, r3, #10
 8004778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0210 	bic.w	r2, r3, #16
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	031b      	lsls	r3, r3, #12
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	621a      	str	r2, [r3, #32]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	f043 0307 	orr.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800482a:	b480      	push	{r7}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004844:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	431a      	orrs	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2201      	movs	r2, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1a      	ldr	r2, [r3, #32]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	43db      	mvns	r3, r3
 800488a:	401a      	ands	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	431a      	orrs	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e046      	b.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a16      	ldr	r2, [pc, #88]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00e      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004914:	d009      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a12      	ldr	r2, [pc, #72]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a10      	ldr	r2, [pc, #64]	@ (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d10c      	bne.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	4313      	orrs	r3, r2
 800493a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800

0800496c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004984:	2302      	movs	r3, #2
 8004986:	e03d      	b.n	8004a04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e042      	b.n	8004aca <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fd fd53 	bl	8002504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2224      	movs	r2, #36	@ 0x24
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a74:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fe4e 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a8a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a9a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b08a      	sub	sp, #40	@ 0x28
 8004ad6:	af02      	add	r7, sp, #8
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d175      	bne.n	8004bde <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_UART_Transmit+0x2c>
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e06e      	b.n	8004be0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2221      	movs	r2, #33	@ 0x21
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b10:	f7fe f830 	bl	8002b74 <HAL_GetTick>
 8004b14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2a:	d108      	bne.n	8004b3e <HAL_UART_Transmit+0x6c>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e003      	b.n	8004b46 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b46:	e02e      	b.n	8004ba6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2180      	movs	r1, #128	@ 0x80
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fbb3 	bl	80052be <UART_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e03a      	b.n	8004be0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	3302      	adds	r3, #2
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	e007      	b.n	8004b98 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3301      	adds	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1cb      	bne.n	8004b48 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2140      	movs	r1, #64	@ 0x40
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fb7f 	bl	80052be <UART_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e006      	b.n	8004be0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e000      	b.n	8004be0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	@ 0x28
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	f040 8081 	bne.w	8004d0c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_UART_Receive+0x2e>
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e079      	b.n	8004d0e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2222      	movs	r2, #34	@ 0x22
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c2e:	f7fd ffa1 	bl	8002b74 <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c48:	d108      	bne.n	8004c5c <HAL_UART_Receive+0x74>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c64:	e047      	b.n	8004cf6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2120      	movs	r1, #32
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb24 	bl	80052be <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e042      	b.n	8004d0e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e01f      	b.n	8004ce8 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb0:	d007      	beq.n	8004cc2 <HAL_UART_Receive+0xda>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_UART_Receive+0xe8>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e008      	b.n	8004ce2 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1b2      	bne.n	8004c66 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	4613      	mov	r3, r2
 8004d22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d112      	bne.n	8004d56 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_UART_Receive_IT+0x26>
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e00b      	b.n	8004d58 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fb0f 	bl	8005370 <UART_Start_Receive_IT>
 8004d52:	4603      	mov	r3, r0
 8004d54:	e000      	b.n	8004d58 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
  }
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b0ba      	sub	sp, #232	@ 0xe8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x66>
 8004db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fbec 	bl	800559c <UART_Receive_IT>
      return;
 8004dc4:	e25b      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 80de 	beq.w	8004f8c <HAL_UART_IRQHandler+0x22c>
 8004dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80d1 	beq.w	8004f8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_UART_IRQHandler+0xae>
 8004df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e06:	f043 0201 	orr.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <HAL_UART_IRQHandler+0xd2>
 8004e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f043 0202 	orr.w	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_UART_IRQHandler+0xf6>
 8004e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d011      	beq.n	8004e86 <HAL_UART_IRQHandler+0x126>
 8004e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	f043 0208 	orr.w	r2, r3, #8
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 81f2 	beq.w	8005274 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_UART_IRQHandler+0x14e>
 8004e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb77 	bl	800559c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <HAL_UART_IRQHandler+0x17a>
 8004ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04f      	beq.n	8004f7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fa81 	bl	80053e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d041      	beq.n	8004f72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1d9      	bne.n	8004eee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d013      	beq.n	8004f6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f46:	4a7e      	ldr	r2, [pc, #504]	@ (8005140 <HAL_UART_IRQHandler+0x3e0>)
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fd ff62 	bl	8002e18 <HAL_DMA_Abort_IT>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f64:	4610      	mov	r0, r2
 8004f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e00e      	b.n	8004f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f993 	bl	8005296 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e00a      	b.n	8004f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f98f 	bl	8005296 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e006      	b.n	8004f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f98b 	bl	8005296 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f86:	e175      	b.n	8005274 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	bf00      	nop
    return;
 8004f8a:	e173      	b.n	8005274 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	f040 814f 	bne.w	8005234 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8148 	beq.w	8005234 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8141 	beq.w	8005234 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80b6 	beq.w	8005144 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8145 	beq.w	8005278 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	f080 813e 	bcs.w	8005278 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005002:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b20      	cmp	r3, #32
 800500c:	f000 8088 	beq.w	8005120 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005026:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800502a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800502e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800503c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005048:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1d9      	bne.n	8005010 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3314      	adds	r3, #20
 8005062:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800506c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005080:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005084:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005088:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e1      	bne.n	800505c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e3      	bne.n	8005098 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f0:	f023 0310 	bic.w	r3, r3, #16
 80050f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005102:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005104:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e3      	bne.n	80050de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd fe41 	bl	8002da2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800512e:	b29b      	uxth	r3, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	b29b      	uxth	r3, r3
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8b6 	bl	80052a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800513c:	e09c      	b.n	8005278 <HAL_UART_IRQHandler+0x518>
 800513e:	bf00      	nop
 8005140:	080054a7 	.word	0x080054a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800514c:	b29b      	uxth	r3, r3
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 808e 	beq.w	800527c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8089 	beq.w	800527c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800517a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800518e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800519c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	623b      	str	r3, [r7, #32]
   return(result);
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e3      	bne.n	80051a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0310 	bic.w	r3, r3, #16
 80051fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800520c:	61fa      	str	r2, [r7, #28]
 800520e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	69b9      	ldr	r1, [r7, #24]
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	617b      	str	r3, [r7, #20]
   return(result);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e3      	bne.n	80051e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f83b 	bl	80052a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005232:	e023      	b.n	800527c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <HAL_UART_IRQHandler+0x4f4>
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f93e 	bl	80054ce <UART_Transmit_IT>
    return;
 8005252:	e014      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00e      	beq.n	800527e <HAL_UART_IRQHandler+0x51e>
 8005260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f97d 	bl	800556c <UART_EndTransmit_IT>
    return;
 8005272:	e004      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
    return;
 8005274:	bf00      	nop
 8005276:	e002      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
      return;
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
      return;
 800527c:	bf00      	nop
  }
}
 800527e:	37e8      	adds	r7, #232	@ 0xe8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr

08005296 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ce:	e03b      	b.n	8005348 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d037      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d8:	f7fd fc4c 	bl	8002b74 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d302      	bcc.n	80052ee <UART_WaitOnFlagUntilTimeout+0x30>
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e03a      	b.n	8005368 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d023      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b80      	cmp	r3, #128	@ 0x80
 8005304:	d020      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d01d      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b08      	cmp	r3, #8
 8005318:	d116      	bne.n	8005348 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f856 	bl	80053e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2208      	movs	r2, #8
 800533a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e00f      	b.n	8005368 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	429a      	cmp	r2, r3
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	429a      	cmp	r2, r3
 8005364:	d0b4      	beq.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	88fa      	ldrh	r2, [r7, #6]
 8005388:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	88fa      	ldrh	r2, [r7, #6]
 800538e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2222      	movs	r2, #34	@ 0x22
 800539a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695a      	ldr	r2, [r3, #20]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0220 	orr.w	r2, r2, #32
 80053d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b095      	sub	sp, #84	@ 0x54
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800540a:	643a      	str	r2, [r7, #64]	@ 0x40
 800540c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	61fb      	str	r3, [r7, #28]
   return(result);
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800543e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	2b01      	cmp	r3, #1
 8005458:	d119      	bne.n	800548e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	60bb      	str	r3, [r7, #8]
   return(result);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 0310 	bic.w	r3, r3, #16
 8005470:	647b      	str	r3, [r7, #68]	@ 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800547a:	61ba      	str	r2, [r7, #24]
 800547c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6979      	ldr	r1, [r7, #20]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	613b      	str	r3, [r7, #16]
   return(result);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800549c:	bf00      	nop
 800549e:	3754      	adds	r7, #84	@ 0x54
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff fee8 	bl	8005296 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b21      	cmp	r3, #33	@ 0x21
 80054e0:	d13e      	bne.n	8005560 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	d114      	bne.n	8005516 <UART_Transmit_IT+0x48>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d110      	bne.n	8005516 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005508:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	1c9a      	adds	r2, r3, #2
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	621a      	str	r2, [r3, #32]
 8005514:	e008      	b.n	8005528 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6211      	str	r1, [r2, #32]
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29b      	uxth	r3, r3
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4619      	mov	r1, r3
 8005536:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10f      	bne.n	800555c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800554a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800555a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005582:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fe79 	bl	8005284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	@ 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b22      	cmp	r3, #34	@ 0x22
 80055ae:	f040 80ae 	bne.w	800570e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ba:	d117      	bne.n	80055ec <UART_Receive_IT+0x50>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d113      	bne.n	80055ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	1c9a      	adds	r2, r3, #2
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80055ea:	e026      	b.n	800563a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fe:	d007      	beq.n	8005610 <UART_Receive_IT+0x74>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <UART_Receive_IT+0x82>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e008      	b.n	8005630 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562a:	b2da      	uxtb	r2, r3
 800562c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29b      	uxth	r3, r3
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4619      	mov	r1, r3
 8005648:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800564a:	2b00      	cmp	r3, #0
 800564c:	d15d      	bne.n	800570a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0220 	bic.w	r2, r2, #32
 800565c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800566c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0201 	bic.w	r2, r2, #1
 800567c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	2b01      	cmp	r3, #1
 8005692:	d135      	bne.n	8005700 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	613b      	str	r3, [r7, #16]
   return(result);
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f023 0310 	bic.w	r3, r3, #16
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ba:	623a      	str	r2, [r7, #32]
 80056bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	69f9      	ldr	r1, [r7, #28]
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d10a      	bne.n	80056f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fdd5 	bl	80052a8 <HAL_UARTEx_RxEventCallback>
 80056fe:	e002      	b.n	8005706 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fb fb7f 	bl	8000e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e002      	b.n	8005710 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	e000      	b.n	8005710 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800570e:	2302      	movs	r3, #2
  }
}
 8005710:	4618      	mov	r0, r3
 8005712:	3730      	adds	r7, #48	@ 0x30
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005752:	f023 030c 	bic.w	r3, r3, #12
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	430b      	orrs	r3, r1
 800575e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2c      	ldr	r2, [pc, #176]	@ (800582c <UART_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005780:	f7fe f954 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	e002      	b.n	800578e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe f93c 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 800578c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009a      	lsls	r2, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	4a22      	ldr	r2, [pc, #136]	@ (8005830 <UART_SetConfig+0x118>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	0119      	lsls	r1, r3, #4
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009a      	lsls	r2, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005830 <UART_SetConfig+0x118>)
 80057c6:	fba3 0302 	umull	r0, r3, r3, r2
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2064      	movs	r0, #100	@ 0x64
 80057ce:	fb00 f303 	mul.w	r3, r0, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	3332      	adds	r3, #50	@ 0x32
 80057d8:	4a15      	ldr	r2, [pc, #84]	@ (8005830 <UART_SetConfig+0x118>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057e4:	4419      	add	r1, r3
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009a      	lsls	r2, r3, #2
 80057f0:	441a      	add	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <UART_SetConfig+0x118>)
 80057fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	2064      	movs	r0, #100	@ 0x64
 8005806:	fb00 f303 	mul.w	r3, r0, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	3332      	adds	r3, #50	@ 0x32
 8005810:	4a07      	ldr	r2, [pc, #28]	@ (8005830 <UART_SetConfig+0x118>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	440a      	add	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005824:	bf00      	nop
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40013800 	.word	0x40013800
 8005830:	51eb851f 	.word	0x51eb851f

08005834 <_strtol_l.constprop.0>:
 8005834:	2b24      	cmp	r3, #36	@ 0x24
 8005836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583a:	4686      	mov	lr, r0
 800583c:	4690      	mov	r8, r2
 800583e:	d801      	bhi.n	8005844 <_strtol_l.constprop.0+0x10>
 8005840:	2b01      	cmp	r3, #1
 8005842:	d106      	bne.n	8005852 <_strtol_l.constprop.0+0x1e>
 8005844:	f001 f872 	bl	800692c <__errno>
 8005848:	2316      	movs	r3, #22
 800584a:	6003      	str	r3, [r0, #0]
 800584c:	2000      	movs	r0, #0
 800584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005852:	460d      	mov	r5, r1
 8005854:	4833      	ldr	r0, [pc, #204]	@ (8005924 <_strtol_l.constprop.0+0xf0>)
 8005856:	462a      	mov	r2, r5
 8005858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800585c:	5d06      	ldrb	r6, [r0, r4]
 800585e:	f016 0608 	ands.w	r6, r6, #8
 8005862:	d1f8      	bne.n	8005856 <_strtol_l.constprop.0+0x22>
 8005864:	2c2d      	cmp	r4, #45	@ 0x2d
 8005866:	d12d      	bne.n	80058c4 <_strtol_l.constprop.0+0x90>
 8005868:	2601      	movs	r6, #1
 800586a:	782c      	ldrb	r4, [r5, #0]
 800586c:	1c95      	adds	r5, r2, #2
 800586e:	f033 0210 	bics.w	r2, r3, #16
 8005872:	d109      	bne.n	8005888 <_strtol_l.constprop.0+0x54>
 8005874:	2c30      	cmp	r4, #48	@ 0x30
 8005876:	d12a      	bne.n	80058ce <_strtol_l.constprop.0+0x9a>
 8005878:	782a      	ldrb	r2, [r5, #0]
 800587a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800587e:	2a58      	cmp	r2, #88	@ 0x58
 8005880:	d125      	bne.n	80058ce <_strtol_l.constprop.0+0x9a>
 8005882:	2310      	movs	r3, #16
 8005884:	786c      	ldrb	r4, [r5, #1]
 8005886:	3502      	adds	r5, #2
 8005888:	2200      	movs	r2, #0
 800588a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800588e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005892:	fbbc f9f3 	udiv	r9, ip, r3
 8005896:	4610      	mov	r0, r2
 8005898:	fb03 ca19 	mls	sl, r3, r9, ip
 800589c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058a0:	2f09      	cmp	r7, #9
 80058a2:	d81b      	bhi.n	80058dc <_strtol_l.constprop.0+0xa8>
 80058a4:	463c      	mov	r4, r7
 80058a6:	42a3      	cmp	r3, r4
 80058a8:	dd27      	ble.n	80058fa <_strtol_l.constprop.0+0xc6>
 80058aa:	1c57      	adds	r7, r2, #1
 80058ac:	d007      	beq.n	80058be <_strtol_l.constprop.0+0x8a>
 80058ae:	4581      	cmp	r9, r0
 80058b0:	d320      	bcc.n	80058f4 <_strtol_l.constprop.0+0xc0>
 80058b2:	d101      	bne.n	80058b8 <_strtol_l.constprop.0+0x84>
 80058b4:	45a2      	cmp	sl, r4
 80058b6:	db1d      	blt.n	80058f4 <_strtol_l.constprop.0+0xc0>
 80058b8:	2201      	movs	r2, #1
 80058ba:	fb00 4003 	mla	r0, r0, r3, r4
 80058be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058c2:	e7eb      	b.n	800589c <_strtol_l.constprop.0+0x68>
 80058c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80058c6:	bf04      	itt	eq
 80058c8:	782c      	ldrbeq	r4, [r5, #0]
 80058ca:	1c95      	addeq	r5, r2, #2
 80058cc:	e7cf      	b.n	800586e <_strtol_l.constprop.0+0x3a>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1da      	bne.n	8005888 <_strtol_l.constprop.0+0x54>
 80058d2:	2c30      	cmp	r4, #48	@ 0x30
 80058d4:	bf0c      	ite	eq
 80058d6:	2308      	moveq	r3, #8
 80058d8:	230a      	movne	r3, #10
 80058da:	e7d5      	b.n	8005888 <_strtol_l.constprop.0+0x54>
 80058dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058e0:	2f19      	cmp	r7, #25
 80058e2:	d801      	bhi.n	80058e8 <_strtol_l.constprop.0+0xb4>
 80058e4:	3c37      	subs	r4, #55	@ 0x37
 80058e6:	e7de      	b.n	80058a6 <_strtol_l.constprop.0+0x72>
 80058e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058ec:	2f19      	cmp	r7, #25
 80058ee:	d804      	bhi.n	80058fa <_strtol_l.constprop.0+0xc6>
 80058f0:	3c57      	subs	r4, #87	@ 0x57
 80058f2:	e7d8      	b.n	80058a6 <_strtol_l.constprop.0+0x72>
 80058f4:	f04f 32ff 	mov.w	r2, #4294967295
 80058f8:	e7e1      	b.n	80058be <_strtol_l.constprop.0+0x8a>
 80058fa:	1c53      	adds	r3, r2, #1
 80058fc:	d108      	bne.n	8005910 <_strtol_l.constprop.0+0xdc>
 80058fe:	2322      	movs	r3, #34	@ 0x22
 8005900:	4660      	mov	r0, ip
 8005902:	f8ce 3000 	str.w	r3, [lr]
 8005906:	f1b8 0f00 	cmp.w	r8, #0
 800590a:	d0a0      	beq.n	800584e <_strtol_l.constprop.0+0x1a>
 800590c:	1e69      	subs	r1, r5, #1
 800590e:	e006      	b.n	800591e <_strtol_l.constprop.0+0xea>
 8005910:	b106      	cbz	r6, 8005914 <_strtol_l.constprop.0+0xe0>
 8005912:	4240      	negs	r0, r0
 8005914:	f1b8 0f00 	cmp.w	r8, #0
 8005918:	d099      	beq.n	800584e <_strtol_l.constprop.0+0x1a>
 800591a:	2a00      	cmp	r2, #0
 800591c:	d1f6      	bne.n	800590c <_strtol_l.constprop.0+0xd8>
 800591e:	f8c8 1000 	str.w	r1, [r8]
 8005922:	e794      	b.n	800584e <_strtol_l.constprop.0+0x1a>
 8005924:	08009f87 	.word	0x08009f87

08005928 <_strtol_r>:
 8005928:	f7ff bf84 	b.w	8005834 <_strtol_l.constprop.0>

0800592c <strtol>:
 800592c:	4613      	mov	r3, r2
 800592e:	460a      	mov	r2, r1
 8005930:	4601      	mov	r1, r0
 8005932:	4802      	ldr	r0, [pc, #8]	@ (800593c <strtol+0x10>)
 8005934:	6800      	ldr	r0, [r0, #0]
 8005936:	f7ff bf7d 	b.w	8005834 <_strtol_l.constprop.0>
 800593a:	bf00      	nop
 800593c:	20000020 	.word	0x20000020

08005940 <__cvt>:
 8005940:	2b00      	cmp	r3, #0
 8005942:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005946:	461d      	mov	r5, r3
 8005948:	bfbb      	ittet	lt
 800594a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800594e:	461d      	movlt	r5, r3
 8005950:	2300      	movge	r3, #0
 8005952:	232d      	movlt	r3, #45	@ 0x2d
 8005954:	b088      	sub	sp, #32
 8005956:	4614      	mov	r4, r2
 8005958:	bfb8      	it	lt
 800595a:	4614      	movlt	r4, r2
 800595c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800595e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005960:	7013      	strb	r3, [r2, #0]
 8005962:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005964:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005968:	f023 0820 	bic.w	r8, r3, #32
 800596c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005970:	d005      	beq.n	800597e <__cvt+0x3e>
 8005972:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005976:	d100      	bne.n	800597a <__cvt+0x3a>
 8005978:	3601      	adds	r6, #1
 800597a:	2302      	movs	r3, #2
 800597c:	e000      	b.n	8005980 <__cvt+0x40>
 800597e:	2303      	movs	r3, #3
 8005980:	aa07      	add	r2, sp, #28
 8005982:	9204      	str	r2, [sp, #16]
 8005984:	aa06      	add	r2, sp, #24
 8005986:	e9cd a202 	strd	sl, r2, [sp, #8]
 800598a:	e9cd 3600 	strd	r3, r6, [sp]
 800598e:	4622      	mov	r2, r4
 8005990:	462b      	mov	r3, r5
 8005992:	f001 f89d 	bl	8006ad0 <_dtoa_r>
 8005996:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800599a:	4607      	mov	r7, r0
 800599c:	d119      	bne.n	80059d2 <__cvt+0x92>
 800599e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059a0:	07db      	lsls	r3, r3, #31
 80059a2:	d50e      	bpl.n	80059c2 <__cvt+0x82>
 80059a4:	eb00 0906 	add.w	r9, r0, r6
 80059a8:	2200      	movs	r2, #0
 80059aa:	2300      	movs	r3, #0
 80059ac:	4620      	mov	r0, r4
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7fa fffa 	bl	80009a8 <__aeabi_dcmpeq>
 80059b4:	b108      	cbz	r0, 80059ba <__cvt+0x7a>
 80059b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80059ba:	2230      	movs	r2, #48	@ 0x30
 80059bc:	9b07      	ldr	r3, [sp, #28]
 80059be:	454b      	cmp	r3, r9
 80059c0:	d31e      	bcc.n	8005a00 <__cvt+0xc0>
 80059c2:	4638      	mov	r0, r7
 80059c4:	9b07      	ldr	r3, [sp, #28]
 80059c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059c8:	1bdb      	subs	r3, r3, r7
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	b008      	add	sp, #32
 80059ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059d6:	eb00 0906 	add.w	r9, r0, r6
 80059da:	d1e5      	bne.n	80059a8 <__cvt+0x68>
 80059dc:	7803      	ldrb	r3, [r0, #0]
 80059de:	2b30      	cmp	r3, #48	@ 0x30
 80059e0:	d10a      	bne.n	80059f8 <__cvt+0xb8>
 80059e2:	2200      	movs	r2, #0
 80059e4:	2300      	movs	r3, #0
 80059e6:	4620      	mov	r0, r4
 80059e8:	4629      	mov	r1, r5
 80059ea:	f7fa ffdd 	bl	80009a8 <__aeabi_dcmpeq>
 80059ee:	b918      	cbnz	r0, 80059f8 <__cvt+0xb8>
 80059f0:	f1c6 0601 	rsb	r6, r6, #1
 80059f4:	f8ca 6000 	str.w	r6, [sl]
 80059f8:	f8da 3000 	ldr.w	r3, [sl]
 80059fc:	4499      	add	r9, r3
 80059fe:	e7d3      	b.n	80059a8 <__cvt+0x68>
 8005a00:	1c59      	adds	r1, r3, #1
 8005a02:	9107      	str	r1, [sp, #28]
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	e7d9      	b.n	80059bc <__cvt+0x7c>

08005a08 <__exponent>:
 8005a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	bfb6      	itet	lt
 8005a0e:	232d      	movlt	r3, #45	@ 0x2d
 8005a10:	232b      	movge	r3, #43	@ 0x2b
 8005a12:	4249      	neglt	r1, r1
 8005a14:	2909      	cmp	r1, #9
 8005a16:	7002      	strb	r2, [r0, #0]
 8005a18:	7043      	strb	r3, [r0, #1]
 8005a1a:	dd29      	ble.n	8005a70 <__exponent+0x68>
 8005a1c:	f10d 0307 	add.w	r3, sp, #7
 8005a20:	461d      	mov	r5, r3
 8005a22:	270a      	movs	r7, #10
 8005a24:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a28:	461a      	mov	r2, r3
 8005a2a:	fb07 1416 	mls	r4, r7, r6, r1
 8005a2e:	3430      	adds	r4, #48	@ 0x30
 8005a30:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a34:	460c      	mov	r4, r1
 8005a36:	2c63      	cmp	r4, #99	@ 0x63
 8005a38:	4631      	mov	r1, r6
 8005a3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a3e:	dcf1      	bgt.n	8005a24 <__exponent+0x1c>
 8005a40:	3130      	adds	r1, #48	@ 0x30
 8005a42:	1e94      	subs	r4, r2, #2
 8005a44:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a48:	4623      	mov	r3, r4
 8005a4a:	1c41      	adds	r1, r0, #1
 8005a4c:	42ab      	cmp	r3, r5
 8005a4e:	d30a      	bcc.n	8005a66 <__exponent+0x5e>
 8005a50:	f10d 0309 	add.w	r3, sp, #9
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	42ac      	cmp	r4, r5
 8005a58:	bf88      	it	hi
 8005a5a:	2300      	movhi	r3, #0
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	4403      	add	r3, r0
 8005a60:	1a18      	subs	r0, r3, r0
 8005a62:	b003      	add	sp, #12
 8005a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a66:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a6a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a6e:	e7ed      	b.n	8005a4c <__exponent+0x44>
 8005a70:	2330      	movs	r3, #48	@ 0x30
 8005a72:	3130      	adds	r1, #48	@ 0x30
 8005a74:	7083      	strb	r3, [r0, #2]
 8005a76:	70c1      	strb	r1, [r0, #3]
 8005a78:	1d03      	adds	r3, r0, #4
 8005a7a:	e7f1      	b.n	8005a60 <__exponent+0x58>

08005a7c <_printf_float>:
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	b091      	sub	sp, #68	@ 0x44
 8005a82:	460c      	mov	r4, r1
 8005a84:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005a88:	4616      	mov	r6, r2
 8005a8a:	461f      	mov	r7, r3
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	f000 ff03 	bl	8006898 <_localeconv_r>
 8005a92:	6803      	ldr	r3, [r0, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	9308      	str	r3, [sp, #32]
 8005a98:	f7fa fb5a 	bl	8000150 <strlen>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa4:	9009      	str	r0, [sp, #36]	@ 0x24
 8005aa6:	3307      	adds	r3, #7
 8005aa8:	f023 0307 	bic.w	r3, r3, #7
 8005aac:	f103 0208 	add.w	r2, r3, #8
 8005ab0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ab4:	f8d4 b000 	ldr.w	fp, [r4]
 8005ab8:	f8c8 2000 	str.w	r2, [r8]
 8005abc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ac0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ac6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ad2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ad6:	4b9c      	ldr	r3, [pc, #624]	@ (8005d48 <_printf_float+0x2cc>)
 8005ad8:	f7fa ff98 	bl	8000a0c <__aeabi_dcmpun>
 8005adc:	bb70      	cbnz	r0, 8005b3c <_printf_float+0xc0>
 8005ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae6:	4b98      	ldr	r3, [pc, #608]	@ (8005d48 <_printf_float+0x2cc>)
 8005ae8:	f7fa ff72 	bl	80009d0 <__aeabi_dcmple>
 8005aec:	bb30      	cbnz	r0, 8005b3c <_printf_float+0xc0>
 8005aee:	2200      	movs	r2, #0
 8005af0:	2300      	movs	r3, #0
 8005af2:	4640      	mov	r0, r8
 8005af4:	4649      	mov	r1, r9
 8005af6:	f7fa ff61 	bl	80009bc <__aeabi_dcmplt>
 8005afa:	b110      	cbz	r0, 8005b02 <_printf_float+0x86>
 8005afc:	232d      	movs	r3, #45	@ 0x2d
 8005afe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b02:	4a92      	ldr	r2, [pc, #584]	@ (8005d4c <_printf_float+0x2d0>)
 8005b04:	4b92      	ldr	r3, [pc, #584]	@ (8005d50 <_printf_float+0x2d4>)
 8005b06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b0a:	bf94      	ite	ls
 8005b0c:	4690      	movls	r8, r2
 8005b0e:	4698      	movhi	r8, r3
 8005b10:	2303      	movs	r3, #3
 8005b12:	f04f 0900 	mov.w	r9, #0
 8005b16:	6123      	str	r3, [r4, #16]
 8005b18:	f02b 0304 	bic.w	r3, fp, #4
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	4633      	mov	r3, r6
 8005b20:	4621      	mov	r1, r4
 8005b22:	4628      	mov	r0, r5
 8005b24:	9700      	str	r7, [sp, #0]
 8005b26:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005b28:	f000 f9d4 	bl	8005ed4 <_printf_common>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	f040 8090 	bne.w	8005c52 <_printf_float+0x1d6>
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	b011      	add	sp, #68	@ 0x44
 8005b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	464b      	mov	r3, r9
 8005b40:	4640      	mov	r0, r8
 8005b42:	4649      	mov	r1, r9
 8005b44:	f7fa ff62 	bl	8000a0c <__aeabi_dcmpun>
 8005b48:	b148      	cbz	r0, 8005b5e <_printf_float+0xe2>
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bfb8      	it	lt
 8005b50:	232d      	movlt	r3, #45	@ 0x2d
 8005b52:	4a80      	ldr	r2, [pc, #512]	@ (8005d54 <_printf_float+0x2d8>)
 8005b54:	bfb8      	it	lt
 8005b56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d58 <_printf_float+0x2dc>)
 8005b5c:	e7d3      	b.n	8005b06 <_printf_float+0x8a>
 8005b5e:	6863      	ldr	r3, [r4, #4]
 8005b60:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	d13f      	bne.n	8005be8 <_printf_float+0x16c>
 8005b68:	2306      	movs	r3, #6
 8005b6a:	6063      	str	r3, [r4, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	9206      	str	r2, [sp, #24]
 8005b76:	aa0e      	add	r2, sp, #56	@ 0x38
 8005b78:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005b7c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005b7e:	9203      	str	r2, [sp, #12]
 8005b80:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005b84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	4628      	mov	r0, r5
 8005b90:	464b      	mov	r3, r9
 8005b92:	910a      	str	r1, [sp, #40]	@ 0x28
 8005b94:	f7ff fed4 	bl	8005940 <__cvt>
 8005b98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b9a:	4680      	mov	r8, r0
 8005b9c:	2947      	cmp	r1, #71	@ 0x47
 8005b9e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005ba0:	d128      	bne.n	8005bf4 <_printf_float+0x178>
 8005ba2:	1cc8      	adds	r0, r1, #3
 8005ba4:	db02      	blt.n	8005bac <_printf_float+0x130>
 8005ba6:	6863      	ldr	r3, [r4, #4]
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	dd40      	ble.n	8005c2e <_printf_float+0x1b2>
 8005bac:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bb0:	fa5f fa8a 	uxtb.w	sl, sl
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	3901      	subs	r1, #1
 8005bb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bbc:	910d      	str	r1, [sp, #52]	@ 0x34
 8005bbe:	f7ff ff23 	bl	8005a08 <__exponent>
 8005bc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bc4:	4681      	mov	r9, r0
 8005bc6:	1813      	adds	r3, r2, r0
 8005bc8:	2a01      	cmp	r2, #1
 8005bca:	6123      	str	r3, [r4, #16]
 8005bcc:	dc02      	bgt.n	8005bd4 <_printf_float+0x158>
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	07d2      	lsls	r2, r2, #31
 8005bd2:	d501      	bpl.n	8005bd8 <_printf_float+0x15c>
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	6123      	str	r3, [r4, #16]
 8005bd8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d09e      	beq.n	8005b1e <_printf_float+0xa2>
 8005be0:	232d      	movs	r3, #45	@ 0x2d
 8005be2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be6:	e79a      	b.n	8005b1e <_printf_float+0xa2>
 8005be8:	2947      	cmp	r1, #71	@ 0x47
 8005bea:	d1bf      	bne.n	8005b6c <_printf_float+0xf0>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1bd      	bne.n	8005b6c <_printf_float+0xf0>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e7ba      	b.n	8005b6a <_printf_float+0xee>
 8005bf4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bf8:	d9dc      	bls.n	8005bb4 <_printf_float+0x138>
 8005bfa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005bfe:	d118      	bne.n	8005c32 <_printf_float+0x1b6>
 8005c00:	2900      	cmp	r1, #0
 8005c02:	6863      	ldr	r3, [r4, #4]
 8005c04:	dd0b      	ble.n	8005c1e <_printf_float+0x1a2>
 8005c06:	6121      	str	r1, [r4, #16]
 8005c08:	b913      	cbnz	r3, 8005c10 <_printf_float+0x194>
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	07d0      	lsls	r0, r2, #31
 8005c0e:	d502      	bpl.n	8005c16 <_printf_float+0x19a>
 8005c10:	3301      	adds	r3, #1
 8005c12:	440b      	add	r3, r1
 8005c14:	6123      	str	r3, [r4, #16]
 8005c16:	f04f 0900 	mov.w	r9, #0
 8005c1a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c1c:	e7dc      	b.n	8005bd8 <_printf_float+0x15c>
 8005c1e:	b913      	cbnz	r3, 8005c26 <_printf_float+0x1aa>
 8005c20:	6822      	ldr	r2, [r4, #0]
 8005c22:	07d2      	lsls	r2, r2, #31
 8005c24:	d501      	bpl.n	8005c2a <_printf_float+0x1ae>
 8005c26:	3302      	adds	r3, #2
 8005c28:	e7f4      	b.n	8005c14 <_printf_float+0x198>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e7f2      	b.n	8005c14 <_printf_float+0x198>
 8005c2e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c34:	4299      	cmp	r1, r3
 8005c36:	db05      	blt.n	8005c44 <_printf_float+0x1c8>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	6121      	str	r1, [r4, #16]
 8005c3c:	07d8      	lsls	r0, r3, #31
 8005c3e:	d5ea      	bpl.n	8005c16 <_printf_float+0x19a>
 8005c40:	1c4b      	adds	r3, r1, #1
 8005c42:	e7e7      	b.n	8005c14 <_printf_float+0x198>
 8005c44:	2900      	cmp	r1, #0
 8005c46:	bfcc      	ite	gt
 8005c48:	2201      	movgt	r2, #1
 8005c4a:	f1c1 0202 	rsble	r2, r1, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	e7e0      	b.n	8005c14 <_printf_float+0x198>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	055a      	lsls	r2, r3, #21
 8005c56:	d407      	bmi.n	8005c68 <_printf_float+0x1ec>
 8005c58:	6923      	ldr	r3, [r4, #16]
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	d12b      	bne.n	8005cbe <_printf_float+0x242>
 8005c66:	e764      	b.n	8005b32 <_printf_float+0xb6>
 8005c68:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c6c:	f240 80dc 	bls.w	8005e28 <_printf_float+0x3ac>
 8005c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c74:	2200      	movs	r2, #0
 8005c76:	2300      	movs	r3, #0
 8005c78:	f7fa fe96 	bl	80009a8 <__aeabi_dcmpeq>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d033      	beq.n	8005ce8 <_printf_float+0x26c>
 8005c80:	2301      	movs	r3, #1
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	4a35      	ldr	r2, [pc, #212]	@ (8005d5c <_printf_float+0x2e0>)
 8005c88:	47b8      	blx	r7
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	f43f af51 	beq.w	8005b32 <_printf_float+0xb6>
 8005c90:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005c94:	4543      	cmp	r3, r8
 8005c96:	db02      	blt.n	8005c9e <_printf_float+0x222>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	07d8      	lsls	r0, r3, #31
 8005c9c:	d50f      	bpl.n	8005cbe <_printf_float+0x242>
 8005c9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f43f af42 	beq.w	8005b32 <_printf_float+0xb6>
 8005cae:	f04f 0900 	mov.w	r9, #0
 8005cb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cb6:	f104 0a1a 	add.w	sl, r4, #26
 8005cba:	45c8      	cmp	r8, r9
 8005cbc:	dc09      	bgt.n	8005cd2 <_printf_float+0x256>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	079b      	lsls	r3, r3, #30
 8005cc2:	f100 8102 	bmi.w	8005eca <_printf_float+0x44e>
 8005cc6:	68e0      	ldr	r0, [r4, #12]
 8005cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	bfb8      	it	lt
 8005cce:	4618      	movlt	r0, r3
 8005cd0:	e731      	b.n	8005b36 <_printf_float+0xba>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f af28 	beq.w	8005b32 <_printf_float+0xb6>
 8005ce2:	f109 0901 	add.w	r9, r9, #1
 8005ce6:	e7e8      	b.n	8005cba <_printf_float+0x23e>
 8005ce8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	dc38      	bgt.n	8005d60 <_printf_float+0x2e4>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	4a19      	ldr	r2, [pc, #100]	@ (8005d5c <_printf_float+0x2e0>)
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f43f af1a 	beq.w	8005b32 <_printf_float+0xb6>
 8005cfe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005d02:	ea59 0303 	orrs.w	r3, r9, r3
 8005d06:	d102      	bne.n	8005d0e <_printf_float+0x292>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	07d9      	lsls	r1, r3, #31
 8005d0c:	d5d7      	bpl.n	8005cbe <_printf_float+0x242>
 8005d0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f af0a 	beq.w	8005b32 <_printf_float+0xb6>
 8005d1e:	f04f 0a00 	mov.w	sl, #0
 8005d22:	f104 0b1a 	add.w	fp, r4, #26
 8005d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d28:	425b      	negs	r3, r3
 8005d2a:	4553      	cmp	r3, sl
 8005d2c:	dc01      	bgt.n	8005d32 <_printf_float+0x2b6>
 8005d2e:	464b      	mov	r3, r9
 8005d30:	e793      	b.n	8005c5a <_printf_float+0x1de>
 8005d32:	2301      	movs	r3, #1
 8005d34:	465a      	mov	r2, fp
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b8      	blx	r7
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	f43f aef8 	beq.w	8005b32 <_printf_float+0xb6>
 8005d42:	f10a 0a01 	add.w	sl, sl, #1
 8005d46:	e7ee      	b.n	8005d26 <_printf_float+0x2aa>
 8005d48:	7fefffff 	.word	0x7fefffff
 8005d4c:	0800a087 	.word	0x0800a087
 8005d50:	0800a08b 	.word	0x0800a08b
 8005d54:	0800a08f 	.word	0x0800a08f
 8005d58:	0800a093 	.word	0x0800a093
 8005d5c:	0800a097 	.word	0x0800a097
 8005d60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d62:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d66:	4553      	cmp	r3, sl
 8005d68:	bfa8      	it	ge
 8005d6a:	4653      	movge	r3, sl
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	4699      	mov	r9, r3
 8005d70:	dc36      	bgt.n	8005de0 <_printf_float+0x364>
 8005d72:	f04f 0b00 	mov.w	fp, #0
 8005d76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d7a:	f104 021a 	add.w	r2, r4, #26
 8005d7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d82:	eba3 0309 	sub.w	r3, r3, r9
 8005d86:	455b      	cmp	r3, fp
 8005d88:	dc31      	bgt.n	8005dee <_printf_float+0x372>
 8005d8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d8c:	459a      	cmp	sl, r3
 8005d8e:	dc3a      	bgt.n	8005e06 <_printf_float+0x38a>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	07da      	lsls	r2, r3, #31
 8005d94:	d437      	bmi.n	8005e06 <_printf_float+0x38a>
 8005d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d98:	ebaa 0903 	sub.w	r9, sl, r3
 8005d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d9e:	ebaa 0303 	sub.w	r3, sl, r3
 8005da2:	4599      	cmp	r9, r3
 8005da4:	bfa8      	it	ge
 8005da6:	4699      	movge	r9, r3
 8005da8:	f1b9 0f00 	cmp.w	r9, #0
 8005dac:	dc33      	bgt.n	8005e16 <_printf_float+0x39a>
 8005dae:	f04f 0800 	mov.w	r8, #0
 8005db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005db6:	f104 0b1a 	add.w	fp, r4, #26
 8005dba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dbc:	ebaa 0303 	sub.w	r3, sl, r3
 8005dc0:	eba3 0309 	sub.w	r3, r3, r9
 8005dc4:	4543      	cmp	r3, r8
 8005dc6:	f77f af7a 	ble.w	8005cbe <_printf_float+0x242>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	465a      	mov	r2, fp
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	f43f aeac 	beq.w	8005b32 <_printf_float+0xb6>
 8005dda:	f108 0801 	add.w	r8, r8, #1
 8005dde:	e7ec      	b.n	8005dba <_printf_float+0x33e>
 8005de0:	4642      	mov	r2, r8
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	d1c2      	bne.n	8005d72 <_printf_float+0x2f6>
 8005dec:	e6a1      	b.n	8005b32 <_printf_float+0xb6>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4631      	mov	r1, r6
 8005df2:	4628      	mov	r0, r5
 8005df4:	920a      	str	r2, [sp, #40]	@ 0x28
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f43f ae9a 	beq.w	8005b32 <_printf_float+0xb6>
 8005dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e00:	f10b 0b01 	add.w	fp, fp, #1
 8005e04:	e7bb      	b.n	8005d7e <_printf_float+0x302>
 8005e06:	4631      	mov	r1, r6
 8005e08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	47b8      	blx	r7
 8005e10:	3001      	adds	r0, #1
 8005e12:	d1c0      	bne.n	8005d96 <_printf_float+0x31a>
 8005e14:	e68d      	b.n	8005b32 <_printf_float+0xb6>
 8005e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e18:	464b      	mov	r3, r9
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	4442      	add	r2, r8
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	d1c3      	bne.n	8005dae <_printf_float+0x332>
 8005e26:	e684      	b.n	8005b32 <_printf_float+0xb6>
 8005e28:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e2c:	f1ba 0f01 	cmp.w	sl, #1
 8005e30:	dc01      	bgt.n	8005e36 <_printf_float+0x3ba>
 8005e32:	07db      	lsls	r3, r3, #31
 8005e34:	d536      	bpl.n	8005ea4 <_printf_float+0x428>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4642      	mov	r2, r8
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	f43f ae76 	beq.w	8005b32 <_printf_float+0xb6>
 8005e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	f43f ae6e 	beq.w	8005b32 <_printf_float+0xb6>
 8005e56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e62:	f7fa fda1 	bl	80009a8 <__aeabi_dcmpeq>
 8005e66:	b9c0      	cbnz	r0, 8005e9a <_printf_float+0x41e>
 8005e68:	4653      	mov	r3, sl
 8005e6a:	f108 0201 	add.w	r2, r8, #1
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	d10c      	bne.n	8005e92 <_printf_float+0x416>
 8005e78:	e65b      	b.n	8005b32 <_printf_float+0xb6>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	465a      	mov	r2, fp
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f ae54 	beq.w	8005b32 <_printf_float+0xb6>
 8005e8a:	f108 0801 	add.w	r8, r8, #1
 8005e8e:	45d0      	cmp	r8, sl
 8005e90:	dbf3      	blt.n	8005e7a <_printf_float+0x3fe>
 8005e92:	464b      	mov	r3, r9
 8005e94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e98:	e6e0      	b.n	8005c5c <_printf_float+0x1e0>
 8005e9a:	f04f 0800 	mov.w	r8, #0
 8005e9e:	f104 0b1a 	add.w	fp, r4, #26
 8005ea2:	e7f4      	b.n	8005e8e <_printf_float+0x412>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4642      	mov	r2, r8
 8005ea8:	e7e1      	b.n	8005e6e <_printf_float+0x3f2>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	464a      	mov	r2, r9
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	47b8      	blx	r7
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	f43f ae3c 	beq.w	8005b32 <_printf_float+0xb6>
 8005eba:	f108 0801 	add.w	r8, r8, #1
 8005ebe:	68e3      	ldr	r3, [r4, #12]
 8005ec0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ec2:	1a5b      	subs	r3, r3, r1
 8005ec4:	4543      	cmp	r3, r8
 8005ec6:	dcf0      	bgt.n	8005eaa <_printf_float+0x42e>
 8005ec8:	e6fd      	b.n	8005cc6 <_printf_float+0x24a>
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	f104 0919 	add.w	r9, r4, #25
 8005ed2:	e7f4      	b.n	8005ebe <_printf_float+0x442>

08005ed4 <_printf_common>:
 8005ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	4616      	mov	r6, r2
 8005eda:	4698      	mov	r8, r3
 8005edc:	688a      	ldr	r2, [r1, #8]
 8005ede:	690b      	ldr	r3, [r1, #16]
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	bfb8      	it	lt
 8005ee6:	4613      	movlt	r3, r2
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005eee:	460c      	mov	r4, r1
 8005ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ef4:	b10a      	cbz	r2, 8005efa <_printf_common+0x26>
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	6033      	str	r3, [r6, #0]
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	0699      	lsls	r1, r3, #26
 8005efe:	bf42      	ittt	mi
 8005f00:	6833      	ldrmi	r3, [r6, #0]
 8005f02:	3302      	addmi	r3, #2
 8005f04:	6033      	strmi	r3, [r6, #0]
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	f015 0506 	ands.w	r5, r5, #6
 8005f0c:	d106      	bne.n	8005f1c <_printf_common+0x48>
 8005f0e:	f104 0a19 	add.w	sl, r4, #25
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	6832      	ldr	r2, [r6, #0]
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	dc2b      	bgt.n	8005f74 <_printf_common+0xa0>
 8005f1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	3b00      	subs	r3, #0
 8005f24:	bf18      	it	ne
 8005f26:	2301      	movne	r3, #1
 8005f28:	0692      	lsls	r2, r2, #26
 8005f2a:	d430      	bmi.n	8005f8e <_printf_common+0xba>
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	4638      	mov	r0, r7
 8005f30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f34:	47c8      	blx	r9
 8005f36:	3001      	adds	r0, #1
 8005f38:	d023      	beq.n	8005f82 <_printf_common+0xae>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	6922      	ldr	r2, [r4, #16]
 8005f3e:	f003 0306 	and.w	r3, r3, #6
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	bf14      	ite	ne
 8005f46:	2500      	movne	r5, #0
 8005f48:	6833      	ldreq	r3, [r6, #0]
 8005f4a:	f04f 0600 	mov.w	r6, #0
 8005f4e:	bf08      	it	eq
 8005f50:	68e5      	ldreq	r5, [r4, #12]
 8005f52:	f104 041a 	add.w	r4, r4, #26
 8005f56:	bf08      	it	eq
 8005f58:	1aed      	subeq	r5, r5, r3
 8005f5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f5e:	bf08      	it	eq
 8005f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f64:	4293      	cmp	r3, r2
 8005f66:	bfc4      	itt	gt
 8005f68:	1a9b      	subgt	r3, r3, r2
 8005f6a:	18ed      	addgt	r5, r5, r3
 8005f6c:	42b5      	cmp	r5, r6
 8005f6e:	d11a      	bne.n	8005fa6 <_printf_common+0xd2>
 8005f70:	2000      	movs	r0, #0
 8005f72:	e008      	b.n	8005f86 <_printf_common+0xb2>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4652      	mov	r2, sl
 8005f78:	4641      	mov	r1, r8
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c8      	blx	r9
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d103      	bne.n	8005f8a <_printf_common+0xb6>
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	e7c1      	b.n	8005f12 <_printf_common+0x3e>
 8005f8e:	2030      	movs	r0, #48	@ 0x30
 8005f90:	18e1      	adds	r1, r4, r3
 8005f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f9c:	4422      	add	r2, r4
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fa4:	e7c2      	b.n	8005f2c <_printf_common+0x58>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4641      	mov	r1, r8
 8005fac:	4638      	mov	r0, r7
 8005fae:	47c8      	blx	r9
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d0e6      	beq.n	8005f82 <_printf_common+0xae>
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	e7d9      	b.n	8005f6c <_printf_common+0x98>

08005fb8 <_printf_i>:
 8005fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	7e0f      	ldrb	r7, [r1, #24]
 8005fbe:	4691      	mov	r9, r2
 8005fc0:	2f78      	cmp	r7, #120	@ 0x78
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	469a      	mov	sl, r3
 8005fc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fce:	d807      	bhi.n	8005fe0 <_printf_i+0x28>
 8005fd0:	2f62      	cmp	r7, #98	@ 0x62
 8005fd2:	d80a      	bhi.n	8005fea <_printf_i+0x32>
 8005fd4:	2f00      	cmp	r7, #0
 8005fd6:	f000 80d3 	beq.w	8006180 <_printf_i+0x1c8>
 8005fda:	2f58      	cmp	r7, #88	@ 0x58
 8005fdc:	f000 80ba 	beq.w	8006154 <_printf_i+0x19c>
 8005fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fe8:	e03a      	b.n	8006060 <_printf_i+0xa8>
 8005fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fee:	2b15      	cmp	r3, #21
 8005ff0:	d8f6      	bhi.n	8005fe0 <_printf_i+0x28>
 8005ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ff8 <_printf_i+0x40>)
 8005ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ff8:	08006051 	.word	0x08006051
 8005ffc:	08006065 	.word	0x08006065
 8006000:	08005fe1 	.word	0x08005fe1
 8006004:	08005fe1 	.word	0x08005fe1
 8006008:	08005fe1 	.word	0x08005fe1
 800600c:	08005fe1 	.word	0x08005fe1
 8006010:	08006065 	.word	0x08006065
 8006014:	08005fe1 	.word	0x08005fe1
 8006018:	08005fe1 	.word	0x08005fe1
 800601c:	08005fe1 	.word	0x08005fe1
 8006020:	08005fe1 	.word	0x08005fe1
 8006024:	08006167 	.word	0x08006167
 8006028:	0800608f 	.word	0x0800608f
 800602c:	08006121 	.word	0x08006121
 8006030:	08005fe1 	.word	0x08005fe1
 8006034:	08005fe1 	.word	0x08005fe1
 8006038:	08006189 	.word	0x08006189
 800603c:	08005fe1 	.word	0x08005fe1
 8006040:	0800608f 	.word	0x0800608f
 8006044:	08005fe1 	.word	0x08005fe1
 8006048:	08005fe1 	.word	0x08005fe1
 800604c:	08006129 	.word	0x08006129
 8006050:	6833      	ldr	r3, [r6, #0]
 8006052:	1d1a      	adds	r2, r3, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6032      	str	r2, [r6, #0]
 8006058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800605c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006060:	2301      	movs	r3, #1
 8006062:	e09e      	b.n	80061a2 <_printf_i+0x1ea>
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	6820      	ldr	r0, [r4, #0]
 8006068:	1d19      	adds	r1, r3, #4
 800606a:	6031      	str	r1, [r6, #0]
 800606c:	0606      	lsls	r6, r0, #24
 800606e:	d501      	bpl.n	8006074 <_printf_i+0xbc>
 8006070:	681d      	ldr	r5, [r3, #0]
 8006072:	e003      	b.n	800607c <_printf_i+0xc4>
 8006074:	0645      	lsls	r5, r0, #25
 8006076:	d5fb      	bpl.n	8006070 <_printf_i+0xb8>
 8006078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800607c:	2d00      	cmp	r5, #0
 800607e:	da03      	bge.n	8006088 <_printf_i+0xd0>
 8006080:	232d      	movs	r3, #45	@ 0x2d
 8006082:	426d      	negs	r5, r5
 8006084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006088:	230a      	movs	r3, #10
 800608a:	4859      	ldr	r0, [pc, #356]	@ (80061f0 <_printf_i+0x238>)
 800608c:	e011      	b.n	80060b2 <_printf_i+0xfa>
 800608e:	6821      	ldr	r1, [r4, #0]
 8006090:	6833      	ldr	r3, [r6, #0]
 8006092:	0608      	lsls	r0, r1, #24
 8006094:	f853 5b04 	ldr.w	r5, [r3], #4
 8006098:	d402      	bmi.n	80060a0 <_printf_i+0xe8>
 800609a:	0649      	lsls	r1, r1, #25
 800609c:	bf48      	it	mi
 800609e:	b2ad      	uxthmi	r5, r5
 80060a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80060a2:	6033      	str	r3, [r6, #0]
 80060a4:	bf14      	ite	ne
 80060a6:	230a      	movne	r3, #10
 80060a8:	2308      	moveq	r3, #8
 80060aa:	4851      	ldr	r0, [pc, #324]	@ (80061f0 <_printf_i+0x238>)
 80060ac:	2100      	movs	r1, #0
 80060ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060b2:	6866      	ldr	r6, [r4, #4]
 80060b4:	2e00      	cmp	r6, #0
 80060b6:	bfa8      	it	ge
 80060b8:	6821      	ldrge	r1, [r4, #0]
 80060ba:	60a6      	str	r6, [r4, #8]
 80060bc:	bfa4      	itt	ge
 80060be:	f021 0104 	bicge.w	r1, r1, #4
 80060c2:	6021      	strge	r1, [r4, #0]
 80060c4:	b90d      	cbnz	r5, 80060ca <_printf_i+0x112>
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	d04b      	beq.n	8006162 <_printf_i+0x1aa>
 80060ca:	4616      	mov	r6, r2
 80060cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80060d0:	fb03 5711 	mls	r7, r3, r1, r5
 80060d4:	5dc7      	ldrb	r7, [r0, r7]
 80060d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060da:	462f      	mov	r7, r5
 80060dc:	42bb      	cmp	r3, r7
 80060de:	460d      	mov	r5, r1
 80060e0:	d9f4      	bls.n	80060cc <_printf_i+0x114>
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d10b      	bne.n	80060fe <_printf_i+0x146>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	07df      	lsls	r7, r3, #31
 80060ea:	d508      	bpl.n	80060fe <_printf_i+0x146>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	6861      	ldr	r1, [r4, #4]
 80060f0:	4299      	cmp	r1, r3
 80060f2:	bfde      	ittt	le
 80060f4:	2330      	movle	r3, #48	@ 0x30
 80060f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060fe:	1b92      	subs	r2, r2, r6
 8006100:	6122      	str	r2, [r4, #16]
 8006102:	464b      	mov	r3, r9
 8006104:	4621      	mov	r1, r4
 8006106:	4640      	mov	r0, r8
 8006108:	f8cd a000 	str.w	sl, [sp]
 800610c:	aa03      	add	r2, sp, #12
 800610e:	f7ff fee1 	bl	8005ed4 <_printf_common>
 8006112:	3001      	adds	r0, #1
 8006114:	d14a      	bne.n	80061ac <_printf_i+0x1f4>
 8006116:	f04f 30ff 	mov.w	r0, #4294967295
 800611a:	b004      	add	sp, #16
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	f043 0320 	orr.w	r3, r3, #32
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	2778      	movs	r7, #120	@ 0x78
 800612a:	4832      	ldr	r0, [pc, #200]	@ (80061f4 <_printf_i+0x23c>)
 800612c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	6831      	ldr	r1, [r6, #0]
 8006134:	061f      	lsls	r7, r3, #24
 8006136:	f851 5b04 	ldr.w	r5, [r1], #4
 800613a:	d402      	bmi.n	8006142 <_printf_i+0x18a>
 800613c:	065f      	lsls	r7, r3, #25
 800613e:	bf48      	it	mi
 8006140:	b2ad      	uxthmi	r5, r5
 8006142:	6031      	str	r1, [r6, #0]
 8006144:	07d9      	lsls	r1, r3, #31
 8006146:	bf44      	itt	mi
 8006148:	f043 0320 	orrmi.w	r3, r3, #32
 800614c:	6023      	strmi	r3, [r4, #0]
 800614e:	b11d      	cbz	r5, 8006158 <_printf_i+0x1a0>
 8006150:	2310      	movs	r3, #16
 8006152:	e7ab      	b.n	80060ac <_printf_i+0xf4>
 8006154:	4826      	ldr	r0, [pc, #152]	@ (80061f0 <_printf_i+0x238>)
 8006156:	e7e9      	b.n	800612c <_printf_i+0x174>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	f023 0320 	bic.w	r3, r3, #32
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	e7f6      	b.n	8006150 <_printf_i+0x198>
 8006162:	4616      	mov	r6, r2
 8006164:	e7bd      	b.n	80060e2 <_printf_i+0x12a>
 8006166:	6833      	ldr	r3, [r6, #0]
 8006168:	6825      	ldr	r5, [r4, #0]
 800616a:	1d18      	adds	r0, r3, #4
 800616c:	6961      	ldr	r1, [r4, #20]
 800616e:	6030      	str	r0, [r6, #0]
 8006170:	062e      	lsls	r6, r5, #24
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	d501      	bpl.n	800617a <_printf_i+0x1c2>
 8006176:	6019      	str	r1, [r3, #0]
 8006178:	e002      	b.n	8006180 <_printf_i+0x1c8>
 800617a:	0668      	lsls	r0, r5, #25
 800617c:	d5fb      	bpl.n	8006176 <_printf_i+0x1be>
 800617e:	8019      	strh	r1, [r3, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	4616      	mov	r6, r2
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	e7bc      	b.n	8006102 <_printf_i+0x14a>
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	2100      	movs	r1, #0
 800618c:	1d1a      	adds	r2, r3, #4
 800618e:	6032      	str	r2, [r6, #0]
 8006190:	681e      	ldr	r6, [r3, #0]
 8006192:	6862      	ldr	r2, [r4, #4]
 8006194:	4630      	mov	r0, r6
 8006196:	f000 fbfe 	bl	8006996 <memchr>
 800619a:	b108      	cbz	r0, 80061a0 <_printf_i+0x1e8>
 800619c:	1b80      	subs	r0, r0, r6
 800619e:	6060      	str	r0, [r4, #4]
 80061a0:	6863      	ldr	r3, [r4, #4]
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	2300      	movs	r3, #0
 80061a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061aa:	e7aa      	b.n	8006102 <_printf_i+0x14a>
 80061ac:	4632      	mov	r2, r6
 80061ae:	4649      	mov	r1, r9
 80061b0:	4640      	mov	r0, r8
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	47d0      	blx	sl
 80061b6:	3001      	adds	r0, #1
 80061b8:	d0ad      	beq.n	8006116 <_printf_i+0x15e>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	079b      	lsls	r3, r3, #30
 80061be:	d413      	bmi.n	80061e8 <_printf_i+0x230>
 80061c0:	68e0      	ldr	r0, [r4, #12]
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	4298      	cmp	r0, r3
 80061c6:	bfb8      	it	lt
 80061c8:	4618      	movlt	r0, r3
 80061ca:	e7a6      	b.n	800611a <_printf_i+0x162>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4632      	mov	r2, r6
 80061d0:	4649      	mov	r1, r9
 80061d2:	4640      	mov	r0, r8
 80061d4:	47d0      	blx	sl
 80061d6:	3001      	adds	r0, #1
 80061d8:	d09d      	beq.n	8006116 <_printf_i+0x15e>
 80061da:	3501      	adds	r5, #1
 80061dc:	68e3      	ldr	r3, [r4, #12]
 80061de:	9903      	ldr	r1, [sp, #12]
 80061e0:	1a5b      	subs	r3, r3, r1
 80061e2:	42ab      	cmp	r3, r5
 80061e4:	dcf2      	bgt.n	80061cc <_printf_i+0x214>
 80061e6:	e7eb      	b.n	80061c0 <_printf_i+0x208>
 80061e8:	2500      	movs	r5, #0
 80061ea:	f104 0619 	add.w	r6, r4, #25
 80061ee:	e7f5      	b.n	80061dc <_printf_i+0x224>
 80061f0:	0800a099 	.word	0x0800a099
 80061f4:	0800a0aa 	.word	0x0800a0aa

080061f8 <_scanf_float>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	b087      	sub	sp, #28
 80061fe:	9303      	str	r3, [sp, #12]
 8006200:	688b      	ldr	r3, [r1, #8]
 8006202:	4617      	mov	r7, r2
 8006204:	1e5a      	subs	r2, r3, #1
 8006206:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800620a:	bf82      	ittt	hi
 800620c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006210:	eb03 0b05 	addhi.w	fp, r3, r5
 8006214:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006218:	460a      	mov	r2, r1
 800621a:	f04f 0500 	mov.w	r5, #0
 800621e:	bf88      	it	hi
 8006220:	608b      	strhi	r3, [r1, #8]
 8006222:	680b      	ldr	r3, [r1, #0]
 8006224:	4680      	mov	r8, r0
 8006226:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800622a:	f842 3b1c 	str.w	r3, [r2], #28
 800622e:	460c      	mov	r4, r1
 8006230:	bf98      	it	ls
 8006232:	f04f 0b00 	movls.w	fp, #0
 8006236:	4616      	mov	r6, r2
 8006238:	46aa      	mov	sl, r5
 800623a:	46a9      	mov	r9, r5
 800623c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006240:	9201      	str	r2, [sp, #4]
 8006242:	9502      	str	r5, [sp, #8]
 8006244:	68a2      	ldr	r2, [r4, #8]
 8006246:	b152      	cbz	r2, 800625e <_scanf_float+0x66>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b4e      	cmp	r3, #78	@ 0x4e
 800624e:	d865      	bhi.n	800631c <_scanf_float+0x124>
 8006250:	2b40      	cmp	r3, #64	@ 0x40
 8006252:	d83d      	bhi.n	80062d0 <_scanf_float+0xd8>
 8006254:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006258:	b2c8      	uxtb	r0, r1
 800625a:	280e      	cmp	r0, #14
 800625c:	d93b      	bls.n	80062d6 <_scanf_float+0xde>
 800625e:	f1b9 0f00 	cmp.w	r9, #0
 8006262:	d003      	beq.n	800626c <_scanf_float+0x74>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006270:	f1ba 0f01 	cmp.w	sl, #1
 8006274:	f200 8118 	bhi.w	80064a8 <_scanf_float+0x2b0>
 8006278:	9b01      	ldr	r3, [sp, #4]
 800627a:	429e      	cmp	r6, r3
 800627c:	f200 8109 	bhi.w	8006492 <_scanf_float+0x29a>
 8006280:	2001      	movs	r0, #1
 8006282:	b007      	add	sp, #28
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800628c:	2a0d      	cmp	r2, #13
 800628e:	d8e6      	bhi.n	800625e <_scanf_float+0x66>
 8006290:	a101      	add	r1, pc, #4	@ (adr r1, 8006298 <_scanf_float+0xa0>)
 8006292:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006296:	bf00      	nop
 8006298:	080063df 	.word	0x080063df
 800629c:	0800625f 	.word	0x0800625f
 80062a0:	0800625f 	.word	0x0800625f
 80062a4:	0800625f 	.word	0x0800625f
 80062a8:	0800643f 	.word	0x0800643f
 80062ac:	08006417 	.word	0x08006417
 80062b0:	0800625f 	.word	0x0800625f
 80062b4:	0800625f 	.word	0x0800625f
 80062b8:	080063ed 	.word	0x080063ed
 80062bc:	0800625f 	.word	0x0800625f
 80062c0:	0800625f 	.word	0x0800625f
 80062c4:	0800625f 	.word	0x0800625f
 80062c8:	0800625f 	.word	0x0800625f
 80062cc:	080063a5 	.word	0x080063a5
 80062d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80062d4:	e7da      	b.n	800628c <_scanf_float+0x94>
 80062d6:	290e      	cmp	r1, #14
 80062d8:	d8c1      	bhi.n	800625e <_scanf_float+0x66>
 80062da:	a001      	add	r0, pc, #4	@ (adr r0, 80062e0 <_scanf_float+0xe8>)
 80062dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80062e0:	08006395 	.word	0x08006395
 80062e4:	0800625f 	.word	0x0800625f
 80062e8:	08006395 	.word	0x08006395
 80062ec:	0800642b 	.word	0x0800642b
 80062f0:	0800625f 	.word	0x0800625f
 80062f4:	0800633d 	.word	0x0800633d
 80062f8:	0800637b 	.word	0x0800637b
 80062fc:	0800637b 	.word	0x0800637b
 8006300:	0800637b 	.word	0x0800637b
 8006304:	0800637b 	.word	0x0800637b
 8006308:	0800637b 	.word	0x0800637b
 800630c:	0800637b 	.word	0x0800637b
 8006310:	0800637b 	.word	0x0800637b
 8006314:	0800637b 	.word	0x0800637b
 8006318:	0800637b 	.word	0x0800637b
 800631c:	2b6e      	cmp	r3, #110	@ 0x6e
 800631e:	d809      	bhi.n	8006334 <_scanf_float+0x13c>
 8006320:	2b60      	cmp	r3, #96	@ 0x60
 8006322:	d8b1      	bhi.n	8006288 <_scanf_float+0x90>
 8006324:	2b54      	cmp	r3, #84	@ 0x54
 8006326:	d07b      	beq.n	8006420 <_scanf_float+0x228>
 8006328:	2b59      	cmp	r3, #89	@ 0x59
 800632a:	d198      	bne.n	800625e <_scanf_float+0x66>
 800632c:	2d07      	cmp	r5, #7
 800632e:	d196      	bne.n	800625e <_scanf_float+0x66>
 8006330:	2508      	movs	r5, #8
 8006332:	e02c      	b.n	800638e <_scanf_float+0x196>
 8006334:	2b74      	cmp	r3, #116	@ 0x74
 8006336:	d073      	beq.n	8006420 <_scanf_float+0x228>
 8006338:	2b79      	cmp	r3, #121	@ 0x79
 800633a:	e7f6      	b.n	800632a <_scanf_float+0x132>
 800633c:	6821      	ldr	r1, [r4, #0]
 800633e:	05c8      	lsls	r0, r1, #23
 8006340:	d51b      	bpl.n	800637a <_scanf_float+0x182>
 8006342:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006346:	6021      	str	r1, [r4, #0]
 8006348:	f109 0901 	add.w	r9, r9, #1
 800634c:	f1bb 0f00 	cmp.w	fp, #0
 8006350:	d003      	beq.n	800635a <_scanf_float+0x162>
 8006352:	3201      	adds	r2, #1
 8006354:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006358:	60a2      	str	r2, [r4, #8]
 800635a:	68a3      	ldr	r3, [r4, #8]
 800635c:	3b01      	subs	r3, #1
 800635e:	60a3      	str	r3, [r4, #8]
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	3301      	adds	r3, #1
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3b01      	subs	r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	607b      	str	r3, [r7, #4]
 800636e:	f340 8087 	ble.w	8006480 <_scanf_float+0x288>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	e764      	b.n	8006244 <_scanf_float+0x4c>
 800637a:	eb1a 0105 	adds.w	r1, sl, r5
 800637e:	f47f af6e 	bne.w	800625e <_scanf_float+0x66>
 8006382:	460d      	mov	r5, r1
 8006384:	468a      	mov	sl, r1
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800638c:	6022      	str	r2, [r4, #0]
 800638e:	f806 3b01 	strb.w	r3, [r6], #1
 8006392:	e7e2      	b.n	800635a <_scanf_float+0x162>
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	0610      	lsls	r0, r2, #24
 8006398:	f57f af61 	bpl.w	800625e <_scanf_float+0x66>
 800639c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063a0:	6022      	str	r2, [r4, #0]
 80063a2:	e7f4      	b.n	800638e <_scanf_float+0x196>
 80063a4:	f1ba 0f00 	cmp.w	sl, #0
 80063a8:	d10e      	bne.n	80063c8 <_scanf_float+0x1d0>
 80063aa:	f1b9 0f00 	cmp.w	r9, #0
 80063ae:	d10e      	bne.n	80063ce <_scanf_float+0x1d6>
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80063b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80063ba:	d108      	bne.n	80063ce <_scanf_float+0x1d6>
 80063bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80063c0:	f04f 0a01 	mov.w	sl, #1
 80063c4:	6022      	str	r2, [r4, #0]
 80063c6:	e7e2      	b.n	800638e <_scanf_float+0x196>
 80063c8:	f1ba 0f02 	cmp.w	sl, #2
 80063cc:	d055      	beq.n	800647a <_scanf_float+0x282>
 80063ce:	2d01      	cmp	r5, #1
 80063d0:	d002      	beq.n	80063d8 <_scanf_float+0x1e0>
 80063d2:	2d04      	cmp	r5, #4
 80063d4:	f47f af43 	bne.w	800625e <_scanf_float+0x66>
 80063d8:	3501      	adds	r5, #1
 80063da:	b2ed      	uxtb	r5, r5
 80063dc:	e7d7      	b.n	800638e <_scanf_float+0x196>
 80063de:	f1ba 0f01 	cmp.w	sl, #1
 80063e2:	f47f af3c 	bne.w	800625e <_scanf_float+0x66>
 80063e6:	f04f 0a02 	mov.w	sl, #2
 80063ea:	e7d0      	b.n	800638e <_scanf_float+0x196>
 80063ec:	b97d      	cbnz	r5, 800640e <_scanf_float+0x216>
 80063ee:	f1b9 0f00 	cmp.w	r9, #0
 80063f2:	f47f af37 	bne.w	8006264 <_scanf_float+0x6c>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80063fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006400:	f040 8103 	bne.w	800660a <_scanf_float+0x412>
 8006404:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006408:	2501      	movs	r5, #1
 800640a:	6022      	str	r2, [r4, #0]
 800640c:	e7bf      	b.n	800638e <_scanf_float+0x196>
 800640e:	2d03      	cmp	r5, #3
 8006410:	d0e2      	beq.n	80063d8 <_scanf_float+0x1e0>
 8006412:	2d05      	cmp	r5, #5
 8006414:	e7de      	b.n	80063d4 <_scanf_float+0x1dc>
 8006416:	2d02      	cmp	r5, #2
 8006418:	f47f af21 	bne.w	800625e <_scanf_float+0x66>
 800641c:	2503      	movs	r5, #3
 800641e:	e7b6      	b.n	800638e <_scanf_float+0x196>
 8006420:	2d06      	cmp	r5, #6
 8006422:	f47f af1c 	bne.w	800625e <_scanf_float+0x66>
 8006426:	2507      	movs	r5, #7
 8006428:	e7b1      	b.n	800638e <_scanf_float+0x196>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	0591      	lsls	r1, r2, #22
 800642e:	f57f af16 	bpl.w	800625e <_scanf_float+0x66>
 8006432:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006436:	6022      	str	r2, [r4, #0]
 8006438:	f8cd 9008 	str.w	r9, [sp, #8]
 800643c:	e7a7      	b.n	800638e <_scanf_float+0x196>
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006444:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006448:	d006      	beq.n	8006458 <_scanf_float+0x260>
 800644a:	0550      	lsls	r0, r2, #21
 800644c:	f57f af07 	bpl.w	800625e <_scanf_float+0x66>
 8006450:	f1b9 0f00 	cmp.w	r9, #0
 8006454:	f000 80d9 	beq.w	800660a <_scanf_float+0x412>
 8006458:	0591      	lsls	r1, r2, #22
 800645a:	bf58      	it	pl
 800645c:	9902      	ldrpl	r1, [sp, #8]
 800645e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006462:	bf58      	it	pl
 8006464:	eba9 0101 	subpl.w	r1, r9, r1
 8006468:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800646c:	f04f 0900 	mov.w	r9, #0
 8006470:	bf58      	it	pl
 8006472:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006476:	6022      	str	r2, [r4, #0]
 8006478:	e789      	b.n	800638e <_scanf_float+0x196>
 800647a:	f04f 0a03 	mov.w	sl, #3
 800647e:	e786      	b.n	800638e <_scanf_float+0x196>
 8006480:	4639      	mov	r1, r7
 8006482:	4640      	mov	r0, r8
 8006484:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006488:	4798      	blx	r3
 800648a:	2800      	cmp	r0, #0
 800648c:	f43f aeda 	beq.w	8006244 <_scanf_float+0x4c>
 8006490:	e6e5      	b.n	800625e <_scanf_float+0x66>
 8006492:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006496:	463a      	mov	r2, r7
 8006498:	4640      	mov	r0, r8
 800649a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800649e:	4798      	blx	r3
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	e6e7      	b.n	8006278 <_scanf_float+0x80>
 80064a8:	1e6b      	subs	r3, r5, #1
 80064aa:	2b06      	cmp	r3, #6
 80064ac:	d824      	bhi.n	80064f8 <_scanf_float+0x300>
 80064ae:	2d02      	cmp	r5, #2
 80064b0:	d836      	bhi.n	8006520 <_scanf_float+0x328>
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	429e      	cmp	r6, r3
 80064b6:	f67f aee3 	bls.w	8006280 <_scanf_float+0x88>
 80064ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064be:	463a      	mov	r2, r7
 80064c0:	4640      	mov	r0, r8
 80064c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064c6:	4798      	blx	r3
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	e7f0      	b.n	80064b2 <_scanf_float+0x2ba>
 80064d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064d4:	463a      	mov	r2, r7
 80064d6:	4640      	mov	r0, r8
 80064d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80064dc:	4798      	blx	r3
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064e8:	fa5f fa8a 	uxtb.w	sl, sl
 80064ec:	f1ba 0f02 	cmp.w	sl, #2
 80064f0:	d1ee      	bne.n	80064d0 <_scanf_float+0x2d8>
 80064f2:	3d03      	subs	r5, #3
 80064f4:	b2ed      	uxtb	r5, r5
 80064f6:	1b76      	subs	r6, r6, r5
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	05da      	lsls	r2, r3, #23
 80064fc:	d530      	bpl.n	8006560 <_scanf_float+0x368>
 80064fe:	055b      	lsls	r3, r3, #21
 8006500:	d511      	bpl.n	8006526 <_scanf_float+0x32e>
 8006502:	9b01      	ldr	r3, [sp, #4]
 8006504:	429e      	cmp	r6, r3
 8006506:	f67f aebb 	bls.w	8006280 <_scanf_float+0x88>
 800650a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800650e:	463a      	mov	r2, r7
 8006510:	4640      	mov	r0, r8
 8006512:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006516:	4798      	blx	r3
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	3b01      	subs	r3, #1
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	e7f0      	b.n	8006502 <_scanf_float+0x30a>
 8006520:	46aa      	mov	sl, r5
 8006522:	46b3      	mov	fp, r6
 8006524:	e7de      	b.n	80064e4 <_scanf_float+0x2ec>
 8006526:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	2965      	cmp	r1, #101	@ 0x65
 800652e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006532:	f106 35ff 	add.w	r5, r6, #4294967295
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	d00c      	beq.n	8006554 <_scanf_float+0x35c>
 800653a:	2945      	cmp	r1, #69	@ 0x45
 800653c:	d00a      	beq.n	8006554 <_scanf_float+0x35c>
 800653e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006542:	463a      	mov	r2, r7
 8006544:	4640      	mov	r0, r8
 8006546:	4798      	blx	r3
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800654e:	3b01      	subs	r3, #1
 8006550:	1eb5      	subs	r5, r6, #2
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	463a      	mov	r2, r7
 8006556:	4640      	mov	r0, r8
 8006558:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800655c:	4798      	blx	r3
 800655e:	462e      	mov	r6, r5
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	f012 0210 	ands.w	r2, r2, #16
 8006566:	d001      	beq.n	800656c <_scanf_float+0x374>
 8006568:	2000      	movs	r0, #0
 800656a:	e68a      	b.n	8006282 <_scanf_float+0x8a>
 800656c:	7032      	strb	r2, [r6, #0]
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006578:	d11c      	bne.n	80065b4 <_scanf_float+0x3bc>
 800657a:	9b02      	ldr	r3, [sp, #8]
 800657c:	454b      	cmp	r3, r9
 800657e:	eba3 0209 	sub.w	r2, r3, r9
 8006582:	d123      	bne.n	80065cc <_scanf_float+0x3d4>
 8006584:	2200      	movs	r2, #0
 8006586:	4640      	mov	r0, r8
 8006588:	9901      	ldr	r1, [sp, #4]
 800658a:	f002 fc09 	bl	8008da0 <_strtod_r>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	6825      	ldr	r5, [r4, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f015 0f02 	tst.w	r5, #2
 8006598:	4606      	mov	r6, r0
 800659a:	460f      	mov	r7, r1
 800659c:	f103 0204 	add.w	r2, r3, #4
 80065a0:	d01f      	beq.n	80065e2 <_scanf_float+0x3ea>
 80065a2:	9903      	ldr	r1, [sp, #12]
 80065a4:	600a      	str	r2, [r1, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	e9c3 6700 	strd	r6, r7, [r3]
 80065ac:	68e3      	ldr	r3, [r4, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60e3      	str	r3, [r4, #12]
 80065b2:	e7d9      	b.n	8006568 <_scanf_float+0x370>
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0e4      	beq.n	8006584 <_scanf_float+0x38c>
 80065ba:	9905      	ldr	r1, [sp, #20]
 80065bc:	230a      	movs	r3, #10
 80065be:	4640      	mov	r0, r8
 80065c0:	3101      	adds	r1, #1
 80065c2:	f7ff f9b1 	bl	8005928 <_strtol_r>
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	9e05      	ldr	r6, [sp, #20]
 80065ca:	1ac2      	subs	r2, r0, r3
 80065cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80065d0:	429e      	cmp	r6, r3
 80065d2:	bf28      	it	cs
 80065d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80065d8:	4630      	mov	r0, r6
 80065da:	490d      	ldr	r1, [pc, #52]	@ (8006610 <_scanf_float+0x418>)
 80065dc:	f000 f8de 	bl	800679c <siprintf>
 80065e0:	e7d0      	b.n	8006584 <_scanf_float+0x38c>
 80065e2:	076d      	lsls	r5, r5, #29
 80065e4:	d4dd      	bmi.n	80065a2 <_scanf_float+0x3aa>
 80065e6:	9d03      	ldr	r5, [sp, #12]
 80065e8:	602a      	str	r2, [r5, #0]
 80065ea:	681d      	ldr	r5, [r3, #0]
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	f7fa fa0c 	bl	8000a0c <__aeabi_dcmpun>
 80065f4:	b120      	cbz	r0, 8006600 <_scanf_float+0x408>
 80065f6:	4807      	ldr	r0, [pc, #28]	@ (8006614 <_scanf_float+0x41c>)
 80065f8:	f000 f9dc 	bl	80069b4 <nanf>
 80065fc:	6028      	str	r0, [r5, #0]
 80065fe:	e7d5      	b.n	80065ac <_scanf_float+0x3b4>
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7fa fa60 	bl	8000ac8 <__aeabi_d2f>
 8006608:	e7f8      	b.n	80065fc <_scanf_float+0x404>
 800660a:	f04f 0900 	mov.w	r9, #0
 800660e:	e62d      	b.n	800626c <_scanf_float+0x74>
 8006610:	0800a0bb 	.word	0x0800a0bb
 8006614:	0800a354 	.word	0x0800a354

08006618 <std>:
 8006618:	2300      	movs	r3, #0
 800661a:	b510      	push	{r4, lr}
 800661c:	4604      	mov	r4, r0
 800661e:	e9c0 3300 	strd	r3, r3, [r0]
 8006622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006626:	6083      	str	r3, [r0, #8]
 8006628:	8181      	strh	r1, [r0, #12]
 800662a:	6643      	str	r3, [r0, #100]	@ 0x64
 800662c:	81c2      	strh	r2, [r0, #14]
 800662e:	6183      	str	r3, [r0, #24]
 8006630:	4619      	mov	r1, r3
 8006632:	2208      	movs	r2, #8
 8006634:	305c      	adds	r0, #92	@ 0x5c
 8006636:	f000 f914 	bl	8006862 <memset>
 800663a:	4b0d      	ldr	r3, [pc, #52]	@ (8006670 <std+0x58>)
 800663c:	6224      	str	r4, [r4, #32]
 800663e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <std+0x5c>)
 8006642:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006644:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <std+0x60>)
 8006646:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006648:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <std+0x64>)
 800664a:	6323      	str	r3, [r4, #48]	@ 0x30
 800664c:	4b0c      	ldr	r3, [pc, #48]	@ (8006680 <std+0x68>)
 800664e:	429c      	cmp	r4, r3
 8006650:	d006      	beq.n	8006660 <std+0x48>
 8006652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006656:	4294      	cmp	r4, r2
 8006658:	d002      	beq.n	8006660 <std+0x48>
 800665a:	33d0      	adds	r3, #208	@ 0xd0
 800665c:	429c      	cmp	r4, r3
 800665e:	d105      	bne.n	800666c <std+0x54>
 8006660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006668:	f000 b98a 	b.w	8006980 <__retarget_lock_init_recursive>
 800666c:	bd10      	pop	{r4, pc}
 800666e:	bf00      	nop
 8006670:	080067dd 	.word	0x080067dd
 8006674:	080067ff 	.word	0x080067ff
 8006678:	08006837 	.word	0x08006837
 800667c:	0800685b 	.word	0x0800685b
 8006680:	20002350 	.word	0x20002350

08006684 <stdio_exit_handler>:
 8006684:	4a02      	ldr	r2, [pc, #8]	@ (8006690 <stdio_exit_handler+0xc>)
 8006686:	4903      	ldr	r1, [pc, #12]	@ (8006694 <stdio_exit_handler+0x10>)
 8006688:	4803      	ldr	r0, [pc, #12]	@ (8006698 <stdio_exit_handler+0x14>)
 800668a:	f000 b869 	b.w	8006760 <_fwalk_sglue>
 800668e:	bf00      	nop
 8006690:	20000014 	.word	0x20000014
 8006694:	0800915d 	.word	0x0800915d
 8006698:	20000024 	.word	0x20000024

0800669c <cleanup_stdio>:
 800669c:	6841      	ldr	r1, [r0, #4]
 800669e:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <cleanup_stdio+0x34>)
 80066a0:	b510      	push	{r4, lr}
 80066a2:	4299      	cmp	r1, r3
 80066a4:	4604      	mov	r4, r0
 80066a6:	d001      	beq.n	80066ac <cleanup_stdio+0x10>
 80066a8:	f002 fd58 	bl	800915c <_fflush_r>
 80066ac:	68a1      	ldr	r1, [r4, #8]
 80066ae:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <cleanup_stdio+0x38>)
 80066b0:	4299      	cmp	r1, r3
 80066b2:	d002      	beq.n	80066ba <cleanup_stdio+0x1e>
 80066b4:	4620      	mov	r0, r4
 80066b6:	f002 fd51 	bl	800915c <_fflush_r>
 80066ba:	68e1      	ldr	r1, [r4, #12]
 80066bc:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <cleanup_stdio+0x3c>)
 80066be:	4299      	cmp	r1, r3
 80066c0:	d004      	beq.n	80066cc <cleanup_stdio+0x30>
 80066c2:	4620      	mov	r0, r4
 80066c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c8:	f002 bd48 	b.w	800915c <_fflush_r>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	bf00      	nop
 80066d0:	20002350 	.word	0x20002350
 80066d4:	200023b8 	.word	0x200023b8
 80066d8:	20002420 	.word	0x20002420

080066dc <global_stdio_init.part.0>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4b0b      	ldr	r3, [pc, #44]	@ (800670c <global_stdio_init.part.0+0x30>)
 80066e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006710 <global_stdio_init.part.0+0x34>)
 80066e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006714 <global_stdio_init.part.0+0x38>)
 80066e4:	4620      	mov	r0, r4
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	2104      	movs	r1, #4
 80066ea:	2200      	movs	r2, #0
 80066ec:	f7ff ff94 	bl	8006618 <std>
 80066f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066f4:	2201      	movs	r2, #1
 80066f6:	2109      	movs	r1, #9
 80066f8:	f7ff ff8e 	bl	8006618 <std>
 80066fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006700:	2202      	movs	r2, #2
 8006702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006706:	2112      	movs	r1, #18
 8006708:	f7ff bf86 	b.w	8006618 <std>
 800670c:	20002488 	.word	0x20002488
 8006710:	20002350 	.word	0x20002350
 8006714:	08006685 	.word	0x08006685

08006718 <__sfp_lock_acquire>:
 8006718:	4801      	ldr	r0, [pc, #4]	@ (8006720 <__sfp_lock_acquire+0x8>)
 800671a:	f000 b932 	b.w	8006982 <__retarget_lock_acquire_recursive>
 800671e:	bf00      	nop
 8006720:	20002491 	.word	0x20002491

08006724 <__sfp_lock_release>:
 8006724:	4801      	ldr	r0, [pc, #4]	@ (800672c <__sfp_lock_release+0x8>)
 8006726:	f000 b92d 	b.w	8006984 <__retarget_lock_release_recursive>
 800672a:	bf00      	nop
 800672c:	20002491 	.word	0x20002491

08006730 <__sinit>:
 8006730:	b510      	push	{r4, lr}
 8006732:	4604      	mov	r4, r0
 8006734:	f7ff fff0 	bl	8006718 <__sfp_lock_acquire>
 8006738:	6a23      	ldr	r3, [r4, #32]
 800673a:	b11b      	cbz	r3, 8006744 <__sinit+0x14>
 800673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006740:	f7ff bff0 	b.w	8006724 <__sfp_lock_release>
 8006744:	4b04      	ldr	r3, [pc, #16]	@ (8006758 <__sinit+0x28>)
 8006746:	6223      	str	r3, [r4, #32]
 8006748:	4b04      	ldr	r3, [pc, #16]	@ (800675c <__sinit+0x2c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f5      	bne.n	800673c <__sinit+0xc>
 8006750:	f7ff ffc4 	bl	80066dc <global_stdio_init.part.0>
 8006754:	e7f2      	b.n	800673c <__sinit+0xc>
 8006756:	bf00      	nop
 8006758:	0800669d 	.word	0x0800669d
 800675c:	20002488 	.word	0x20002488

08006760 <_fwalk_sglue>:
 8006760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006764:	4607      	mov	r7, r0
 8006766:	4688      	mov	r8, r1
 8006768:	4614      	mov	r4, r2
 800676a:	2600      	movs	r6, #0
 800676c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006770:	f1b9 0901 	subs.w	r9, r9, #1
 8006774:	d505      	bpl.n	8006782 <_fwalk_sglue+0x22>
 8006776:	6824      	ldr	r4, [r4, #0]
 8006778:	2c00      	cmp	r4, #0
 800677a:	d1f7      	bne.n	800676c <_fwalk_sglue+0xc>
 800677c:	4630      	mov	r0, r6
 800677e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d907      	bls.n	8006798 <_fwalk_sglue+0x38>
 8006788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800678c:	3301      	adds	r3, #1
 800678e:	d003      	beq.n	8006798 <_fwalk_sglue+0x38>
 8006790:	4629      	mov	r1, r5
 8006792:	4638      	mov	r0, r7
 8006794:	47c0      	blx	r8
 8006796:	4306      	orrs	r6, r0
 8006798:	3568      	adds	r5, #104	@ 0x68
 800679a:	e7e9      	b.n	8006770 <_fwalk_sglue+0x10>

0800679c <siprintf>:
 800679c:	b40e      	push	{r1, r2, r3}
 800679e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067a2:	b500      	push	{lr}
 80067a4:	b09c      	sub	sp, #112	@ 0x70
 80067a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80067a8:	9002      	str	r0, [sp, #8]
 80067aa:	9006      	str	r0, [sp, #24]
 80067ac:	9107      	str	r1, [sp, #28]
 80067ae:	9104      	str	r1, [sp, #16]
 80067b0:	4808      	ldr	r0, [pc, #32]	@ (80067d4 <siprintf+0x38>)
 80067b2:	4909      	ldr	r1, [pc, #36]	@ (80067d8 <siprintf+0x3c>)
 80067b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b8:	9105      	str	r1, [sp, #20]
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	a902      	add	r1, sp, #8
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	f002 fb50 	bl	8008e64 <_svfiprintf_r>
 80067c4:	2200      	movs	r2, #0
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	b01c      	add	sp, #112	@ 0x70
 80067cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d0:	b003      	add	sp, #12
 80067d2:	4770      	bx	lr
 80067d4:	20000020 	.word	0x20000020
 80067d8:	ffff0208 	.word	0xffff0208

080067dc <__sread>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	460c      	mov	r4, r1
 80067e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e4:	f000 f87e 	bl	80068e4 <_read_r>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	bfab      	itete	ge
 80067ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067ee:	89a3      	ldrhlt	r3, [r4, #12]
 80067f0:	181b      	addge	r3, r3, r0
 80067f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067f6:	bfac      	ite	ge
 80067f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067fa:	81a3      	strhlt	r3, [r4, #12]
 80067fc:	bd10      	pop	{r4, pc}

080067fe <__swrite>:
 80067fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	461f      	mov	r7, r3
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	4605      	mov	r5, r0
 8006808:	05db      	lsls	r3, r3, #23
 800680a:	460c      	mov	r4, r1
 800680c:	4616      	mov	r6, r2
 800680e:	d505      	bpl.n	800681c <__swrite+0x1e>
 8006810:	2302      	movs	r3, #2
 8006812:	2200      	movs	r2, #0
 8006814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006818:	f000 f852 	bl	80068c0 <_lseek_r>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	4632      	mov	r2, r6
 8006820:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	4628      	mov	r0, r5
 8006828:	463b      	mov	r3, r7
 800682a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006832:	f000 b869 	b.w	8006908 <_write_r>

08006836 <__sseek>:
 8006836:	b510      	push	{r4, lr}
 8006838:	460c      	mov	r4, r1
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 f83f 	bl	80068c0 <_lseek_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	bf15      	itete	ne
 8006848:	6560      	strne	r0, [r4, #84]	@ 0x54
 800684a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800684e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006852:	81a3      	strheq	r3, [r4, #12]
 8006854:	bf18      	it	ne
 8006856:	81a3      	strhne	r3, [r4, #12]
 8006858:	bd10      	pop	{r4, pc}

0800685a <__sclose>:
 800685a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685e:	f000 b81f 	b.w	80068a0 <_close_r>

08006862 <memset>:
 8006862:	4603      	mov	r3, r0
 8006864:	4402      	add	r2, r0
 8006866:	4293      	cmp	r3, r2
 8006868:	d100      	bne.n	800686c <memset+0xa>
 800686a:	4770      	bx	lr
 800686c:	f803 1b01 	strb.w	r1, [r3], #1
 8006870:	e7f9      	b.n	8006866 <memset+0x4>

08006872 <strncpy>:
 8006872:	4603      	mov	r3, r0
 8006874:	b510      	push	{r4, lr}
 8006876:	3901      	subs	r1, #1
 8006878:	b132      	cbz	r2, 8006888 <strncpy+0x16>
 800687a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800687e:	3a01      	subs	r2, #1
 8006880:	f803 4b01 	strb.w	r4, [r3], #1
 8006884:	2c00      	cmp	r4, #0
 8006886:	d1f7      	bne.n	8006878 <strncpy+0x6>
 8006888:	2100      	movs	r1, #0
 800688a:	441a      	add	r2, r3
 800688c:	4293      	cmp	r3, r2
 800688e:	d100      	bne.n	8006892 <strncpy+0x20>
 8006890:	bd10      	pop	{r4, pc}
 8006892:	f803 1b01 	strb.w	r1, [r3], #1
 8006896:	e7f9      	b.n	800688c <strncpy+0x1a>

08006898 <_localeconv_r>:
 8006898:	4800      	ldr	r0, [pc, #0]	@ (800689c <_localeconv_r+0x4>)
 800689a:	4770      	bx	lr
 800689c:	20000160 	.word	0x20000160

080068a0 <_close_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	2300      	movs	r3, #0
 80068a4:	4d05      	ldr	r5, [pc, #20]	@ (80068bc <_close_r+0x1c>)
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fb ff7b 	bl	80027a6 <_close>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_close_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_close_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	2000248c 	.word	0x2000248c

080068c0 <_lseek_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	4611      	mov	r1, r2
 80068c8:	2200      	movs	r2, #0
 80068ca:	4d05      	ldr	r5, [pc, #20]	@ (80068e0 <_lseek_r+0x20>)
 80068cc:	602a      	str	r2, [r5, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f7fb ff8d 	bl	80027ee <_lseek>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d102      	bne.n	80068de <_lseek_r+0x1e>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	b103      	cbz	r3, 80068de <_lseek_r+0x1e>
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	2000248c 	.word	0x2000248c

080068e4 <_read_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4604      	mov	r4, r0
 80068e8:	4608      	mov	r0, r1
 80068ea:	4611      	mov	r1, r2
 80068ec:	2200      	movs	r2, #0
 80068ee:	4d05      	ldr	r5, [pc, #20]	@ (8006904 <_read_r+0x20>)
 80068f0:	602a      	str	r2, [r5, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f7fb ff1e 	bl	8002734 <_read>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_read_r+0x1e>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_read_r+0x1e>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	2000248c 	.word	0x2000248c

08006908 <_write_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4604      	mov	r4, r0
 800690c:	4608      	mov	r0, r1
 800690e:	4611      	mov	r1, r2
 8006910:	2200      	movs	r2, #0
 8006912:	4d05      	ldr	r5, [pc, #20]	@ (8006928 <_write_r+0x20>)
 8006914:	602a      	str	r2, [r5, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f7fb ff29 	bl	800276e <_write>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_write_r+0x1e>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_write_r+0x1e>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	2000248c 	.word	0x2000248c

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	@ (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000020 	.word	0x20000020

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	2600      	movs	r6, #0
 800693c:	4d0c      	ldr	r5, [pc, #48]	@ (8006970 <__libc_init_array+0x38>)
 800693e:	4c0d      	ldr	r4, [pc, #52]	@ (8006974 <__libc_init_array+0x3c>)
 8006940:	1b64      	subs	r4, r4, r5
 8006942:	10a4      	asrs	r4, r4, #2
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	f003 faf4 	bl	8009f34 <_init>
 800694c:	2600      	movs	r6, #0
 800694e:	4d0a      	ldr	r5, [pc, #40]	@ (8006978 <__libc_init_array+0x40>)
 8006950:	4c0a      	ldr	r4, [pc, #40]	@ (800697c <__libc_init_array+0x44>)
 8006952:	1b64      	subs	r4, r4, r5
 8006954:	10a4      	asrs	r4, r4, #2
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	0800a3c0 	.word	0x0800a3c0
 8006974:	0800a3c0 	.word	0x0800a3c0
 8006978:	0800a3c0 	.word	0x0800a3c0
 800697c:	0800a3c4 	.word	0x0800a3c4

08006980 <__retarget_lock_init_recursive>:
 8006980:	4770      	bx	lr

08006982 <__retarget_lock_acquire_recursive>:
 8006982:	4770      	bx	lr

08006984 <__retarget_lock_release_recursive>:
 8006984:	4770      	bx	lr

08006986 <strcpy>:
 8006986:	4603      	mov	r3, r0
 8006988:	f811 2b01 	ldrb.w	r2, [r1], #1
 800698c:	f803 2b01 	strb.w	r2, [r3], #1
 8006990:	2a00      	cmp	r2, #0
 8006992:	d1f9      	bne.n	8006988 <strcpy+0x2>
 8006994:	4770      	bx	lr

08006996 <memchr>:
 8006996:	4603      	mov	r3, r0
 8006998:	b510      	push	{r4, lr}
 800699a:	b2c9      	uxtb	r1, r1
 800699c:	4402      	add	r2, r0
 800699e:	4293      	cmp	r3, r2
 80069a0:	4618      	mov	r0, r3
 80069a2:	d101      	bne.n	80069a8 <memchr+0x12>
 80069a4:	2000      	movs	r0, #0
 80069a6:	e003      	b.n	80069b0 <memchr+0x1a>
 80069a8:	7804      	ldrb	r4, [r0, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	428c      	cmp	r4, r1
 80069ae:	d1f6      	bne.n	800699e <memchr+0x8>
 80069b0:	bd10      	pop	{r4, pc}
	...

080069b4 <nanf>:
 80069b4:	4800      	ldr	r0, [pc, #0]	@ (80069b8 <nanf+0x4>)
 80069b6:	4770      	bx	lr
 80069b8:	7fc00000 	.word	0x7fc00000

080069bc <quorem>:
 80069bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	6903      	ldr	r3, [r0, #16]
 80069c2:	690c      	ldr	r4, [r1, #16]
 80069c4:	4607      	mov	r7, r0
 80069c6:	42a3      	cmp	r3, r4
 80069c8:	db7e      	blt.n	8006ac8 <quorem+0x10c>
 80069ca:	3c01      	subs	r4, #1
 80069cc:	00a3      	lsls	r3, r4, #2
 80069ce:	f100 0514 	add.w	r5, r0, #20
 80069d2:	f101 0814 	add.w	r8, r1, #20
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069e6:	3301      	adds	r3, #1
 80069e8:	429a      	cmp	r2, r3
 80069ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80069ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069f2:	d32e      	bcc.n	8006a52 <quorem+0x96>
 80069f4:	f04f 0a00 	mov.w	sl, #0
 80069f8:	46c4      	mov	ip, r8
 80069fa:	46ae      	mov	lr, r5
 80069fc:	46d3      	mov	fp, sl
 80069fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a02:	b298      	uxth	r0, r3
 8006a04:	fb06 a000 	mla	r0, r6, r0, sl
 8006a08:	0c1b      	lsrs	r3, r3, #16
 8006a0a:	0c02      	lsrs	r2, r0, #16
 8006a0c:	fb06 2303 	mla	r3, r6, r3, r2
 8006a10:	f8de 2000 	ldr.w	r2, [lr]
 8006a14:	b280      	uxth	r0, r0
 8006a16:	b292      	uxth	r2, r2
 8006a18:	1a12      	subs	r2, r2, r0
 8006a1a:	445a      	add	r2, fp
 8006a1c:	f8de 0000 	ldr.w	r0, [lr]
 8006a20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a2e:	b292      	uxth	r2, r2
 8006a30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a34:	45e1      	cmp	r9, ip
 8006a36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a3a:	f84e 2b04 	str.w	r2, [lr], #4
 8006a3e:	d2de      	bcs.n	80069fe <quorem+0x42>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	58eb      	ldr	r3, [r5, r3]
 8006a44:	b92b      	cbnz	r3, 8006a52 <quorem+0x96>
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	429d      	cmp	r5, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	d32f      	bcc.n	8006ab0 <quorem+0xf4>
 8006a50:	613c      	str	r4, [r7, #16]
 8006a52:	4638      	mov	r0, r7
 8006a54:	f001 f9c4 	bl	8007de0 <__mcmp>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	db25      	blt.n	8006aa8 <quorem+0xec>
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a64:	f8d1 c000 	ldr.w	ip, [r1]
 8006a68:	fa1f fe82 	uxth.w	lr, r2
 8006a6c:	fa1f f38c 	uxth.w	r3, ip
 8006a70:	eba3 030e 	sub.w	r3, r3, lr
 8006a74:	4403      	add	r3, r0
 8006a76:	0c12      	lsrs	r2, r2, #16
 8006a78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a86:	45c1      	cmp	r9, r8
 8006a88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a8c:	f841 3b04 	str.w	r3, [r1], #4
 8006a90:	d2e6      	bcs.n	8006a60 <quorem+0xa4>
 8006a92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a9a:	b922      	cbnz	r2, 8006aa6 <quorem+0xea>
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	429d      	cmp	r5, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	d30b      	bcc.n	8006abc <quorem+0x100>
 8006aa4:	613c      	str	r4, [r7, #16]
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	d1cb      	bne.n	8006a50 <quorem+0x94>
 8006ab8:	3c01      	subs	r4, #1
 8006aba:	e7c6      	b.n	8006a4a <quorem+0x8e>
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	3b04      	subs	r3, #4
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d1ef      	bne.n	8006aa4 <quorem+0xe8>
 8006ac4:	3c01      	subs	r4, #1
 8006ac6:	e7ea      	b.n	8006a9e <quorem+0xe2>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7ee      	b.n	8006aaa <quorem+0xee>
 8006acc:	0000      	movs	r0, r0
	...

08006ad0 <_dtoa_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	69c7      	ldr	r7, [r0, #28]
 8006ada:	b097      	sub	sp, #92	@ 0x5c
 8006adc:	4683      	mov	fp, r0
 8006ade:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006ae2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006ae4:	b97f      	cbnz	r7, 8006b06 <_dtoa_r+0x36>
 8006ae6:	2010      	movs	r0, #16
 8006ae8:	f000 fe02 	bl	80076f0 <malloc>
 8006aec:	4602      	mov	r2, r0
 8006aee:	f8cb 001c 	str.w	r0, [fp, #28]
 8006af2:	b920      	cbnz	r0, 8006afe <_dtoa_r+0x2e>
 8006af4:	21ef      	movs	r1, #239	@ 0xef
 8006af6:	4ba8      	ldr	r3, [pc, #672]	@ (8006d98 <_dtoa_r+0x2c8>)
 8006af8:	48a8      	ldr	r0, [pc, #672]	@ (8006d9c <_dtoa_r+0x2cc>)
 8006afa:	f002 fba7 	bl	800924c <__assert_func>
 8006afe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b02:	6007      	str	r7, [r0, #0]
 8006b04:	60c7      	str	r7, [r0, #12]
 8006b06:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b0a:	6819      	ldr	r1, [r3, #0]
 8006b0c:	b159      	cbz	r1, 8006b26 <_dtoa_r+0x56>
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	2301      	movs	r3, #1
 8006b12:	4093      	lsls	r3, r2
 8006b14:	604a      	str	r2, [r1, #4]
 8006b16:	608b      	str	r3, [r1, #8]
 8006b18:	4658      	mov	r0, fp
 8006b1a:	f000 fedf 	bl	80078dc <_Bfree>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	1e2b      	subs	r3, r5, #0
 8006b28:	bfaf      	iteee	ge
 8006b2a:	2300      	movge	r3, #0
 8006b2c:	2201      	movlt	r2, #1
 8006b2e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b32:	9303      	strlt	r3, [sp, #12]
 8006b34:	bfa8      	it	ge
 8006b36:	6033      	strge	r3, [r6, #0]
 8006b38:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b3c:	4b98      	ldr	r3, [pc, #608]	@ (8006da0 <_dtoa_r+0x2d0>)
 8006b3e:	bfb8      	it	lt
 8006b40:	6032      	strlt	r2, [r6, #0]
 8006b42:	ea33 0308 	bics.w	r3, r3, r8
 8006b46:	d112      	bne.n	8006b6e <_dtoa_r+0x9e>
 8006b48:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006b54:	4323      	orrs	r3, r4
 8006b56:	f000 8550 	beq.w	80075fa <_dtoa_r+0xb2a>
 8006b5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b5c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006da4 <_dtoa_r+0x2d4>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8552 	beq.w	800760a <_dtoa_r+0xb3a>
 8006b66:	f10a 0303 	add.w	r3, sl, #3
 8006b6a:	f000 bd4c 	b.w	8007606 <_dtoa_r+0xb36>
 8006b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b72:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f7f9 ff13 	bl	80009a8 <__aeabi_dcmpeq>
 8006b82:	4607      	mov	r7, r0
 8006b84:	b158      	cbz	r0, 8006b9e <_dtoa_r+0xce>
 8006b86:	2301      	movs	r3, #1
 8006b88:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b8e:	b113      	cbz	r3, 8006b96 <_dtoa_r+0xc6>
 8006b90:	4b85      	ldr	r3, [pc, #532]	@ (8006da8 <_dtoa_r+0x2d8>)
 8006b92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006dac <_dtoa_r+0x2dc>
 8006b9a:	f000 bd36 	b.w	800760a <_dtoa_r+0xb3a>
 8006b9e:	ab14      	add	r3, sp, #80	@ 0x50
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	ab15      	add	r3, sp, #84	@ 0x54
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	4658      	mov	r0, fp
 8006ba8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006bac:	f001 fa30 	bl	8008010 <__d2b>
 8006bb0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006bb4:	4681      	mov	r9, r0
 8006bb6:	2e00      	cmp	r6, #0
 8006bb8:	d077      	beq.n	8006caa <_dtoa_r+0x1da>
 8006bba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bc0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bc8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006bcc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006bd0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4b76      	ldr	r3, [pc, #472]	@ (8006db0 <_dtoa_r+0x2e0>)
 8006bd8:	f7f9 fac6 	bl	8000168 <__aeabi_dsub>
 8006bdc:	a368      	add	r3, pc, #416	@ (adr r3, 8006d80 <_dtoa_r+0x2b0>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fc79 	bl	80004d8 <__aeabi_dmul>
 8006be6:	a368      	add	r3, pc, #416	@ (adr r3, 8006d88 <_dtoa_r+0x2b8>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 fabe 	bl	800016c <__adddf3>
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	f7f9 fc05 	bl	8000404 <__aeabi_i2d>
 8006bfa:	a365      	add	r3, pc, #404	@ (adr r3, 8006d90 <_dtoa_r+0x2c0>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fc6a 	bl	80004d8 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4620      	mov	r0, r4
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f7f9 faae 	bl	800016c <__adddf3>
 8006c10:	4604      	mov	r4, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	f7f9 ff10 	bl	8000a38 <__aeabi_d2iz>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fecb 	bl	80009bc <__aeabi_dcmplt>
 8006c26:	b140      	cbz	r0, 8006c3a <_dtoa_r+0x16a>
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f7f9 fbeb 	bl	8000404 <__aeabi_i2d>
 8006c2e:	4622      	mov	r2, r4
 8006c30:	462b      	mov	r3, r5
 8006c32:	f7f9 feb9 	bl	80009a8 <__aeabi_dcmpeq>
 8006c36:	b900      	cbnz	r0, 8006c3a <_dtoa_r+0x16a>
 8006c38:	3f01      	subs	r7, #1
 8006c3a:	2f16      	cmp	r7, #22
 8006c3c:	d853      	bhi.n	8006ce6 <_dtoa_r+0x216>
 8006c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c42:	4b5c      	ldr	r3, [pc, #368]	@ (8006db4 <_dtoa_r+0x2e4>)
 8006c44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 feb6 	bl	80009bc <__aeabi_dcmplt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d04a      	beq.n	8006cea <_dtoa_r+0x21a>
 8006c54:	2300      	movs	r3, #0
 8006c56:	3f01      	subs	r7, #1
 8006c58:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c5c:	1b9b      	subs	r3, r3, r6
 8006c5e:	1e5a      	subs	r2, r3, #1
 8006c60:	bf46      	itte	mi
 8006c62:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c66:	2300      	movmi	r3, #0
 8006c68:	f04f 0800 	movpl.w	r8, #0
 8006c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c6e:	bf48      	it	mi
 8006c70:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006c72:	2f00      	cmp	r7, #0
 8006c74:	db3b      	blt.n	8006cee <_dtoa_r+0x21e>
 8006c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c78:	970e      	str	r7, [sp, #56]	@ 0x38
 8006c7a:	443b      	add	r3, r7
 8006c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c7e:	2300      	movs	r3, #0
 8006c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c84:	2b09      	cmp	r3, #9
 8006c86:	d866      	bhi.n	8006d56 <_dtoa_r+0x286>
 8006c88:	2b05      	cmp	r3, #5
 8006c8a:	bfc4      	itt	gt
 8006c8c:	3b04      	subgt	r3, #4
 8006c8e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006c90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c92:	bfc8      	it	gt
 8006c94:	2400      	movgt	r4, #0
 8006c96:	f1a3 0302 	sub.w	r3, r3, #2
 8006c9a:	bfd8      	it	le
 8006c9c:	2401      	movle	r4, #1
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d864      	bhi.n	8006d6c <_dtoa_r+0x29c>
 8006ca2:	e8df f003 	tbb	[pc, r3]
 8006ca6:	382b      	.short	0x382b
 8006ca8:	5636      	.short	0x5636
 8006caa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006cae:	441e      	add	r6, r3
 8006cb0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	bfc1      	itttt	gt
 8006cb8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cbc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006cc0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006cc4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006cc8:	bfd6      	itet	le
 8006cca:	f1c3 0320 	rsble	r3, r3, #32
 8006cce:	ea48 0003 	orrgt.w	r0, r8, r3
 8006cd2:	fa04 f003 	lslle.w	r0, r4, r3
 8006cd6:	f7f9 fb85 	bl	80003e4 <__aeabi_ui2d>
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ce0:	3e01      	subs	r6, #1
 8006ce2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ce4:	e775      	b.n	8006bd2 <_dtoa_r+0x102>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e7b6      	b.n	8006c58 <_dtoa_r+0x188>
 8006cea:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006cec:	e7b5      	b.n	8006c5a <_dtoa_r+0x18a>
 8006cee:	427b      	negs	r3, r7
 8006cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	eba8 0807 	sub.w	r8, r8, r7
 8006cf8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cfa:	e7c2      	b.n	8006c82 <_dtoa_r+0x1b2>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dc35      	bgt.n	8006d72 <_dtoa_r+0x2a2>
 8006d06:	2301      	movs	r3, #1
 8006d08:	461a      	mov	r2, r3
 8006d0a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d0e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006d10:	e00b      	b.n	8006d2a <_dtoa_r+0x25a>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e7f3      	b.n	8006cfe <_dtoa_r+0x22e>
 8006d16:	2300      	movs	r3, #0
 8006d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	9308      	str	r3, [sp, #32]
 8006d20:	3301      	adds	r3, #1
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	9307      	str	r3, [sp, #28]
 8006d26:	bfb8      	it	lt
 8006d28:	2301      	movlt	r3, #1
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d32:	f102 0514 	add.w	r5, r2, #20
 8006d36:	429d      	cmp	r5, r3
 8006d38:	d91f      	bls.n	8006d7a <_dtoa_r+0x2aa>
 8006d3a:	6041      	str	r1, [r0, #4]
 8006d3c:	4658      	mov	r0, fp
 8006d3e:	f000 fd8d 	bl	800785c <_Balloc>
 8006d42:	4682      	mov	sl, r0
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d139      	bne.n	8006dbc <_dtoa_r+0x2ec>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006db8 <_dtoa_r+0x2e8>)
 8006d50:	e6d2      	b.n	8006af8 <_dtoa_r+0x28>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7e0      	b.n	8006d18 <_dtoa_r+0x248>
 8006d56:	2401      	movs	r4, #1
 8006d58:	2300      	movs	r3, #0
 8006d5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d5c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	2200      	movs	r2, #0
 8006d64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d68:	2312      	movs	r3, #18
 8006d6a:	e7d0      	b.n	8006d0e <_dtoa_r+0x23e>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d70:	e7f5      	b.n	8006d5e <_dtoa_r+0x28e>
 8006d72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d78:	e7d7      	b.n	8006d2a <_dtoa_r+0x25a>
 8006d7a:	3101      	adds	r1, #1
 8006d7c:	0052      	lsls	r2, r2, #1
 8006d7e:	e7d8      	b.n	8006d32 <_dtoa_r+0x262>
 8006d80:	636f4361 	.word	0x636f4361
 8006d84:	3fd287a7 	.word	0x3fd287a7
 8006d88:	8b60c8b3 	.word	0x8b60c8b3
 8006d8c:	3fc68a28 	.word	0x3fc68a28
 8006d90:	509f79fb 	.word	0x509f79fb
 8006d94:	3fd34413 	.word	0x3fd34413
 8006d98:	0800a0cd 	.word	0x0800a0cd
 8006d9c:	0800a0e4 	.word	0x0800a0e4
 8006da0:	7ff00000 	.word	0x7ff00000
 8006da4:	0800a0c9 	.word	0x0800a0c9
 8006da8:	0800a098 	.word	0x0800a098
 8006dac:	0800a097 	.word	0x0800a097
 8006db0:	3ff80000 	.word	0x3ff80000
 8006db4:	0800a1e0 	.word	0x0800a1e0
 8006db8:	0800a13c 	.word	0x0800a13c
 8006dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006dc0:	6018      	str	r0, [r3, #0]
 8006dc2:	9b07      	ldr	r3, [sp, #28]
 8006dc4:	2b0e      	cmp	r3, #14
 8006dc6:	f200 80a4 	bhi.w	8006f12 <_dtoa_r+0x442>
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	f000 80a1 	beq.w	8006f12 <_dtoa_r+0x442>
 8006dd0:	2f00      	cmp	r7, #0
 8006dd2:	dd33      	ble.n	8006e3c <_dtoa_r+0x36c>
 8006dd4:	4b86      	ldr	r3, [pc, #536]	@ (8006ff0 <_dtoa_r+0x520>)
 8006dd6:	f007 020f 	and.w	r2, r7, #15
 8006dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dde:	05f8      	lsls	r0, r7, #23
 8006de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006de4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006de8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006dec:	d516      	bpl.n	8006e1c <_dtoa_r+0x34c>
 8006dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006df2:	4b80      	ldr	r3, [pc, #512]	@ (8006ff4 <_dtoa_r+0x524>)
 8006df4:	2603      	movs	r6, #3
 8006df6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dfa:	f7f9 fc97 	bl	800072c <__aeabi_ddiv>
 8006dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e02:	f004 040f 	and.w	r4, r4, #15
 8006e06:	4d7b      	ldr	r5, [pc, #492]	@ (8006ff4 <_dtoa_r+0x524>)
 8006e08:	b954      	cbnz	r4, 8006e20 <_dtoa_r+0x350>
 8006e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e12:	f7f9 fc8b 	bl	800072c <__aeabi_ddiv>
 8006e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e1a:	e028      	b.n	8006e6e <_dtoa_r+0x39e>
 8006e1c:	2602      	movs	r6, #2
 8006e1e:	e7f2      	b.n	8006e06 <_dtoa_r+0x336>
 8006e20:	07e1      	lsls	r1, r4, #31
 8006e22:	d508      	bpl.n	8006e36 <_dtoa_r+0x366>
 8006e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e2c:	f7f9 fb54 	bl	80004d8 <__aeabi_dmul>
 8006e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e34:	3601      	adds	r6, #1
 8006e36:	1064      	asrs	r4, r4, #1
 8006e38:	3508      	adds	r5, #8
 8006e3a:	e7e5      	b.n	8006e08 <_dtoa_r+0x338>
 8006e3c:	f000 80d2 	beq.w	8006fe4 <_dtoa_r+0x514>
 8006e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e44:	427c      	negs	r4, r7
 8006e46:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff0 <_dtoa_r+0x520>)
 8006e48:	f004 020f 	and.w	r2, r4, #15
 8006e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 fb40 	bl	80004d8 <__aeabi_dmul>
 8006e58:	2602      	movs	r6, #2
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e60:	4d64      	ldr	r5, [pc, #400]	@ (8006ff4 <_dtoa_r+0x524>)
 8006e62:	1124      	asrs	r4, r4, #4
 8006e64:	2c00      	cmp	r4, #0
 8006e66:	f040 80b2 	bne.w	8006fce <_dtoa_r+0x4fe>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1d3      	bne.n	8006e16 <_dtoa_r+0x346>
 8006e6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80b7 	beq.w	8006fe8 <_dtoa_r+0x518>
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4b5d      	ldr	r3, [pc, #372]	@ (8006ff8 <_dtoa_r+0x528>)
 8006e82:	f7f9 fd9b 	bl	80009bc <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f000 80ae 	beq.w	8006fe8 <_dtoa_r+0x518>
 8006e8c:	9b07      	ldr	r3, [sp, #28]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80aa 	beq.w	8006fe8 <_dtoa_r+0x518>
 8006e94:	9b08      	ldr	r3, [sp, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	dd37      	ble.n	8006f0a <_dtoa_r+0x43a>
 8006e9a:	1e7b      	subs	r3, r7, #1
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	9304      	str	r3, [sp, #16]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4b55      	ldr	r3, [pc, #340]	@ (8006ffc <_dtoa_r+0x52c>)
 8006ea6:	f7f9 fb17 	bl	80004d8 <__aeabi_dmul>
 8006eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eae:	9c08      	ldr	r4, [sp, #32]
 8006eb0:	3601      	adds	r6, #1
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7f9 faa6 	bl	8000404 <__aeabi_i2d>
 8006eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ebc:	f7f9 fb0c 	bl	80004d8 <__aeabi_dmul>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8007000 <_dtoa_r+0x530>)
 8006ec4:	f7f9 f952 	bl	800016c <__adddf3>
 8006ec8:	4605      	mov	r5, r0
 8006eca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ece:	2c00      	cmp	r4, #0
 8006ed0:	f040 809a 	bne.w	8007008 <_dtoa_r+0x538>
 8006ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4b4a      	ldr	r3, [pc, #296]	@ (8007004 <_dtoa_r+0x534>)
 8006edc:	f7f9 f944 	bl	8000168 <__aeabi_dsub>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ee8:	462a      	mov	r2, r5
 8006eea:	4633      	mov	r3, r6
 8006eec:	f7f9 fd84 	bl	80009f8 <__aeabi_dcmpgt>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f040 828e 	bne.w	8007412 <_dtoa_r+0x942>
 8006ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efa:	462a      	mov	r2, r5
 8006efc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f00:	f7f9 fd5c 	bl	80009bc <__aeabi_dcmplt>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f040 8127 	bne.w	8007158 <_dtoa_r+0x688>
 8006f0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f2c0 8163 	blt.w	80071e0 <_dtoa_r+0x710>
 8006f1a:	2f0e      	cmp	r7, #14
 8006f1c:	f300 8160 	bgt.w	80071e0 <_dtoa_r+0x710>
 8006f20:	4b33      	ldr	r3, [pc, #204]	@ (8006ff0 <_dtoa_r+0x520>)
 8006f22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	da03      	bge.n	8006f3c <_dtoa_r+0x46c>
 8006f34:	9b07      	ldr	r3, [sp, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f340 8100 	ble.w	800713c <_dtoa_r+0x66c>
 8006f3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f40:	4656      	mov	r6, sl
 8006f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 fbef 	bl	800072c <__aeabi_ddiv>
 8006f4e:	f7f9 fd73 	bl	8000a38 <__aeabi_d2iz>
 8006f52:	4680      	mov	r8, r0
 8006f54:	f7f9 fa56 	bl	8000404 <__aeabi_i2d>
 8006f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f5c:	f7f9 fabc 	bl	80004d8 <__aeabi_dmul>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7f9 f8fe 	bl	8000168 <__aeabi_dsub>
 8006f6c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f70:	9d07      	ldr	r5, [sp, #28]
 8006f72:	f806 4b01 	strb.w	r4, [r6], #1
 8006f76:	eba6 040a 	sub.w	r4, r6, sl
 8006f7a:	42a5      	cmp	r5, r4
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	f040 8116 	bne.w	80071b0 <_dtoa_r+0x6e0>
 8006f84:	f7f9 f8f2 	bl	800016c <__adddf3>
 8006f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460d      	mov	r5, r1
 8006f90:	f7f9 fd32 	bl	80009f8 <__aeabi_dcmpgt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f040 80f8 	bne.w	800718a <_dtoa_r+0x6ba>
 8006f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8006fa6:	b118      	cbz	r0, 8006fb0 <_dtoa_r+0x4e0>
 8006fa8:	f018 0f01 	tst.w	r8, #1
 8006fac:	f040 80ed 	bne.w	800718a <_dtoa_r+0x6ba>
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4658      	mov	r0, fp
 8006fb4:	f000 fc92 	bl	80078dc <_Bfree>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	7033      	strb	r3, [r6, #0]
 8006fbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006fbe:	3701      	adds	r7, #1
 8006fc0:	601f      	str	r7, [r3, #0]
 8006fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8320 	beq.w	800760a <_dtoa_r+0xb3a>
 8006fca:	601e      	str	r6, [r3, #0]
 8006fcc:	e31d      	b.n	800760a <_dtoa_r+0xb3a>
 8006fce:	07e2      	lsls	r2, r4, #31
 8006fd0:	d505      	bpl.n	8006fde <_dtoa_r+0x50e>
 8006fd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fd6:	f7f9 fa7f 	bl	80004d8 <__aeabi_dmul>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	3601      	adds	r6, #1
 8006fde:	1064      	asrs	r4, r4, #1
 8006fe0:	3508      	adds	r5, #8
 8006fe2:	e73f      	b.n	8006e64 <_dtoa_r+0x394>
 8006fe4:	2602      	movs	r6, #2
 8006fe6:	e742      	b.n	8006e6e <_dtoa_r+0x39e>
 8006fe8:	9c07      	ldr	r4, [sp, #28]
 8006fea:	9704      	str	r7, [sp, #16]
 8006fec:	e761      	b.n	8006eb2 <_dtoa_r+0x3e2>
 8006fee:	bf00      	nop
 8006ff0:	0800a1e0 	.word	0x0800a1e0
 8006ff4:	0800a1b8 	.word	0x0800a1b8
 8006ff8:	3ff00000 	.word	0x3ff00000
 8006ffc:	40240000 	.word	0x40240000
 8007000:	401c0000 	.word	0x401c0000
 8007004:	40140000 	.word	0x40140000
 8007008:	4b70      	ldr	r3, [pc, #448]	@ (80071cc <_dtoa_r+0x6fc>)
 800700a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800700c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007014:	4454      	add	r4, sl
 8007016:	2900      	cmp	r1, #0
 8007018:	d045      	beq.n	80070a6 <_dtoa_r+0x5d6>
 800701a:	2000      	movs	r0, #0
 800701c:	496c      	ldr	r1, [pc, #432]	@ (80071d0 <_dtoa_r+0x700>)
 800701e:	f7f9 fb85 	bl	800072c <__aeabi_ddiv>
 8007022:	4633      	mov	r3, r6
 8007024:	462a      	mov	r2, r5
 8007026:	f7f9 f89f 	bl	8000168 <__aeabi_dsub>
 800702a:	4656      	mov	r6, sl
 800702c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007034:	f7f9 fd00 	bl	8000a38 <__aeabi_d2iz>
 8007038:	4605      	mov	r5, r0
 800703a:	f7f9 f9e3 	bl	8000404 <__aeabi_i2d>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007046:	f7f9 f88f 	bl	8000168 <__aeabi_dsub>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	3530      	adds	r5, #48	@ 0x30
 8007050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007054:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007058:	f806 5b01 	strb.w	r5, [r6], #1
 800705c:	f7f9 fcae 	bl	80009bc <__aeabi_dcmplt>
 8007060:	2800      	cmp	r0, #0
 8007062:	d163      	bne.n	800712c <_dtoa_r+0x65c>
 8007064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007068:	2000      	movs	r0, #0
 800706a:	495a      	ldr	r1, [pc, #360]	@ (80071d4 <_dtoa_r+0x704>)
 800706c:	f7f9 f87c 	bl	8000168 <__aeabi_dsub>
 8007070:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007074:	f7f9 fca2 	bl	80009bc <__aeabi_dcmplt>
 8007078:	2800      	cmp	r0, #0
 800707a:	f040 8087 	bne.w	800718c <_dtoa_r+0x6bc>
 800707e:	42a6      	cmp	r6, r4
 8007080:	f43f af43 	beq.w	8006f0a <_dtoa_r+0x43a>
 8007084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007088:	2200      	movs	r2, #0
 800708a:	4b53      	ldr	r3, [pc, #332]	@ (80071d8 <_dtoa_r+0x708>)
 800708c:	f7f9 fa24 	bl	80004d8 <__aeabi_dmul>
 8007090:	2200      	movs	r2, #0
 8007092:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800709a:	4b4f      	ldr	r3, [pc, #316]	@ (80071d8 <_dtoa_r+0x708>)
 800709c:	f7f9 fa1c 	bl	80004d8 <__aeabi_dmul>
 80070a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070a4:	e7c4      	b.n	8007030 <_dtoa_r+0x560>
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7f9 fa15 	bl	80004d8 <__aeabi_dmul>
 80070ae:	4656      	mov	r6, sl
 80070b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80070b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ba:	f7f9 fcbd 	bl	8000a38 <__aeabi_d2iz>
 80070be:	4605      	mov	r5, r0
 80070c0:	f7f9 f9a0 	bl	8000404 <__aeabi_i2d>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070cc:	f7f9 f84c 	bl	8000168 <__aeabi_dsub>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	3530      	adds	r5, #48	@ 0x30
 80070d6:	f806 5b01 	strb.w	r5, [r6], #1
 80070da:	42a6      	cmp	r6, r4
 80070dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	d124      	bne.n	8007130 <_dtoa_r+0x660>
 80070e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070ea:	4b39      	ldr	r3, [pc, #228]	@ (80071d0 <_dtoa_r+0x700>)
 80070ec:	f7f9 f83e 	bl	800016c <__adddf3>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f8:	f7f9 fc7e 	bl	80009f8 <__aeabi_dcmpgt>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d145      	bne.n	800718c <_dtoa_r+0x6bc>
 8007100:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007104:	2000      	movs	r0, #0
 8007106:	4932      	ldr	r1, [pc, #200]	@ (80071d0 <_dtoa_r+0x700>)
 8007108:	f7f9 f82e 	bl	8000168 <__aeabi_dsub>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007114:	f7f9 fc52 	bl	80009bc <__aeabi_dcmplt>
 8007118:	2800      	cmp	r0, #0
 800711a:	f43f aef6 	beq.w	8006f0a <_dtoa_r+0x43a>
 800711e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007120:	1e73      	subs	r3, r6, #1
 8007122:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007124:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007128:	2b30      	cmp	r3, #48	@ 0x30
 800712a:	d0f8      	beq.n	800711e <_dtoa_r+0x64e>
 800712c:	9f04      	ldr	r7, [sp, #16]
 800712e:	e73f      	b.n	8006fb0 <_dtoa_r+0x4e0>
 8007130:	4b29      	ldr	r3, [pc, #164]	@ (80071d8 <_dtoa_r+0x708>)
 8007132:	f7f9 f9d1 	bl	80004d8 <__aeabi_dmul>
 8007136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800713a:	e7bc      	b.n	80070b6 <_dtoa_r+0x5e6>
 800713c:	d10c      	bne.n	8007158 <_dtoa_r+0x688>
 800713e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007142:	2200      	movs	r2, #0
 8007144:	4b25      	ldr	r3, [pc, #148]	@ (80071dc <_dtoa_r+0x70c>)
 8007146:	f7f9 f9c7 	bl	80004d8 <__aeabi_dmul>
 800714a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800714e:	f7f9 fc49 	bl	80009e4 <__aeabi_dcmpge>
 8007152:	2800      	cmp	r0, #0
 8007154:	f000 815b 	beq.w	800740e <_dtoa_r+0x93e>
 8007158:	2400      	movs	r4, #0
 800715a:	4625      	mov	r5, r4
 800715c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800715e:	4656      	mov	r6, sl
 8007160:	43db      	mvns	r3, r3
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	2700      	movs	r7, #0
 8007166:	4621      	mov	r1, r4
 8007168:	4658      	mov	r0, fp
 800716a:	f000 fbb7 	bl	80078dc <_Bfree>
 800716e:	2d00      	cmp	r5, #0
 8007170:	d0dc      	beq.n	800712c <_dtoa_r+0x65c>
 8007172:	b12f      	cbz	r7, 8007180 <_dtoa_r+0x6b0>
 8007174:	42af      	cmp	r7, r5
 8007176:	d003      	beq.n	8007180 <_dtoa_r+0x6b0>
 8007178:	4639      	mov	r1, r7
 800717a:	4658      	mov	r0, fp
 800717c:	f000 fbae 	bl	80078dc <_Bfree>
 8007180:	4629      	mov	r1, r5
 8007182:	4658      	mov	r0, fp
 8007184:	f000 fbaa 	bl	80078dc <_Bfree>
 8007188:	e7d0      	b.n	800712c <_dtoa_r+0x65c>
 800718a:	9704      	str	r7, [sp, #16]
 800718c:	4633      	mov	r3, r6
 800718e:	461e      	mov	r6, r3
 8007190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007194:	2a39      	cmp	r2, #57	@ 0x39
 8007196:	d107      	bne.n	80071a8 <_dtoa_r+0x6d8>
 8007198:	459a      	cmp	sl, r3
 800719a:	d1f8      	bne.n	800718e <_dtoa_r+0x6be>
 800719c:	9a04      	ldr	r2, [sp, #16]
 800719e:	3201      	adds	r2, #1
 80071a0:	9204      	str	r2, [sp, #16]
 80071a2:	2230      	movs	r2, #48	@ 0x30
 80071a4:	f88a 2000 	strb.w	r2, [sl]
 80071a8:	781a      	ldrb	r2, [r3, #0]
 80071aa:	3201      	adds	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e7bd      	b.n	800712c <_dtoa_r+0x65c>
 80071b0:	2200      	movs	r2, #0
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <_dtoa_r+0x708>)
 80071b4:	f7f9 f990 	bl	80004d8 <__aeabi_dmul>
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	4604      	mov	r4, r0
 80071be:	460d      	mov	r5, r1
 80071c0:	f7f9 fbf2 	bl	80009a8 <__aeabi_dcmpeq>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f43f aebc 	beq.w	8006f42 <_dtoa_r+0x472>
 80071ca:	e6f1      	b.n	8006fb0 <_dtoa_r+0x4e0>
 80071cc:	0800a1e0 	.word	0x0800a1e0
 80071d0:	3fe00000 	.word	0x3fe00000
 80071d4:	3ff00000 	.word	0x3ff00000
 80071d8:	40240000 	.word	0x40240000
 80071dc:	40140000 	.word	0x40140000
 80071e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	f000 80db 	beq.w	800739e <_dtoa_r+0x8ce>
 80071e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80071ea:	2a01      	cmp	r2, #1
 80071ec:	f300 80bf 	bgt.w	800736e <_dtoa_r+0x89e>
 80071f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	f000 80b7 	beq.w	8007366 <_dtoa_r+0x896>
 80071f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80071fc:	4646      	mov	r6, r8
 80071fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007202:	2101      	movs	r1, #1
 8007204:	441a      	add	r2, r3
 8007206:	4658      	mov	r0, fp
 8007208:	4498      	add	r8, r3
 800720a:	9209      	str	r2, [sp, #36]	@ 0x24
 800720c:	f000 fc64 	bl	8007ad8 <__i2b>
 8007210:	4605      	mov	r5, r0
 8007212:	b15e      	cbz	r6, 800722c <_dtoa_r+0x75c>
 8007214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	dd08      	ble.n	800722c <_dtoa_r+0x75c>
 800721a:	42b3      	cmp	r3, r6
 800721c:	bfa8      	it	ge
 800721e:	4633      	movge	r3, r6
 8007220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007222:	eba8 0803 	sub.w	r8, r8, r3
 8007226:	1af6      	subs	r6, r6, r3
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	9309      	str	r3, [sp, #36]	@ 0x24
 800722c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722e:	b1f3      	cbz	r3, 800726e <_dtoa_r+0x79e>
 8007230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80b7 	beq.w	80073a6 <_dtoa_r+0x8d6>
 8007238:	b18c      	cbz	r4, 800725e <_dtoa_r+0x78e>
 800723a:	4629      	mov	r1, r5
 800723c:	4622      	mov	r2, r4
 800723e:	4658      	mov	r0, fp
 8007240:	f000 fd08 	bl	8007c54 <__pow5mult>
 8007244:	464a      	mov	r2, r9
 8007246:	4601      	mov	r1, r0
 8007248:	4605      	mov	r5, r0
 800724a:	4658      	mov	r0, fp
 800724c:	f000 fc5a 	bl	8007b04 <__multiply>
 8007250:	4649      	mov	r1, r9
 8007252:	9004      	str	r0, [sp, #16]
 8007254:	4658      	mov	r0, fp
 8007256:	f000 fb41 	bl	80078dc <_Bfree>
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	4699      	mov	r9, r3
 800725e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007260:	1b1a      	subs	r2, r3, r4
 8007262:	d004      	beq.n	800726e <_dtoa_r+0x79e>
 8007264:	4649      	mov	r1, r9
 8007266:	4658      	mov	r0, fp
 8007268:	f000 fcf4 	bl	8007c54 <__pow5mult>
 800726c:	4681      	mov	r9, r0
 800726e:	2101      	movs	r1, #1
 8007270:	4658      	mov	r0, fp
 8007272:	f000 fc31 	bl	8007ad8 <__i2b>
 8007276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007278:	4604      	mov	r4, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 81c9 	beq.w	8007612 <_dtoa_r+0xb42>
 8007280:	461a      	mov	r2, r3
 8007282:	4601      	mov	r1, r0
 8007284:	4658      	mov	r0, fp
 8007286:	f000 fce5 	bl	8007c54 <__pow5mult>
 800728a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800728c:	4604      	mov	r4, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	f300 808f 	bgt.w	80073b2 <_dtoa_r+0x8e2>
 8007294:	9b02      	ldr	r3, [sp, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 8087 	bne.w	80073aa <_dtoa_r+0x8da>
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f040 8083 	bne.w	80073ae <_dtoa_r+0x8de>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072ae:	0d1b      	lsrs	r3, r3, #20
 80072b0:	051b      	lsls	r3, r3, #20
 80072b2:	b12b      	cbz	r3, 80072c0 <_dtoa_r+0x7f0>
 80072b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b6:	f108 0801 	add.w	r8, r8, #1
 80072ba:	3301      	adds	r3, #1
 80072bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80072be:	2301      	movs	r3, #1
 80072c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 81aa 	beq.w	800761e <_dtoa_r+0xb4e>
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072d0:	6918      	ldr	r0, [r3, #16]
 80072d2:	f000 fbb5 	bl	8007a40 <__hi0bits>
 80072d6:	f1c0 0020 	rsb	r0, r0, #32
 80072da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072dc:	4418      	add	r0, r3
 80072de:	f010 001f 	ands.w	r0, r0, #31
 80072e2:	d071      	beq.n	80073c8 <_dtoa_r+0x8f8>
 80072e4:	f1c0 0320 	rsb	r3, r0, #32
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	dd65      	ble.n	80073b8 <_dtoa_r+0x8e8>
 80072ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ee:	f1c0 001c 	rsb	r0, r0, #28
 80072f2:	4403      	add	r3, r0
 80072f4:	4480      	add	r8, r0
 80072f6:	4406      	add	r6, r0
 80072f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072fa:	f1b8 0f00 	cmp.w	r8, #0
 80072fe:	dd05      	ble.n	800730c <_dtoa_r+0x83c>
 8007300:	4649      	mov	r1, r9
 8007302:	4642      	mov	r2, r8
 8007304:	4658      	mov	r0, fp
 8007306:	f000 fcff 	bl	8007d08 <__lshift>
 800730a:	4681      	mov	r9, r0
 800730c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd05      	ble.n	800731e <_dtoa_r+0x84e>
 8007312:	4621      	mov	r1, r4
 8007314:	461a      	mov	r2, r3
 8007316:	4658      	mov	r0, fp
 8007318:	f000 fcf6 	bl	8007d08 <__lshift>
 800731c:	4604      	mov	r4, r0
 800731e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d053      	beq.n	80073cc <_dtoa_r+0x8fc>
 8007324:	4621      	mov	r1, r4
 8007326:	4648      	mov	r0, r9
 8007328:	f000 fd5a 	bl	8007de0 <__mcmp>
 800732c:	2800      	cmp	r0, #0
 800732e:	da4d      	bge.n	80073cc <_dtoa_r+0x8fc>
 8007330:	1e7b      	subs	r3, r7, #1
 8007332:	4649      	mov	r1, r9
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	220a      	movs	r2, #10
 8007338:	2300      	movs	r3, #0
 800733a:	4658      	mov	r0, fp
 800733c:	f000 faf0 	bl	8007920 <__multadd>
 8007340:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007342:	4681      	mov	r9, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 816c 	beq.w	8007622 <_dtoa_r+0xb52>
 800734a:	2300      	movs	r3, #0
 800734c:	4629      	mov	r1, r5
 800734e:	220a      	movs	r2, #10
 8007350:	4658      	mov	r0, fp
 8007352:	f000 fae5 	bl	8007920 <__multadd>
 8007356:	9b08      	ldr	r3, [sp, #32]
 8007358:	4605      	mov	r5, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	dc61      	bgt.n	8007422 <_dtoa_r+0x952>
 800735e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007360:	2b02      	cmp	r3, #2
 8007362:	dc3b      	bgt.n	80073dc <_dtoa_r+0x90c>
 8007364:	e05d      	b.n	8007422 <_dtoa_r+0x952>
 8007366:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007368:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800736c:	e746      	b.n	80071fc <_dtoa_r+0x72c>
 800736e:	9b07      	ldr	r3, [sp, #28]
 8007370:	1e5c      	subs	r4, r3, #1
 8007372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007374:	42a3      	cmp	r3, r4
 8007376:	bfbf      	itttt	lt
 8007378:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800737a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800737c:	1ae3      	sublt	r3, r4, r3
 800737e:	18d2      	addlt	r2, r2, r3
 8007380:	bfa8      	it	ge
 8007382:	1b1c      	subge	r4, r3, r4
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	bfbe      	ittt	lt
 8007388:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800738a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800738c:	2400      	movlt	r4, #0
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfb5      	itete	lt
 8007392:	eba8 0603 	sublt.w	r6, r8, r3
 8007396:	4646      	movge	r6, r8
 8007398:	2300      	movlt	r3, #0
 800739a:	9b07      	ldrge	r3, [sp, #28]
 800739c:	e730      	b.n	8007200 <_dtoa_r+0x730>
 800739e:	4646      	mov	r6, r8
 80073a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80073a4:	e735      	b.n	8007212 <_dtoa_r+0x742>
 80073a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073a8:	e75c      	b.n	8007264 <_dtoa_r+0x794>
 80073aa:	2300      	movs	r3, #0
 80073ac:	e788      	b.n	80072c0 <_dtoa_r+0x7f0>
 80073ae:	9b02      	ldr	r3, [sp, #8]
 80073b0:	e786      	b.n	80072c0 <_dtoa_r+0x7f0>
 80073b2:	2300      	movs	r3, #0
 80073b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b6:	e788      	b.n	80072ca <_dtoa_r+0x7fa>
 80073b8:	d09f      	beq.n	80072fa <_dtoa_r+0x82a>
 80073ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073bc:	331c      	adds	r3, #28
 80073be:	441a      	add	r2, r3
 80073c0:	4498      	add	r8, r3
 80073c2:	441e      	add	r6, r3
 80073c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80073c6:	e798      	b.n	80072fa <_dtoa_r+0x82a>
 80073c8:	4603      	mov	r3, r0
 80073ca:	e7f6      	b.n	80073ba <_dtoa_r+0x8ea>
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	9704      	str	r7, [sp, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dc20      	bgt.n	8007416 <_dtoa_r+0x946>
 80073d4:	9308      	str	r3, [sp, #32]
 80073d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073d8:	2b02      	cmp	r3, #2
 80073da:	dd1e      	ble.n	800741a <_dtoa_r+0x94a>
 80073dc:	9b08      	ldr	r3, [sp, #32]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f47f aebc 	bne.w	800715c <_dtoa_r+0x68c>
 80073e4:	4621      	mov	r1, r4
 80073e6:	2205      	movs	r2, #5
 80073e8:	4658      	mov	r0, fp
 80073ea:	f000 fa99 	bl	8007920 <__multadd>
 80073ee:	4601      	mov	r1, r0
 80073f0:	4604      	mov	r4, r0
 80073f2:	4648      	mov	r0, r9
 80073f4:	f000 fcf4 	bl	8007de0 <__mcmp>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f77f aeaf 	ble.w	800715c <_dtoa_r+0x68c>
 80073fe:	2331      	movs	r3, #49	@ 0x31
 8007400:	4656      	mov	r6, sl
 8007402:	f806 3b01 	strb.w	r3, [r6], #1
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	3301      	adds	r3, #1
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	e6aa      	b.n	8007164 <_dtoa_r+0x694>
 800740e:	9c07      	ldr	r4, [sp, #28]
 8007410:	9704      	str	r7, [sp, #16]
 8007412:	4625      	mov	r5, r4
 8007414:	e7f3      	b.n	80073fe <_dtoa_r+0x92e>
 8007416:	9b07      	ldr	r3, [sp, #28]
 8007418:	9308      	str	r3, [sp, #32]
 800741a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8104 	beq.w	800762a <_dtoa_r+0xb5a>
 8007422:	2e00      	cmp	r6, #0
 8007424:	dd05      	ble.n	8007432 <_dtoa_r+0x962>
 8007426:	4629      	mov	r1, r5
 8007428:	4632      	mov	r2, r6
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fc6c 	bl	8007d08 <__lshift>
 8007430:	4605      	mov	r5, r0
 8007432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007434:	2b00      	cmp	r3, #0
 8007436:	d05a      	beq.n	80074ee <_dtoa_r+0xa1e>
 8007438:	4658      	mov	r0, fp
 800743a:	6869      	ldr	r1, [r5, #4]
 800743c:	f000 fa0e 	bl	800785c <_Balloc>
 8007440:	4606      	mov	r6, r0
 8007442:	b928      	cbnz	r0, 8007450 <_dtoa_r+0x980>
 8007444:	4602      	mov	r2, r0
 8007446:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800744a:	4b83      	ldr	r3, [pc, #524]	@ (8007658 <_dtoa_r+0xb88>)
 800744c:	f7ff bb54 	b.w	8006af8 <_dtoa_r+0x28>
 8007450:	692a      	ldr	r2, [r5, #16]
 8007452:	f105 010c 	add.w	r1, r5, #12
 8007456:	3202      	adds	r2, #2
 8007458:	0092      	lsls	r2, r2, #2
 800745a:	300c      	adds	r0, #12
 800745c:	f001 fee2 	bl	8009224 <memcpy>
 8007460:	2201      	movs	r2, #1
 8007462:	4631      	mov	r1, r6
 8007464:	4658      	mov	r0, fp
 8007466:	f000 fc4f 	bl	8007d08 <__lshift>
 800746a:	462f      	mov	r7, r5
 800746c:	4605      	mov	r5, r0
 800746e:	f10a 0301 	add.w	r3, sl, #1
 8007472:	9307      	str	r3, [sp, #28]
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	4453      	add	r3, sl
 8007478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800747a:	9b02      	ldr	r3, [sp, #8]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	930a      	str	r3, [sp, #40]	@ 0x28
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	4621      	mov	r1, r4
 8007486:	3b01      	subs	r3, #1
 8007488:	4648      	mov	r0, r9
 800748a:	9302      	str	r3, [sp, #8]
 800748c:	f7ff fa96 	bl	80069bc <quorem>
 8007490:	4639      	mov	r1, r7
 8007492:	9008      	str	r0, [sp, #32]
 8007494:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007498:	4648      	mov	r0, r9
 800749a:	f000 fca1 	bl	8007de0 <__mcmp>
 800749e:	462a      	mov	r2, r5
 80074a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80074a2:	4621      	mov	r1, r4
 80074a4:	4658      	mov	r0, fp
 80074a6:	f000 fcb7 	bl	8007e18 <__mdiff>
 80074aa:	68c2      	ldr	r2, [r0, #12]
 80074ac:	4606      	mov	r6, r0
 80074ae:	bb02      	cbnz	r2, 80074f2 <_dtoa_r+0xa22>
 80074b0:	4601      	mov	r1, r0
 80074b2:	4648      	mov	r0, r9
 80074b4:	f000 fc94 	bl	8007de0 <__mcmp>
 80074b8:	4602      	mov	r2, r0
 80074ba:	4631      	mov	r1, r6
 80074bc:	4658      	mov	r0, fp
 80074be:	920c      	str	r2, [sp, #48]	@ 0x30
 80074c0:	f000 fa0c 	bl	80078dc <_Bfree>
 80074c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80074c8:	9e07      	ldr	r6, [sp, #28]
 80074ca:	ea43 0102 	orr.w	r1, r3, r2
 80074ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d0:	4319      	orrs	r1, r3
 80074d2:	d110      	bne.n	80074f6 <_dtoa_r+0xa26>
 80074d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074d8:	d029      	beq.n	800752e <_dtoa_r+0xa5e>
 80074da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dd02      	ble.n	80074e6 <_dtoa_r+0xa16>
 80074e0:	9b08      	ldr	r3, [sp, #32]
 80074e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	f883 8000 	strb.w	r8, [r3]
 80074ec:	e63b      	b.n	8007166 <_dtoa_r+0x696>
 80074ee:	4628      	mov	r0, r5
 80074f0:	e7bb      	b.n	800746a <_dtoa_r+0x99a>
 80074f2:	2201      	movs	r2, #1
 80074f4:	e7e1      	b.n	80074ba <_dtoa_r+0x9ea>
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	db04      	blt.n	8007506 <_dtoa_r+0xa36>
 80074fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80074fe:	430b      	orrs	r3, r1
 8007500:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007502:	430b      	orrs	r3, r1
 8007504:	d120      	bne.n	8007548 <_dtoa_r+0xa78>
 8007506:	2a00      	cmp	r2, #0
 8007508:	dded      	ble.n	80074e6 <_dtoa_r+0xa16>
 800750a:	4649      	mov	r1, r9
 800750c:	2201      	movs	r2, #1
 800750e:	4658      	mov	r0, fp
 8007510:	f000 fbfa 	bl	8007d08 <__lshift>
 8007514:	4621      	mov	r1, r4
 8007516:	4681      	mov	r9, r0
 8007518:	f000 fc62 	bl	8007de0 <__mcmp>
 800751c:	2800      	cmp	r0, #0
 800751e:	dc03      	bgt.n	8007528 <_dtoa_r+0xa58>
 8007520:	d1e1      	bne.n	80074e6 <_dtoa_r+0xa16>
 8007522:	f018 0f01 	tst.w	r8, #1
 8007526:	d0de      	beq.n	80074e6 <_dtoa_r+0xa16>
 8007528:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800752c:	d1d8      	bne.n	80074e0 <_dtoa_r+0xa10>
 800752e:	2339      	movs	r3, #57	@ 0x39
 8007530:	9a02      	ldr	r2, [sp, #8]
 8007532:	7013      	strb	r3, [r2, #0]
 8007534:	4633      	mov	r3, r6
 8007536:	461e      	mov	r6, r3
 8007538:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800753c:	3b01      	subs	r3, #1
 800753e:	2a39      	cmp	r2, #57	@ 0x39
 8007540:	d052      	beq.n	80075e8 <_dtoa_r+0xb18>
 8007542:	3201      	adds	r2, #1
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	e60e      	b.n	8007166 <_dtoa_r+0x696>
 8007548:	2a00      	cmp	r2, #0
 800754a:	dd07      	ble.n	800755c <_dtoa_r+0xa8c>
 800754c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007550:	d0ed      	beq.n	800752e <_dtoa_r+0xa5e>
 8007552:	9a02      	ldr	r2, [sp, #8]
 8007554:	f108 0301 	add.w	r3, r8, #1
 8007558:	7013      	strb	r3, [r2, #0]
 800755a:	e604      	b.n	8007166 <_dtoa_r+0x696>
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	9a07      	ldr	r2, [sp, #28]
 8007560:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007566:	4293      	cmp	r3, r2
 8007568:	d028      	beq.n	80075bc <_dtoa_r+0xaec>
 800756a:	4649      	mov	r1, r9
 800756c:	2300      	movs	r3, #0
 800756e:	220a      	movs	r2, #10
 8007570:	4658      	mov	r0, fp
 8007572:	f000 f9d5 	bl	8007920 <__multadd>
 8007576:	42af      	cmp	r7, r5
 8007578:	4681      	mov	r9, r0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	f04f 020a 	mov.w	r2, #10
 8007582:	4639      	mov	r1, r7
 8007584:	4658      	mov	r0, fp
 8007586:	d107      	bne.n	8007598 <_dtoa_r+0xac8>
 8007588:	f000 f9ca 	bl	8007920 <__multadd>
 800758c:	4607      	mov	r7, r0
 800758e:	4605      	mov	r5, r0
 8007590:	9b07      	ldr	r3, [sp, #28]
 8007592:	3301      	adds	r3, #1
 8007594:	9307      	str	r3, [sp, #28]
 8007596:	e774      	b.n	8007482 <_dtoa_r+0x9b2>
 8007598:	f000 f9c2 	bl	8007920 <__multadd>
 800759c:	4629      	mov	r1, r5
 800759e:	4607      	mov	r7, r0
 80075a0:	2300      	movs	r3, #0
 80075a2:	220a      	movs	r2, #10
 80075a4:	4658      	mov	r0, fp
 80075a6:	f000 f9bb 	bl	8007920 <__multadd>
 80075aa:	4605      	mov	r5, r0
 80075ac:	e7f0      	b.n	8007590 <_dtoa_r+0xac0>
 80075ae:	9b08      	ldr	r3, [sp, #32]
 80075b0:	2700      	movs	r7, #0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bfcc      	ite	gt
 80075b6:	461e      	movgt	r6, r3
 80075b8:	2601      	movle	r6, #1
 80075ba:	4456      	add	r6, sl
 80075bc:	4649      	mov	r1, r9
 80075be:	2201      	movs	r2, #1
 80075c0:	4658      	mov	r0, fp
 80075c2:	f000 fba1 	bl	8007d08 <__lshift>
 80075c6:	4621      	mov	r1, r4
 80075c8:	4681      	mov	r9, r0
 80075ca:	f000 fc09 	bl	8007de0 <__mcmp>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	dcb0      	bgt.n	8007534 <_dtoa_r+0xa64>
 80075d2:	d102      	bne.n	80075da <_dtoa_r+0xb0a>
 80075d4:	f018 0f01 	tst.w	r8, #1
 80075d8:	d1ac      	bne.n	8007534 <_dtoa_r+0xa64>
 80075da:	4633      	mov	r3, r6
 80075dc:	461e      	mov	r6, r3
 80075de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e2:	2a30      	cmp	r2, #48	@ 0x30
 80075e4:	d0fa      	beq.n	80075dc <_dtoa_r+0xb0c>
 80075e6:	e5be      	b.n	8007166 <_dtoa_r+0x696>
 80075e8:	459a      	cmp	sl, r3
 80075ea:	d1a4      	bne.n	8007536 <_dtoa_r+0xa66>
 80075ec:	9b04      	ldr	r3, [sp, #16]
 80075ee:	3301      	adds	r3, #1
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	2331      	movs	r3, #49	@ 0x31
 80075f4:	f88a 3000 	strb.w	r3, [sl]
 80075f8:	e5b5      	b.n	8007166 <_dtoa_r+0x696>
 80075fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80075fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800765c <_dtoa_r+0xb8c>
 8007600:	b11b      	cbz	r3, 800760a <_dtoa_r+0xb3a>
 8007602:	f10a 0308 	add.w	r3, sl, #8
 8007606:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	4650      	mov	r0, sl
 800760c:	b017      	add	sp, #92	@ 0x5c
 800760e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007612:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007614:	2b01      	cmp	r3, #1
 8007616:	f77f ae3d 	ble.w	8007294 <_dtoa_r+0x7c4>
 800761a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800761c:	930a      	str	r3, [sp, #40]	@ 0x28
 800761e:	2001      	movs	r0, #1
 8007620:	e65b      	b.n	80072da <_dtoa_r+0x80a>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f77f aed6 	ble.w	80073d6 <_dtoa_r+0x906>
 800762a:	4656      	mov	r6, sl
 800762c:	4621      	mov	r1, r4
 800762e:	4648      	mov	r0, r9
 8007630:	f7ff f9c4 	bl	80069bc <quorem>
 8007634:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007638:	9b08      	ldr	r3, [sp, #32]
 800763a:	f806 8b01 	strb.w	r8, [r6], #1
 800763e:	eba6 020a 	sub.w	r2, r6, sl
 8007642:	4293      	cmp	r3, r2
 8007644:	ddb3      	ble.n	80075ae <_dtoa_r+0xade>
 8007646:	4649      	mov	r1, r9
 8007648:	2300      	movs	r3, #0
 800764a:	220a      	movs	r2, #10
 800764c:	4658      	mov	r0, fp
 800764e:	f000 f967 	bl	8007920 <__multadd>
 8007652:	4681      	mov	r9, r0
 8007654:	e7ea      	b.n	800762c <_dtoa_r+0xb5c>
 8007656:	bf00      	nop
 8007658:	0800a13c 	.word	0x0800a13c
 800765c:	0800a0c0 	.word	0x0800a0c0

08007660 <_free_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4605      	mov	r5, r0
 8007664:	2900      	cmp	r1, #0
 8007666:	d040      	beq.n	80076ea <_free_r+0x8a>
 8007668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766c:	1f0c      	subs	r4, r1, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfb8      	it	lt
 8007672:	18e4      	addlt	r4, r4, r3
 8007674:	f000 f8e6 	bl	8007844 <__malloc_lock>
 8007678:	4a1c      	ldr	r2, [pc, #112]	@ (80076ec <_free_r+0x8c>)
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	b933      	cbnz	r3, 800768c <_free_r+0x2c>
 800767e:	6063      	str	r3, [r4, #4]
 8007680:	6014      	str	r4, [r2, #0]
 8007682:	4628      	mov	r0, r5
 8007684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007688:	f000 b8e2 	b.w	8007850 <__malloc_unlock>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d908      	bls.n	80076a2 <_free_r+0x42>
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	1821      	adds	r1, r4, r0
 8007694:	428b      	cmp	r3, r1
 8007696:	bf01      	itttt	eq
 8007698:	6819      	ldreq	r1, [r3, #0]
 800769a:	685b      	ldreq	r3, [r3, #4]
 800769c:	1809      	addeq	r1, r1, r0
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	e7ed      	b.n	800767e <_free_r+0x1e>
 80076a2:	461a      	mov	r2, r3
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b10b      	cbz	r3, 80076ac <_free_r+0x4c>
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d9fa      	bls.n	80076a2 <_free_r+0x42>
 80076ac:	6811      	ldr	r1, [r2, #0]
 80076ae:	1850      	adds	r0, r2, r1
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d10b      	bne.n	80076cc <_free_r+0x6c>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	4401      	add	r1, r0
 80076b8:	1850      	adds	r0, r2, r1
 80076ba:	4283      	cmp	r3, r0
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	d1e0      	bne.n	8007682 <_free_r+0x22>
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4408      	add	r0, r1
 80076c6:	6010      	str	r0, [r2, #0]
 80076c8:	6053      	str	r3, [r2, #4]
 80076ca:	e7da      	b.n	8007682 <_free_r+0x22>
 80076cc:	d902      	bls.n	80076d4 <_free_r+0x74>
 80076ce:	230c      	movs	r3, #12
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	e7d6      	b.n	8007682 <_free_r+0x22>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	1821      	adds	r1, r4, r0
 80076d8:	428b      	cmp	r3, r1
 80076da:	bf01      	itttt	eq
 80076dc:	6819      	ldreq	r1, [r3, #0]
 80076de:	685b      	ldreq	r3, [r3, #4]
 80076e0:	1809      	addeq	r1, r1, r0
 80076e2:	6021      	streq	r1, [r4, #0]
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	6054      	str	r4, [r2, #4]
 80076e8:	e7cb      	b.n	8007682 <_free_r+0x22>
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20002498 	.word	0x20002498

080076f0 <malloc>:
 80076f0:	4b02      	ldr	r3, [pc, #8]	@ (80076fc <malloc+0xc>)
 80076f2:	4601      	mov	r1, r0
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	f000 b825 	b.w	8007744 <_malloc_r>
 80076fa:	bf00      	nop
 80076fc:	20000020 	.word	0x20000020

08007700 <sbrk_aligned>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	4e0f      	ldr	r6, [pc, #60]	@ (8007740 <sbrk_aligned+0x40>)
 8007704:	460c      	mov	r4, r1
 8007706:	6831      	ldr	r1, [r6, #0]
 8007708:	4605      	mov	r5, r0
 800770a:	b911      	cbnz	r1, 8007712 <sbrk_aligned+0x12>
 800770c:	f001 fd7a 	bl	8009204 <_sbrk_r>
 8007710:	6030      	str	r0, [r6, #0]
 8007712:	4621      	mov	r1, r4
 8007714:	4628      	mov	r0, r5
 8007716:	f001 fd75 	bl	8009204 <_sbrk_r>
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	d103      	bne.n	8007726 <sbrk_aligned+0x26>
 800771e:	f04f 34ff 	mov.w	r4, #4294967295
 8007722:	4620      	mov	r0, r4
 8007724:	bd70      	pop	{r4, r5, r6, pc}
 8007726:	1cc4      	adds	r4, r0, #3
 8007728:	f024 0403 	bic.w	r4, r4, #3
 800772c:	42a0      	cmp	r0, r4
 800772e:	d0f8      	beq.n	8007722 <sbrk_aligned+0x22>
 8007730:	1a21      	subs	r1, r4, r0
 8007732:	4628      	mov	r0, r5
 8007734:	f001 fd66 	bl	8009204 <_sbrk_r>
 8007738:	3001      	adds	r0, #1
 800773a:	d1f2      	bne.n	8007722 <sbrk_aligned+0x22>
 800773c:	e7ef      	b.n	800771e <sbrk_aligned+0x1e>
 800773e:	bf00      	nop
 8007740:	20002494 	.word	0x20002494

08007744 <_malloc_r>:
 8007744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007748:	1ccd      	adds	r5, r1, #3
 800774a:	f025 0503 	bic.w	r5, r5, #3
 800774e:	3508      	adds	r5, #8
 8007750:	2d0c      	cmp	r5, #12
 8007752:	bf38      	it	cc
 8007754:	250c      	movcc	r5, #12
 8007756:	2d00      	cmp	r5, #0
 8007758:	4606      	mov	r6, r0
 800775a:	db01      	blt.n	8007760 <_malloc_r+0x1c>
 800775c:	42a9      	cmp	r1, r5
 800775e:	d904      	bls.n	800776a <_malloc_r+0x26>
 8007760:	230c      	movs	r3, #12
 8007762:	6033      	str	r3, [r6, #0]
 8007764:	2000      	movs	r0, #0
 8007766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800776a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007840 <_malloc_r+0xfc>
 800776e:	f000 f869 	bl	8007844 <__malloc_lock>
 8007772:	f8d8 3000 	ldr.w	r3, [r8]
 8007776:	461c      	mov	r4, r3
 8007778:	bb44      	cbnz	r4, 80077cc <_malloc_r+0x88>
 800777a:	4629      	mov	r1, r5
 800777c:	4630      	mov	r0, r6
 800777e:	f7ff ffbf 	bl	8007700 <sbrk_aligned>
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	4604      	mov	r4, r0
 8007786:	d158      	bne.n	800783a <_malloc_r+0xf6>
 8007788:	f8d8 4000 	ldr.w	r4, [r8]
 800778c:	4627      	mov	r7, r4
 800778e:	2f00      	cmp	r7, #0
 8007790:	d143      	bne.n	800781a <_malloc_r+0xd6>
 8007792:	2c00      	cmp	r4, #0
 8007794:	d04b      	beq.n	800782e <_malloc_r+0xea>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	4639      	mov	r1, r7
 800779a:	4630      	mov	r0, r6
 800779c:	eb04 0903 	add.w	r9, r4, r3
 80077a0:	f001 fd30 	bl	8009204 <_sbrk_r>
 80077a4:	4581      	cmp	r9, r0
 80077a6:	d142      	bne.n	800782e <_malloc_r+0xea>
 80077a8:	6821      	ldr	r1, [r4, #0]
 80077aa:	4630      	mov	r0, r6
 80077ac:	1a6d      	subs	r5, r5, r1
 80077ae:	4629      	mov	r1, r5
 80077b0:	f7ff ffa6 	bl	8007700 <sbrk_aligned>
 80077b4:	3001      	adds	r0, #1
 80077b6:	d03a      	beq.n	800782e <_malloc_r+0xea>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	442b      	add	r3, r5
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	f8d8 3000 	ldr.w	r3, [r8]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	bb62      	cbnz	r2, 8007820 <_malloc_r+0xdc>
 80077c6:	f8c8 7000 	str.w	r7, [r8]
 80077ca:	e00f      	b.n	80077ec <_malloc_r+0xa8>
 80077cc:	6822      	ldr	r2, [r4, #0]
 80077ce:	1b52      	subs	r2, r2, r5
 80077d0:	d420      	bmi.n	8007814 <_malloc_r+0xd0>
 80077d2:	2a0b      	cmp	r2, #11
 80077d4:	d917      	bls.n	8007806 <_malloc_r+0xc2>
 80077d6:	1961      	adds	r1, r4, r5
 80077d8:	42a3      	cmp	r3, r4
 80077da:	6025      	str	r5, [r4, #0]
 80077dc:	bf18      	it	ne
 80077de:	6059      	strne	r1, [r3, #4]
 80077e0:	6863      	ldr	r3, [r4, #4]
 80077e2:	bf08      	it	eq
 80077e4:	f8c8 1000 	streq.w	r1, [r8]
 80077e8:	5162      	str	r2, [r4, r5]
 80077ea:	604b      	str	r3, [r1, #4]
 80077ec:	4630      	mov	r0, r6
 80077ee:	f000 f82f 	bl	8007850 <__malloc_unlock>
 80077f2:	f104 000b 	add.w	r0, r4, #11
 80077f6:	1d23      	adds	r3, r4, #4
 80077f8:	f020 0007 	bic.w	r0, r0, #7
 80077fc:	1ac2      	subs	r2, r0, r3
 80077fe:	bf1c      	itt	ne
 8007800:	1a1b      	subne	r3, r3, r0
 8007802:	50a3      	strne	r3, [r4, r2]
 8007804:	e7af      	b.n	8007766 <_malloc_r+0x22>
 8007806:	6862      	ldr	r2, [r4, #4]
 8007808:	42a3      	cmp	r3, r4
 800780a:	bf0c      	ite	eq
 800780c:	f8c8 2000 	streq.w	r2, [r8]
 8007810:	605a      	strne	r2, [r3, #4]
 8007812:	e7eb      	b.n	80077ec <_malloc_r+0xa8>
 8007814:	4623      	mov	r3, r4
 8007816:	6864      	ldr	r4, [r4, #4]
 8007818:	e7ae      	b.n	8007778 <_malloc_r+0x34>
 800781a:	463c      	mov	r4, r7
 800781c:	687f      	ldr	r7, [r7, #4]
 800781e:	e7b6      	b.n	800778e <_malloc_r+0x4a>
 8007820:	461a      	mov	r2, r3
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	42a3      	cmp	r3, r4
 8007826:	d1fb      	bne.n	8007820 <_malloc_r+0xdc>
 8007828:	2300      	movs	r3, #0
 800782a:	6053      	str	r3, [r2, #4]
 800782c:	e7de      	b.n	80077ec <_malloc_r+0xa8>
 800782e:	230c      	movs	r3, #12
 8007830:	4630      	mov	r0, r6
 8007832:	6033      	str	r3, [r6, #0]
 8007834:	f000 f80c 	bl	8007850 <__malloc_unlock>
 8007838:	e794      	b.n	8007764 <_malloc_r+0x20>
 800783a:	6005      	str	r5, [r0, #0]
 800783c:	e7d6      	b.n	80077ec <_malloc_r+0xa8>
 800783e:	bf00      	nop
 8007840:	20002498 	.word	0x20002498

08007844 <__malloc_lock>:
 8007844:	4801      	ldr	r0, [pc, #4]	@ (800784c <__malloc_lock+0x8>)
 8007846:	f7ff b89c 	b.w	8006982 <__retarget_lock_acquire_recursive>
 800784a:	bf00      	nop
 800784c:	20002490 	.word	0x20002490

08007850 <__malloc_unlock>:
 8007850:	4801      	ldr	r0, [pc, #4]	@ (8007858 <__malloc_unlock+0x8>)
 8007852:	f7ff b897 	b.w	8006984 <__retarget_lock_release_recursive>
 8007856:	bf00      	nop
 8007858:	20002490 	.word	0x20002490

0800785c <_Balloc>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	69c6      	ldr	r6, [r0, #28]
 8007860:	4604      	mov	r4, r0
 8007862:	460d      	mov	r5, r1
 8007864:	b976      	cbnz	r6, 8007884 <_Balloc+0x28>
 8007866:	2010      	movs	r0, #16
 8007868:	f7ff ff42 	bl	80076f0 <malloc>
 800786c:	4602      	mov	r2, r0
 800786e:	61e0      	str	r0, [r4, #28]
 8007870:	b920      	cbnz	r0, 800787c <_Balloc+0x20>
 8007872:	216b      	movs	r1, #107	@ 0x6b
 8007874:	4b17      	ldr	r3, [pc, #92]	@ (80078d4 <_Balloc+0x78>)
 8007876:	4818      	ldr	r0, [pc, #96]	@ (80078d8 <_Balloc+0x7c>)
 8007878:	f001 fce8 	bl	800924c <__assert_func>
 800787c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007880:	6006      	str	r6, [r0, #0]
 8007882:	60c6      	str	r6, [r0, #12]
 8007884:	69e6      	ldr	r6, [r4, #28]
 8007886:	68f3      	ldr	r3, [r6, #12]
 8007888:	b183      	cbz	r3, 80078ac <_Balloc+0x50>
 800788a:	69e3      	ldr	r3, [r4, #28]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007892:	b9b8      	cbnz	r0, 80078c4 <_Balloc+0x68>
 8007894:	2101      	movs	r1, #1
 8007896:	fa01 f605 	lsl.w	r6, r1, r5
 800789a:	1d72      	adds	r2, r6, #5
 800789c:	4620      	mov	r0, r4
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	f001 fcf2 	bl	8009288 <_calloc_r>
 80078a4:	b160      	cbz	r0, 80078c0 <_Balloc+0x64>
 80078a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078aa:	e00e      	b.n	80078ca <_Balloc+0x6e>
 80078ac:	2221      	movs	r2, #33	@ 0x21
 80078ae:	2104      	movs	r1, #4
 80078b0:	4620      	mov	r0, r4
 80078b2:	f001 fce9 	bl	8009288 <_calloc_r>
 80078b6:	69e3      	ldr	r3, [r4, #28]
 80078b8:	60f0      	str	r0, [r6, #12]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e4      	bne.n	800788a <_Balloc+0x2e>
 80078c0:	2000      	movs	r0, #0
 80078c2:	bd70      	pop	{r4, r5, r6, pc}
 80078c4:	6802      	ldr	r2, [r0, #0]
 80078c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078ca:	2300      	movs	r3, #0
 80078cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078d0:	e7f7      	b.n	80078c2 <_Balloc+0x66>
 80078d2:	bf00      	nop
 80078d4:	0800a0cd 	.word	0x0800a0cd
 80078d8:	0800a14d 	.word	0x0800a14d

080078dc <_Bfree>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	69c6      	ldr	r6, [r0, #28]
 80078e0:	4605      	mov	r5, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	b976      	cbnz	r6, 8007904 <_Bfree+0x28>
 80078e6:	2010      	movs	r0, #16
 80078e8:	f7ff ff02 	bl	80076f0 <malloc>
 80078ec:	4602      	mov	r2, r0
 80078ee:	61e8      	str	r0, [r5, #28]
 80078f0:	b920      	cbnz	r0, 80078fc <_Bfree+0x20>
 80078f2:	218f      	movs	r1, #143	@ 0x8f
 80078f4:	4b08      	ldr	r3, [pc, #32]	@ (8007918 <_Bfree+0x3c>)
 80078f6:	4809      	ldr	r0, [pc, #36]	@ (800791c <_Bfree+0x40>)
 80078f8:	f001 fca8 	bl	800924c <__assert_func>
 80078fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007900:	6006      	str	r6, [r0, #0]
 8007902:	60c6      	str	r6, [r0, #12]
 8007904:	b13c      	cbz	r4, 8007916 <_Bfree+0x3a>
 8007906:	69eb      	ldr	r3, [r5, #28]
 8007908:	6862      	ldr	r2, [r4, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007910:	6021      	str	r1, [r4, #0]
 8007912:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	0800a0cd 	.word	0x0800a0cd
 800791c:	0800a14d 	.word	0x0800a14d

08007920 <__multadd>:
 8007920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007924:	4607      	mov	r7, r0
 8007926:	460c      	mov	r4, r1
 8007928:	461e      	mov	r6, r3
 800792a:	2000      	movs	r0, #0
 800792c:	690d      	ldr	r5, [r1, #16]
 800792e:	f101 0c14 	add.w	ip, r1, #20
 8007932:	f8dc 3000 	ldr.w	r3, [ip]
 8007936:	3001      	adds	r0, #1
 8007938:	b299      	uxth	r1, r3
 800793a:	fb02 6101 	mla	r1, r2, r1, r6
 800793e:	0c1e      	lsrs	r6, r3, #16
 8007940:	0c0b      	lsrs	r3, r1, #16
 8007942:	fb02 3306 	mla	r3, r2, r6, r3
 8007946:	b289      	uxth	r1, r1
 8007948:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800794c:	4285      	cmp	r5, r0
 800794e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007952:	f84c 1b04 	str.w	r1, [ip], #4
 8007956:	dcec      	bgt.n	8007932 <__multadd+0x12>
 8007958:	b30e      	cbz	r6, 800799e <__multadd+0x7e>
 800795a:	68a3      	ldr	r3, [r4, #8]
 800795c:	42ab      	cmp	r3, r5
 800795e:	dc19      	bgt.n	8007994 <__multadd+0x74>
 8007960:	6861      	ldr	r1, [r4, #4]
 8007962:	4638      	mov	r0, r7
 8007964:	3101      	adds	r1, #1
 8007966:	f7ff ff79 	bl	800785c <_Balloc>
 800796a:	4680      	mov	r8, r0
 800796c:	b928      	cbnz	r0, 800797a <__multadd+0x5a>
 800796e:	4602      	mov	r2, r0
 8007970:	21ba      	movs	r1, #186	@ 0xba
 8007972:	4b0c      	ldr	r3, [pc, #48]	@ (80079a4 <__multadd+0x84>)
 8007974:	480c      	ldr	r0, [pc, #48]	@ (80079a8 <__multadd+0x88>)
 8007976:	f001 fc69 	bl	800924c <__assert_func>
 800797a:	6922      	ldr	r2, [r4, #16]
 800797c:	f104 010c 	add.w	r1, r4, #12
 8007980:	3202      	adds	r2, #2
 8007982:	0092      	lsls	r2, r2, #2
 8007984:	300c      	adds	r0, #12
 8007986:	f001 fc4d 	bl	8009224 <memcpy>
 800798a:	4621      	mov	r1, r4
 800798c:	4638      	mov	r0, r7
 800798e:	f7ff ffa5 	bl	80078dc <_Bfree>
 8007992:	4644      	mov	r4, r8
 8007994:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007998:	3501      	adds	r5, #1
 800799a:	615e      	str	r6, [r3, #20]
 800799c:	6125      	str	r5, [r4, #16]
 800799e:	4620      	mov	r0, r4
 80079a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a4:	0800a13c 	.word	0x0800a13c
 80079a8:	0800a14d 	.word	0x0800a14d

080079ac <__s2b>:
 80079ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b0:	4615      	mov	r5, r2
 80079b2:	2209      	movs	r2, #9
 80079b4:	461f      	mov	r7, r3
 80079b6:	3308      	adds	r3, #8
 80079b8:	460c      	mov	r4, r1
 80079ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80079be:	4606      	mov	r6, r0
 80079c0:	2201      	movs	r2, #1
 80079c2:	2100      	movs	r1, #0
 80079c4:	429a      	cmp	r2, r3
 80079c6:	db09      	blt.n	80079dc <__s2b+0x30>
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7ff ff47 	bl	800785c <_Balloc>
 80079ce:	b940      	cbnz	r0, 80079e2 <__s2b+0x36>
 80079d0:	4602      	mov	r2, r0
 80079d2:	21d3      	movs	r1, #211	@ 0xd3
 80079d4:	4b18      	ldr	r3, [pc, #96]	@ (8007a38 <__s2b+0x8c>)
 80079d6:	4819      	ldr	r0, [pc, #100]	@ (8007a3c <__s2b+0x90>)
 80079d8:	f001 fc38 	bl	800924c <__assert_func>
 80079dc:	0052      	lsls	r2, r2, #1
 80079de:	3101      	adds	r1, #1
 80079e0:	e7f0      	b.n	80079c4 <__s2b+0x18>
 80079e2:	9b08      	ldr	r3, [sp, #32]
 80079e4:	2d09      	cmp	r5, #9
 80079e6:	6143      	str	r3, [r0, #20]
 80079e8:	f04f 0301 	mov.w	r3, #1
 80079ec:	6103      	str	r3, [r0, #16]
 80079ee:	dd16      	ble.n	8007a1e <__s2b+0x72>
 80079f0:	f104 0909 	add.w	r9, r4, #9
 80079f4:	46c8      	mov	r8, r9
 80079f6:	442c      	add	r4, r5
 80079f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079fc:	4601      	mov	r1, r0
 80079fe:	220a      	movs	r2, #10
 8007a00:	4630      	mov	r0, r6
 8007a02:	3b30      	subs	r3, #48	@ 0x30
 8007a04:	f7ff ff8c 	bl	8007920 <__multadd>
 8007a08:	45a0      	cmp	r8, r4
 8007a0a:	d1f5      	bne.n	80079f8 <__s2b+0x4c>
 8007a0c:	f1a5 0408 	sub.w	r4, r5, #8
 8007a10:	444c      	add	r4, r9
 8007a12:	1b2d      	subs	r5, r5, r4
 8007a14:	1963      	adds	r3, r4, r5
 8007a16:	42bb      	cmp	r3, r7
 8007a18:	db04      	blt.n	8007a24 <__s2b+0x78>
 8007a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a1e:	2509      	movs	r5, #9
 8007a20:	340a      	adds	r4, #10
 8007a22:	e7f6      	b.n	8007a12 <__s2b+0x66>
 8007a24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a28:	4601      	mov	r1, r0
 8007a2a:	220a      	movs	r2, #10
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	3b30      	subs	r3, #48	@ 0x30
 8007a30:	f7ff ff76 	bl	8007920 <__multadd>
 8007a34:	e7ee      	b.n	8007a14 <__s2b+0x68>
 8007a36:	bf00      	nop
 8007a38:	0800a13c 	.word	0x0800a13c
 8007a3c:	0800a14d 	.word	0x0800a14d

08007a40 <__hi0bits>:
 8007a40:	4603      	mov	r3, r0
 8007a42:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a46:	bf3a      	itte	cc
 8007a48:	0403      	lslcc	r3, r0, #16
 8007a4a:	2010      	movcc	r0, #16
 8007a4c:	2000      	movcs	r0, #0
 8007a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a52:	bf3c      	itt	cc
 8007a54:	021b      	lslcc	r3, r3, #8
 8007a56:	3008      	addcc	r0, #8
 8007a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a5c:	bf3c      	itt	cc
 8007a5e:	011b      	lslcc	r3, r3, #4
 8007a60:	3004      	addcc	r0, #4
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a66:	bf3c      	itt	cc
 8007a68:	009b      	lslcc	r3, r3, #2
 8007a6a:	3002      	addcc	r0, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	db05      	blt.n	8007a7c <__hi0bits+0x3c>
 8007a70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a74:	f100 0001 	add.w	r0, r0, #1
 8007a78:	bf08      	it	eq
 8007a7a:	2020      	moveq	r0, #32
 8007a7c:	4770      	bx	lr

08007a7e <__lo0bits>:
 8007a7e:	6803      	ldr	r3, [r0, #0]
 8007a80:	4602      	mov	r2, r0
 8007a82:	f013 0007 	ands.w	r0, r3, #7
 8007a86:	d00b      	beq.n	8007aa0 <__lo0bits+0x22>
 8007a88:	07d9      	lsls	r1, r3, #31
 8007a8a:	d421      	bmi.n	8007ad0 <__lo0bits+0x52>
 8007a8c:	0798      	lsls	r0, r3, #30
 8007a8e:	bf49      	itett	mi
 8007a90:	085b      	lsrmi	r3, r3, #1
 8007a92:	089b      	lsrpl	r3, r3, #2
 8007a94:	2001      	movmi	r0, #1
 8007a96:	6013      	strmi	r3, [r2, #0]
 8007a98:	bf5c      	itt	pl
 8007a9a:	2002      	movpl	r0, #2
 8007a9c:	6013      	strpl	r3, [r2, #0]
 8007a9e:	4770      	bx	lr
 8007aa0:	b299      	uxth	r1, r3
 8007aa2:	b909      	cbnz	r1, 8007aa8 <__lo0bits+0x2a>
 8007aa4:	2010      	movs	r0, #16
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	b2d9      	uxtb	r1, r3
 8007aaa:	b909      	cbnz	r1, 8007ab0 <__lo0bits+0x32>
 8007aac:	3008      	adds	r0, #8
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	0719      	lsls	r1, r3, #28
 8007ab2:	bf04      	itt	eq
 8007ab4:	091b      	lsreq	r3, r3, #4
 8007ab6:	3004      	addeq	r0, #4
 8007ab8:	0799      	lsls	r1, r3, #30
 8007aba:	bf04      	itt	eq
 8007abc:	089b      	lsreq	r3, r3, #2
 8007abe:	3002      	addeq	r0, #2
 8007ac0:	07d9      	lsls	r1, r3, #31
 8007ac2:	d403      	bmi.n	8007acc <__lo0bits+0x4e>
 8007ac4:	085b      	lsrs	r3, r3, #1
 8007ac6:	f100 0001 	add.w	r0, r0, #1
 8007aca:	d003      	beq.n	8007ad4 <__lo0bits+0x56>
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	4770      	bx	lr
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	4770      	bx	lr
 8007ad4:	2020      	movs	r0, #32
 8007ad6:	4770      	bx	lr

08007ad8 <__i2b>:
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	460c      	mov	r4, r1
 8007adc:	2101      	movs	r1, #1
 8007ade:	f7ff febd 	bl	800785c <_Balloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	b928      	cbnz	r0, 8007af2 <__i2b+0x1a>
 8007ae6:	f240 1145 	movw	r1, #325	@ 0x145
 8007aea:	4b04      	ldr	r3, [pc, #16]	@ (8007afc <__i2b+0x24>)
 8007aec:	4804      	ldr	r0, [pc, #16]	@ (8007b00 <__i2b+0x28>)
 8007aee:	f001 fbad 	bl	800924c <__assert_func>
 8007af2:	2301      	movs	r3, #1
 8007af4:	6144      	str	r4, [r0, #20]
 8007af6:	6103      	str	r3, [r0, #16]
 8007af8:	bd10      	pop	{r4, pc}
 8007afa:	bf00      	nop
 8007afc:	0800a13c 	.word	0x0800a13c
 8007b00:	0800a14d 	.word	0x0800a14d

08007b04 <__multiply>:
 8007b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b08:	4614      	mov	r4, r2
 8007b0a:	690a      	ldr	r2, [r1, #16]
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	460f      	mov	r7, r1
 8007b10:	429a      	cmp	r2, r3
 8007b12:	bfa2      	ittt	ge
 8007b14:	4623      	movge	r3, r4
 8007b16:	460c      	movge	r4, r1
 8007b18:	461f      	movge	r7, r3
 8007b1a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007b1e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007b22:	68a3      	ldr	r3, [r4, #8]
 8007b24:	6861      	ldr	r1, [r4, #4]
 8007b26:	eb0a 0609 	add.w	r6, sl, r9
 8007b2a:	42b3      	cmp	r3, r6
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	bfb8      	it	lt
 8007b30:	3101      	addlt	r1, #1
 8007b32:	f7ff fe93 	bl	800785c <_Balloc>
 8007b36:	b930      	cbnz	r0, 8007b46 <__multiply+0x42>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b3e:	4b43      	ldr	r3, [pc, #268]	@ (8007c4c <__multiply+0x148>)
 8007b40:	4843      	ldr	r0, [pc, #268]	@ (8007c50 <__multiply+0x14c>)
 8007b42:	f001 fb83 	bl	800924c <__assert_func>
 8007b46:	f100 0514 	add.w	r5, r0, #20
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b52:	4543      	cmp	r3, r8
 8007b54:	d321      	bcc.n	8007b9a <__multiply+0x96>
 8007b56:	f107 0114 	add.w	r1, r7, #20
 8007b5a:	f104 0214 	add.w	r2, r4, #20
 8007b5e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b62:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	1b13      	subs	r3, r2, r4
 8007b6a:	3b15      	subs	r3, #21
 8007b6c:	f023 0303 	bic.w	r3, r3, #3
 8007b70:	3304      	adds	r3, #4
 8007b72:	f104 0715 	add.w	r7, r4, #21
 8007b76:	42ba      	cmp	r2, r7
 8007b78:	bf38      	it	cc
 8007b7a:	2304      	movcc	r3, #4
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	9b02      	ldr	r3, [sp, #8]
 8007b80:	9103      	str	r1, [sp, #12]
 8007b82:	428b      	cmp	r3, r1
 8007b84:	d80c      	bhi.n	8007ba0 <__multiply+0x9c>
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	dd03      	ble.n	8007b92 <__multiply+0x8e>
 8007b8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d05a      	beq.n	8007c48 <__multiply+0x144>
 8007b92:	6106      	str	r6, [r0, #16]
 8007b94:	b005      	add	sp, #20
 8007b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9a:	f843 2b04 	str.w	r2, [r3], #4
 8007b9e:	e7d8      	b.n	8007b52 <__multiply+0x4e>
 8007ba0:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ba4:	f1ba 0f00 	cmp.w	sl, #0
 8007ba8:	d023      	beq.n	8007bf2 <__multiply+0xee>
 8007baa:	46a9      	mov	r9, r5
 8007bac:	f04f 0c00 	mov.w	ip, #0
 8007bb0:	f104 0e14 	add.w	lr, r4, #20
 8007bb4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bb8:	f8d9 3000 	ldr.w	r3, [r9]
 8007bbc:	fa1f fb87 	uxth.w	fp, r7
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	fb0a 330b 	mla	r3, sl, fp, r3
 8007bc6:	4463      	add	r3, ip
 8007bc8:	f8d9 c000 	ldr.w	ip, [r9]
 8007bcc:	0c3f      	lsrs	r7, r7, #16
 8007bce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007bd2:	fb0a c707 	mla	r7, sl, r7, ip
 8007bd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007be0:	4572      	cmp	r2, lr
 8007be2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007be6:	f849 3b04 	str.w	r3, [r9], #4
 8007bea:	d8e3      	bhi.n	8007bb4 <__multiply+0xb0>
 8007bec:	9b01      	ldr	r3, [sp, #4]
 8007bee:	f845 c003 	str.w	ip, [r5, r3]
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	3104      	adds	r1, #4
 8007bf6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007bfa:	f1b9 0f00 	cmp.w	r9, #0
 8007bfe:	d021      	beq.n	8007c44 <__multiply+0x140>
 8007c00:	46ae      	mov	lr, r5
 8007c02:	f04f 0a00 	mov.w	sl, #0
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	f104 0c14 	add.w	ip, r4, #20
 8007c0c:	f8bc b000 	ldrh.w	fp, [ip]
 8007c10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	fb09 770b 	mla	r7, r9, fp, r7
 8007c1a:	4457      	add	r7, sl
 8007c1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c20:	f84e 3b04 	str.w	r3, [lr], #4
 8007c24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c2c:	f8be 3000 	ldrh.w	r3, [lr]
 8007c30:	4562      	cmp	r2, ip
 8007c32:	fb09 330a 	mla	r3, r9, sl, r3
 8007c36:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c3e:	d8e5      	bhi.n	8007c0c <__multiply+0x108>
 8007c40:	9f01      	ldr	r7, [sp, #4]
 8007c42:	51eb      	str	r3, [r5, r7]
 8007c44:	3504      	adds	r5, #4
 8007c46:	e79a      	b.n	8007b7e <__multiply+0x7a>
 8007c48:	3e01      	subs	r6, #1
 8007c4a:	e79c      	b.n	8007b86 <__multiply+0x82>
 8007c4c:	0800a13c 	.word	0x0800a13c
 8007c50:	0800a14d 	.word	0x0800a14d

08007c54 <__pow5mult>:
 8007c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c58:	4615      	mov	r5, r2
 8007c5a:	f012 0203 	ands.w	r2, r2, #3
 8007c5e:	4607      	mov	r7, r0
 8007c60:	460e      	mov	r6, r1
 8007c62:	d007      	beq.n	8007c74 <__pow5mult+0x20>
 8007c64:	4c25      	ldr	r4, [pc, #148]	@ (8007cfc <__pow5mult+0xa8>)
 8007c66:	3a01      	subs	r2, #1
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c6e:	f7ff fe57 	bl	8007920 <__multadd>
 8007c72:	4606      	mov	r6, r0
 8007c74:	10ad      	asrs	r5, r5, #2
 8007c76:	d03d      	beq.n	8007cf4 <__pow5mult+0xa0>
 8007c78:	69fc      	ldr	r4, [r7, #28]
 8007c7a:	b97c      	cbnz	r4, 8007c9c <__pow5mult+0x48>
 8007c7c:	2010      	movs	r0, #16
 8007c7e:	f7ff fd37 	bl	80076f0 <malloc>
 8007c82:	4602      	mov	r2, r0
 8007c84:	61f8      	str	r0, [r7, #28]
 8007c86:	b928      	cbnz	r0, 8007c94 <__pow5mult+0x40>
 8007c88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007d00 <__pow5mult+0xac>)
 8007c8e:	481d      	ldr	r0, [pc, #116]	@ (8007d04 <__pow5mult+0xb0>)
 8007c90:	f001 fadc 	bl	800924c <__assert_func>
 8007c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c98:	6004      	str	r4, [r0, #0]
 8007c9a:	60c4      	str	r4, [r0, #12]
 8007c9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ca4:	b94c      	cbnz	r4, 8007cba <__pow5mult+0x66>
 8007ca6:	f240 2171 	movw	r1, #625	@ 0x271
 8007caa:	4638      	mov	r0, r7
 8007cac:	f7ff ff14 	bl	8007ad8 <__i2b>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cb8:	6003      	str	r3, [r0, #0]
 8007cba:	f04f 0900 	mov.w	r9, #0
 8007cbe:	07eb      	lsls	r3, r5, #31
 8007cc0:	d50a      	bpl.n	8007cd8 <__pow5mult+0x84>
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f7ff ff1c 	bl	8007b04 <__multiply>
 8007ccc:	4680      	mov	r8, r0
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f7ff fe03 	bl	80078dc <_Bfree>
 8007cd6:	4646      	mov	r6, r8
 8007cd8:	106d      	asrs	r5, r5, #1
 8007cda:	d00b      	beq.n	8007cf4 <__pow5mult+0xa0>
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	b938      	cbnz	r0, 8007cf0 <__pow5mult+0x9c>
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f7ff ff0d 	bl	8007b04 <__multiply>
 8007cea:	6020      	str	r0, [r4, #0]
 8007cec:	f8c0 9000 	str.w	r9, [r0]
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	e7e4      	b.n	8007cbe <__pow5mult+0x6a>
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cfa:	bf00      	nop
 8007cfc:	0800a1a8 	.word	0x0800a1a8
 8007d00:	0800a0cd 	.word	0x0800a0cd
 8007d04:	0800a14d 	.word	0x0800a14d

08007d08 <__lshift>:
 8007d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	4607      	mov	r7, r0
 8007d10:	4691      	mov	r9, r2
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	6849      	ldr	r1, [r1, #4]
 8007d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d1a:	68a3      	ldr	r3, [r4, #8]
 8007d1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d20:	f108 0601 	add.w	r6, r8, #1
 8007d24:	42b3      	cmp	r3, r6
 8007d26:	db0b      	blt.n	8007d40 <__lshift+0x38>
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f7ff fd97 	bl	800785c <_Balloc>
 8007d2e:	4605      	mov	r5, r0
 8007d30:	b948      	cbnz	r0, 8007d46 <__lshift+0x3e>
 8007d32:	4602      	mov	r2, r0
 8007d34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d38:	4b27      	ldr	r3, [pc, #156]	@ (8007dd8 <__lshift+0xd0>)
 8007d3a:	4828      	ldr	r0, [pc, #160]	@ (8007ddc <__lshift+0xd4>)
 8007d3c:	f001 fa86 	bl	800924c <__assert_func>
 8007d40:	3101      	adds	r1, #1
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	e7ee      	b.n	8007d24 <__lshift+0x1c>
 8007d46:	2300      	movs	r3, #0
 8007d48:	f100 0114 	add.w	r1, r0, #20
 8007d4c:	f100 0210 	add.w	r2, r0, #16
 8007d50:	4618      	mov	r0, r3
 8007d52:	4553      	cmp	r3, sl
 8007d54:	db33      	blt.n	8007dbe <__lshift+0xb6>
 8007d56:	6920      	ldr	r0, [r4, #16]
 8007d58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d5c:	f104 0314 	add.w	r3, r4, #20
 8007d60:	f019 091f 	ands.w	r9, r9, #31
 8007d64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d6c:	d02b      	beq.n	8007dc6 <__lshift+0xbe>
 8007d6e:	468a      	mov	sl, r1
 8007d70:	2200      	movs	r2, #0
 8007d72:	f1c9 0e20 	rsb	lr, r9, #32
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	fa00 f009 	lsl.w	r0, r0, r9
 8007d7c:	4310      	orrs	r0, r2
 8007d7e:	f84a 0b04 	str.w	r0, [sl], #4
 8007d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d86:	459c      	cmp	ip, r3
 8007d88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d8c:	d8f3      	bhi.n	8007d76 <__lshift+0x6e>
 8007d8e:	ebac 0304 	sub.w	r3, ip, r4
 8007d92:	3b15      	subs	r3, #21
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	3304      	adds	r3, #4
 8007d9a:	f104 0015 	add.w	r0, r4, #21
 8007d9e:	4584      	cmp	ip, r0
 8007da0:	bf38      	it	cc
 8007da2:	2304      	movcc	r3, #4
 8007da4:	50ca      	str	r2, [r1, r3]
 8007da6:	b10a      	cbz	r2, 8007dac <__lshift+0xa4>
 8007da8:	f108 0602 	add.w	r6, r8, #2
 8007dac:	3e01      	subs	r6, #1
 8007dae:	4638      	mov	r0, r7
 8007db0:	4621      	mov	r1, r4
 8007db2:	612e      	str	r6, [r5, #16]
 8007db4:	f7ff fd92 	bl	80078dc <_Bfree>
 8007db8:	4628      	mov	r0, r5
 8007dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	e7c5      	b.n	8007d52 <__lshift+0x4a>
 8007dc6:	3904      	subs	r1, #4
 8007dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dcc:	459c      	cmp	ip, r3
 8007dce:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dd2:	d8f9      	bhi.n	8007dc8 <__lshift+0xc0>
 8007dd4:	e7ea      	b.n	8007dac <__lshift+0xa4>
 8007dd6:	bf00      	nop
 8007dd8:	0800a13c 	.word	0x0800a13c
 8007ddc:	0800a14d 	.word	0x0800a14d

08007de0 <__mcmp>:
 8007de0:	4603      	mov	r3, r0
 8007de2:	690a      	ldr	r2, [r1, #16]
 8007de4:	6900      	ldr	r0, [r0, #16]
 8007de6:	b530      	push	{r4, r5, lr}
 8007de8:	1a80      	subs	r0, r0, r2
 8007dea:	d10e      	bne.n	8007e0a <__mcmp+0x2a>
 8007dec:	3314      	adds	r3, #20
 8007dee:	3114      	adds	r1, #20
 8007df0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007df4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007df8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e00:	4295      	cmp	r5, r2
 8007e02:	d003      	beq.n	8007e0c <__mcmp+0x2c>
 8007e04:	d205      	bcs.n	8007e12 <__mcmp+0x32>
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0a:	bd30      	pop	{r4, r5, pc}
 8007e0c:	42a3      	cmp	r3, r4
 8007e0e:	d3f3      	bcc.n	8007df8 <__mcmp+0x18>
 8007e10:	e7fb      	b.n	8007e0a <__mcmp+0x2a>
 8007e12:	2001      	movs	r0, #1
 8007e14:	e7f9      	b.n	8007e0a <__mcmp+0x2a>
	...

08007e18 <__mdiff>:
 8007e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1c:	4689      	mov	r9, r1
 8007e1e:	4606      	mov	r6, r0
 8007e20:	4611      	mov	r1, r2
 8007e22:	4648      	mov	r0, r9
 8007e24:	4614      	mov	r4, r2
 8007e26:	f7ff ffdb 	bl	8007de0 <__mcmp>
 8007e2a:	1e05      	subs	r5, r0, #0
 8007e2c:	d112      	bne.n	8007e54 <__mdiff+0x3c>
 8007e2e:	4629      	mov	r1, r5
 8007e30:	4630      	mov	r0, r6
 8007e32:	f7ff fd13 	bl	800785c <_Balloc>
 8007e36:	4602      	mov	r2, r0
 8007e38:	b928      	cbnz	r0, 8007e46 <__mdiff+0x2e>
 8007e3a:	f240 2137 	movw	r1, #567	@ 0x237
 8007e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8007f38 <__mdiff+0x120>)
 8007e40:	483e      	ldr	r0, [pc, #248]	@ (8007f3c <__mdiff+0x124>)
 8007e42:	f001 fa03 	bl	800924c <__assert_func>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	b003      	add	sp, #12
 8007e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e54:	bfbc      	itt	lt
 8007e56:	464b      	movlt	r3, r9
 8007e58:	46a1      	movlt	r9, r4
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e60:	bfba      	itte	lt
 8007e62:	461c      	movlt	r4, r3
 8007e64:	2501      	movlt	r5, #1
 8007e66:	2500      	movge	r5, #0
 8007e68:	f7ff fcf8 	bl	800785c <_Balloc>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	b918      	cbnz	r0, 8007e78 <__mdiff+0x60>
 8007e70:	f240 2145 	movw	r1, #581	@ 0x245
 8007e74:	4b30      	ldr	r3, [pc, #192]	@ (8007f38 <__mdiff+0x120>)
 8007e76:	e7e3      	b.n	8007e40 <__mdiff+0x28>
 8007e78:	f100 0b14 	add.w	fp, r0, #20
 8007e7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e80:	f109 0310 	add.w	r3, r9, #16
 8007e84:	60c5      	str	r5, [r0, #12]
 8007e86:	f04f 0c00 	mov.w	ip, #0
 8007e8a:	f109 0514 	add.w	r5, r9, #20
 8007e8e:	46d9      	mov	r9, fp
 8007e90:	6926      	ldr	r6, [r4, #16]
 8007e92:	f104 0e14 	add.w	lr, r4, #20
 8007e96:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e9a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ea6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007eaa:	b281      	uxth	r1, r0
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	fa1f f38a 	uxth.w	r3, sl
 8007eb2:	1a5b      	subs	r3, r3, r1
 8007eb4:	0c00      	lsrs	r0, r0, #16
 8007eb6:	4463      	add	r3, ip
 8007eb8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ebc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ec6:	4576      	cmp	r6, lr
 8007ec8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ecc:	f849 3b04 	str.w	r3, [r9], #4
 8007ed0:	d8e6      	bhi.n	8007ea0 <__mdiff+0x88>
 8007ed2:	1b33      	subs	r3, r6, r4
 8007ed4:	3b15      	subs	r3, #21
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	3415      	adds	r4, #21
 8007edc:	3304      	adds	r3, #4
 8007ede:	42a6      	cmp	r6, r4
 8007ee0:	bf38      	it	cc
 8007ee2:	2304      	movcc	r3, #4
 8007ee4:	441d      	add	r5, r3
 8007ee6:	445b      	add	r3, fp
 8007ee8:	461e      	mov	r6, r3
 8007eea:	462c      	mov	r4, r5
 8007eec:	4544      	cmp	r4, r8
 8007eee:	d30e      	bcc.n	8007f0e <__mdiff+0xf6>
 8007ef0:	f108 0103 	add.w	r1, r8, #3
 8007ef4:	1b49      	subs	r1, r1, r5
 8007ef6:	f021 0103 	bic.w	r1, r1, #3
 8007efa:	3d03      	subs	r5, #3
 8007efc:	45a8      	cmp	r8, r5
 8007efe:	bf38      	it	cc
 8007f00:	2100      	movcc	r1, #0
 8007f02:	440b      	add	r3, r1
 8007f04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f08:	b199      	cbz	r1, 8007f32 <__mdiff+0x11a>
 8007f0a:	6117      	str	r7, [r2, #16]
 8007f0c:	e79e      	b.n	8007e4c <__mdiff+0x34>
 8007f0e:	46e6      	mov	lr, ip
 8007f10:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f14:	fa1f fc81 	uxth.w	ip, r1
 8007f18:	44f4      	add	ip, lr
 8007f1a:	0c08      	lsrs	r0, r1, #16
 8007f1c:	4471      	add	r1, lr
 8007f1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f22:	b289      	uxth	r1, r1
 8007f24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f2c:	f846 1b04 	str.w	r1, [r6], #4
 8007f30:	e7dc      	b.n	8007eec <__mdiff+0xd4>
 8007f32:	3f01      	subs	r7, #1
 8007f34:	e7e6      	b.n	8007f04 <__mdiff+0xec>
 8007f36:	bf00      	nop
 8007f38:	0800a13c 	.word	0x0800a13c
 8007f3c:	0800a14d 	.word	0x0800a14d

08007f40 <__ulp>:
 8007f40:	4b0e      	ldr	r3, [pc, #56]	@ (8007f7c <__ulp+0x3c>)
 8007f42:	400b      	ands	r3, r1
 8007f44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dc08      	bgt.n	8007f5e <__ulp+0x1e>
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007f52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f56:	da04      	bge.n	8007f62 <__ulp+0x22>
 8007f58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007f5c:	4113      	asrs	r3, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	e008      	b.n	8007f74 <__ulp+0x34>
 8007f62:	f1a2 0314 	sub.w	r3, r2, #20
 8007f66:	2b1e      	cmp	r3, #30
 8007f68:	bfd6      	itet	le
 8007f6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007f6e:	2201      	movgt	r2, #1
 8007f70:	40da      	lsrle	r2, r3
 8007f72:	2300      	movs	r3, #0
 8007f74:	4619      	mov	r1, r3
 8007f76:	4610      	mov	r0, r2
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	7ff00000 	.word	0x7ff00000

08007f80 <__b2d>:
 8007f80:	6902      	ldr	r2, [r0, #16]
 8007f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f84:	f100 0614 	add.w	r6, r0, #20
 8007f88:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007f8c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007f90:	4f1e      	ldr	r7, [pc, #120]	@ (800800c <__b2d+0x8c>)
 8007f92:	4620      	mov	r0, r4
 8007f94:	f7ff fd54 	bl	8007a40 <__hi0bits>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f1c0 0020 	rsb	r0, r0, #32
 8007f9e:	2b0a      	cmp	r3, #10
 8007fa0:	f1a2 0504 	sub.w	r5, r2, #4
 8007fa4:	6008      	str	r0, [r1, #0]
 8007fa6:	dc12      	bgt.n	8007fce <__b2d+0x4e>
 8007fa8:	42ae      	cmp	r6, r5
 8007faa:	bf2c      	ite	cs
 8007fac:	2200      	movcs	r2, #0
 8007fae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007fb2:	f1c3 0c0b 	rsb	ip, r3, #11
 8007fb6:	3315      	adds	r3, #21
 8007fb8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007fbc:	fa04 f303 	lsl.w	r3, r4, r3
 8007fc0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007fc4:	ea4e 0107 	orr.w	r1, lr, r7
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fce:	42ae      	cmp	r6, r5
 8007fd0:	bf36      	itet	cc
 8007fd2:	f1a2 0508 	subcc.w	r5, r2, #8
 8007fd6:	2200      	movcs	r2, #0
 8007fd8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007fdc:	3b0b      	subs	r3, #11
 8007fde:	d012      	beq.n	8008006 <__b2d+0x86>
 8007fe0:	f1c3 0720 	rsb	r7, r3, #32
 8007fe4:	fa22 f107 	lsr.w	r1, r2, r7
 8007fe8:	409c      	lsls	r4, r3
 8007fea:	430c      	orrs	r4, r1
 8007fec:	42b5      	cmp	r5, r6
 8007fee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007ff2:	bf94      	ite	ls
 8007ff4:	2400      	movls	r4, #0
 8007ff6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007ffa:	409a      	lsls	r2, r3
 8007ffc:	40fc      	lsrs	r4, r7
 8007ffe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008002:	4322      	orrs	r2, r4
 8008004:	e7e1      	b.n	8007fca <__b2d+0x4a>
 8008006:	ea44 0107 	orr.w	r1, r4, r7
 800800a:	e7de      	b.n	8007fca <__b2d+0x4a>
 800800c:	3ff00000 	.word	0x3ff00000

08008010 <__d2b>:
 8008010:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008014:	2101      	movs	r1, #1
 8008016:	4690      	mov	r8, r2
 8008018:	4699      	mov	r9, r3
 800801a:	9e08      	ldr	r6, [sp, #32]
 800801c:	f7ff fc1e 	bl	800785c <_Balloc>
 8008020:	4604      	mov	r4, r0
 8008022:	b930      	cbnz	r0, 8008032 <__d2b+0x22>
 8008024:	4602      	mov	r2, r0
 8008026:	f240 310f 	movw	r1, #783	@ 0x30f
 800802a:	4b23      	ldr	r3, [pc, #140]	@ (80080b8 <__d2b+0xa8>)
 800802c:	4823      	ldr	r0, [pc, #140]	@ (80080bc <__d2b+0xac>)
 800802e:	f001 f90d 	bl	800924c <__assert_func>
 8008032:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008036:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800803a:	b10d      	cbz	r5, 8008040 <__d2b+0x30>
 800803c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	f1b8 0300 	subs.w	r3, r8, #0
 8008046:	d024      	beq.n	8008092 <__d2b+0x82>
 8008048:	4668      	mov	r0, sp
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	f7ff fd17 	bl	8007a7e <__lo0bits>
 8008050:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008054:	b1d8      	cbz	r0, 800808e <__d2b+0x7e>
 8008056:	f1c0 0320 	rsb	r3, r0, #32
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	430b      	orrs	r3, r1
 8008060:	40c2      	lsrs	r2, r0
 8008062:	6163      	str	r3, [r4, #20]
 8008064:	9201      	str	r2, [sp, #4]
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bf0c      	ite	eq
 800806c:	2201      	moveq	r2, #1
 800806e:	2202      	movne	r2, #2
 8008070:	61a3      	str	r3, [r4, #24]
 8008072:	6122      	str	r2, [r4, #16]
 8008074:	b1ad      	cbz	r5, 80080a2 <__d2b+0x92>
 8008076:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800807a:	4405      	add	r5, r0
 800807c:	6035      	str	r5, [r6, #0]
 800807e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008084:	6018      	str	r0, [r3, #0]
 8008086:	4620      	mov	r0, r4
 8008088:	b002      	add	sp, #8
 800808a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800808e:	6161      	str	r1, [r4, #20]
 8008090:	e7e9      	b.n	8008066 <__d2b+0x56>
 8008092:	a801      	add	r0, sp, #4
 8008094:	f7ff fcf3 	bl	8007a7e <__lo0bits>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	6163      	str	r3, [r4, #20]
 800809e:	3020      	adds	r0, #32
 80080a0:	e7e7      	b.n	8008072 <__d2b+0x62>
 80080a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080aa:	6030      	str	r0, [r6, #0]
 80080ac:	6918      	ldr	r0, [r3, #16]
 80080ae:	f7ff fcc7 	bl	8007a40 <__hi0bits>
 80080b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080b6:	e7e4      	b.n	8008082 <__d2b+0x72>
 80080b8:	0800a13c 	.word	0x0800a13c
 80080bc:	0800a14d 	.word	0x0800a14d

080080c0 <__ratio>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	b085      	sub	sp, #20
 80080c6:	e9cd 1000 	strd	r1, r0, [sp]
 80080ca:	a902      	add	r1, sp, #8
 80080cc:	f7ff ff58 	bl	8007f80 <__b2d>
 80080d0:	468b      	mov	fp, r1
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	9800      	ldr	r0, [sp, #0]
 80080d8:	a903      	add	r1, sp, #12
 80080da:	f7ff ff51 	bl	8007f80 <__b2d>
 80080de:	460d      	mov	r5, r1
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	4689      	mov	r9, r1
 80080e4:	6919      	ldr	r1, [r3, #16]
 80080e6:	9b00      	ldr	r3, [sp, #0]
 80080e8:	4604      	mov	r4, r0
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	4630      	mov	r0, r6
 80080ee:	1ac9      	subs	r1, r1, r3
 80080f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bfcd      	iteet	gt
 80080fe:	463a      	movgt	r2, r7
 8008100:	462a      	movle	r2, r5
 8008102:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008106:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800810a:	bfd8      	it	le
 800810c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008110:	464b      	mov	r3, r9
 8008112:	4622      	mov	r2, r4
 8008114:	4659      	mov	r1, fp
 8008116:	f7f8 fb09 	bl	800072c <__aeabi_ddiv>
 800811a:	b005      	add	sp, #20
 800811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008120 <__copybits>:
 8008120:	3901      	subs	r1, #1
 8008122:	b570      	push	{r4, r5, r6, lr}
 8008124:	1149      	asrs	r1, r1, #5
 8008126:	6914      	ldr	r4, [r2, #16]
 8008128:	3101      	adds	r1, #1
 800812a:	f102 0314 	add.w	r3, r2, #20
 800812e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008132:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008136:	1f05      	subs	r5, r0, #4
 8008138:	42a3      	cmp	r3, r4
 800813a:	d30c      	bcc.n	8008156 <__copybits+0x36>
 800813c:	1aa3      	subs	r3, r4, r2
 800813e:	3b11      	subs	r3, #17
 8008140:	f023 0303 	bic.w	r3, r3, #3
 8008144:	3211      	adds	r2, #17
 8008146:	42a2      	cmp	r2, r4
 8008148:	bf88      	it	hi
 800814a:	2300      	movhi	r3, #0
 800814c:	4418      	add	r0, r3
 800814e:	2300      	movs	r3, #0
 8008150:	4288      	cmp	r0, r1
 8008152:	d305      	bcc.n	8008160 <__copybits+0x40>
 8008154:	bd70      	pop	{r4, r5, r6, pc}
 8008156:	f853 6b04 	ldr.w	r6, [r3], #4
 800815a:	f845 6f04 	str.w	r6, [r5, #4]!
 800815e:	e7eb      	b.n	8008138 <__copybits+0x18>
 8008160:	f840 3b04 	str.w	r3, [r0], #4
 8008164:	e7f4      	b.n	8008150 <__copybits+0x30>

08008166 <__any_on>:
 8008166:	f100 0214 	add.w	r2, r0, #20
 800816a:	6900      	ldr	r0, [r0, #16]
 800816c:	114b      	asrs	r3, r1, #5
 800816e:	4298      	cmp	r0, r3
 8008170:	b510      	push	{r4, lr}
 8008172:	db11      	blt.n	8008198 <__any_on+0x32>
 8008174:	dd0a      	ble.n	800818c <__any_on+0x26>
 8008176:	f011 011f 	ands.w	r1, r1, #31
 800817a:	d007      	beq.n	800818c <__any_on+0x26>
 800817c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008180:	fa24 f001 	lsr.w	r0, r4, r1
 8008184:	fa00 f101 	lsl.w	r1, r0, r1
 8008188:	428c      	cmp	r4, r1
 800818a:	d10b      	bne.n	80081a4 <__any_on+0x3e>
 800818c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008190:	4293      	cmp	r3, r2
 8008192:	d803      	bhi.n	800819c <__any_on+0x36>
 8008194:	2000      	movs	r0, #0
 8008196:	bd10      	pop	{r4, pc}
 8008198:	4603      	mov	r3, r0
 800819a:	e7f7      	b.n	800818c <__any_on+0x26>
 800819c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081a0:	2900      	cmp	r1, #0
 80081a2:	d0f5      	beq.n	8008190 <__any_on+0x2a>
 80081a4:	2001      	movs	r0, #1
 80081a6:	e7f6      	b.n	8008196 <__any_on+0x30>

080081a8 <sulp>:
 80081a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ac:	460f      	mov	r7, r1
 80081ae:	4690      	mov	r8, r2
 80081b0:	f7ff fec6 	bl	8007f40 <__ulp>
 80081b4:	4604      	mov	r4, r0
 80081b6:	460d      	mov	r5, r1
 80081b8:	f1b8 0f00 	cmp.w	r8, #0
 80081bc:	d011      	beq.n	80081e2 <sulp+0x3a>
 80081be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80081c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	dd0b      	ble.n	80081e2 <sulp+0x3a>
 80081ca:	2400      	movs	r4, #0
 80081cc:	051b      	lsls	r3, r3, #20
 80081ce:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081d2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80081d6:	4622      	mov	r2, r4
 80081d8:	462b      	mov	r3, r5
 80081da:	f7f8 f97d 	bl	80004d8 <__aeabi_dmul>
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
 80081e2:	4620      	mov	r0, r4
 80081e4:	4629      	mov	r1, r5
 80081e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ea:	0000      	movs	r0, r0
 80081ec:	0000      	movs	r0, r0
	...

080081f0 <_strtod_l>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	b09f      	sub	sp, #124	@ 0x7c
 80081f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80081f8:	2200      	movs	r2, #0
 80081fa:	460c      	mov	r4, r1
 80081fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80081fe:	f04f 0a00 	mov.w	sl, #0
 8008202:	f04f 0b00 	mov.w	fp, #0
 8008206:	460a      	mov	r2, r1
 8008208:	9005      	str	r0, [sp, #20]
 800820a:	9219      	str	r2, [sp, #100]	@ 0x64
 800820c:	7811      	ldrb	r1, [r2, #0]
 800820e:	292b      	cmp	r1, #43	@ 0x2b
 8008210:	d048      	beq.n	80082a4 <_strtod_l+0xb4>
 8008212:	d836      	bhi.n	8008282 <_strtod_l+0x92>
 8008214:	290d      	cmp	r1, #13
 8008216:	d830      	bhi.n	800827a <_strtod_l+0x8a>
 8008218:	2908      	cmp	r1, #8
 800821a:	d830      	bhi.n	800827e <_strtod_l+0x8e>
 800821c:	2900      	cmp	r1, #0
 800821e:	d039      	beq.n	8008294 <_strtod_l+0xa4>
 8008220:	2200      	movs	r2, #0
 8008222:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008224:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008226:	782a      	ldrb	r2, [r5, #0]
 8008228:	2a30      	cmp	r2, #48	@ 0x30
 800822a:	f040 80b1 	bne.w	8008390 <_strtod_l+0x1a0>
 800822e:	786a      	ldrb	r2, [r5, #1]
 8008230:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008234:	2a58      	cmp	r2, #88	@ 0x58
 8008236:	d16c      	bne.n	8008312 <_strtod_l+0x122>
 8008238:	9302      	str	r3, [sp, #8]
 800823a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800823c:	4a8e      	ldr	r2, [pc, #568]	@ (8008478 <_strtod_l+0x288>)
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	ab1a      	add	r3, sp, #104	@ 0x68
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	9805      	ldr	r0, [sp, #20]
 8008246:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008248:	a919      	add	r1, sp, #100	@ 0x64
 800824a:	f001 f899 	bl	8009380 <__gethex>
 800824e:	f010 060f 	ands.w	r6, r0, #15
 8008252:	4604      	mov	r4, r0
 8008254:	d005      	beq.n	8008262 <_strtod_l+0x72>
 8008256:	2e06      	cmp	r6, #6
 8008258:	d126      	bne.n	80082a8 <_strtod_l+0xb8>
 800825a:	2300      	movs	r3, #0
 800825c:	3501      	adds	r5, #1
 800825e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 8584 	bne.w	8008d72 <_strtod_l+0xb82>
 800826a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800826c:	b1bb      	cbz	r3, 800829e <_strtod_l+0xae>
 800826e:	4650      	mov	r0, sl
 8008270:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008274:	b01f      	add	sp, #124	@ 0x7c
 8008276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827a:	2920      	cmp	r1, #32
 800827c:	d1d0      	bne.n	8008220 <_strtod_l+0x30>
 800827e:	3201      	adds	r2, #1
 8008280:	e7c3      	b.n	800820a <_strtod_l+0x1a>
 8008282:	292d      	cmp	r1, #45	@ 0x2d
 8008284:	d1cc      	bne.n	8008220 <_strtod_l+0x30>
 8008286:	2101      	movs	r1, #1
 8008288:	910b      	str	r1, [sp, #44]	@ 0x2c
 800828a:	1c51      	adds	r1, r2, #1
 800828c:	9119      	str	r1, [sp, #100]	@ 0x64
 800828e:	7852      	ldrb	r2, [r2, #1]
 8008290:	2a00      	cmp	r2, #0
 8008292:	d1c7      	bne.n	8008224 <_strtod_l+0x34>
 8008294:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008296:	9419      	str	r4, [sp, #100]	@ 0x64
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 8568 	bne.w	8008d6e <_strtod_l+0xb7e>
 800829e:	4650      	mov	r0, sl
 80082a0:	4659      	mov	r1, fp
 80082a2:	e7e7      	b.n	8008274 <_strtod_l+0x84>
 80082a4:	2100      	movs	r1, #0
 80082a6:	e7ef      	b.n	8008288 <_strtod_l+0x98>
 80082a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082aa:	b13a      	cbz	r2, 80082bc <_strtod_l+0xcc>
 80082ac:	2135      	movs	r1, #53	@ 0x35
 80082ae:	a81c      	add	r0, sp, #112	@ 0x70
 80082b0:	f7ff ff36 	bl	8008120 <__copybits>
 80082b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082b6:	9805      	ldr	r0, [sp, #20]
 80082b8:	f7ff fb10 	bl	80078dc <_Bfree>
 80082bc:	3e01      	subs	r6, #1
 80082be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082c0:	2e04      	cmp	r6, #4
 80082c2:	d806      	bhi.n	80082d2 <_strtod_l+0xe2>
 80082c4:	e8df f006 	tbb	[pc, r6]
 80082c8:	201d0314 	.word	0x201d0314
 80082cc:	14          	.byte	0x14
 80082cd:	00          	.byte	0x00
 80082ce:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082d2:	05e1      	lsls	r1, r4, #23
 80082d4:	bf48      	it	mi
 80082d6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082de:	0d1b      	lsrs	r3, r3, #20
 80082e0:	051b      	lsls	r3, r3, #20
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1bd      	bne.n	8008262 <_strtod_l+0x72>
 80082e6:	f7fe fb21 	bl	800692c <__errno>
 80082ea:	2322      	movs	r3, #34	@ 0x22
 80082ec:	6003      	str	r3, [r0, #0]
 80082ee:	e7b8      	b.n	8008262 <_strtod_l+0x72>
 80082f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80082f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80082f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082fc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008300:	e7e7      	b.n	80082d2 <_strtod_l+0xe2>
 8008302:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800847c <_strtod_l+0x28c>
 8008306:	e7e4      	b.n	80082d2 <_strtod_l+0xe2>
 8008308:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800830c:	f04f 3aff 	mov.w	sl, #4294967295
 8008310:	e7df      	b.n	80082d2 <_strtod_l+0xe2>
 8008312:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	9219      	str	r2, [sp, #100]	@ 0x64
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b30      	cmp	r3, #48	@ 0x30
 800831c:	d0f9      	beq.n	8008312 <_strtod_l+0x122>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d09f      	beq.n	8008262 <_strtod_l+0x72>
 8008322:	2301      	movs	r3, #1
 8008324:	9309      	str	r3, [sp, #36]	@ 0x24
 8008326:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008328:	220a      	movs	r2, #10
 800832a:	930c      	str	r3, [sp, #48]	@ 0x30
 800832c:	2300      	movs	r3, #0
 800832e:	461f      	mov	r7, r3
 8008330:	9308      	str	r3, [sp, #32]
 8008332:	930a      	str	r3, [sp, #40]	@ 0x28
 8008334:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008336:	7805      	ldrb	r5, [r0, #0]
 8008338:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800833c:	b2d9      	uxtb	r1, r3
 800833e:	2909      	cmp	r1, #9
 8008340:	d928      	bls.n	8008394 <_strtod_l+0x1a4>
 8008342:	2201      	movs	r2, #1
 8008344:	494e      	ldr	r1, [pc, #312]	@ (8008480 <_strtod_l+0x290>)
 8008346:	f000 ff4b 	bl	80091e0 <strncmp>
 800834a:	2800      	cmp	r0, #0
 800834c:	d032      	beq.n	80083b4 <_strtod_l+0x1c4>
 800834e:	2000      	movs	r0, #0
 8008350:	462a      	mov	r2, r5
 8008352:	4681      	mov	r9, r0
 8008354:	463d      	mov	r5, r7
 8008356:	4603      	mov	r3, r0
 8008358:	2a65      	cmp	r2, #101	@ 0x65
 800835a:	d001      	beq.n	8008360 <_strtod_l+0x170>
 800835c:	2a45      	cmp	r2, #69	@ 0x45
 800835e:	d114      	bne.n	800838a <_strtod_l+0x19a>
 8008360:	b91d      	cbnz	r5, 800836a <_strtod_l+0x17a>
 8008362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008364:	4302      	orrs	r2, r0
 8008366:	d095      	beq.n	8008294 <_strtod_l+0xa4>
 8008368:	2500      	movs	r5, #0
 800836a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800836c:	1c62      	adds	r2, r4, #1
 800836e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008370:	7862      	ldrb	r2, [r4, #1]
 8008372:	2a2b      	cmp	r2, #43	@ 0x2b
 8008374:	d077      	beq.n	8008466 <_strtod_l+0x276>
 8008376:	2a2d      	cmp	r2, #45	@ 0x2d
 8008378:	d07b      	beq.n	8008472 <_strtod_l+0x282>
 800837a:	f04f 0c00 	mov.w	ip, #0
 800837e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008382:	2909      	cmp	r1, #9
 8008384:	f240 8082 	bls.w	800848c <_strtod_l+0x29c>
 8008388:	9419      	str	r4, [sp, #100]	@ 0x64
 800838a:	f04f 0800 	mov.w	r8, #0
 800838e:	e0a2      	b.n	80084d6 <_strtod_l+0x2e6>
 8008390:	2300      	movs	r3, #0
 8008392:	e7c7      	b.n	8008324 <_strtod_l+0x134>
 8008394:	2f08      	cmp	r7, #8
 8008396:	bfd5      	itete	le
 8008398:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800839a:	9908      	ldrgt	r1, [sp, #32]
 800839c:	fb02 3301 	mlale	r3, r2, r1, r3
 80083a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80083a4:	f100 0001 	add.w	r0, r0, #1
 80083a8:	bfd4      	ite	le
 80083aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80083ac:	9308      	strgt	r3, [sp, #32]
 80083ae:	3701      	adds	r7, #1
 80083b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80083b2:	e7bf      	b.n	8008334 <_strtod_l+0x144>
 80083b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80083ba:	785a      	ldrb	r2, [r3, #1]
 80083bc:	b37f      	cbz	r7, 800841e <_strtod_l+0x22e>
 80083be:	4681      	mov	r9, r0
 80083c0:	463d      	mov	r5, r7
 80083c2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d912      	bls.n	80083f0 <_strtod_l+0x200>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e7c4      	b.n	8008358 <_strtod_l+0x168>
 80083ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083d0:	3001      	adds	r0, #1
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80083d6:	785a      	ldrb	r2, [r3, #1]
 80083d8:	2a30      	cmp	r2, #48	@ 0x30
 80083da:	d0f8      	beq.n	80083ce <_strtod_l+0x1de>
 80083dc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	f200 84cb 	bhi.w	8008d7c <_strtod_l+0xb8c>
 80083e6:	4681      	mov	r9, r0
 80083e8:	2000      	movs	r0, #0
 80083ea:	4605      	mov	r5, r0
 80083ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80083f0:	3a30      	subs	r2, #48	@ 0x30
 80083f2:	f100 0301 	add.w	r3, r0, #1
 80083f6:	d02a      	beq.n	800844e <_strtod_l+0x25e>
 80083f8:	4499      	add	r9, r3
 80083fa:	210a      	movs	r1, #10
 80083fc:	462b      	mov	r3, r5
 80083fe:	eb00 0c05 	add.w	ip, r0, r5
 8008402:	4563      	cmp	r3, ip
 8008404:	d10d      	bne.n	8008422 <_strtod_l+0x232>
 8008406:	1c69      	adds	r1, r5, #1
 8008408:	4401      	add	r1, r0
 800840a:	4428      	add	r0, r5
 800840c:	2808      	cmp	r0, #8
 800840e:	dc16      	bgt.n	800843e <_strtod_l+0x24e>
 8008410:	230a      	movs	r3, #10
 8008412:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008414:	fb03 2300 	mla	r3, r3, r0, r2
 8008418:	930a      	str	r3, [sp, #40]	@ 0x28
 800841a:	2300      	movs	r3, #0
 800841c:	e018      	b.n	8008450 <_strtod_l+0x260>
 800841e:	4638      	mov	r0, r7
 8008420:	e7da      	b.n	80083d8 <_strtod_l+0x1e8>
 8008422:	2b08      	cmp	r3, #8
 8008424:	f103 0301 	add.w	r3, r3, #1
 8008428:	dc03      	bgt.n	8008432 <_strtod_l+0x242>
 800842a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800842c:	434e      	muls	r6, r1
 800842e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008430:	e7e7      	b.n	8008402 <_strtod_l+0x212>
 8008432:	2b10      	cmp	r3, #16
 8008434:	bfde      	ittt	le
 8008436:	9e08      	ldrle	r6, [sp, #32]
 8008438:	434e      	mulle	r6, r1
 800843a:	9608      	strle	r6, [sp, #32]
 800843c:	e7e1      	b.n	8008402 <_strtod_l+0x212>
 800843e:	280f      	cmp	r0, #15
 8008440:	dceb      	bgt.n	800841a <_strtod_l+0x22a>
 8008442:	230a      	movs	r3, #10
 8008444:	9808      	ldr	r0, [sp, #32]
 8008446:	fb03 2300 	mla	r3, r3, r0, r2
 800844a:	9308      	str	r3, [sp, #32]
 800844c:	e7e5      	b.n	800841a <_strtod_l+0x22a>
 800844e:	4629      	mov	r1, r5
 8008450:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008452:	460d      	mov	r5, r1
 8008454:	1c50      	adds	r0, r2, #1
 8008456:	9019      	str	r0, [sp, #100]	@ 0x64
 8008458:	7852      	ldrb	r2, [r2, #1]
 800845a:	4618      	mov	r0, r3
 800845c:	e7b1      	b.n	80083c2 <_strtod_l+0x1d2>
 800845e:	f04f 0900 	mov.w	r9, #0
 8008462:	2301      	movs	r3, #1
 8008464:	e77d      	b.n	8008362 <_strtod_l+0x172>
 8008466:	f04f 0c00 	mov.w	ip, #0
 800846a:	1ca2      	adds	r2, r4, #2
 800846c:	9219      	str	r2, [sp, #100]	@ 0x64
 800846e:	78a2      	ldrb	r2, [r4, #2]
 8008470:	e785      	b.n	800837e <_strtod_l+0x18e>
 8008472:	f04f 0c01 	mov.w	ip, #1
 8008476:	e7f8      	b.n	800846a <_strtod_l+0x27a>
 8008478:	0800a2c0 	.word	0x0800a2c0
 800847c:	7ff00000 	.word	0x7ff00000
 8008480:	0800a2a8 	.word	0x0800a2a8
 8008484:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008486:	1c51      	adds	r1, r2, #1
 8008488:	9119      	str	r1, [sp, #100]	@ 0x64
 800848a:	7852      	ldrb	r2, [r2, #1]
 800848c:	2a30      	cmp	r2, #48	@ 0x30
 800848e:	d0f9      	beq.n	8008484 <_strtod_l+0x294>
 8008490:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008494:	2908      	cmp	r1, #8
 8008496:	f63f af78 	bhi.w	800838a <_strtod_l+0x19a>
 800849a:	f04f 080a 	mov.w	r8, #10
 800849e:	3a30      	subs	r2, #48	@ 0x30
 80084a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80084a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80084a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084a8:	1c56      	adds	r6, r2, #1
 80084aa:	9619      	str	r6, [sp, #100]	@ 0x64
 80084ac:	7852      	ldrb	r2, [r2, #1]
 80084ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80084b2:	f1be 0f09 	cmp.w	lr, #9
 80084b6:	d939      	bls.n	800852c <_strtod_l+0x33c>
 80084b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80084ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80084be:	1a76      	subs	r6, r6, r1
 80084c0:	2e08      	cmp	r6, #8
 80084c2:	dc03      	bgt.n	80084cc <_strtod_l+0x2dc>
 80084c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80084c6:	4588      	cmp	r8, r1
 80084c8:	bfa8      	it	ge
 80084ca:	4688      	movge	r8, r1
 80084cc:	f1bc 0f00 	cmp.w	ip, #0
 80084d0:	d001      	beq.n	80084d6 <_strtod_l+0x2e6>
 80084d2:	f1c8 0800 	rsb	r8, r8, #0
 80084d6:	2d00      	cmp	r5, #0
 80084d8:	d14e      	bne.n	8008578 <_strtod_l+0x388>
 80084da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084dc:	4308      	orrs	r0, r1
 80084de:	f47f aec0 	bne.w	8008262 <_strtod_l+0x72>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f47f aed6 	bne.w	8008294 <_strtod_l+0xa4>
 80084e8:	2a69      	cmp	r2, #105	@ 0x69
 80084ea:	d028      	beq.n	800853e <_strtod_l+0x34e>
 80084ec:	dc25      	bgt.n	800853a <_strtod_l+0x34a>
 80084ee:	2a49      	cmp	r2, #73	@ 0x49
 80084f0:	d025      	beq.n	800853e <_strtod_l+0x34e>
 80084f2:	2a4e      	cmp	r2, #78	@ 0x4e
 80084f4:	f47f aece 	bne.w	8008294 <_strtod_l+0xa4>
 80084f8:	499a      	ldr	r1, [pc, #616]	@ (8008764 <_strtod_l+0x574>)
 80084fa:	a819      	add	r0, sp, #100	@ 0x64
 80084fc:	f001 f962 	bl	80097c4 <__match>
 8008500:	2800      	cmp	r0, #0
 8008502:	f43f aec7 	beq.w	8008294 <_strtod_l+0xa4>
 8008506:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b28      	cmp	r3, #40	@ 0x28
 800850c:	d12e      	bne.n	800856c <_strtod_l+0x37c>
 800850e:	4996      	ldr	r1, [pc, #600]	@ (8008768 <_strtod_l+0x578>)
 8008510:	aa1c      	add	r2, sp, #112	@ 0x70
 8008512:	a819      	add	r0, sp, #100	@ 0x64
 8008514:	f001 f96a 	bl	80097ec <__hexnan>
 8008518:	2805      	cmp	r0, #5
 800851a:	d127      	bne.n	800856c <_strtod_l+0x37c>
 800851c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800851e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008522:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008526:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800852a:	e69a      	b.n	8008262 <_strtod_l+0x72>
 800852c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800852e:	fb08 2101 	mla	r1, r8, r1, r2
 8008532:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008536:	920e      	str	r2, [sp, #56]	@ 0x38
 8008538:	e7b5      	b.n	80084a6 <_strtod_l+0x2b6>
 800853a:	2a6e      	cmp	r2, #110	@ 0x6e
 800853c:	e7da      	b.n	80084f4 <_strtod_l+0x304>
 800853e:	498b      	ldr	r1, [pc, #556]	@ (800876c <_strtod_l+0x57c>)
 8008540:	a819      	add	r0, sp, #100	@ 0x64
 8008542:	f001 f93f 	bl	80097c4 <__match>
 8008546:	2800      	cmp	r0, #0
 8008548:	f43f aea4 	beq.w	8008294 <_strtod_l+0xa4>
 800854c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800854e:	4988      	ldr	r1, [pc, #544]	@ (8008770 <_strtod_l+0x580>)
 8008550:	3b01      	subs	r3, #1
 8008552:	a819      	add	r0, sp, #100	@ 0x64
 8008554:	9319      	str	r3, [sp, #100]	@ 0x64
 8008556:	f001 f935 	bl	80097c4 <__match>
 800855a:	b910      	cbnz	r0, 8008562 <_strtod_l+0x372>
 800855c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800855e:	3301      	adds	r3, #1
 8008560:	9319      	str	r3, [sp, #100]	@ 0x64
 8008562:	f04f 0a00 	mov.w	sl, #0
 8008566:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008774 <_strtod_l+0x584>
 800856a:	e67a      	b.n	8008262 <_strtod_l+0x72>
 800856c:	4882      	ldr	r0, [pc, #520]	@ (8008778 <_strtod_l+0x588>)
 800856e:	f000 fe67 	bl	8009240 <nan>
 8008572:	4682      	mov	sl, r0
 8008574:	468b      	mov	fp, r1
 8008576:	e674      	b.n	8008262 <_strtod_l+0x72>
 8008578:	eba8 0309 	sub.w	r3, r8, r9
 800857c:	2f00      	cmp	r7, #0
 800857e:	bf08      	it	eq
 8008580:	462f      	moveq	r7, r5
 8008582:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008584:	2d10      	cmp	r5, #16
 8008586:	462c      	mov	r4, r5
 8008588:	9309      	str	r3, [sp, #36]	@ 0x24
 800858a:	bfa8      	it	ge
 800858c:	2410      	movge	r4, #16
 800858e:	f7f7 ff29 	bl	80003e4 <__aeabi_ui2d>
 8008592:	2d09      	cmp	r5, #9
 8008594:	4682      	mov	sl, r0
 8008596:	468b      	mov	fp, r1
 8008598:	dc11      	bgt.n	80085be <_strtod_l+0x3ce>
 800859a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	f43f ae60 	beq.w	8008262 <_strtod_l+0x72>
 80085a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a4:	dd76      	ble.n	8008694 <_strtod_l+0x4a4>
 80085a6:	2b16      	cmp	r3, #22
 80085a8:	dc5d      	bgt.n	8008666 <_strtod_l+0x476>
 80085aa:	4974      	ldr	r1, [pc, #464]	@ (800877c <_strtod_l+0x58c>)
 80085ac:	4652      	mov	r2, sl
 80085ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085b2:	465b      	mov	r3, fp
 80085b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085b8:	f7f7 ff8e 	bl	80004d8 <__aeabi_dmul>
 80085bc:	e7d9      	b.n	8008572 <_strtod_l+0x382>
 80085be:	4b6f      	ldr	r3, [pc, #444]	@ (800877c <_strtod_l+0x58c>)
 80085c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085c8:	f7f7 ff86 	bl	80004d8 <__aeabi_dmul>
 80085cc:	4682      	mov	sl, r0
 80085ce:	9808      	ldr	r0, [sp, #32]
 80085d0:	468b      	mov	fp, r1
 80085d2:	f7f7 ff07 	bl	80003e4 <__aeabi_ui2d>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4650      	mov	r0, sl
 80085dc:	4659      	mov	r1, fp
 80085de:	f7f7 fdc5 	bl	800016c <__adddf3>
 80085e2:	2d0f      	cmp	r5, #15
 80085e4:	4682      	mov	sl, r0
 80085e6:	468b      	mov	fp, r1
 80085e8:	ddd7      	ble.n	800859a <_strtod_l+0x3aa>
 80085ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ec:	1b2c      	subs	r4, r5, r4
 80085ee:	441c      	add	r4, r3
 80085f0:	2c00      	cmp	r4, #0
 80085f2:	f340 8096 	ble.w	8008722 <_strtod_l+0x532>
 80085f6:	f014 030f 	ands.w	r3, r4, #15
 80085fa:	d00a      	beq.n	8008612 <_strtod_l+0x422>
 80085fc:	495f      	ldr	r1, [pc, #380]	@ (800877c <_strtod_l+0x58c>)
 80085fe:	4652      	mov	r2, sl
 8008600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008608:	465b      	mov	r3, fp
 800860a:	f7f7 ff65 	bl	80004d8 <__aeabi_dmul>
 800860e:	4682      	mov	sl, r0
 8008610:	468b      	mov	fp, r1
 8008612:	f034 040f 	bics.w	r4, r4, #15
 8008616:	d073      	beq.n	8008700 <_strtod_l+0x510>
 8008618:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800861c:	dd48      	ble.n	80086b0 <_strtod_l+0x4c0>
 800861e:	2400      	movs	r4, #0
 8008620:	46a0      	mov	r8, r4
 8008622:	46a1      	mov	r9, r4
 8008624:	940a      	str	r4, [sp, #40]	@ 0x28
 8008626:	2322      	movs	r3, #34	@ 0x22
 8008628:	f04f 0a00 	mov.w	sl, #0
 800862c:	9a05      	ldr	r2, [sp, #20]
 800862e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008774 <_strtod_l+0x584>
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008636:	2b00      	cmp	r3, #0
 8008638:	f43f ae13 	beq.w	8008262 <_strtod_l+0x72>
 800863c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800863e:	9805      	ldr	r0, [sp, #20]
 8008640:	f7ff f94c 	bl	80078dc <_Bfree>
 8008644:	4649      	mov	r1, r9
 8008646:	9805      	ldr	r0, [sp, #20]
 8008648:	f7ff f948 	bl	80078dc <_Bfree>
 800864c:	4641      	mov	r1, r8
 800864e:	9805      	ldr	r0, [sp, #20]
 8008650:	f7ff f944 	bl	80078dc <_Bfree>
 8008654:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008656:	9805      	ldr	r0, [sp, #20]
 8008658:	f7ff f940 	bl	80078dc <_Bfree>
 800865c:	4621      	mov	r1, r4
 800865e:	9805      	ldr	r0, [sp, #20]
 8008660:	f7ff f93c 	bl	80078dc <_Bfree>
 8008664:	e5fd      	b.n	8008262 <_strtod_l+0x72>
 8008666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008668:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800866c:	4293      	cmp	r3, r2
 800866e:	dbbc      	blt.n	80085ea <_strtod_l+0x3fa>
 8008670:	4c42      	ldr	r4, [pc, #264]	@ (800877c <_strtod_l+0x58c>)
 8008672:	f1c5 050f 	rsb	r5, r5, #15
 8008676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800867a:	4652      	mov	r2, sl
 800867c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008680:	465b      	mov	r3, fp
 8008682:	f7f7 ff29 	bl	80004d8 <__aeabi_dmul>
 8008686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008688:	1b5d      	subs	r5, r3, r5
 800868a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800868e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008692:	e791      	b.n	80085b8 <_strtod_l+0x3c8>
 8008694:	3316      	adds	r3, #22
 8008696:	dba8      	blt.n	80085ea <_strtod_l+0x3fa>
 8008698:	4b38      	ldr	r3, [pc, #224]	@ (800877c <_strtod_l+0x58c>)
 800869a:	eba9 0808 	sub.w	r8, r9, r8
 800869e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80086a2:	4650      	mov	r0, sl
 80086a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80086a8:	4659      	mov	r1, fp
 80086aa:	f7f8 f83f 	bl	800072c <__aeabi_ddiv>
 80086ae:	e760      	b.n	8008572 <_strtod_l+0x382>
 80086b0:	4b33      	ldr	r3, [pc, #204]	@ (8008780 <_strtod_l+0x590>)
 80086b2:	4650      	mov	r0, sl
 80086b4:	9308      	str	r3, [sp, #32]
 80086b6:	2300      	movs	r3, #0
 80086b8:	4659      	mov	r1, fp
 80086ba:	461e      	mov	r6, r3
 80086bc:	1124      	asrs	r4, r4, #4
 80086be:	2c01      	cmp	r4, #1
 80086c0:	dc21      	bgt.n	8008706 <_strtod_l+0x516>
 80086c2:	b10b      	cbz	r3, 80086c8 <_strtod_l+0x4d8>
 80086c4:	4682      	mov	sl, r0
 80086c6:	468b      	mov	fp, r1
 80086c8:	492d      	ldr	r1, [pc, #180]	@ (8008780 <_strtod_l+0x590>)
 80086ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086d2:	4652      	mov	r2, sl
 80086d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d8:	465b      	mov	r3, fp
 80086da:	f7f7 fefd 	bl	80004d8 <__aeabi_dmul>
 80086de:	4b25      	ldr	r3, [pc, #148]	@ (8008774 <_strtod_l+0x584>)
 80086e0:	460a      	mov	r2, r1
 80086e2:	400b      	ands	r3, r1
 80086e4:	4927      	ldr	r1, [pc, #156]	@ (8008784 <_strtod_l+0x594>)
 80086e6:	4682      	mov	sl, r0
 80086e8:	428b      	cmp	r3, r1
 80086ea:	d898      	bhi.n	800861e <_strtod_l+0x42e>
 80086ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf86      	itte	hi
 80086f4:	f04f 3aff 	movhi.w	sl, #4294967295
 80086f8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008788 <_strtod_l+0x598>
 80086fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008700:	2300      	movs	r3, #0
 8008702:	9308      	str	r3, [sp, #32]
 8008704:	e07a      	b.n	80087fc <_strtod_l+0x60c>
 8008706:	07e2      	lsls	r2, r4, #31
 8008708:	d505      	bpl.n	8008716 <_strtod_l+0x526>
 800870a:	9b08      	ldr	r3, [sp, #32]
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 fee2 	bl	80004d8 <__aeabi_dmul>
 8008714:	2301      	movs	r3, #1
 8008716:	9a08      	ldr	r2, [sp, #32]
 8008718:	3601      	adds	r6, #1
 800871a:	3208      	adds	r2, #8
 800871c:	1064      	asrs	r4, r4, #1
 800871e:	9208      	str	r2, [sp, #32]
 8008720:	e7cd      	b.n	80086be <_strtod_l+0x4ce>
 8008722:	d0ed      	beq.n	8008700 <_strtod_l+0x510>
 8008724:	4264      	negs	r4, r4
 8008726:	f014 020f 	ands.w	r2, r4, #15
 800872a:	d00a      	beq.n	8008742 <_strtod_l+0x552>
 800872c:	4b13      	ldr	r3, [pc, #76]	@ (800877c <_strtod_l+0x58c>)
 800872e:	4650      	mov	r0, sl
 8008730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008734:	4659      	mov	r1, fp
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	f7f7 fff7 	bl	800072c <__aeabi_ddiv>
 800873e:	4682      	mov	sl, r0
 8008740:	468b      	mov	fp, r1
 8008742:	1124      	asrs	r4, r4, #4
 8008744:	d0dc      	beq.n	8008700 <_strtod_l+0x510>
 8008746:	2c1f      	cmp	r4, #31
 8008748:	dd20      	ble.n	800878c <_strtod_l+0x59c>
 800874a:	2400      	movs	r4, #0
 800874c:	46a0      	mov	r8, r4
 800874e:	46a1      	mov	r9, r4
 8008750:	940a      	str	r4, [sp, #40]	@ 0x28
 8008752:	2322      	movs	r3, #34	@ 0x22
 8008754:	9a05      	ldr	r2, [sp, #20]
 8008756:	f04f 0a00 	mov.w	sl, #0
 800875a:	f04f 0b00 	mov.w	fp, #0
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	e768      	b.n	8008634 <_strtod_l+0x444>
 8008762:	bf00      	nop
 8008764:	0800a094 	.word	0x0800a094
 8008768:	0800a2ac 	.word	0x0800a2ac
 800876c:	0800a08c 	.word	0x0800a08c
 8008770:	0800a0c3 	.word	0x0800a0c3
 8008774:	7ff00000 	.word	0x7ff00000
 8008778:	0800a354 	.word	0x0800a354
 800877c:	0800a1e0 	.word	0x0800a1e0
 8008780:	0800a1b8 	.word	0x0800a1b8
 8008784:	7ca00000 	.word	0x7ca00000
 8008788:	7fefffff 	.word	0x7fefffff
 800878c:	f014 0310 	ands.w	r3, r4, #16
 8008790:	bf18      	it	ne
 8008792:	236a      	movne	r3, #106	@ 0x6a
 8008794:	4650      	mov	r0, sl
 8008796:	9308      	str	r3, [sp, #32]
 8008798:	4659      	mov	r1, fp
 800879a:	2300      	movs	r3, #0
 800879c:	4ea9      	ldr	r6, [pc, #676]	@ (8008a44 <_strtod_l+0x854>)
 800879e:	07e2      	lsls	r2, r4, #31
 80087a0:	d504      	bpl.n	80087ac <_strtod_l+0x5bc>
 80087a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087a6:	f7f7 fe97 	bl	80004d8 <__aeabi_dmul>
 80087aa:	2301      	movs	r3, #1
 80087ac:	1064      	asrs	r4, r4, #1
 80087ae:	f106 0608 	add.w	r6, r6, #8
 80087b2:	d1f4      	bne.n	800879e <_strtod_l+0x5ae>
 80087b4:	b10b      	cbz	r3, 80087ba <_strtod_l+0x5ca>
 80087b6:	4682      	mov	sl, r0
 80087b8:	468b      	mov	fp, r1
 80087ba:	9b08      	ldr	r3, [sp, #32]
 80087bc:	b1b3      	cbz	r3, 80087ec <_strtod_l+0x5fc>
 80087be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	4659      	mov	r1, fp
 80087ca:	dd0f      	ble.n	80087ec <_strtod_l+0x5fc>
 80087cc:	2b1f      	cmp	r3, #31
 80087ce:	dd57      	ble.n	8008880 <_strtod_l+0x690>
 80087d0:	2b34      	cmp	r3, #52	@ 0x34
 80087d2:	bfd8      	it	le
 80087d4:	f04f 33ff 	movle.w	r3, #4294967295
 80087d8:	f04f 0a00 	mov.w	sl, #0
 80087dc:	bfcf      	iteee	gt
 80087de:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80087e2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80087e6:	4093      	lslle	r3, r2
 80087e8:	ea03 0b01 	andle.w	fp, r3, r1
 80087ec:	2200      	movs	r2, #0
 80087ee:	2300      	movs	r3, #0
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	f7f8 f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d1a6      	bne.n	800874a <_strtod_l+0x55a>
 80087fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087fe:	463a      	mov	r2, r7
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008804:	462b      	mov	r3, r5
 8008806:	9805      	ldr	r0, [sp, #20]
 8008808:	f7ff f8d0 	bl	80079ac <__s2b>
 800880c:	900a      	str	r0, [sp, #40]	@ 0x28
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f af05 	beq.w	800861e <_strtod_l+0x42e>
 8008814:	2400      	movs	r4, #0
 8008816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008818:	eba9 0308 	sub.w	r3, r9, r8
 800881c:	2a00      	cmp	r2, #0
 800881e:	bfa8      	it	ge
 8008820:	2300      	movge	r3, #0
 8008822:	46a0      	mov	r8, r4
 8008824:	9312      	str	r3, [sp, #72]	@ 0x48
 8008826:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800882a:	9316      	str	r3, [sp, #88]	@ 0x58
 800882c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800882e:	9805      	ldr	r0, [sp, #20]
 8008830:	6859      	ldr	r1, [r3, #4]
 8008832:	f7ff f813 	bl	800785c <_Balloc>
 8008836:	4681      	mov	r9, r0
 8008838:	2800      	cmp	r0, #0
 800883a:	f43f aef4 	beq.w	8008626 <_strtod_l+0x436>
 800883e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008840:	300c      	adds	r0, #12
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	f103 010c 	add.w	r1, r3, #12
 8008848:	3202      	adds	r2, #2
 800884a:	0092      	lsls	r2, r2, #2
 800884c:	f000 fcea 	bl	8009224 <memcpy>
 8008850:	ab1c      	add	r3, sp, #112	@ 0x70
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	4652      	mov	r2, sl
 800885a:	465b      	mov	r3, fp
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008862:	f7ff fbd5 	bl	8008010 <__d2b>
 8008866:	901a      	str	r0, [sp, #104]	@ 0x68
 8008868:	2800      	cmp	r0, #0
 800886a:	f43f aedc 	beq.w	8008626 <_strtod_l+0x436>
 800886e:	2101      	movs	r1, #1
 8008870:	9805      	ldr	r0, [sp, #20]
 8008872:	f7ff f931 	bl	8007ad8 <__i2b>
 8008876:	4680      	mov	r8, r0
 8008878:	b948      	cbnz	r0, 800888e <_strtod_l+0x69e>
 800887a:	f04f 0800 	mov.w	r8, #0
 800887e:	e6d2      	b.n	8008626 <_strtod_l+0x436>
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	fa02 f303 	lsl.w	r3, r2, r3
 8008888:	ea03 0a0a 	and.w	sl, r3, sl
 800888c:	e7ae      	b.n	80087ec <_strtod_l+0x5fc>
 800888e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008890:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008892:	2d00      	cmp	r5, #0
 8008894:	bfab      	itete	ge
 8008896:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008898:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800889a:	18ef      	addge	r7, r5, r3
 800889c:	1b5e      	sublt	r6, r3, r5
 800889e:	9b08      	ldr	r3, [sp, #32]
 80088a0:	bfa8      	it	ge
 80088a2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80088a4:	eba5 0503 	sub.w	r5, r5, r3
 80088a8:	4415      	add	r5, r2
 80088aa:	4b67      	ldr	r3, [pc, #412]	@ (8008a48 <_strtod_l+0x858>)
 80088ac:	f105 35ff 	add.w	r5, r5, #4294967295
 80088b0:	bfb8      	it	lt
 80088b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80088b4:	429d      	cmp	r5, r3
 80088b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80088ba:	da50      	bge.n	800895e <_strtod_l+0x76e>
 80088bc:	1b5b      	subs	r3, r3, r5
 80088be:	2b1f      	cmp	r3, #31
 80088c0:	f04f 0101 	mov.w	r1, #1
 80088c4:	eba2 0203 	sub.w	r2, r2, r3
 80088c8:	dc3d      	bgt.n	8008946 <_strtod_l+0x756>
 80088ca:	fa01 f303 	lsl.w	r3, r1, r3
 80088ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088d0:	2300      	movs	r3, #0
 80088d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80088d4:	18bd      	adds	r5, r7, r2
 80088d6:	9b08      	ldr	r3, [sp, #32]
 80088d8:	42af      	cmp	r7, r5
 80088da:	4416      	add	r6, r2
 80088dc:	441e      	add	r6, r3
 80088de:	463b      	mov	r3, r7
 80088e0:	bfa8      	it	ge
 80088e2:	462b      	movge	r3, r5
 80088e4:	42b3      	cmp	r3, r6
 80088e6:	bfa8      	it	ge
 80088e8:	4633      	movge	r3, r6
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfc2      	ittt	gt
 80088ee:	1aed      	subgt	r5, r5, r3
 80088f0:	1af6      	subgt	r6, r6, r3
 80088f2:	1aff      	subgt	r7, r7, r3
 80088f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd16      	ble.n	8008928 <_strtod_l+0x738>
 80088fa:	4641      	mov	r1, r8
 80088fc:	461a      	mov	r2, r3
 80088fe:	9805      	ldr	r0, [sp, #20]
 8008900:	f7ff f9a8 	bl	8007c54 <__pow5mult>
 8008904:	4680      	mov	r8, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	d0b7      	beq.n	800887a <_strtod_l+0x68a>
 800890a:	4601      	mov	r1, r0
 800890c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800890e:	9805      	ldr	r0, [sp, #20]
 8008910:	f7ff f8f8 	bl	8007b04 <__multiply>
 8008914:	900e      	str	r0, [sp, #56]	@ 0x38
 8008916:	2800      	cmp	r0, #0
 8008918:	f43f ae85 	beq.w	8008626 <_strtod_l+0x436>
 800891c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800891e:	9805      	ldr	r0, [sp, #20]
 8008920:	f7fe ffdc 	bl	80078dc <_Bfree>
 8008924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008926:	931a      	str	r3, [sp, #104]	@ 0x68
 8008928:	2d00      	cmp	r5, #0
 800892a:	dc1d      	bgt.n	8008968 <_strtod_l+0x778>
 800892c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800892e:	2b00      	cmp	r3, #0
 8008930:	dd23      	ble.n	800897a <_strtod_l+0x78a>
 8008932:	4649      	mov	r1, r9
 8008934:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008936:	9805      	ldr	r0, [sp, #20]
 8008938:	f7ff f98c 	bl	8007c54 <__pow5mult>
 800893c:	4681      	mov	r9, r0
 800893e:	b9e0      	cbnz	r0, 800897a <_strtod_l+0x78a>
 8008940:	f04f 0900 	mov.w	r9, #0
 8008944:	e66f      	b.n	8008626 <_strtod_l+0x436>
 8008946:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800894a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800894e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008952:	35e2      	adds	r5, #226	@ 0xe2
 8008954:	fa01 f305 	lsl.w	r3, r1, r5
 8008958:	9310      	str	r3, [sp, #64]	@ 0x40
 800895a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800895c:	e7ba      	b.n	80088d4 <_strtod_l+0x6e4>
 800895e:	2300      	movs	r3, #0
 8008960:	9310      	str	r3, [sp, #64]	@ 0x40
 8008962:	2301      	movs	r3, #1
 8008964:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008966:	e7b5      	b.n	80088d4 <_strtod_l+0x6e4>
 8008968:	462a      	mov	r2, r5
 800896a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800896c:	9805      	ldr	r0, [sp, #20]
 800896e:	f7ff f9cb 	bl	8007d08 <__lshift>
 8008972:	901a      	str	r0, [sp, #104]	@ 0x68
 8008974:	2800      	cmp	r0, #0
 8008976:	d1d9      	bne.n	800892c <_strtod_l+0x73c>
 8008978:	e655      	b.n	8008626 <_strtod_l+0x436>
 800897a:	2e00      	cmp	r6, #0
 800897c:	dd07      	ble.n	800898e <_strtod_l+0x79e>
 800897e:	4649      	mov	r1, r9
 8008980:	4632      	mov	r2, r6
 8008982:	9805      	ldr	r0, [sp, #20]
 8008984:	f7ff f9c0 	bl	8007d08 <__lshift>
 8008988:	4681      	mov	r9, r0
 800898a:	2800      	cmp	r0, #0
 800898c:	d0d8      	beq.n	8008940 <_strtod_l+0x750>
 800898e:	2f00      	cmp	r7, #0
 8008990:	dd08      	ble.n	80089a4 <_strtod_l+0x7b4>
 8008992:	4641      	mov	r1, r8
 8008994:	463a      	mov	r2, r7
 8008996:	9805      	ldr	r0, [sp, #20]
 8008998:	f7ff f9b6 	bl	8007d08 <__lshift>
 800899c:	4680      	mov	r8, r0
 800899e:	2800      	cmp	r0, #0
 80089a0:	f43f ae41 	beq.w	8008626 <_strtod_l+0x436>
 80089a4:	464a      	mov	r2, r9
 80089a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089a8:	9805      	ldr	r0, [sp, #20]
 80089aa:	f7ff fa35 	bl	8007e18 <__mdiff>
 80089ae:	4604      	mov	r4, r0
 80089b0:	2800      	cmp	r0, #0
 80089b2:	f43f ae38 	beq.w	8008626 <_strtod_l+0x436>
 80089b6:	68c3      	ldr	r3, [r0, #12]
 80089b8:	4641      	mov	r1, r8
 80089ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089bc:	2300      	movs	r3, #0
 80089be:	60c3      	str	r3, [r0, #12]
 80089c0:	f7ff fa0e 	bl	8007de0 <__mcmp>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	da45      	bge.n	8008a54 <_strtod_l+0x864>
 80089c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ca:	ea53 030a 	orrs.w	r3, r3, sl
 80089ce:	d16b      	bne.n	8008aa8 <_strtod_l+0x8b8>
 80089d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d167      	bne.n	8008aa8 <_strtod_l+0x8b8>
 80089d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089dc:	0d1b      	lsrs	r3, r3, #20
 80089de:	051b      	lsls	r3, r3, #20
 80089e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089e4:	d960      	bls.n	8008aa8 <_strtod_l+0x8b8>
 80089e6:	6963      	ldr	r3, [r4, #20]
 80089e8:	b913      	cbnz	r3, 80089f0 <_strtod_l+0x800>
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	dd5b      	ble.n	8008aa8 <_strtod_l+0x8b8>
 80089f0:	4621      	mov	r1, r4
 80089f2:	2201      	movs	r2, #1
 80089f4:	9805      	ldr	r0, [sp, #20]
 80089f6:	f7ff f987 	bl	8007d08 <__lshift>
 80089fa:	4641      	mov	r1, r8
 80089fc:	4604      	mov	r4, r0
 80089fe:	f7ff f9ef 	bl	8007de0 <__mcmp>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	dd50      	ble.n	8008aa8 <_strtod_l+0x8b8>
 8008a06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a0a:	9a08      	ldr	r2, [sp, #32]
 8008a0c:	0d1b      	lsrs	r3, r3, #20
 8008a0e:	051b      	lsls	r3, r3, #20
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	d06a      	beq.n	8008aea <_strtod_l+0x8fa>
 8008a14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a18:	d867      	bhi.n	8008aea <_strtod_l+0x8fa>
 8008a1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a1e:	f67f ae98 	bls.w	8008752 <_strtod_l+0x562>
 8008a22:	4650      	mov	r0, sl
 8008a24:	4659      	mov	r1, fp
 8008a26:	4b09      	ldr	r3, [pc, #36]	@ (8008a4c <_strtod_l+0x85c>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f7f7 fd55 	bl	80004d8 <__aeabi_dmul>
 8008a2e:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <_strtod_l+0x860>)
 8008a30:	4682      	mov	sl, r0
 8008a32:	400b      	ands	r3, r1
 8008a34:	468b      	mov	fp, r1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f47f ae00 	bne.w	800863c <_strtod_l+0x44c>
 8008a3c:	2322      	movs	r3, #34	@ 0x22
 8008a3e:	9a05      	ldr	r2, [sp, #20]
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	e5fb      	b.n	800863c <_strtod_l+0x44c>
 8008a44:	0800a2d8 	.word	0x0800a2d8
 8008a48:	fffffc02 	.word	0xfffffc02
 8008a4c:	39500000 	.word	0x39500000
 8008a50:	7ff00000 	.word	0x7ff00000
 8008a54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a58:	d165      	bne.n	8008b26 <_strtod_l+0x936>
 8008a5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a60:	b35a      	cbz	r2, 8008aba <_strtod_l+0x8ca>
 8008a62:	4a99      	ldr	r2, [pc, #612]	@ (8008cc8 <_strtod_l+0xad8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d12b      	bne.n	8008ac0 <_strtod_l+0x8d0>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	4651      	mov	r1, sl
 8008a6c:	b303      	cbz	r3, 8008ab0 <_strtod_l+0x8c0>
 8008a6e:	465a      	mov	r2, fp
 8008a70:	4b96      	ldr	r3, [pc, #600]	@ (8008ccc <_strtod_l+0xadc>)
 8008a72:	4013      	ands	r3, r2
 8008a74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	d81b      	bhi.n	8008ab6 <_strtod_l+0x8c6>
 8008a7e:	0d1b      	lsrs	r3, r3, #20
 8008a80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a84:	fa02 f303 	lsl.w	r3, r2, r3
 8008a88:	4299      	cmp	r1, r3
 8008a8a:	d119      	bne.n	8008ac0 <_strtod_l+0x8d0>
 8008a8c:	4b90      	ldr	r3, [pc, #576]	@ (8008cd0 <_strtod_l+0xae0>)
 8008a8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d102      	bne.n	8008a9a <_strtod_l+0x8aa>
 8008a94:	3101      	adds	r1, #1
 8008a96:	f43f adc6 	beq.w	8008626 <_strtod_l+0x436>
 8008a9a:	f04f 0a00 	mov.w	sl, #0
 8008a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8008ccc <_strtod_l+0xadc>)
 8008aa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008aa2:	401a      	ands	r2, r3
 8008aa4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1b9      	bne.n	8008a22 <_strtod_l+0x832>
 8008aae:	e5c5      	b.n	800863c <_strtod_l+0x44c>
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	e7e8      	b.n	8008a88 <_strtod_l+0x898>
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	e7e6      	b.n	8008a88 <_strtod_l+0x898>
 8008aba:	ea53 030a 	orrs.w	r3, r3, sl
 8008abe:	d0a2      	beq.n	8008a06 <_strtod_l+0x816>
 8008ac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ac2:	b1db      	cbz	r3, 8008afc <_strtod_l+0x90c>
 8008ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ac6:	4213      	tst	r3, r2
 8008ac8:	d0ee      	beq.n	8008aa8 <_strtod_l+0x8b8>
 8008aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	9a08      	ldr	r2, [sp, #32]
 8008ad2:	b1bb      	cbz	r3, 8008b04 <_strtod_l+0x914>
 8008ad4:	f7ff fb68 	bl	80081a8 <sulp>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ae0:	f7f7 fb44 	bl	800016c <__adddf3>
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	468b      	mov	fp, r1
 8008ae8:	e7de      	b.n	8008aa8 <_strtod_l+0x8b8>
 8008aea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008aee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008af2:	f04f 3aff 	mov.w	sl, #4294967295
 8008af6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008afa:	e7d5      	b.n	8008aa8 <_strtod_l+0x8b8>
 8008afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008afe:	ea13 0f0a 	tst.w	r3, sl
 8008b02:	e7e1      	b.n	8008ac8 <_strtod_l+0x8d8>
 8008b04:	f7ff fb50 	bl	80081a8 <sulp>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b10:	f7f7 fb2a 	bl	8000168 <__aeabi_dsub>
 8008b14:	2200      	movs	r2, #0
 8008b16:	2300      	movs	r3, #0
 8008b18:	4682      	mov	sl, r0
 8008b1a:	468b      	mov	fp, r1
 8008b1c:	f7f7 ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d0c1      	beq.n	8008aa8 <_strtod_l+0x8b8>
 8008b24:	e615      	b.n	8008752 <_strtod_l+0x562>
 8008b26:	4641      	mov	r1, r8
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7ff fac9 	bl	80080c0 <__ratio>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	f7f7 ff4a 	bl	80009d0 <__aeabi_dcmple>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d06d      	beq.n	8008c1c <_strtod_l+0xa2c>
 8008b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d178      	bne.n	8008c38 <_strtod_l+0xa48>
 8008b46:	f1ba 0f00 	cmp.w	sl, #0
 8008b4a:	d156      	bne.n	8008bfa <_strtod_l+0xa0a>
 8008b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d158      	bne.n	8008c08 <_strtod_l+0xa18>
 8008b56:	2200      	movs	r2, #0
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	4b5d      	ldr	r3, [pc, #372]	@ (8008cd4 <_strtod_l+0xae4>)
 8008b5e:	f7f7 ff2d 	bl	80009bc <__aeabi_dcmplt>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d157      	bne.n	8008c16 <_strtod_l+0xa26>
 8008b66:	4630      	mov	r0, r6
 8008b68:	4639      	mov	r1, r7
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8008cd8 <_strtod_l+0xae8>)
 8008b6e:	f7f7 fcb3 	bl	80004d8 <__aeabi_dmul>
 8008b72:	4606      	mov	r6, r0
 8008b74:	460f      	mov	r7, r1
 8008b76:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b7a:	9606      	str	r6, [sp, #24]
 8008b7c:	9307      	str	r3, [sp, #28]
 8008b7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b82:	4d52      	ldr	r5, [pc, #328]	@ (8008ccc <_strtod_l+0xadc>)
 8008b84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b8a:	401d      	ands	r5, r3
 8008b8c:	4b53      	ldr	r3, [pc, #332]	@ (8008cdc <_strtod_l+0xaec>)
 8008b8e:	429d      	cmp	r5, r3
 8008b90:	f040 80aa 	bne.w	8008ce8 <_strtod_l+0xaf8>
 8008b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b96:	4650      	mov	r0, sl
 8008b98:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	f7ff f9cf 	bl	8007f40 <__ulp>
 8008ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ba6:	f7f7 fc97 	bl	80004d8 <__aeabi_dmul>
 8008baa:	4652      	mov	r2, sl
 8008bac:	465b      	mov	r3, fp
 8008bae:	f7f7 fadd 	bl	800016c <__adddf3>
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4945      	ldr	r1, [pc, #276]	@ (8008ccc <_strtod_l+0xadc>)
 8008bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8008ce0 <_strtod_l+0xaf0>)
 8008bb8:	4019      	ands	r1, r3
 8008bba:	4291      	cmp	r1, r2
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	d942      	bls.n	8008c46 <_strtod_l+0xa56>
 8008bc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bc2:	4b43      	ldr	r3, [pc, #268]	@ (8008cd0 <_strtod_l+0xae0>)
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d103      	bne.n	8008bd0 <_strtod_l+0x9e0>
 8008bc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f43f ad2b 	beq.w	8008626 <_strtod_l+0x436>
 8008bd0:	f04f 3aff 	mov.w	sl, #4294967295
 8008bd4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008cd0 <_strtod_l+0xae0>
 8008bd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bda:	9805      	ldr	r0, [sp, #20]
 8008bdc:	f7fe fe7e 	bl	80078dc <_Bfree>
 8008be0:	4649      	mov	r1, r9
 8008be2:	9805      	ldr	r0, [sp, #20]
 8008be4:	f7fe fe7a 	bl	80078dc <_Bfree>
 8008be8:	4641      	mov	r1, r8
 8008bea:	9805      	ldr	r0, [sp, #20]
 8008bec:	f7fe fe76 	bl	80078dc <_Bfree>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	9805      	ldr	r0, [sp, #20]
 8008bf4:	f7fe fe72 	bl	80078dc <_Bfree>
 8008bf8:	e618      	b.n	800882c <_strtod_l+0x63c>
 8008bfa:	f1ba 0f01 	cmp.w	sl, #1
 8008bfe:	d103      	bne.n	8008c08 <_strtod_l+0xa18>
 8008c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f43f ada5 	beq.w	8008752 <_strtod_l+0x562>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4b36      	ldr	r3, [pc, #216]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008c0c:	2600      	movs	r6, #0
 8008c0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c12:	4f30      	ldr	r7, [pc, #192]	@ (8008cd4 <_strtod_l+0xae4>)
 8008c14:	e7b3      	b.n	8008b7e <_strtod_l+0x98e>
 8008c16:	2600      	movs	r6, #0
 8008c18:	4f2f      	ldr	r7, [pc, #188]	@ (8008cd8 <_strtod_l+0xae8>)
 8008c1a:	e7ac      	b.n	8008b76 <_strtod_l+0x986>
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	4639      	mov	r1, r7
 8008c20:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd8 <_strtod_l+0xae8>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	f7f7 fc58 	bl	80004d8 <__aeabi_dmul>
 8008c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d0a1      	beq.n	8008b76 <_strtod_l+0x986>
 8008c32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c36:	e7a2      	b.n	8008b7e <_strtod_l+0x98e>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4b26      	ldr	r3, [pc, #152]	@ (8008cd4 <_strtod_l+0xae4>)
 8008c3c:	4616      	mov	r6, r2
 8008c3e:	461f      	mov	r7, r3
 8008c40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c44:	e79b      	b.n	8008b7e <_strtod_l+0x98e>
 8008c46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c4a:	9b08      	ldr	r3, [sp, #32]
 8008c4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1c1      	bne.n	8008bd8 <_strtod_l+0x9e8>
 8008c54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c58:	0d1b      	lsrs	r3, r3, #20
 8008c5a:	051b      	lsls	r3, r3, #20
 8008c5c:	429d      	cmp	r5, r3
 8008c5e:	d1bb      	bne.n	8008bd8 <_strtod_l+0x9e8>
 8008c60:	4630      	mov	r0, r6
 8008c62:	4639      	mov	r1, r7
 8008c64:	f7f7 ff80 	bl	8000b68 <__aeabi_d2lz>
 8008c68:	f7f7 fc08 	bl	800047c <__aeabi_l2d>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 fa78 	bl	8000168 <__aeabi_dsub>
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008c80:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c86:	ea46 060a 	orr.w	r6, r6, sl
 8008c8a:	431e      	orrs	r6, r3
 8008c8c:	d069      	beq.n	8008d62 <_strtod_l+0xb72>
 8008c8e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008cb8 <_strtod_l+0xac8>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f7f7 fe92 	bl	80009bc <__aeabi_dcmplt>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f47f accf 	bne.w	800863c <_strtod_l+0x44c>
 8008c9e:	a308      	add	r3, pc, #32	@ (adr r3, 8008cc0 <_strtod_l+0xad0>)
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ca8:	f7f7 fea6 	bl	80009f8 <__aeabi_dcmpgt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d093      	beq.n	8008bd8 <_strtod_l+0x9e8>
 8008cb0:	e4c4      	b.n	800863c <_strtod_l+0x44c>
 8008cb2:	bf00      	nop
 8008cb4:	f3af 8000 	nop.w
 8008cb8:	94a03595 	.word	0x94a03595
 8008cbc:	3fdfffff 	.word	0x3fdfffff
 8008cc0:	35afe535 	.word	0x35afe535
 8008cc4:	3fe00000 	.word	0x3fe00000
 8008cc8:	000fffff 	.word	0x000fffff
 8008ccc:	7ff00000 	.word	0x7ff00000
 8008cd0:	7fefffff 	.word	0x7fefffff
 8008cd4:	3ff00000 	.word	0x3ff00000
 8008cd8:	3fe00000 	.word	0x3fe00000
 8008cdc:	7fe00000 	.word	0x7fe00000
 8008ce0:	7c9fffff 	.word	0x7c9fffff
 8008ce4:	bff00000 	.word	0xbff00000
 8008ce8:	9b08      	ldr	r3, [sp, #32]
 8008cea:	b323      	cbz	r3, 8008d36 <_strtod_l+0xb46>
 8008cec:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008cf0:	d821      	bhi.n	8008d36 <_strtod_l+0xb46>
 8008cf2:	a327      	add	r3, pc, #156	@ (adr r3, 8008d90 <_strtod_l+0xba0>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fe68 	bl	80009d0 <__aeabi_dcmple>
 8008d00:	b1a0      	cbz	r0, 8008d2c <_strtod_l+0xb3c>
 8008d02:	4639      	mov	r1, r7
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7f7 febf 	bl	8000a88 <__aeabi_d2uiz>
 8008d0a:	2801      	cmp	r0, #1
 8008d0c:	bf38      	it	cc
 8008d0e:	2001      	movcc	r0, #1
 8008d10:	f7f7 fb68 	bl	80003e4 <__aeabi_ui2d>
 8008d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d16:	4606      	mov	r6, r0
 8008d18:	460f      	mov	r7, r1
 8008d1a:	b9fb      	cbnz	r3, 8008d5c <_strtod_l+0xb6c>
 8008d1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d20:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d22:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d2e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d32:	1b5b      	subs	r3, r3, r5
 8008d34:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d3a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d3e:	f7ff f8ff 	bl	8007f40 <__ulp>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4650      	mov	r0, sl
 8008d48:	4659      	mov	r1, fp
 8008d4a:	f7f7 fbc5 	bl	80004d8 <__aeabi_dmul>
 8008d4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d52:	f7f7 fa0b 	bl	800016c <__adddf3>
 8008d56:	4682      	mov	sl, r0
 8008d58:	468b      	mov	fp, r1
 8008d5a:	e776      	b.n	8008c4a <_strtod_l+0xa5a>
 8008d5c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d60:	e7e0      	b.n	8008d24 <_strtod_l+0xb34>
 8008d62:	a30d      	add	r3, pc, #52	@ (adr r3, 8008d98 <_strtod_l+0xba8>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 fe28 	bl	80009bc <__aeabi_dcmplt>
 8008d6c:	e79e      	b.n	8008cac <_strtod_l+0xabc>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d74:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	f7ff ba77 	b.w	800826a <_strtod_l+0x7a>
 8008d7c:	2a65      	cmp	r2, #101	@ 0x65
 8008d7e:	f43f ab6e 	beq.w	800845e <_strtod_l+0x26e>
 8008d82:	2a45      	cmp	r2, #69	@ 0x45
 8008d84:	f43f ab6b 	beq.w	800845e <_strtod_l+0x26e>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f7ff bba6 	b.w	80084da <_strtod_l+0x2ea>
 8008d8e:	bf00      	nop
 8008d90:	ffc00000 	.word	0xffc00000
 8008d94:	41dfffff 	.word	0x41dfffff
 8008d98:	94a03595 	.word	0x94a03595
 8008d9c:	3fcfffff 	.word	0x3fcfffff

08008da0 <_strtod_r>:
 8008da0:	4b01      	ldr	r3, [pc, #4]	@ (8008da8 <_strtod_r+0x8>)
 8008da2:	f7ff ba25 	b.w	80081f0 <_strtod_l>
 8008da6:	bf00      	nop
 8008da8:	20000070 	.word	0x20000070

08008dac <__ssputs_r>:
 8008dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db0:	461f      	mov	r7, r3
 8008db2:	688e      	ldr	r6, [r1, #8]
 8008db4:	4682      	mov	sl, r0
 8008db6:	42be      	cmp	r6, r7
 8008db8:	460c      	mov	r4, r1
 8008dba:	4690      	mov	r8, r2
 8008dbc:	680b      	ldr	r3, [r1, #0]
 8008dbe:	d82d      	bhi.n	8008e1c <__ssputs_r+0x70>
 8008dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dc8:	d026      	beq.n	8008e18 <__ssputs_r+0x6c>
 8008dca:	6965      	ldr	r5, [r4, #20]
 8008dcc:	6909      	ldr	r1, [r1, #16]
 8008dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd2:	eba3 0901 	sub.w	r9, r3, r1
 8008dd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dda:	1c7b      	adds	r3, r7, #1
 8008ddc:	444b      	add	r3, r9
 8008dde:	106d      	asrs	r5, r5, #1
 8008de0:	429d      	cmp	r5, r3
 8008de2:	bf38      	it	cc
 8008de4:	461d      	movcc	r5, r3
 8008de6:	0553      	lsls	r3, r2, #21
 8008de8:	d527      	bpl.n	8008e3a <__ssputs_r+0x8e>
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7fe fcaa 	bl	8007744 <_malloc_r>
 8008df0:	4606      	mov	r6, r0
 8008df2:	b360      	cbz	r0, 8008e4e <__ssputs_r+0xa2>
 8008df4:	464a      	mov	r2, r9
 8008df6:	6921      	ldr	r1, [r4, #16]
 8008df8:	f000 fa14 	bl	8009224 <memcpy>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	6126      	str	r6, [r4, #16]
 8008e0a:	444e      	add	r6, r9
 8008e0c:	6026      	str	r6, [r4, #0]
 8008e0e:	463e      	mov	r6, r7
 8008e10:	6165      	str	r5, [r4, #20]
 8008e12:	eba5 0509 	sub.w	r5, r5, r9
 8008e16:	60a5      	str	r5, [r4, #8]
 8008e18:	42be      	cmp	r6, r7
 8008e1a:	d900      	bls.n	8008e1e <__ssputs_r+0x72>
 8008e1c:	463e      	mov	r6, r7
 8008e1e:	4632      	mov	r2, r6
 8008e20:	4641      	mov	r1, r8
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	f000 f9c2 	bl	80091ac <memmove>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	1b9b      	subs	r3, r3, r6
 8008e2e:	60a3      	str	r3, [r4, #8]
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	4433      	add	r3, r6
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	f000 fd83 	bl	8009946 <_realloc_r>
 8008e40:	4606      	mov	r6, r0
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d1e0      	bne.n	8008e08 <__ssputs_r+0x5c>
 8008e46:	4650      	mov	r0, sl
 8008e48:	6921      	ldr	r1, [r4, #16]
 8008e4a:	f7fe fc09 	bl	8007660 <_free_r>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	f8ca 3000 	str.w	r3, [sl]
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	e7e9      	b.n	8008e36 <__ssputs_r+0x8a>
	...

08008e64 <_svfiprintf_r>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	4698      	mov	r8, r3
 8008e6a:	898b      	ldrh	r3, [r1, #12]
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	061b      	lsls	r3, r3, #24
 8008e70:	460d      	mov	r5, r1
 8008e72:	4614      	mov	r4, r2
 8008e74:	b09d      	sub	sp, #116	@ 0x74
 8008e76:	d510      	bpl.n	8008e9a <_svfiprintf_r+0x36>
 8008e78:	690b      	ldr	r3, [r1, #16]
 8008e7a:	b973      	cbnz	r3, 8008e9a <_svfiprintf_r+0x36>
 8008e7c:	2140      	movs	r1, #64	@ 0x40
 8008e7e:	f7fe fc61 	bl	8007744 <_malloc_r>
 8008e82:	6028      	str	r0, [r5, #0]
 8008e84:	6128      	str	r0, [r5, #16]
 8008e86:	b930      	cbnz	r0, 8008e96 <_svfiprintf_r+0x32>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	b01d      	add	sp, #116	@ 0x74
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e96:	2340      	movs	r3, #64	@ 0x40
 8008e98:	616b      	str	r3, [r5, #20]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e9e:	2320      	movs	r3, #32
 8008ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ea4:	2330      	movs	r3, #48	@ 0x30
 8008ea6:	f04f 0901 	mov.w	r9, #1
 8008eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009048 <_svfiprintf_r+0x1e4>
 8008eb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebe:	b10a      	cbz	r2, 8008ec4 <_svfiprintf_r+0x60>
 8008ec0:	2a25      	cmp	r2, #37	@ 0x25
 8008ec2:	d1f9      	bne.n	8008eb8 <_svfiprintf_r+0x54>
 8008ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec8:	d00b      	beq.n	8008ee2 <_svfiprintf_r+0x7e>
 8008eca:	465b      	mov	r3, fp
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff ff6b 	bl	8008dac <__ssputs_r>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f000 80a7 	beq.w	800902a <_svfiprintf_r+0x1c6>
 8008edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ede:	445a      	add	r2, fp
 8008ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 809f 	beq.w	800902a <_svfiprintf_r+0x1c6>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef6:	f10a 0a01 	add.w	sl, sl, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f04:	4654      	mov	r4, sl
 8008f06:	2205      	movs	r2, #5
 8008f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0c:	484e      	ldr	r0, [pc, #312]	@ (8009048 <_svfiprintf_r+0x1e4>)
 8008f0e:	f7fd fd42 	bl	8006996 <memchr>
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	b9d8      	cbnz	r0, 8008f4e <_svfiprintf_r+0xea>
 8008f16:	06d0      	lsls	r0, r2, #27
 8008f18:	bf44      	itt	mi
 8008f1a:	2320      	movmi	r3, #32
 8008f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f20:	0711      	lsls	r1, r2, #28
 8008f22:	bf44      	itt	mi
 8008f24:	232b      	movmi	r3, #43	@ 0x2b
 8008f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f30:	d015      	beq.n	8008f5e <_svfiprintf_r+0xfa>
 8008f32:	4654      	mov	r4, sl
 8008f34:	2000      	movs	r0, #0
 8008f36:	f04f 0c0a 	mov.w	ip, #10
 8008f3a:	9a07      	ldr	r2, [sp, #28]
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f42:	3b30      	subs	r3, #48	@ 0x30
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d94b      	bls.n	8008fe0 <_svfiprintf_r+0x17c>
 8008f48:	b1b0      	cbz	r0, 8008f78 <_svfiprintf_r+0x114>
 8008f4a:	9207      	str	r2, [sp, #28]
 8008f4c:	e014      	b.n	8008f78 <_svfiprintf_r+0x114>
 8008f4e:	eba0 0308 	sub.w	r3, r0, r8
 8008f52:	fa09 f303 	lsl.w	r3, r9, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	46a2      	mov	sl, r4
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	e7d2      	b.n	8008f04 <_svfiprintf_r+0xa0>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9103      	str	r1, [sp, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfbb      	ittet	lt
 8008f6a:	425b      	neglt	r3, r3
 8008f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f70:	9307      	strge	r3, [sp, #28]
 8008f72:	9307      	strlt	r3, [sp, #28]
 8008f74:	bfb8      	it	lt
 8008f76:	9204      	strlt	r2, [sp, #16]
 8008f78:	7823      	ldrb	r3, [r4, #0]
 8008f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f7c:	d10a      	bne.n	8008f94 <_svfiprintf_r+0x130>
 8008f7e:	7863      	ldrb	r3, [r4, #1]
 8008f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f82:	d132      	bne.n	8008fea <_svfiprintf_r+0x186>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	3402      	adds	r4, #2
 8008f88:	1d1a      	adds	r2, r3, #4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	9203      	str	r2, [sp, #12]
 8008f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f92:	9305      	str	r3, [sp, #20]
 8008f94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800904c <_svfiprintf_r+0x1e8>
 8008f98:	2203      	movs	r2, #3
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	7821      	ldrb	r1, [r4, #0]
 8008f9e:	f7fd fcfa 	bl	8006996 <memchr>
 8008fa2:	b138      	cbz	r0, 8008fb4 <_svfiprintf_r+0x150>
 8008fa4:	2240      	movs	r2, #64	@ 0x40
 8008fa6:	9b04      	ldr	r3, [sp, #16]
 8008fa8:	eba0 000a 	sub.w	r0, r0, sl
 8008fac:	4082      	lsls	r2, r0
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	3401      	adds	r4, #1
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb8:	2206      	movs	r2, #6
 8008fba:	4825      	ldr	r0, [pc, #148]	@ (8009050 <_svfiprintf_r+0x1ec>)
 8008fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fc0:	f7fd fce9 	bl	8006996 <memchr>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d036      	beq.n	8009036 <_svfiprintf_r+0x1d2>
 8008fc8:	4b22      	ldr	r3, [pc, #136]	@ (8009054 <_svfiprintf_r+0x1f0>)
 8008fca:	bb1b      	cbnz	r3, 8009014 <_svfiprintf_r+0x1b0>
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	3307      	adds	r3, #7
 8008fd0:	f023 0307 	bic.w	r3, r3, #7
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fda:	4433      	add	r3, r6
 8008fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fde:	e76a      	b.n	8008eb6 <_svfiprintf_r+0x52>
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fe8:	e7a8      	b.n	8008f3c <_svfiprintf_r+0xd8>
 8008fea:	2300      	movs	r3, #0
 8008fec:	f04f 0c0a 	mov.w	ip, #10
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	3401      	adds	r4, #1
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffc:	3a30      	subs	r2, #48	@ 0x30
 8008ffe:	2a09      	cmp	r2, #9
 8009000:	d903      	bls.n	800900a <_svfiprintf_r+0x1a6>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0c6      	beq.n	8008f94 <_svfiprintf_r+0x130>
 8009006:	9105      	str	r1, [sp, #20]
 8009008:	e7c4      	b.n	8008f94 <_svfiprintf_r+0x130>
 800900a:	4604      	mov	r4, r0
 800900c:	2301      	movs	r3, #1
 800900e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009012:	e7f0      	b.n	8008ff6 <_svfiprintf_r+0x192>
 8009014:	ab03      	add	r3, sp, #12
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	462a      	mov	r2, r5
 800901a:	4638      	mov	r0, r7
 800901c:	4b0e      	ldr	r3, [pc, #56]	@ (8009058 <_svfiprintf_r+0x1f4>)
 800901e:	a904      	add	r1, sp, #16
 8009020:	f7fc fd2c 	bl	8005a7c <_printf_float>
 8009024:	1c42      	adds	r2, r0, #1
 8009026:	4606      	mov	r6, r0
 8009028:	d1d6      	bne.n	8008fd8 <_svfiprintf_r+0x174>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	065b      	lsls	r3, r3, #25
 800902e:	f53f af2d 	bmi.w	8008e8c <_svfiprintf_r+0x28>
 8009032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009034:	e72c      	b.n	8008e90 <_svfiprintf_r+0x2c>
 8009036:	ab03      	add	r3, sp, #12
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	462a      	mov	r2, r5
 800903c:	4638      	mov	r0, r7
 800903e:	4b06      	ldr	r3, [pc, #24]	@ (8009058 <_svfiprintf_r+0x1f4>)
 8009040:	a904      	add	r1, sp, #16
 8009042:	f7fc ffb9 	bl	8005fb8 <_printf_i>
 8009046:	e7ed      	b.n	8009024 <_svfiprintf_r+0x1c0>
 8009048:	0800a300 	.word	0x0800a300
 800904c:	0800a306 	.word	0x0800a306
 8009050:	0800a30a 	.word	0x0800a30a
 8009054:	08005a7d 	.word	0x08005a7d
 8009058:	08008dad 	.word	0x08008dad

0800905c <__sflush_r>:
 800905c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	0716      	lsls	r6, r2, #28
 8009064:	4605      	mov	r5, r0
 8009066:	460c      	mov	r4, r1
 8009068:	d454      	bmi.n	8009114 <__sflush_r+0xb8>
 800906a:	684b      	ldr	r3, [r1, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	dc02      	bgt.n	8009076 <__sflush_r+0x1a>
 8009070:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009072:	2b00      	cmp	r3, #0
 8009074:	dd48      	ble.n	8009108 <__sflush_r+0xac>
 8009076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009078:	2e00      	cmp	r6, #0
 800907a:	d045      	beq.n	8009108 <__sflush_r+0xac>
 800907c:	2300      	movs	r3, #0
 800907e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009082:	682f      	ldr	r7, [r5, #0]
 8009084:	6a21      	ldr	r1, [r4, #32]
 8009086:	602b      	str	r3, [r5, #0]
 8009088:	d030      	beq.n	80090ec <__sflush_r+0x90>
 800908a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	0759      	lsls	r1, r3, #29
 8009090:	d505      	bpl.n	800909e <__sflush_r+0x42>
 8009092:	6863      	ldr	r3, [r4, #4]
 8009094:	1ad2      	subs	r2, r2, r3
 8009096:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009098:	b10b      	cbz	r3, 800909e <__sflush_r+0x42>
 800909a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800909c:	1ad2      	subs	r2, r2, r3
 800909e:	2300      	movs	r3, #0
 80090a0:	4628      	mov	r0, r5
 80090a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090a4:	6a21      	ldr	r1, [r4, #32]
 80090a6:	47b0      	blx	r6
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	d106      	bne.n	80090bc <__sflush_r+0x60>
 80090ae:	6829      	ldr	r1, [r5, #0]
 80090b0:	291d      	cmp	r1, #29
 80090b2:	d82b      	bhi.n	800910c <__sflush_r+0xb0>
 80090b4:	4a28      	ldr	r2, [pc, #160]	@ (8009158 <__sflush_r+0xfc>)
 80090b6:	410a      	asrs	r2, r1
 80090b8:	07d6      	lsls	r6, r2, #31
 80090ba:	d427      	bmi.n	800910c <__sflush_r+0xb0>
 80090bc:	2200      	movs	r2, #0
 80090be:	6062      	str	r2, [r4, #4]
 80090c0:	6922      	ldr	r2, [r4, #16]
 80090c2:	04d9      	lsls	r1, r3, #19
 80090c4:	6022      	str	r2, [r4, #0]
 80090c6:	d504      	bpl.n	80090d2 <__sflush_r+0x76>
 80090c8:	1c42      	adds	r2, r0, #1
 80090ca:	d101      	bne.n	80090d0 <__sflush_r+0x74>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b903      	cbnz	r3, 80090d2 <__sflush_r+0x76>
 80090d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80090d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090d4:	602f      	str	r7, [r5, #0]
 80090d6:	b1b9      	cbz	r1, 8009108 <__sflush_r+0xac>
 80090d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090dc:	4299      	cmp	r1, r3
 80090de:	d002      	beq.n	80090e6 <__sflush_r+0x8a>
 80090e0:	4628      	mov	r0, r5
 80090e2:	f7fe fabd 	bl	8007660 <_free_r>
 80090e6:	2300      	movs	r3, #0
 80090e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ea:	e00d      	b.n	8009108 <__sflush_r+0xac>
 80090ec:	2301      	movs	r3, #1
 80090ee:	4628      	mov	r0, r5
 80090f0:	47b0      	blx	r6
 80090f2:	4602      	mov	r2, r0
 80090f4:	1c50      	adds	r0, r2, #1
 80090f6:	d1c9      	bne.n	800908c <__sflush_r+0x30>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0c6      	beq.n	800908c <__sflush_r+0x30>
 80090fe:	2b1d      	cmp	r3, #29
 8009100:	d001      	beq.n	8009106 <__sflush_r+0xaa>
 8009102:	2b16      	cmp	r3, #22
 8009104:	d11d      	bne.n	8009142 <__sflush_r+0xe6>
 8009106:	602f      	str	r7, [r5, #0]
 8009108:	2000      	movs	r0, #0
 800910a:	e021      	b.n	8009150 <__sflush_r+0xf4>
 800910c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009110:	b21b      	sxth	r3, r3
 8009112:	e01a      	b.n	800914a <__sflush_r+0xee>
 8009114:	690f      	ldr	r7, [r1, #16]
 8009116:	2f00      	cmp	r7, #0
 8009118:	d0f6      	beq.n	8009108 <__sflush_r+0xac>
 800911a:	0793      	lsls	r3, r2, #30
 800911c:	bf18      	it	ne
 800911e:	2300      	movne	r3, #0
 8009120:	680e      	ldr	r6, [r1, #0]
 8009122:	bf08      	it	eq
 8009124:	694b      	ldreq	r3, [r1, #20]
 8009126:	1bf6      	subs	r6, r6, r7
 8009128:	600f      	str	r7, [r1, #0]
 800912a:	608b      	str	r3, [r1, #8]
 800912c:	2e00      	cmp	r6, #0
 800912e:	ddeb      	ble.n	8009108 <__sflush_r+0xac>
 8009130:	4633      	mov	r3, r6
 8009132:	463a      	mov	r2, r7
 8009134:	4628      	mov	r0, r5
 8009136:	6a21      	ldr	r1, [r4, #32]
 8009138:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800913c:	47e0      	blx	ip
 800913e:	2800      	cmp	r0, #0
 8009140:	dc07      	bgt.n	8009152 <__sflush_r+0xf6>
 8009142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009152:	4407      	add	r7, r0
 8009154:	1a36      	subs	r6, r6, r0
 8009156:	e7e9      	b.n	800912c <__sflush_r+0xd0>
 8009158:	dfbffffe 	.word	0xdfbffffe

0800915c <_fflush_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	690b      	ldr	r3, [r1, #16]
 8009160:	4605      	mov	r5, r0
 8009162:	460c      	mov	r4, r1
 8009164:	b913      	cbnz	r3, 800916c <_fflush_r+0x10>
 8009166:	2500      	movs	r5, #0
 8009168:	4628      	mov	r0, r5
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	b118      	cbz	r0, 8009176 <_fflush_r+0x1a>
 800916e:	6a03      	ldr	r3, [r0, #32]
 8009170:	b90b      	cbnz	r3, 8009176 <_fflush_r+0x1a>
 8009172:	f7fd fadd 	bl	8006730 <__sinit>
 8009176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0f3      	beq.n	8009166 <_fflush_r+0xa>
 800917e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009180:	07d0      	lsls	r0, r2, #31
 8009182:	d404      	bmi.n	800918e <_fflush_r+0x32>
 8009184:	0599      	lsls	r1, r3, #22
 8009186:	d402      	bmi.n	800918e <_fflush_r+0x32>
 8009188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800918a:	f7fd fbfa 	bl	8006982 <__retarget_lock_acquire_recursive>
 800918e:	4628      	mov	r0, r5
 8009190:	4621      	mov	r1, r4
 8009192:	f7ff ff63 	bl	800905c <__sflush_r>
 8009196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009198:	4605      	mov	r5, r0
 800919a:	07da      	lsls	r2, r3, #31
 800919c:	d4e4      	bmi.n	8009168 <_fflush_r+0xc>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	059b      	lsls	r3, r3, #22
 80091a2:	d4e1      	bmi.n	8009168 <_fflush_r+0xc>
 80091a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091a6:	f7fd fbed 	bl	8006984 <__retarget_lock_release_recursive>
 80091aa:	e7dd      	b.n	8009168 <_fflush_r+0xc>

080091ac <memmove>:
 80091ac:	4288      	cmp	r0, r1
 80091ae:	b510      	push	{r4, lr}
 80091b0:	eb01 0402 	add.w	r4, r1, r2
 80091b4:	d902      	bls.n	80091bc <memmove+0x10>
 80091b6:	4284      	cmp	r4, r0
 80091b8:	4623      	mov	r3, r4
 80091ba:	d807      	bhi.n	80091cc <memmove+0x20>
 80091bc:	1e43      	subs	r3, r0, #1
 80091be:	42a1      	cmp	r1, r4
 80091c0:	d008      	beq.n	80091d4 <memmove+0x28>
 80091c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ca:	e7f8      	b.n	80091be <memmove+0x12>
 80091cc:	4601      	mov	r1, r0
 80091ce:	4402      	add	r2, r0
 80091d0:	428a      	cmp	r2, r1
 80091d2:	d100      	bne.n	80091d6 <memmove+0x2a>
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091de:	e7f7      	b.n	80091d0 <memmove+0x24>

080091e0 <strncmp>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	b16a      	cbz	r2, 8009200 <strncmp+0x20>
 80091e4:	3901      	subs	r1, #1
 80091e6:	1884      	adds	r4, r0, r2
 80091e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d103      	bne.n	80091fc <strncmp+0x1c>
 80091f4:	42a0      	cmp	r0, r4
 80091f6:	d001      	beq.n	80091fc <strncmp+0x1c>
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	d1f5      	bne.n	80091e8 <strncmp+0x8>
 80091fc:	1ad0      	subs	r0, r2, r3
 80091fe:	bd10      	pop	{r4, pc}
 8009200:	4610      	mov	r0, r2
 8009202:	e7fc      	b.n	80091fe <strncmp+0x1e>

08009204 <_sbrk_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	2300      	movs	r3, #0
 8009208:	4d05      	ldr	r5, [pc, #20]	@ (8009220 <_sbrk_r+0x1c>)
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	f7f9 fafa 	bl	8002808 <_sbrk>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_sbrk_r+0x1a>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	b103      	cbz	r3, 800921e <_sbrk_r+0x1a>
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	2000248c 	.word	0x2000248c

08009224 <memcpy>:
 8009224:	440a      	add	r2, r1
 8009226:	4291      	cmp	r1, r2
 8009228:	f100 33ff 	add.w	r3, r0, #4294967295
 800922c:	d100      	bne.n	8009230 <memcpy+0xc>
 800922e:	4770      	bx	lr
 8009230:	b510      	push	{r4, lr}
 8009232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009236:	4291      	cmp	r1, r2
 8009238:	f803 4f01 	strb.w	r4, [r3, #1]!
 800923c:	d1f9      	bne.n	8009232 <memcpy+0xe>
 800923e:	bd10      	pop	{r4, pc}

08009240 <nan>:
 8009240:	2000      	movs	r0, #0
 8009242:	4901      	ldr	r1, [pc, #4]	@ (8009248 <nan+0x8>)
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	7ff80000 	.word	0x7ff80000

0800924c <__assert_func>:
 800924c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800924e:	4614      	mov	r4, r2
 8009250:	461a      	mov	r2, r3
 8009252:	4b09      	ldr	r3, [pc, #36]	@ (8009278 <__assert_func+0x2c>)
 8009254:	4605      	mov	r5, r0
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68d8      	ldr	r0, [r3, #12]
 800925a:	b954      	cbnz	r4, 8009272 <__assert_func+0x26>
 800925c:	4b07      	ldr	r3, [pc, #28]	@ (800927c <__assert_func+0x30>)
 800925e:	461c      	mov	r4, r3
 8009260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009264:	9100      	str	r1, [sp, #0]
 8009266:	462b      	mov	r3, r5
 8009268:	4905      	ldr	r1, [pc, #20]	@ (8009280 <__assert_func+0x34>)
 800926a:	f000 fba7 	bl	80099bc <fiprintf>
 800926e:	f000 fbb7 	bl	80099e0 <abort>
 8009272:	4b04      	ldr	r3, [pc, #16]	@ (8009284 <__assert_func+0x38>)
 8009274:	e7f4      	b.n	8009260 <__assert_func+0x14>
 8009276:	bf00      	nop
 8009278:	20000020 	.word	0x20000020
 800927c:	0800a354 	.word	0x0800a354
 8009280:	0800a326 	.word	0x0800a326
 8009284:	0800a319 	.word	0x0800a319

08009288 <_calloc_r>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	fba1 5402 	umull	r5, r4, r1, r2
 800928e:	b93c      	cbnz	r4, 80092a0 <_calloc_r+0x18>
 8009290:	4629      	mov	r1, r5
 8009292:	f7fe fa57 	bl	8007744 <_malloc_r>
 8009296:	4606      	mov	r6, r0
 8009298:	b928      	cbnz	r0, 80092a6 <_calloc_r+0x1e>
 800929a:	2600      	movs	r6, #0
 800929c:	4630      	mov	r0, r6
 800929e:	bd70      	pop	{r4, r5, r6, pc}
 80092a0:	220c      	movs	r2, #12
 80092a2:	6002      	str	r2, [r0, #0]
 80092a4:	e7f9      	b.n	800929a <_calloc_r+0x12>
 80092a6:	462a      	mov	r2, r5
 80092a8:	4621      	mov	r1, r4
 80092aa:	f7fd fada 	bl	8006862 <memset>
 80092ae:	e7f5      	b.n	800929c <_calloc_r+0x14>

080092b0 <rshift>:
 80092b0:	6903      	ldr	r3, [r0, #16]
 80092b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092ba:	f100 0414 	add.w	r4, r0, #20
 80092be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092c2:	dd46      	ble.n	8009352 <rshift+0xa2>
 80092c4:	f011 011f 	ands.w	r1, r1, #31
 80092c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80092cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80092d0:	d10c      	bne.n	80092ec <rshift+0x3c>
 80092d2:	4629      	mov	r1, r5
 80092d4:	f100 0710 	add.w	r7, r0, #16
 80092d8:	42b1      	cmp	r1, r6
 80092da:	d335      	bcc.n	8009348 <rshift+0x98>
 80092dc:	1a9b      	subs	r3, r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	1eea      	subs	r2, r5, #3
 80092e2:	4296      	cmp	r6, r2
 80092e4:	bf38      	it	cc
 80092e6:	2300      	movcc	r3, #0
 80092e8:	4423      	add	r3, r4
 80092ea:	e015      	b.n	8009318 <rshift+0x68>
 80092ec:	46a1      	mov	r9, r4
 80092ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80092f2:	f1c1 0820 	rsb	r8, r1, #32
 80092f6:	40cf      	lsrs	r7, r1
 80092f8:	f105 0e04 	add.w	lr, r5, #4
 80092fc:	4576      	cmp	r6, lr
 80092fe:	46f4      	mov	ip, lr
 8009300:	d816      	bhi.n	8009330 <rshift+0x80>
 8009302:	1a9a      	subs	r2, r3, r2
 8009304:	0092      	lsls	r2, r2, #2
 8009306:	3a04      	subs	r2, #4
 8009308:	3501      	adds	r5, #1
 800930a:	42ae      	cmp	r6, r5
 800930c:	bf38      	it	cc
 800930e:	2200      	movcc	r2, #0
 8009310:	18a3      	adds	r3, r4, r2
 8009312:	50a7      	str	r7, [r4, r2]
 8009314:	b107      	cbz	r7, 8009318 <rshift+0x68>
 8009316:	3304      	adds	r3, #4
 8009318:	42a3      	cmp	r3, r4
 800931a:	eba3 0204 	sub.w	r2, r3, r4
 800931e:	bf08      	it	eq
 8009320:	2300      	moveq	r3, #0
 8009322:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009326:	6102      	str	r2, [r0, #16]
 8009328:	bf08      	it	eq
 800932a:	6143      	streq	r3, [r0, #20]
 800932c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009330:	f8dc c000 	ldr.w	ip, [ip]
 8009334:	fa0c fc08 	lsl.w	ip, ip, r8
 8009338:	ea4c 0707 	orr.w	r7, ip, r7
 800933c:	f849 7b04 	str.w	r7, [r9], #4
 8009340:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009344:	40cf      	lsrs	r7, r1
 8009346:	e7d9      	b.n	80092fc <rshift+0x4c>
 8009348:	f851 cb04 	ldr.w	ip, [r1], #4
 800934c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009350:	e7c2      	b.n	80092d8 <rshift+0x28>
 8009352:	4623      	mov	r3, r4
 8009354:	e7e0      	b.n	8009318 <rshift+0x68>

08009356 <__hexdig_fun>:
 8009356:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800935a:	2b09      	cmp	r3, #9
 800935c:	d802      	bhi.n	8009364 <__hexdig_fun+0xe>
 800935e:	3820      	subs	r0, #32
 8009360:	b2c0      	uxtb	r0, r0
 8009362:	4770      	bx	lr
 8009364:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009368:	2b05      	cmp	r3, #5
 800936a:	d801      	bhi.n	8009370 <__hexdig_fun+0x1a>
 800936c:	3847      	subs	r0, #71	@ 0x47
 800936e:	e7f7      	b.n	8009360 <__hexdig_fun+0xa>
 8009370:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009374:	2b05      	cmp	r3, #5
 8009376:	d801      	bhi.n	800937c <__hexdig_fun+0x26>
 8009378:	3827      	subs	r0, #39	@ 0x27
 800937a:	e7f1      	b.n	8009360 <__hexdig_fun+0xa>
 800937c:	2000      	movs	r0, #0
 800937e:	4770      	bx	lr

08009380 <__gethex>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	468a      	mov	sl, r1
 8009386:	4690      	mov	r8, r2
 8009388:	b085      	sub	sp, #20
 800938a:	9302      	str	r3, [sp, #8]
 800938c:	680b      	ldr	r3, [r1, #0]
 800938e:	9001      	str	r0, [sp, #4]
 8009390:	1c9c      	adds	r4, r3, #2
 8009392:	46a1      	mov	r9, r4
 8009394:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009398:	2830      	cmp	r0, #48	@ 0x30
 800939a:	d0fa      	beq.n	8009392 <__gethex+0x12>
 800939c:	eba9 0303 	sub.w	r3, r9, r3
 80093a0:	f1a3 0b02 	sub.w	fp, r3, #2
 80093a4:	f7ff ffd7 	bl	8009356 <__hexdig_fun>
 80093a8:	4605      	mov	r5, r0
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d168      	bne.n	8009480 <__gethex+0x100>
 80093ae:	2201      	movs	r2, #1
 80093b0:	4648      	mov	r0, r9
 80093b2:	499f      	ldr	r1, [pc, #636]	@ (8009630 <__gethex+0x2b0>)
 80093b4:	f7ff ff14 	bl	80091e0 <strncmp>
 80093b8:	4607      	mov	r7, r0
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d167      	bne.n	800948e <__gethex+0x10e>
 80093be:	f899 0001 	ldrb.w	r0, [r9, #1]
 80093c2:	4626      	mov	r6, r4
 80093c4:	f7ff ffc7 	bl	8009356 <__hexdig_fun>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d062      	beq.n	8009492 <__gethex+0x112>
 80093cc:	4623      	mov	r3, r4
 80093ce:	7818      	ldrb	r0, [r3, #0]
 80093d0:	4699      	mov	r9, r3
 80093d2:	2830      	cmp	r0, #48	@ 0x30
 80093d4:	f103 0301 	add.w	r3, r3, #1
 80093d8:	d0f9      	beq.n	80093ce <__gethex+0x4e>
 80093da:	f7ff ffbc 	bl	8009356 <__hexdig_fun>
 80093de:	fab0 f580 	clz	r5, r0
 80093e2:	f04f 0b01 	mov.w	fp, #1
 80093e6:	096d      	lsrs	r5, r5, #5
 80093e8:	464a      	mov	r2, r9
 80093ea:	4616      	mov	r6, r2
 80093ec:	7830      	ldrb	r0, [r6, #0]
 80093ee:	3201      	adds	r2, #1
 80093f0:	f7ff ffb1 	bl	8009356 <__hexdig_fun>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d1f8      	bne.n	80093ea <__gethex+0x6a>
 80093f8:	2201      	movs	r2, #1
 80093fa:	4630      	mov	r0, r6
 80093fc:	498c      	ldr	r1, [pc, #560]	@ (8009630 <__gethex+0x2b0>)
 80093fe:	f7ff feef 	bl	80091e0 <strncmp>
 8009402:	2800      	cmp	r0, #0
 8009404:	d13f      	bne.n	8009486 <__gethex+0x106>
 8009406:	b944      	cbnz	r4, 800941a <__gethex+0x9a>
 8009408:	1c74      	adds	r4, r6, #1
 800940a:	4622      	mov	r2, r4
 800940c:	4616      	mov	r6, r2
 800940e:	7830      	ldrb	r0, [r6, #0]
 8009410:	3201      	adds	r2, #1
 8009412:	f7ff ffa0 	bl	8009356 <__hexdig_fun>
 8009416:	2800      	cmp	r0, #0
 8009418:	d1f8      	bne.n	800940c <__gethex+0x8c>
 800941a:	1ba4      	subs	r4, r4, r6
 800941c:	00a7      	lsls	r7, r4, #2
 800941e:	7833      	ldrb	r3, [r6, #0]
 8009420:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009424:	2b50      	cmp	r3, #80	@ 0x50
 8009426:	d13e      	bne.n	80094a6 <__gethex+0x126>
 8009428:	7873      	ldrb	r3, [r6, #1]
 800942a:	2b2b      	cmp	r3, #43	@ 0x2b
 800942c:	d033      	beq.n	8009496 <__gethex+0x116>
 800942e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009430:	d034      	beq.n	800949c <__gethex+0x11c>
 8009432:	2400      	movs	r4, #0
 8009434:	1c71      	adds	r1, r6, #1
 8009436:	7808      	ldrb	r0, [r1, #0]
 8009438:	f7ff ff8d 	bl	8009356 <__hexdig_fun>
 800943c:	1e43      	subs	r3, r0, #1
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b18      	cmp	r3, #24
 8009442:	d830      	bhi.n	80094a6 <__gethex+0x126>
 8009444:	f1a0 0210 	sub.w	r2, r0, #16
 8009448:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800944c:	f7ff ff83 	bl	8009356 <__hexdig_fun>
 8009450:	f100 3cff 	add.w	ip, r0, #4294967295
 8009454:	fa5f fc8c 	uxtb.w	ip, ip
 8009458:	f1bc 0f18 	cmp.w	ip, #24
 800945c:	f04f 030a 	mov.w	r3, #10
 8009460:	d91e      	bls.n	80094a0 <__gethex+0x120>
 8009462:	b104      	cbz	r4, 8009466 <__gethex+0xe6>
 8009464:	4252      	negs	r2, r2
 8009466:	4417      	add	r7, r2
 8009468:	f8ca 1000 	str.w	r1, [sl]
 800946c:	b1ed      	cbz	r5, 80094aa <__gethex+0x12a>
 800946e:	f1bb 0f00 	cmp.w	fp, #0
 8009472:	bf0c      	ite	eq
 8009474:	2506      	moveq	r5, #6
 8009476:	2500      	movne	r5, #0
 8009478:	4628      	mov	r0, r5
 800947a:	b005      	add	sp, #20
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	2500      	movs	r5, #0
 8009482:	462c      	mov	r4, r5
 8009484:	e7b0      	b.n	80093e8 <__gethex+0x68>
 8009486:	2c00      	cmp	r4, #0
 8009488:	d1c7      	bne.n	800941a <__gethex+0x9a>
 800948a:	4627      	mov	r7, r4
 800948c:	e7c7      	b.n	800941e <__gethex+0x9e>
 800948e:	464e      	mov	r6, r9
 8009490:	462f      	mov	r7, r5
 8009492:	2501      	movs	r5, #1
 8009494:	e7c3      	b.n	800941e <__gethex+0x9e>
 8009496:	2400      	movs	r4, #0
 8009498:	1cb1      	adds	r1, r6, #2
 800949a:	e7cc      	b.n	8009436 <__gethex+0xb6>
 800949c:	2401      	movs	r4, #1
 800949e:	e7fb      	b.n	8009498 <__gethex+0x118>
 80094a0:	fb03 0002 	mla	r0, r3, r2, r0
 80094a4:	e7ce      	b.n	8009444 <__gethex+0xc4>
 80094a6:	4631      	mov	r1, r6
 80094a8:	e7de      	b.n	8009468 <__gethex+0xe8>
 80094aa:	4629      	mov	r1, r5
 80094ac:	eba6 0309 	sub.w	r3, r6, r9
 80094b0:	3b01      	subs	r3, #1
 80094b2:	2b07      	cmp	r3, #7
 80094b4:	dc0a      	bgt.n	80094cc <__gethex+0x14c>
 80094b6:	9801      	ldr	r0, [sp, #4]
 80094b8:	f7fe f9d0 	bl	800785c <_Balloc>
 80094bc:	4604      	mov	r4, r0
 80094be:	b940      	cbnz	r0, 80094d2 <__gethex+0x152>
 80094c0:	4602      	mov	r2, r0
 80094c2:	21e4      	movs	r1, #228	@ 0xe4
 80094c4:	4b5b      	ldr	r3, [pc, #364]	@ (8009634 <__gethex+0x2b4>)
 80094c6:	485c      	ldr	r0, [pc, #368]	@ (8009638 <__gethex+0x2b8>)
 80094c8:	f7ff fec0 	bl	800924c <__assert_func>
 80094cc:	3101      	adds	r1, #1
 80094ce:	105b      	asrs	r3, r3, #1
 80094d0:	e7ef      	b.n	80094b2 <__gethex+0x132>
 80094d2:	2300      	movs	r3, #0
 80094d4:	f100 0a14 	add.w	sl, r0, #20
 80094d8:	4655      	mov	r5, sl
 80094da:	469b      	mov	fp, r3
 80094dc:	45b1      	cmp	r9, r6
 80094de:	d337      	bcc.n	8009550 <__gethex+0x1d0>
 80094e0:	f845 bb04 	str.w	fp, [r5], #4
 80094e4:	eba5 050a 	sub.w	r5, r5, sl
 80094e8:	10ad      	asrs	r5, r5, #2
 80094ea:	6125      	str	r5, [r4, #16]
 80094ec:	4658      	mov	r0, fp
 80094ee:	f7fe faa7 	bl	8007a40 <__hi0bits>
 80094f2:	016d      	lsls	r5, r5, #5
 80094f4:	f8d8 6000 	ldr.w	r6, [r8]
 80094f8:	1a2d      	subs	r5, r5, r0
 80094fa:	42b5      	cmp	r5, r6
 80094fc:	dd54      	ble.n	80095a8 <__gethex+0x228>
 80094fe:	1bad      	subs	r5, r5, r6
 8009500:	4629      	mov	r1, r5
 8009502:	4620      	mov	r0, r4
 8009504:	f7fe fe2f 	bl	8008166 <__any_on>
 8009508:	4681      	mov	r9, r0
 800950a:	b178      	cbz	r0, 800952c <__gethex+0x1ac>
 800950c:	f04f 0901 	mov.w	r9, #1
 8009510:	1e6b      	subs	r3, r5, #1
 8009512:	1159      	asrs	r1, r3, #5
 8009514:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009518:	f003 021f 	and.w	r2, r3, #31
 800951c:	fa09 f202 	lsl.w	r2, r9, r2
 8009520:	420a      	tst	r2, r1
 8009522:	d003      	beq.n	800952c <__gethex+0x1ac>
 8009524:	454b      	cmp	r3, r9
 8009526:	dc36      	bgt.n	8009596 <__gethex+0x216>
 8009528:	f04f 0902 	mov.w	r9, #2
 800952c:	4629      	mov	r1, r5
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff febe 	bl	80092b0 <rshift>
 8009534:	442f      	add	r7, r5
 8009536:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800953a:	42bb      	cmp	r3, r7
 800953c:	da42      	bge.n	80095c4 <__gethex+0x244>
 800953e:	4621      	mov	r1, r4
 8009540:	9801      	ldr	r0, [sp, #4]
 8009542:	f7fe f9cb 	bl	80078dc <_Bfree>
 8009546:	2300      	movs	r3, #0
 8009548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800954a:	25a3      	movs	r5, #163	@ 0xa3
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	e793      	b.n	8009478 <__gethex+0xf8>
 8009550:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009554:	2a2e      	cmp	r2, #46	@ 0x2e
 8009556:	d012      	beq.n	800957e <__gethex+0x1fe>
 8009558:	2b20      	cmp	r3, #32
 800955a:	d104      	bne.n	8009566 <__gethex+0x1e6>
 800955c:	f845 bb04 	str.w	fp, [r5], #4
 8009560:	f04f 0b00 	mov.w	fp, #0
 8009564:	465b      	mov	r3, fp
 8009566:	7830      	ldrb	r0, [r6, #0]
 8009568:	9303      	str	r3, [sp, #12]
 800956a:	f7ff fef4 	bl	8009356 <__hexdig_fun>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	f000 000f 	and.w	r0, r0, #15
 8009574:	4098      	lsls	r0, r3
 8009576:	ea4b 0b00 	orr.w	fp, fp, r0
 800957a:	3304      	adds	r3, #4
 800957c:	e7ae      	b.n	80094dc <__gethex+0x15c>
 800957e:	45b1      	cmp	r9, r6
 8009580:	d8ea      	bhi.n	8009558 <__gethex+0x1d8>
 8009582:	2201      	movs	r2, #1
 8009584:	4630      	mov	r0, r6
 8009586:	492a      	ldr	r1, [pc, #168]	@ (8009630 <__gethex+0x2b0>)
 8009588:	9303      	str	r3, [sp, #12]
 800958a:	f7ff fe29 	bl	80091e0 <strncmp>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	2800      	cmp	r0, #0
 8009592:	d1e1      	bne.n	8009558 <__gethex+0x1d8>
 8009594:	e7a2      	b.n	80094dc <__gethex+0x15c>
 8009596:	4620      	mov	r0, r4
 8009598:	1ea9      	subs	r1, r5, #2
 800959a:	f7fe fde4 	bl	8008166 <__any_on>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d0c2      	beq.n	8009528 <__gethex+0x1a8>
 80095a2:	f04f 0903 	mov.w	r9, #3
 80095a6:	e7c1      	b.n	800952c <__gethex+0x1ac>
 80095a8:	da09      	bge.n	80095be <__gethex+0x23e>
 80095aa:	1b75      	subs	r5, r6, r5
 80095ac:	4621      	mov	r1, r4
 80095ae:	462a      	mov	r2, r5
 80095b0:	9801      	ldr	r0, [sp, #4]
 80095b2:	f7fe fba9 	bl	8007d08 <__lshift>
 80095b6:	4604      	mov	r4, r0
 80095b8:	1b7f      	subs	r7, r7, r5
 80095ba:	f100 0a14 	add.w	sl, r0, #20
 80095be:	f04f 0900 	mov.w	r9, #0
 80095c2:	e7b8      	b.n	8009536 <__gethex+0x1b6>
 80095c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095c8:	42bd      	cmp	r5, r7
 80095ca:	dd6f      	ble.n	80096ac <__gethex+0x32c>
 80095cc:	1bed      	subs	r5, r5, r7
 80095ce:	42ae      	cmp	r6, r5
 80095d0:	dc34      	bgt.n	800963c <__gethex+0x2bc>
 80095d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d022      	beq.n	8009620 <__gethex+0x2a0>
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d024      	beq.n	8009628 <__gethex+0x2a8>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d115      	bne.n	800960e <__gethex+0x28e>
 80095e2:	42ae      	cmp	r6, r5
 80095e4:	d113      	bne.n	800960e <__gethex+0x28e>
 80095e6:	2e01      	cmp	r6, #1
 80095e8:	d10b      	bne.n	8009602 <__gethex+0x282>
 80095ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095ee:	9a02      	ldr	r2, [sp, #8]
 80095f0:	2562      	movs	r5, #98	@ 0x62
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	2301      	movs	r3, #1
 80095f6:	6123      	str	r3, [r4, #16]
 80095f8:	f8ca 3000 	str.w	r3, [sl]
 80095fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095fe:	601c      	str	r4, [r3, #0]
 8009600:	e73a      	b.n	8009478 <__gethex+0xf8>
 8009602:	4620      	mov	r0, r4
 8009604:	1e71      	subs	r1, r6, #1
 8009606:	f7fe fdae 	bl	8008166 <__any_on>
 800960a:	2800      	cmp	r0, #0
 800960c:	d1ed      	bne.n	80095ea <__gethex+0x26a>
 800960e:	4621      	mov	r1, r4
 8009610:	9801      	ldr	r0, [sp, #4]
 8009612:	f7fe f963 	bl	80078dc <_Bfree>
 8009616:	2300      	movs	r3, #0
 8009618:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800961a:	2550      	movs	r5, #80	@ 0x50
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	e72b      	b.n	8009478 <__gethex+0xf8>
 8009620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1f3      	bne.n	800960e <__gethex+0x28e>
 8009626:	e7e0      	b.n	80095ea <__gethex+0x26a>
 8009628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1dd      	bne.n	80095ea <__gethex+0x26a>
 800962e:	e7ee      	b.n	800960e <__gethex+0x28e>
 8009630:	0800a2a8 	.word	0x0800a2a8
 8009634:	0800a13c 	.word	0x0800a13c
 8009638:	0800a355 	.word	0x0800a355
 800963c:	1e6f      	subs	r7, r5, #1
 800963e:	f1b9 0f00 	cmp.w	r9, #0
 8009642:	d130      	bne.n	80096a6 <__gethex+0x326>
 8009644:	b127      	cbz	r7, 8009650 <__gethex+0x2d0>
 8009646:	4639      	mov	r1, r7
 8009648:	4620      	mov	r0, r4
 800964a:	f7fe fd8c 	bl	8008166 <__any_on>
 800964e:	4681      	mov	r9, r0
 8009650:	2301      	movs	r3, #1
 8009652:	4629      	mov	r1, r5
 8009654:	1b76      	subs	r6, r6, r5
 8009656:	2502      	movs	r5, #2
 8009658:	117a      	asrs	r2, r7, #5
 800965a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800965e:	f007 071f 	and.w	r7, r7, #31
 8009662:	40bb      	lsls	r3, r7
 8009664:	4213      	tst	r3, r2
 8009666:	4620      	mov	r0, r4
 8009668:	bf18      	it	ne
 800966a:	f049 0902 	orrne.w	r9, r9, #2
 800966e:	f7ff fe1f 	bl	80092b0 <rshift>
 8009672:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009676:	f1b9 0f00 	cmp.w	r9, #0
 800967a:	d047      	beq.n	800970c <__gethex+0x38c>
 800967c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009680:	2b02      	cmp	r3, #2
 8009682:	d015      	beq.n	80096b0 <__gethex+0x330>
 8009684:	2b03      	cmp	r3, #3
 8009686:	d017      	beq.n	80096b8 <__gethex+0x338>
 8009688:	2b01      	cmp	r3, #1
 800968a:	d109      	bne.n	80096a0 <__gethex+0x320>
 800968c:	f019 0f02 	tst.w	r9, #2
 8009690:	d006      	beq.n	80096a0 <__gethex+0x320>
 8009692:	f8da 3000 	ldr.w	r3, [sl]
 8009696:	ea49 0903 	orr.w	r9, r9, r3
 800969a:	f019 0f01 	tst.w	r9, #1
 800969e:	d10e      	bne.n	80096be <__gethex+0x33e>
 80096a0:	f045 0510 	orr.w	r5, r5, #16
 80096a4:	e032      	b.n	800970c <__gethex+0x38c>
 80096a6:	f04f 0901 	mov.w	r9, #1
 80096aa:	e7d1      	b.n	8009650 <__gethex+0x2d0>
 80096ac:	2501      	movs	r5, #1
 80096ae:	e7e2      	b.n	8009676 <__gethex+0x2f6>
 80096b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096b2:	f1c3 0301 	rsb	r3, r3, #1
 80096b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0f0      	beq.n	80096a0 <__gethex+0x320>
 80096be:	f04f 0c00 	mov.w	ip, #0
 80096c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096c6:	f104 0314 	add.w	r3, r4, #20
 80096ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096dc:	d01b      	beq.n	8009716 <__gethex+0x396>
 80096de:	3201      	adds	r2, #1
 80096e0:	6002      	str	r2, [r0, #0]
 80096e2:	2d02      	cmp	r5, #2
 80096e4:	f104 0314 	add.w	r3, r4, #20
 80096e8:	d13c      	bne.n	8009764 <__gethex+0x3e4>
 80096ea:	f8d8 2000 	ldr.w	r2, [r8]
 80096ee:	3a01      	subs	r2, #1
 80096f0:	42b2      	cmp	r2, r6
 80096f2:	d109      	bne.n	8009708 <__gethex+0x388>
 80096f4:	2201      	movs	r2, #1
 80096f6:	1171      	asrs	r1, r6, #5
 80096f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096fc:	f006 061f 	and.w	r6, r6, #31
 8009700:	fa02 f606 	lsl.w	r6, r2, r6
 8009704:	421e      	tst	r6, r3
 8009706:	d13a      	bne.n	800977e <__gethex+0x3fe>
 8009708:	f045 0520 	orr.w	r5, r5, #32
 800970c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800970e:	601c      	str	r4, [r3, #0]
 8009710:	9b02      	ldr	r3, [sp, #8]
 8009712:	601f      	str	r7, [r3, #0]
 8009714:	e6b0      	b.n	8009478 <__gethex+0xf8>
 8009716:	4299      	cmp	r1, r3
 8009718:	f843 cc04 	str.w	ip, [r3, #-4]
 800971c:	d8d9      	bhi.n	80096d2 <__gethex+0x352>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	459b      	cmp	fp, r3
 8009722:	db17      	blt.n	8009754 <__gethex+0x3d4>
 8009724:	6861      	ldr	r1, [r4, #4]
 8009726:	9801      	ldr	r0, [sp, #4]
 8009728:	3101      	adds	r1, #1
 800972a:	f7fe f897 	bl	800785c <_Balloc>
 800972e:	4681      	mov	r9, r0
 8009730:	b918      	cbnz	r0, 800973a <__gethex+0x3ba>
 8009732:	4602      	mov	r2, r0
 8009734:	2184      	movs	r1, #132	@ 0x84
 8009736:	4b19      	ldr	r3, [pc, #100]	@ (800979c <__gethex+0x41c>)
 8009738:	e6c5      	b.n	80094c6 <__gethex+0x146>
 800973a:	6922      	ldr	r2, [r4, #16]
 800973c:	f104 010c 	add.w	r1, r4, #12
 8009740:	3202      	adds	r2, #2
 8009742:	0092      	lsls	r2, r2, #2
 8009744:	300c      	adds	r0, #12
 8009746:	f7ff fd6d 	bl	8009224 <memcpy>
 800974a:	4621      	mov	r1, r4
 800974c:	9801      	ldr	r0, [sp, #4]
 800974e:	f7fe f8c5 	bl	80078dc <_Bfree>
 8009752:	464c      	mov	r4, r9
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	6122      	str	r2, [r4, #16]
 800975a:	2201      	movs	r2, #1
 800975c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009760:	615a      	str	r2, [r3, #20]
 8009762:	e7be      	b.n	80096e2 <__gethex+0x362>
 8009764:	6922      	ldr	r2, [r4, #16]
 8009766:	455a      	cmp	r2, fp
 8009768:	dd0b      	ble.n	8009782 <__gethex+0x402>
 800976a:	2101      	movs	r1, #1
 800976c:	4620      	mov	r0, r4
 800976e:	f7ff fd9f 	bl	80092b0 <rshift>
 8009772:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009776:	3701      	adds	r7, #1
 8009778:	42bb      	cmp	r3, r7
 800977a:	f6ff aee0 	blt.w	800953e <__gethex+0x1be>
 800977e:	2501      	movs	r5, #1
 8009780:	e7c2      	b.n	8009708 <__gethex+0x388>
 8009782:	f016 061f 	ands.w	r6, r6, #31
 8009786:	d0fa      	beq.n	800977e <__gethex+0x3fe>
 8009788:	4453      	add	r3, sl
 800978a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800978e:	f7fe f957 	bl	8007a40 <__hi0bits>
 8009792:	f1c6 0620 	rsb	r6, r6, #32
 8009796:	42b0      	cmp	r0, r6
 8009798:	dbe7      	blt.n	800976a <__gethex+0x3ea>
 800979a:	e7f0      	b.n	800977e <__gethex+0x3fe>
 800979c:	0800a13c 	.word	0x0800a13c

080097a0 <L_shift>:
 80097a0:	f1c2 0208 	rsb	r2, r2, #8
 80097a4:	0092      	lsls	r2, r2, #2
 80097a6:	b570      	push	{r4, r5, r6, lr}
 80097a8:	f1c2 0620 	rsb	r6, r2, #32
 80097ac:	6843      	ldr	r3, [r0, #4]
 80097ae:	6804      	ldr	r4, [r0, #0]
 80097b0:	fa03 f506 	lsl.w	r5, r3, r6
 80097b4:	432c      	orrs	r4, r5
 80097b6:	40d3      	lsrs	r3, r2
 80097b8:	6004      	str	r4, [r0, #0]
 80097ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80097be:	4288      	cmp	r0, r1
 80097c0:	d3f4      	bcc.n	80097ac <L_shift+0xc>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}

080097c4 <__match>:
 80097c4:	b530      	push	{r4, r5, lr}
 80097c6:	6803      	ldr	r3, [r0, #0]
 80097c8:	3301      	adds	r3, #1
 80097ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ce:	b914      	cbnz	r4, 80097d6 <__match+0x12>
 80097d0:	6003      	str	r3, [r0, #0]
 80097d2:	2001      	movs	r0, #1
 80097d4:	bd30      	pop	{r4, r5, pc}
 80097d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80097de:	2d19      	cmp	r5, #25
 80097e0:	bf98      	it	ls
 80097e2:	3220      	addls	r2, #32
 80097e4:	42a2      	cmp	r2, r4
 80097e6:	d0f0      	beq.n	80097ca <__match+0x6>
 80097e8:	2000      	movs	r0, #0
 80097ea:	e7f3      	b.n	80097d4 <__match+0x10>

080097ec <__hexnan>:
 80097ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f0:	2500      	movs	r5, #0
 80097f2:	680b      	ldr	r3, [r1, #0]
 80097f4:	4682      	mov	sl, r0
 80097f6:	115e      	asrs	r6, r3, #5
 80097f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097fc:	f013 031f 	ands.w	r3, r3, #31
 8009800:	bf18      	it	ne
 8009802:	3604      	addne	r6, #4
 8009804:	1f37      	subs	r7, r6, #4
 8009806:	4690      	mov	r8, r2
 8009808:	46b9      	mov	r9, r7
 800980a:	463c      	mov	r4, r7
 800980c:	46ab      	mov	fp, r5
 800980e:	b087      	sub	sp, #28
 8009810:	6801      	ldr	r1, [r0, #0]
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	f846 5c04 	str.w	r5, [r6, #-4]
 8009818:	9502      	str	r5, [sp, #8]
 800981a:	784a      	ldrb	r2, [r1, #1]
 800981c:	1c4b      	adds	r3, r1, #1
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	b342      	cbz	r2, 8009874 <__hexnan+0x88>
 8009822:	4610      	mov	r0, r2
 8009824:	9105      	str	r1, [sp, #20]
 8009826:	9204      	str	r2, [sp, #16]
 8009828:	f7ff fd95 	bl	8009356 <__hexdig_fun>
 800982c:	2800      	cmp	r0, #0
 800982e:	d151      	bne.n	80098d4 <__hexnan+0xe8>
 8009830:	9a04      	ldr	r2, [sp, #16]
 8009832:	9905      	ldr	r1, [sp, #20]
 8009834:	2a20      	cmp	r2, #32
 8009836:	d818      	bhi.n	800986a <__hexnan+0x7e>
 8009838:	9b02      	ldr	r3, [sp, #8]
 800983a:	459b      	cmp	fp, r3
 800983c:	dd13      	ble.n	8009866 <__hexnan+0x7a>
 800983e:	454c      	cmp	r4, r9
 8009840:	d206      	bcs.n	8009850 <__hexnan+0x64>
 8009842:	2d07      	cmp	r5, #7
 8009844:	dc04      	bgt.n	8009850 <__hexnan+0x64>
 8009846:	462a      	mov	r2, r5
 8009848:	4649      	mov	r1, r9
 800984a:	4620      	mov	r0, r4
 800984c:	f7ff ffa8 	bl	80097a0 <L_shift>
 8009850:	4544      	cmp	r4, r8
 8009852:	d952      	bls.n	80098fa <__hexnan+0x10e>
 8009854:	2300      	movs	r3, #0
 8009856:	f1a4 0904 	sub.w	r9, r4, #4
 800985a:	f844 3c04 	str.w	r3, [r4, #-4]
 800985e:	461d      	mov	r5, r3
 8009860:	464c      	mov	r4, r9
 8009862:	f8cd b008 	str.w	fp, [sp, #8]
 8009866:	9903      	ldr	r1, [sp, #12]
 8009868:	e7d7      	b.n	800981a <__hexnan+0x2e>
 800986a:	2a29      	cmp	r2, #41	@ 0x29
 800986c:	d157      	bne.n	800991e <__hexnan+0x132>
 800986e:	3102      	adds	r1, #2
 8009870:	f8ca 1000 	str.w	r1, [sl]
 8009874:	f1bb 0f00 	cmp.w	fp, #0
 8009878:	d051      	beq.n	800991e <__hexnan+0x132>
 800987a:	454c      	cmp	r4, r9
 800987c:	d206      	bcs.n	800988c <__hexnan+0xa0>
 800987e:	2d07      	cmp	r5, #7
 8009880:	dc04      	bgt.n	800988c <__hexnan+0xa0>
 8009882:	462a      	mov	r2, r5
 8009884:	4649      	mov	r1, r9
 8009886:	4620      	mov	r0, r4
 8009888:	f7ff ff8a 	bl	80097a0 <L_shift>
 800988c:	4544      	cmp	r4, r8
 800988e:	d936      	bls.n	80098fe <__hexnan+0x112>
 8009890:	4623      	mov	r3, r4
 8009892:	f1a8 0204 	sub.w	r2, r8, #4
 8009896:	f853 1b04 	ldr.w	r1, [r3], #4
 800989a:	429f      	cmp	r7, r3
 800989c:	f842 1f04 	str.w	r1, [r2, #4]!
 80098a0:	d2f9      	bcs.n	8009896 <__hexnan+0xaa>
 80098a2:	1b3b      	subs	r3, r7, r4
 80098a4:	f023 0303 	bic.w	r3, r3, #3
 80098a8:	3304      	adds	r3, #4
 80098aa:	3401      	adds	r4, #1
 80098ac:	3e03      	subs	r6, #3
 80098ae:	42b4      	cmp	r4, r6
 80098b0:	bf88      	it	hi
 80098b2:	2304      	movhi	r3, #4
 80098b4:	2200      	movs	r2, #0
 80098b6:	4443      	add	r3, r8
 80098b8:	f843 2b04 	str.w	r2, [r3], #4
 80098bc:	429f      	cmp	r7, r3
 80098be:	d2fb      	bcs.n	80098b8 <__hexnan+0xcc>
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	b91b      	cbnz	r3, 80098cc <__hexnan+0xe0>
 80098c4:	4547      	cmp	r7, r8
 80098c6:	d128      	bne.n	800991a <__hexnan+0x12e>
 80098c8:	2301      	movs	r3, #1
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	2005      	movs	r0, #5
 80098ce:	b007      	add	sp, #28
 80098d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d4:	3501      	adds	r5, #1
 80098d6:	2d08      	cmp	r5, #8
 80098d8:	f10b 0b01 	add.w	fp, fp, #1
 80098dc:	dd06      	ble.n	80098ec <__hexnan+0x100>
 80098de:	4544      	cmp	r4, r8
 80098e0:	d9c1      	bls.n	8009866 <__hexnan+0x7a>
 80098e2:	2300      	movs	r3, #0
 80098e4:	2501      	movs	r5, #1
 80098e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80098ea:	3c04      	subs	r4, #4
 80098ec:	6822      	ldr	r2, [r4, #0]
 80098ee:	f000 000f 	and.w	r0, r0, #15
 80098f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80098f6:	6020      	str	r0, [r4, #0]
 80098f8:	e7b5      	b.n	8009866 <__hexnan+0x7a>
 80098fa:	2508      	movs	r5, #8
 80098fc:	e7b3      	b.n	8009866 <__hexnan+0x7a>
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0dd      	beq.n	80098c0 <__hexnan+0xd4>
 8009904:	f04f 32ff 	mov.w	r2, #4294967295
 8009908:	f1c3 0320 	rsb	r3, r3, #32
 800990c:	40da      	lsrs	r2, r3
 800990e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009912:	4013      	ands	r3, r2
 8009914:	f846 3c04 	str.w	r3, [r6, #-4]
 8009918:	e7d2      	b.n	80098c0 <__hexnan+0xd4>
 800991a:	3f04      	subs	r7, #4
 800991c:	e7d0      	b.n	80098c0 <__hexnan+0xd4>
 800991e:	2004      	movs	r0, #4
 8009920:	e7d5      	b.n	80098ce <__hexnan+0xe2>

08009922 <__ascii_mbtowc>:
 8009922:	b082      	sub	sp, #8
 8009924:	b901      	cbnz	r1, 8009928 <__ascii_mbtowc+0x6>
 8009926:	a901      	add	r1, sp, #4
 8009928:	b142      	cbz	r2, 800993c <__ascii_mbtowc+0x1a>
 800992a:	b14b      	cbz	r3, 8009940 <__ascii_mbtowc+0x1e>
 800992c:	7813      	ldrb	r3, [r2, #0]
 800992e:	600b      	str	r3, [r1, #0]
 8009930:	7812      	ldrb	r2, [r2, #0]
 8009932:	1e10      	subs	r0, r2, #0
 8009934:	bf18      	it	ne
 8009936:	2001      	movne	r0, #1
 8009938:	b002      	add	sp, #8
 800993a:	4770      	bx	lr
 800993c:	4610      	mov	r0, r2
 800993e:	e7fb      	b.n	8009938 <__ascii_mbtowc+0x16>
 8009940:	f06f 0001 	mvn.w	r0, #1
 8009944:	e7f8      	b.n	8009938 <__ascii_mbtowc+0x16>

08009946 <_realloc_r>:
 8009946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994a:	4680      	mov	r8, r0
 800994c:	4615      	mov	r5, r2
 800994e:	460c      	mov	r4, r1
 8009950:	b921      	cbnz	r1, 800995c <_realloc_r+0x16>
 8009952:	4611      	mov	r1, r2
 8009954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009958:	f7fd bef4 	b.w	8007744 <_malloc_r>
 800995c:	b92a      	cbnz	r2, 800996a <_realloc_r+0x24>
 800995e:	f7fd fe7f 	bl	8007660 <_free_r>
 8009962:	2400      	movs	r4, #0
 8009964:	4620      	mov	r0, r4
 8009966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996a:	f000 f840 	bl	80099ee <_malloc_usable_size_r>
 800996e:	4285      	cmp	r5, r0
 8009970:	4606      	mov	r6, r0
 8009972:	d802      	bhi.n	800997a <_realloc_r+0x34>
 8009974:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009978:	d8f4      	bhi.n	8009964 <_realloc_r+0x1e>
 800997a:	4629      	mov	r1, r5
 800997c:	4640      	mov	r0, r8
 800997e:	f7fd fee1 	bl	8007744 <_malloc_r>
 8009982:	4607      	mov	r7, r0
 8009984:	2800      	cmp	r0, #0
 8009986:	d0ec      	beq.n	8009962 <_realloc_r+0x1c>
 8009988:	42b5      	cmp	r5, r6
 800998a:	462a      	mov	r2, r5
 800998c:	4621      	mov	r1, r4
 800998e:	bf28      	it	cs
 8009990:	4632      	movcs	r2, r6
 8009992:	f7ff fc47 	bl	8009224 <memcpy>
 8009996:	4621      	mov	r1, r4
 8009998:	4640      	mov	r0, r8
 800999a:	f7fd fe61 	bl	8007660 <_free_r>
 800999e:	463c      	mov	r4, r7
 80099a0:	e7e0      	b.n	8009964 <_realloc_r+0x1e>

080099a2 <__ascii_wctomb>:
 80099a2:	4603      	mov	r3, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	b141      	cbz	r1, 80099ba <__ascii_wctomb+0x18>
 80099a8:	2aff      	cmp	r2, #255	@ 0xff
 80099aa:	d904      	bls.n	80099b6 <__ascii_wctomb+0x14>
 80099ac:	228a      	movs	r2, #138	@ 0x8a
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	4770      	bx	lr
 80099b6:	2001      	movs	r0, #1
 80099b8:	700a      	strb	r2, [r1, #0]
 80099ba:	4770      	bx	lr

080099bc <fiprintf>:
 80099bc:	b40e      	push	{r1, r2, r3}
 80099be:	b503      	push	{r0, r1, lr}
 80099c0:	4601      	mov	r1, r0
 80099c2:	ab03      	add	r3, sp, #12
 80099c4:	4805      	ldr	r0, [pc, #20]	@ (80099dc <fiprintf+0x20>)
 80099c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	9301      	str	r3, [sp, #4]
 80099ce:	f000 f83d 	bl	8009a4c <_vfiprintf_r>
 80099d2:	b002      	add	sp, #8
 80099d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099d8:	b003      	add	sp, #12
 80099da:	4770      	bx	lr
 80099dc:	20000020 	.word	0x20000020

080099e0 <abort>:
 80099e0:	2006      	movs	r0, #6
 80099e2:	b508      	push	{r3, lr}
 80099e4:	f000 fa06 	bl	8009df4 <raise>
 80099e8:	2001      	movs	r0, #1
 80099ea:	f7f8 fe98 	bl	800271e <_exit>

080099ee <_malloc_usable_size_r>:
 80099ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f2:	1f18      	subs	r0, r3, #4
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bfbc      	itt	lt
 80099f8:	580b      	ldrlt	r3, [r1, r0]
 80099fa:	18c0      	addlt	r0, r0, r3
 80099fc:	4770      	bx	lr

080099fe <__sfputc_r>:
 80099fe:	6893      	ldr	r3, [r2, #8]
 8009a00:	b410      	push	{r4}
 8009a02:	3b01      	subs	r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	6093      	str	r3, [r2, #8]
 8009a08:	da07      	bge.n	8009a1a <__sfputc_r+0x1c>
 8009a0a:	6994      	ldr	r4, [r2, #24]
 8009a0c:	42a3      	cmp	r3, r4
 8009a0e:	db01      	blt.n	8009a14 <__sfputc_r+0x16>
 8009a10:	290a      	cmp	r1, #10
 8009a12:	d102      	bne.n	8009a1a <__sfputc_r+0x1c>
 8009a14:	bc10      	pop	{r4}
 8009a16:	f000 b931 	b.w	8009c7c <__swbuf_r>
 8009a1a:	6813      	ldr	r3, [r2, #0]
 8009a1c:	1c58      	adds	r0, r3, #1
 8009a1e:	6010      	str	r0, [r2, #0]
 8009a20:	7019      	strb	r1, [r3, #0]
 8009a22:	4608      	mov	r0, r1
 8009a24:	bc10      	pop	{r4}
 8009a26:	4770      	bx	lr

08009a28 <__sfputs_r>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	4614      	mov	r4, r2
 8009a30:	18d5      	adds	r5, r2, r3
 8009a32:	42ac      	cmp	r4, r5
 8009a34:	d101      	bne.n	8009a3a <__sfputs_r+0x12>
 8009a36:	2000      	movs	r0, #0
 8009a38:	e007      	b.n	8009a4a <__sfputs_r+0x22>
 8009a3a:	463a      	mov	r2, r7
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a42:	f7ff ffdc 	bl	80099fe <__sfputc_r>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d1f3      	bne.n	8009a32 <__sfputs_r+0xa>
 8009a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a4c <_vfiprintf_r>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	460d      	mov	r5, r1
 8009a52:	4614      	mov	r4, r2
 8009a54:	4698      	mov	r8, r3
 8009a56:	4606      	mov	r6, r0
 8009a58:	b09d      	sub	sp, #116	@ 0x74
 8009a5a:	b118      	cbz	r0, 8009a64 <_vfiprintf_r+0x18>
 8009a5c:	6a03      	ldr	r3, [r0, #32]
 8009a5e:	b90b      	cbnz	r3, 8009a64 <_vfiprintf_r+0x18>
 8009a60:	f7fc fe66 	bl	8006730 <__sinit>
 8009a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a66:	07d9      	lsls	r1, r3, #31
 8009a68:	d405      	bmi.n	8009a76 <_vfiprintf_r+0x2a>
 8009a6a:	89ab      	ldrh	r3, [r5, #12]
 8009a6c:	059a      	lsls	r2, r3, #22
 8009a6e:	d402      	bmi.n	8009a76 <_vfiprintf_r+0x2a>
 8009a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a72:	f7fc ff86 	bl	8006982 <__retarget_lock_acquire_recursive>
 8009a76:	89ab      	ldrh	r3, [r5, #12]
 8009a78:	071b      	lsls	r3, r3, #28
 8009a7a:	d501      	bpl.n	8009a80 <_vfiprintf_r+0x34>
 8009a7c:	692b      	ldr	r3, [r5, #16]
 8009a7e:	b99b      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x5c>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4630      	mov	r0, r6
 8009a84:	f000 f938 	bl	8009cf8 <__swsetup_r>
 8009a88:	b170      	cbz	r0, 8009aa8 <_vfiprintf_r+0x5c>
 8009a8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a8c:	07dc      	lsls	r4, r3, #31
 8009a8e:	d504      	bpl.n	8009a9a <_vfiprintf_r+0x4e>
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	b01d      	add	sp, #116	@ 0x74
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	0598      	lsls	r0, r3, #22
 8009a9e:	d4f7      	bmi.n	8009a90 <_vfiprintf_r+0x44>
 8009aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aa2:	f7fc ff6f 	bl	8006984 <__retarget_lock_release_recursive>
 8009aa6:	e7f3      	b.n	8009a90 <_vfiprintf_r+0x44>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aac:	2320      	movs	r3, #32
 8009aae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ab2:	2330      	movs	r3, #48	@ 0x30
 8009ab4:	f04f 0901 	mov.w	r9, #1
 8009ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009abc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009c68 <_vfiprintf_r+0x21c>
 8009ac0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	469a      	mov	sl, r3
 8009ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009acc:	b10a      	cbz	r2, 8009ad2 <_vfiprintf_r+0x86>
 8009ace:	2a25      	cmp	r2, #37	@ 0x25
 8009ad0:	d1f9      	bne.n	8009ac6 <_vfiprintf_r+0x7a>
 8009ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad6:	d00b      	beq.n	8009af0 <_vfiprintf_r+0xa4>
 8009ad8:	465b      	mov	r3, fp
 8009ada:	4622      	mov	r2, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ffa2 	bl	8009a28 <__sfputs_r>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f000 80a7 	beq.w	8009c38 <_vfiprintf_r+0x1ec>
 8009aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aec:	445a      	add	r2, fp
 8009aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8009af0:	f89a 3000 	ldrb.w	r3, [sl]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 809f 	beq.w	8009c38 <_vfiprintf_r+0x1ec>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b04:	f10a 0a01 	add.w	sl, sl, #1
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b10:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b12:	4654      	mov	r4, sl
 8009b14:	2205      	movs	r2, #5
 8009b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1a:	4853      	ldr	r0, [pc, #332]	@ (8009c68 <_vfiprintf_r+0x21c>)
 8009b1c:	f7fc ff3b 	bl	8006996 <memchr>
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	b9d8      	cbnz	r0, 8009b5c <_vfiprintf_r+0x110>
 8009b24:	06d1      	lsls	r1, r2, #27
 8009b26:	bf44      	itt	mi
 8009b28:	2320      	movmi	r3, #32
 8009b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b2e:	0713      	lsls	r3, r2, #28
 8009b30:	bf44      	itt	mi
 8009b32:	232b      	movmi	r3, #43	@ 0x2b
 8009b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b38:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b3e:	d015      	beq.n	8009b6c <_vfiprintf_r+0x120>
 8009b40:	4654      	mov	r4, sl
 8009b42:	2000      	movs	r0, #0
 8009b44:	f04f 0c0a 	mov.w	ip, #10
 8009b48:	9a07      	ldr	r2, [sp, #28]
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b50:	3b30      	subs	r3, #48	@ 0x30
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d94b      	bls.n	8009bee <_vfiprintf_r+0x1a2>
 8009b56:	b1b0      	cbz	r0, 8009b86 <_vfiprintf_r+0x13a>
 8009b58:	9207      	str	r2, [sp, #28]
 8009b5a:	e014      	b.n	8009b86 <_vfiprintf_r+0x13a>
 8009b5c:	eba0 0308 	sub.w	r3, r0, r8
 8009b60:	fa09 f303 	lsl.w	r3, r9, r3
 8009b64:	4313      	orrs	r3, r2
 8009b66:	46a2      	mov	sl, r4
 8009b68:	9304      	str	r3, [sp, #16]
 8009b6a:	e7d2      	b.n	8009b12 <_vfiprintf_r+0xc6>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	1d19      	adds	r1, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	9103      	str	r1, [sp, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfbb      	ittet	lt
 8009b78:	425b      	neglt	r3, r3
 8009b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7e:	9307      	strge	r3, [sp, #28]
 8009b80:	9307      	strlt	r3, [sp, #28]
 8009b82:	bfb8      	it	lt
 8009b84:	9204      	strlt	r2, [sp, #16]
 8009b86:	7823      	ldrb	r3, [r4, #0]
 8009b88:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b8a:	d10a      	bne.n	8009ba2 <_vfiprintf_r+0x156>
 8009b8c:	7863      	ldrb	r3, [r4, #1]
 8009b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b90:	d132      	bne.n	8009bf8 <_vfiprintf_r+0x1ac>
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	3402      	adds	r4, #2
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	9203      	str	r2, [sp, #12]
 8009b9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ba0:	9305      	str	r3, [sp, #20]
 8009ba2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009c6c <_vfiprintf_r+0x220>
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	4650      	mov	r0, sl
 8009baa:	7821      	ldrb	r1, [r4, #0]
 8009bac:	f7fc fef3 	bl	8006996 <memchr>
 8009bb0:	b138      	cbz	r0, 8009bc2 <_vfiprintf_r+0x176>
 8009bb2:	2240      	movs	r2, #64	@ 0x40
 8009bb4:	9b04      	ldr	r3, [sp, #16]
 8009bb6:	eba0 000a 	sub.w	r0, r0, sl
 8009bba:	4082      	lsls	r2, r0
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	3401      	adds	r4, #1
 8009bc0:	9304      	str	r3, [sp, #16]
 8009bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc6:	2206      	movs	r2, #6
 8009bc8:	4829      	ldr	r0, [pc, #164]	@ (8009c70 <_vfiprintf_r+0x224>)
 8009bca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bce:	f7fc fee2 	bl	8006996 <memchr>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d03f      	beq.n	8009c56 <_vfiprintf_r+0x20a>
 8009bd6:	4b27      	ldr	r3, [pc, #156]	@ (8009c74 <_vfiprintf_r+0x228>)
 8009bd8:	bb1b      	cbnz	r3, 8009c22 <_vfiprintf_r+0x1d6>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	3307      	adds	r3, #7
 8009bde:	f023 0307 	bic.w	r3, r3, #7
 8009be2:	3308      	adds	r3, #8
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be8:	443b      	add	r3, r7
 8009bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bec:	e76a      	b.n	8009ac4 <_vfiprintf_r+0x78>
 8009bee:	460c      	mov	r4, r1
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf6:	e7a8      	b.n	8009b4a <_vfiprintf_r+0xfe>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f04f 0c0a 	mov.w	ip, #10
 8009bfe:	4619      	mov	r1, r3
 8009c00:	3401      	adds	r4, #1
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	4620      	mov	r0, r4
 8009c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c0a:	3a30      	subs	r2, #48	@ 0x30
 8009c0c:	2a09      	cmp	r2, #9
 8009c0e:	d903      	bls.n	8009c18 <_vfiprintf_r+0x1cc>
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0c6      	beq.n	8009ba2 <_vfiprintf_r+0x156>
 8009c14:	9105      	str	r1, [sp, #20]
 8009c16:	e7c4      	b.n	8009ba2 <_vfiprintf_r+0x156>
 8009c18:	4604      	mov	r4, r0
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c20:	e7f0      	b.n	8009c04 <_vfiprintf_r+0x1b8>
 8009c22:	ab03      	add	r3, sp, #12
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	462a      	mov	r2, r5
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4b13      	ldr	r3, [pc, #76]	@ (8009c78 <_vfiprintf_r+0x22c>)
 8009c2c:	a904      	add	r1, sp, #16
 8009c2e:	f7fb ff25 	bl	8005a7c <_printf_float>
 8009c32:	4607      	mov	r7, r0
 8009c34:	1c78      	adds	r0, r7, #1
 8009c36:	d1d6      	bne.n	8009be6 <_vfiprintf_r+0x19a>
 8009c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c3a:	07d9      	lsls	r1, r3, #31
 8009c3c:	d405      	bmi.n	8009c4a <_vfiprintf_r+0x1fe>
 8009c3e:	89ab      	ldrh	r3, [r5, #12]
 8009c40:	059a      	lsls	r2, r3, #22
 8009c42:	d402      	bmi.n	8009c4a <_vfiprintf_r+0x1fe>
 8009c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c46:	f7fc fe9d 	bl	8006984 <__retarget_lock_release_recursive>
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	065b      	lsls	r3, r3, #25
 8009c4e:	f53f af1f 	bmi.w	8009a90 <_vfiprintf_r+0x44>
 8009c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c54:	e71e      	b.n	8009a94 <_vfiprintf_r+0x48>
 8009c56:	ab03      	add	r3, sp, #12
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	4b06      	ldr	r3, [pc, #24]	@ (8009c78 <_vfiprintf_r+0x22c>)
 8009c60:	a904      	add	r1, sp, #16
 8009c62:	f7fc f9a9 	bl	8005fb8 <_printf_i>
 8009c66:	e7e4      	b.n	8009c32 <_vfiprintf_r+0x1e6>
 8009c68:	0800a300 	.word	0x0800a300
 8009c6c:	0800a306 	.word	0x0800a306
 8009c70:	0800a30a 	.word	0x0800a30a
 8009c74:	08005a7d 	.word	0x08005a7d
 8009c78:	08009a29 	.word	0x08009a29

08009c7c <__swbuf_r>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	460e      	mov	r6, r1
 8009c80:	4614      	mov	r4, r2
 8009c82:	4605      	mov	r5, r0
 8009c84:	b118      	cbz	r0, 8009c8e <__swbuf_r+0x12>
 8009c86:	6a03      	ldr	r3, [r0, #32]
 8009c88:	b90b      	cbnz	r3, 8009c8e <__swbuf_r+0x12>
 8009c8a:	f7fc fd51 	bl	8006730 <__sinit>
 8009c8e:	69a3      	ldr	r3, [r4, #24]
 8009c90:	60a3      	str	r3, [r4, #8]
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	071a      	lsls	r2, r3, #28
 8009c96:	d501      	bpl.n	8009c9c <__swbuf_r+0x20>
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	b943      	cbnz	r3, 8009cae <__swbuf_r+0x32>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 f82a 	bl	8009cf8 <__swsetup_r>
 8009ca4:	b118      	cbz	r0, 8009cae <__swbuf_r+0x32>
 8009ca6:	f04f 37ff 	mov.w	r7, #4294967295
 8009caa:	4638      	mov	r0, r7
 8009cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	6922      	ldr	r2, [r4, #16]
 8009cb2:	b2f6      	uxtb	r6, r6
 8009cb4:	1a98      	subs	r0, r3, r2
 8009cb6:	6963      	ldr	r3, [r4, #20]
 8009cb8:	4637      	mov	r7, r6
 8009cba:	4283      	cmp	r3, r0
 8009cbc:	dc05      	bgt.n	8009cca <__swbuf_r+0x4e>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f7ff fa4b 	bl	800915c <_fflush_r>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1ed      	bne.n	8009ca6 <__swbuf_r+0x2a>
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	60a3      	str	r3, [r4, #8]
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	701e      	strb	r6, [r3, #0]
 8009cd8:	6962      	ldr	r2, [r4, #20]
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d004      	beq.n	8009cea <__swbuf_r+0x6e>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	07db      	lsls	r3, r3, #31
 8009ce4:	d5e1      	bpl.n	8009caa <__swbuf_r+0x2e>
 8009ce6:	2e0a      	cmp	r6, #10
 8009ce8:	d1df      	bne.n	8009caa <__swbuf_r+0x2e>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4628      	mov	r0, r5
 8009cee:	f7ff fa35 	bl	800915c <_fflush_r>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d0d9      	beq.n	8009caa <__swbuf_r+0x2e>
 8009cf6:	e7d6      	b.n	8009ca6 <__swbuf_r+0x2a>

08009cf8 <__swsetup_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4b29      	ldr	r3, [pc, #164]	@ (8009da0 <__swsetup_r+0xa8>)
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	460c      	mov	r4, r1
 8009d02:	b118      	cbz	r0, 8009d0c <__swsetup_r+0x14>
 8009d04:	6a03      	ldr	r3, [r0, #32]
 8009d06:	b90b      	cbnz	r3, 8009d0c <__swsetup_r+0x14>
 8009d08:	f7fc fd12 	bl	8006730 <__sinit>
 8009d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d10:	0719      	lsls	r1, r3, #28
 8009d12:	d422      	bmi.n	8009d5a <__swsetup_r+0x62>
 8009d14:	06da      	lsls	r2, r3, #27
 8009d16:	d407      	bmi.n	8009d28 <__swsetup_r+0x30>
 8009d18:	2209      	movs	r2, #9
 8009d1a:	602a      	str	r2, [r5, #0]
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	e033      	b.n	8009d90 <__swsetup_r+0x98>
 8009d28:	0758      	lsls	r0, r3, #29
 8009d2a:	d512      	bpl.n	8009d52 <__swsetup_r+0x5a>
 8009d2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d2e:	b141      	cbz	r1, 8009d42 <__swsetup_r+0x4a>
 8009d30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d34:	4299      	cmp	r1, r3
 8009d36:	d002      	beq.n	8009d3e <__swsetup_r+0x46>
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f7fd fc91 	bl	8007660 <_free_r>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d48:	81a3      	strh	r3, [r4, #12]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	6063      	str	r3, [r4, #4]
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f043 0308 	orr.w	r3, r3, #8
 8009d58:	81a3      	strh	r3, [r4, #12]
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	b94b      	cbnz	r3, 8009d72 <__swsetup_r+0x7a>
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d68:	d003      	beq.n	8009d72 <__swsetup_r+0x7a>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f000 f882 	bl	8009e76 <__smakebuf_r>
 8009d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d76:	f013 0201 	ands.w	r2, r3, #1
 8009d7a:	d00a      	beq.n	8009d92 <__swsetup_r+0x9a>
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	60a2      	str	r2, [r4, #8]
 8009d80:	6962      	ldr	r2, [r4, #20]
 8009d82:	4252      	negs	r2, r2
 8009d84:	61a2      	str	r2, [r4, #24]
 8009d86:	6922      	ldr	r2, [r4, #16]
 8009d88:	b942      	cbnz	r2, 8009d9c <__swsetup_r+0xa4>
 8009d8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d8e:	d1c5      	bne.n	8009d1c <__swsetup_r+0x24>
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	0799      	lsls	r1, r3, #30
 8009d94:	bf58      	it	pl
 8009d96:	6962      	ldrpl	r2, [r4, #20]
 8009d98:	60a2      	str	r2, [r4, #8]
 8009d9a:	e7f4      	b.n	8009d86 <__swsetup_r+0x8e>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7f7      	b.n	8009d90 <__swsetup_r+0x98>
 8009da0:	20000020 	.word	0x20000020

08009da4 <_raise_r>:
 8009da4:	291f      	cmp	r1, #31
 8009da6:	b538      	push	{r3, r4, r5, lr}
 8009da8:	4605      	mov	r5, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	d904      	bls.n	8009db8 <_raise_r+0x14>
 8009dae:	2316      	movs	r3, #22
 8009db0:	6003      	str	r3, [r0, #0]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dba:	b112      	cbz	r2, 8009dc2 <_raise_r+0x1e>
 8009dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dc0:	b94b      	cbnz	r3, 8009dd6 <_raise_r+0x32>
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 f830 	bl	8009e28 <_getpid_r>
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4628      	mov	r0, r5
 8009dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd2:	f000 b817 	b.w	8009e04 <_kill_r>
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d00a      	beq.n	8009df0 <_raise_r+0x4c>
 8009dda:	1c59      	adds	r1, r3, #1
 8009ddc:	d103      	bne.n	8009de6 <_raise_r+0x42>
 8009dde:	2316      	movs	r3, #22
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	2001      	movs	r0, #1
 8009de4:	e7e7      	b.n	8009db6 <_raise_r+0x12>
 8009de6:	2100      	movs	r1, #0
 8009de8:	4620      	mov	r0, r4
 8009dea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009dee:	4798      	blx	r3
 8009df0:	2000      	movs	r0, #0
 8009df2:	e7e0      	b.n	8009db6 <_raise_r+0x12>

08009df4 <raise>:
 8009df4:	4b02      	ldr	r3, [pc, #8]	@ (8009e00 <raise+0xc>)
 8009df6:	4601      	mov	r1, r0
 8009df8:	6818      	ldr	r0, [r3, #0]
 8009dfa:	f7ff bfd3 	b.w	8009da4 <_raise_r>
 8009dfe:	bf00      	nop
 8009e00:	20000020 	.word	0x20000020

08009e04 <_kill_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	2300      	movs	r3, #0
 8009e08:	4d06      	ldr	r5, [pc, #24]	@ (8009e24 <_kill_r+0x20>)
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	4611      	mov	r1, r2
 8009e10:	602b      	str	r3, [r5, #0]
 8009e12:	f7f8 fc74 	bl	80026fe <_kill>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	d102      	bne.n	8009e20 <_kill_r+0x1c>
 8009e1a:	682b      	ldr	r3, [r5, #0]
 8009e1c:	b103      	cbz	r3, 8009e20 <_kill_r+0x1c>
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	bf00      	nop
 8009e24:	2000248c 	.word	0x2000248c

08009e28 <_getpid_r>:
 8009e28:	f7f8 bc62 	b.w	80026f0 <_getpid>

08009e2c <__swhatbuf_r>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	460c      	mov	r4, r1
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	4615      	mov	r5, r2
 8009e36:	2900      	cmp	r1, #0
 8009e38:	461e      	mov	r6, r3
 8009e3a:	b096      	sub	sp, #88	@ 0x58
 8009e3c:	da0c      	bge.n	8009e58 <__swhatbuf_r+0x2c>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	2100      	movs	r1, #0
 8009e42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e46:	bf14      	ite	ne
 8009e48:	2340      	movne	r3, #64	@ 0x40
 8009e4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e4e:	2000      	movs	r0, #0
 8009e50:	6031      	str	r1, [r6, #0]
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	b016      	add	sp, #88	@ 0x58
 8009e56:	bd70      	pop	{r4, r5, r6, pc}
 8009e58:	466a      	mov	r2, sp
 8009e5a:	f000 f849 	bl	8009ef0 <_fstat_r>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	dbed      	blt.n	8009e3e <__swhatbuf_r+0x12>
 8009e62:	9901      	ldr	r1, [sp, #4]
 8009e64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e6c:	4259      	negs	r1, r3
 8009e6e:	4159      	adcs	r1, r3
 8009e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e74:	e7eb      	b.n	8009e4e <__swhatbuf_r+0x22>

08009e76 <__smakebuf_r>:
 8009e76:	898b      	ldrh	r3, [r1, #12]
 8009e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e7a:	079d      	lsls	r5, r3, #30
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	d507      	bpl.n	8009e92 <__smakebuf_r+0x1c>
 8009e82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	6123      	str	r3, [r4, #16]
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	6163      	str	r3, [r4, #20]
 8009e8e:	b003      	add	sp, #12
 8009e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e92:	466a      	mov	r2, sp
 8009e94:	ab01      	add	r3, sp, #4
 8009e96:	f7ff ffc9 	bl	8009e2c <__swhatbuf_r>
 8009e9a:	9f00      	ldr	r7, [sp, #0]
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7fd fc4f 	bl	8007744 <_malloc_r>
 8009ea6:	b948      	cbnz	r0, 8009ebc <__smakebuf_r+0x46>
 8009ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eac:	059a      	lsls	r2, r3, #22
 8009eae:	d4ee      	bmi.n	8009e8e <__smakebuf_r+0x18>
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	f043 0302 	orr.w	r3, r3, #2
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	e7e2      	b.n	8009e82 <__smakebuf_r+0xc>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ec6:	81a3      	strh	r3, [r4, #12]
 8009ec8:	9b01      	ldr	r3, [sp, #4]
 8009eca:	6020      	str	r0, [r4, #0]
 8009ecc:	b15b      	cbz	r3, 8009ee6 <__smakebuf_r+0x70>
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed4:	f000 f81e 	bl	8009f14 <_isatty_r>
 8009ed8:	b128      	cbz	r0, 8009ee6 <__smakebuf_r+0x70>
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	f043 0301 	orr.w	r3, r3, #1
 8009ee4:	81a3      	strh	r3, [r4, #12]
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	431d      	orrs	r5, r3
 8009eea:	81a5      	strh	r5, [r4, #12]
 8009eec:	e7cf      	b.n	8009e8e <__smakebuf_r+0x18>
	...

08009ef0 <_fstat_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4d06      	ldr	r5, [pc, #24]	@ (8009f10 <_fstat_r+0x20>)
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	4611      	mov	r1, r2
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f7f8 fc5d 	bl	80027bc <_fstat>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d102      	bne.n	8009f0c <_fstat_r+0x1c>
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	b103      	cbz	r3, 8009f0c <_fstat_r+0x1c>
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	bd38      	pop	{r3, r4, r5, pc}
 8009f0e:	bf00      	nop
 8009f10:	2000248c 	.word	0x2000248c

08009f14 <_isatty_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	2300      	movs	r3, #0
 8009f18:	4d05      	ldr	r5, [pc, #20]	@ (8009f30 <_isatty_r+0x1c>)
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7f8 fc5b 	bl	80027da <_isatty>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_isatty_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_isatty_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	2000248c 	.word	0x2000248c

08009f34 <_init>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	bf00      	nop
 8009f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3a:	bc08      	pop	{r3}
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	4770      	bx	lr

08009f40 <_fini>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	bf00      	nop
 8009f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f46:	bc08      	pop	{r3}
 8009f48:	469e      	mov	lr, r3
 8009f4a:	4770      	bx	lr
