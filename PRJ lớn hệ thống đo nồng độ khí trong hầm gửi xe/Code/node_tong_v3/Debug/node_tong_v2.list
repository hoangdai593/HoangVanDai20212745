
node_tong_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004ce4  08004ce4  00005ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e6c  08004e6c  00006074  2**0
                  CONTENTS
  4 .ARM          00000000  08004e6c  08004e6c  00006074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e6c  08004e6c  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e6c  08004e6c  00005e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e70  08004e70  00005e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004e74  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022e4  20000074  08004ee8  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002358  08004ee8  00006358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c558  00000000  00000000  0000609d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccc  00000000  00000000  000125f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  000142c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f8  00000000  00000000  00014f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017afd  00000000  00000000  00015970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaa7  00000000  00000000  0002d46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa1e  00000000  00000000  0003bf14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  000c6978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000ca460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ccc 	.word	0x08004ccc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004ccc 	.word	0x08004ccc

0800014c <L2_LED_On>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void L2_LED_On ()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000156:	4808      	ldr	r0, [pc, #32]	@ (8000178 <L2_LED_On+0x2c>)
 8000158:	f001 fde8 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_RESET);
 800015c:	2200      	movs	r2, #0
 800015e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000162:	4805      	ldr	r0, [pc, #20]	@ (8000178 <L2_LED_On+0x2c>)
 8000164:	f001 fde2 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800016e:	4802      	ldr	r0, [pc, #8]	@ (8000178 <L2_LED_On+0x2c>)
 8000170:	f001 fddc 	bl	8001d2c <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010c00 	.word	0x40010c00

0800017c <L3_LED_On>:
void L3_LED_On ()
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000186:	4808      	ldr	r0, [pc, #32]	@ (80001a8 <L3_LED_On+0x2c>)
 8000188:	f001 fdd0 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000192:	4805      	ldr	r0, [pc, #20]	@ (80001a8 <L3_LED_On+0x2c>)
 8000194:	f001 fdca 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <L3_LED_On+0x2c>)
 80001a0:	f001 fdc4 	bl	8001d2c <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010c00 	.word	0x40010c00

080001ac <L1_LED_On>:
void L1_LED_On()
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001b6:	4808      	ldr	r0, [pc, #32]	@ (80001d8 <L1_LED_On+0x2c>)
 80001b8:	f001 fdb8 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c2:	4805      	ldr	r0, [pc, #20]	@ (80001d8 <L1_LED_On+0x2c>)
 80001c4:	f001 fdb2 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001ce:	4802      	ldr	r0, [pc, #8]	@ (80001d8 <L1_LED_On+0x2c>)
 80001d0:	f001 fdac 	bl	8001d2c <HAL_GPIO_WritePin>
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010c00 	.word	0x40010c00

080001dc <L1_3_LED_Off>:
void L1_3_LED_Off()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L1_LED_GPIO_Port,L1_LED_Pin, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001e6:	4808      	ldr	r0, [pc, #32]	@ (8000208 <L1_3_LED_Off+0x2c>)
 80001e8:	f001 fda0 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_LED_GPIO_Port,L2_LED_Pin, GPIO_PIN_SET);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001f2:	4805      	ldr	r0, [pc, #20]	@ (8000208 <L1_3_LED_Off+0x2c>)
 80001f4:	f001 fd9a 	bl	8001d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_LED_GPIO_Port,L3_LED_Pin, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001fe:	4802      	ldr	r0, [pc, #8]	@ (8000208 <L1_3_LED_Off+0x2c>)
 8000200:	f001 fd94 	bl	8001d2c <HAL_GPIO_WritePin>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40010c00 	.word	0x40010c00

0800020c <AT_LED_On>:
void AT_LED_On()
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AT_LED_GPIO_Port,AT_LED_Pin, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000216:	4802      	ldr	r0, [pc, #8]	@ (8000220 <AT_LED_On+0x14>)
 8000218:	f001 fd88 	bl	8001d2c <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010c00 	.word	0x40010c00

08000224 <RS485_SendCommand>:
{
	HAL_GPIO_WritePin(AT_LED_GPIO_Port,AT_LED_Pin, GPIO_PIN_SET);
}
// Gửi lệnh tới Slave với địa chỉ ID
void RS485_SendCommand(uint8_t slaveID, uint8_t command)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	460a      	mov	r2, r1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	4613      	mov	r3, r2
 8000232:	71bb      	strb	r3, [r7, #6]
    RS1_txBuffer[0] = slaveID;  // �?ịa chỉ Slave
 8000234:	4a09      	ldr	r2, [pc, #36]	@ (800025c <RS485_SendCommand+0x38>)
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	7013      	strb	r3, [r2, #0]
    RS1_txBuffer[1] = command;  // Lệnh
 800023a:	4a08      	ldr	r2, [pc, #32]	@ (800025c <RS485_SendCommand+0x38>)
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	7053      	strb	r3, [r2, #1]
    RS1_txBuffer[2] = '\n';     // Ký tự kết thúc
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <RS485_SendCommand+0x38>)
 8000242:	220a      	movs	r2, #10
 8000244:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart1, RS1_txBuffer, 10, HAL_MAX_DELAY);
 8000246:	f04f 33ff 	mov.w	r3, #4294967295
 800024a:	220a      	movs	r2, #10
 800024c:	4903      	ldr	r1, [pc, #12]	@ (800025c <RS485_SendCommand+0x38>)
 800024e:	4804      	ldr	r0, [pc, #16]	@ (8000260 <RS485_SendCommand+0x3c>)
 8000250:	f003 f9cd 	bl	80035ee <HAL_UART_Transmit>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200001f8 	.word	0x200001f8
 8000260:	20000168 	.word	0x20000168

08000264 <decode_ppm_ver2>:

void decode_ppm_ver2 (char *RS1_rxBuffer,PPM *ppm)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
	char time_buf[7] = {0}; // Lưu chuỗi th�?i gian
 800026e:	2300      	movs	r3, #0
 8000270:	61bb      	str	r3, [r7, #24]
 8000272:	f107 031c 	add.w	r3, r7, #28
 8000276:	2100      	movs	r1, #0
 8000278:	460a      	mov	r2, r1
 800027a:	801a      	strh	r2, [r3, #0]
 800027c:	460a      	mov	r2, r1
 800027e:	709a      	strb	r2, [r3, #2]
	char co[6] = {0};   // Lưu chuỗi giá trị CO
 8000280:	2300      	movs	r3, #0
 8000282:	613b      	str	r3, [r7, #16]
 8000284:	2300      	movs	r3, #0
 8000286:	82bb      	strh	r3, [r7, #20]
	char co2[6] = {0};  // Lưu chuỗi giá trị CO2
 8000288:	2300      	movs	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	2300      	movs	r3, #0
 800028e:	81bb      	strh	r3, [r7, #12]

	// Tách chuỗi từ buffer
	strncpy(time_buf, (char*)&RS1_rxBuffer[2], 6);   // Tách phần tử 2-7
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	1c99      	adds	r1, r3, #2
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	2206      	movs	r2, #6
 800029a:	4618      	mov	r0, r3
 800029c:	f004 f872 	bl	8004384 <strncpy>
	strncpy(co, (char*)&RS1_rxBuffer[8], 5);     // Tách phần tử
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f103 0108 	add.w	r1, r3, #8
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	2205      	movs	r2, #5
 80002ac:	4618      	mov	r0, r3
 80002ae:	f004 f869 	bl	8004384 <strncpy>
	strncpy(co2, (char*)&RS1_rxBuffer[13], 5);   // Tách phần tử
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f103 010d 	add.w	r1, r3, #13
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	2205      	movs	r2, #5
 80002be:	4618      	mov	r0, r3
 80002c0:	f004 f860 	bl	8004384 <strncpy>

	ppm->CO_ppm = atoi(co);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 ffab 	bl	8004224 <atoi>
 80002ce:	4602      	mov	r2, r0
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	605a      	str	r2, [r3, #4]
    ppm->CO2_ppm = atoi(co2);
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	4618      	mov	r0, r3
 80002da:	f003 ffa3 	bl	8004224 <atoi>
 80002de:	4602      	mov	r2, r0
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	609a      	str	r2, [r3, #8]
	ppm->time= atoi(time_buf);
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	4618      	mov	r0, r3
 80002ea:	f003 ff9b 	bl	8004224 <atoi>
 80002ee:	4602      	mov	r2, r0
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3720      	adds	r7, #32
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <Change_Time_Read_Data>:
void Change_Time_Read_Data()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 8000300:	4b2a      	ldr	r3, [pc, #168]	@ (80003ac <Change_Time_Read_Data+0xb0>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000308:	dc1c      	bgt.n	8000344 <Change_Time_Read_Data+0x48>
 800030a:	4b28      	ldr	r3, [pc, #160]	@ (80003ac <Change_Time_Read_Data+0xb0>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	2b19      	cmp	r3, #25
 8000310:	dc18      	bgt.n	8000344 <Change_Time_Read_Data+0x48>
 8000312:	4b27      	ldr	r3, [pc, #156]	@ (80003b0 <Change_Time_Read_Data+0xb4>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800031a:	dc13      	bgt.n	8000344 <Change_Time_Read_Data+0x48>
 800031c:	4b24      	ldr	r3, [pc, #144]	@ (80003b0 <Change_Time_Read_Data+0xb4>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	2b19      	cmp	r3, #25
 8000322:	dc0f      	bgt.n	8000344 <Change_Time_Read_Data+0x48>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8000324:	4823      	ldr	r0, [pc, #140]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 8000326:	f002 f9e3 	bl	80026f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 3000);     // Cập nhật chu kỳ
 800032a:	4b22      	ldr	r3, [pc, #136]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000332:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000334:	4b1f      	ldr	r3, [pc, #124]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 8000336:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800033a:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 800033c:	481d      	ldr	r0, [pc, #116]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 800033e:	f002 f985 	bl	800264c <HAL_TIM_Base_Start_IT>
 8000342:	e031      	b.n	80003a8 <Change_Time_Read_Data+0xac>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=25 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 8000344:	4b19      	ldr	r3, [pc, #100]	@ (80003ac <Change_Time_Read_Data+0xb0>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800034c:	da0c      	bge.n	8000368 <Change_Time_Read_Data+0x6c>
 800034e:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <Change_Time_Read_Data+0xb0>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	2b18      	cmp	r3, #24
 8000354:	dc08      	bgt.n	8000368 <Change_Time_Read_Data+0x6c>
 8000356:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <Change_Time_Read_Data+0xb4>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800035e:	da03      	bge.n	8000368 <Change_Time_Read_Data+0x6c>
 8000360:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <Change_Time_Read_Data+0xb4>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	2b31      	cmp	r3, #49	@ 0x31
 8000366:	dd0f      	ble.n	8000388 <Change_Time_Read_Data+0x8c>
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8000368:	4812      	ldr	r0, [pc, #72]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 800036a:	f002 f9c1 	bl	80026f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 500);     // Cập nhật chu kỳ
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000376:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000378:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 800037a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800037e:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 8000382:	f002 f963 	bl	800264c <HAL_TIM_Base_Start_IT>
 8000386:	e00f      	b.n	80003a8 <Change_Time_Read_Data+0xac>
	}
	else
	{
    	HAL_TIM_Base_Stop_IT(&htim2);                  // Dừng timer
 8000388:	480a      	ldr	r0, [pc, #40]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 800038a:	f002 f9b1 	bl	80026f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim2, 1500);     // Cập nhật chu kỳ
 800038e:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000396:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 800039a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800039e:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim2);                 // Khởi động lại timer
 80003a0:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <Change_Time_Read_Data+0xb8>)
 80003a2:	f002 f953 	bl	800264c <HAL_TIM_Base_Start_IT>
	}
}
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000270 	.word	0x20000270
 80003b0:	2000027c 	.word	0x2000027c
 80003b4:	200000d8 	.word	0x200000d8

080003b8 <Change_Time_Save_Data>:
void Change_Time_Save_Data()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 80003bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000468 <Change_Time_Save_Data+0xb0>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003c4:	dc1c      	bgt.n	8000400 <Change_Time_Save_Data+0x48>
 80003c6:	4b28      	ldr	r3, [pc, #160]	@ (8000468 <Change_Time_Save_Data+0xb0>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	2b19      	cmp	r3, #25
 80003cc:	dc18      	bgt.n	8000400 <Change_Time_Save_Data+0x48>
 80003ce:	4b27      	ldr	r3, [pc, #156]	@ (800046c <Change_Time_Save_Data+0xb4>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003d6:	dc13      	bgt.n	8000400 <Change_Time_Save_Data+0x48>
 80003d8:	4b24      	ldr	r3, [pc, #144]	@ (800046c <Change_Time_Save_Data+0xb4>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	2b19      	cmp	r3, #25
 80003de:	dc0f      	bgt.n	8000400 <Change_Time_Save_Data+0x48>
	{
    	HAL_TIM_Base_Stop_IT(&htim3);                  // Dừng timer
 80003e0:	4823      	ldr	r0, [pc, #140]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 80003e2:	f002 f985 	bl	80026f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim3, T3);     // Cập nhật chu kỳ
 80003e6:	4b22      	ldr	r3, [pc, #136]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f241 7270 	movw	r2, #6000	@ 0x1770
 80003ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 80003f2:	f241 7270 	movw	r2, #6000	@ 0x1770
 80003f6:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim3);                 // Khởi động lại timer
 80003f8:	481d      	ldr	r0, [pc, #116]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 80003fa:	f002 f927 	bl	800264c <HAL_TIM_Base_Start_IT>
 80003fe:	e031      	b.n	8000464 <Change_Time_Save_Data+0xac>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=25 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 8000400:	4b19      	ldr	r3, [pc, #100]	@ (8000468 <Change_Time_Save_Data+0xb0>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000408:	da0c      	bge.n	8000424 <Change_Time_Save_Data+0x6c>
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <Change_Time_Save_Data+0xb0>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	2b18      	cmp	r3, #24
 8000410:	dc08      	bgt.n	8000424 <Change_Time_Save_Data+0x6c>
 8000412:	4b16      	ldr	r3, [pc, #88]	@ (800046c <Change_Time_Save_Data+0xb4>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800041a:	da03      	bge.n	8000424 <Change_Time_Save_Data+0x6c>
 800041c:	4b13      	ldr	r3, [pc, #76]	@ (800046c <Change_Time_Save_Data+0xb4>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	2b31      	cmp	r3, #49	@ 0x31
 8000422:	dd0f      	ble.n	8000444 <Change_Time_Save_Data+0x8c>
	{
    	HAL_TIM_Base_Stop_IT(&htim3);                  // Dừng timer
 8000424:	4812      	ldr	r0, [pc, #72]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 8000426:	f002 f963 	bl	80026f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim3, T2);     // Cập nhật chu kỳ
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000432:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000434:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 8000436:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800043a:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim3);                 // Khởi động lại timer
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 800043e:	f002 f905 	bl	800264c <HAL_TIM_Base_Start_IT>
 8000442:	e00f      	b.n	8000464 <Change_Time_Save_Data+0xac>
	}
	else
	{
    	HAL_TIM_Base_Stop_IT(&htim3);                  // Dừng timer
 8000444:	480a      	ldr	r0, [pc, #40]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 8000446:	f002 f953 	bl	80026f0 <HAL_TIM_Base_Stop_IT>
    	__HAL_TIM_SET_AUTORELOAD(&htim3, T1);     // Cập nhật chu kỳ
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000452:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 8000456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800045a:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Start_IT(&htim3);                 // Khởi động lại timer
 800045c:	4804      	ldr	r0, [pc, #16]	@ (8000470 <Change_Time_Save_Data+0xb8>)
 800045e:	f002 f8f5 	bl	800264c <HAL_TIM_Base_Start_IT>
	}
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000270 	.word	0x20000270
 800046c:	2000027c 	.word	0x2000027c
 8000470:	20000120 	.word	0x20000120

08000474 <Control_Fan_Auto>:

void Control_Fan_Auto()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	if(ppm_data_1.CO2_ppm <=1000 && ppm_data_1.CO_ppm <=25 && ppm_data_2.CO2_ppm <=1000 && ppm_data_2.CO_ppm <=25)
 8000478:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <Control_Fan_Auto+0x74>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000480:	dc12      	bgt.n	80004a8 <Control_Fan_Auto+0x34>
 8000482:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <Control_Fan_Auto+0x74>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	2b19      	cmp	r3, #25
 8000488:	dc0e      	bgt.n	80004a8 <Control_Fan_Auto+0x34>
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <Control_Fan_Auto+0x78>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000492:	dc09      	bgt.n	80004a8 <Control_Fan_Auto+0x34>
 8000494:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <Control_Fan_Auto+0x78>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b19      	cmp	r3, #25
 800049a:	dc05      	bgt.n	80004a8 <Control_Fan_Auto+0x34>
	{
		TIM1->CCR1 = 50;
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <Control_Fan_Auto+0x7c>)
 800049e:	2232      	movs	r2, #50	@ 0x32
 80004a0:	635a      	str	r2, [r3, #52]	@ 0x34
		L1_LED_On();
 80004a2:	f7ff fe83 	bl	80001ac <L1_LED_On>
 80004a6:	e01d      	b.n	80004e4 <Control_Fan_Auto+0x70>
	}
	else if(ppm_data_1.CO2_ppm >=2000 || ppm_data_1.CO_ppm >=25 || ppm_data_2.CO2_ppm >=2000 || ppm_data_2.CO_ppm >=50)
 80004a8:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <Control_Fan_Auto+0x74>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80004b0:	da0c      	bge.n	80004cc <Control_Fan_Auto+0x58>
 80004b2:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <Control_Fan_Auto+0x74>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	2b18      	cmp	r3, #24
 80004b8:	dc08      	bgt.n	80004cc <Control_Fan_Auto+0x58>
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <Control_Fan_Auto+0x78>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80004c2:	da03      	bge.n	80004cc <Control_Fan_Auto+0x58>
 80004c4:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <Control_Fan_Auto+0x78>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b31      	cmp	r3, #49	@ 0x31
 80004ca:	dd05      	ble.n	80004d8 <Control_Fan_Auto+0x64>
	{
		TIM1->CCR1 = 100;
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <Control_Fan_Auto+0x7c>)
 80004ce:	2264      	movs	r2, #100	@ 0x64
 80004d0:	635a      	str	r2, [r3, #52]	@ 0x34
		L3_LED_On();
 80004d2:	f7ff fe53 	bl	800017c <L3_LED_On>
 80004d6:	e005      	b.n	80004e4 <Control_Fan_Auto+0x70>
	}
	else
	{
		TIM1->CCR1 = 75;
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <Control_Fan_Auto+0x7c>)
 80004da:	224b      	movs	r2, #75	@ 0x4b
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34
		L2_LED_On();
 80004de:	f7ff fe35 	bl	800014c <L2_LED_On>
	}
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000270 	.word	0x20000270
 80004ec:	2000027c 	.word	0x2000027c
 80004f0:	40012c00 	.word	0x40012c00

080004f4 <HAL_TIM_PeriodElapsedCallback>:
// gửi lệnh đ�?c v�? node đo theo th�?i gian
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)  // Kiểm tra nếu ngắt từ Timer 2
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000504:	d14b      	bne.n	800059e <HAL_TIM_PeriodElapsedCallback+0xaa>
    {
    	if(node_flag==1 && receive_node1_flag==1)
 8000506:	4b30      	ldr	r3, [pc, #192]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d10e      	bne.n	800052c <HAL_TIM_PeriodElapsedCallback+0x38>
 800050e:	4b2f      	ldr	r3, [pc, #188]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d10a      	bne.n	800052c <HAL_TIM_PeriodElapsedCallback+0x38>
    	{
    	RS485_SendCommand(0x01, 0x02);  // Gửi lệnh "02" tới Slave 1 ( lệnh gửi 1 dữ liệu)
 8000516:	2102      	movs	r1, #2
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff fe83 	bl	8000224 <RS485_SendCommand>
    	node_flag=2;
 800051e:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000520:	2202      	movs	r2, #2
 8000522:	601a      	str	r2, [r3, #0]
    	receive_node1_flag=0;
 8000524:	4b29      	ldr	r3, [pc, #164]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e048      	b.n	80005be <HAL_TIM_PeriodElapsedCallback+0xca>
    	}
    	else if(node_flag==1 && receive_node1_flag==0)
 800052c:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d10e      	bne.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000534:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10a      	bne.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x5e>
    	{
    	RS485_SendCommand(0x01, 0x03);  // Gửi lệnh "03" tới Slave 1 ( lệnh gửi tất cả dữ liệu chưa gửi được)
 800053c:	2103      	movs	r1, #3
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff fe70 	bl	8000224 <RS485_SendCommand>
    	node_flag=2;
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
    	receive_node1_flag=0;
 800054a:	4b20      	ldr	r3, [pc, #128]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	e035      	b.n	80005be <HAL_TIM_PeriodElapsedCallback+0xca>
    	}

    	else if(node_flag==2&& receive_node2_flag==1)
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d10e      	bne.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x84>
 800055a:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10a      	bne.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x84>
    	{
		RS485_SendCommand(0x02, 0x02);  // Gửi lệnh "02" tới Slave 2
 8000562:	2102      	movs	r1, #2
 8000564:	2002      	movs	r0, #2
 8000566:	f7ff fe5d 	bl	8000224 <RS485_SendCommand>
		node_flag=1;
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800056c:	2201      	movs	r2, #1
 800056e:	601a      	str	r2, [r3, #0]
		receive_node2_flag=0;
 8000570:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	e022      	b.n	80005be <HAL_TIM_PeriodElapsedCallback+0xca>
    	}
    	else if(node_flag==2 && receive_node2_flag==0)
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d11e      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0xca>
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d11a      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0xca>
    	{
    		RS485_SendCommand(0x02, 0x03);  // Gửi lệnh "03" tới Slave 2
 8000588:	2103      	movs	r1, #3
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff fe4a 	bl	8000224 <RS485_SendCommand>
    		node_flag=1;
 8000590:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
    		receive_node2_flag=0;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
    {
    	Change_Time_Save_Data();
    	connect_gw_error_flag++;
    	save_ok=0;
    }
}
 800059c:	e00f      	b.n	80005be <HAL_TIM_PeriodElapsedCallback+0xca>
    else if (htim->Instance == TIM3)  // Kiểm tra nếu ngắt từ Timer 3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0c      	ldr	r2, [pc, #48]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d10a      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0xca>
    	Change_Time_Save_Data();
 80005a8:	f7ff ff06 	bl	80003b8 <Change_Time_Save_Data>
    	connect_gw_error_flag++;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	4a09      	ldr	r2, [pc, #36]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80005b4:	6013      	str	r3, [r2, #0]
    	save_ok=0;
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
}
 80005bc:	e7ff      	b.n	80005be <HAL_TIM_PeriodElapsedCallback+0xca>
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000010 	.word	0x20000010
 80005d0:	20000014 	.word	0x20000014
 80005d4:	40000400 	.word	0x40000400
 80005d8:	20000288 	.word	0x20000288
 80005dc:	2000028c 	.word	0x2000028c

080005e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	b087      	sub	sp, #28
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	6078      	str	r0, [r7, #4]
	// Nhận dữ liệu từ node đo
    if (huart->Instance == USART1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a89      	ldr	r2, [pc, #548]	@ (8000814 <HAL_UART_RxCpltCallback+0x234>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d16b      	bne.n	80006ca <HAL_UART_RxCpltCallback+0xea>
    {
        if (RS1_rxBuffer[0] == 0x01)
 80005f2:	4b89      	ldr	r3, [pc, #548]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d131      	bne.n	800065e <HAL_UART_RxCpltCallback+0x7e>
           { // Kiểm tra địa chỉ slave
        	 if(RS1_rxBuffer[1] == 0x02)
 80005fa:	4b87      	ldr	r3, [pc, #540]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d110      	bne.n	8000624 <HAL_UART_RxCpltCallback+0x44>
			{
				decode_ppm_ver2((char*)RS1_rxBuffer,&ppm_data_1);
 8000602:	4986      	ldr	r1, [pc, #536]	@ (800081c <HAL_UART_RxCpltCallback+0x23c>)
 8000604:	4884      	ldr	r0, [pc, #528]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 8000606:	f7ff fe2d 	bl	8000264 <decode_ppm_ver2>
				receive_node1_flag=1; // c�? nhận được dữ liệu từ node1
 800060a:	4b85      	ldr	r3, [pc, #532]	@ (8000820 <HAL_UART_RxCpltCallback+0x240>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
				miss_data_node1_to_nodet_inx=0;
 8000610:	4b84      	ldr	r3, [pc, #528]	@ (8000824 <HAL_UART_RxCpltCallback+0x244>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
				Change_Time_Read_Data();
 8000616:	f7ff fe71 	bl	80002fc <Change_Time_Read_Data>
				RS485_SendCommand(0x01, 0xFF); //FF = OK
 800061a:	21ff      	movs	r1, #255	@ 0xff
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff fe01 	bl	8000224 <RS485_SendCommand>
 8000622:	e01c      	b.n	800065e <HAL_UART_RxCpltCallback+0x7e>
			}
        	 else if(RS1_rxBuffer[1] == 0x03) // nhận được nhi�?u dữ liệu
 8000624:	4b7c      	ldr	r3, [pc, #496]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d118      	bne.n	800065e <HAL_UART_RxCpltCallback+0x7e>
        	{
        		strcpy(string_data_rec1[miss_data_node1_to_nodet_inx],RS1_rxBuffer);
 800062c:	4b7d      	ldr	r3, [pc, #500]	@ (8000824 <HAL_UART_RxCpltCallback+0x244>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4a7b      	ldr	r2, [pc, #492]	@ (8000828 <HAL_UART_RxCpltCallback+0x248>)
 800063a:	4413      	add	r3, r2
 800063c:	4976      	ldr	r1, [pc, #472]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fee0 	bl	8004404 <strcpy>
        		miss_data_node1_to_nodet_inx++;
 8000644:	4b77      	ldr	r3, [pc, #476]	@ (8000824 <HAL_UART_RxCpltCallback+0x244>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	4a76      	ldr	r2, [pc, #472]	@ (8000824 <HAL_UART_RxCpltCallback+0x244>)
 800064c:	6013      	str	r3, [r2, #0]
        		miss_data_node1_to_gw_inx = miss_data_node1_to_nodet_inx;
 800064e:	4b75      	ldr	r3, [pc, #468]	@ (8000824 <HAL_UART_RxCpltCallback+0x244>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a76      	ldr	r2, [pc, #472]	@ (800082c <HAL_UART_RxCpltCallback+0x24c>)
 8000654:	6013      	str	r3, [r2, #0]
        		RS485_SendCommand(0x01, 0xEE); // gui ve node do la da luu thanh cong
 8000656:	21ee      	movs	r1, #238	@ 0xee
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff fde3 	bl	8000224 <RS485_SendCommand>
        	}
           }
        if (RS1_rxBuffer[0] == 0x02)
 800065e:	4b6e      	ldr	r3, [pc, #440]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d131      	bne.n	80006ca <HAL_UART_RxCpltCallback+0xea>
           { // Kiểm tra địa chỉ slave
        	if(RS1_rxBuffer[1] == 0x02)
 8000666:	4b6c      	ldr	r3, [pc, #432]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d110      	bne.n	8000690 <HAL_UART_RxCpltCallback+0xb0>
        	{
				decode_ppm_ver2((char*)RS1_rxBuffer,&ppm_data_2);
 800066e:	4970      	ldr	r1, [pc, #448]	@ (8000830 <HAL_UART_RxCpltCallback+0x250>)
 8000670:	4869      	ldr	r0, [pc, #420]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 8000672:	f7ff fdf7 	bl	8000264 <decode_ppm_ver2>
				receive_node2_flag=1;
 8000676:	4b6f      	ldr	r3, [pc, #444]	@ (8000834 <HAL_UART_RxCpltCallback+0x254>)
 8000678:	2201      	movs	r2, #1
 800067a:	601a      	str	r2, [r3, #0]
				miss_data_node2_to_nodet_inx=0;
 800067c:	4b6e      	ldr	r3, [pc, #440]	@ (8000838 <HAL_UART_RxCpltCallback+0x258>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
				Change_Time_Read_Data();
 8000682:	f7ff fe3b 	bl	80002fc <Change_Time_Read_Data>
				RS485_SendCommand(0x02, 0xFF);
 8000686:	21ff      	movs	r1, #255	@ 0xff
 8000688:	2002      	movs	r0, #2
 800068a:	f7ff fdcb 	bl	8000224 <RS485_SendCommand>
 800068e:	e01c      	b.n	80006ca <HAL_UART_RxCpltCallback+0xea>
        	}
        	else if(RS1_rxBuffer[1] == 0x03)
 8000690:	4b61      	ldr	r3, [pc, #388]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d118      	bne.n	80006ca <HAL_UART_RxCpltCallback+0xea>
        	{
        		strcpy(string_data_rec1[miss_data_node2_to_nodet_inx],RS1_rxBuffer);
 8000698:	4b67      	ldr	r3, [pc, #412]	@ (8000838 <HAL_UART_RxCpltCallback+0x258>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4613      	mov	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4a60      	ldr	r2, [pc, #384]	@ (8000828 <HAL_UART_RxCpltCallback+0x248>)
 80006a6:	4413      	add	r3, r2
 80006a8:	495b      	ldr	r1, [pc, #364]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 feaa 	bl	8004404 <strcpy>
        		miss_data_node2_to_nodet_inx++;
 80006b0:	4b61      	ldr	r3, [pc, #388]	@ (8000838 <HAL_UART_RxCpltCallback+0x258>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a60      	ldr	r2, [pc, #384]	@ (8000838 <HAL_UART_RxCpltCallback+0x258>)
 80006b8:	6013      	str	r3, [r2, #0]
        		miss_data_node2_to_gw_inx = miss_data_node2_to_nodet_inx;
 80006ba:	4b5f      	ldr	r3, [pc, #380]	@ (8000838 <HAL_UART_RxCpltCallback+0x258>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a5f      	ldr	r2, [pc, #380]	@ (800083c <HAL_UART_RxCpltCallback+0x25c>)
 80006c0:	6013      	str	r3, [r2, #0]
        		RS485_SendCommand(0x01, 0xEE);
 80006c2:	21ee      	movs	r1, #238	@ 0xee
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fdad 	bl	8000224 <RS485_SendCommand>
        	}
           }
     }
        HAL_UART_Receive_IT(&huart1, RS1_rxBuffer, 20);
 80006ca:	2214      	movs	r2, #20
 80006cc:	4952      	ldr	r1, [pc, #328]	@ (8000818 <HAL_UART_RxCpltCallback+0x238>)
 80006ce:	485c      	ldr	r0, [pc, #368]	@ (8000840 <HAL_UART_RxCpltCallback+0x260>)
 80006d0:	f003 f818 	bl	8003704 <HAL_UART_Receive_IT>



       //Nhận lệnh từ gateway
        if (huart->Instance == USART2) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a5a      	ldr	r2, [pc, #360]	@ (8000844 <HAL_UART_RxCpltCallback+0x264>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	f040 811f 	bne.w	800091e <HAL_UART_RxCpltCallback+0x33e>
            if (RS2_rxBuffer[0] == myID) { // Kiểm tra địa chỉ
 80006e0:	4b59      	ldr	r3, [pc, #356]	@ (8000848 <HAL_UART_RxCpltCallback+0x268>)
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	4b59      	ldr	r3, [pc, #356]	@ (800084c <HAL_UART_RxCpltCallback+0x26c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	f040 8108 	bne.w	80008fe <HAL_UART_RxCpltCallback+0x31e>
                // Xử lý lệnh
                if (RS2_rxBuffer[1] == 0x02)
 80006ee:	4b56      	ldr	r3, [pc, #344]	@ (8000848 <HAL_UART_RxCpltCallback+0x268>)
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d125      	bne.n	8000742 <HAL_UART_RxCpltCallback+0x162>
                {
                    // Gửi phản hồi
                    RS2_txBuffer[0] = myID;
 80006f6:	4b55      	ldr	r3, [pc, #340]	@ (800084c <HAL_UART_RxCpltCallback+0x26c>)
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	4b55      	ldr	r3, [pc, #340]	@ (8000850 <HAL_UART_RxCpltCallback+0x270>)
 80006fc:	701a      	strb	r2, [r3, #0]
                    RS2_txBuffer[1] = 0x02;
 80006fe:	4b54      	ldr	r3, [pc, #336]	@ (8000850 <HAL_UART_RxCpltCallback+0x270>)
 8000700:	2202      	movs	r2, #2
 8000702:	705a      	strb	r2, [r3, #1]
            		sprintf((char *)(RS2_txBuffer+2), "%6d%5d%5d%6d%5d%5d,",ppm_data_1.time, ppm_data_1.CO_ppm, ppm_data_1.CO2_ppm, ppm_data_2.time,ppm_data_2.CO_ppm, ppm_data_2.CO2_ppm);
 8000704:	4e53      	ldr	r6, [pc, #332]	@ (8000854 <HAL_UART_RxCpltCallback+0x274>)
 8000706:	4b45      	ldr	r3, [pc, #276]	@ (800081c <HAL_UART_RxCpltCallback+0x23c>)
 8000708:	681c      	ldr	r4, [r3, #0]
 800070a:	4b44      	ldr	r3, [pc, #272]	@ (800081c <HAL_UART_RxCpltCallback+0x23c>)
 800070c:	685d      	ldr	r5, [r3, #4]
 800070e:	4b43      	ldr	r3, [pc, #268]	@ (800081c <HAL_UART_RxCpltCallback+0x23c>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	4a47      	ldr	r2, [pc, #284]	@ (8000830 <HAL_UART_RxCpltCallback+0x250>)
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	4946      	ldr	r1, [pc, #280]	@ (8000830 <HAL_UART_RxCpltCallback+0x250>)
 8000718:	6849      	ldr	r1, [r1, #4]
 800071a:	4845      	ldr	r0, [pc, #276]	@ (8000830 <HAL_UART_RxCpltCallback+0x250>)
 800071c:	6880      	ldr	r0, [r0, #8]
 800071e:	9003      	str	r0, [sp, #12]
 8000720:	9102      	str	r1, [sp, #8]
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	462b      	mov	r3, r5
 8000728:	4622      	mov	r2, r4
 800072a:	494b      	ldr	r1, [pc, #300]	@ (8000858 <HAL_UART_RxCpltCallback+0x278>)
 800072c:	4630      	mov	r0, r6
 800072e:	f003 fe01 	bl	8004334 <siprintf>
                    HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	2228      	movs	r2, #40	@ 0x28
 8000738:	4945      	ldr	r1, [pc, #276]	@ (8000850 <HAL_UART_RxCpltCallback+0x270>)
 800073a:	4848      	ldr	r0, [pc, #288]	@ (800085c <HAL_UART_RxCpltCallback+0x27c>)
 800073c:	f002 ff57 	bl	80035ee <HAL_UART_Transmit>
 8000740:	e0e8      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
                }
                else if(RS2_rxBuffer[1] == 0xFF) // nhận lại oke
 8000742:	4b41      	ldr	r3, [pc, #260]	@ (8000848 <HAL_UART_RxCpltCallback+0x268>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	2bff      	cmp	r3, #255	@ 0xff
 8000748:	d10f      	bne.n	800076a <HAL_UART_RxCpltCallback+0x18a>
				{
					connect_gw_error_flag=0;
 800074a:	4b45      	ldr	r3, [pc, #276]	@ (8000860 <HAL_UART_RxCpltCallback+0x280>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
					send_full_gw=0;
 8000750:	4b44      	ldr	r3, [pc, #272]	@ (8000864 <HAL_UART_RxCpltCallback+0x284>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
					miss_data_nodet_to_gw_inx=0;
 8000756:	4b44      	ldr	r3, [pc, #272]	@ (8000868 <HAL_UART_RxCpltCallback+0x288>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
					miss_data_node1_to_gw_inx=0;
 800075c:	4b33      	ldr	r3, [pc, #204]	@ (800082c <HAL_UART_RxCpltCallback+0x24c>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
					miss_data_node2_to_gw_inx=0;
 8000762:	4b36      	ldr	r3, [pc, #216]	@ (800083c <HAL_UART_RxCpltCallback+0x25c>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	e0d4      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
				}
                else if(RS2_rxBuffer[1] == 0x03) // th mat ket noi len gw
 800076a:	4b37      	ldr	r3, [pc, #220]	@ (8000848 <HAL_UART_RxCpltCallback+0x268>)
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d103      	bne.n	800077a <HAL_UART_RxCpltCallback+0x19a>
                {
                	send_full_gw=1;
 8000772:	4b3c      	ldr	r3, [pc, #240]	@ (8000864 <HAL_UART_RxCpltCallback+0x284>)
 8000774:	2201      	movs	r2, #1
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	e0cc      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
                }
			   else if(RS2_rxBuffer[1] == 0xEE) //
 800077a:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <HAL_UART_RxCpltCallback+0x268>)
 800077c:	785b      	ldrb	r3, [r3, #1]
 800077e:	2bee      	cmp	r3, #238	@ 0xee
 8000780:	d108      	bne.n	8000794 <HAL_UART_RxCpltCallback+0x1b4>
			   {
	            	sent_full_gw=0;
 8000782:	4b3a      	ldr	r3, [pc, #232]	@ (800086c <HAL_UART_RxCpltCallback+0x28c>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
	            	send_gw_inx++;
 8000788:	4b39      	ldr	r3, [pc, #228]	@ (8000870 <HAL_UART_RxCpltCallback+0x290>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	4a38      	ldr	r2, [pc, #224]	@ (8000870 <HAL_UART_RxCpltCallback+0x290>)
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e0bf      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
			   }
			   else if(RS2_rxBuffer[1] == 0x21)
 8000794:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <HAL_UART_RxCpltCallback+0x268>)
 8000796:	785b      	ldrb	r3, [r3, #1]
 8000798:	2b21      	cmp	r3, #33	@ 0x21
 800079a:	d12d      	bne.n	80007f8 <HAL_UART_RxCpltCallback+0x218>
			   {
				   if(miss_data_node1_to_gw_inx==0) // chưa có dữ liệu từ node 1 lên node tổng
 800079c:	4b23      	ldr	r3, [pc, #140]	@ (800082c <HAL_UART_RxCpltCallback+0x24c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d125      	bne.n	80007f0 <HAL_UART_RxCpltCallback+0x210>
				   {
					   RS2_txBuffer[0] = myID;
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <HAL_UART_RxCpltCallback+0x26c>)
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <HAL_UART_RxCpltCallback+0x270>)
 80007aa:	701a      	strb	r2, [r3, #0]
					   RS2_txBuffer[1] = 0x02;
 80007ac:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <HAL_UART_RxCpltCallback+0x270>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	705a      	strb	r2, [r3, #1]
					   sprintf((char *)(RS2_txBuffer+2), "%6d%5d%5d%6d%5d%5d,",ppm_data_1.time, ppm_data_1.CO_ppm, ppm_data_1.CO2_ppm, ppm_data_2.time,ppm_data_2.CO_ppm, ppm_data_2.CO2_ppm);
 80007b2:	4e28      	ldr	r6, [pc, #160]	@ (8000854 <HAL_UART_RxCpltCallback+0x274>)
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <HAL_UART_RxCpltCallback+0x23c>)
 80007b6:	681c      	ldr	r4, [r3, #0]
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <HAL_UART_RxCpltCallback+0x23c>)
 80007ba:	685d      	ldr	r5, [r3, #4]
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <HAL_UART_RxCpltCallback+0x23c>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <HAL_UART_RxCpltCallback+0x250>)
 80007c2:	6812      	ldr	r2, [r2, #0]
 80007c4:	491a      	ldr	r1, [pc, #104]	@ (8000830 <HAL_UART_RxCpltCallback+0x250>)
 80007c6:	6849      	ldr	r1, [r1, #4]
 80007c8:	4819      	ldr	r0, [pc, #100]	@ (8000830 <HAL_UART_RxCpltCallback+0x250>)
 80007ca:	6880      	ldr	r0, [r0, #8]
 80007cc:	9003      	str	r0, [sp, #12]
 80007ce:	9102      	str	r1, [sp, #8]
 80007d0:	9201      	str	r2, [sp, #4]
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	462b      	mov	r3, r5
 80007d6:	4622      	mov	r2, r4
 80007d8:	491f      	ldr	r1, [pc, #124]	@ (8000858 <HAL_UART_RxCpltCallback+0x278>)
 80007da:	4630      	mov	r0, r6
 80007dc:	f003 fdaa 	bl	8004334 <siprintf>
					   HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	2228      	movs	r2, #40	@ 0x28
 80007e6:	491a      	ldr	r1, [pc, #104]	@ (8000850 <HAL_UART_RxCpltCallback+0x270>)
 80007e8:	481c      	ldr	r0, [pc, #112]	@ (800085c <HAL_UART_RxCpltCallback+0x27c>)
 80007ea:	f002 ff00 	bl	80035ee <HAL_UART_Transmit>
 80007ee:	e091      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
				   }
				   else
				   {
					   send_full_n1=1;
 80007f0:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <HAL_UART_RxCpltCallback+0x294>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	e08d      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
				   }
			   }
			   else if(RS2_rxBuffer[1] == 0xDD)
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <HAL_UART_RxCpltCallback+0x268>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	2bdd      	cmp	r3, #221	@ 0xdd
 80007fe:	d13f      	bne.n	8000880 <HAL_UART_RxCpltCallback+0x2a0>
			   {
				   sent_full_n1=0;
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <HAL_UART_RxCpltCallback+0x298>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
				   send_n1_inx++;
 8000806:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <HAL_UART_RxCpltCallback+0x29c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <HAL_UART_RxCpltCallback+0x29c>)
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	e080      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
 8000812:	bf00      	nop
 8000814:	40013800 	.word	0x40013800
 8000818:	2000020c 	.word	0x2000020c
 800081c:	20000270 	.word	0x20000270
 8000820:	20000010 	.word	0x20000010
 8000824:	20000290 	.word	0x20000290
 8000828:	20001268 	.word	0x20001268
 800082c:	2000029c 	.word	0x2000029c
 8000830:	2000027c 	.word	0x2000027c
 8000834:	20000014 	.word	0x20000014
 8000838:	20000294 	.word	0x20000294
 800083c:	200002a0 	.word	0x200002a0
 8000840:	20000168 	.word	0x20000168
 8000844:	40004400 	.word	0x40004400
 8000848:	20000248 	.word	0x20000248
 800084c:	2000000c 	.word	0x2000000c
 8000850:	20000220 	.word	0x20000220
 8000854:	20000222 	.word	0x20000222
 8000858:	08004ce4 	.word	0x08004ce4
 800085c:	200001b0 	.word	0x200001b0
 8000860:	20000288 	.word	0x20000288
 8000864:	200002a8 	.word	0x200002a8
 8000868:	20000298 	.word	0x20000298
 800086c:	200002ac 	.word	0x200002ac
 8000870:	200002a4 	.word	0x200002a4
 8000874:	200002b4 	.word	0x200002b4
 8000878:	200002b8 	.word	0x200002b8
 800087c:	200002b0 	.word	0x200002b0
			   }
			   else if(RS2_rxBuffer[1] == 0x22)
 8000880:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <HAL_UART_RxCpltCallback+0x348>)
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	2b22      	cmp	r3, #34	@ 0x22
 8000886:	d12d      	bne.n	80008e4 <HAL_UART_RxCpltCallback+0x304>
			   {
				   if(miss_data_node2_to_gw_inx==0) // chưa có dữ liệu từ node 2 lên node tổng
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <HAL_UART_RxCpltCallback+0x34c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d125      	bne.n	80008dc <HAL_UART_RxCpltCallback+0x2fc>
				   {
					   RS2_txBuffer[0] = myID;
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <HAL_UART_RxCpltCallback+0x350>)
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <HAL_UART_RxCpltCallback+0x354>)
 8000896:	701a      	strb	r2, [r3, #0]
					   RS2_txBuffer[1] = 0x02;
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <HAL_UART_RxCpltCallback+0x354>)
 800089a:	2202      	movs	r2, #2
 800089c:	705a      	strb	r2, [r3, #1]
					   sprintf((char *)(RS2_txBuffer+2), "%6d%5d%5d%6d%5d%5d,",ppm_data_1.time, ppm_data_1.CO_ppm, ppm_data_1.CO2_ppm, ppm_data_2.time,ppm_data_2.CO_ppm, ppm_data_2.CO2_ppm);
 800089e:	4e26      	ldr	r6, [pc, #152]	@ (8000938 <HAL_UART_RxCpltCallback+0x358>)
 80008a0:	4b26      	ldr	r3, [pc, #152]	@ (800093c <HAL_UART_RxCpltCallback+0x35c>)
 80008a2:	681c      	ldr	r4, [r3, #0]
 80008a4:	4b25      	ldr	r3, [pc, #148]	@ (800093c <HAL_UART_RxCpltCallback+0x35c>)
 80008a6:	685d      	ldr	r5, [r3, #4]
 80008a8:	4b24      	ldr	r3, [pc, #144]	@ (800093c <HAL_UART_RxCpltCallback+0x35c>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	4a24      	ldr	r2, [pc, #144]	@ (8000940 <HAL_UART_RxCpltCallback+0x360>)
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	4923      	ldr	r1, [pc, #140]	@ (8000940 <HAL_UART_RxCpltCallback+0x360>)
 80008b2:	6849      	ldr	r1, [r1, #4]
 80008b4:	4822      	ldr	r0, [pc, #136]	@ (8000940 <HAL_UART_RxCpltCallback+0x360>)
 80008b6:	6880      	ldr	r0, [r0, #8]
 80008b8:	9003      	str	r0, [sp, #12]
 80008ba:	9102      	str	r1, [sp, #8]
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	462b      	mov	r3, r5
 80008c2:	4622      	mov	r2, r4
 80008c4:	491f      	ldr	r1, [pc, #124]	@ (8000944 <HAL_UART_RxCpltCallback+0x364>)
 80008c6:	4630      	mov	r0, r6
 80008c8:	f003 fd34 	bl	8004334 <siprintf>
					   HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	2228      	movs	r2, #40	@ 0x28
 80008d2:	4918      	ldr	r1, [pc, #96]	@ (8000934 <HAL_UART_RxCpltCallback+0x354>)
 80008d4:	481c      	ldr	r0, [pc, #112]	@ (8000948 <HAL_UART_RxCpltCallback+0x368>)
 80008d6:	f002 fe8a 	bl	80035ee <HAL_UART_Transmit>
 80008da:	e01b      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
				   }
				   else
				   {
					   send_full_n2=1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <HAL_UART_RxCpltCallback+0x36c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	e017      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
				   }
			   }
			   else if(RS2_rxBuffer[1] == 0xCC)
 80008e4:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_UART_RxCpltCallback+0x348>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	2bcc      	cmp	r3, #204	@ 0xcc
 80008ea:	d113      	bne.n	8000914 <HAL_UART_RxCpltCallback+0x334>
			   {
				   sent_full_n2=0;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <HAL_UART_RxCpltCallback+0x370>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
				   send_n2_inx++;
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_UART_RxCpltCallback+0x374>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <HAL_UART_RxCpltCallback+0x374>)
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	e00a      	b.n	8000914 <HAL_UART_RxCpltCallback+0x334>
//			   {
//				   sent_full_n=0;
//				   send_inx_n++;
//			   }
            }
            else if(RS2_rxBuffer[0] == 0x77)
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <HAL_UART_RxCpltCallback+0x348>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b77      	cmp	r3, #119	@ 0x77
 8000904:	d106      	bne.n	8000914 <HAL_UART_RxCpltCallback+0x334>
            {
            	 HAL_UART_Transmit(&huart1, RS2_rxBuffer, 10, HAL_MAX_DELAY); // truyen ve node do thoi gian
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	220a      	movs	r2, #10
 800090c:	4906      	ldr	r1, [pc, #24]	@ (8000928 <HAL_UART_RxCpltCallback+0x348>)
 800090e:	4812      	ldr	r0, [pc, #72]	@ (8000958 <HAL_UART_RxCpltCallback+0x378>)
 8000910:	f002 fe6d 	bl	80035ee <HAL_UART_Transmit>
            }
            // Tiếp tục nhận
            HAL_UART_Receive_IT(&huart2, RS2_rxBuffer, 10);
 8000914:	220a      	movs	r2, #10
 8000916:	4904      	ldr	r1, [pc, #16]	@ (8000928 <HAL_UART_RxCpltCallback+0x348>)
 8000918:	480b      	ldr	r0, [pc, #44]	@ (8000948 <HAL_UART_RxCpltCallback+0x368>)
 800091a:	f002 fef3 	bl	8003704 <HAL_UART_Receive_IT>
        }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	bf00      	nop
 8000928:	20000248 	.word	0x20000248
 800092c:	200002a0 	.word	0x200002a0
 8000930:	2000000c 	.word	0x2000000c
 8000934:	20000220 	.word	0x20000220
 8000938:	20000222 	.word	0x20000222
 800093c:	20000270 	.word	0x20000270
 8000940:	2000027c 	.word	0x2000027c
 8000944:	08004ce4 	.word	0x08004ce4
 8000948:	200001b0 	.word	0x200001b0
 800094c:	200002c0 	.word	0x200002c0
 8000950:	200002c4 	.word	0x200002c4
 8000954:	200002bc 	.word	0x200002bc
 8000958:	20000168 	.word	0x20000168

0800095c <HAL_GPIO_EXTI_Callback>:
// chương trình đk quạt = tay
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == DOWN_BUT_Pin)
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d116      	bne.n	800099a <HAL_GPIO_EXTI_Callback+0x3e>
  {
	  at_state=0; // c�? trạng thái đi�?u khiển quạt tự động =0
 800096c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0xc8>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
	  AT_LED_On(); // bật đèn báo hiệu đk quạt = tay
 8000972:	f7ff fc4b 	bl	800020c <AT_LED_On>
	  if(duty<=50)
 8000976:	4b2c      	ldr	r3, [pc, #176]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2b32      	cmp	r3, #50	@ 0x32
 800097c:	d803      	bhi.n	8000986 <HAL_GPIO_EXTI_Callback+0x2a>
	  {
		duty = 0;
 800097e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000980:	2200      	movs	r2, #0
 8000982:	801a      	strh	r2, [r3, #0]
 8000984:	e005      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x36>
	  }
	  else
	  {
		duty = duty -25;
 8000986:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	3b19      	subs	r3, #25
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000990:	801a      	strh	r2, [r3, #0]
	  }
	  TIM1->CCR1 = duty;
 8000992:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000998:	635a      	str	r2, [r3, #52]	@ 0x34

  }
  if(GPIO_Pin == UP_BUT_Pin)
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d11e      	bne.n	80009de <HAL_GPIO_EXTI_Callback+0x82>
  {
	  at_state=0;
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0xc8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
	  AT_LED_On();
 80009a6:	f7ff fc31 	bl	800020c <AT_LED_On>
	  if(duty==100)
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2b64      	cmp	r3, #100	@ 0x64
 80009b0:	d103      	bne.n	80009ba <HAL_GPIO_EXTI_Callback+0x5e>
	  {
		duty =100;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009b4:	2264      	movs	r2, #100	@ 0x64
 80009b6:	801a      	strh	r2, [r3, #0]
 80009b8:	e00d      	b.n	80009d6 <HAL_GPIO_EXTI_Callback+0x7a>
	  }
	  else
	  {
		  if(duty==0)
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <HAL_GPIO_EXTI_Callback+0x6e>
		  {
			  duty=50;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009c4:	2232      	movs	r2, #50	@ 0x32
 80009c6:	801a      	strh	r2, [r3, #0]
 80009c8:	e005      	b.n	80009d6 <HAL_GPIO_EXTI_Callback+0x7a>
		  }
		  else
		  {
		    duty = duty +25;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	3319      	adds	r3, #25
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009d4:	801a      	strh	r2, [r3, #0]
		  }
	  }
	  TIM1->CCR1 = duty;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009d8:	881a      	ldrh	r2, [r3, #0]
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <HAL_GPIO_EXTI_Callback+0xd0>)
 80009dc:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if(at_state==0)
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0xc8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d11a      	bne.n	8000a1c <HAL_GPIO_EXTI_Callback+0xc0>
  {
	  // hiển thị led
	  if(duty<50)
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	2b31      	cmp	r3, #49	@ 0x31
 80009ec:	d802      	bhi.n	80009f4 <HAL_GPIO_EXTI_Callback+0x98>
	  {
		  L1_3_LED_Off();
 80009ee:	f7ff fbf5 	bl	80001dc <L1_3_LED_Off>
	  else if(duty==100)
	  {
		  L3_LED_On();
	  }
  }
}
 80009f2:	e013      	b.n	8000a1c <HAL_GPIO_EXTI_Callback+0xc0>
	  else if (duty==50)
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	2b32      	cmp	r3, #50	@ 0x32
 80009fa:	d102      	bne.n	8000a02 <HAL_GPIO_EXTI_Callback+0xa6>
		  L1_LED_On();
 80009fc:	f7ff fbd6 	bl	80001ac <L1_LED_On>
}
 8000a00:	e00c      	b.n	8000a1c <HAL_GPIO_EXTI_Callback+0xc0>
	  else if (duty==75)
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b4b      	cmp	r3, #75	@ 0x4b
 8000a08:	d102      	bne.n	8000a10 <HAL_GPIO_EXTI_Callback+0xb4>
		  L2_LED_On();
 8000a0a:	f7ff fb9f 	bl	800014c <L2_LED_On>
}
 8000a0e:	e005      	b.n	8000a1c <HAL_GPIO_EXTI_Callback+0xc0>
	  else if(duty==100)
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	2b64      	cmp	r3, #100	@ 0x64
 8000a16:	d101      	bne.n	8000a1c <HAL_GPIO_EXTI_Callback+0xc0>
		  L3_LED_On();
 8000a18:	f7ff fbb0 	bl	800017c <L3_LED_On>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	40012c00 	.word	0x40012c00

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f000 fdd3 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f98d 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f000 fb43 	bl	80010c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a42:	f000 faed 	bl	8001020 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a46:	f000 fa4f 	bl	8000ee8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000a4a:	f000 f9c9 	bl	8000de0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000a4e:	f000 fb11 	bl	8001074 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a52:	f000 fa97 	bl	8000f84 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = duty;
 8000a56:	4b9e      	ldr	r3, [pc, #632]	@ (8000cd0 <main+0x2a0>)
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	4b9e      	ldr	r3, [pc, #632]	@ (8000cd4 <main+0x2a4>)
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	489d      	ldr	r0, [pc, #628]	@ (8000cd8 <main+0x2a8>)
 8000a62:	f001 fec3 	bl	80027ec <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, RS1_rxBuffer, 20); // nhận dữ liệu từ node đo
 8000a66:	2214      	movs	r2, #20
 8000a68:	499c      	ldr	r1, [pc, #624]	@ (8000cdc <main+0x2ac>)
 8000a6a:	489d      	ldr	r0, [pc, #628]	@ (8000ce0 <main+0x2b0>)
 8000a6c:	f002 fe4a 	bl	8003704 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, RS2_rxBuffer, 10); // nhận dữ liệu từ gateway
 8000a70:	220a      	movs	r2, #10
 8000a72:	499c      	ldr	r1, [pc, #624]	@ (8000ce4 <main+0x2b4>)
 8000a74:	489c      	ldr	r0, [pc, #624]	@ (8000ce8 <main+0x2b8>)
 8000a76:	f002 fe45 	bl	8003704 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8000a7a:	489c      	ldr	r0, [pc, #624]	@ (8000cec <main+0x2bc>)
 8000a7c:	f001 fde6 	bl	800264c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a80:	489b      	ldr	r0, [pc, #620]	@ (8000cf0 <main+0x2c0>)
 8000a82:	f001 fde3 	bl	800264c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   if(at_state==1) //dk quạt tự động
 8000a86:	4b9b      	ldr	r3, [pc, #620]	@ (8000cf4 <main+0x2c4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <main+0x62>
   {
	   Control_Fan_Auto();
 8000a8e:	f7ff fcf1 	bl	8000474 <Control_Fan_Auto>
   }
	 if(connect_gw_error_flag>=2 && save_ok==0)
 8000a92:	4b99      	ldr	r3, [pc, #612]	@ (8000cf8 <main+0x2c8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	dd29      	ble.n	8000aee <main+0xbe>
 8000a9a:	4b98      	ldr	r3, [pc, #608]	@ (8000cfc <main+0x2cc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d125      	bne.n	8000aee <main+0xbe>
	 {
		 miss_data_nodet_to_gw_inx=connect_gw_error_flag-2;
 8000aa2:	4b95      	ldr	r3, [pc, #596]	@ (8000cf8 <main+0x2c8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4a95      	ldr	r2, [pc, #596]	@ (8000d00 <main+0x2d0>)
 8000aaa:	6013      	str	r3, [r2, #0]
		sprintf(string_data_tran[miss_data_nodet_to_gw_inx], "%6d%5d%5d%6d%5d%5d", ppm_data_1.time , ppm_data_1.CO_ppm,ppm_data_1.CO2_ppm, ppm_data_2.time , ppm_data_2.CO_ppm,ppm_data_2.CO2_ppm);
 8000aac:	4b94      	ldr	r3, [pc, #592]	@ (8000d00 <main+0x2d0>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	4a92      	ldr	r2, [pc, #584]	@ (8000d04 <main+0x2d4>)
 8000aba:	189c      	adds	r4, r3, r2
 8000abc:	4b92      	ldr	r3, [pc, #584]	@ (8000d08 <main+0x2d8>)
 8000abe:	681d      	ldr	r5, [r3, #0]
 8000ac0:	4b91      	ldr	r3, [pc, #580]	@ (8000d08 <main+0x2d8>)
 8000ac2:	685e      	ldr	r6, [r3, #4]
 8000ac4:	4b90      	ldr	r3, [pc, #576]	@ (8000d08 <main+0x2d8>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	4a90      	ldr	r2, [pc, #576]	@ (8000d0c <main+0x2dc>)
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	498f      	ldr	r1, [pc, #572]	@ (8000d0c <main+0x2dc>)
 8000ace:	6849      	ldr	r1, [r1, #4]
 8000ad0:	488e      	ldr	r0, [pc, #568]	@ (8000d0c <main+0x2dc>)
 8000ad2:	6880      	ldr	r0, [r0, #8]
 8000ad4:	9003      	str	r0, [sp, #12]
 8000ad6:	9102      	str	r1, [sp, #8]
 8000ad8:	9201      	str	r2, [sp, #4]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	4633      	mov	r3, r6
 8000ade:	462a      	mov	r2, r5
 8000ae0:	498b      	ldr	r1, [pc, #556]	@ (8000d10 <main+0x2e0>)
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f003 fc26 	bl	8004334 <siprintf>
		save_ok=1;
 8000ae8:	4b84      	ldr	r3, [pc, #528]	@ (8000cfc <main+0x2cc>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
	 }
	 //
	 if(send_full_gw==1 && sent_full_gw==0)
 8000aee:	4b89      	ldr	r3, [pc, #548]	@ (8000d14 <main+0x2e4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d1c7      	bne.n	8000a86 <main+0x56>
 8000af6:	4b88      	ldr	r3, [pc, #544]	@ (8000d18 <main+0x2e8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1c3      	bne.n	8000a86 <main+0x56>
	 {
		 while(send_gw_inx<miss_data_nodet_to_gw_inx)
 8000afe:	e01c      	b.n	8000b3a <main+0x10a>
		 {
			 RS2_txBuffer[0] = myID;
 8000b00:	4b86      	ldr	r3, [pc, #536]	@ (8000d1c <main+0x2ec>)
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	4b86      	ldr	r3, [pc, #536]	@ (8000d20 <main+0x2f0>)
 8000b06:	701a      	strb	r2, [r3, #0]
			 RS2_txBuffer[1] = 0x03;
 8000b08:	4b85      	ldr	r3, [pc, #532]	@ (8000d20 <main+0x2f0>)
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	705a      	strb	r2, [r3, #1]
			 strcpy((char *)(RS2_txBuffer+2),string_data_tran[send_gw_inx]);
 8000b0e:	4885      	ldr	r0, [pc, #532]	@ (8000d24 <main+0x2f4>)
 8000b10:	4b85      	ldr	r3, [pc, #532]	@ (8000d28 <main+0x2f8>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	4a79      	ldr	r2, [pc, #484]	@ (8000d04 <main+0x2d4>)
 8000b1e:	4413      	add	r3, r2
 8000b20:	4619      	mov	r1, r3
 8000b22:	f003 fc6f 	bl	8004404 <strcpy>
			 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	2228      	movs	r2, #40	@ 0x28
 8000b2c:	497c      	ldr	r1, [pc, #496]	@ (8000d20 <main+0x2f0>)
 8000b2e:	486e      	ldr	r0, [pc, #440]	@ (8000ce8 <main+0x2b8>)
 8000b30:	f002 fd5d 	bl	80035ee <HAL_UART_Transmit>
			 sent_full_gw=1; // da gui xong lan nay phai doi node tong giai ma xong roi moi gui tiep
 8000b34:	4b78      	ldr	r3, [pc, #480]	@ (8000d18 <main+0x2e8>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
		 while(send_gw_inx<miss_data_nodet_to_gw_inx)
 8000b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d28 <main+0x2f8>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4b70      	ldr	r3, [pc, #448]	@ (8000d00 <main+0x2d0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dbdc      	blt.n	8000b00 <main+0xd0>
		 }
		 if(send_gw_inx==miss_data_nodet_to_gw_inx)
 8000b46:	4b78      	ldr	r3, [pc, #480]	@ (8000d28 <main+0x2f8>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d00 <main+0x2d0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d11c      	bne.n	8000b8c <main+0x15c>
		 {
			 RS2_txBuffer[0] = myID;
 8000b52:	4b72      	ldr	r3, [pc, #456]	@ (8000d1c <main+0x2ec>)
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	4b72      	ldr	r3, [pc, #456]	@ (8000d20 <main+0x2f0>)
 8000b58:	701a      	strb	r2, [r3, #0]
			 RS2_txBuffer[1] = 0x02;
 8000b5a:	4b71      	ldr	r3, [pc, #452]	@ (8000d20 <main+0x2f0>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	705a      	strb	r2, [r3, #1]
			 strcpy((char *)(RS2_txBuffer+2),string_data_tran[send_gw_inx]);
 8000b60:	4870      	ldr	r0, [pc, #448]	@ (8000d24 <main+0x2f4>)
 8000b62:	4b71      	ldr	r3, [pc, #452]	@ (8000d28 <main+0x2f8>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	4a65      	ldr	r2, [pc, #404]	@ (8000d04 <main+0x2d4>)
 8000b70:	4413      	add	r3, r2
 8000b72:	4619      	mov	r1, r3
 8000b74:	f003 fc46 	bl	8004404 <strcpy>
			 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	2228      	movs	r2, #40	@ 0x28
 8000b7e:	4968      	ldr	r1, [pc, #416]	@ (8000d20 <main+0x2f0>)
 8000b80:	4859      	ldr	r0, [pc, #356]	@ (8000ce8 <main+0x2b8>)
 8000b82:	f002 fd34 	bl	80035ee <HAL_UART_Transmit>
			 sent_full_gw=1; // da gui xong lan nay phai doi node tong giai ma xong roi moi gui tiep
 8000b86:	4b64      	ldr	r3, [pc, #400]	@ (8000d18 <main+0x2e8>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
		 }
		 //
	 if(send_full_n1==1 && sent_full_n1==0)
 8000b8c:	4b67      	ldr	r3, [pc, #412]	@ (8000d2c <main+0x2fc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d14a      	bne.n	8000c2a <main+0x1fa>
 8000b94:	4b66      	ldr	r3, [pc, #408]	@ (8000d30 <main+0x300>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d146      	bne.n	8000c2a <main+0x1fa>
	 {
		 while(send_n1_inx<miss_data_node1_to_gw_inx)
 8000b9c:	e01c      	b.n	8000bd8 <main+0x1a8>
		 {
			 RS2_txBuffer[0] = myID;
 8000b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8000d1c <main+0x2ec>)
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8000d20 <main+0x2f0>)
 8000ba4:	701a      	strb	r2, [r3, #0]
			 RS2_txBuffer[1] = 0x21;
 8000ba6:	4b5e      	ldr	r3, [pc, #376]	@ (8000d20 <main+0x2f0>)
 8000ba8:	2221      	movs	r2, #33	@ 0x21
 8000baa:	705a      	strb	r2, [r3, #1]
			 strcpy((char *)(RS2_txBuffer+2),string_data_rec1[send_n1_inx]);
 8000bac:	485d      	ldr	r0, [pc, #372]	@ (8000d24 <main+0x2f4>)
 8000bae:	4b61      	ldr	r3, [pc, #388]	@ (8000d34 <main+0x304>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4a5f      	ldr	r2, [pc, #380]	@ (8000d38 <main+0x308>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f003 fc20 	bl	8004404 <strcpy>
			// sprintf((char *)(RS2_txBuffer+18), "%6d%5d%5d,", ppm_data_2.time,ppm_data_2.CO_ppm, ppm_data_2.CO2_ppm);
			 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	2228      	movs	r2, #40	@ 0x28
 8000bca:	4955      	ldr	r1, [pc, #340]	@ (8000d20 <main+0x2f0>)
 8000bcc:	4846      	ldr	r0, [pc, #280]	@ (8000ce8 <main+0x2b8>)
 8000bce:	f002 fd0e 	bl	80035ee <HAL_UART_Transmit>
			 sent_full_n1=1; // da gui xong lan nay phai doi node tong giai ma xong roi moi gui tiep
 8000bd2:	4b57      	ldr	r3, [pc, #348]	@ (8000d30 <main+0x300>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
		 while(send_n1_inx<miss_data_node1_to_gw_inx)
 8000bd8:	4b56      	ldr	r3, [pc, #344]	@ (8000d34 <main+0x304>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b57      	ldr	r3, [pc, #348]	@ (8000d3c <main+0x30c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbdc      	blt.n	8000b9e <main+0x16e>
		 }
		 if(send_n1_inx==miss_data_node1_to_gw_inx)
 8000be4:	4b53      	ldr	r3, [pc, #332]	@ (8000d34 <main+0x304>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b54      	ldr	r3, [pc, #336]	@ (8000d3c <main+0x30c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d11c      	bne.n	8000c2a <main+0x1fa>
		 {
			 RS2_txBuffer[0] = myID;
 8000bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8000d1c <main+0x2ec>)
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8000d20 <main+0x2f0>)
 8000bf6:	701a      	strb	r2, [r3, #0]
			 RS2_txBuffer[1] = 0x02;
 8000bf8:	4b49      	ldr	r3, [pc, #292]	@ (8000d20 <main+0x2f0>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	705a      	strb	r2, [r3, #1]
			 strcpy((char *)(RS2_txBuffer+2),string_data_rec1[send_n1_inx]);
 8000bfe:	4849      	ldr	r0, [pc, #292]	@ (8000d24 <main+0x2f4>)
 8000c00:	4b4c      	ldr	r3, [pc, #304]	@ (8000d34 <main+0x304>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8000d38 <main+0x308>)
 8000c0e:	4413      	add	r3, r2
 8000c10:	4619      	mov	r1, r3
 8000c12:	f003 fbf7 	bl	8004404 <strcpy>
			 //sprintf((char *)(RS2_txBuffer+18), "%6d%5d%5d,", ppm_data_2.time,ppm_data_2.CO_ppm, ppm_data_2.CO2_ppm);
			 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	2228      	movs	r2, #40	@ 0x28
 8000c1c:	4940      	ldr	r1, [pc, #256]	@ (8000d20 <main+0x2f0>)
 8000c1e:	4832      	ldr	r0, [pc, #200]	@ (8000ce8 <main+0x2b8>)
 8000c20:	f002 fce5 	bl	80035ee <HAL_UART_Transmit>
			 sent_full_n1=1; // da gui xong lan nay phai doi node tong giai ma xong roi moi gui tiep
 8000c24:	4b42      	ldr	r3, [pc, #264]	@ (8000d30 <main+0x300>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
		 }
	 }
			 //
		 if(send_full_n2==1 && sent_full_n2==0)
 8000c2a:	4b45      	ldr	r3, [pc, #276]	@ (8000d40 <main+0x310>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	f47f af29 	bne.w	8000a86 <main+0x56>
 8000c34:	4b43      	ldr	r3, [pc, #268]	@ (8000d44 <main+0x314>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f47f af24 	bne.w	8000a86 <main+0x56>
		 {
			 while(send_n2_inx<miss_data_node2_to_gw_inx)
 8000c3e:	e01c      	b.n	8000c7a <main+0x24a>
			 {
				 RS2_txBuffer[0] = myID;
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <main+0x2ec>)
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <main+0x2f0>)
 8000c46:	701a      	strb	r2, [r3, #0]
				 RS2_txBuffer[1] = 0x22;
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <main+0x2f0>)
 8000c4a:	2222      	movs	r2, #34	@ 0x22
 8000c4c:	705a      	strb	r2, [r3, #1]
				 //sprintf((char *)(RS2_txBuffer+2), "%6d%5d%5d,", ppm_data_1.time,ppm_data_1.CO_ppm, ppm_data_1.CO2_ppm);
				 strcpy((char *)(RS2_txBuffer+18),string_data_rec2[send_n2_inx]);
 8000c4e:	483e      	ldr	r0, [pc, #248]	@ (8000d48 <main+0x318>)
 8000c50:	4b3e      	ldr	r3, [pc, #248]	@ (8000d4c <main+0x31c>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8000d50 <main+0x320>)
 8000c5e:	4413      	add	r3, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	f003 fbcf 	bl	8004404 <strcpy>
				 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	2228      	movs	r2, #40	@ 0x28
 8000c6c:	492c      	ldr	r1, [pc, #176]	@ (8000d20 <main+0x2f0>)
 8000c6e:	481e      	ldr	r0, [pc, #120]	@ (8000ce8 <main+0x2b8>)
 8000c70:	f002 fcbd 	bl	80035ee <HAL_UART_Transmit>
				 sent_full_n2=1; // da gui xong lan nay phai doi node tong giai ma xong roi moi gui tiep
 8000c74:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <main+0x314>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
			 while(send_n2_inx<miss_data_node2_to_gw_inx)
 8000c7a:	4b34      	ldr	r3, [pc, #208]	@ (8000d4c <main+0x31c>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <main+0x324>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dbdc      	blt.n	8000c40 <main+0x210>
			 }
			 if(send_n2_inx==miss_data_node2_to_gw_inx)
 8000c86:	4b31      	ldr	r3, [pc, #196]	@ (8000d4c <main+0x31c>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <main+0x324>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	f47f aef9 	bne.w	8000a86 <main+0x56>
			 {
				 RS2_txBuffer[0] = myID;
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <main+0x2ec>)
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <main+0x2f0>)
 8000c9a:	701a      	strb	r2, [r3, #0]
				 RS2_txBuffer[1] = 0x02;
 8000c9c:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <main+0x2f0>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	705a      	strb	r2, [r3, #1]
				 //sprintf((char *)(RS2_txBuffer+2), "%6d%5d%5d,", ppm_data_1.time,ppm_data_1.CO_ppm, ppm_data_1.CO2_ppm);
				 strcpy((char *)(RS2_txBuffer+18),string_data_rec2[send_n2_inx]);
 8000ca2:	4829      	ldr	r0, [pc, #164]	@ (8000d48 <main+0x318>)
 8000ca4:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <main+0x31c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4a27      	ldr	r2, [pc, #156]	@ (8000d50 <main+0x320>)
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f003 fba5 	bl	8004404 <strcpy>
				 HAL_UART_Transmit(&huart2, RS2_txBuffer, 40, HAL_MAX_DELAY);
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	2228      	movs	r2, #40	@ 0x28
 8000cc0:	4917      	ldr	r1, [pc, #92]	@ (8000d20 <main+0x2f0>)
 8000cc2:	4809      	ldr	r0, [pc, #36]	@ (8000ce8 <main+0x2b8>)
 8000cc4:	f002 fc93 	bl	80035ee <HAL_UART_Transmit>
				 sent_full_n2=1; // da gui xong lan nay phai doi node tong giai ma xong roi moi gui tiep
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <main+0x314>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
   if(at_state==1) //dk quạt tự động
 8000cce:	e6da      	b.n	8000a86 <main+0x56>
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	40012c00 	.word	0x40012c00
 8000cd8:	20000090 	.word	0x20000090
 8000cdc:	2000020c 	.word	0x2000020c
 8000ce0:	20000168 	.word	0x20000168
 8000ce4:	20000248 	.word	0x20000248
 8000ce8:	200001b0 	.word	0x200001b0
 8000cec:	200000d8 	.word	0x200000d8
 8000cf0:	20000120 	.word	0x20000120
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000288 	.word	0x20000288
 8000cfc:	2000028c 	.word	0x2000028c
 8000d00:	20000298 	.word	0x20000298
 8000d04:	200002c8 	.word	0x200002c8
 8000d08:	20000270 	.word	0x20000270
 8000d0c:	2000027c 	.word	0x2000027c
 8000d10:	08004cf8 	.word	0x08004cf8
 8000d14:	200002a8 	.word	0x200002a8
 8000d18:	200002ac 	.word	0x200002ac
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000220 	.word	0x20000220
 8000d24:	20000222 	.word	0x20000222
 8000d28:	200002a4 	.word	0x200002a4
 8000d2c:	200002b4 	.word	0x200002b4
 8000d30:	200002b8 	.word	0x200002b8
 8000d34:	200002b0 	.word	0x200002b0
 8000d38:	20001268 	.word	0x20001268
 8000d3c:	2000029c 	.word	0x2000029c
 8000d40:	200002c0 	.word	0x200002c0
 8000d44:	200002c4 	.word	0x200002c4
 8000d48:	20000232 	.word	0x20000232
 8000d4c:	200002bc 	.word	0x200002bc
 8000d50:	20001a38 	.word	0x20001a38
 8000d54:	200002a0 	.word	0x200002a0

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b090      	sub	sp, #64	@ 0x40
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	2228      	movs	r2, #40	@ 0x28
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fb04 	bl	8004374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fff4 	bl	8001d8c <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000daa:	f000 f9f7 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2302      	movs	r3, #2
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fa61 	bl	8002290 <HAL_RCC_ClockConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000dd4:	f000 f9e2 	bl	800119c <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3740      	adds	r7, #64	@ 0x40
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b092      	sub	sp, #72	@ 0x48
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2220      	movs	r2, #32
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fab2 	bl	8004374 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e10:	4b33      	ldr	r3, [pc, #204]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e12:	4a34      	ldr	r2, [pc, #208]	@ (8000ee4 <MX_TIM1_Init+0x104>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 8000e16:	4b32      	ldr	r3, [pc, #200]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e18:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000e1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000e24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e26:	2264      	movs	r2, #100	@ 0x64
 8000e28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e3c:	4828      	ldr	r0, [pc, #160]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e3e:	f001 fc85 	bl	800274c <HAL_TIM_PWM_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e48:	f000 f9a8 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4821      	ldr	r0, [pc, #132]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e5c:	f002 fab6 	bl	80033cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e66:	f000 f999 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6a:	2360      	movs	r3, #96	@ 0x60
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4814      	ldr	r0, [pc, #80]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000e90:	f001 fe3e 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e9a:	f000 f97f 	bl	800119c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4807      	ldr	r0, [pc, #28]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000ec2:	f002 fae1 	bl	8003488 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ecc:	f000 f966 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <MX_TIM1_Init+0x100>)
 8000ed2:	f000 f9f9 	bl	80012c8 <HAL_TIM_MspPostInit>

}
 8000ed6:	bf00      	nop
 8000ed8:	3748      	adds	r7, #72	@ 0x48
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000090 	.word	0x20000090
 8000ee4:	40012c00 	.word	0x40012c00

08000ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f0e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000f12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f1c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000f20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f30:	f001 fb3c 	bl	80025ac <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f3a:	f000 f92f 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f4c:	f001 fea2 	bl	8002c94 <HAL_TIM_ConfigClockSource>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f56:	f000 f921 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_TIM2_Init+0x98>)
 8000f68:	f002 fa30 	bl	80033cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f72:	f000 f913 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000d8 	.word	0x200000d8

08000f84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <MX_TIM3_Init+0x94>)
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800101c <MX_TIM3_Init+0x98>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_TIM3_Init+0x94>)
 8000fa8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000fac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_TIM3_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <MX_TIM3_Init+0x94>)
 8000fb6:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000fba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <MX_TIM3_Init+0x94>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <MX_TIM3_Init+0x94>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fc8:	4813      	ldr	r0, [pc, #76]	@ (8001018 <MX_TIM3_Init+0x94>)
 8000fca:	f001 faef 	bl	80025ac <HAL_TIM_Base_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000fd4:	f000 f8e2 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_TIM3_Init+0x94>)
 8000fe6:	f001 fe55 	bl	8002c94 <HAL_TIM_ConfigClockSource>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ff0:	f000 f8d4 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_TIM3_Init+0x94>)
 8001002:	f002 f9e3 	bl	80033cc <HAL_TIMEx_MasterConfigSynchronization>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800100c:	f000 f8c6 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000120 	.word	0x20000120
 800101c:	40000400 	.word	0x40000400

08001020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <MX_USART1_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001058:	f002 fa79 	bl	800354e <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 f89b 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000168 	.word	0x20000168
 8001070:	40013800 	.word	0x40013800

08001074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <MX_USART2_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010ac:	f002 fa4f 	bl	800354e <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f000 f871 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200001b0 	.word	0x200001b0
 80010c4:	40004400 	.word	0x40004400

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_GPIO_Init+0xc8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001190 <MX_GPIO_Init+0xc8>)
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <MX_GPIO_Init+0xc8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <MX_GPIO_Init+0xc8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <MX_GPIO_Init+0xc8>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <MX_GPIO_Init+0xc8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <MX_GPIO_Init+0xc8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <MX_GPIO_Init+0xc8>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_GPIO_Init+0xc8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_LED_Pin|L2_LED_Pin|L3_LED_Pin|AT_LED_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800112a:	481a      	ldr	r0, [pc, #104]	@ (8001194 <MX_GPIO_Init+0xcc>)
 800112c:	f000 fdfe 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOWN_BUT_Pin UP_BUT_Pin */
  GPIO_InitStruct.Pin = DOWN_BUT_Pin|UP_BUT_Pin;
 8001130:	2303      	movs	r3, #3
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_GPIO_Init+0xd0>)
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4814      	ldr	r0, [pc, #80]	@ (8001194 <MX_GPIO_Init+0xcc>)
 8001144:	f000 fc6e 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_LED_Pin L2_LED_Pin L3_LED_Pin AT_LED_Pin */
  GPIO_InitStruct.Pin = L1_LED_Pin|L2_LED_Pin|L3_LED_Pin|AT_LED_Pin;
 8001148:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001152:	2301      	movs	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <MX_GPIO_Init+0xcc>)
 8001162:	f000 fc5f 	bl	8001a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2102      	movs	r1, #2
 800116a:	2006      	movs	r0, #6
 800116c:	f000 fb71 	bl	8001852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001170:	2006      	movs	r0, #6
 8001172:	f000 fb8a 	bl	800188a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2102      	movs	r1, #2
 800117a:	2007      	movs	r0, #7
 800117c:	f000 fb69 	bl	8001852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001180:	2007      	movs	r0, #7
 8001182:	f000 fb82 	bl	800188a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	40010c00 	.word	0x40010c00
 8001198:	10210000 	.word	0x10210000

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <Error_Handler+0x8>

080011a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_MspInit+0x5c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <HAL_MspInit+0x5c>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_MspInit+0x5c>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_MspInit+0x5c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_MspInit+0x5c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_MspInit+0x5c>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_MspInit+0x60>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_MspInit+0x60>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000

0800120c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a09      	ldr	r2, [pc, #36]	@ (8001240 <HAL_TIM_PWM_MspInit+0x34>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10b      	bne.n	8001236 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <HAL_TIM_PWM_MspInit+0x38>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a08      	ldr	r2, [pc, #32]	@ (8001244 <HAL_TIM_PWM_MspInit+0x38>)
 8001224:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_TIM_PWM_MspInit+0x38>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001258:	d114      	bne.n	8001284 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_TIM_Base_MspInit+0x78>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a18      	ldr	r2, [pc, #96]	@ (80012c0 <HAL_TIM_Base_MspInit+0x78>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <HAL_TIM_Base_MspInit+0x78>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2104      	movs	r1, #4
 8001276:	201c      	movs	r0, #28
 8001278:	f000 faeb 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800127c:	201c      	movs	r0, #28
 800127e:	f000 fb04 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001282:	e018      	b.n	80012b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_TIM_Base_MspInit+0x7c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d113      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_TIM_Base_MspInit+0x78>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <HAL_TIM_Base_MspInit+0x78>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_TIM_Base_MspInit+0x78>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2105      	movs	r1, #5
 80012aa:	201d      	movs	r0, #29
 80012ac:	f000 fad1 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012b0:	201d      	movs	r0, #29
 80012b2:	f000 faea 	bl	800188a <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40000400 	.word	0x40000400

080012c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <HAL_TIM_MspPostInit+0x5c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d118      	bne.n	800131a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_TIM_MspPostInit+0x60>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001328 <HAL_TIM_MspPostInit+0x60>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <HAL_TIM_MspPostInit+0x60>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001300:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <HAL_TIM_MspPostInit+0x64>)
 8001316:	f000 fb85 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012c00 	.word	0x40012c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40010800 	.word	0x40010800

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a3f      	ldr	r2, [pc, #252]	@ (8001448 <HAL_UART_MspInit+0x118>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d13a      	bne.n	80013c6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001350:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <HAL_UART_MspInit+0x11c>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a3d      	ldr	r2, [pc, #244]	@ (800144c <HAL_UART_MspInit+0x11c>)
 8001356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <HAL_UART_MspInit+0x11c>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	4b38      	ldr	r3, [pc, #224]	@ (800144c <HAL_UART_MspInit+0x11c>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a37      	ldr	r2, [pc, #220]	@ (800144c <HAL_UART_MspInit+0x11c>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b35      	ldr	r3, [pc, #212]	@ (800144c <HAL_UART_MspInit+0x11c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	4619      	mov	r1, r3
 8001394:	482e      	ldr	r0, [pc, #184]	@ (8001450 <HAL_UART_MspInit+0x120>)
 8001396:	f000 fb45 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800139a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4828      	ldr	r0, [pc, #160]	@ (8001450 <HAL_UART_MspInit+0x120>)
 80013b0:	f000 fb38 	bl	8001a24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2025      	movs	r0, #37	@ 0x25
 80013ba:	f000 fa4a 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013be:	2025      	movs	r0, #37	@ 0x25
 80013c0:	f000 fa63 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c4:	e03c      	b.n	8001440 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a22      	ldr	r2, [pc, #136]	@ (8001454 <HAL_UART_MspInit+0x124>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d137      	bne.n	8001440 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_UART_MspInit+0x11c>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <HAL_UART_MspInit+0x11c>)
 80013d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013da:	61d3      	str	r3, [r2, #28]
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_UART_MspInit+0x11c>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b18      	ldr	r3, [pc, #96]	@ (800144c <HAL_UART_MspInit+0x11c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a17      	ldr	r2, [pc, #92]	@ (800144c <HAL_UART_MspInit+0x11c>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_UART_MspInit+0x11c>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001400:	2304      	movs	r3, #4
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4619      	mov	r1, r3
 8001412:	480f      	ldr	r0, [pc, #60]	@ (8001450 <HAL_UART_MspInit+0x120>)
 8001414:	f000 fb06 	bl	8001a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001418:	2308      	movs	r3, #8
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4619      	mov	r1, r3
 800142a:	4809      	ldr	r0, [pc, #36]	@ (8001450 <HAL_UART_MspInit+0x120>)
 800142c:	f000 fafa 	bl	8001a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2026      	movs	r0, #38	@ 0x26
 8001436:	f000 fa0c 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800143a:	2026      	movs	r0, #38	@ 0x26
 800143c:	f000 fa25 	bl	800188a <HAL_NVIC_EnableIRQ>
}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	@ 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40013800 	.word	0x40013800
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800
 8001454:	40004400 	.word	0x40004400

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 f8e0 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_BUT_Pin);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f000 fc51 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}

080014be <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_BUT_Pin);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f000 fc4a 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <TIM2_IRQHandler+0x10>)
 80014d2:	f001 fa2d 	bl	8002930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200000d8 	.word	0x200000d8

080014e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <TIM3_IRQHandler+0x10>)
 80014e6:	f001 fa23 	bl	8002930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000120 	.word	0x20000120

080014f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <USART1_IRQHandler+0x10>)
 80014fa:	f002 f929 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000168 	.word	0x20000168

08001508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <USART2_IRQHandler+0x10>)
 800150e:	f002 f91f 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200001b0 	.word	0x200001b0

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	@ (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f002 ff2e 	bl	80043ac <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20005000 	.word	0x20005000
 800157c:	00000400 	.word	0x00000400
 8001580:	20002208 	.word	0x20002208
 8001584:	20002358 	.word	0x20002358

08001588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001594:	f7ff fff8 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480b      	ldr	r0, [pc, #44]	@ (80015c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800159a:	490c      	ldr	r1, [pc, #48]	@ (80015cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800159c:	4a0c      	ldr	r2, [pc, #48]	@ (80015d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a09      	ldr	r2, [pc, #36]	@ (80015d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015b0:	4c09      	ldr	r4, [pc, #36]	@ (80015d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f002 fefb 	bl	80043b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c2:	f7ff fa35 	bl	8000a30 <main>
  bx lr
 80015c6:	4770      	bx	lr
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015d0:	08004e74 	.word	0x08004e74
  ldr r2, =_sbss
 80015d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80015d8:	20002358 	.word	0x20002358

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 f923 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	200f      	movs	r0, #15
 80015f8:	f000 f808 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fdd4 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f93b 	bl	80018a6 <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f903 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000018 	.word	0x20000018
 8001664:	20000020 	.word	0x20000020
 8001668:	2000001c 	.word	0x2000001c

0800166c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <HAL_IncTick+0x1c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <HAL_IncTick+0x20>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a03      	ldr	r2, [pc, #12]	@ (800168c <HAL_IncTick+0x20>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	20000020 	.word	0x20000020
 800168c:	2000220c 	.word	0x2000220c

08001690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b02      	ldr	r3, [pc, #8]	@ (80016a0 <HAL_GetTick+0x10>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	2000220c 	.word	0x2000220c

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4906      	ldr	r1, [pc, #24]	@ (800173c <__NVIC_EnableIRQ+0x34>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff90 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff2d 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff42 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff35 	bl	8001708 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d008      	beq.n	80018e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2204      	movs	r2, #4
 80018da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e020      	b.n	800192a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 020e 	bic.w	r2, r2, #14
 80018f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d005      	beq.n	8001958 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e051      	b.n	80019fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 020e 	bic.w	r2, r2, #14
 8001966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <HAL_DMA_Abort_IT+0xd4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d029      	beq.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <HAL_DMA_Abort_IT+0xd8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d022      	beq.n	80019d2 <HAL_DMA_Abort_IT+0x9e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <HAL_DMA_Abort_IT+0xdc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01a      	beq.n	80019cc <HAL_DMA_Abort_IT+0x98>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a14 <HAL_DMA_Abort_IT+0xe0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d012      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x92>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <HAL_DMA_Abort_IT+0xe4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00a      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x8c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_DMA_Abort_IT+0xe8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d102      	bne.n	80019ba <HAL_DMA_Abort_IT+0x86>
 80019b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019b8:	e00e      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019be:	e00b      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c4:	e008      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ca:	e005      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d0:	e002      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019d2:	2310      	movs	r3, #16
 80019d4:	e000      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019d6:	2301      	movs	r3, #1
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_DMA_Abort_IT+0xec>)
 80019da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
    } 
  }
  return status;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40020008 	.word	0x40020008
 8001a0c:	4002001c 	.word	0x4002001c
 8001a10:	40020030 	.word	0x40020030
 8001a14:	40020044 	.word	0x40020044
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	4002006c 	.word	0x4002006c
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b08b      	sub	sp, #44	@ 0x2c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e169      	b.n	8001d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8158 	bne.w	8001d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a9a      	ldr	r2, [pc, #616]	@ (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d05e      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a60:	4a98      	ldr	r2, [pc, #608]	@ (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d875      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a66:	4a98      	ldr	r2, [pc, #608]	@ (8001cc8 <HAL_GPIO_Init+0x2a4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d058      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a6c:	4a96      	ldr	r2, [pc, #600]	@ (8001cc8 <HAL_GPIO_Init+0x2a4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d86f      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a72:	4a96      	ldr	r2, [pc, #600]	@ (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d052      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a78:	4a94      	ldr	r2, [pc, #592]	@ (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d869      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a7e:	4a94      	ldr	r2, [pc, #592]	@ (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d04c      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a84:	4a92      	ldr	r2, [pc, #584]	@ (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d863      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a8a:	4a92      	ldr	r2, [pc, #584]	@ (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d046      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a90:	4a90      	ldr	r2, [pc, #576]	@ (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d85d      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d82a      	bhi.n	8001af0 <HAL_GPIO_Init+0xcc>
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d859      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa4 <HAL_GPIO_Init+0x80>)
 8001aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001af9 	.word	0x08001af9
 8001aac:	08001b0b 	.word	0x08001b0b
 8001ab0:	08001b4d 	.word	0x08001b4d
 8001ab4:	08001b53 	.word	0x08001b53
 8001ab8:	08001b53 	.word	0x08001b53
 8001abc:	08001b53 	.word	0x08001b53
 8001ac0:	08001b53 	.word	0x08001b53
 8001ac4:	08001b53 	.word	0x08001b53
 8001ac8:	08001b53 	.word	0x08001b53
 8001acc:	08001b53 	.word	0x08001b53
 8001ad0:	08001b53 	.word	0x08001b53
 8001ad4:	08001b53 	.word	0x08001b53
 8001ad8:	08001b53 	.word	0x08001b53
 8001adc:	08001b53 	.word	0x08001b53
 8001ae0:	08001b53 	.word	0x08001b53
 8001ae4:	08001b53 	.word	0x08001b53
 8001ae8:	08001b01 	.word	0x08001b01
 8001aec:	08001b15 	.word	0x08001b15
 8001af0:	4a79      	ldr	r2, [pc, #484]	@ (8001cd8 <HAL_GPIO_Init+0x2b4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af6:	e02c      	b.n	8001b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e029      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	3304      	adds	r3, #4
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e024      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	623b      	str	r3, [r7, #32]
          break;
 8001b12:	e01f      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e01a      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b26:	2304      	movs	r3, #4
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e013      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	611a      	str	r2, [r3, #16]
          break;
 8001b3e:	e009      	b.n	8001b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	615a      	str	r2, [r3, #20]
          break;
 8001b4a:	e003      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          break;
 8001b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2bff      	cmp	r3, #255	@ 0xff
 8001b58:	d801      	bhi.n	8001b5e <HAL_GPIO_Init+0x13a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_Init+0x13e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2bff      	cmp	r3, #255	@ 0xff
 8001b68:	d802      	bhi.n	8001b70 <HAL_GPIO_Init+0x14c>
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x152>
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	3b08      	subs	r3, #8
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	210f      	movs	r1, #15
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	6a39      	ldr	r1, [r7, #32]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80b1 	beq.w	8001d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bbc:	4a48      	ldr	r2, [pc, #288]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a40      	ldr	r2, [pc, #256]	@ (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_GPIO_Init+0x1ec>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce8 <HAL_GPIO_Init+0x2c4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_GPIO_Init+0x1e8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8001cec <HAL_GPIO_Init+0x2c8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_GPIO_Init+0x1e0>
 8001c00:	2303      	movs	r3, #3
 8001c02:	e006      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e004      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c10:	2300      	movs	r3, #0
 8001c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c14:	f002 0203 	and.w	r2, r2, #3
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	4093      	lsls	r3, r2
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c22:	492f      	ldr	r1, [pc, #188]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	492c      	ldr	r1, [pc, #176]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4928      	ldr	r1, [pc, #160]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c64:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4922      	ldr	r1, [pc, #136]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	491e      	ldr	r1, [pc, #120]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4918      	ldr	r1, [pc, #96]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4914      	ldr	r1, [pc, #80]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d021      	beq.n	8001cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	490e      	ldr	r1, [pc, #56]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e021      	b.n	8001d06 <HAL_GPIO_Init+0x2e2>
 8001cc2:	bf00      	nop
 8001cc4:	10320000 	.word	0x10320000
 8001cc8:	10310000 	.word	0x10310000
 8001ccc:	10220000 	.word	0x10220000
 8001cd0:	10210000 	.word	0x10210000
 8001cd4:	10120000 	.word	0x10120000
 8001cd8:	10110000 	.word	0x10110000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40010c00 	.word	0x40010c00
 8001cec:	40011000 	.word	0x40011000
 8001cf0:	40011400 	.word	0x40011400
 8001cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4909      	ldr	r1, [pc, #36]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	3301      	adds	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	fa22 f303 	lsr.w	r3, r2, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f47f ae8e 	bne.w	8001a38 <HAL_GPIO_Init+0x14>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	372c      	adds	r7, #44	@ 0x2c
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40010400 	.word	0x40010400

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d48:	e003      	b.n	8001d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	611a      	str	r2, [r3, #16]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d72:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fdee 	bl	800095c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e272      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8087 	beq.w	8001eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dac:	4b92      	ldr	r3, [pc, #584]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d00c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d112      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd0:	d10b      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	4b89      	ldr	r3, [pc, #548]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d06c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d168      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e24c      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x76>
 8001df4:	4b80      	ldr	r3, [pc, #512]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e02e      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7a      	ldr	r2, [pc, #488]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b78      	ldr	r3, [pc, #480]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a77      	ldr	r2, [pc, #476]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0xbc>
 8001e2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a71      	ldr	r2, [pc, #452]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e48:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b68      	ldr	r3, [pc, #416]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a67      	ldr	r2, [pc, #412]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fc12 	bl	8001690 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fc0e 	bl	8001690 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e200      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe4>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fbfe 	bl	8001690 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fbfa 	bl	8001690 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	@ 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1ec      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x10c>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d063      	beq.n	8001f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ed2:	4b49      	ldr	r3, [pc, #292]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
 8001ede:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1c0      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4939      	ldr	r1, [pc, #228]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e03a      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b36      	ldr	r3, [pc, #216]	@ (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fbb3 	bl	8001690 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fbaf 	bl	8001690 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1a1      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4927      	ldr	r1, [pc, #156]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f62:	4b26      	ldr	r3, [pc, #152]	@ (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fb92 	bl	8001690 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7ff fb8e 	bl	8001690 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e180      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03a      	beq.n	8002010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d019      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fb72 	bl	8001690 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fb6e 	bl	8001690 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e160      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 face 	bl	8002570 <RCC_Delay>
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fb58 	bl	8001690 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	e00f      	b.n	8002004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fb54 	bl	8001690 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d908      	bls.n	8002004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e146      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	42420000 	.word	0x42420000
 8002000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b92      	ldr	r3, [pc, #584]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e9      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a6 	beq.w	800216a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b8b      	ldr	r3, [pc, #556]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b88      	ldr	r3, [pc, #544]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a87      	ldr	r2, [pc, #540]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b85      	ldr	r3, [pc, #532]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b82      	ldr	r3, [pc, #520]	@ (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002056:	4b7f      	ldr	r3, [pc, #508]	@ (8002254 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7e      	ldr	r2, [pc, #504]	@ (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7ff fb15 	bl	8001690 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7ff fb11 	bl	8001690 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	@ 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e103      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	4b75      	ldr	r3, [pc, #468]	@ (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x312>
 8002090:	4b6f      	ldr	r3, [pc, #444]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a6e      	ldr	r2, [pc, #440]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e02d      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x334>
 80020a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a69      	ldr	r2, [pc, #420]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b67      	ldr	r3, [pc, #412]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a66      	ldr	r2, [pc, #408]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	e01c      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x356>
 80020c8:	4b61      	ldr	r3, [pc, #388]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a60      	ldr	r2, [pc, #384]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a57      	ldr	r2, [pc, #348]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fac5 	bl	8001690 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7ff fac1 	bl	8001690 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0b1      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ee      	beq.n	800210a <HAL_RCC_OscConfig+0x37e>
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff faaf 	bl	8001690 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff faab 	bl	8001690 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e09b      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	4b40      	ldr	r3, [pc, #256]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ee      	bne.n	8002136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b3c      	ldr	r3, [pc, #240]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a3b      	ldr	r2, [pc, #236]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	4b36      	ldr	r3, [pc, #216]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d061      	beq.n	8002244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d146      	bne.n	8002216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff fa7f 	bl	8001690 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff fa7b 	bl	8001690 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e06d      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a8:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021be:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4921      	ldr	r1, [pc, #132]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a19      	ldr	r1, [r3, #32]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	430b      	orrs	r3, r1
 80021e2:	491b      	ldr	r1, [pc, #108]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff fa4f 	bl	8001690 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7ff fa4b 	bl	8001690 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x46a>
 8002214:	e035      	b.n	8002282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fa38 	bl	8001690 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff fa34 	bl	8001690 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e026      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x498>
 8002242:	e01e      	b.n	8002282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e019      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
 8002258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_RCC_OscConfig+0x500>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0d0      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b67      	ldr	r3, [pc, #412]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4965      	ldr	r1, [pc, #404]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a58      	ldr	r2, [pc, #352]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4b53      	ldr	r3, [pc, #332]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a52      	ldr	r2, [pc, #328]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800230e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b50      	ldr	r3, [pc, #320]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	494d      	ldr	r1, [pc, #308]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d040      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b41      	ldr	r3, [pc, #260]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e073      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06b      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4936      	ldr	r1, [pc, #216]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002380:	f7ff f986 	bl	8001690 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7ff f982 	bl	8001690 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e053      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2d      	ldr	r3, [pc, #180]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d210      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	4922      	ldr	r1, [pc, #136]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e032      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4916      	ldr	r1, [pc, #88]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490e      	ldr	r1, [pc, #56]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241e:	f000 f821 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490a      	ldr	r1, [pc, #40]	@ (8002458 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a09      	ldr	r2, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1cc>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_RCC_ClockConfig+0x1d0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f8e4 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
 8002458:	08004d0c 	.word	0x08004d0c
 800245c:	20000018 	.word	0x20000018
 8002460:	2000001c 	.word	0x2000001c

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x30>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
 8002492:	e027      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002496:	613b      	str	r3, [r7, #16]
      break;
 8002498:	e027      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	0c9b      	lsrs	r3, r3, #18
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c5b      	lsrs	r3, r3, #17
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	4a11      	ldr	r2, [pc, #68]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a0d      	ldr	r2, [pc, #52]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	fb03 f202 	mul.w	r2, r3, r2
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e004      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	613b      	str	r3, [r7, #16]
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ea:	693b      	ldr	r3, [r7, #16]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	007a1200 	.word	0x007a1200
 8002500:	08004d24 	.word	0x08004d24
 8002504:	08004d34 	.word	0x08004d34
 8002508:	003d0900 	.word	0x003d0900

0800250c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b02      	ldr	r3, [pc, #8]	@ (800251c <HAL_RCC_GetHCLKFreq+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	20000018 	.word	0x20000018

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002524:	f7ff fff2 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4903      	ldr	r1, [pc, #12]	@ (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	08004d1c 	.word	0x08004d1c

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800254c:	f7ff ffde 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	0adb      	lsrs	r3, r3, #11
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4903      	ldr	r1, [pc, #12]	@ (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	08004d1c 	.word	0x08004d1c

08002570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <RCC_Delay+0x34>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <RCC_Delay+0x38>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800258c:	bf00      	nop
  }
  while (Delay --);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	60fa      	str	r2, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <RCC_Delay+0x1c>
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000018 	.word	0x20000018
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e041      	b.n	8002642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fe38 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 fc3e 	bl	8002e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e03a      	b.n	80026da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a18      	ldr	r2, [pc, #96]	@ (80026e4 <HAL_TIM_Base_Start_IT+0x98>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00e      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800268e:	d009      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d004      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a13      	ldr	r2, [pc, #76]	@ (80026ec <HAL_TIM_Base_Start_IT+0xa0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d010      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	e007      	b.n	80026d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800

080026f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a1a      	ldr	r2, [r3, #32]
 800270e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_TIM_Base_Stop_IT+0x48>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a1a      	ldr	r2, [r3, #32]
 800271e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_TIM_Base_Stop_IT+0x48>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e041      	b.n	80027e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fd4a 	bl	800120c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4610      	mov	r0, r2
 800278c:	f000 fb6e 	bl	8002e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_TIM_PWM_Start+0x24>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e022      	b.n	8002856 <HAL_TIM_PWM_Start+0x6a>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d109      	bne.n	800282a <HAL_TIM_PWM_Start+0x3e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	e015      	b.n	8002856 <HAL_TIM_PWM_Start+0x6a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d109      	bne.n	8002844 <HAL_TIM_PWM_Start+0x58>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	bf14      	ite	ne
 800283c:	2301      	movne	r3, #1
 800283e:	2300      	moveq	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e008      	b.n	8002856 <HAL_TIM_PWM_Start+0x6a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e05e      	b.n	800291c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d104      	bne.n	800286e <HAL_TIM_PWM_Start+0x82>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800286c:	e013      	b.n	8002896 <HAL_TIM_PWM_Start+0xaa>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d104      	bne.n	800287e <HAL_TIM_PWM_Start+0x92>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800287c:	e00b      	b.n	8002896 <HAL_TIM_PWM_Start+0xaa>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d104      	bne.n	800288e <HAL_TIM_PWM_Start+0xa2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800288c:	e003      	b.n	8002896 <HAL_TIM_PWM_Start+0xaa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2201      	movs	r2, #1
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fd70 	bl	8003384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002924 <HAL_TIM_PWM_Start+0x138>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d107      	bne.n	80028be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <HAL_TIM_PWM_Start+0x138>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_TIM_PWM_Start+0xfa>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d0:	d009      	beq.n	80028e6 <HAL_TIM_PWM_Start+0xfa>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <HAL_TIM_PWM_Start+0x13c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_TIM_PWM_Start+0xfa>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a12      	ldr	r2, [pc, #72]	@ (800292c <HAL_TIM_PWM_Start+0x140>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d111      	bne.n	800290a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d010      	beq.n	800291a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	e007      	b.n	800291a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800

08002930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d020      	beq.n	8002994 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01b      	beq.n	8002994 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0202 	mvn.w	r2, #2
 8002964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa5a 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa4d 	bl	8002e22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa5c 	bl	8002e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d020      	beq.n	80029e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0204 	mvn.w	r2, #4
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa34 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa27 	bl	8002e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fa36 	bl	8002e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d020      	beq.n	8002a2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01b      	beq.n	8002a2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0208 	mvn.w	r2, #8
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2204      	movs	r2, #4
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa0e 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa01 	bl	8002e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fa10 	bl	8002e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d020      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0210 	mvn.w	r2, #16
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f9e8 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f9db 	bl	8002e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f9ea 	bl	8002e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0201 	mvn.w	r2, #1
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd fd2c 	bl	80004f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fd3e 	bl	800353c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9ba 	bl	8002e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0220 	mvn.w	r2, #32
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fd11 	bl	800352a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0ae      	b.n	8002c8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	f200 809f 	bhi.w	8002c7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002c7d 	.word	0x08002c7d
 8002b4c:	08002c7d 	.word	0x08002c7d
 8002b50:	08002c7d 	.word	0x08002c7d
 8002b54:	08002bb9 	.word	0x08002bb9
 8002b58:	08002c7d 	.word	0x08002c7d
 8002b5c:	08002c7d 	.word	0x08002c7d
 8002b60:	08002c7d 	.word	0x08002c7d
 8002b64:	08002bfb 	.word	0x08002bfb
 8002b68:	08002c7d 	.word	0x08002c7d
 8002b6c:	08002c7d 	.word	0x08002c7d
 8002b70:	08002c7d 	.word	0x08002c7d
 8002b74:	08002c3b 	.word	0x08002c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f9e2 	bl	8002f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0208 	orr.w	r2, r2, #8
 8002b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0204 	bic.w	r2, r2, #4
 8002ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6999      	ldr	r1, [r3, #24]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	619a      	str	r2, [r3, #24]
      break;
 8002bb6:	e064      	b.n	8002c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fa28 	bl	8003014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6999      	ldr	r1, [r3, #24]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	021a      	lsls	r2, r3, #8
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	619a      	str	r2, [r3, #24]
      break;
 8002bf8:	e043      	b.n	8002c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fa71 	bl	80030e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0208 	orr.w	r2, r2, #8
 8002c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0204 	bic.w	r2, r2, #4
 8002c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69d9      	ldr	r1, [r3, #28]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	61da      	str	r2, [r3, #28]
      break;
 8002c38:	e023      	b.n	8002c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fabb 	bl	80031bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69d9      	ldr	r1, [r3, #28]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	021a      	lsls	r2, r3, #8
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	61da      	str	r2, [r3, #28]
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e0b4      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x186>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ce8:	d03e      	beq.n	8002d68 <HAL_TIM_ConfigClockSource+0xd4>
 8002cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cee:	f200 8087 	bhi.w	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf6:	f000 8086 	beq.w	8002e06 <HAL_TIM_ConfigClockSource+0x172>
 8002cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cfe:	d87f      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
 8002d00:	2b70      	cmp	r3, #112	@ 0x70
 8002d02:	d01a      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0xa6>
 8002d04:	2b70      	cmp	r3, #112	@ 0x70
 8002d06:	d87b      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b60      	cmp	r3, #96	@ 0x60
 8002d0a:	d050      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x11a>
 8002d0c:	2b60      	cmp	r3, #96	@ 0x60
 8002d0e:	d877      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b50      	cmp	r3, #80	@ 0x50
 8002d12:	d03c      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0xfa>
 8002d14:	2b50      	cmp	r3, #80	@ 0x50
 8002d16:	d873      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d058      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x13a>
 8002d1c:	2b40      	cmp	r3, #64	@ 0x40
 8002d1e:	d86f      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b30      	cmp	r3, #48	@ 0x30
 8002d22:	d064      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x15a>
 8002d24:	2b30      	cmp	r3, #48	@ 0x30
 8002d26:	d86b      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d060      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x15a>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d867      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d05c      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x15a>
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d05a      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x15a>
 8002d38:	e062      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d4a:	f000 fafc 	bl	8003346 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	609a      	str	r2, [r3, #8]
      break;
 8002d66:	e04f      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d78:	f000 fae5 	bl	8003346 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d8a:	609a      	str	r2, [r3, #8]
      break;
 8002d8c:	e03c      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f000 fa5c 	bl	8003258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2150      	movs	r1, #80	@ 0x50
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fab3 	bl	8003312 <TIM_ITRx_SetConfig>
      break;
 8002dac:	e02c      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f000 fa7a 	bl	80032b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2160      	movs	r1, #96	@ 0x60
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 faa3 	bl	8003312 <TIM_ITRx_SetConfig>
      break;
 8002dcc:	e01c      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f000 fa3c 	bl	8003258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2140      	movs	r1, #64	@ 0x40
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fa93 	bl	8003312 <TIM_ITRx_SetConfig>
      break;
 8002dec:	e00c      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f000 fa8a 	bl	8003312 <TIM_ITRx_SetConfig>
      break;
 8002dfe:	e003      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e000      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
	...

08002e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f3c <TIM_Base_SetConfig+0xd0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00b      	beq.n	8002e9c <TIM_Base_SetConfig+0x30>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8a:	d007      	beq.n	8002e9c <TIM_Base_SetConfig+0x30>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f40 <TIM_Base_SetConfig+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_Base_SetConfig+0x30>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a2b      	ldr	r2, [pc, #172]	@ (8002f44 <TIM_Base_SetConfig+0xd8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d108      	bne.n	8002eae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	@ (8002f3c <TIM_Base_SetConfig+0xd0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <TIM_Base_SetConfig+0x62>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ebc:	d007      	beq.n	8002ece <TIM_Base_SetConfig+0x62>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f40 <TIM_Base_SetConfig+0xd4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0x62>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f44 <TIM_Base_SetConfig+0xd8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d108      	bne.n	8002ee0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <TIM_Base_SetConfig+0xd0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d103      	bne.n	8002f14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f023 0201 	bic.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	611a      	str	r2, [r3, #16]
  }
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800

08002f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f023 0201 	bic.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f023 0302 	bic.w	r3, r3, #2
 8002f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003010 <TIM_OC1_SetConfig+0xc8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10c      	bne.n	8002fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0308 	bic.w	r3, r3, #8
 8002faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <TIM_OC1_SetConfig+0xc8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d111      	bne.n	8002fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	621a      	str	r2, [r3, #32]
}
 8003004:	bf00      	nop
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40012c00 	.word	0x40012c00

08003014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f023 0210 	bic.w	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800304a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0320 	bic.w	r3, r3, #32
 800305e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a1d      	ldr	r2, [pc, #116]	@ (80030e4 <TIM_OC2_SetConfig+0xd0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d10d      	bne.n	8003090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800307a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800308e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a14      	ldr	r2, [pc, #80]	@ (80030e4 <TIM_OC2_SetConfig+0xd0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d113      	bne.n	80030c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800309e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40012c00 	.word	0x40012c00

080030e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1d      	ldr	r2, [pc, #116]	@ (80031b8 <TIM_OC3_SetConfig+0xd0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10d      	bne.n	8003162 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800314c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <TIM_OC3_SetConfig+0xd0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d113      	bne.n	8003192 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	621a      	str	r2, [r3, #32]
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40012c00 	.word	0x40012c00

080031bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	031b      	lsls	r3, r3, #12
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <TIM_OC4_SetConfig+0x98>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d109      	bne.n	8003230 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	019b      	lsls	r3, r3, #6
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00

08003258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f023 0201 	bic.w	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f023 030a 	bic.w	r3, r3, #10
 8003294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0210 	bic.w	r2, r3, #16
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	031b      	lsls	r3, r3, #12
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	621a      	str	r2, [r3, #32]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	f043 0307 	orr.w	r3, r3, #7
 8003334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	609a      	str	r2, [r3, #8]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003346:	b480      	push	{r7}
 8003348:	b087      	sub	sp, #28
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003360:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	431a      	orrs	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4313      	orrs	r3, r2
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2201      	movs	r2, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	401a      	ands	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e046      	b.n	8003472 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a16      	ldr	r2, [pc, #88]	@ (800347c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00e      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003430:	d009      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a12      	ldr	r2, [pc, #72]	@ (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a10      	ldr	r2, [pc, #64]	@ (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10c      	bne.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800344c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4313      	orrs	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800

08003488 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e03d      	b.n	8003520 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e042      	b.n	80035e6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd fedb 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2224      	movs	r2, #36	@ 0x24
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003590:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fdb8 	bl	8004108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b08a      	sub	sp, #40	@ 0x28
 80035f2:	af02      	add	r7, sp, #8
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b20      	cmp	r3, #32
 800360c:	d175      	bne.n	80036fa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_UART_Transmit+0x2c>
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06e      	b.n	80036fc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2221      	movs	r2, #33	@ 0x21
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800362c:	f7fe f830 	bl	8001690 <HAL_GetTick>
 8003630:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	88fa      	ldrh	r2, [r7, #6]
 8003636:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003646:	d108      	bne.n	800365a <HAL_UART_Transmit+0x6c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	e003      	b.n	8003662 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003662:	e02e      	b.n	80036c2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2200      	movs	r2, #0
 800366c:	2180      	movs	r1, #128	@ 0x80
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fb1d 	bl	8003cae <UART_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e03a      	b.n	80036fc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800369a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	3302      	adds	r3, #2
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e007      	b.n	80036b4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1cb      	bne.n	8003664 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	2140      	movs	r1, #64	@ 0x40
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fae9 	bl	8003cae <UART_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e006      	b.n	80036fc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
  }
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	d112      	bne.n	8003744 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_UART_Receive_IT+0x26>
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e00b      	b.n	8003746 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	461a      	mov	r2, r3
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb10 	bl	8003d60 <UART_Start_Receive_IT>
 8003740:	4603      	mov	r3, r0
 8003742:	e000      	b.n	8003746 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b0ba      	sub	sp, #232	@ 0xe8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800378e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_UART_IRQHandler+0x66>
 80037a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fbec 	bl	8003f8c <UART_Receive_IT>
      return;
 80037b4:	e25b      	b.n	8003c6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80de 	beq.w	800397c <HAL_UART_IRQHandler+0x22c>
 80037c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80d1 	beq.w	800397c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_UART_IRQHandler+0xae>
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_UART_IRQHandler+0xd2>
 800380a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f043 0202 	orr.w	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_UART_IRQHandler+0xf6>
 800382e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d011      	beq.n	8003876 <HAL_UART_IRQHandler+0x126>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800385e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f043 0208 	orr.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 81f2 	beq.w	8003c64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_UART_IRQHandler+0x14e>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fb77 	bl	8003f8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_UART_IRQHandler+0x17a>
 80038c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04f      	beq.n	800396a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa81 	bl	8003dd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d041      	beq.n	8003962 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800390a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800390e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1d9      	bne.n	80038de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d013      	beq.n	800395a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003936:	4a7e      	ldr	r2, [pc, #504]	@ (8003b30 <HAL_UART_IRQHandler+0x3e0>)
 8003938:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fff8 	bl	8001934 <HAL_DMA_Abort_IT>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003954:	4610      	mov	r0, r2
 8003956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	e00e      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f993 	bl	8003c86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	e00a      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f98f 	bl	8003c86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	e006      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f98b 	bl	8003c86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003976:	e175      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	bf00      	nop
    return;
 800397a:	e173      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 814f 	bne.w	8003c24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8148 	beq.w	8003c24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8141 	beq.w	8003c24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80b6 	beq.w	8003b34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8145 	beq.w	8003c68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039e6:	429a      	cmp	r2, r3
 80039e8:	f080 813e 	bcs.w	8003c68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	f000 8088 	beq.w	8003b10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	330c      	adds	r3, #12
 8003a28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a2c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a38:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1d9      	bne.n	8003a00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3314      	adds	r3, #20
 8003a52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3314      	adds	r3, #20
 8003a6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a70:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a74:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e1      	bne.n	8003a4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3314      	adds	r3, #20
 8003a8e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003aae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ab2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003aba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e3      	bne.n	8003a88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003af2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003af4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003af8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e3      	bne.n	8003ace <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fed7 	bl	80018be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8b6 	bl	8003c98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b2c:	e09c      	b.n	8003c68 <HAL_UART_IRQHandler+0x518>
 8003b2e:	bf00      	nop
 8003b30:	08003e97 	.word	0x08003e97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 808e 	beq.w	8003c6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8089 	beq.w	8003c6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e3      	bne.n	8003b5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3314      	adds	r3, #20
 8003bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e3      	bne.n	8003b92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0310 	bic.w	r3, r3, #16
 8003bee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bfc:	61fa      	str	r2, [r7, #28]
 8003bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	69b9      	ldr	r1, [r7, #24]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	617b      	str	r3, [r7, #20]
   return(result);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e3      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f83b 	bl	8003c98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c22:	e023      	b.n	8003c6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <HAL_UART_IRQHandler+0x4f4>
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f93e 	bl	8003ebe <UART_Transmit_IT>
    return;
 8003c42:	e014      	b.n	8003c6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00e      	beq.n	8003c6e <HAL_UART_IRQHandler+0x51e>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f97d 	bl	8003f5c <UART_EndTransmit_IT>
    return;
 8003c62:	e004      	b.n	8003c6e <HAL_UART_IRQHandler+0x51e>
    return;
 8003c64:	bf00      	nop
 8003c66:	e002      	b.n	8003c6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c68:	bf00      	nop
 8003c6a:	e000      	b.n	8003c6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c6c:	bf00      	nop
  }
}
 8003c6e:	37e8      	adds	r7, #232	@ 0xe8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbe:	e03b      	b.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d037      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc8:	f7fd fce2 	bl	8001690 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <UART_WaitOnFlagUntilTimeout+0x30>
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e03a      	b.n	8003d58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d023      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d020      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b40      	cmp	r3, #64	@ 0x40
 8003cfa:	d01d      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d116      	bne.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f856 	bl	8003dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e00f      	b.n	8003d58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4013      	ands	r3, r2
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d0b4      	beq.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	88fa      	ldrh	r2, [r7, #6]
 8003d78:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2222      	movs	r2, #34	@ 0x22
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0220 	orr.w	r2, r2, #32
 8003dc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b095      	sub	sp, #84	@ 0x54
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3314      	adds	r3, #20
 8003e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d119      	bne.n	8003e7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f023 0310 	bic.w	r3, r3, #16
 8003e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e6a:	61ba      	str	r2, [r7, #24]
 8003e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6979      	ldr	r1, [r7, #20]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	613b      	str	r3, [r7, #16]
   return(result);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e8c:	bf00      	nop
 8003e8e:	3754      	adds	r7, #84	@ 0x54
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff fee8 	bl	8003c86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b21      	cmp	r3, #33	@ 0x21
 8003ed0:	d13e      	bne.n	8003f50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eda:	d114      	bne.n	8003f06 <UART_Transmit_IT+0x48>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d110      	bne.n	8003f06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	1c9a      	adds	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	621a      	str	r2, [r3, #32]
 8003f04:	e008      	b.n	8003f18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6211      	str	r1, [r2, #32]
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4619      	mov	r1, r3
 8003f26:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fe79 	bl	8003c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08c      	sub	sp, #48	@ 0x30
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b22      	cmp	r3, #34	@ 0x22
 8003f9e:	f040 80ae 	bne.w	80040fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003faa:	d117      	bne.n	8003fdc <UART_Receive_IT+0x50>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d113      	bne.n	8003fdc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fda:	e026      	b.n	800402a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fee:	d007      	beq.n	8004000 <UART_Receive_IT+0x74>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <UART_Receive_IT+0x82>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e008      	b.n	8004020 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800401a:	b2da      	uxtb	r2, r3
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29b      	uxth	r3, r3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4619      	mov	r1, r3
 8004038:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800403a:	2b00      	cmp	r3, #0
 800403c:	d15d      	bne.n	80040fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0220 	bic.w	r2, r2, #32
 800404c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800405c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	d135      	bne.n	80040f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	613b      	str	r3, [r7, #16]
   return(result);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f023 0310 	bic.w	r3, r3, #16
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040aa:	623a      	str	r2, [r7, #32]
 80040ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	69f9      	ldr	r1, [r7, #28]
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d10a      	bne.n	80040e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fdd5 	bl	8003c98 <HAL_UARTEx_RxEventCallback>
 80040ee:	e002      	b.n	80040f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fc fa75 	bl	80005e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e002      	b.n	8004100 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e000      	b.n	8004100 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	3730      	adds	r7, #48	@ 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004142:	f023 030c 	bic.w	r3, r3, #12
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	430b      	orrs	r3, r1
 800414e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a2c      	ldr	r2, [pc, #176]	@ (800421c <UART_SetConfig+0x114>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d103      	bne.n	8004178 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004170:	f7fe f9ea 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	e002      	b.n	800417e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7fe f9d2 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 800417c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009a      	lsls	r2, r3, #2
 8004188:	441a      	add	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	4a22      	ldr	r2, [pc, #136]	@ (8004220 <UART_SetConfig+0x118>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	0119      	lsls	r1, r3, #4
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009a      	lsls	r2, r3, #2
 80041a8:	441a      	add	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004220 <UART_SetConfig+0x118>)
 80041b6:	fba3 0302 	umull	r0, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2064      	movs	r0, #100	@ 0x64
 80041be:	fb00 f303 	mul.w	r3, r0, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	3332      	adds	r3, #50	@ 0x32
 80041c8:	4a15      	ldr	r2, [pc, #84]	@ (8004220 <UART_SetConfig+0x118>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d4:	4419      	add	r1, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009a      	lsls	r2, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <UART_SetConfig+0x118>)
 80041ee:	fba3 0302 	umull	r0, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2064      	movs	r0, #100	@ 0x64
 80041f6:	fb00 f303 	mul.w	r3, r0, r3
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	3332      	adds	r3, #50	@ 0x32
 8004200:	4a07      	ldr	r2, [pc, #28]	@ (8004220 <UART_SetConfig+0x118>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	f003 020f 	and.w	r2, r3, #15
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	440a      	add	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40013800 	.word	0x40013800
 8004220:	51eb851f 	.word	0x51eb851f

08004224 <atoi>:
 8004224:	220a      	movs	r2, #10
 8004226:	2100      	movs	r1, #0
 8004228:	f000 b87a 	b.w	8004320 <strtol>

0800422c <_strtol_l.constprop.0>:
 800422c:	2b24      	cmp	r3, #36	@ 0x24
 800422e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004232:	4686      	mov	lr, r0
 8004234:	4690      	mov	r8, r2
 8004236:	d801      	bhi.n	800423c <_strtol_l.constprop.0+0x10>
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <_strtol_l.constprop.0+0x1e>
 800423c:	f000 f8b6 	bl	80043ac <__errno>
 8004240:	2316      	movs	r3, #22
 8004242:	6003      	str	r3, [r0, #0]
 8004244:	2000      	movs	r0, #0
 8004246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424a:	460d      	mov	r5, r1
 800424c:	4833      	ldr	r0, [pc, #204]	@ (800431c <_strtol_l.constprop.0+0xf0>)
 800424e:	462a      	mov	r2, r5
 8004250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004254:	5d06      	ldrb	r6, [r0, r4]
 8004256:	f016 0608 	ands.w	r6, r6, #8
 800425a:	d1f8      	bne.n	800424e <_strtol_l.constprop.0+0x22>
 800425c:	2c2d      	cmp	r4, #45	@ 0x2d
 800425e:	d12d      	bne.n	80042bc <_strtol_l.constprop.0+0x90>
 8004260:	2601      	movs	r6, #1
 8004262:	782c      	ldrb	r4, [r5, #0]
 8004264:	1c95      	adds	r5, r2, #2
 8004266:	f033 0210 	bics.w	r2, r3, #16
 800426a:	d109      	bne.n	8004280 <_strtol_l.constprop.0+0x54>
 800426c:	2c30      	cmp	r4, #48	@ 0x30
 800426e:	d12a      	bne.n	80042c6 <_strtol_l.constprop.0+0x9a>
 8004270:	782a      	ldrb	r2, [r5, #0]
 8004272:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004276:	2a58      	cmp	r2, #88	@ 0x58
 8004278:	d125      	bne.n	80042c6 <_strtol_l.constprop.0+0x9a>
 800427a:	2310      	movs	r3, #16
 800427c:	786c      	ldrb	r4, [r5, #1]
 800427e:	3502      	adds	r5, #2
 8004280:	2200      	movs	r2, #0
 8004282:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004286:	f10c 3cff 	add.w	ip, ip, #4294967295
 800428a:	fbbc f9f3 	udiv	r9, ip, r3
 800428e:	4610      	mov	r0, r2
 8004290:	fb03 ca19 	mls	sl, r3, r9, ip
 8004294:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004298:	2f09      	cmp	r7, #9
 800429a:	d81b      	bhi.n	80042d4 <_strtol_l.constprop.0+0xa8>
 800429c:	463c      	mov	r4, r7
 800429e:	42a3      	cmp	r3, r4
 80042a0:	dd27      	ble.n	80042f2 <_strtol_l.constprop.0+0xc6>
 80042a2:	1c57      	adds	r7, r2, #1
 80042a4:	d007      	beq.n	80042b6 <_strtol_l.constprop.0+0x8a>
 80042a6:	4581      	cmp	r9, r0
 80042a8:	d320      	bcc.n	80042ec <_strtol_l.constprop.0+0xc0>
 80042aa:	d101      	bne.n	80042b0 <_strtol_l.constprop.0+0x84>
 80042ac:	45a2      	cmp	sl, r4
 80042ae:	db1d      	blt.n	80042ec <_strtol_l.constprop.0+0xc0>
 80042b0:	2201      	movs	r2, #1
 80042b2:	fb00 4003 	mla	r0, r0, r3, r4
 80042b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042ba:	e7eb      	b.n	8004294 <_strtol_l.constprop.0+0x68>
 80042bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80042be:	bf04      	itt	eq
 80042c0:	782c      	ldrbeq	r4, [r5, #0]
 80042c2:	1c95      	addeq	r5, r2, #2
 80042c4:	e7cf      	b.n	8004266 <_strtol_l.constprop.0+0x3a>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1da      	bne.n	8004280 <_strtol_l.constprop.0+0x54>
 80042ca:	2c30      	cmp	r4, #48	@ 0x30
 80042cc:	bf0c      	ite	eq
 80042ce:	2308      	moveq	r3, #8
 80042d0:	230a      	movne	r3, #10
 80042d2:	e7d5      	b.n	8004280 <_strtol_l.constprop.0+0x54>
 80042d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80042d8:	2f19      	cmp	r7, #25
 80042da:	d801      	bhi.n	80042e0 <_strtol_l.constprop.0+0xb4>
 80042dc:	3c37      	subs	r4, #55	@ 0x37
 80042de:	e7de      	b.n	800429e <_strtol_l.constprop.0+0x72>
 80042e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80042e4:	2f19      	cmp	r7, #25
 80042e6:	d804      	bhi.n	80042f2 <_strtol_l.constprop.0+0xc6>
 80042e8:	3c57      	subs	r4, #87	@ 0x57
 80042ea:	e7d8      	b.n	800429e <_strtol_l.constprop.0+0x72>
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	e7e1      	b.n	80042b6 <_strtol_l.constprop.0+0x8a>
 80042f2:	1c53      	adds	r3, r2, #1
 80042f4:	d108      	bne.n	8004308 <_strtol_l.constprop.0+0xdc>
 80042f6:	2322      	movs	r3, #34	@ 0x22
 80042f8:	4660      	mov	r0, ip
 80042fa:	f8ce 3000 	str.w	r3, [lr]
 80042fe:	f1b8 0f00 	cmp.w	r8, #0
 8004302:	d0a0      	beq.n	8004246 <_strtol_l.constprop.0+0x1a>
 8004304:	1e69      	subs	r1, r5, #1
 8004306:	e006      	b.n	8004316 <_strtol_l.constprop.0+0xea>
 8004308:	b106      	cbz	r6, 800430c <_strtol_l.constprop.0+0xe0>
 800430a:	4240      	negs	r0, r0
 800430c:	f1b8 0f00 	cmp.w	r8, #0
 8004310:	d099      	beq.n	8004246 <_strtol_l.constprop.0+0x1a>
 8004312:	2a00      	cmp	r2, #0
 8004314:	d1f6      	bne.n	8004304 <_strtol_l.constprop.0+0xd8>
 8004316:	f8c8 1000 	str.w	r1, [r8]
 800431a:	e794      	b.n	8004246 <_strtol_l.constprop.0+0x1a>
 800431c:	08004d37 	.word	0x08004d37

08004320 <strtol>:
 8004320:	4613      	mov	r3, r2
 8004322:	460a      	mov	r2, r1
 8004324:	4601      	mov	r1, r0
 8004326:	4802      	ldr	r0, [pc, #8]	@ (8004330 <strtol+0x10>)
 8004328:	6800      	ldr	r0, [r0, #0]
 800432a:	f7ff bf7f 	b.w	800422c <_strtol_l.constprop.0>
 800432e:	bf00      	nop
 8004330:	20000024 	.word	0x20000024

08004334 <siprintf>:
 8004334:	b40e      	push	{r1, r2, r3}
 8004336:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800433a:	b500      	push	{lr}
 800433c:	b09c      	sub	sp, #112	@ 0x70
 800433e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004340:	9002      	str	r0, [sp, #8]
 8004342:	9006      	str	r0, [sp, #24]
 8004344:	9107      	str	r1, [sp, #28]
 8004346:	9104      	str	r1, [sp, #16]
 8004348:	4808      	ldr	r0, [pc, #32]	@ (800436c <siprintf+0x38>)
 800434a:	4909      	ldr	r1, [pc, #36]	@ (8004370 <siprintf+0x3c>)
 800434c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004350:	9105      	str	r1, [sp, #20]
 8004352:	6800      	ldr	r0, [r0, #0]
 8004354:	a902      	add	r1, sp, #8
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	f000 f9ae 	bl	80046b8 <_svfiprintf_r>
 800435c:	2200      	movs	r2, #0
 800435e:	9b02      	ldr	r3, [sp, #8]
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	b01c      	add	sp, #112	@ 0x70
 8004364:	f85d eb04 	ldr.w	lr, [sp], #4
 8004368:	b003      	add	sp, #12
 800436a:	4770      	bx	lr
 800436c:	20000024 	.word	0x20000024
 8004370:	ffff0208 	.word	0xffff0208

08004374 <memset>:
 8004374:	4603      	mov	r3, r0
 8004376:	4402      	add	r2, r0
 8004378:	4293      	cmp	r3, r2
 800437a:	d100      	bne.n	800437e <memset+0xa>
 800437c:	4770      	bx	lr
 800437e:	f803 1b01 	strb.w	r1, [r3], #1
 8004382:	e7f9      	b.n	8004378 <memset+0x4>

08004384 <strncpy>:
 8004384:	4603      	mov	r3, r0
 8004386:	b510      	push	{r4, lr}
 8004388:	3901      	subs	r1, #1
 800438a:	b132      	cbz	r2, 800439a <strncpy+0x16>
 800438c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004390:	3a01      	subs	r2, #1
 8004392:	f803 4b01 	strb.w	r4, [r3], #1
 8004396:	2c00      	cmp	r4, #0
 8004398:	d1f7      	bne.n	800438a <strncpy+0x6>
 800439a:	2100      	movs	r1, #0
 800439c:	441a      	add	r2, r3
 800439e:	4293      	cmp	r3, r2
 80043a0:	d100      	bne.n	80043a4 <strncpy+0x20>
 80043a2:	bd10      	pop	{r4, pc}
 80043a4:	f803 1b01 	strb.w	r1, [r3], #1
 80043a8:	e7f9      	b.n	800439e <strncpy+0x1a>
	...

080043ac <__errno>:
 80043ac:	4b01      	ldr	r3, [pc, #4]	@ (80043b4 <__errno+0x8>)
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000024 	.word	0x20000024

080043b8 <__libc_init_array>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	2600      	movs	r6, #0
 80043bc:	4d0c      	ldr	r5, [pc, #48]	@ (80043f0 <__libc_init_array+0x38>)
 80043be:	4c0d      	ldr	r4, [pc, #52]	@ (80043f4 <__libc_init_array+0x3c>)
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	42a6      	cmp	r6, r4
 80043c6:	d109      	bne.n	80043dc <__libc_init_array+0x24>
 80043c8:	f000 fc80 	bl	8004ccc <_init>
 80043cc:	2600      	movs	r6, #0
 80043ce:	4d0a      	ldr	r5, [pc, #40]	@ (80043f8 <__libc_init_array+0x40>)
 80043d0:	4c0a      	ldr	r4, [pc, #40]	@ (80043fc <__libc_init_array+0x44>)
 80043d2:	1b64      	subs	r4, r4, r5
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	42a6      	cmp	r6, r4
 80043d8:	d105      	bne.n	80043e6 <__libc_init_array+0x2e>
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e0:	4798      	blx	r3
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7ee      	b.n	80043c4 <__libc_init_array+0xc>
 80043e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ea:	4798      	blx	r3
 80043ec:	3601      	adds	r6, #1
 80043ee:	e7f2      	b.n	80043d6 <__libc_init_array+0x1e>
 80043f0:	08004e6c 	.word	0x08004e6c
 80043f4:	08004e6c 	.word	0x08004e6c
 80043f8:	08004e6c 	.word	0x08004e6c
 80043fc:	08004e70 	.word	0x08004e70

08004400 <__retarget_lock_acquire_recursive>:
 8004400:	4770      	bx	lr

08004402 <__retarget_lock_release_recursive>:
 8004402:	4770      	bx	lr

08004404 <strcpy>:
 8004404:	4603      	mov	r3, r0
 8004406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800440a:	f803 2b01 	strb.w	r2, [r3], #1
 800440e:	2a00      	cmp	r2, #0
 8004410:	d1f9      	bne.n	8004406 <strcpy+0x2>
 8004412:	4770      	bx	lr

08004414 <_free_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	2900      	cmp	r1, #0
 800441a:	d040      	beq.n	800449e <_free_r+0x8a>
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f0c      	subs	r4, r1, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	18e4      	addlt	r4, r4, r3
 8004428:	f000 f8de 	bl	80045e8 <__malloc_lock>
 800442c:	4a1c      	ldr	r2, [pc, #112]	@ (80044a0 <_free_r+0x8c>)
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	b933      	cbnz	r3, 8004440 <_free_r+0x2c>
 8004432:	6063      	str	r3, [r4, #4]
 8004434:	6014      	str	r4, [r2, #0]
 8004436:	4628      	mov	r0, r5
 8004438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443c:	f000 b8da 	b.w	80045f4 <__malloc_unlock>
 8004440:	42a3      	cmp	r3, r4
 8004442:	d908      	bls.n	8004456 <_free_r+0x42>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	1821      	adds	r1, r4, r0
 8004448:	428b      	cmp	r3, r1
 800444a:	bf01      	itttt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	e7ed      	b.n	8004432 <_free_r+0x1e>
 8004456:	461a      	mov	r2, r3
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b10b      	cbz	r3, 8004460 <_free_r+0x4c>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d9fa      	bls.n	8004456 <_free_r+0x42>
 8004460:	6811      	ldr	r1, [r2, #0]
 8004462:	1850      	adds	r0, r2, r1
 8004464:	42a0      	cmp	r0, r4
 8004466:	d10b      	bne.n	8004480 <_free_r+0x6c>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	4401      	add	r1, r0
 800446c:	1850      	adds	r0, r2, r1
 800446e:	4283      	cmp	r3, r0
 8004470:	6011      	str	r1, [r2, #0]
 8004472:	d1e0      	bne.n	8004436 <_free_r+0x22>
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4408      	add	r0, r1
 800447a:	6010      	str	r0, [r2, #0]
 800447c:	6053      	str	r3, [r2, #4]
 800447e:	e7da      	b.n	8004436 <_free_r+0x22>
 8004480:	d902      	bls.n	8004488 <_free_r+0x74>
 8004482:	230c      	movs	r3, #12
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	e7d6      	b.n	8004436 <_free_r+0x22>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	1821      	adds	r1, r4, r0
 800448c:	428b      	cmp	r3, r1
 800448e:	bf01      	itttt	eq
 8004490:	6819      	ldreq	r1, [r3, #0]
 8004492:	685b      	ldreq	r3, [r3, #4]
 8004494:	1809      	addeq	r1, r1, r0
 8004496:	6021      	streq	r1, [r4, #0]
 8004498:	6063      	str	r3, [r4, #4]
 800449a:	6054      	str	r4, [r2, #4]
 800449c:	e7cb      	b.n	8004436 <_free_r+0x22>
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	20002354 	.word	0x20002354

080044a4 <sbrk_aligned>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4e0f      	ldr	r6, [pc, #60]	@ (80044e4 <sbrk_aligned+0x40>)
 80044a8:	460c      	mov	r4, r1
 80044aa:	6831      	ldr	r1, [r6, #0]
 80044ac:	4605      	mov	r5, r0
 80044ae:	b911      	cbnz	r1, 80044b6 <sbrk_aligned+0x12>
 80044b0:	f000 fbaa 	bl	8004c08 <_sbrk_r>
 80044b4:	6030      	str	r0, [r6, #0]
 80044b6:	4621      	mov	r1, r4
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 fba5 	bl	8004c08 <_sbrk_r>
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	d103      	bne.n	80044ca <sbrk_aligned+0x26>
 80044c2:	f04f 34ff 	mov.w	r4, #4294967295
 80044c6:	4620      	mov	r0, r4
 80044c8:	bd70      	pop	{r4, r5, r6, pc}
 80044ca:	1cc4      	adds	r4, r0, #3
 80044cc:	f024 0403 	bic.w	r4, r4, #3
 80044d0:	42a0      	cmp	r0, r4
 80044d2:	d0f8      	beq.n	80044c6 <sbrk_aligned+0x22>
 80044d4:	1a21      	subs	r1, r4, r0
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 fb96 	bl	8004c08 <_sbrk_r>
 80044dc:	3001      	adds	r0, #1
 80044de:	d1f2      	bne.n	80044c6 <sbrk_aligned+0x22>
 80044e0:	e7ef      	b.n	80044c2 <sbrk_aligned+0x1e>
 80044e2:	bf00      	nop
 80044e4:	20002350 	.word	0x20002350

080044e8 <_malloc_r>:
 80044e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044ec:	1ccd      	adds	r5, r1, #3
 80044ee:	f025 0503 	bic.w	r5, r5, #3
 80044f2:	3508      	adds	r5, #8
 80044f4:	2d0c      	cmp	r5, #12
 80044f6:	bf38      	it	cc
 80044f8:	250c      	movcc	r5, #12
 80044fa:	2d00      	cmp	r5, #0
 80044fc:	4606      	mov	r6, r0
 80044fe:	db01      	blt.n	8004504 <_malloc_r+0x1c>
 8004500:	42a9      	cmp	r1, r5
 8004502:	d904      	bls.n	800450e <_malloc_r+0x26>
 8004504:	230c      	movs	r3, #12
 8004506:	6033      	str	r3, [r6, #0]
 8004508:	2000      	movs	r0, #0
 800450a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800450e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045e4 <_malloc_r+0xfc>
 8004512:	f000 f869 	bl	80045e8 <__malloc_lock>
 8004516:	f8d8 3000 	ldr.w	r3, [r8]
 800451a:	461c      	mov	r4, r3
 800451c:	bb44      	cbnz	r4, 8004570 <_malloc_r+0x88>
 800451e:	4629      	mov	r1, r5
 8004520:	4630      	mov	r0, r6
 8004522:	f7ff ffbf 	bl	80044a4 <sbrk_aligned>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	4604      	mov	r4, r0
 800452a:	d158      	bne.n	80045de <_malloc_r+0xf6>
 800452c:	f8d8 4000 	ldr.w	r4, [r8]
 8004530:	4627      	mov	r7, r4
 8004532:	2f00      	cmp	r7, #0
 8004534:	d143      	bne.n	80045be <_malloc_r+0xd6>
 8004536:	2c00      	cmp	r4, #0
 8004538:	d04b      	beq.n	80045d2 <_malloc_r+0xea>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	4639      	mov	r1, r7
 800453e:	4630      	mov	r0, r6
 8004540:	eb04 0903 	add.w	r9, r4, r3
 8004544:	f000 fb60 	bl	8004c08 <_sbrk_r>
 8004548:	4581      	cmp	r9, r0
 800454a:	d142      	bne.n	80045d2 <_malloc_r+0xea>
 800454c:	6821      	ldr	r1, [r4, #0]
 800454e:	4630      	mov	r0, r6
 8004550:	1a6d      	subs	r5, r5, r1
 8004552:	4629      	mov	r1, r5
 8004554:	f7ff ffa6 	bl	80044a4 <sbrk_aligned>
 8004558:	3001      	adds	r0, #1
 800455a:	d03a      	beq.n	80045d2 <_malloc_r+0xea>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	442b      	add	r3, r5
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	f8d8 3000 	ldr.w	r3, [r8]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	bb62      	cbnz	r2, 80045c4 <_malloc_r+0xdc>
 800456a:	f8c8 7000 	str.w	r7, [r8]
 800456e:	e00f      	b.n	8004590 <_malloc_r+0xa8>
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	1b52      	subs	r2, r2, r5
 8004574:	d420      	bmi.n	80045b8 <_malloc_r+0xd0>
 8004576:	2a0b      	cmp	r2, #11
 8004578:	d917      	bls.n	80045aa <_malloc_r+0xc2>
 800457a:	1961      	adds	r1, r4, r5
 800457c:	42a3      	cmp	r3, r4
 800457e:	6025      	str	r5, [r4, #0]
 8004580:	bf18      	it	ne
 8004582:	6059      	strne	r1, [r3, #4]
 8004584:	6863      	ldr	r3, [r4, #4]
 8004586:	bf08      	it	eq
 8004588:	f8c8 1000 	streq.w	r1, [r8]
 800458c:	5162      	str	r2, [r4, r5]
 800458e:	604b      	str	r3, [r1, #4]
 8004590:	4630      	mov	r0, r6
 8004592:	f000 f82f 	bl	80045f4 <__malloc_unlock>
 8004596:	f104 000b 	add.w	r0, r4, #11
 800459a:	1d23      	adds	r3, r4, #4
 800459c:	f020 0007 	bic.w	r0, r0, #7
 80045a0:	1ac2      	subs	r2, r0, r3
 80045a2:	bf1c      	itt	ne
 80045a4:	1a1b      	subne	r3, r3, r0
 80045a6:	50a3      	strne	r3, [r4, r2]
 80045a8:	e7af      	b.n	800450a <_malloc_r+0x22>
 80045aa:	6862      	ldr	r2, [r4, #4]
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	bf0c      	ite	eq
 80045b0:	f8c8 2000 	streq.w	r2, [r8]
 80045b4:	605a      	strne	r2, [r3, #4]
 80045b6:	e7eb      	b.n	8004590 <_malloc_r+0xa8>
 80045b8:	4623      	mov	r3, r4
 80045ba:	6864      	ldr	r4, [r4, #4]
 80045bc:	e7ae      	b.n	800451c <_malloc_r+0x34>
 80045be:	463c      	mov	r4, r7
 80045c0:	687f      	ldr	r7, [r7, #4]
 80045c2:	e7b6      	b.n	8004532 <_malloc_r+0x4a>
 80045c4:	461a      	mov	r2, r3
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	42a3      	cmp	r3, r4
 80045ca:	d1fb      	bne.n	80045c4 <_malloc_r+0xdc>
 80045cc:	2300      	movs	r3, #0
 80045ce:	6053      	str	r3, [r2, #4]
 80045d0:	e7de      	b.n	8004590 <_malloc_r+0xa8>
 80045d2:	230c      	movs	r3, #12
 80045d4:	4630      	mov	r0, r6
 80045d6:	6033      	str	r3, [r6, #0]
 80045d8:	f000 f80c 	bl	80045f4 <__malloc_unlock>
 80045dc:	e794      	b.n	8004508 <_malloc_r+0x20>
 80045de:	6005      	str	r5, [r0, #0]
 80045e0:	e7d6      	b.n	8004590 <_malloc_r+0xa8>
 80045e2:	bf00      	nop
 80045e4:	20002354 	.word	0x20002354

080045e8 <__malloc_lock>:
 80045e8:	4801      	ldr	r0, [pc, #4]	@ (80045f0 <__malloc_lock+0x8>)
 80045ea:	f7ff bf09 	b.w	8004400 <__retarget_lock_acquire_recursive>
 80045ee:	bf00      	nop
 80045f0:	2000234c 	.word	0x2000234c

080045f4 <__malloc_unlock>:
 80045f4:	4801      	ldr	r0, [pc, #4]	@ (80045fc <__malloc_unlock+0x8>)
 80045f6:	f7ff bf04 	b.w	8004402 <__retarget_lock_release_recursive>
 80045fa:	bf00      	nop
 80045fc:	2000234c 	.word	0x2000234c

08004600 <__ssputs_r>:
 8004600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004604:	461f      	mov	r7, r3
 8004606:	688e      	ldr	r6, [r1, #8]
 8004608:	4682      	mov	sl, r0
 800460a:	42be      	cmp	r6, r7
 800460c:	460c      	mov	r4, r1
 800460e:	4690      	mov	r8, r2
 8004610:	680b      	ldr	r3, [r1, #0]
 8004612:	d82d      	bhi.n	8004670 <__ssputs_r+0x70>
 8004614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004618:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800461c:	d026      	beq.n	800466c <__ssputs_r+0x6c>
 800461e:	6965      	ldr	r5, [r4, #20]
 8004620:	6909      	ldr	r1, [r1, #16]
 8004622:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004626:	eba3 0901 	sub.w	r9, r3, r1
 800462a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800462e:	1c7b      	adds	r3, r7, #1
 8004630:	444b      	add	r3, r9
 8004632:	106d      	asrs	r5, r5, #1
 8004634:	429d      	cmp	r5, r3
 8004636:	bf38      	it	cc
 8004638:	461d      	movcc	r5, r3
 800463a:	0553      	lsls	r3, r2, #21
 800463c:	d527      	bpl.n	800468e <__ssputs_r+0x8e>
 800463e:	4629      	mov	r1, r5
 8004640:	f7ff ff52 	bl	80044e8 <_malloc_r>
 8004644:	4606      	mov	r6, r0
 8004646:	b360      	cbz	r0, 80046a2 <__ssputs_r+0xa2>
 8004648:	464a      	mov	r2, r9
 800464a:	6921      	ldr	r1, [r4, #16]
 800464c:	f000 fafa 	bl	8004c44 <memcpy>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	6126      	str	r6, [r4, #16]
 800465e:	444e      	add	r6, r9
 8004660:	6026      	str	r6, [r4, #0]
 8004662:	463e      	mov	r6, r7
 8004664:	6165      	str	r5, [r4, #20]
 8004666:	eba5 0509 	sub.w	r5, r5, r9
 800466a:	60a5      	str	r5, [r4, #8]
 800466c:	42be      	cmp	r6, r7
 800466e:	d900      	bls.n	8004672 <__ssputs_r+0x72>
 8004670:	463e      	mov	r6, r7
 8004672:	4632      	mov	r2, r6
 8004674:	4641      	mov	r1, r8
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	f000 faac 	bl	8004bd4 <memmove>
 800467c:	2000      	movs	r0, #0
 800467e:	68a3      	ldr	r3, [r4, #8]
 8004680:	1b9b      	subs	r3, r3, r6
 8004682:	60a3      	str	r3, [r4, #8]
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	4433      	add	r3, r6
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468e:	462a      	mov	r2, r5
 8004690:	f000 fae6 	bl	8004c60 <_realloc_r>
 8004694:	4606      	mov	r6, r0
 8004696:	2800      	cmp	r0, #0
 8004698:	d1e0      	bne.n	800465c <__ssputs_r+0x5c>
 800469a:	4650      	mov	r0, sl
 800469c:	6921      	ldr	r1, [r4, #16]
 800469e:	f7ff feb9 	bl	8004414 <_free_r>
 80046a2:	230c      	movs	r3, #12
 80046a4:	f8ca 3000 	str.w	r3, [sl]
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
 80046ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	e7e9      	b.n	800468a <__ssputs_r+0x8a>
	...

080046b8 <_svfiprintf_r>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	4698      	mov	r8, r3
 80046be:	898b      	ldrh	r3, [r1, #12]
 80046c0:	4607      	mov	r7, r0
 80046c2:	061b      	lsls	r3, r3, #24
 80046c4:	460d      	mov	r5, r1
 80046c6:	4614      	mov	r4, r2
 80046c8:	b09d      	sub	sp, #116	@ 0x74
 80046ca:	d510      	bpl.n	80046ee <_svfiprintf_r+0x36>
 80046cc:	690b      	ldr	r3, [r1, #16]
 80046ce:	b973      	cbnz	r3, 80046ee <_svfiprintf_r+0x36>
 80046d0:	2140      	movs	r1, #64	@ 0x40
 80046d2:	f7ff ff09 	bl	80044e8 <_malloc_r>
 80046d6:	6028      	str	r0, [r5, #0]
 80046d8:	6128      	str	r0, [r5, #16]
 80046da:	b930      	cbnz	r0, 80046ea <_svfiprintf_r+0x32>
 80046dc:	230c      	movs	r3, #12
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	b01d      	add	sp, #116	@ 0x74
 80046e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ea:	2340      	movs	r3, #64	@ 0x40
 80046ec:	616b      	str	r3, [r5, #20]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f2:	2320      	movs	r3, #32
 80046f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046f8:	2330      	movs	r3, #48	@ 0x30
 80046fa:	f04f 0901 	mov.w	r9, #1
 80046fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004702:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800489c <_svfiprintf_r+0x1e4>
 8004706:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800470a:	4623      	mov	r3, r4
 800470c:	469a      	mov	sl, r3
 800470e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004712:	b10a      	cbz	r2, 8004718 <_svfiprintf_r+0x60>
 8004714:	2a25      	cmp	r2, #37	@ 0x25
 8004716:	d1f9      	bne.n	800470c <_svfiprintf_r+0x54>
 8004718:	ebba 0b04 	subs.w	fp, sl, r4
 800471c:	d00b      	beq.n	8004736 <_svfiprintf_r+0x7e>
 800471e:	465b      	mov	r3, fp
 8004720:	4622      	mov	r2, r4
 8004722:	4629      	mov	r1, r5
 8004724:	4638      	mov	r0, r7
 8004726:	f7ff ff6b 	bl	8004600 <__ssputs_r>
 800472a:	3001      	adds	r0, #1
 800472c:	f000 80a7 	beq.w	800487e <_svfiprintf_r+0x1c6>
 8004730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004732:	445a      	add	r2, fp
 8004734:	9209      	str	r2, [sp, #36]	@ 0x24
 8004736:	f89a 3000 	ldrb.w	r3, [sl]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 809f 	beq.w	800487e <_svfiprintf_r+0x1c6>
 8004740:	2300      	movs	r3, #0
 8004742:	f04f 32ff 	mov.w	r2, #4294967295
 8004746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800474a:	f10a 0a01 	add.w	sl, sl, #1
 800474e:	9304      	str	r3, [sp, #16]
 8004750:	9307      	str	r3, [sp, #28]
 8004752:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004756:	931a      	str	r3, [sp, #104]	@ 0x68
 8004758:	4654      	mov	r4, sl
 800475a:	2205      	movs	r2, #5
 800475c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004760:	484e      	ldr	r0, [pc, #312]	@ (800489c <_svfiprintf_r+0x1e4>)
 8004762:	f000 fa61 	bl	8004c28 <memchr>
 8004766:	9a04      	ldr	r2, [sp, #16]
 8004768:	b9d8      	cbnz	r0, 80047a2 <_svfiprintf_r+0xea>
 800476a:	06d0      	lsls	r0, r2, #27
 800476c:	bf44      	itt	mi
 800476e:	2320      	movmi	r3, #32
 8004770:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004774:	0711      	lsls	r1, r2, #28
 8004776:	bf44      	itt	mi
 8004778:	232b      	movmi	r3, #43	@ 0x2b
 800477a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800477e:	f89a 3000 	ldrb.w	r3, [sl]
 8004782:	2b2a      	cmp	r3, #42	@ 0x2a
 8004784:	d015      	beq.n	80047b2 <_svfiprintf_r+0xfa>
 8004786:	4654      	mov	r4, sl
 8004788:	2000      	movs	r0, #0
 800478a:	f04f 0c0a 	mov.w	ip, #10
 800478e:	9a07      	ldr	r2, [sp, #28]
 8004790:	4621      	mov	r1, r4
 8004792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004796:	3b30      	subs	r3, #48	@ 0x30
 8004798:	2b09      	cmp	r3, #9
 800479a:	d94b      	bls.n	8004834 <_svfiprintf_r+0x17c>
 800479c:	b1b0      	cbz	r0, 80047cc <_svfiprintf_r+0x114>
 800479e:	9207      	str	r2, [sp, #28]
 80047a0:	e014      	b.n	80047cc <_svfiprintf_r+0x114>
 80047a2:	eba0 0308 	sub.w	r3, r0, r8
 80047a6:	fa09 f303 	lsl.w	r3, r9, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	46a2      	mov	sl, r4
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	e7d2      	b.n	8004758 <_svfiprintf_r+0xa0>
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	1d19      	adds	r1, r3, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	9103      	str	r1, [sp, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfbb      	ittet	lt
 80047be:	425b      	neglt	r3, r3
 80047c0:	f042 0202 	orrlt.w	r2, r2, #2
 80047c4:	9307      	strge	r3, [sp, #28]
 80047c6:	9307      	strlt	r3, [sp, #28]
 80047c8:	bfb8      	it	lt
 80047ca:	9204      	strlt	r2, [sp, #16]
 80047cc:	7823      	ldrb	r3, [r4, #0]
 80047ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80047d0:	d10a      	bne.n	80047e8 <_svfiprintf_r+0x130>
 80047d2:	7863      	ldrb	r3, [r4, #1]
 80047d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047d6:	d132      	bne.n	800483e <_svfiprintf_r+0x186>
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	3402      	adds	r4, #2
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	9203      	str	r2, [sp, #12]
 80047e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047e6:	9305      	str	r3, [sp, #20]
 80047e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80048a0 <_svfiprintf_r+0x1e8>
 80047ec:	2203      	movs	r2, #3
 80047ee:	4650      	mov	r0, sl
 80047f0:	7821      	ldrb	r1, [r4, #0]
 80047f2:	f000 fa19 	bl	8004c28 <memchr>
 80047f6:	b138      	cbz	r0, 8004808 <_svfiprintf_r+0x150>
 80047f8:	2240      	movs	r2, #64	@ 0x40
 80047fa:	9b04      	ldr	r3, [sp, #16]
 80047fc:	eba0 000a 	sub.w	r0, r0, sl
 8004800:	4082      	lsls	r2, r0
 8004802:	4313      	orrs	r3, r2
 8004804:	3401      	adds	r4, #1
 8004806:	9304      	str	r3, [sp, #16]
 8004808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480c:	2206      	movs	r2, #6
 800480e:	4825      	ldr	r0, [pc, #148]	@ (80048a4 <_svfiprintf_r+0x1ec>)
 8004810:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004814:	f000 fa08 	bl	8004c28 <memchr>
 8004818:	2800      	cmp	r0, #0
 800481a:	d036      	beq.n	800488a <_svfiprintf_r+0x1d2>
 800481c:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <_svfiprintf_r+0x1f0>)
 800481e:	bb1b      	cbnz	r3, 8004868 <_svfiprintf_r+0x1b0>
 8004820:	9b03      	ldr	r3, [sp, #12]
 8004822:	3307      	adds	r3, #7
 8004824:	f023 0307 	bic.w	r3, r3, #7
 8004828:	3308      	adds	r3, #8
 800482a:	9303      	str	r3, [sp, #12]
 800482c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800482e:	4433      	add	r3, r6
 8004830:	9309      	str	r3, [sp, #36]	@ 0x24
 8004832:	e76a      	b.n	800470a <_svfiprintf_r+0x52>
 8004834:	460c      	mov	r4, r1
 8004836:	2001      	movs	r0, #1
 8004838:	fb0c 3202 	mla	r2, ip, r2, r3
 800483c:	e7a8      	b.n	8004790 <_svfiprintf_r+0xd8>
 800483e:	2300      	movs	r3, #0
 8004840:	f04f 0c0a 	mov.w	ip, #10
 8004844:	4619      	mov	r1, r3
 8004846:	3401      	adds	r4, #1
 8004848:	9305      	str	r3, [sp, #20]
 800484a:	4620      	mov	r0, r4
 800484c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004850:	3a30      	subs	r2, #48	@ 0x30
 8004852:	2a09      	cmp	r2, #9
 8004854:	d903      	bls.n	800485e <_svfiprintf_r+0x1a6>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0c6      	beq.n	80047e8 <_svfiprintf_r+0x130>
 800485a:	9105      	str	r1, [sp, #20]
 800485c:	e7c4      	b.n	80047e8 <_svfiprintf_r+0x130>
 800485e:	4604      	mov	r4, r0
 8004860:	2301      	movs	r3, #1
 8004862:	fb0c 2101 	mla	r1, ip, r1, r2
 8004866:	e7f0      	b.n	800484a <_svfiprintf_r+0x192>
 8004868:	ab03      	add	r3, sp, #12
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	462a      	mov	r2, r5
 800486e:	4638      	mov	r0, r7
 8004870:	4b0e      	ldr	r3, [pc, #56]	@ (80048ac <_svfiprintf_r+0x1f4>)
 8004872:	a904      	add	r1, sp, #16
 8004874:	f3af 8000 	nop.w
 8004878:	1c42      	adds	r2, r0, #1
 800487a:	4606      	mov	r6, r0
 800487c:	d1d6      	bne.n	800482c <_svfiprintf_r+0x174>
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	065b      	lsls	r3, r3, #25
 8004882:	f53f af2d 	bmi.w	80046e0 <_svfiprintf_r+0x28>
 8004886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004888:	e72c      	b.n	80046e4 <_svfiprintf_r+0x2c>
 800488a:	ab03      	add	r3, sp, #12
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	462a      	mov	r2, r5
 8004890:	4638      	mov	r0, r7
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <_svfiprintf_r+0x1f4>)
 8004894:	a904      	add	r1, sp, #16
 8004896:	f000 f87d 	bl	8004994 <_printf_i>
 800489a:	e7ed      	b.n	8004878 <_svfiprintf_r+0x1c0>
 800489c:	08004e37 	.word	0x08004e37
 80048a0:	08004e3d 	.word	0x08004e3d
 80048a4:	08004e41 	.word	0x08004e41
 80048a8:	00000000 	.word	0x00000000
 80048ac:	08004601 	.word	0x08004601

080048b0 <_printf_common>:
 80048b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b4:	4616      	mov	r6, r2
 80048b6:	4698      	mov	r8, r3
 80048b8:	688a      	ldr	r2, [r1, #8]
 80048ba:	690b      	ldr	r3, [r1, #16]
 80048bc:	4607      	mov	r7, r0
 80048be:	4293      	cmp	r3, r2
 80048c0:	bfb8      	it	lt
 80048c2:	4613      	movlt	r3, r2
 80048c4:	6033      	str	r3, [r6, #0]
 80048c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048ca:	460c      	mov	r4, r1
 80048cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048d0:	b10a      	cbz	r2, 80048d6 <_printf_common+0x26>
 80048d2:	3301      	adds	r3, #1
 80048d4:	6033      	str	r3, [r6, #0]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	0699      	lsls	r1, r3, #26
 80048da:	bf42      	ittt	mi
 80048dc:	6833      	ldrmi	r3, [r6, #0]
 80048de:	3302      	addmi	r3, #2
 80048e0:	6033      	strmi	r3, [r6, #0]
 80048e2:	6825      	ldr	r5, [r4, #0]
 80048e4:	f015 0506 	ands.w	r5, r5, #6
 80048e8:	d106      	bne.n	80048f8 <_printf_common+0x48>
 80048ea:	f104 0a19 	add.w	sl, r4, #25
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	6832      	ldr	r2, [r6, #0]
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	42ab      	cmp	r3, r5
 80048f6:	dc2b      	bgt.n	8004950 <_printf_common+0xa0>
 80048f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	3b00      	subs	r3, #0
 8004900:	bf18      	it	ne
 8004902:	2301      	movne	r3, #1
 8004904:	0692      	lsls	r2, r2, #26
 8004906:	d430      	bmi.n	800496a <_printf_common+0xba>
 8004908:	4641      	mov	r1, r8
 800490a:	4638      	mov	r0, r7
 800490c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004910:	47c8      	blx	r9
 8004912:	3001      	adds	r0, #1
 8004914:	d023      	beq.n	800495e <_printf_common+0xae>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	6922      	ldr	r2, [r4, #16]
 800491a:	f003 0306 	and.w	r3, r3, #6
 800491e:	2b04      	cmp	r3, #4
 8004920:	bf14      	ite	ne
 8004922:	2500      	movne	r5, #0
 8004924:	6833      	ldreq	r3, [r6, #0]
 8004926:	f04f 0600 	mov.w	r6, #0
 800492a:	bf08      	it	eq
 800492c:	68e5      	ldreq	r5, [r4, #12]
 800492e:	f104 041a 	add.w	r4, r4, #26
 8004932:	bf08      	it	eq
 8004934:	1aed      	subeq	r5, r5, r3
 8004936:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800493a:	bf08      	it	eq
 800493c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004940:	4293      	cmp	r3, r2
 8004942:	bfc4      	itt	gt
 8004944:	1a9b      	subgt	r3, r3, r2
 8004946:	18ed      	addgt	r5, r5, r3
 8004948:	42b5      	cmp	r5, r6
 800494a:	d11a      	bne.n	8004982 <_printf_common+0xd2>
 800494c:	2000      	movs	r0, #0
 800494e:	e008      	b.n	8004962 <_printf_common+0xb2>
 8004950:	2301      	movs	r3, #1
 8004952:	4652      	mov	r2, sl
 8004954:	4641      	mov	r1, r8
 8004956:	4638      	mov	r0, r7
 8004958:	47c8      	blx	r9
 800495a:	3001      	adds	r0, #1
 800495c:	d103      	bne.n	8004966 <_printf_common+0xb6>
 800495e:	f04f 30ff 	mov.w	r0, #4294967295
 8004962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004966:	3501      	adds	r5, #1
 8004968:	e7c1      	b.n	80048ee <_printf_common+0x3e>
 800496a:	2030      	movs	r0, #48	@ 0x30
 800496c:	18e1      	adds	r1, r4, r3
 800496e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004978:	4422      	add	r2, r4
 800497a:	3302      	adds	r3, #2
 800497c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004980:	e7c2      	b.n	8004908 <_printf_common+0x58>
 8004982:	2301      	movs	r3, #1
 8004984:	4622      	mov	r2, r4
 8004986:	4641      	mov	r1, r8
 8004988:	4638      	mov	r0, r7
 800498a:	47c8      	blx	r9
 800498c:	3001      	adds	r0, #1
 800498e:	d0e6      	beq.n	800495e <_printf_common+0xae>
 8004990:	3601      	adds	r6, #1
 8004992:	e7d9      	b.n	8004948 <_printf_common+0x98>

08004994 <_printf_i>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	7e0f      	ldrb	r7, [r1, #24]
 800499a:	4691      	mov	r9, r2
 800499c:	2f78      	cmp	r7, #120	@ 0x78
 800499e:	4680      	mov	r8, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	469a      	mov	sl, r3
 80049a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049aa:	d807      	bhi.n	80049bc <_printf_i+0x28>
 80049ac:	2f62      	cmp	r7, #98	@ 0x62
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x32>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	f000 80d3 	beq.w	8004b5c <_printf_i+0x1c8>
 80049b6:	2f58      	cmp	r7, #88	@ 0x58
 80049b8:	f000 80ba 	beq.w	8004b30 <_printf_i+0x19c>
 80049bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049c4:	e03a      	b.n	8004a3c <_printf_i+0xa8>
 80049c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049ca:	2b15      	cmp	r3, #21
 80049cc:	d8f6      	bhi.n	80049bc <_printf_i+0x28>
 80049ce:	a101      	add	r1, pc, #4	@ (adr r1, 80049d4 <_printf_i+0x40>)
 80049d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	080049bd 	.word	0x080049bd
 80049e0:	080049bd 	.word	0x080049bd
 80049e4:	080049bd 	.word	0x080049bd
 80049e8:	080049bd 	.word	0x080049bd
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	080049bd 	.word	0x080049bd
 80049f4:	080049bd 	.word	0x080049bd
 80049f8:	080049bd 	.word	0x080049bd
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08004b43 	.word	0x08004b43
 8004a04:	08004a6b 	.word	0x08004a6b
 8004a08:	08004afd 	.word	0x08004afd
 8004a0c:	080049bd 	.word	0x080049bd
 8004a10:	080049bd 	.word	0x080049bd
 8004a14:	08004b65 	.word	0x08004b65
 8004a18:	080049bd 	.word	0x080049bd
 8004a1c:	08004a6b 	.word	0x08004a6b
 8004a20:	080049bd 	.word	0x080049bd
 8004a24:	080049bd 	.word	0x080049bd
 8004a28:	08004b05 	.word	0x08004b05
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6032      	str	r2, [r6, #0]
 8004a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e09e      	b.n	8004b7e <_printf_i+0x1ea>
 8004a40:	6833      	ldr	r3, [r6, #0]
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	1d19      	adds	r1, r3, #4
 8004a46:	6031      	str	r1, [r6, #0]
 8004a48:	0606      	lsls	r6, r0, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0xbc>
 8004a4c:	681d      	ldr	r5, [r3, #0]
 8004a4e:	e003      	b.n	8004a58 <_printf_i+0xc4>
 8004a50:	0645      	lsls	r5, r0, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0xb8>
 8004a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	da03      	bge.n	8004a64 <_printf_i+0xd0>
 8004a5c:	232d      	movs	r3, #45	@ 0x2d
 8004a5e:	426d      	negs	r5, r5
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a64:	230a      	movs	r3, #10
 8004a66:	4859      	ldr	r0, [pc, #356]	@ (8004bcc <_printf_i+0x238>)
 8004a68:	e011      	b.n	8004a8e <_printf_i+0xfa>
 8004a6a:	6821      	ldr	r1, [r4, #0]
 8004a6c:	6833      	ldr	r3, [r6, #0]
 8004a6e:	0608      	lsls	r0, r1, #24
 8004a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a74:	d402      	bmi.n	8004a7c <_printf_i+0xe8>
 8004a76:	0649      	lsls	r1, r1, #25
 8004a78:	bf48      	it	mi
 8004a7a:	b2ad      	uxthmi	r5, r5
 8004a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a7e:	6033      	str	r3, [r6, #0]
 8004a80:	bf14      	ite	ne
 8004a82:	230a      	movne	r3, #10
 8004a84:	2308      	moveq	r3, #8
 8004a86:	4851      	ldr	r0, [pc, #324]	@ (8004bcc <_printf_i+0x238>)
 8004a88:	2100      	movs	r1, #0
 8004a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a8e:	6866      	ldr	r6, [r4, #4]
 8004a90:	2e00      	cmp	r6, #0
 8004a92:	bfa8      	it	ge
 8004a94:	6821      	ldrge	r1, [r4, #0]
 8004a96:	60a6      	str	r6, [r4, #8]
 8004a98:	bfa4      	itt	ge
 8004a9a:	f021 0104 	bicge.w	r1, r1, #4
 8004a9e:	6021      	strge	r1, [r4, #0]
 8004aa0:	b90d      	cbnz	r5, 8004aa6 <_printf_i+0x112>
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	d04b      	beq.n	8004b3e <_printf_i+0x1aa>
 8004aa6:	4616      	mov	r6, r2
 8004aa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aac:	fb03 5711 	mls	r7, r3, r1, r5
 8004ab0:	5dc7      	ldrb	r7, [r0, r7]
 8004ab2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ab6:	462f      	mov	r7, r5
 8004ab8:	42bb      	cmp	r3, r7
 8004aba:	460d      	mov	r5, r1
 8004abc:	d9f4      	bls.n	8004aa8 <_printf_i+0x114>
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d10b      	bne.n	8004ada <_printf_i+0x146>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	07df      	lsls	r7, r3, #31
 8004ac6:	d508      	bpl.n	8004ada <_printf_i+0x146>
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	6861      	ldr	r1, [r4, #4]
 8004acc:	4299      	cmp	r1, r3
 8004ace:	bfde      	ittt	le
 8004ad0:	2330      	movle	r3, #48	@ 0x30
 8004ad2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ad6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ada:	1b92      	subs	r2, r2, r6
 8004adc:	6122      	str	r2, [r4, #16]
 8004ade:	464b      	mov	r3, r9
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	f8cd a000 	str.w	sl, [sp]
 8004ae8:	aa03      	add	r2, sp, #12
 8004aea:	f7ff fee1 	bl	80048b0 <_printf_common>
 8004aee:	3001      	adds	r0, #1
 8004af0:	d14a      	bne.n	8004b88 <_printf_i+0x1f4>
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	b004      	add	sp, #16
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	f043 0320 	orr.w	r3, r3, #32
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	2778      	movs	r7, #120	@ 0x78
 8004b06:	4832      	ldr	r0, [pc, #200]	@ (8004bd0 <_printf_i+0x23c>)
 8004b08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	6831      	ldr	r1, [r6, #0]
 8004b10:	061f      	lsls	r7, r3, #24
 8004b12:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b16:	d402      	bmi.n	8004b1e <_printf_i+0x18a>
 8004b18:	065f      	lsls	r7, r3, #25
 8004b1a:	bf48      	it	mi
 8004b1c:	b2ad      	uxthmi	r5, r5
 8004b1e:	6031      	str	r1, [r6, #0]
 8004b20:	07d9      	lsls	r1, r3, #31
 8004b22:	bf44      	itt	mi
 8004b24:	f043 0320 	orrmi.w	r3, r3, #32
 8004b28:	6023      	strmi	r3, [r4, #0]
 8004b2a:	b11d      	cbz	r5, 8004b34 <_printf_i+0x1a0>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	e7ab      	b.n	8004a88 <_printf_i+0xf4>
 8004b30:	4826      	ldr	r0, [pc, #152]	@ (8004bcc <_printf_i+0x238>)
 8004b32:	e7e9      	b.n	8004b08 <_printf_i+0x174>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	f023 0320 	bic.w	r3, r3, #32
 8004b3a:	6023      	str	r3, [r4, #0]
 8004b3c:	e7f6      	b.n	8004b2c <_printf_i+0x198>
 8004b3e:	4616      	mov	r6, r2
 8004b40:	e7bd      	b.n	8004abe <_printf_i+0x12a>
 8004b42:	6833      	ldr	r3, [r6, #0]
 8004b44:	6825      	ldr	r5, [r4, #0]
 8004b46:	1d18      	adds	r0, r3, #4
 8004b48:	6961      	ldr	r1, [r4, #20]
 8004b4a:	6030      	str	r0, [r6, #0]
 8004b4c:	062e      	lsls	r6, r5, #24
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	d501      	bpl.n	8004b56 <_printf_i+0x1c2>
 8004b52:	6019      	str	r1, [r3, #0]
 8004b54:	e002      	b.n	8004b5c <_printf_i+0x1c8>
 8004b56:	0668      	lsls	r0, r5, #25
 8004b58:	d5fb      	bpl.n	8004b52 <_printf_i+0x1be>
 8004b5a:	8019      	strh	r1, [r3, #0]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4616      	mov	r6, r2
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	e7bc      	b.n	8004ade <_printf_i+0x14a>
 8004b64:	6833      	ldr	r3, [r6, #0]
 8004b66:	2100      	movs	r1, #0
 8004b68:	1d1a      	adds	r2, r3, #4
 8004b6a:	6032      	str	r2, [r6, #0]
 8004b6c:	681e      	ldr	r6, [r3, #0]
 8004b6e:	6862      	ldr	r2, [r4, #4]
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 f859 	bl	8004c28 <memchr>
 8004b76:	b108      	cbz	r0, 8004b7c <_printf_i+0x1e8>
 8004b78:	1b80      	subs	r0, r0, r6
 8004b7a:	6060      	str	r0, [r4, #4]
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	2300      	movs	r3, #0
 8004b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b86:	e7aa      	b.n	8004ade <_printf_i+0x14a>
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	47d0      	blx	sl
 8004b92:	3001      	adds	r0, #1
 8004b94:	d0ad      	beq.n	8004af2 <_printf_i+0x15e>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	079b      	lsls	r3, r3, #30
 8004b9a:	d413      	bmi.n	8004bc4 <_printf_i+0x230>
 8004b9c:	68e0      	ldr	r0, [r4, #12]
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	4298      	cmp	r0, r3
 8004ba2:	bfb8      	it	lt
 8004ba4:	4618      	movlt	r0, r3
 8004ba6:	e7a6      	b.n	8004af6 <_printf_i+0x162>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4632      	mov	r2, r6
 8004bac:	4649      	mov	r1, r9
 8004bae:	4640      	mov	r0, r8
 8004bb0:	47d0      	blx	sl
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d09d      	beq.n	8004af2 <_printf_i+0x15e>
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	68e3      	ldr	r3, [r4, #12]
 8004bba:	9903      	ldr	r1, [sp, #12]
 8004bbc:	1a5b      	subs	r3, r3, r1
 8004bbe:	42ab      	cmp	r3, r5
 8004bc0:	dcf2      	bgt.n	8004ba8 <_printf_i+0x214>
 8004bc2:	e7eb      	b.n	8004b9c <_printf_i+0x208>
 8004bc4:	2500      	movs	r5, #0
 8004bc6:	f104 0619 	add.w	r6, r4, #25
 8004bca:	e7f5      	b.n	8004bb8 <_printf_i+0x224>
 8004bcc:	08004e48 	.word	0x08004e48
 8004bd0:	08004e59 	.word	0x08004e59

08004bd4 <memmove>:
 8004bd4:	4288      	cmp	r0, r1
 8004bd6:	b510      	push	{r4, lr}
 8004bd8:	eb01 0402 	add.w	r4, r1, r2
 8004bdc:	d902      	bls.n	8004be4 <memmove+0x10>
 8004bde:	4284      	cmp	r4, r0
 8004be0:	4623      	mov	r3, r4
 8004be2:	d807      	bhi.n	8004bf4 <memmove+0x20>
 8004be4:	1e43      	subs	r3, r0, #1
 8004be6:	42a1      	cmp	r1, r4
 8004be8:	d008      	beq.n	8004bfc <memmove+0x28>
 8004bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bf2:	e7f8      	b.n	8004be6 <memmove+0x12>
 8004bf4:	4601      	mov	r1, r0
 8004bf6:	4402      	add	r2, r0
 8004bf8:	428a      	cmp	r2, r1
 8004bfa:	d100      	bne.n	8004bfe <memmove+0x2a>
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c06:	e7f7      	b.n	8004bf8 <memmove+0x24>

08004c08 <_sbrk_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	4d05      	ldr	r5, [pc, #20]	@ (8004c24 <_sbrk_r+0x1c>)
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	602b      	str	r3, [r5, #0]
 8004c14:	f7fc fc82 	bl	800151c <_sbrk>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_sbrk_r+0x1a>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_sbrk_r+0x1a>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20002348 	.word	0x20002348

08004c28 <memchr>:
 8004c28:	4603      	mov	r3, r0
 8004c2a:	b510      	push	{r4, lr}
 8004c2c:	b2c9      	uxtb	r1, r1
 8004c2e:	4402      	add	r2, r0
 8004c30:	4293      	cmp	r3, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	d101      	bne.n	8004c3a <memchr+0x12>
 8004c36:	2000      	movs	r0, #0
 8004c38:	e003      	b.n	8004c42 <memchr+0x1a>
 8004c3a:	7804      	ldrb	r4, [r0, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	428c      	cmp	r4, r1
 8004c40:	d1f6      	bne.n	8004c30 <memchr+0x8>
 8004c42:	bd10      	pop	{r4, pc}

08004c44 <memcpy>:
 8004c44:	440a      	add	r2, r1
 8004c46:	4291      	cmp	r1, r2
 8004c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c4c:	d100      	bne.n	8004c50 <memcpy+0xc>
 8004c4e:	4770      	bx	lr
 8004c50:	b510      	push	{r4, lr}
 8004c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c56:	4291      	cmp	r1, r2
 8004c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c5c:	d1f9      	bne.n	8004c52 <memcpy+0xe>
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <_realloc_r>:
 8004c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c64:	4680      	mov	r8, r0
 8004c66:	4615      	mov	r5, r2
 8004c68:	460c      	mov	r4, r1
 8004c6a:	b921      	cbnz	r1, 8004c76 <_realloc_r+0x16>
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c72:	f7ff bc39 	b.w	80044e8 <_malloc_r>
 8004c76:	b92a      	cbnz	r2, 8004c84 <_realloc_r+0x24>
 8004c78:	f7ff fbcc 	bl	8004414 <_free_r>
 8004c7c:	2400      	movs	r4, #0
 8004c7e:	4620      	mov	r0, r4
 8004c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c84:	f000 f81a 	bl	8004cbc <_malloc_usable_size_r>
 8004c88:	4285      	cmp	r5, r0
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	d802      	bhi.n	8004c94 <_realloc_r+0x34>
 8004c8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c92:	d8f4      	bhi.n	8004c7e <_realloc_r+0x1e>
 8004c94:	4629      	mov	r1, r5
 8004c96:	4640      	mov	r0, r8
 8004c98:	f7ff fc26 	bl	80044e8 <_malloc_r>
 8004c9c:	4607      	mov	r7, r0
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d0ec      	beq.n	8004c7c <_realloc_r+0x1c>
 8004ca2:	42b5      	cmp	r5, r6
 8004ca4:	462a      	mov	r2, r5
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	bf28      	it	cs
 8004caa:	4632      	movcs	r2, r6
 8004cac:	f7ff ffca 	bl	8004c44 <memcpy>
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	f7ff fbae 	bl	8004414 <_free_r>
 8004cb8:	463c      	mov	r4, r7
 8004cba:	e7e0      	b.n	8004c7e <_realloc_r+0x1e>

08004cbc <_malloc_usable_size_r>:
 8004cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc0:	1f18      	subs	r0, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bfbc      	itt	lt
 8004cc6:	580b      	ldrlt	r3, [r1, r0]
 8004cc8:	18c0      	addlt	r0, r0, r3
 8004cca:	4770      	bx	lr

08004ccc <_init>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	bf00      	nop
 8004cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd2:	bc08      	pop	{r3}
 8004cd4:	469e      	mov	lr, r3
 8004cd6:	4770      	bx	lr

08004cd8 <_fini>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr
