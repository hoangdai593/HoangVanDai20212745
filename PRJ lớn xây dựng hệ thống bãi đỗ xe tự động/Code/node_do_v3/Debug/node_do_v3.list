
node_do_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000680c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08006920  08006920  00007920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb8  08006cb8  000081d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb8  08006cb8  00007cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cc0  08006cc0  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cc0  08006cc0  00007cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cc4  08006cc4  00007cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006cc8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001d8  08006ea0  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08006ea0  0000843c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cadf  00000000  00000000  00008201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d6  00000000  00000000  00014ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00016eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1e  00000000  00000000  00017bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bde  00000000  00000000  000185de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f50a  00000000  00000000  000311bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c21e  00000000  00000000  000406c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc8e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004680  00000000  00000000  000cc928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d0fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006904 	.word	0x08006904

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006904 	.word	0x08006904

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a34      	ldr	r2, [pc, #208]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b32      	ldr	r3, [pc, #200]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a2e      	ldr	r2, [pc, #184]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b29      	ldr	r3, [pc, #164]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a28      	ldr	r2, [pc, #160]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a22      	ldr	r2, [pc, #136]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <MX_GPIO_Init+0xec>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eaa:	481d      	ldr	r0, [pc, #116]	@ (8000f20 <MX_GPIO_Init+0xf0>)
 8000eac:	f001 f86b 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_Pin|RED_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000eb6:	481b      	ldr	r0, [pc, #108]	@ (8000f24 <MX_GPIO_Init+0xf4>)
 8000eb8:	f001 f865 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8000ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <MX_GPIO_Init+0xf0>)
 8000ed6:	f000 febb 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000eda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <MX_GPIO_Init+0xf0>)
 8000ef0:	f000 feae 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_Pin|RED_Pin;
 8000ef4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_GPIO_Init+0xf4>)
 8000f0e:	f000 fe9f 	bl	8001c50 <HAL_GPIO_Init>

}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a48      	ldr	r2, [pc, #288]	@ (8001058 <HAL_UART_RxCpltCallback+0x130>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d17e      	bne.n	8001038 <HAL_UART_RxCpltCallback+0x110>
    {
        if (rxBuffer[0] == myID)
 8000f3a:	4b48      	ldr	r3, [pc, #288]	@ (800105c <HAL_UART_RxCpltCallback+0x134>)
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	4b48      	ldr	r3, [pc, #288]	@ (8001060 <HAL_UART_RxCpltCallback+0x138>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d178      	bne.n	8001038 <HAL_UART_RxCpltCallback+0x110>
        { // Kiểm tra địa chỉ
        	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f4c:	4845      	ldr	r0, [pc, #276]	@ (8001064 <HAL_UART_RxCpltCallback+0x13c>)
 8000f4e:	f001 f81a 	bl	8001f86 <HAL_GPIO_WritePin>
        	usDelay(3);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 f91a 	bl	800118c <usDelay>

			/*** Start Ultralsonic Measure Routine ***/
			HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5e:	4841      	ldr	r0, [pc, #260]	@ (8001064 <HAL_UART_RxCpltCallback+0x13c>)
 8000f60:	f001 f811 	bl	8001f86 <HAL_GPIO_WritePin>
			usDelay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f000 f911 	bl	800118c <usDelay>
			HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f70:	483c      	ldr	r0, [pc, #240]	@ (8001064 <HAL_UART_RxCpltCallback+0x13c>)
 8000f72:	f001 f808 	bl	8001f86 <HAL_GPIO_WritePin>

			while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == GPIO_PIN_RESET);
 8000f76:	bf00      	nop
 8000f78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f7c:	4839      	ldr	r0, [pc, #228]	@ (8001064 <HAL_UART_RxCpltCallback+0x13c>)
 8000f7e:	f000 ffeb 	bl	8001f58 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f7      	beq.n	8000f78 <HAL_UART_RxCpltCallback+0x50>

			numTicks =0;
 8000f88:	4b37      	ldr	r3, [pc, #220]	@ (8001068 <HAL_UART_RxCpltCallback+0x140>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
			while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == GPIO_PIN_SET)
 8000f8e:	e007      	b.n	8000fa0 <HAL_UART_RxCpltCallback+0x78>
			{
				numTicks++;
 8000f90:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <HAL_UART_RxCpltCallback+0x140>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a34      	ldr	r2, [pc, #208]	@ (8001068 <HAL_UART_RxCpltCallback+0x140>)
 8000f98:	6013      	str	r3, [r2, #0]
				usDelay(2); // 2.8 us
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f000 f8f6 	bl	800118c <usDelay>
			while(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == GPIO_PIN_SET)
 8000fa0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fa4:	482f      	ldr	r0, [pc, #188]	@ (8001064 <HAL_UART_RxCpltCallback+0x13c>)
 8000fa6:	f000 ffd7 	bl	8001f58 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d0ef      	beq.n	8000f90 <HAL_UART_RxCpltCallback+0x68>
			};

			distance = (numTicks +0.0f)*4.2*speedOfSound;
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <HAL_UART_RxCpltCallback+0x140>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe6d 	bl	8000c94 <__aeabi_ui2f>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fa33 	bl	8000428 <__aeabi_f2d>
 8000fc2:	a323      	add	r3, pc, #140	@ (adr r3, 8001050 <HAL_UART_RxCpltCallback+0x128>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff fa86 	bl	80004d8 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4614      	mov	r4, r2
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	4b25      	ldr	r3, [pc, #148]	@ (800106c <HAL_UART_RxCpltCallback+0x144>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa26 	bl	8000428 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	f7ff fa78 	bl	80004d8 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd4a 	bl	8000a88 <__aeabi_d2f>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <HAL_UART_RxCpltCallback+0x148>)
 8000ff8:	6013      	str	r3, [r2, #0]
			if(distance < 5){
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <HAL_UART_RxCpltCallback+0x148>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	491d      	ldr	r1, [pc, #116]	@ (8001074 <HAL_UART_RxCpltCallback+0x14c>)
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff feed 	bl	8000de0 <__aeabi_fcmplt>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_UART_RxCpltCallback+0xec>
				isCar =1;
 800100c:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <HAL_UART_RxCpltCallback+0x150>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e002      	b.n	800101a <HAL_UART_RxCpltCallback+0xf2>
			}else{
				isCar =0;
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_UART_RxCpltCallback+0x150>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
			}
		   txBuffer[0] = myID;
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_UART_RxCpltCallback+0x138>)
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_UART_RxCpltCallback+0x154>)
 8001020:	701a      	strb	r2, [r3, #0]
		   txBuffer[1] = isCar;
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_UART_RxCpltCallback+0x150>)
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <HAL_UART_RxCpltCallback+0x154>)
 8001028:	705a      	strb	r2, [r3, #1]

		   HAL_UART_Transmit(&huart1, txBuffer, 5, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2205      	movs	r2, #5
 8001030:	4912      	ldr	r1, [pc, #72]	@ (800107c <HAL_UART_RxCpltCallback+0x154>)
 8001032:	4813      	ldr	r0, [pc, #76]	@ (8001080 <HAL_UART_RxCpltCallback+0x158>)
 8001034:	f002 f9c0 	bl	80033b8 <HAL_UART_Transmit>
        }

		//HAL_UART_Transmit(&huart1, txBuffer, 5, HAL_MAX_DELAY);
    }
    // Tiếp tục nhận
    HAL_UART_Receive_IT(&huart1, rxBuffer, 5);
 8001038:	2205      	movs	r2, #5
 800103a:	4908      	ldr	r1, [pc, #32]	@ (800105c <HAL_UART_RxCpltCallback+0x134>)
 800103c:	4810      	ldr	r0, [pc, #64]	@ (8001080 <HAL_UART_RxCpltCallback+0x158>)
 800103e:	f002 fa46 	bl	80034ce <HAL_UART_Receive_IT>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	cccccccd 	.word	0xcccccccd
 8001054:	4010cccc 	.word	0x4010cccc
 8001058:	40013800 	.word	0x40013800
 800105c:	20000204 	.word	0x20000204
 8001060:	20000000 	.word	0x20000000
 8001064:	40011000 	.word	0x40011000
 8001068:	2000020c 	.word	0x2000020c
 800106c:	3c8c7e28 	.word	0x3c8c7e28
 8001070:	200001f4 	.word	0x200001f4
 8001074:	40a00000 	.word	0x40a00000
 8001078:	200001f8 	.word	0x200001f8
 800107c:	200001fc 	.word	0x200001fc
 8001080:	200002a4 	.word	0x200002a4

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f000 fb9c 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f838 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f7ff fece 	bl	8000e30 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001094:	f000 fa40 	bl	8001518 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001098:	f000 faf0 	bl	800167c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800109c:	f000 f9e6 	bl	800146c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rxBuffer, 5);
 80010a0:	2205      	movs	r2, #5
 80010a2:	4913      	ldr	r1, [pc, #76]	@ (80010f0 <main+0x6c>)
 80010a4:	4813      	ldr	r0, [pc, #76]	@ (80010f4 <main+0x70>)
 80010a6:	f002 fa12 	bl	80034ce <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isCar ==1){
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <main+0x74>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10c      	bne.n	80010cc <main+0x48>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010b8:	4810      	ldr	r0, [pc, #64]	@ (80010fc <main+0x78>)
 80010ba:	f000 ff64 	bl	8001f86 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <main+0x78>)
 80010c6:	f000 ff5e 	bl	8001f86 <HAL_GPIO_WritePin>
 80010ca:	e00b      	b.n	80010e4 <main+0x60>
	  	} else
	  	{
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010d2:	480a      	ldr	r0, [pc, #40]	@ (80010fc <main+0x78>)
 80010d4:	f000 ff57 	bl	8001f86 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <main+0x78>)
 80010e0:	f000 ff51 	bl	8001f86 <HAL_GPIO_WritePin>
	  	}

		HAL_Delay(2000);
 80010e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010e8:	f000 fbce 	bl	8001888 <HAL_Delay>
	  if(isCar ==1){
 80010ec:	e7dd      	b.n	80010aa <main+0x26>
 80010ee:	bf00      	nop
 80010f0:	20000204 	.word	0x20000204
 80010f4:	200002a4 	.word	0x200002a4
 80010f8:	200001f8 	.word	0x200001f8
 80010fc:	40010c00 	.word	0x40010c00

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b090      	sub	sp, #64	@ 0x40
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	2228      	movs	r2, #40	@ 0x28
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fccd 	bl	8004aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001122:	2301      	movs	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001126:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800112a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800113c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800113e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f000 ff35 	bl	8001fb8 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001154:	f000 f84a 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f9a2 	bl	80024bc <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800117e:	f000 f835 	bl	80011ec <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3740      	adds	r7, #64	@ 0x40
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if(uSec <2 )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d801      	bhi.n	800119e <usDelay+0x12>
		uSec = 2;
 800119a:	2302      	movs	r3, #2
 800119c:	607b      	str	r3, [r7, #4]
	TIM3->ARR = uSec -1; // Auto-Reload Register, set Value to reset timer
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <usDelay+0x5c>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM3->EGR = 1; // Event Generation Register, nap lap tuc ARR vao bo dem
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <usDelay+0x5c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~1; // Status Register, clear flag
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <usDelay+0x5c>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <usDelay+0x5c>)
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1; // Control Register, Turn on timer 3
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <usDelay+0x5c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <usDelay+0x5c>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 80011c4:	bf00      	nop
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <usDelay+0x5c>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d1f9      	bne.n	80011c6 <usDelay+0x3a>
	TIM3->SR &= ~(0x0001); // Delete Status flag
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <usDelay+0x5c>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <usDelay+0x5c>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6113      	str	r3, [r2, #16]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40000400 	.word	0x40000400

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <Error_Handler+0x8>

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_MspInit+0x5c>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <HAL_MspInit+0x5c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_MspInit+0x5c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_MspInit+0x5c>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_MspInit+0x5c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_MspInit+0x5c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_MspInit+0x60>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_MspInit+0x60>)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 fad0 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <TIM1_CC_IRQHandler+0x10>)
 80012ba:	f001 fb2b 	bl	8002914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000214 	.word	0x20000214

080012c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <USART1_IRQHandler+0x10>)
 80012ce:	f002 f923 	bl	8003518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200002a4 	.word	0x200002a4

080012dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <_kill>:

int _kill(int pid, int sig)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012f4:	f003 fc2e 	bl	8004b54 <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2216      	movs	r2, #22
 80012fc:	601a      	str	r2, [r3, #0]
  return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_exit>:

void _exit (int status)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001312:	f04f 31ff 	mov.w	r1, #4294967295
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffe7 	bl	80012ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <_exit+0x12>

08001320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00a      	b.n	8001348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001332:	f3af 8000 	nop.w
 8001336:	4601      	mov	r1, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60ba      	str	r2, [r7, #8]
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf0      	blt.n	8001332 <_read+0x12>
  }

  return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e009      	b.n	8001380 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <_write+0x12>
  }
  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_close>:

int _close(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b8:	605a      	str	r2, [r3, #4]
  return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <_isatty>:

int _isatty(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
	...

080013f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013fc:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <_sbrk+0x5c>)
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <_sbrk+0x60>)
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <_sbrk+0x64>)
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <_sbrk+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001424:	f003 fb96 	bl	8004b54 <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	220c      	movs	r2, #12
 800142c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	e009      	b.n	8001448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <_sbrk+0x64>)
 8001444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20005000 	.word	0x20005000
 8001454:	00000400 	.word	0x00000400
 8001458:	20000210 	.word	0x20000210
 800145c:	20000440 	.word	0x20000440

08001460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001488:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_TIM1_Init+0xa4>)
 800148a:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <MX_TIM1_Init+0xa8>)
 800148c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <MX_TIM1_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_TIM1_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <MX_TIM1_Init+0xa4>)
 800149c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <MX_TIM1_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_TIM1_Init+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <MX_TIM1_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80014b4:	4816      	ldr	r0, [pc, #88]	@ (8001510 <MX_TIM1_Init+0xa4>)
 80014b6:	f001 f9de 	bl	8002876 <HAL_TIM_IC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014c0:	f7ff fe94 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	480f      	ldr	r0, [pc, #60]	@ (8001510 <MX_TIM1_Init+0xa4>)
 80014d4:	f001 feb0 	bl	8003238 <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014de:	f7ff fe85 	bl	80011ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_TIM1_Init+0xa4>)
 80014fa:	f001 fafb 	bl	8002af4 <HAL_TIM_IC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001504:	f7ff fe72 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000214 	.word	0x20000214
 8001514:	40012c00 	.word	0x40012c00

08001518 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_TIM3_Init+0x90>)
 8001536:	4a1d      	ldr	r2, [pc, #116]	@ (80015ac <MX_TIM3_Init+0x94>)
 8001538:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <MX_TIM3_Init+0x90>)
 800153c:	2247      	movs	r2, #71	@ 0x47
 800153e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <MX_TIM3_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <MX_TIM3_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_TIM3_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <MX_TIM3_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001558:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <MX_TIM3_Init+0x90>)
 800155a:	f001 f93d 	bl	80027d8 <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001564:	f7ff fe42 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <MX_TIM3_Init+0x90>)
 8001576:	f001 fb59 	bl	8002c2c <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001580:	f7ff fe34 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_TIM3_Init+0x90>)
 8001592:	f001 fe51 	bl	8003238 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800159c:	f7ff fe26 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000025c 	.word	0x2000025c
 80015ac:	40000400 	.word	0x40000400

080015b0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001634 <HAL_TIM_IC_MspInit+0x84>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d12c      	bne.n	800162a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_TIM_IC_MspInit+0x88>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <HAL_TIM_IC_MspInit+0x88>)
 80015d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <HAL_TIM_IC_MspInit+0x88>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_TIM_IC_MspInit+0x88>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <HAL_TIM_IC_MspInit+0x88>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <HAL_TIM_IC_MspInit+0x88>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4619      	mov	r1, r3
 8001614:	4809      	ldr	r0, [pc, #36]	@ (800163c <HAL_TIM_IC_MspInit+0x8c>)
 8001616:	f000 fb1b 	bl	8001c50 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201b      	movs	r0, #27
 8001620:	f000 fa2d 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001624:	201b      	movs	r0, #27
 8001626:	f000 fa46 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40012c00 	.word	0x40012c00
 8001638:	40021000 	.word	0x40021000
 800163c:	40010800 	.word	0x40010800

08001640 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <HAL_TIM_Base_MspInit+0x34>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10b      	bne.n	800166a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_TIM_Base_MspInit+0x38>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a08      	ldr	r2, [pc, #32]	@ (8001678 <HAL_TIM_Base_MspInit+0x38>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_TIM_Base_MspInit+0x38>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40000400 	.word	0x40000400
 8001678:	40021000 	.word	0x40021000

0800167c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001682:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <MX_USART1_UART_Init+0x50>)
 8001684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001688:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800168c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f001 fe30 	bl	8003318 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016be:	f7ff fd95 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002a4 	.word	0x200002a4
 80016cc:	40013800 	.word	0x40013800

080016d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a20      	ldr	r2, [pc, #128]	@ (800176c <HAL_UART_MspInit+0x9c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d139      	bne.n	8001764 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <HAL_UART_MspInit+0xa0>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <HAL_UART_MspInit+0xa0>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <HAL_UART_MspInit+0xa0>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_UART_MspInit+0xa0>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a18      	ldr	r2, [pc, #96]	@ (8001770 <HAL_UART_MspInit+0xa0>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_UART_MspInit+0xa0>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	4619      	mov	r1, r3
 8001734:	480f      	ldr	r0, [pc, #60]	@ (8001774 <HAL_UART_MspInit+0xa4>)
 8001736:	f000 fa8b 	bl	8001c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800173a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800173e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	4809      	ldr	r0, [pc, #36]	@ (8001774 <HAL_UART_MspInit+0xa4>)
 8001750:	f000 fa7e 	bl	8001c50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	2025      	movs	r0, #37	@ 0x25
 800175a:	f000 f990 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800175e:	2025      	movs	r0, #37	@ 0x25
 8001760:	f000 f9a9 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013800 	.word	0x40013800
 8001770:	40021000 	.word	0x40021000
 8001774:	40010800 	.word	0x40010800

08001778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001778:	f7ff fe72 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800177c:	480b      	ldr	r0, [pc, #44]	@ (80017ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800177e:	490c      	ldr	r1, [pc, #48]	@ (80017b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001780:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001794:	4c09      	ldr	r4, [pc, #36]	@ (80017bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a2:	f003 f9dd 	bl	8004b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a6:	f7ff fc6d 	bl	8001084 <main>
  bx lr
 80017aa:	4770      	bx	lr
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017b4:	08006cc8 	.word	0x08006cc8
  ldr r2, =_sbss
 80017b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017bc:	2000043c 	.word	0x2000043c

080017c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_2_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <HAL_Init+0x28>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	@ (80017ec <HAL_Init+0x28>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f947 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017da:	200f      	movs	r0, #15
 80017dc:	f000 f808 	bl	80017f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e0:	f7ff fd0a 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_InitTick+0x54>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_InitTick+0x58>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001806:	fbb3 f3f1 	udiv	r3, r3, r1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f95f 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e00e      	b.n	800183c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d80a      	bhi.n	800183a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f000 f927 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001830:	4a06      	ldr	r2, [pc, #24]	@ (800184c <HAL_InitTick+0x5c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000004 	.word	0x20000004
 8001848:	2000000c 	.word	0x2000000c
 800184c:	20000008 	.word	0x20000008

08001850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_IncTick+0x1c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <HAL_IncTick+0x20>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a03      	ldr	r2, [pc, #12]	@ (8001870 <HAL_IncTick+0x20>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	2000000c 	.word	0x2000000c
 8001870:	200002ec 	.word	0x200002ec

08001874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b02      	ldr	r3, [pc, #8]	@ (8001884 <HAL_GetTick+0x10>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	200002ec 	.word	0x200002ec

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff fff0 	bl	8001874 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <HAL_Delay+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffe0 	bl	8001874 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000000c 	.word	0x2000000c

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4906      	ldr	r1, [pc, #24]	@ (8001968 <__NVIC_EnableIRQ+0x34>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	@ (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff90 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff2d 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff42 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff35 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d008      	beq.n	8001b14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2204      	movs	r2, #4
 8001b06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e020      	b.n	8001b56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 020e 	bic.w	r2, r2, #14
 8001b22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d005      	beq.n	8001b84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e051      	b.n	8001c28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 020e 	bic.w	r2, r2, #14
 8001b92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	@ (8001c34 <HAL_DMA_Abort_IT+0xd4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d029      	beq.n	8001c02 <HAL_DMA_Abort_IT+0xa2>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a21      	ldr	r2, [pc, #132]	@ (8001c38 <HAL_DMA_Abort_IT+0xd8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d022      	beq.n	8001bfe <HAL_DMA_Abort_IT+0x9e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c3c <HAL_DMA_Abort_IT+0xdc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01a      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x98>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c40 <HAL_DMA_Abort_IT+0xe0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d012      	beq.n	8001bf2 <HAL_DMA_Abort_IT+0x92>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c44 <HAL_DMA_Abort_IT+0xe4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00a      	beq.n	8001bec <HAL_DMA_Abort_IT+0x8c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1b      	ldr	r2, [pc, #108]	@ (8001c48 <HAL_DMA_Abort_IT+0xe8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <HAL_DMA_Abort_IT+0x86>
 8001be0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001be4:	e00e      	b.n	8001c04 <HAL_DMA_Abort_IT+0xa4>
 8001be6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bea:	e00b      	b.n	8001c04 <HAL_DMA_Abort_IT+0xa4>
 8001bec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf0:	e008      	b.n	8001c04 <HAL_DMA_Abort_IT+0xa4>
 8001bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf6:	e005      	b.n	8001c04 <HAL_DMA_Abort_IT+0xa4>
 8001bf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bfc:	e002      	b.n	8001c04 <HAL_DMA_Abort_IT+0xa4>
 8001bfe:	2310      	movs	r3, #16
 8001c00:	e000      	b.n	8001c04 <HAL_DMA_Abort_IT+0xa4>
 8001c02:	2301      	movs	r3, #1
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_DMA_Abort_IT+0xec>)
 8001c06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
    } 
  }
  return status;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020008 	.word	0x40020008
 8001c38:	4002001c 	.word	0x4002001c
 8001c3c:	40020030 	.word	0x40020030
 8001c40:	40020044 	.word	0x40020044
 8001c44:	40020058 	.word	0x40020058
 8001c48:	4002006c 	.word	0x4002006c
 8001c4c:	40020000 	.word	0x40020000

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b08b      	sub	sp, #44	@ 0x2c
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c62:	e169      	b.n	8001f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c64:	2201      	movs	r2, #1
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8158 	bne.w	8001f32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a9a      	ldr	r2, [pc, #616]	@ (8001ef0 <HAL_GPIO_Init+0x2a0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d05e      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001c8c:	4a98      	ldr	r2, [pc, #608]	@ (8001ef0 <HAL_GPIO_Init+0x2a0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d875      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001c92:	4a98      	ldr	r2, [pc, #608]	@ (8001ef4 <HAL_GPIO_Init+0x2a4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d058      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001c98:	4a96      	ldr	r2, [pc, #600]	@ (8001ef4 <HAL_GPIO_Init+0x2a4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d86f      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001c9e:	4a96      	ldr	r2, [pc, #600]	@ (8001ef8 <HAL_GPIO_Init+0x2a8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d052      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001ca4:	4a94      	ldr	r2, [pc, #592]	@ (8001ef8 <HAL_GPIO_Init+0x2a8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d869      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001caa:	4a94      	ldr	r2, [pc, #592]	@ (8001efc <HAL_GPIO_Init+0x2ac>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d04c      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001cb0:	4a92      	ldr	r2, [pc, #584]	@ (8001efc <HAL_GPIO_Init+0x2ac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d863      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cb6:	4a92      	ldr	r2, [pc, #584]	@ (8001f00 <HAL_GPIO_Init+0x2b0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d046      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001cbc:	4a90      	ldr	r2, [pc, #576]	@ (8001f00 <HAL_GPIO_Init+0x2b0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d85d      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d82a      	bhi.n	8001d1c <HAL_GPIO_Init+0xcc>
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d859      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cca:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd0 <HAL_GPIO_Init+0x80>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001d4b 	.word	0x08001d4b
 8001cd4:	08001d25 	.word	0x08001d25
 8001cd8:	08001d37 	.word	0x08001d37
 8001cdc:	08001d79 	.word	0x08001d79
 8001ce0:	08001d7f 	.word	0x08001d7f
 8001ce4:	08001d7f 	.word	0x08001d7f
 8001ce8:	08001d7f 	.word	0x08001d7f
 8001cec:	08001d7f 	.word	0x08001d7f
 8001cf0:	08001d7f 	.word	0x08001d7f
 8001cf4:	08001d7f 	.word	0x08001d7f
 8001cf8:	08001d7f 	.word	0x08001d7f
 8001cfc:	08001d7f 	.word	0x08001d7f
 8001d00:	08001d7f 	.word	0x08001d7f
 8001d04:	08001d7f 	.word	0x08001d7f
 8001d08:	08001d7f 	.word	0x08001d7f
 8001d0c:	08001d7f 	.word	0x08001d7f
 8001d10:	08001d7f 	.word	0x08001d7f
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001d41 	.word	0x08001d41
 8001d1c:	4a79      	ldr	r2, [pc, #484]	@ (8001f04 <HAL_GPIO_Init+0x2b4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d22:	e02c      	b.n	8001d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	623b      	str	r3, [r7, #32]
          break;
 8001d2a:	e029      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	3304      	adds	r3, #4
 8001d32:	623b      	str	r3, [r7, #32]
          break;
 8001d34:	e024      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	3308      	adds	r3, #8
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e01f      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	330c      	adds	r3, #12
 8001d46:	623b      	str	r3, [r7, #32]
          break;
 8001d48:	e01a      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d52:	2304      	movs	r3, #4
 8001d54:	623b      	str	r3, [r7, #32]
          break;
 8001d56:	e013      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d60:	2308      	movs	r3, #8
 8001d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	611a      	str	r2, [r3, #16]
          break;
 8001d6a:	e009      	b.n	8001d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	615a      	str	r2, [r3, #20]
          break;
 8001d76:	e003      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          break;
 8001d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2bff      	cmp	r3, #255	@ 0xff
 8001d84:	d801      	bhi.n	8001d8a <HAL_GPIO_Init+0x13a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_Init+0x13e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	@ 0xff
 8001d94:	d802      	bhi.n	8001d9c <HAL_GPIO_Init+0x14c>
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x152>
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	3b08      	subs	r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	210f      	movs	r1, #15
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80b1 	beq.w	8001f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001f08 <HAL_GPIO_Init+0x2b8>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f08 <HAL_GPIO_Init+0x2b8>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <HAL_GPIO_Init+0x2b8>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de8:	4a48      	ldr	r2, [pc, #288]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a40      	ldr	r2, [pc, #256]	@ (8001f10 <HAL_GPIO_Init+0x2c0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_GPIO_Init+0x1ec>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3f      	ldr	r2, [pc, #252]	@ (8001f14 <HAL_GPIO_Init+0x2c4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00d      	beq.n	8001e38 <HAL_GPIO_Init+0x1e8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f18 <HAL_GPIO_Init+0x2c8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d007      	beq.n	8001e34 <HAL_GPIO_Init+0x1e4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3d      	ldr	r2, [pc, #244]	@ (8001f1c <HAL_GPIO_Init+0x2cc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_GPIO_Init+0x1e0>
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e006      	b.n	8001e3e <HAL_GPIO_Init+0x1ee>
 8001e30:	2304      	movs	r3, #4
 8001e32:	e004      	b.n	8001e3e <HAL_GPIO_Init+0x1ee>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e002      	b.n	8001e3e <HAL_GPIO_Init+0x1ee>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_GPIO_Init+0x1ee>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e40:	f002 0203 	and.w	r2, r2, #3
 8001e44:	0092      	lsls	r2, r2, #2
 8001e46:	4093      	lsls	r3, r2
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e4e:	492f      	ldr	r1, [pc, #188]	@ (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	492c      	ldr	r1, [pc, #176]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e76:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4928      	ldr	r1, [pc, #160]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4922      	ldr	r1, [pc, #136]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	491e      	ldr	r1, [pc, #120]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4918      	ldr	r1, [pc, #96]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4914      	ldr	r1, [pc, #80]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d021      	beq.n	8001f24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	490e      	ldr	r1, [pc, #56]	@ (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e021      	b.n	8001f32 <HAL_GPIO_Init+0x2e2>
 8001eee:	bf00      	nop
 8001ef0:	10320000 	.word	0x10320000
 8001ef4:	10310000 	.word	0x10310000
 8001ef8:	10220000 	.word	0x10220000
 8001efc:	10210000 	.word	0x10210000
 8001f00:	10120000 	.word	0x10120000
 8001f04:	10110000 	.word	0x10110000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40010800 	.word	0x40010800
 8001f14:	40010c00 	.word	0x40010c00
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	40011400 	.word	0x40011400
 8001f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4909      	ldr	r1, [pc, #36]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	3301      	adds	r3, #1
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f47f ae8e 	bne.w	8001c64 <HAL_GPIO_Init+0x14>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	372c      	adds	r7, #44	@ 0x2c
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40010400 	.word	0x40010400

08001f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
 8001f92:	4613      	mov	r3, r2
 8001f94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f96:	787b      	ldrb	r3, [r7, #1]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9c:	887a      	ldrh	r2, [r7, #2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e272      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8087 	beq.w	80020e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd8:	4b92      	ldr	r3, [pc, #584]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d00c      	beq.n	8001ffe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d112      	bne.n	8002016 <HAL_RCC_OscConfig+0x5e>
 8001ff0:	4b8c      	ldr	r3, [pc, #560]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ffc:	d10b      	bne.n	8002016 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffe:	4b89      	ldr	r3, [pc, #548]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d06c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x12c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d168      	bne.n	80020e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e24c      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x76>
 8002020:	4b80      	ldr	r3, [pc, #512]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a7f      	ldr	r2, [pc, #508]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e02e      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x98>
 8002036:	4b7b      	ldr	r3, [pc, #492]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a7a      	ldr	r2, [pc, #488]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b78      	ldr	r3, [pc, #480]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a77      	ldr	r2, [pc, #476]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e01d      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0xbc>
 800205a:	4b72      	ldr	r3, [pc, #456]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a71      	ldr	r2, [pc, #452]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b6f      	ldr	r3, [pc, #444]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6e      	ldr	r2, [pc, #440]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 8002074:	4b6b      	ldr	r3, [pc, #428]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6a      	ldr	r2, [pc, #424]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b68      	ldr	r3, [pc, #416]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a67      	ldr	r2, [pc, #412]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800208a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff fbee 	bl	8001874 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff fbea 	bl	8001874 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	@ 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e200      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0xe4>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fbda 	bl	8001874 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fbd6 	bl	8001874 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	@ 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1ec      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	4b53      	ldr	r3, [pc, #332]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x10c>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d063      	beq.n	80021ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020fe:	4b49      	ldr	r3, [pc, #292]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b08      	cmp	r3, #8
 8002108:	d11c      	bne.n	8002144 <HAL_RCC_OscConfig+0x18c>
 800210a:	4b46      	ldr	r3, [pc, #280]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	4b43      	ldr	r3, [pc, #268]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x176>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e1c0      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4939      	ldr	r1, [pc, #228]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	e03a      	b.n	80021ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214c:	4b36      	ldr	r3, [pc, #216]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff fb8f 	bl	8001874 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff fb8b 	bl	8001874 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1a1      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	4b2d      	ldr	r3, [pc, #180]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b2a      	ldr	r3, [pc, #168]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4927      	ldr	r1, [pc, #156]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fb6e 	bl	8001874 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff fb6a 	bl	8001874 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e180      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d03a      	beq.n	800223c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d019      	beq.n	8002202 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <HAL_RCC_OscConfig+0x274>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff fb4e 	bl	8001874 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff fb4a 	bl	8001874 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e160      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f000 face 	bl	800279c <RCC_Delay>
 8002200:	e01c      	b.n	800223c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_RCC_OscConfig+0x274>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7ff fb34 	bl	8001874 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220e:	e00f      	b.n	8002230 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002210:	f7ff fb30 	bl	8001874 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d908      	bls.n	8002230 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e146      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	42420000 	.word	0x42420000
 800222c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b92      	ldr	r3, [pc, #584]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e9      	bne.n	8002210 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a6 	beq.w	8002396 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b8b      	ldr	r3, [pc, #556]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b88      	ldr	r3, [pc, #544]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a87      	ldr	r2, [pc, #540]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002264:	61d3      	str	r3, [r2, #28]
 8002266:	4b85      	ldr	r3, [pc, #532]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b82      	ldr	r3, [pc, #520]	@ (8002480 <HAL_RCC_OscConfig+0x4c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <HAL_RCC_OscConfig+0x4c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7e      	ldr	r2, [pc, #504]	@ (8002480 <HAL_RCC_OscConfig+0x4c8>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7ff faf1 	bl	8001874 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7ff faed 	bl	8001874 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	@ 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e103      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b75      	ldr	r3, [pc, #468]	@ (8002480 <HAL_RCC_OscConfig+0x4c8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x312>
 80022bc:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a6e      	ldr	r2, [pc, #440]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e02d      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x334>
 80022d2:	4b6a      	ldr	r3, [pc, #424]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a69      	ldr	r2, [pc, #420]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	4b67      	ldr	r3, [pc, #412]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a66      	ldr	r2, [pc, #408]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	e01c      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x356>
 80022f4:	4b61      	ldr	r3, [pc, #388]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a60      	ldr	r2, [pc, #384]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	4b5e      	ldr	r3, [pc, #376]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a5d      	ldr	r2, [pc, #372]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 800230e:	4b5b      	ldr	r3, [pc, #364]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a5a      	ldr	r2, [pc, #360]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	4b58      	ldr	r3, [pc, #352]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a57      	ldr	r2, [pc, #348]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d015      	beq.n	800235a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7ff faa1 	bl	8001874 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7ff fa9d 	bl	8001874 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0b1      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	4b4b      	ldr	r3, [pc, #300]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ee      	beq.n	8002336 <HAL_RCC_OscConfig+0x37e>
 8002358:	e014      	b.n	8002384 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7ff fa8b 	bl	8001874 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff fa87 	bl	8001874 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e09b      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	4b40      	ldr	r3, [pc, #256]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ee      	bne.n	8002362 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a3b      	ldr	r2, [pc, #236]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8087 	beq.w	80024ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a0:	4b36      	ldr	r3, [pc, #216]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d061      	beq.n	8002470 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d146      	bne.n	8002442 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b33      	ldr	r3, [pc, #204]	@ (8002484 <HAL_RCC_OscConfig+0x4cc>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fa5b 	bl	8001874 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff fa57 	bl	8001874 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e06d      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e8:	d108      	bne.n	80023fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ea:	4b24      	ldr	r3, [pc, #144]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4921      	ldr	r1, [pc, #132]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fc:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a19      	ldr	r1, [r3, #32]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	430b      	orrs	r3, r1
 800240e:	491b      	ldr	r1, [pc, #108]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_RCC_OscConfig+0x4cc>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7ff fa2b 	bl	8001874 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7ff fa27 	bl	8001874 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e03d      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x46a>
 8002440:	e035      	b.n	80024ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <HAL_RCC_OscConfig+0x4cc>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fa14 	bl	8001874 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7ff fa10 	bl	8001874 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e026      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_RCC_OscConfig+0x4c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x498>
 800246e:	e01e      	b.n	80024ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d107      	bne.n	8002488 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e019      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000
 8002484:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_OscConfig+0x500>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	429a      	cmp	r2, r3
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0d0      	b.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b6a      	ldr	r3, [pc, #424]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d910      	bls.n	8002500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b67      	ldr	r3, [pc, #412]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 0207 	bic.w	r2, r3, #7
 80024e6:	4965      	ldr	r1, [pc, #404]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4a58      	ldr	r2, [pc, #352]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002522:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a52      	ldr	r2, [pc, #328]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800253a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d040      	beq.n	80025dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d115      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b41      	ldr	r3, [pc, #260]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e073      	b.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b3d      	ldr	r3, [pc, #244]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e06b      	b.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259a:	4b39      	ldr	r3, [pc, #228]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f023 0203 	bic.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4936      	ldr	r1, [pc, #216]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ac:	f7ff f962 	bl	8001874 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7ff f95e 	bl	8001874 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e053      	b.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 020c 	and.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1eb      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b27      	ldr	r3, [pc, #156]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d210      	bcs.n	800260c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b24      	ldr	r3, [pc, #144]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 0207 	bic.w	r2, r3, #7
 80025f2:	4922      	ldr	r1, [pc, #136]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	@ (8002684 <HAL_RCC_ClockConfig+0x1c8>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	@ (8002688 <HAL_RCC_ClockConfig+0x1cc>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <HAL_RCC_ClockConfig+0x1d0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff f8c0 	bl	80017f0 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40022000 	.word	0x40022000
 8002680:	40021000 	.word	0x40021000
 8002684:	08006920 	.word	0x08006920
 8002688:	20000004 	.word	0x20000004
 800268c:	20000008 	.word	0x20000008

08002690 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x94>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d002      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x30>
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x36>
 80026be:	e027      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c0:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x98>)
 80026c2:	613b      	str	r3, [r7, #16]
      break;
 80026c4:	e027      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	0c9b      	lsrs	r3, r3, #18
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	4a17      	ldr	r2, [pc, #92]	@ (800272c <HAL_RCC_GetSysClockFreq+0x9c>)
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
 80026d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x94>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0c5b      	lsrs	r3, r3, #17
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x98>)
 80026f2:	fb03 f202 	mul.w	r2, r3, r2
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e004      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0c      	ldr	r2, [pc, #48]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	613b      	str	r3, [r7, #16]
      break;
 800270e:	e002      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x98>)
 8002712:	613b      	str	r3, [r7, #16]
      break;
 8002714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002716:	693b      	ldr	r3, [r7, #16]
}
 8002718:	4618      	mov	r0, r3
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	007a1200 	.word	0x007a1200
 800272c:	08006938 	.word	0x08006938
 8002730:	08006948 	.word	0x08006948
 8002734:	003d0900 	.word	0x003d0900

08002738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800273c:	4b02      	ldr	r3, [pc, #8]	@ (8002748 <HAL_RCC_GetHCLKFreq+0x10>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002750:	f7ff fff2 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4903      	ldr	r1, [pc, #12]	@ (8002770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	08006930 	.word	0x08006930

08002774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002778:	f7ff ffde 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	0adb      	lsrs	r3, r3, #11
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4903      	ldr	r1, [pc, #12]	@ (8002798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	08006930 	.word	0x08006930

0800279c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a4:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <RCC_Delay+0x34>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <RCC_Delay+0x38>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0a5b      	lsrs	r3, r3, #9
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027b8:	bf00      	nop
  }
  while (Delay --);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	60fa      	str	r2, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f9      	bne.n	80027b8 <RCC_Delay+0x1c>
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	20000004 	.word	0x20000004
 80027d4:	10624dd3 	.word	0x10624dd3

080027d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e041      	b.n	800286e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe ff1e 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f000 fafc 	bl	8002e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e041      	b.n	800290c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d106      	bne.n	80028a2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7fe fe87 	bl	80015b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f000 faad 	bl	8002e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d020      	beq.n	8002978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0202 	mvn.w	r2, #2
 8002948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa3d 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa30 	bl	8002dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fa3f 	bl	8002df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d020      	beq.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0204 	mvn.w	r2, #4
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa17 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa0a 	bl	8002dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fa19 	bl	8002df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d020      	beq.n	8002a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0208 	mvn.w	r2, #8
 80029e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2204      	movs	r2, #4
 80029e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9f1 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f9e4 	bl	8002dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9f3 	bl	8002df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d020      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0210 	mvn.w	r2, #16
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2208      	movs	r2, #8
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9cb 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f9be 	bl	8002dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f9cd 	bl	8002df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00c      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0201 	mvn.w	r2, #1
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f99d 	bl	8002dba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fc31 	bl	8003306 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f99d 	bl	8002e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0220 	mvn.w	r2, #32
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fc04 	bl	80032f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e088      	b.n	8002c24 <HAL_TIM_IC_ConfigChannel+0x130>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002b30:	f000 f9de 	bl	8002ef0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 020c 	bic.w	r2, r2, #12
 8002b42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6999      	ldr	r1, [r3, #24]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	619a      	str	r2, [r3, #24]
 8002b56:	e060      	b.n	8002c1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d11c      	bne.n	8002b98 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002b6e:	f000 fa47 	bl	8003000 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6999      	ldr	r1, [r3, #24]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	021a      	lsls	r2, r3, #8
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	619a      	str	r2, [r3, #24]
 8002b96:	e040      	b.n	8002c1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d11b      	bne.n	8002bd6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002bae:	f000 fa92 	bl	80030d6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 020c 	bic.w	r2, r2, #12
 8002bc0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	61da      	str	r2, [r3, #28]
 8002bd4:	e021      	b.n	8002c1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	d11c      	bne.n	8002c16 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002bec:	f000 faae 	bl	800314c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002bfe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69d9      	ldr	r1, [r3, #28]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	021a      	lsls	r2, r3, #8
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
 8002c14:	e001      	b.n	8002c1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_TIM_ConfigClockSource+0x1c>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e0b4      	b.n	8002db2 <HAL_TIM_ConfigClockSource+0x186>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c80:	d03e      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0xd4>
 8002c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c86:	f200 8087 	bhi.w	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8e:	f000 8086 	beq.w	8002d9e <HAL_TIM_ConfigClockSource+0x172>
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c96:	d87f      	bhi.n	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b70      	cmp	r3, #112	@ 0x70
 8002c9a:	d01a      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0xa6>
 8002c9c:	2b70      	cmp	r3, #112	@ 0x70
 8002c9e:	d87b      	bhi.n	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b60      	cmp	r3, #96	@ 0x60
 8002ca2:	d050      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x11a>
 8002ca4:	2b60      	cmp	r3, #96	@ 0x60
 8002ca6:	d877      	bhi.n	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b50      	cmp	r3, #80	@ 0x50
 8002caa:	d03c      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0xfa>
 8002cac:	2b50      	cmp	r3, #80	@ 0x50
 8002cae:	d873      	bhi.n	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b40      	cmp	r3, #64	@ 0x40
 8002cb2:	d058      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x13a>
 8002cb4:	2b40      	cmp	r3, #64	@ 0x40
 8002cb6:	d86f      	bhi.n	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b30      	cmp	r3, #48	@ 0x30
 8002cba:	d064      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x15a>
 8002cbc:	2b30      	cmp	r3, #48	@ 0x30
 8002cbe:	d86b      	bhi.n	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d060      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d867      	bhi.n	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d05c      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x15a>
 8002ccc:	2b10      	cmp	r3, #16
 8002cce:	d05a      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd0:	e062      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ce2:	f000 fa89 	bl	80031f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	609a      	str	r2, [r3, #8]
      break;
 8002cfe:	e04f      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d10:	f000 fa72 	bl	80031f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d22:	609a      	str	r2, [r3, #8]
      break;
 8002d24:	e03c      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d32:	461a      	mov	r2, r3
 8002d34:	f000 f936 	bl	8002fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2150      	movs	r1, #80	@ 0x50
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fa40 	bl	80031c4 <TIM_ITRx_SetConfig>
      break;
 8002d44:	e02c      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d52:	461a      	mov	r2, r3
 8002d54:	f000 f990 	bl	8003078 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2160      	movs	r1, #96	@ 0x60
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa30 	bl	80031c4 <TIM_ITRx_SetConfig>
      break;
 8002d64:	e01c      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 f916 	bl	8002fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2140      	movs	r1, #64	@ 0x40
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fa20 	bl	80031c4 <TIM_ITRx_SetConfig>
      break;
 8002d84:	e00c      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	f000 fa17 	bl	80031c4 <TIM_ITRx_SetConfig>
      break;
 8002d96:	e003      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	e000      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee4 <TIM_Base_SetConfig+0xd0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00b      	beq.n	8002e44 <TIM_Base_SetConfig+0x30>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e32:	d007      	beq.n	8002e44 <TIM_Base_SetConfig+0x30>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee8 <TIM_Base_SetConfig+0xd4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <TIM_Base_SetConfig+0x30>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002eec <TIM_Base_SetConfig+0xd8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d108      	bne.n	8002e56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a22      	ldr	r2, [pc, #136]	@ (8002ee4 <TIM_Base_SetConfig+0xd0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <TIM_Base_SetConfig+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e64:	d007      	beq.n	8002e76 <TIM_Base_SetConfig+0x62>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee8 <TIM_Base_SetConfig+0xd4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_Base_SetConfig+0x62>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1e      	ldr	r2, [pc, #120]	@ (8002eec <TIM_Base_SetConfig+0xd8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d108      	bne.n	8002e88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee4 <TIM_Base_SetConfig+0xd0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d103      	bne.n	8002ebc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	611a      	str	r2, [r3, #16]
  }
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800

08002ef0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f023 0201 	bic.w	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	@ (8002f98 <TIM_TI1_SetConfig+0xa8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00b      	beq.n	8002f36 <TIM_TI1_SetConfig+0x46>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f24:	d007      	beq.n	8002f36 <TIM_TI1_SetConfig+0x46>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4a1c      	ldr	r2, [pc, #112]	@ (8002f9c <TIM_TI1_SetConfig+0xac>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <TIM_TI1_SetConfig+0x46>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a1b      	ldr	r2, [pc, #108]	@ (8002fa0 <TIM_TI1_SetConfig+0xb0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <TIM_TI1_SetConfig+0x4a>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <TIM_TI1_SetConfig+0x4c>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e003      	b.n	8002f5a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f023 030a 	bic.w	r3, r3, #10
 8002f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f003 030a 	and.w	r3, r3, #10
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	621a      	str	r2, [r3, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800

08002fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f023 0201 	bic.w	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f023 030a 	bic.w	r3, r3, #10
 8002fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	621a      	str	r2, [r3, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 0210 	bic.w	r2, r3, #16
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800302c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800303e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	031b      	lsls	r3, r3, #12
 8003044:	b29b      	uxth	r3, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003052:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	621a      	str	r2, [r3, #32]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0210 	bic.w	r2, r3, #16
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	031b      	lsls	r3, r3, #12
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	621a      	str	r2, [r3, #32]
}
 80030cc:	bf00      	nop
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b087      	sub	sp, #28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003112:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	b2db      	uxtb	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003126:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003178:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800318a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	031b      	lsls	r3, r3, #12
 8003190:	b29b      	uxth	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800319e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	031b      	lsls	r3, r3, #12
 80031a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f043 0307 	orr.w	r3, r3, #7
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	609a      	str	r2, [r3, #8]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	431a      	orrs	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4313      	orrs	r3, r2
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	bf00      	nop
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
	...

08003238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800324c:	2302      	movs	r3, #2
 800324e:	e046      	b.n	80032de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a16      	ldr	r2, [pc, #88]	@ (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800329c:	d009      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a12      	ldr	r2, [pc, #72]	@ (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a10      	ldr	r2, [pc, #64]	@ (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10c      	bne.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800

080032f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e042      	b.n	80033b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe f9c6 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	@ 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800335a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fdb7 	bl	8003ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	@ 0x28
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d175      	bne.n	80034c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_UART_Transmit+0x2c>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e06e      	b.n	80034c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2221      	movs	r2, #33	@ 0x21
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f6:	f7fe fa3d 	bl	8001874 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003410:	d108      	bne.n	8003424 <HAL_UART_Transmit+0x6c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d104      	bne.n	8003424 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e003      	b.n	800342c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800342c:	e02e      	b.n	800348c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	2180      	movs	r1, #128	@ 0x80
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fb1c 	bl	8003a76 <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e03a      	b.n	80034c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003464:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	3302      	adds	r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e007      	b.n	800347e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1cb      	bne.n	800342e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	2140      	movs	r1, #64	@ 0x40
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fae8 	bl	8003a76 <UART_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e006      	b.n	80034c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	4613      	mov	r3, r2
 80034da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d112      	bne.n	800350e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_UART_Receive_IT+0x26>
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e00b      	b.n	8003510 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	461a      	mov	r2, r3
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fb0f 	bl	8003b28 <UART_Start_Receive_IT>
 800350a:	4603      	mov	r3, r0
 800350c:	e000      	b.n	8003510 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b0ba      	sub	sp, #232	@ 0xe8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_UART_IRQHandler+0x66>
 800356a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fbec 	bl	8003d54 <UART_Receive_IT>
      return;
 800357c:	e25b      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800357e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80de 	beq.w	8003744 <HAL_UART_IRQHandler+0x22c>
 8003588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003598:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80d1 	beq.w	8003744 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_UART_IRQHandler+0xae>
 80035ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_UART_IRQHandler+0xd2>
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f043 0202 	orr.w	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_UART_IRQHandler+0xf6>
 80035f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f043 0204 	orr.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d011      	beq.n	800363e <HAL_UART_IRQHandler+0x126>
 800361a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d105      	bne.n	8003632 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f043 0208 	orr.w	r2, r3, #8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 81f2 	beq.w	8003a2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_UART_IRQHandler+0x14e>
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fb77 	bl	8003d54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <HAL_UART_IRQHandler+0x17a>
 800368a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d04f      	beq.n	8003732 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa81 	bl	8003b9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d041      	beq.n	800372a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3314      	adds	r3, #20
 80036ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1d9      	bne.n	80036a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d013      	beq.n	8003722 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	4a7e      	ldr	r2, [pc, #504]	@ (80038f8 <HAL_UART_IRQHandler+0x3e0>)
 8003700:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe fa2a 	bl	8001b60 <HAL_DMA_Abort_IT>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800371c:	4610      	mov	r0, r2
 800371e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00e      	b.n	8003740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f993 	bl	8003a4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e00a      	b.n	8003740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f98f 	bl	8003a4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	e006      	b.n	8003740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f98b 	bl	8003a4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800373e:	e175      	b.n	8003a2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	bf00      	nop
    return;
 8003742:	e173      	b.n	8003a2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	2b01      	cmp	r3, #1
 800374a:	f040 814f 	bne.w	80039ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800374e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8148 	beq.w	80039ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8141 	beq.w	80039ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80b6 	beq.w	80038fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800379c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8145 	beq.w	8003a30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037ae:	429a      	cmp	r2, r3
 80037b0:	f080 813e 	bcs.w	8003a30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	f000 8088 	beq.w	80038d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	330c      	adds	r3, #12
 80037f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003800:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800380c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1d9      	bne.n	80037c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3314      	adds	r3, #20
 800381a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003824:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3314      	adds	r3, #20
 8003834:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003838:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800383c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003840:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800384a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e1      	bne.n	8003814 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3314      	adds	r3, #20
 8003856:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003874:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003876:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800387a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e3      	bne.n	8003850 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a8:	f023 0310 	bic.w	r3, r3, #16
 80038ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e3      	bne.n	8003896 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe f909 	bl	8001aea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8b6 	bl	8003a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038f4:	e09c      	b.n	8003a30 <HAL_UART_IRQHandler+0x518>
 80038f6:	bf00      	nop
 80038f8:	08003c5f 	.word	0x08003c5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003904:	b29b      	uxth	r3, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 808e 	beq.w	8003a34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8089 	beq.w	8003a34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003938:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003946:	647a      	str	r2, [r7, #68]	@ 0x44
 8003948:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800394c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e3      	bne.n	8003922 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3314      	adds	r3, #20
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	623b      	str	r3, [r7, #32]
   return(result);
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3314      	adds	r3, #20
 800397a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800397e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e3      	bne.n	800395a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0310 	bic.w	r3, r3, #16
 80039b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039c4:	61fa      	str	r2, [r7, #28]
 80039c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	69b9      	ldr	r1, [r7, #24]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	617b      	str	r3, [r7, #20]
   return(result);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e3      	bne.n	80039a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f83b 	bl	8003a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ea:	e023      	b.n	8003a34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <HAL_UART_IRQHandler+0x4f4>
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f93e 	bl	8003c86 <UART_Transmit_IT>
    return;
 8003a0a:	e014      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <HAL_UART_IRQHandler+0x51e>
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f97d 	bl	8003d24 <UART_EndTransmit_IT>
    return;
 8003a2a:	e004      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a2c:	bf00      	nop
 8003a2e:	e002      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a34:	bf00      	nop
  }
}
 8003a36:	37e8      	adds	r7, #232	@ 0xe8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a86:	e03b      	b.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d037      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a90:	f7fd fef0 	bl	8001874 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	6a3a      	ldr	r2, [r7, #32]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e03a      	b.n	8003b20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b80      	cmp	r3, #128	@ 0x80
 8003abc:	d020      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d01d      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d116      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f856 	bl	8003b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2208      	movs	r2, #8
 8003af2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e00f      	b.n	8003b20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d0b4      	beq.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	88fa      	ldrh	r2, [r7, #6]
 8003b46:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2222      	movs	r2, #34	@ 0x22
 8003b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0220 	orr.w	r2, r2, #32
 8003b8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b095      	sub	sp, #84	@ 0x54
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e5      	bne.n	8003ba2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e5      	bne.n	8003bd6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d119      	bne.n	8003c46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f023 0310 	bic.w	r3, r3, #16
 8003c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c32:	61ba      	str	r2, [r7, #24]
 8003c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e5      	bne.n	8003c12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c54:	bf00      	nop
 8003c56:	3754      	adds	r7, #84	@ 0x54
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fee8 	bl	8003a4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b21      	cmp	r3, #33	@ 0x21
 8003c98:	d13e      	bne.n	8003d18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca2:	d114      	bne.n	8003cce <UART_Transmit_IT+0x48>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d110      	bne.n	8003cce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]
 8003ccc:	e008      	b.n	8003ce0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	1c59      	adds	r1, r3, #1
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6211      	str	r1, [r2, #32]
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4619      	mov	r1, r3
 8003cee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10f      	bne.n	8003d14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff fe79 	bl	8003a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	@ 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b22      	cmp	r3, #34	@ 0x22
 8003d66:	f040 80ae 	bne.w	8003ec6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d72:	d117      	bne.n	8003da4 <UART_Receive_IT+0x50>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d113      	bne.n	8003da4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003da2:	e026      	b.n	8003df2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db6:	d007      	beq.n	8003dc8 <UART_Receive_IT+0x74>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <UART_Receive_IT+0x82>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e008      	b.n	8003de8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d15d      	bne.n	8003ec2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0220 	bic.w	r2, r2, #32
 8003e14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d135      	bne.n	8003eb8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	613b      	str	r3, [r7, #16]
   return(result);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f023 0310 	bic.w	r3, r3, #16
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e72:	623a      	str	r2, [r7, #32]
 8003e74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	69f9      	ldr	r1, [r7, #28]
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e5      	bne.n	8003e52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d10a      	bne.n	8003eaa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fdd5 	bl	8003a60 <HAL_UARTEx_RxEventCallback>
 8003eb6:	e002      	b.n	8003ebe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fd f835 	bl	8000f28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e002      	b.n	8003ec8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3730      	adds	r7, #48	@ 0x30
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f0a:	f023 030c 	bic.w	r3, r3, #12
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe4 <UART_SetConfig+0x114>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7fe fc1c 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	e002      	b.n	8003f46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7fe fc04 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 8003f44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009a      	lsls	r2, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	0119      	lsls	r1, r3, #4
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009a      	lsls	r2, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003f7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	2064      	movs	r0, #100	@ 0x64
 8003f86:	fb00 f303 	mul.w	r3, r0, r3
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	3332      	adds	r3, #50	@ 0x32
 8003f90:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f9c:	4419      	add	r1, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2064      	movs	r0, #100	@ 0x64
 8003fbe:	fb00 f303 	mul.w	r3, r0, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	@ 0x32
 8003fc8:	4a07      	ldr	r2, [pc, #28]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	440a      	add	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <__cvt>:
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff2:	461d      	mov	r5, r3
 8003ff4:	bfbb      	ittet	lt
 8003ff6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003ffa:	461d      	movlt	r5, r3
 8003ffc:	2300      	movge	r3, #0
 8003ffe:	232d      	movlt	r3, #45	@ 0x2d
 8004000:	b088      	sub	sp, #32
 8004002:	4614      	mov	r4, r2
 8004004:	bfb8      	it	lt
 8004006:	4614      	movlt	r4, r2
 8004008:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800400a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800400c:	7013      	strb	r3, [r2, #0]
 800400e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004010:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004014:	f023 0820 	bic.w	r8, r3, #32
 8004018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800401c:	d005      	beq.n	800402a <__cvt+0x3e>
 800401e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004022:	d100      	bne.n	8004026 <__cvt+0x3a>
 8004024:	3601      	adds	r6, #1
 8004026:	2302      	movs	r3, #2
 8004028:	e000      	b.n	800402c <__cvt+0x40>
 800402a:	2303      	movs	r3, #3
 800402c:	aa07      	add	r2, sp, #28
 800402e:	9204      	str	r2, [sp, #16]
 8004030:	aa06      	add	r2, sp, #24
 8004032:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004036:	e9cd 3600 	strd	r3, r6, [sp]
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	f000 fe4f 	bl	8004ce0 <_dtoa_r>
 8004042:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004046:	4607      	mov	r7, r0
 8004048:	d119      	bne.n	800407e <__cvt+0x92>
 800404a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800404c:	07db      	lsls	r3, r3, #31
 800404e:	d50e      	bpl.n	800406e <__cvt+0x82>
 8004050:	eb00 0906 	add.w	r9, r0, r6
 8004054:	2200      	movs	r2, #0
 8004056:	2300      	movs	r3, #0
 8004058:	4620      	mov	r0, r4
 800405a:	4629      	mov	r1, r5
 800405c:	f7fc fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8004060:	b108      	cbz	r0, 8004066 <__cvt+0x7a>
 8004062:	f8cd 901c 	str.w	r9, [sp, #28]
 8004066:	2230      	movs	r2, #48	@ 0x30
 8004068:	9b07      	ldr	r3, [sp, #28]
 800406a:	454b      	cmp	r3, r9
 800406c:	d31e      	bcc.n	80040ac <__cvt+0xc0>
 800406e:	4638      	mov	r0, r7
 8004070:	9b07      	ldr	r3, [sp, #28]
 8004072:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004074:	1bdb      	subs	r3, r3, r7
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	b008      	add	sp, #32
 800407a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004082:	eb00 0906 	add.w	r9, r0, r6
 8004086:	d1e5      	bne.n	8004054 <__cvt+0x68>
 8004088:	7803      	ldrb	r3, [r0, #0]
 800408a:	2b30      	cmp	r3, #48	@ 0x30
 800408c:	d10a      	bne.n	80040a4 <__cvt+0xb8>
 800408e:	2200      	movs	r2, #0
 8004090:	2300      	movs	r3, #0
 8004092:	4620      	mov	r0, r4
 8004094:	4629      	mov	r1, r5
 8004096:	f7fc fc87 	bl	80009a8 <__aeabi_dcmpeq>
 800409a:	b918      	cbnz	r0, 80040a4 <__cvt+0xb8>
 800409c:	f1c6 0601 	rsb	r6, r6, #1
 80040a0:	f8ca 6000 	str.w	r6, [sl]
 80040a4:	f8da 3000 	ldr.w	r3, [sl]
 80040a8:	4499      	add	r9, r3
 80040aa:	e7d3      	b.n	8004054 <__cvt+0x68>
 80040ac:	1c59      	adds	r1, r3, #1
 80040ae:	9107      	str	r1, [sp, #28]
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e7d9      	b.n	8004068 <__cvt+0x7c>

080040b4 <__exponent>:
 80040b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040b6:	2900      	cmp	r1, #0
 80040b8:	bfb6      	itet	lt
 80040ba:	232d      	movlt	r3, #45	@ 0x2d
 80040bc:	232b      	movge	r3, #43	@ 0x2b
 80040be:	4249      	neglt	r1, r1
 80040c0:	2909      	cmp	r1, #9
 80040c2:	7002      	strb	r2, [r0, #0]
 80040c4:	7043      	strb	r3, [r0, #1]
 80040c6:	dd29      	ble.n	800411c <__exponent+0x68>
 80040c8:	f10d 0307 	add.w	r3, sp, #7
 80040cc:	461d      	mov	r5, r3
 80040ce:	270a      	movs	r7, #10
 80040d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80040d4:	461a      	mov	r2, r3
 80040d6:	fb07 1416 	mls	r4, r7, r6, r1
 80040da:	3430      	adds	r4, #48	@ 0x30
 80040dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040e0:	460c      	mov	r4, r1
 80040e2:	2c63      	cmp	r4, #99	@ 0x63
 80040e4:	4631      	mov	r1, r6
 80040e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80040ea:	dcf1      	bgt.n	80040d0 <__exponent+0x1c>
 80040ec:	3130      	adds	r1, #48	@ 0x30
 80040ee:	1e94      	subs	r4, r2, #2
 80040f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040f4:	4623      	mov	r3, r4
 80040f6:	1c41      	adds	r1, r0, #1
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	d30a      	bcc.n	8004112 <__exponent+0x5e>
 80040fc:	f10d 0309 	add.w	r3, sp, #9
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	42ac      	cmp	r4, r5
 8004104:	bf88      	it	hi
 8004106:	2300      	movhi	r3, #0
 8004108:	3302      	adds	r3, #2
 800410a:	4403      	add	r3, r0
 800410c:	1a18      	subs	r0, r3, r0
 800410e:	b003      	add	sp, #12
 8004110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004112:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004116:	f801 6f01 	strb.w	r6, [r1, #1]!
 800411a:	e7ed      	b.n	80040f8 <__exponent+0x44>
 800411c:	2330      	movs	r3, #48	@ 0x30
 800411e:	3130      	adds	r1, #48	@ 0x30
 8004120:	7083      	strb	r3, [r0, #2]
 8004122:	70c1      	strb	r1, [r0, #3]
 8004124:	1d03      	adds	r3, r0, #4
 8004126:	e7f1      	b.n	800410c <__exponent+0x58>

08004128 <_printf_float>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	b091      	sub	sp, #68	@ 0x44
 800412e:	460c      	mov	r4, r1
 8004130:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004134:	4616      	mov	r6, r2
 8004136:	461f      	mov	r7, r3
 8004138:	4605      	mov	r5, r0
 800413a:	f000 fcc1 	bl	8004ac0 <_localeconv_r>
 800413e:	6803      	ldr	r3, [r0, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	9308      	str	r3, [sp, #32]
 8004144:	f7fc f804 	bl	8000150 <strlen>
 8004148:	2300      	movs	r3, #0
 800414a:	930e      	str	r3, [sp, #56]	@ 0x38
 800414c:	f8d8 3000 	ldr.w	r3, [r8]
 8004150:	9009      	str	r0, [sp, #36]	@ 0x24
 8004152:	3307      	adds	r3, #7
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	f103 0208 	add.w	r2, r3, #8
 800415c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004160:	f8d4 b000 	ldr.w	fp, [r4]
 8004164:	f8c8 2000 	str.w	r2, [r8]
 8004168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800416c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004172:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004176:	f04f 32ff 	mov.w	r2, #4294967295
 800417a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800417e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004182:	4b9c      	ldr	r3, [pc, #624]	@ (80043f4 <_printf_float+0x2cc>)
 8004184:	f7fc fc42 	bl	8000a0c <__aeabi_dcmpun>
 8004188:	bb70      	cbnz	r0, 80041e8 <_printf_float+0xc0>
 800418a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	4b98      	ldr	r3, [pc, #608]	@ (80043f4 <_printf_float+0x2cc>)
 8004194:	f7fc fc1c 	bl	80009d0 <__aeabi_dcmple>
 8004198:	bb30      	cbnz	r0, 80041e8 <_printf_float+0xc0>
 800419a:	2200      	movs	r2, #0
 800419c:	2300      	movs	r3, #0
 800419e:	4640      	mov	r0, r8
 80041a0:	4649      	mov	r1, r9
 80041a2:	f7fc fc0b 	bl	80009bc <__aeabi_dcmplt>
 80041a6:	b110      	cbz	r0, 80041ae <_printf_float+0x86>
 80041a8:	232d      	movs	r3, #45	@ 0x2d
 80041aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ae:	4a92      	ldr	r2, [pc, #584]	@ (80043f8 <_printf_float+0x2d0>)
 80041b0:	4b92      	ldr	r3, [pc, #584]	@ (80043fc <_printf_float+0x2d4>)
 80041b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041b6:	bf94      	ite	ls
 80041b8:	4690      	movls	r8, r2
 80041ba:	4698      	movhi	r8, r3
 80041bc:	2303      	movs	r3, #3
 80041be:	f04f 0900 	mov.w	r9, #0
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	f02b 0304 	bic.w	r3, fp, #4
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	4633      	mov	r3, r6
 80041cc:	4621      	mov	r1, r4
 80041ce:	4628      	mov	r0, r5
 80041d0:	9700      	str	r7, [sp, #0]
 80041d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80041d4:	f000 f9d4 	bl	8004580 <_printf_common>
 80041d8:	3001      	adds	r0, #1
 80041da:	f040 8090 	bne.w	80042fe <_printf_float+0x1d6>
 80041de:	f04f 30ff 	mov.w	r0, #4294967295
 80041e2:	b011      	add	sp, #68	@ 0x44
 80041e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	4649      	mov	r1, r9
 80041f0:	f7fc fc0c 	bl	8000a0c <__aeabi_dcmpun>
 80041f4:	b148      	cbz	r0, 800420a <_printf_float+0xe2>
 80041f6:	464b      	mov	r3, r9
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bfb8      	it	lt
 80041fc:	232d      	movlt	r3, #45	@ 0x2d
 80041fe:	4a80      	ldr	r2, [pc, #512]	@ (8004400 <_printf_float+0x2d8>)
 8004200:	bfb8      	it	lt
 8004202:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004206:	4b7f      	ldr	r3, [pc, #508]	@ (8004404 <_printf_float+0x2dc>)
 8004208:	e7d3      	b.n	80041b2 <_printf_float+0x8a>
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	d13f      	bne.n	8004294 <_printf_float+0x16c>
 8004214:	2306      	movs	r3, #6
 8004216:	6063      	str	r3, [r4, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	9206      	str	r2, [sp, #24]
 8004222:	aa0e      	add	r2, sp, #56	@ 0x38
 8004224:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004228:	aa0d      	add	r2, sp, #52	@ 0x34
 800422a:	9203      	str	r2, [sp, #12]
 800422c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004230:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	4642      	mov	r2, r8
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	4628      	mov	r0, r5
 800423c:	464b      	mov	r3, r9
 800423e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004240:	f7ff fed4 	bl	8003fec <__cvt>
 8004244:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004246:	4680      	mov	r8, r0
 8004248:	2947      	cmp	r1, #71	@ 0x47
 800424a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800424c:	d128      	bne.n	80042a0 <_printf_float+0x178>
 800424e:	1cc8      	adds	r0, r1, #3
 8004250:	db02      	blt.n	8004258 <_printf_float+0x130>
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	4299      	cmp	r1, r3
 8004256:	dd40      	ble.n	80042da <_printf_float+0x1b2>
 8004258:	f1aa 0a02 	sub.w	sl, sl, #2
 800425c:	fa5f fa8a 	uxtb.w	sl, sl
 8004260:	4652      	mov	r2, sl
 8004262:	3901      	subs	r1, #1
 8004264:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004268:	910d      	str	r1, [sp, #52]	@ 0x34
 800426a:	f7ff ff23 	bl	80040b4 <__exponent>
 800426e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004270:	4681      	mov	r9, r0
 8004272:	1813      	adds	r3, r2, r0
 8004274:	2a01      	cmp	r2, #1
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	dc02      	bgt.n	8004280 <_printf_float+0x158>
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	07d2      	lsls	r2, r2, #31
 800427e:	d501      	bpl.n	8004284 <_printf_float+0x15c>
 8004280:	3301      	adds	r3, #1
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004288:	2b00      	cmp	r3, #0
 800428a:	d09e      	beq.n	80041ca <_printf_float+0xa2>
 800428c:	232d      	movs	r3, #45	@ 0x2d
 800428e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004292:	e79a      	b.n	80041ca <_printf_float+0xa2>
 8004294:	2947      	cmp	r1, #71	@ 0x47
 8004296:	d1bf      	bne.n	8004218 <_printf_float+0xf0>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1bd      	bne.n	8004218 <_printf_float+0xf0>
 800429c:	2301      	movs	r3, #1
 800429e:	e7ba      	b.n	8004216 <_printf_float+0xee>
 80042a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042a4:	d9dc      	bls.n	8004260 <_printf_float+0x138>
 80042a6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042aa:	d118      	bne.n	80042de <_printf_float+0x1b6>
 80042ac:	2900      	cmp	r1, #0
 80042ae:	6863      	ldr	r3, [r4, #4]
 80042b0:	dd0b      	ble.n	80042ca <_printf_float+0x1a2>
 80042b2:	6121      	str	r1, [r4, #16]
 80042b4:	b913      	cbnz	r3, 80042bc <_printf_float+0x194>
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	07d0      	lsls	r0, r2, #31
 80042ba:	d502      	bpl.n	80042c2 <_printf_float+0x19a>
 80042bc:	3301      	adds	r3, #1
 80042be:	440b      	add	r3, r1
 80042c0:	6123      	str	r3, [r4, #16]
 80042c2:	f04f 0900 	mov.w	r9, #0
 80042c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042c8:	e7dc      	b.n	8004284 <_printf_float+0x15c>
 80042ca:	b913      	cbnz	r3, 80042d2 <_printf_float+0x1aa>
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	07d2      	lsls	r2, r2, #31
 80042d0:	d501      	bpl.n	80042d6 <_printf_float+0x1ae>
 80042d2:	3302      	adds	r3, #2
 80042d4:	e7f4      	b.n	80042c0 <_printf_float+0x198>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e7f2      	b.n	80042c0 <_printf_float+0x198>
 80042da:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042e0:	4299      	cmp	r1, r3
 80042e2:	db05      	blt.n	80042f0 <_printf_float+0x1c8>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	6121      	str	r1, [r4, #16]
 80042e8:	07d8      	lsls	r0, r3, #31
 80042ea:	d5ea      	bpl.n	80042c2 <_printf_float+0x19a>
 80042ec:	1c4b      	adds	r3, r1, #1
 80042ee:	e7e7      	b.n	80042c0 <_printf_float+0x198>
 80042f0:	2900      	cmp	r1, #0
 80042f2:	bfcc      	ite	gt
 80042f4:	2201      	movgt	r2, #1
 80042f6:	f1c1 0202 	rsble	r2, r1, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	e7e0      	b.n	80042c0 <_printf_float+0x198>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	055a      	lsls	r2, r3, #21
 8004302:	d407      	bmi.n	8004314 <_printf_float+0x1ec>
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	4642      	mov	r2, r8
 8004308:	4631      	mov	r1, r6
 800430a:	4628      	mov	r0, r5
 800430c:	47b8      	blx	r7
 800430e:	3001      	adds	r0, #1
 8004310:	d12b      	bne.n	800436a <_printf_float+0x242>
 8004312:	e764      	b.n	80041de <_printf_float+0xb6>
 8004314:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004318:	f240 80dc 	bls.w	80044d4 <_printf_float+0x3ac>
 800431c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004320:	2200      	movs	r2, #0
 8004322:	2300      	movs	r3, #0
 8004324:	f7fc fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8004328:	2800      	cmp	r0, #0
 800432a:	d033      	beq.n	8004394 <_printf_float+0x26c>
 800432c:	2301      	movs	r3, #1
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	4a35      	ldr	r2, [pc, #212]	@ (8004408 <_printf_float+0x2e0>)
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	f43f af51 	beq.w	80041de <_printf_float+0xb6>
 800433c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004340:	4543      	cmp	r3, r8
 8004342:	db02      	blt.n	800434a <_printf_float+0x222>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	07d8      	lsls	r0, r3, #31
 8004348:	d50f      	bpl.n	800436a <_printf_float+0x242>
 800434a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	f43f af42 	beq.w	80041de <_printf_float+0xb6>
 800435a:	f04f 0900 	mov.w	r9, #0
 800435e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004362:	f104 0a1a 	add.w	sl, r4, #26
 8004366:	45c8      	cmp	r8, r9
 8004368:	dc09      	bgt.n	800437e <_printf_float+0x256>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	079b      	lsls	r3, r3, #30
 800436e:	f100 8102 	bmi.w	8004576 <_printf_float+0x44e>
 8004372:	68e0      	ldr	r0, [r4, #12]
 8004374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004376:	4298      	cmp	r0, r3
 8004378:	bfb8      	it	lt
 800437a:	4618      	movlt	r0, r3
 800437c:	e731      	b.n	80041e2 <_printf_float+0xba>
 800437e:	2301      	movs	r3, #1
 8004380:	4652      	mov	r2, sl
 8004382:	4631      	mov	r1, r6
 8004384:	4628      	mov	r0, r5
 8004386:	47b8      	blx	r7
 8004388:	3001      	adds	r0, #1
 800438a:	f43f af28 	beq.w	80041de <_printf_float+0xb6>
 800438e:	f109 0901 	add.w	r9, r9, #1
 8004392:	e7e8      	b.n	8004366 <_printf_float+0x23e>
 8004394:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004396:	2b00      	cmp	r3, #0
 8004398:	dc38      	bgt.n	800440c <_printf_float+0x2e4>
 800439a:	2301      	movs	r3, #1
 800439c:	4631      	mov	r1, r6
 800439e:	4628      	mov	r0, r5
 80043a0:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <_printf_float+0x2e0>)
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f af1a 	beq.w	80041de <_printf_float+0xb6>
 80043aa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80043ae:	ea59 0303 	orrs.w	r3, r9, r3
 80043b2:	d102      	bne.n	80043ba <_printf_float+0x292>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	07d9      	lsls	r1, r3, #31
 80043b8:	d5d7      	bpl.n	800436a <_printf_float+0x242>
 80043ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f af0a 	beq.w	80041de <_printf_float+0xb6>
 80043ca:	f04f 0a00 	mov.w	sl, #0
 80043ce:	f104 0b1a 	add.w	fp, r4, #26
 80043d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043d4:	425b      	negs	r3, r3
 80043d6:	4553      	cmp	r3, sl
 80043d8:	dc01      	bgt.n	80043de <_printf_float+0x2b6>
 80043da:	464b      	mov	r3, r9
 80043dc:	e793      	b.n	8004306 <_printf_float+0x1de>
 80043de:	2301      	movs	r3, #1
 80043e0:	465a      	mov	r2, fp
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	f43f aef8 	beq.w	80041de <_printf_float+0xb6>
 80043ee:	f10a 0a01 	add.w	sl, sl, #1
 80043f2:	e7ee      	b.n	80043d2 <_printf_float+0x2aa>
 80043f4:	7fefffff 	.word	0x7fefffff
 80043f8:	0800694a 	.word	0x0800694a
 80043fc:	0800694e 	.word	0x0800694e
 8004400:	08006952 	.word	0x08006952
 8004404:	08006956 	.word	0x08006956
 8004408:	0800695a 	.word	0x0800695a
 800440c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800440e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004412:	4553      	cmp	r3, sl
 8004414:	bfa8      	it	ge
 8004416:	4653      	movge	r3, sl
 8004418:	2b00      	cmp	r3, #0
 800441a:	4699      	mov	r9, r3
 800441c:	dc36      	bgt.n	800448c <_printf_float+0x364>
 800441e:	f04f 0b00 	mov.w	fp, #0
 8004422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004426:	f104 021a 	add.w	r2, r4, #26
 800442a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800442c:	930a      	str	r3, [sp, #40]	@ 0x28
 800442e:	eba3 0309 	sub.w	r3, r3, r9
 8004432:	455b      	cmp	r3, fp
 8004434:	dc31      	bgt.n	800449a <_printf_float+0x372>
 8004436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004438:	459a      	cmp	sl, r3
 800443a:	dc3a      	bgt.n	80044b2 <_printf_float+0x38a>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	07da      	lsls	r2, r3, #31
 8004440:	d437      	bmi.n	80044b2 <_printf_float+0x38a>
 8004442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004444:	ebaa 0903 	sub.w	r9, sl, r3
 8004448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800444a:	ebaa 0303 	sub.w	r3, sl, r3
 800444e:	4599      	cmp	r9, r3
 8004450:	bfa8      	it	ge
 8004452:	4699      	movge	r9, r3
 8004454:	f1b9 0f00 	cmp.w	r9, #0
 8004458:	dc33      	bgt.n	80044c2 <_printf_float+0x39a>
 800445a:	f04f 0800 	mov.w	r8, #0
 800445e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004462:	f104 0b1a 	add.w	fp, r4, #26
 8004466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004468:	ebaa 0303 	sub.w	r3, sl, r3
 800446c:	eba3 0309 	sub.w	r3, r3, r9
 8004470:	4543      	cmp	r3, r8
 8004472:	f77f af7a 	ble.w	800436a <_printf_float+0x242>
 8004476:	2301      	movs	r3, #1
 8004478:	465a      	mov	r2, fp
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	f43f aeac 	beq.w	80041de <_printf_float+0xb6>
 8004486:	f108 0801 	add.w	r8, r8, #1
 800448a:	e7ec      	b.n	8004466 <_printf_float+0x33e>
 800448c:	4642      	mov	r2, r8
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	d1c2      	bne.n	800441e <_printf_float+0x2f6>
 8004498:	e6a1      	b.n	80041de <_printf_float+0xb6>
 800449a:	2301      	movs	r3, #1
 800449c:	4631      	mov	r1, r6
 800449e:	4628      	mov	r0, r5
 80044a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	f43f ae9a 	beq.w	80041de <_printf_float+0xb6>
 80044aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044ac:	f10b 0b01 	add.w	fp, fp, #1
 80044b0:	e7bb      	b.n	800442a <_printf_float+0x302>
 80044b2:	4631      	mov	r1, r6
 80044b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044b8:	4628      	mov	r0, r5
 80044ba:	47b8      	blx	r7
 80044bc:	3001      	adds	r0, #1
 80044be:	d1c0      	bne.n	8004442 <_printf_float+0x31a>
 80044c0:	e68d      	b.n	80041de <_printf_float+0xb6>
 80044c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044c4:	464b      	mov	r3, r9
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	4442      	add	r2, r8
 80044cc:	47b8      	blx	r7
 80044ce:	3001      	adds	r0, #1
 80044d0:	d1c3      	bne.n	800445a <_printf_float+0x332>
 80044d2:	e684      	b.n	80041de <_printf_float+0xb6>
 80044d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044d8:	f1ba 0f01 	cmp.w	sl, #1
 80044dc:	dc01      	bgt.n	80044e2 <_printf_float+0x3ba>
 80044de:	07db      	lsls	r3, r3, #31
 80044e0:	d536      	bpl.n	8004550 <_printf_float+0x428>
 80044e2:	2301      	movs	r3, #1
 80044e4:	4642      	mov	r2, r8
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f ae76 	beq.w	80041de <_printf_float+0xb6>
 80044f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f ae6e 	beq.w	80041de <_printf_float+0xb6>
 8004502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800450e:	f7fc fa4b 	bl	80009a8 <__aeabi_dcmpeq>
 8004512:	b9c0      	cbnz	r0, 8004546 <_printf_float+0x41e>
 8004514:	4653      	mov	r3, sl
 8004516:	f108 0201 	add.w	r2, r8, #1
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	3001      	adds	r0, #1
 8004522:	d10c      	bne.n	800453e <_printf_float+0x416>
 8004524:	e65b      	b.n	80041de <_printf_float+0xb6>
 8004526:	2301      	movs	r3, #1
 8004528:	465a      	mov	r2, fp
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	f43f ae54 	beq.w	80041de <_printf_float+0xb6>
 8004536:	f108 0801 	add.w	r8, r8, #1
 800453a:	45d0      	cmp	r8, sl
 800453c:	dbf3      	blt.n	8004526 <_printf_float+0x3fe>
 800453e:	464b      	mov	r3, r9
 8004540:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004544:	e6e0      	b.n	8004308 <_printf_float+0x1e0>
 8004546:	f04f 0800 	mov.w	r8, #0
 800454a:	f104 0b1a 	add.w	fp, r4, #26
 800454e:	e7f4      	b.n	800453a <_printf_float+0x412>
 8004550:	2301      	movs	r3, #1
 8004552:	4642      	mov	r2, r8
 8004554:	e7e1      	b.n	800451a <_printf_float+0x3f2>
 8004556:	2301      	movs	r3, #1
 8004558:	464a      	mov	r2, r9
 800455a:	4631      	mov	r1, r6
 800455c:	4628      	mov	r0, r5
 800455e:	47b8      	blx	r7
 8004560:	3001      	adds	r0, #1
 8004562:	f43f ae3c 	beq.w	80041de <_printf_float+0xb6>
 8004566:	f108 0801 	add.w	r8, r8, #1
 800456a:	68e3      	ldr	r3, [r4, #12]
 800456c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800456e:	1a5b      	subs	r3, r3, r1
 8004570:	4543      	cmp	r3, r8
 8004572:	dcf0      	bgt.n	8004556 <_printf_float+0x42e>
 8004574:	e6fd      	b.n	8004372 <_printf_float+0x24a>
 8004576:	f04f 0800 	mov.w	r8, #0
 800457a:	f104 0919 	add.w	r9, r4, #25
 800457e:	e7f4      	b.n	800456a <_printf_float+0x442>

08004580 <_printf_common>:
 8004580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	4616      	mov	r6, r2
 8004586:	4698      	mov	r8, r3
 8004588:	688a      	ldr	r2, [r1, #8]
 800458a:	690b      	ldr	r3, [r1, #16]
 800458c:	4607      	mov	r7, r0
 800458e:	4293      	cmp	r3, r2
 8004590:	bfb8      	it	lt
 8004592:	4613      	movlt	r3, r2
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800459a:	460c      	mov	r4, r1
 800459c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045a0:	b10a      	cbz	r2, 80045a6 <_printf_common+0x26>
 80045a2:	3301      	adds	r3, #1
 80045a4:	6033      	str	r3, [r6, #0]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	0699      	lsls	r1, r3, #26
 80045aa:	bf42      	ittt	mi
 80045ac:	6833      	ldrmi	r3, [r6, #0]
 80045ae:	3302      	addmi	r3, #2
 80045b0:	6033      	strmi	r3, [r6, #0]
 80045b2:	6825      	ldr	r5, [r4, #0]
 80045b4:	f015 0506 	ands.w	r5, r5, #6
 80045b8:	d106      	bne.n	80045c8 <_printf_common+0x48>
 80045ba:	f104 0a19 	add.w	sl, r4, #25
 80045be:	68e3      	ldr	r3, [r4, #12]
 80045c0:	6832      	ldr	r2, [r6, #0]
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	42ab      	cmp	r3, r5
 80045c6:	dc2b      	bgt.n	8004620 <_printf_common+0xa0>
 80045c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	3b00      	subs	r3, #0
 80045d0:	bf18      	it	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	0692      	lsls	r2, r2, #26
 80045d6:	d430      	bmi.n	800463a <_printf_common+0xba>
 80045d8:	4641      	mov	r1, r8
 80045da:	4638      	mov	r0, r7
 80045dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045e0:	47c8      	blx	r9
 80045e2:	3001      	adds	r0, #1
 80045e4:	d023      	beq.n	800462e <_printf_common+0xae>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	f003 0306 	and.w	r3, r3, #6
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	bf14      	ite	ne
 80045f2:	2500      	movne	r5, #0
 80045f4:	6833      	ldreq	r3, [r6, #0]
 80045f6:	f04f 0600 	mov.w	r6, #0
 80045fa:	bf08      	it	eq
 80045fc:	68e5      	ldreq	r5, [r4, #12]
 80045fe:	f104 041a 	add.w	r4, r4, #26
 8004602:	bf08      	it	eq
 8004604:	1aed      	subeq	r5, r5, r3
 8004606:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800460a:	bf08      	it	eq
 800460c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004610:	4293      	cmp	r3, r2
 8004612:	bfc4      	itt	gt
 8004614:	1a9b      	subgt	r3, r3, r2
 8004616:	18ed      	addgt	r5, r5, r3
 8004618:	42b5      	cmp	r5, r6
 800461a:	d11a      	bne.n	8004652 <_printf_common+0xd2>
 800461c:	2000      	movs	r0, #0
 800461e:	e008      	b.n	8004632 <_printf_common+0xb2>
 8004620:	2301      	movs	r3, #1
 8004622:	4652      	mov	r2, sl
 8004624:	4641      	mov	r1, r8
 8004626:	4638      	mov	r0, r7
 8004628:	47c8      	blx	r9
 800462a:	3001      	adds	r0, #1
 800462c:	d103      	bne.n	8004636 <_printf_common+0xb6>
 800462e:	f04f 30ff 	mov.w	r0, #4294967295
 8004632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004636:	3501      	adds	r5, #1
 8004638:	e7c1      	b.n	80045be <_printf_common+0x3e>
 800463a:	2030      	movs	r0, #48	@ 0x30
 800463c:	18e1      	adds	r1, r4, r3
 800463e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004648:	4422      	add	r2, r4
 800464a:	3302      	adds	r3, #2
 800464c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004650:	e7c2      	b.n	80045d8 <_printf_common+0x58>
 8004652:	2301      	movs	r3, #1
 8004654:	4622      	mov	r2, r4
 8004656:	4641      	mov	r1, r8
 8004658:	4638      	mov	r0, r7
 800465a:	47c8      	blx	r9
 800465c:	3001      	adds	r0, #1
 800465e:	d0e6      	beq.n	800462e <_printf_common+0xae>
 8004660:	3601      	adds	r6, #1
 8004662:	e7d9      	b.n	8004618 <_printf_common+0x98>

08004664 <_printf_i>:
 8004664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004668:	7e0f      	ldrb	r7, [r1, #24]
 800466a:	4691      	mov	r9, r2
 800466c:	2f78      	cmp	r7, #120	@ 0x78
 800466e:	4680      	mov	r8, r0
 8004670:	460c      	mov	r4, r1
 8004672:	469a      	mov	sl, r3
 8004674:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800467a:	d807      	bhi.n	800468c <_printf_i+0x28>
 800467c:	2f62      	cmp	r7, #98	@ 0x62
 800467e:	d80a      	bhi.n	8004696 <_printf_i+0x32>
 8004680:	2f00      	cmp	r7, #0
 8004682:	f000 80d3 	beq.w	800482c <_printf_i+0x1c8>
 8004686:	2f58      	cmp	r7, #88	@ 0x58
 8004688:	f000 80ba 	beq.w	8004800 <_printf_i+0x19c>
 800468c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004694:	e03a      	b.n	800470c <_printf_i+0xa8>
 8004696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800469a:	2b15      	cmp	r3, #21
 800469c:	d8f6      	bhi.n	800468c <_printf_i+0x28>
 800469e:	a101      	add	r1, pc, #4	@ (adr r1, 80046a4 <_printf_i+0x40>)
 80046a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046a4:	080046fd 	.word	0x080046fd
 80046a8:	08004711 	.word	0x08004711
 80046ac:	0800468d 	.word	0x0800468d
 80046b0:	0800468d 	.word	0x0800468d
 80046b4:	0800468d 	.word	0x0800468d
 80046b8:	0800468d 	.word	0x0800468d
 80046bc:	08004711 	.word	0x08004711
 80046c0:	0800468d 	.word	0x0800468d
 80046c4:	0800468d 	.word	0x0800468d
 80046c8:	0800468d 	.word	0x0800468d
 80046cc:	0800468d 	.word	0x0800468d
 80046d0:	08004813 	.word	0x08004813
 80046d4:	0800473b 	.word	0x0800473b
 80046d8:	080047cd 	.word	0x080047cd
 80046dc:	0800468d 	.word	0x0800468d
 80046e0:	0800468d 	.word	0x0800468d
 80046e4:	08004835 	.word	0x08004835
 80046e8:	0800468d 	.word	0x0800468d
 80046ec:	0800473b 	.word	0x0800473b
 80046f0:	0800468d 	.word	0x0800468d
 80046f4:	0800468d 	.word	0x0800468d
 80046f8:	080047d5 	.word	0x080047d5
 80046fc:	6833      	ldr	r3, [r6, #0]
 80046fe:	1d1a      	adds	r2, r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6032      	str	r2, [r6, #0]
 8004704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800470c:	2301      	movs	r3, #1
 800470e:	e09e      	b.n	800484e <_printf_i+0x1ea>
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	1d19      	adds	r1, r3, #4
 8004716:	6031      	str	r1, [r6, #0]
 8004718:	0606      	lsls	r6, r0, #24
 800471a:	d501      	bpl.n	8004720 <_printf_i+0xbc>
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	e003      	b.n	8004728 <_printf_i+0xc4>
 8004720:	0645      	lsls	r5, r0, #25
 8004722:	d5fb      	bpl.n	800471c <_printf_i+0xb8>
 8004724:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004728:	2d00      	cmp	r5, #0
 800472a:	da03      	bge.n	8004734 <_printf_i+0xd0>
 800472c:	232d      	movs	r3, #45	@ 0x2d
 800472e:	426d      	negs	r5, r5
 8004730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004734:	230a      	movs	r3, #10
 8004736:	4859      	ldr	r0, [pc, #356]	@ (800489c <_printf_i+0x238>)
 8004738:	e011      	b.n	800475e <_printf_i+0xfa>
 800473a:	6821      	ldr	r1, [r4, #0]
 800473c:	6833      	ldr	r3, [r6, #0]
 800473e:	0608      	lsls	r0, r1, #24
 8004740:	f853 5b04 	ldr.w	r5, [r3], #4
 8004744:	d402      	bmi.n	800474c <_printf_i+0xe8>
 8004746:	0649      	lsls	r1, r1, #25
 8004748:	bf48      	it	mi
 800474a:	b2ad      	uxthmi	r5, r5
 800474c:	2f6f      	cmp	r7, #111	@ 0x6f
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	bf14      	ite	ne
 8004752:	230a      	movne	r3, #10
 8004754:	2308      	moveq	r3, #8
 8004756:	4851      	ldr	r0, [pc, #324]	@ (800489c <_printf_i+0x238>)
 8004758:	2100      	movs	r1, #0
 800475a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800475e:	6866      	ldr	r6, [r4, #4]
 8004760:	2e00      	cmp	r6, #0
 8004762:	bfa8      	it	ge
 8004764:	6821      	ldrge	r1, [r4, #0]
 8004766:	60a6      	str	r6, [r4, #8]
 8004768:	bfa4      	itt	ge
 800476a:	f021 0104 	bicge.w	r1, r1, #4
 800476e:	6021      	strge	r1, [r4, #0]
 8004770:	b90d      	cbnz	r5, 8004776 <_printf_i+0x112>
 8004772:	2e00      	cmp	r6, #0
 8004774:	d04b      	beq.n	800480e <_printf_i+0x1aa>
 8004776:	4616      	mov	r6, r2
 8004778:	fbb5 f1f3 	udiv	r1, r5, r3
 800477c:	fb03 5711 	mls	r7, r3, r1, r5
 8004780:	5dc7      	ldrb	r7, [r0, r7]
 8004782:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004786:	462f      	mov	r7, r5
 8004788:	42bb      	cmp	r3, r7
 800478a:	460d      	mov	r5, r1
 800478c:	d9f4      	bls.n	8004778 <_printf_i+0x114>
 800478e:	2b08      	cmp	r3, #8
 8004790:	d10b      	bne.n	80047aa <_printf_i+0x146>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	07df      	lsls	r7, r3, #31
 8004796:	d508      	bpl.n	80047aa <_printf_i+0x146>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	6861      	ldr	r1, [r4, #4]
 800479c:	4299      	cmp	r1, r3
 800479e:	bfde      	ittt	le
 80047a0:	2330      	movle	r3, #48	@ 0x30
 80047a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047aa:	1b92      	subs	r2, r2, r6
 80047ac:	6122      	str	r2, [r4, #16]
 80047ae:	464b      	mov	r3, r9
 80047b0:	4621      	mov	r1, r4
 80047b2:	4640      	mov	r0, r8
 80047b4:	f8cd a000 	str.w	sl, [sp]
 80047b8:	aa03      	add	r2, sp, #12
 80047ba:	f7ff fee1 	bl	8004580 <_printf_common>
 80047be:	3001      	adds	r0, #1
 80047c0:	d14a      	bne.n	8004858 <_printf_i+0x1f4>
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295
 80047c6:	b004      	add	sp, #16
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	f043 0320 	orr.w	r3, r3, #32
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	2778      	movs	r7, #120	@ 0x78
 80047d6:	4832      	ldr	r0, [pc, #200]	@ (80048a0 <_printf_i+0x23c>)
 80047d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	6831      	ldr	r1, [r6, #0]
 80047e0:	061f      	lsls	r7, r3, #24
 80047e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80047e6:	d402      	bmi.n	80047ee <_printf_i+0x18a>
 80047e8:	065f      	lsls	r7, r3, #25
 80047ea:	bf48      	it	mi
 80047ec:	b2ad      	uxthmi	r5, r5
 80047ee:	6031      	str	r1, [r6, #0]
 80047f0:	07d9      	lsls	r1, r3, #31
 80047f2:	bf44      	itt	mi
 80047f4:	f043 0320 	orrmi.w	r3, r3, #32
 80047f8:	6023      	strmi	r3, [r4, #0]
 80047fa:	b11d      	cbz	r5, 8004804 <_printf_i+0x1a0>
 80047fc:	2310      	movs	r3, #16
 80047fe:	e7ab      	b.n	8004758 <_printf_i+0xf4>
 8004800:	4826      	ldr	r0, [pc, #152]	@ (800489c <_printf_i+0x238>)
 8004802:	e7e9      	b.n	80047d8 <_printf_i+0x174>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	f023 0320 	bic.w	r3, r3, #32
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	e7f6      	b.n	80047fc <_printf_i+0x198>
 800480e:	4616      	mov	r6, r2
 8004810:	e7bd      	b.n	800478e <_printf_i+0x12a>
 8004812:	6833      	ldr	r3, [r6, #0]
 8004814:	6825      	ldr	r5, [r4, #0]
 8004816:	1d18      	adds	r0, r3, #4
 8004818:	6961      	ldr	r1, [r4, #20]
 800481a:	6030      	str	r0, [r6, #0]
 800481c:	062e      	lsls	r6, r5, #24
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	d501      	bpl.n	8004826 <_printf_i+0x1c2>
 8004822:	6019      	str	r1, [r3, #0]
 8004824:	e002      	b.n	800482c <_printf_i+0x1c8>
 8004826:	0668      	lsls	r0, r5, #25
 8004828:	d5fb      	bpl.n	8004822 <_printf_i+0x1be>
 800482a:	8019      	strh	r1, [r3, #0]
 800482c:	2300      	movs	r3, #0
 800482e:	4616      	mov	r6, r2
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	e7bc      	b.n	80047ae <_printf_i+0x14a>
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	2100      	movs	r1, #0
 8004838:	1d1a      	adds	r2, r3, #4
 800483a:	6032      	str	r2, [r6, #0]
 800483c:	681e      	ldr	r6, [r3, #0]
 800483e:	6862      	ldr	r2, [r4, #4]
 8004840:	4630      	mov	r0, r6
 8004842:	f000 f9b4 	bl	8004bae <memchr>
 8004846:	b108      	cbz	r0, 800484c <_printf_i+0x1e8>
 8004848:	1b80      	subs	r0, r0, r6
 800484a:	6060      	str	r0, [r4, #4]
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	6123      	str	r3, [r4, #16]
 8004850:	2300      	movs	r3, #0
 8004852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004856:	e7aa      	b.n	80047ae <_printf_i+0x14a>
 8004858:	4632      	mov	r2, r6
 800485a:	4649      	mov	r1, r9
 800485c:	4640      	mov	r0, r8
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	47d0      	blx	sl
 8004862:	3001      	adds	r0, #1
 8004864:	d0ad      	beq.n	80047c2 <_printf_i+0x15e>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	079b      	lsls	r3, r3, #30
 800486a:	d413      	bmi.n	8004894 <_printf_i+0x230>
 800486c:	68e0      	ldr	r0, [r4, #12]
 800486e:	9b03      	ldr	r3, [sp, #12]
 8004870:	4298      	cmp	r0, r3
 8004872:	bfb8      	it	lt
 8004874:	4618      	movlt	r0, r3
 8004876:	e7a6      	b.n	80047c6 <_printf_i+0x162>
 8004878:	2301      	movs	r3, #1
 800487a:	4632      	mov	r2, r6
 800487c:	4649      	mov	r1, r9
 800487e:	4640      	mov	r0, r8
 8004880:	47d0      	blx	sl
 8004882:	3001      	adds	r0, #1
 8004884:	d09d      	beq.n	80047c2 <_printf_i+0x15e>
 8004886:	3501      	adds	r5, #1
 8004888:	68e3      	ldr	r3, [r4, #12]
 800488a:	9903      	ldr	r1, [sp, #12]
 800488c:	1a5b      	subs	r3, r3, r1
 800488e:	42ab      	cmp	r3, r5
 8004890:	dcf2      	bgt.n	8004878 <_printf_i+0x214>
 8004892:	e7eb      	b.n	800486c <_printf_i+0x208>
 8004894:	2500      	movs	r5, #0
 8004896:	f104 0619 	add.w	r6, r4, #25
 800489a:	e7f5      	b.n	8004888 <_printf_i+0x224>
 800489c:	0800695c 	.word	0x0800695c
 80048a0:	0800696d 	.word	0x0800696d

080048a4 <std>:
 80048a4:	2300      	movs	r3, #0
 80048a6:	b510      	push	{r4, lr}
 80048a8:	4604      	mov	r4, r0
 80048aa:	e9c0 3300 	strd	r3, r3, [r0]
 80048ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048b2:	6083      	str	r3, [r0, #8]
 80048b4:	8181      	strh	r1, [r0, #12]
 80048b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80048b8:	81c2      	strh	r2, [r0, #14]
 80048ba:	6183      	str	r3, [r0, #24]
 80048bc:	4619      	mov	r1, r3
 80048be:	2208      	movs	r2, #8
 80048c0:	305c      	adds	r0, #92	@ 0x5c
 80048c2:	f000 f8f4 	bl	8004aae <memset>
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <std+0x58>)
 80048c8:	6224      	str	r4, [r4, #32]
 80048ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80048cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <std+0x5c>)
 80048ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <std+0x60>)
 80048d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <std+0x64>)
 80048d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80048d8:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <std+0x68>)
 80048da:	429c      	cmp	r4, r3
 80048dc:	d006      	beq.n	80048ec <std+0x48>
 80048de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048e2:	4294      	cmp	r4, r2
 80048e4:	d002      	beq.n	80048ec <std+0x48>
 80048e6:	33d0      	adds	r3, #208	@ 0xd0
 80048e8:	429c      	cmp	r4, r3
 80048ea:	d105      	bne.n	80048f8 <std+0x54>
 80048ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f4:	f000 b958 	b.w	8004ba8 <__retarget_lock_init_recursive>
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	bf00      	nop
 80048fc:	08004a29 	.word	0x08004a29
 8004900:	08004a4b 	.word	0x08004a4b
 8004904:	08004a83 	.word	0x08004a83
 8004908:	08004aa7 	.word	0x08004aa7
 800490c:	200002f0 	.word	0x200002f0

08004910 <stdio_exit_handler>:
 8004910:	4a02      	ldr	r2, [pc, #8]	@ (800491c <stdio_exit_handler+0xc>)
 8004912:	4903      	ldr	r1, [pc, #12]	@ (8004920 <stdio_exit_handler+0x10>)
 8004914:	4803      	ldr	r0, [pc, #12]	@ (8004924 <stdio_exit_handler+0x14>)
 8004916:	f000 b869 	b.w	80049ec <_fwalk_sglue>
 800491a:	bf00      	nop
 800491c:	20000010 	.word	0x20000010
 8004920:	0800626d 	.word	0x0800626d
 8004924:	20000020 	.word	0x20000020

08004928 <cleanup_stdio>:
 8004928:	6841      	ldr	r1, [r0, #4]
 800492a:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <cleanup_stdio+0x34>)
 800492c:	b510      	push	{r4, lr}
 800492e:	4299      	cmp	r1, r3
 8004930:	4604      	mov	r4, r0
 8004932:	d001      	beq.n	8004938 <cleanup_stdio+0x10>
 8004934:	f001 fc9a 	bl	800626c <_fflush_r>
 8004938:	68a1      	ldr	r1, [r4, #8]
 800493a:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <cleanup_stdio+0x38>)
 800493c:	4299      	cmp	r1, r3
 800493e:	d002      	beq.n	8004946 <cleanup_stdio+0x1e>
 8004940:	4620      	mov	r0, r4
 8004942:	f001 fc93 	bl	800626c <_fflush_r>
 8004946:	68e1      	ldr	r1, [r4, #12]
 8004948:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <cleanup_stdio+0x3c>)
 800494a:	4299      	cmp	r1, r3
 800494c:	d004      	beq.n	8004958 <cleanup_stdio+0x30>
 800494e:	4620      	mov	r0, r4
 8004950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004954:	f001 bc8a 	b.w	800626c <_fflush_r>
 8004958:	bd10      	pop	{r4, pc}
 800495a:	bf00      	nop
 800495c:	200002f0 	.word	0x200002f0
 8004960:	20000358 	.word	0x20000358
 8004964:	200003c0 	.word	0x200003c0

08004968 <global_stdio_init.part.0>:
 8004968:	b510      	push	{r4, lr}
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <global_stdio_init.part.0+0x30>)
 800496c:	4c0b      	ldr	r4, [pc, #44]	@ (800499c <global_stdio_init.part.0+0x34>)
 800496e:	4a0c      	ldr	r2, [pc, #48]	@ (80049a0 <global_stdio_init.part.0+0x38>)
 8004970:	4620      	mov	r0, r4
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	2104      	movs	r1, #4
 8004976:	2200      	movs	r2, #0
 8004978:	f7ff ff94 	bl	80048a4 <std>
 800497c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004980:	2201      	movs	r2, #1
 8004982:	2109      	movs	r1, #9
 8004984:	f7ff ff8e 	bl	80048a4 <std>
 8004988:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800498c:	2202      	movs	r2, #2
 800498e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004992:	2112      	movs	r1, #18
 8004994:	f7ff bf86 	b.w	80048a4 <std>
 8004998:	20000428 	.word	0x20000428
 800499c:	200002f0 	.word	0x200002f0
 80049a0:	08004911 	.word	0x08004911

080049a4 <__sfp_lock_acquire>:
 80049a4:	4801      	ldr	r0, [pc, #4]	@ (80049ac <__sfp_lock_acquire+0x8>)
 80049a6:	f000 b900 	b.w	8004baa <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	20000431 	.word	0x20000431

080049b0 <__sfp_lock_release>:
 80049b0:	4801      	ldr	r0, [pc, #4]	@ (80049b8 <__sfp_lock_release+0x8>)
 80049b2:	f000 b8fb 	b.w	8004bac <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000431 	.word	0x20000431

080049bc <__sinit>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	4604      	mov	r4, r0
 80049c0:	f7ff fff0 	bl	80049a4 <__sfp_lock_acquire>
 80049c4:	6a23      	ldr	r3, [r4, #32]
 80049c6:	b11b      	cbz	r3, 80049d0 <__sinit+0x14>
 80049c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049cc:	f7ff bff0 	b.w	80049b0 <__sfp_lock_release>
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <__sinit+0x28>)
 80049d2:	6223      	str	r3, [r4, #32]
 80049d4:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <__sinit+0x2c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f5      	bne.n	80049c8 <__sinit+0xc>
 80049dc:	f7ff ffc4 	bl	8004968 <global_stdio_init.part.0>
 80049e0:	e7f2      	b.n	80049c8 <__sinit+0xc>
 80049e2:	bf00      	nop
 80049e4:	08004929 	.word	0x08004929
 80049e8:	20000428 	.word	0x20000428

080049ec <_fwalk_sglue>:
 80049ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f0:	4607      	mov	r7, r0
 80049f2:	4688      	mov	r8, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	2600      	movs	r6, #0
 80049f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004a00:	d505      	bpl.n	8004a0e <_fwalk_sglue+0x22>
 8004a02:	6824      	ldr	r4, [r4, #0]
 8004a04:	2c00      	cmp	r4, #0
 8004a06:	d1f7      	bne.n	80049f8 <_fwalk_sglue+0xc>
 8004a08:	4630      	mov	r0, r6
 8004a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a0e:	89ab      	ldrh	r3, [r5, #12]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d907      	bls.n	8004a24 <_fwalk_sglue+0x38>
 8004a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	d003      	beq.n	8004a24 <_fwalk_sglue+0x38>
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c0      	blx	r8
 8004a22:	4306      	orrs	r6, r0
 8004a24:	3568      	adds	r5, #104	@ 0x68
 8004a26:	e7e9      	b.n	80049fc <_fwalk_sglue+0x10>

08004a28 <__sread>:
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a30:	f000 f86c 	bl	8004b0c <_read_r>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	bfab      	itete	ge
 8004a38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a3c:	181b      	addge	r3, r3, r0
 8004a3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a42:	bfac      	ite	ge
 8004a44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a46:	81a3      	strhlt	r3, [r4, #12]
 8004a48:	bd10      	pop	{r4, pc}

08004a4a <__swrite>:
 8004a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4e:	461f      	mov	r7, r3
 8004a50:	898b      	ldrh	r3, [r1, #12]
 8004a52:	4605      	mov	r5, r0
 8004a54:	05db      	lsls	r3, r3, #23
 8004a56:	460c      	mov	r4, r1
 8004a58:	4616      	mov	r6, r2
 8004a5a:	d505      	bpl.n	8004a68 <__swrite+0x1e>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	f000 f840 	bl	8004ae8 <_lseek_r>
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	4632      	mov	r2, r6
 8004a6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a70:	81a3      	strh	r3, [r4, #12]
 8004a72:	4628      	mov	r0, r5
 8004a74:	463b      	mov	r3, r7
 8004a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7e:	f000 b857 	b.w	8004b30 <_write_r>

08004a82 <__sseek>:
 8004a82:	b510      	push	{r4, lr}
 8004a84:	460c      	mov	r4, r1
 8004a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8a:	f000 f82d 	bl	8004ae8 <_lseek_r>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	bf15      	itete	ne
 8004a94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a9e:	81a3      	strheq	r3, [r4, #12]
 8004aa0:	bf18      	it	ne
 8004aa2:	81a3      	strhne	r3, [r4, #12]
 8004aa4:	bd10      	pop	{r4, pc}

08004aa6 <__sclose>:
 8004aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aaa:	f000 b80d 	b.w	8004ac8 <_close_r>

08004aae <memset>:
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d100      	bne.n	8004ab8 <memset+0xa>
 8004ab6:	4770      	bx	lr
 8004ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8004abc:	e7f9      	b.n	8004ab2 <memset+0x4>
	...

08004ac0 <_localeconv_r>:
 8004ac0:	4800      	ldr	r0, [pc, #0]	@ (8004ac4 <_localeconv_r+0x4>)
 8004ac2:	4770      	bx	lr
 8004ac4:	2000015c 	.word	0x2000015c

08004ac8 <_close_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	2300      	movs	r3, #0
 8004acc:	4d05      	ldr	r5, [pc, #20]	@ (8004ae4 <_close_r+0x1c>)
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	f7fc fc5d 	bl	8001392 <_close>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_close_r+0x1a>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_close_r+0x1a>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	2000042c 	.word	0x2000042c

08004ae8 <_lseek_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	2200      	movs	r2, #0
 8004af2:	4d05      	ldr	r5, [pc, #20]	@ (8004b08 <_lseek_r+0x20>)
 8004af4:	602a      	str	r2, [r5, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f7fc fc6f 	bl	80013da <_lseek>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d102      	bne.n	8004b06 <_lseek_r+0x1e>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b103      	cbz	r3, 8004b06 <_lseek_r+0x1e>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	2000042c 	.word	0x2000042c

08004b0c <_read_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	2200      	movs	r2, #0
 8004b16:	4d05      	ldr	r5, [pc, #20]	@ (8004b2c <_read_r+0x20>)
 8004b18:	602a      	str	r2, [r5, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f7fc fc00 	bl	8001320 <_read>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_read_r+0x1e>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_read_r+0x1e>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	2000042c 	.word	0x2000042c

08004b30 <_write_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4d05      	ldr	r5, [pc, #20]	@ (8004b50 <_write_r+0x20>)
 8004b3c:	602a      	str	r2, [r5, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f7fc fc0b 	bl	800135a <_write>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_write_r+0x1e>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_write_r+0x1e>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	2000042c 	.word	0x2000042c

08004b54 <__errno>:
 8004b54:	4b01      	ldr	r3, [pc, #4]	@ (8004b5c <__errno+0x8>)
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	2000001c 	.word	0x2000001c

08004b60 <__libc_init_array>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	2600      	movs	r6, #0
 8004b64:	4d0c      	ldr	r5, [pc, #48]	@ (8004b98 <__libc_init_array+0x38>)
 8004b66:	4c0d      	ldr	r4, [pc, #52]	@ (8004b9c <__libc_init_array+0x3c>)
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	42a6      	cmp	r6, r4
 8004b6e:	d109      	bne.n	8004b84 <__libc_init_array+0x24>
 8004b70:	f001 fec8 	bl	8006904 <_init>
 8004b74:	2600      	movs	r6, #0
 8004b76:	4d0a      	ldr	r5, [pc, #40]	@ (8004ba0 <__libc_init_array+0x40>)
 8004b78:	4c0a      	ldr	r4, [pc, #40]	@ (8004ba4 <__libc_init_array+0x44>)
 8004b7a:	1b64      	subs	r4, r4, r5
 8004b7c:	10a4      	asrs	r4, r4, #2
 8004b7e:	42a6      	cmp	r6, r4
 8004b80:	d105      	bne.n	8004b8e <__libc_init_array+0x2e>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b88:	4798      	blx	r3
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7ee      	b.n	8004b6c <__libc_init_array+0xc>
 8004b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b92:	4798      	blx	r3
 8004b94:	3601      	adds	r6, #1
 8004b96:	e7f2      	b.n	8004b7e <__libc_init_array+0x1e>
 8004b98:	08006cc0 	.word	0x08006cc0
 8004b9c:	08006cc0 	.word	0x08006cc0
 8004ba0:	08006cc0 	.word	0x08006cc0
 8004ba4:	08006cc4 	.word	0x08006cc4

08004ba8 <__retarget_lock_init_recursive>:
 8004ba8:	4770      	bx	lr

08004baa <__retarget_lock_acquire_recursive>:
 8004baa:	4770      	bx	lr

08004bac <__retarget_lock_release_recursive>:
 8004bac:	4770      	bx	lr

08004bae <memchr>:
 8004bae:	4603      	mov	r3, r0
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	b2c9      	uxtb	r1, r1
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	d101      	bne.n	8004bc0 <memchr+0x12>
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	e003      	b.n	8004bc8 <memchr+0x1a>
 8004bc0:	7804      	ldrb	r4, [r0, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	428c      	cmp	r4, r1
 8004bc6:	d1f6      	bne.n	8004bb6 <memchr+0x8>
 8004bc8:	bd10      	pop	{r4, pc}

08004bca <quorem>:
 8004bca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bce:	6903      	ldr	r3, [r0, #16]
 8004bd0:	690c      	ldr	r4, [r1, #16]
 8004bd2:	4607      	mov	r7, r0
 8004bd4:	42a3      	cmp	r3, r4
 8004bd6:	db7e      	blt.n	8004cd6 <quorem+0x10c>
 8004bd8:	3c01      	subs	r4, #1
 8004bda:	00a3      	lsls	r3, r4, #2
 8004bdc:	f100 0514 	add.w	r5, r0, #20
 8004be0:	f101 0814 	add.w	r8, r1, #20
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c00:	d32e      	bcc.n	8004c60 <quorem+0x96>
 8004c02:	f04f 0a00 	mov.w	sl, #0
 8004c06:	46c4      	mov	ip, r8
 8004c08:	46ae      	mov	lr, r5
 8004c0a:	46d3      	mov	fp, sl
 8004c0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c10:	b298      	uxth	r0, r3
 8004c12:	fb06 a000 	mla	r0, r6, r0, sl
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	0c02      	lsrs	r2, r0, #16
 8004c1a:	fb06 2303 	mla	r3, r6, r3, r2
 8004c1e:	f8de 2000 	ldr.w	r2, [lr]
 8004c22:	b280      	uxth	r0, r0
 8004c24:	b292      	uxth	r2, r2
 8004c26:	1a12      	subs	r2, r2, r0
 8004c28:	445a      	add	r2, fp
 8004c2a:	f8de 0000 	ldr.w	r0, [lr]
 8004c2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004c38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c42:	45e1      	cmp	r9, ip
 8004c44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c48:	f84e 2b04 	str.w	r2, [lr], #4
 8004c4c:	d2de      	bcs.n	8004c0c <quorem+0x42>
 8004c4e:	9b00      	ldr	r3, [sp, #0]
 8004c50:	58eb      	ldr	r3, [r5, r3]
 8004c52:	b92b      	cbnz	r3, 8004c60 <quorem+0x96>
 8004c54:	9b01      	ldr	r3, [sp, #4]
 8004c56:	3b04      	subs	r3, #4
 8004c58:	429d      	cmp	r5, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	d32f      	bcc.n	8004cbe <quorem+0xf4>
 8004c5e:	613c      	str	r4, [r7, #16]
 8004c60:	4638      	mov	r0, r7
 8004c62:	f001 f97b 	bl	8005f5c <__mcmp>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	db25      	blt.n	8004cb6 <quorem+0xec>
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c72:	f8d1 c000 	ldr.w	ip, [r1]
 8004c76:	fa1f fe82 	uxth.w	lr, r2
 8004c7a:	fa1f f38c 	uxth.w	r3, ip
 8004c7e:	eba3 030e 	sub.w	r3, r3, lr
 8004c82:	4403      	add	r3, r0
 8004c84:	0c12      	lsrs	r2, r2, #16
 8004c86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c94:	45c1      	cmp	r9, r8
 8004c96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c9a:	f841 3b04 	str.w	r3, [r1], #4
 8004c9e:	d2e6      	bcs.n	8004c6e <quorem+0xa4>
 8004ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ca4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ca8:	b922      	cbnz	r2, 8004cb4 <quorem+0xea>
 8004caa:	3b04      	subs	r3, #4
 8004cac:	429d      	cmp	r5, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	d30b      	bcc.n	8004cca <quorem+0x100>
 8004cb2:	613c      	str	r4, [r7, #16]
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	b003      	add	sp, #12
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	2a00      	cmp	r2, #0
 8004cc4:	d1cb      	bne.n	8004c5e <quorem+0x94>
 8004cc6:	3c01      	subs	r4, #1
 8004cc8:	e7c6      	b.n	8004c58 <quorem+0x8e>
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	3b04      	subs	r3, #4
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	d1ef      	bne.n	8004cb2 <quorem+0xe8>
 8004cd2:	3c01      	subs	r4, #1
 8004cd4:	e7ea      	b.n	8004cac <quorem+0xe2>
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e7ee      	b.n	8004cb8 <quorem+0xee>
 8004cda:	0000      	movs	r0, r0
 8004cdc:	0000      	movs	r0, r0
	...

08004ce0 <_dtoa_r>:
 8004ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	69c7      	ldr	r7, [r0, #28]
 8004cea:	b097      	sub	sp, #92	@ 0x5c
 8004cec:	4683      	mov	fp, r0
 8004cee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004cf2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004cf4:	b97f      	cbnz	r7, 8004d16 <_dtoa_r+0x36>
 8004cf6:	2010      	movs	r0, #16
 8004cf8:	f000 fe02 	bl	8005900 <malloc>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	f8cb 001c 	str.w	r0, [fp, #28]
 8004d02:	b920      	cbnz	r0, 8004d0e <_dtoa_r+0x2e>
 8004d04:	21ef      	movs	r1, #239	@ 0xef
 8004d06:	4ba8      	ldr	r3, [pc, #672]	@ (8004fa8 <_dtoa_r+0x2c8>)
 8004d08:	48a8      	ldr	r0, [pc, #672]	@ (8004fac <_dtoa_r+0x2cc>)
 8004d0a:	f001 faf5 	bl	80062f8 <__assert_func>
 8004d0e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004d12:	6007      	str	r7, [r0, #0]
 8004d14:	60c7      	str	r7, [r0, #12]
 8004d16:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d1a:	6819      	ldr	r1, [r3, #0]
 8004d1c:	b159      	cbz	r1, 8004d36 <_dtoa_r+0x56>
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	2301      	movs	r3, #1
 8004d22:	4093      	lsls	r3, r2
 8004d24:	604a      	str	r2, [r1, #4]
 8004d26:	608b      	str	r3, [r1, #8]
 8004d28:	4658      	mov	r0, fp
 8004d2a:	f000 fedf 	bl	8005aec <_Bfree>
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	1e2b      	subs	r3, r5, #0
 8004d38:	bfaf      	iteee	ge
 8004d3a:	2300      	movge	r3, #0
 8004d3c:	2201      	movlt	r2, #1
 8004d3e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004d42:	9303      	strlt	r3, [sp, #12]
 8004d44:	bfa8      	it	ge
 8004d46:	6033      	strge	r3, [r6, #0]
 8004d48:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004d4c:	4b98      	ldr	r3, [pc, #608]	@ (8004fb0 <_dtoa_r+0x2d0>)
 8004d4e:	bfb8      	it	lt
 8004d50:	6032      	strlt	r2, [r6, #0]
 8004d52:	ea33 0308 	bics.w	r3, r3, r8
 8004d56:	d112      	bne.n	8004d7e <_dtoa_r+0x9e>
 8004d58:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004d5c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004d64:	4323      	orrs	r3, r4
 8004d66:	f000 8550 	beq.w	800580a <_dtoa_r+0xb2a>
 8004d6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d6c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004fb4 <_dtoa_r+0x2d4>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8552 	beq.w	800581a <_dtoa_r+0xb3a>
 8004d76:	f10a 0303 	add.w	r3, sl, #3
 8004d7a:	f000 bd4c 	b.w	8005816 <_dtoa_r+0xb36>
 8004d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d82:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004d86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f7fb fe0b 	bl	80009a8 <__aeabi_dcmpeq>
 8004d92:	4607      	mov	r7, r0
 8004d94:	b158      	cbz	r0, 8004dae <_dtoa_r+0xce>
 8004d96:	2301      	movs	r3, #1
 8004d98:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d9e:	b113      	cbz	r3, 8004da6 <_dtoa_r+0xc6>
 8004da0:	4b85      	ldr	r3, [pc, #532]	@ (8004fb8 <_dtoa_r+0x2d8>)
 8004da2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004fbc <_dtoa_r+0x2dc>
 8004daa:	f000 bd36 	b.w	800581a <_dtoa_r+0xb3a>
 8004dae:	ab14      	add	r3, sp, #80	@ 0x50
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	ab15      	add	r3, sp, #84	@ 0x54
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	4658      	mov	r0, fp
 8004db8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004dbc:	f001 f97e 	bl	80060bc <__d2b>
 8004dc0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004dc4:	4681      	mov	r9, r0
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d077      	beq.n	8004eba <_dtoa_r+0x1da>
 8004dca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dd0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004ddc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004de0:	9712      	str	r7, [sp, #72]	@ 0x48
 8004de2:	4619      	mov	r1, r3
 8004de4:	2200      	movs	r2, #0
 8004de6:	4b76      	ldr	r3, [pc, #472]	@ (8004fc0 <_dtoa_r+0x2e0>)
 8004de8:	f7fb f9be 	bl	8000168 <__aeabi_dsub>
 8004dec:	a368      	add	r3, pc, #416	@ (adr r3, 8004f90 <_dtoa_r+0x2b0>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f7fb fb71 	bl	80004d8 <__aeabi_dmul>
 8004df6:	a368      	add	r3, pc, #416	@ (adr r3, 8004f98 <_dtoa_r+0x2b8>)
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f7fb f9b6 	bl	800016c <__adddf3>
 8004e00:	4604      	mov	r4, r0
 8004e02:	4630      	mov	r0, r6
 8004e04:	460d      	mov	r5, r1
 8004e06:	f7fb fafd 	bl	8000404 <__aeabi_i2d>
 8004e0a:	a365      	add	r3, pc, #404	@ (adr r3, 8004fa0 <_dtoa_r+0x2c0>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f7fb fb62 	bl	80004d8 <__aeabi_dmul>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	f7fb f9a6 	bl	800016c <__adddf3>
 8004e20:	4604      	mov	r4, r0
 8004e22:	460d      	mov	r5, r1
 8004e24:	f7fb fe08 	bl	8000a38 <__aeabi_d2iz>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7fb fdc3 	bl	80009bc <__aeabi_dcmplt>
 8004e36:	b140      	cbz	r0, 8004e4a <_dtoa_r+0x16a>
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7fb fae3 	bl	8000404 <__aeabi_i2d>
 8004e3e:	4622      	mov	r2, r4
 8004e40:	462b      	mov	r3, r5
 8004e42:	f7fb fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8004e46:	b900      	cbnz	r0, 8004e4a <_dtoa_r+0x16a>
 8004e48:	3f01      	subs	r7, #1
 8004e4a:	2f16      	cmp	r7, #22
 8004e4c:	d853      	bhi.n	8004ef6 <_dtoa_r+0x216>
 8004e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e52:	4b5c      	ldr	r3, [pc, #368]	@ (8004fc4 <_dtoa_r+0x2e4>)
 8004e54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f7fb fdae 	bl	80009bc <__aeabi_dcmplt>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d04a      	beq.n	8004efa <_dtoa_r+0x21a>
 8004e64:	2300      	movs	r3, #0
 8004e66:	3f01      	subs	r7, #1
 8004e68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e6c:	1b9b      	subs	r3, r3, r6
 8004e6e:	1e5a      	subs	r2, r3, #1
 8004e70:	bf46      	itte	mi
 8004e72:	f1c3 0801 	rsbmi	r8, r3, #1
 8004e76:	2300      	movmi	r3, #0
 8004e78:	f04f 0800 	movpl.w	r8, #0
 8004e7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e7e:	bf48      	it	mi
 8004e80:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004e82:	2f00      	cmp	r7, #0
 8004e84:	db3b      	blt.n	8004efe <_dtoa_r+0x21e>
 8004e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e88:	970e      	str	r7, [sp, #56]	@ 0x38
 8004e8a:	443b      	add	r3, r7
 8004e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8e:	2300      	movs	r3, #0
 8004e90:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e94:	2b09      	cmp	r3, #9
 8004e96:	d866      	bhi.n	8004f66 <_dtoa_r+0x286>
 8004e98:	2b05      	cmp	r3, #5
 8004e9a:	bfc4      	itt	gt
 8004e9c:	3b04      	subgt	r3, #4
 8004e9e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004ea0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ea2:	bfc8      	it	gt
 8004ea4:	2400      	movgt	r4, #0
 8004ea6:	f1a3 0302 	sub.w	r3, r3, #2
 8004eaa:	bfd8      	it	le
 8004eac:	2401      	movle	r4, #1
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d864      	bhi.n	8004f7c <_dtoa_r+0x29c>
 8004eb2:	e8df f003 	tbb	[pc, r3]
 8004eb6:	382b      	.short	0x382b
 8004eb8:	5636      	.short	0x5636
 8004eba:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004ebe:	441e      	add	r6, r3
 8004ec0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	bfc1      	itttt	gt
 8004ec8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ecc:	fa08 f803 	lslgt.w	r8, r8, r3
 8004ed0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004ed4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004ed8:	bfd6      	itet	le
 8004eda:	f1c3 0320 	rsble	r3, r3, #32
 8004ede:	ea48 0003 	orrgt.w	r0, r8, r3
 8004ee2:	fa04 f003 	lslle.w	r0, r4, r3
 8004ee6:	f7fb fa7d 	bl	80003e4 <__aeabi_ui2d>
 8004eea:	2201      	movs	r2, #1
 8004eec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004ef0:	3e01      	subs	r6, #1
 8004ef2:	9212      	str	r2, [sp, #72]	@ 0x48
 8004ef4:	e775      	b.n	8004de2 <_dtoa_r+0x102>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e7b6      	b.n	8004e68 <_dtoa_r+0x188>
 8004efa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004efc:	e7b5      	b.n	8004e6a <_dtoa_r+0x18a>
 8004efe:	427b      	negs	r3, r7
 8004f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f02:	2300      	movs	r3, #0
 8004f04:	eba8 0807 	sub.w	r8, r8, r7
 8004f08:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f0a:	e7c2      	b.n	8004e92 <_dtoa_r+0x1b2>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc35      	bgt.n	8004f82 <_dtoa_r+0x2a2>
 8004f16:	2301      	movs	r3, #1
 8004f18:	461a      	mov	r2, r3
 8004f1a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004f1e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004f20:	e00b      	b.n	8004f3a <_dtoa_r+0x25a>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e7f3      	b.n	8004f0e <_dtoa_r+0x22e>
 8004f26:	2300      	movs	r3, #0
 8004f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	9308      	str	r3, [sp, #32]
 8004f30:	3301      	adds	r3, #1
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	9307      	str	r3, [sp, #28]
 8004f36:	bfb8      	it	lt
 8004f38:	2301      	movlt	r3, #1
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004f42:	f102 0514 	add.w	r5, r2, #20
 8004f46:	429d      	cmp	r5, r3
 8004f48:	d91f      	bls.n	8004f8a <_dtoa_r+0x2aa>
 8004f4a:	6041      	str	r1, [r0, #4]
 8004f4c:	4658      	mov	r0, fp
 8004f4e:	f000 fd8d 	bl	8005a6c <_Balloc>
 8004f52:	4682      	mov	sl, r0
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d139      	bne.n	8004fcc <_dtoa_r+0x2ec>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <_dtoa_r+0x2e8>)
 8004f60:	e6d2      	b.n	8004d08 <_dtoa_r+0x28>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e7e0      	b.n	8004f28 <_dtoa_r+0x248>
 8004f66:	2401      	movs	r4, #1
 8004f68:	2300      	movs	r3, #0
 8004f6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f6c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f72:	2200      	movs	r2, #0
 8004f74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004f78:	2312      	movs	r3, #18
 8004f7a:	e7d0      	b.n	8004f1e <_dtoa_r+0x23e>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f80:	e7f5      	b.n	8004f6e <_dtoa_r+0x28e>
 8004f82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004f88:	e7d7      	b.n	8004f3a <_dtoa_r+0x25a>
 8004f8a:	3101      	adds	r1, #1
 8004f8c:	0052      	lsls	r2, r2, #1
 8004f8e:	e7d8      	b.n	8004f42 <_dtoa_r+0x262>
 8004f90:	636f4361 	.word	0x636f4361
 8004f94:	3fd287a7 	.word	0x3fd287a7
 8004f98:	8b60c8b3 	.word	0x8b60c8b3
 8004f9c:	3fc68a28 	.word	0x3fc68a28
 8004fa0:	509f79fb 	.word	0x509f79fb
 8004fa4:	3fd34413 	.word	0x3fd34413
 8004fa8:	0800698b 	.word	0x0800698b
 8004fac:	080069a2 	.word	0x080069a2
 8004fb0:	7ff00000 	.word	0x7ff00000
 8004fb4:	08006987 	.word	0x08006987
 8004fb8:	0800695b 	.word	0x0800695b
 8004fbc:	0800695a 	.word	0x0800695a
 8004fc0:	3ff80000 	.word	0x3ff80000
 8004fc4:	08006a98 	.word	0x08006a98
 8004fc8:	080069fa 	.word	0x080069fa
 8004fcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fd0:	6018      	str	r0, [r3, #0]
 8004fd2:	9b07      	ldr	r3, [sp, #28]
 8004fd4:	2b0e      	cmp	r3, #14
 8004fd6:	f200 80a4 	bhi.w	8005122 <_dtoa_r+0x442>
 8004fda:	2c00      	cmp	r4, #0
 8004fdc:	f000 80a1 	beq.w	8005122 <_dtoa_r+0x442>
 8004fe0:	2f00      	cmp	r7, #0
 8004fe2:	dd33      	ble.n	800504c <_dtoa_r+0x36c>
 8004fe4:	4b86      	ldr	r3, [pc, #536]	@ (8005200 <_dtoa_r+0x520>)
 8004fe6:	f007 020f 	and.w	r2, r7, #15
 8004fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fee:	05f8      	lsls	r0, r7, #23
 8004ff0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ff4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ff8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004ffc:	d516      	bpl.n	800502c <_dtoa_r+0x34c>
 8004ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005002:	4b80      	ldr	r3, [pc, #512]	@ (8005204 <_dtoa_r+0x524>)
 8005004:	2603      	movs	r6, #3
 8005006:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800500a:	f7fb fb8f 	bl	800072c <__aeabi_ddiv>
 800500e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005012:	f004 040f 	and.w	r4, r4, #15
 8005016:	4d7b      	ldr	r5, [pc, #492]	@ (8005204 <_dtoa_r+0x524>)
 8005018:	b954      	cbnz	r4, 8005030 <_dtoa_r+0x350>
 800501a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800501e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005022:	f7fb fb83 	bl	800072c <__aeabi_ddiv>
 8005026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800502a:	e028      	b.n	800507e <_dtoa_r+0x39e>
 800502c:	2602      	movs	r6, #2
 800502e:	e7f2      	b.n	8005016 <_dtoa_r+0x336>
 8005030:	07e1      	lsls	r1, r4, #31
 8005032:	d508      	bpl.n	8005046 <_dtoa_r+0x366>
 8005034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005038:	e9d5 2300 	ldrd	r2, r3, [r5]
 800503c:	f7fb fa4c 	bl	80004d8 <__aeabi_dmul>
 8005040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005044:	3601      	adds	r6, #1
 8005046:	1064      	asrs	r4, r4, #1
 8005048:	3508      	adds	r5, #8
 800504a:	e7e5      	b.n	8005018 <_dtoa_r+0x338>
 800504c:	f000 80d2 	beq.w	80051f4 <_dtoa_r+0x514>
 8005050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005054:	427c      	negs	r4, r7
 8005056:	4b6a      	ldr	r3, [pc, #424]	@ (8005200 <_dtoa_r+0x520>)
 8005058:	f004 020f 	and.w	r2, r4, #15
 800505c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fb fa38 	bl	80004d8 <__aeabi_dmul>
 8005068:	2602      	movs	r6, #2
 800506a:	2300      	movs	r3, #0
 800506c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005070:	4d64      	ldr	r5, [pc, #400]	@ (8005204 <_dtoa_r+0x524>)
 8005072:	1124      	asrs	r4, r4, #4
 8005074:	2c00      	cmp	r4, #0
 8005076:	f040 80b2 	bne.w	80051de <_dtoa_r+0x4fe>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1d3      	bne.n	8005026 <_dtoa_r+0x346>
 800507e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80b7 	beq.w	80051f8 <_dtoa_r+0x518>
 800508a:	2200      	movs	r2, #0
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	4b5d      	ldr	r3, [pc, #372]	@ (8005208 <_dtoa_r+0x528>)
 8005092:	f7fb fc93 	bl	80009bc <__aeabi_dcmplt>
 8005096:	2800      	cmp	r0, #0
 8005098:	f000 80ae 	beq.w	80051f8 <_dtoa_r+0x518>
 800509c:	9b07      	ldr	r3, [sp, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80aa 	beq.w	80051f8 <_dtoa_r+0x518>
 80050a4:	9b08      	ldr	r3, [sp, #32]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dd37      	ble.n	800511a <_dtoa_r+0x43a>
 80050aa:	1e7b      	subs	r3, r7, #1
 80050ac:	4620      	mov	r0, r4
 80050ae:	9304      	str	r3, [sp, #16]
 80050b0:	2200      	movs	r2, #0
 80050b2:	4629      	mov	r1, r5
 80050b4:	4b55      	ldr	r3, [pc, #340]	@ (800520c <_dtoa_r+0x52c>)
 80050b6:	f7fb fa0f 	bl	80004d8 <__aeabi_dmul>
 80050ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050be:	9c08      	ldr	r4, [sp, #32]
 80050c0:	3601      	adds	r6, #1
 80050c2:	4630      	mov	r0, r6
 80050c4:	f7fb f99e 	bl	8000404 <__aeabi_i2d>
 80050c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050cc:	f7fb fa04 	bl	80004d8 <__aeabi_dmul>
 80050d0:	2200      	movs	r2, #0
 80050d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005210 <_dtoa_r+0x530>)
 80050d4:	f7fb f84a 	bl	800016c <__adddf3>
 80050d8:	4605      	mov	r5, r0
 80050da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80050de:	2c00      	cmp	r4, #0
 80050e0:	f040 809a 	bne.w	8005218 <_dtoa_r+0x538>
 80050e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e8:	2200      	movs	r2, #0
 80050ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005214 <_dtoa_r+0x534>)
 80050ec:	f7fb f83c 	bl	8000168 <__aeabi_dsub>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050f8:	462a      	mov	r2, r5
 80050fa:	4633      	mov	r3, r6
 80050fc:	f7fb fc7c 	bl	80009f8 <__aeabi_dcmpgt>
 8005100:	2800      	cmp	r0, #0
 8005102:	f040 828e 	bne.w	8005622 <_dtoa_r+0x942>
 8005106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800510a:	462a      	mov	r2, r5
 800510c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005110:	f7fb fc54 	bl	80009bc <__aeabi_dcmplt>
 8005114:	2800      	cmp	r0, #0
 8005116:	f040 8127 	bne.w	8005368 <_dtoa_r+0x688>
 800511a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800511e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005122:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005124:	2b00      	cmp	r3, #0
 8005126:	f2c0 8163 	blt.w	80053f0 <_dtoa_r+0x710>
 800512a:	2f0e      	cmp	r7, #14
 800512c:	f300 8160 	bgt.w	80053f0 <_dtoa_r+0x710>
 8005130:	4b33      	ldr	r3, [pc, #204]	@ (8005200 <_dtoa_r+0x520>)
 8005132:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005136:	e9d3 3400 	ldrd	r3, r4, [r3]
 800513a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800513e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005140:	2b00      	cmp	r3, #0
 8005142:	da03      	bge.n	800514c <_dtoa_r+0x46c>
 8005144:	9b07      	ldr	r3, [sp, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f340 8100 	ble.w	800534c <_dtoa_r+0x66c>
 800514c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005150:	4656      	mov	r6, sl
 8005152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005156:	4620      	mov	r0, r4
 8005158:	4629      	mov	r1, r5
 800515a:	f7fb fae7 	bl	800072c <__aeabi_ddiv>
 800515e:	f7fb fc6b 	bl	8000a38 <__aeabi_d2iz>
 8005162:	4680      	mov	r8, r0
 8005164:	f7fb f94e 	bl	8000404 <__aeabi_i2d>
 8005168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800516c:	f7fb f9b4 	bl	80004d8 <__aeabi_dmul>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4620      	mov	r0, r4
 8005176:	4629      	mov	r1, r5
 8005178:	f7fa fff6 	bl	8000168 <__aeabi_dsub>
 800517c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005180:	9d07      	ldr	r5, [sp, #28]
 8005182:	f806 4b01 	strb.w	r4, [r6], #1
 8005186:	eba6 040a 	sub.w	r4, r6, sl
 800518a:	42a5      	cmp	r5, r4
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	f040 8116 	bne.w	80053c0 <_dtoa_r+0x6e0>
 8005194:	f7fa ffea 	bl	800016c <__adddf3>
 8005198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800519c:	4604      	mov	r4, r0
 800519e:	460d      	mov	r5, r1
 80051a0:	f7fb fc2a 	bl	80009f8 <__aeabi_dcmpgt>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	f040 80f8 	bne.w	800539a <_dtoa_r+0x6ba>
 80051aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ae:	4620      	mov	r0, r4
 80051b0:	4629      	mov	r1, r5
 80051b2:	f7fb fbf9 	bl	80009a8 <__aeabi_dcmpeq>
 80051b6:	b118      	cbz	r0, 80051c0 <_dtoa_r+0x4e0>
 80051b8:	f018 0f01 	tst.w	r8, #1
 80051bc:	f040 80ed 	bne.w	800539a <_dtoa_r+0x6ba>
 80051c0:	4649      	mov	r1, r9
 80051c2:	4658      	mov	r0, fp
 80051c4:	f000 fc92 	bl	8005aec <_Bfree>
 80051c8:	2300      	movs	r3, #0
 80051ca:	7033      	strb	r3, [r6, #0]
 80051cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80051ce:	3701      	adds	r7, #1
 80051d0:	601f      	str	r7, [r3, #0]
 80051d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8320 	beq.w	800581a <_dtoa_r+0xb3a>
 80051da:	601e      	str	r6, [r3, #0]
 80051dc:	e31d      	b.n	800581a <_dtoa_r+0xb3a>
 80051de:	07e2      	lsls	r2, r4, #31
 80051e0:	d505      	bpl.n	80051ee <_dtoa_r+0x50e>
 80051e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051e6:	f7fb f977 	bl	80004d8 <__aeabi_dmul>
 80051ea:	2301      	movs	r3, #1
 80051ec:	3601      	adds	r6, #1
 80051ee:	1064      	asrs	r4, r4, #1
 80051f0:	3508      	adds	r5, #8
 80051f2:	e73f      	b.n	8005074 <_dtoa_r+0x394>
 80051f4:	2602      	movs	r6, #2
 80051f6:	e742      	b.n	800507e <_dtoa_r+0x39e>
 80051f8:	9c07      	ldr	r4, [sp, #28]
 80051fa:	9704      	str	r7, [sp, #16]
 80051fc:	e761      	b.n	80050c2 <_dtoa_r+0x3e2>
 80051fe:	bf00      	nop
 8005200:	08006a98 	.word	0x08006a98
 8005204:	08006a70 	.word	0x08006a70
 8005208:	3ff00000 	.word	0x3ff00000
 800520c:	40240000 	.word	0x40240000
 8005210:	401c0000 	.word	0x401c0000
 8005214:	40140000 	.word	0x40140000
 8005218:	4b70      	ldr	r3, [pc, #448]	@ (80053dc <_dtoa_r+0x6fc>)
 800521a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800521c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005220:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005224:	4454      	add	r4, sl
 8005226:	2900      	cmp	r1, #0
 8005228:	d045      	beq.n	80052b6 <_dtoa_r+0x5d6>
 800522a:	2000      	movs	r0, #0
 800522c:	496c      	ldr	r1, [pc, #432]	@ (80053e0 <_dtoa_r+0x700>)
 800522e:	f7fb fa7d 	bl	800072c <__aeabi_ddiv>
 8005232:	4633      	mov	r3, r6
 8005234:	462a      	mov	r2, r5
 8005236:	f7fa ff97 	bl	8000168 <__aeabi_dsub>
 800523a:	4656      	mov	r6, sl
 800523c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005244:	f7fb fbf8 	bl	8000a38 <__aeabi_d2iz>
 8005248:	4605      	mov	r5, r0
 800524a:	f7fb f8db 	bl	8000404 <__aeabi_i2d>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005256:	f7fa ff87 	bl	8000168 <__aeabi_dsub>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	3530      	adds	r5, #48	@ 0x30
 8005260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005268:	f806 5b01 	strb.w	r5, [r6], #1
 800526c:	f7fb fba6 	bl	80009bc <__aeabi_dcmplt>
 8005270:	2800      	cmp	r0, #0
 8005272:	d163      	bne.n	800533c <_dtoa_r+0x65c>
 8005274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005278:	2000      	movs	r0, #0
 800527a:	495a      	ldr	r1, [pc, #360]	@ (80053e4 <_dtoa_r+0x704>)
 800527c:	f7fa ff74 	bl	8000168 <__aeabi_dsub>
 8005280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005284:	f7fb fb9a 	bl	80009bc <__aeabi_dcmplt>
 8005288:	2800      	cmp	r0, #0
 800528a:	f040 8087 	bne.w	800539c <_dtoa_r+0x6bc>
 800528e:	42a6      	cmp	r6, r4
 8005290:	f43f af43 	beq.w	800511a <_dtoa_r+0x43a>
 8005294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005298:	2200      	movs	r2, #0
 800529a:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <_dtoa_r+0x708>)
 800529c:	f7fb f91c 	bl	80004d8 <__aeabi_dmul>
 80052a0:	2200      	movs	r2, #0
 80052a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052aa:	4b4f      	ldr	r3, [pc, #316]	@ (80053e8 <_dtoa_r+0x708>)
 80052ac:	f7fb f914 	bl	80004d8 <__aeabi_dmul>
 80052b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b4:	e7c4      	b.n	8005240 <_dtoa_r+0x560>
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	f7fb f90d 	bl	80004d8 <__aeabi_dmul>
 80052be:	4656      	mov	r6, sl
 80052c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052c4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80052c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ca:	f7fb fbb5 	bl	8000a38 <__aeabi_d2iz>
 80052ce:	4605      	mov	r5, r0
 80052d0:	f7fb f898 	bl	8000404 <__aeabi_i2d>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052dc:	f7fa ff44 	bl	8000168 <__aeabi_dsub>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	3530      	adds	r5, #48	@ 0x30
 80052e6:	f806 5b01 	strb.w	r5, [r6], #1
 80052ea:	42a6      	cmp	r6, r4
 80052ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	d124      	bne.n	8005340 <_dtoa_r+0x660>
 80052f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052fa:	4b39      	ldr	r3, [pc, #228]	@ (80053e0 <_dtoa_r+0x700>)
 80052fc:	f7fa ff36 	bl	800016c <__adddf3>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005308:	f7fb fb76 	bl	80009f8 <__aeabi_dcmpgt>
 800530c:	2800      	cmp	r0, #0
 800530e:	d145      	bne.n	800539c <_dtoa_r+0x6bc>
 8005310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005314:	2000      	movs	r0, #0
 8005316:	4932      	ldr	r1, [pc, #200]	@ (80053e0 <_dtoa_r+0x700>)
 8005318:	f7fa ff26 	bl	8000168 <__aeabi_dsub>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005324:	f7fb fb4a 	bl	80009bc <__aeabi_dcmplt>
 8005328:	2800      	cmp	r0, #0
 800532a:	f43f aef6 	beq.w	800511a <_dtoa_r+0x43a>
 800532e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005330:	1e73      	subs	r3, r6, #1
 8005332:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005334:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005338:	2b30      	cmp	r3, #48	@ 0x30
 800533a:	d0f8      	beq.n	800532e <_dtoa_r+0x64e>
 800533c:	9f04      	ldr	r7, [sp, #16]
 800533e:	e73f      	b.n	80051c0 <_dtoa_r+0x4e0>
 8005340:	4b29      	ldr	r3, [pc, #164]	@ (80053e8 <_dtoa_r+0x708>)
 8005342:	f7fb f8c9 	bl	80004d8 <__aeabi_dmul>
 8005346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800534a:	e7bc      	b.n	80052c6 <_dtoa_r+0x5e6>
 800534c:	d10c      	bne.n	8005368 <_dtoa_r+0x688>
 800534e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005352:	2200      	movs	r2, #0
 8005354:	4b25      	ldr	r3, [pc, #148]	@ (80053ec <_dtoa_r+0x70c>)
 8005356:	f7fb f8bf 	bl	80004d8 <__aeabi_dmul>
 800535a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800535e:	f7fb fb41 	bl	80009e4 <__aeabi_dcmpge>
 8005362:	2800      	cmp	r0, #0
 8005364:	f000 815b 	beq.w	800561e <_dtoa_r+0x93e>
 8005368:	2400      	movs	r4, #0
 800536a:	4625      	mov	r5, r4
 800536c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800536e:	4656      	mov	r6, sl
 8005370:	43db      	mvns	r3, r3
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	2700      	movs	r7, #0
 8005376:	4621      	mov	r1, r4
 8005378:	4658      	mov	r0, fp
 800537a:	f000 fbb7 	bl	8005aec <_Bfree>
 800537e:	2d00      	cmp	r5, #0
 8005380:	d0dc      	beq.n	800533c <_dtoa_r+0x65c>
 8005382:	b12f      	cbz	r7, 8005390 <_dtoa_r+0x6b0>
 8005384:	42af      	cmp	r7, r5
 8005386:	d003      	beq.n	8005390 <_dtoa_r+0x6b0>
 8005388:	4639      	mov	r1, r7
 800538a:	4658      	mov	r0, fp
 800538c:	f000 fbae 	bl	8005aec <_Bfree>
 8005390:	4629      	mov	r1, r5
 8005392:	4658      	mov	r0, fp
 8005394:	f000 fbaa 	bl	8005aec <_Bfree>
 8005398:	e7d0      	b.n	800533c <_dtoa_r+0x65c>
 800539a:	9704      	str	r7, [sp, #16]
 800539c:	4633      	mov	r3, r6
 800539e:	461e      	mov	r6, r3
 80053a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053a4:	2a39      	cmp	r2, #57	@ 0x39
 80053a6:	d107      	bne.n	80053b8 <_dtoa_r+0x6d8>
 80053a8:	459a      	cmp	sl, r3
 80053aa:	d1f8      	bne.n	800539e <_dtoa_r+0x6be>
 80053ac:	9a04      	ldr	r2, [sp, #16]
 80053ae:	3201      	adds	r2, #1
 80053b0:	9204      	str	r2, [sp, #16]
 80053b2:	2230      	movs	r2, #48	@ 0x30
 80053b4:	f88a 2000 	strb.w	r2, [sl]
 80053b8:	781a      	ldrb	r2, [r3, #0]
 80053ba:	3201      	adds	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e7bd      	b.n	800533c <_dtoa_r+0x65c>
 80053c0:	2200      	movs	r2, #0
 80053c2:	4b09      	ldr	r3, [pc, #36]	@ (80053e8 <_dtoa_r+0x708>)
 80053c4:	f7fb f888 	bl	80004d8 <__aeabi_dmul>
 80053c8:	2200      	movs	r2, #0
 80053ca:	2300      	movs	r3, #0
 80053cc:	4604      	mov	r4, r0
 80053ce:	460d      	mov	r5, r1
 80053d0:	f7fb faea 	bl	80009a8 <__aeabi_dcmpeq>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f43f aebc 	beq.w	8005152 <_dtoa_r+0x472>
 80053da:	e6f1      	b.n	80051c0 <_dtoa_r+0x4e0>
 80053dc:	08006a98 	.word	0x08006a98
 80053e0:	3fe00000 	.word	0x3fe00000
 80053e4:	3ff00000 	.word	0x3ff00000
 80053e8:	40240000 	.word	0x40240000
 80053ec:	40140000 	.word	0x40140000
 80053f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	f000 80db 	beq.w	80055ae <_dtoa_r+0x8ce>
 80053f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80053fa:	2a01      	cmp	r2, #1
 80053fc:	f300 80bf 	bgt.w	800557e <_dtoa_r+0x89e>
 8005400:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005402:	2a00      	cmp	r2, #0
 8005404:	f000 80b7 	beq.w	8005576 <_dtoa_r+0x896>
 8005408:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800540c:	4646      	mov	r6, r8
 800540e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005412:	2101      	movs	r1, #1
 8005414:	441a      	add	r2, r3
 8005416:	4658      	mov	r0, fp
 8005418:	4498      	add	r8, r3
 800541a:	9209      	str	r2, [sp, #36]	@ 0x24
 800541c:	f000 fc1a 	bl	8005c54 <__i2b>
 8005420:	4605      	mov	r5, r0
 8005422:	b15e      	cbz	r6, 800543c <_dtoa_r+0x75c>
 8005424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	dd08      	ble.n	800543c <_dtoa_r+0x75c>
 800542a:	42b3      	cmp	r3, r6
 800542c:	bfa8      	it	ge
 800542e:	4633      	movge	r3, r6
 8005430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005432:	eba8 0803 	sub.w	r8, r8, r3
 8005436:	1af6      	subs	r6, r6, r3
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	9309      	str	r3, [sp, #36]	@ 0x24
 800543c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800543e:	b1f3      	cbz	r3, 800547e <_dtoa_r+0x79e>
 8005440:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80b7 	beq.w	80055b6 <_dtoa_r+0x8d6>
 8005448:	b18c      	cbz	r4, 800546e <_dtoa_r+0x78e>
 800544a:	4629      	mov	r1, r5
 800544c:	4622      	mov	r2, r4
 800544e:	4658      	mov	r0, fp
 8005450:	f000 fcbe 	bl	8005dd0 <__pow5mult>
 8005454:	464a      	mov	r2, r9
 8005456:	4601      	mov	r1, r0
 8005458:	4605      	mov	r5, r0
 800545a:	4658      	mov	r0, fp
 800545c:	f000 fc10 	bl	8005c80 <__multiply>
 8005460:	4649      	mov	r1, r9
 8005462:	9004      	str	r0, [sp, #16]
 8005464:	4658      	mov	r0, fp
 8005466:	f000 fb41 	bl	8005aec <_Bfree>
 800546a:	9b04      	ldr	r3, [sp, #16]
 800546c:	4699      	mov	r9, r3
 800546e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005470:	1b1a      	subs	r2, r3, r4
 8005472:	d004      	beq.n	800547e <_dtoa_r+0x79e>
 8005474:	4649      	mov	r1, r9
 8005476:	4658      	mov	r0, fp
 8005478:	f000 fcaa 	bl	8005dd0 <__pow5mult>
 800547c:	4681      	mov	r9, r0
 800547e:	2101      	movs	r1, #1
 8005480:	4658      	mov	r0, fp
 8005482:	f000 fbe7 	bl	8005c54 <__i2b>
 8005486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005488:	4604      	mov	r4, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 81c9 	beq.w	8005822 <_dtoa_r+0xb42>
 8005490:	461a      	mov	r2, r3
 8005492:	4601      	mov	r1, r0
 8005494:	4658      	mov	r0, fp
 8005496:	f000 fc9b 	bl	8005dd0 <__pow5mult>
 800549a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800549c:	4604      	mov	r4, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	f300 808f 	bgt.w	80055c2 <_dtoa_r+0x8e2>
 80054a4:	9b02      	ldr	r3, [sp, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 8087 	bne.w	80055ba <_dtoa_r+0x8da>
 80054ac:	9b03      	ldr	r3, [sp, #12]
 80054ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 8083 	bne.w	80055be <_dtoa_r+0x8de>
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054be:	0d1b      	lsrs	r3, r3, #20
 80054c0:	051b      	lsls	r3, r3, #20
 80054c2:	b12b      	cbz	r3, 80054d0 <_dtoa_r+0x7f0>
 80054c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c6:	f108 0801 	add.w	r8, r8, #1
 80054ca:	3301      	adds	r3, #1
 80054cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ce:	2301      	movs	r3, #1
 80054d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80054d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 81aa 	beq.w	800582e <_dtoa_r+0xb4e>
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054e0:	6918      	ldr	r0, [r3, #16]
 80054e2:	f000 fb6b 	bl	8005bbc <__hi0bits>
 80054e6:	f1c0 0020 	rsb	r0, r0, #32
 80054ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ec:	4418      	add	r0, r3
 80054ee:	f010 001f 	ands.w	r0, r0, #31
 80054f2:	d071      	beq.n	80055d8 <_dtoa_r+0x8f8>
 80054f4:	f1c0 0320 	rsb	r3, r0, #32
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	dd65      	ble.n	80055c8 <_dtoa_r+0x8e8>
 80054fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054fe:	f1c0 001c 	rsb	r0, r0, #28
 8005502:	4403      	add	r3, r0
 8005504:	4480      	add	r8, r0
 8005506:	4406      	add	r6, r0
 8005508:	9309      	str	r3, [sp, #36]	@ 0x24
 800550a:	f1b8 0f00 	cmp.w	r8, #0
 800550e:	dd05      	ble.n	800551c <_dtoa_r+0x83c>
 8005510:	4649      	mov	r1, r9
 8005512:	4642      	mov	r2, r8
 8005514:	4658      	mov	r0, fp
 8005516:	f000 fcb5 	bl	8005e84 <__lshift>
 800551a:	4681      	mov	r9, r0
 800551c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	dd05      	ble.n	800552e <_dtoa_r+0x84e>
 8005522:	4621      	mov	r1, r4
 8005524:	461a      	mov	r2, r3
 8005526:	4658      	mov	r0, fp
 8005528:	f000 fcac 	bl	8005e84 <__lshift>
 800552c:	4604      	mov	r4, r0
 800552e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d053      	beq.n	80055dc <_dtoa_r+0x8fc>
 8005534:	4621      	mov	r1, r4
 8005536:	4648      	mov	r0, r9
 8005538:	f000 fd10 	bl	8005f5c <__mcmp>
 800553c:	2800      	cmp	r0, #0
 800553e:	da4d      	bge.n	80055dc <_dtoa_r+0x8fc>
 8005540:	1e7b      	subs	r3, r7, #1
 8005542:	4649      	mov	r1, r9
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	220a      	movs	r2, #10
 8005548:	2300      	movs	r3, #0
 800554a:	4658      	mov	r0, fp
 800554c:	f000 faf0 	bl	8005b30 <__multadd>
 8005550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005552:	4681      	mov	r9, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 816c 	beq.w	8005832 <_dtoa_r+0xb52>
 800555a:	2300      	movs	r3, #0
 800555c:	4629      	mov	r1, r5
 800555e:	220a      	movs	r2, #10
 8005560:	4658      	mov	r0, fp
 8005562:	f000 fae5 	bl	8005b30 <__multadd>
 8005566:	9b08      	ldr	r3, [sp, #32]
 8005568:	4605      	mov	r5, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	dc61      	bgt.n	8005632 <_dtoa_r+0x952>
 800556e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005570:	2b02      	cmp	r3, #2
 8005572:	dc3b      	bgt.n	80055ec <_dtoa_r+0x90c>
 8005574:	e05d      	b.n	8005632 <_dtoa_r+0x952>
 8005576:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005578:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800557c:	e746      	b.n	800540c <_dtoa_r+0x72c>
 800557e:	9b07      	ldr	r3, [sp, #28]
 8005580:	1e5c      	subs	r4, r3, #1
 8005582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005584:	42a3      	cmp	r3, r4
 8005586:	bfbf      	itttt	lt
 8005588:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800558a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800558c:	1ae3      	sublt	r3, r4, r3
 800558e:	18d2      	addlt	r2, r2, r3
 8005590:	bfa8      	it	ge
 8005592:	1b1c      	subge	r4, r3, r4
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	bfbe      	ittt	lt
 8005598:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800559a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800559c:	2400      	movlt	r4, #0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bfb5      	itete	lt
 80055a2:	eba8 0603 	sublt.w	r6, r8, r3
 80055a6:	4646      	movge	r6, r8
 80055a8:	2300      	movlt	r3, #0
 80055aa:	9b07      	ldrge	r3, [sp, #28]
 80055ac:	e730      	b.n	8005410 <_dtoa_r+0x730>
 80055ae:	4646      	mov	r6, r8
 80055b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80055b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80055b4:	e735      	b.n	8005422 <_dtoa_r+0x742>
 80055b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055b8:	e75c      	b.n	8005474 <_dtoa_r+0x794>
 80055ba:	2300      	movs	r3, #0
 80055bc:	e788      	b.n	80054d0 <_dtoa_r+0x7f0>
 80055be:	9b02      	ldr	r3, [sp, #8]
 80055c0:	e786      	b.n	80054d0 <_dtoa_r+0x7f0>
 80055c2:	2300      	movs	r3, #0
 80055c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80055c6:	e788      	b.n	80054da <_dtoa_r+0x7fa>
 80055c8:	d09f      	beq.n	800550a <_dtoa_r+0x82a>
 80055ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055cc:	331c      	adds	r3, #28
 80055ce:	441a      	add	r2, r3
 80055d0:	4498      	add	r8, r3
 80055d2:	441e      	add	r6, r3
 80055d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055d6:	e798      	b.n	800550a <_dtoa_r+0x82a>
 80055d8:	4603      	mov	r3, r0
 80055da:	e7f6      	b.n	80055ca <_dtoa_r+0x8ea>
 80055dc:	9b07      	ldr	r3, [sp, #28]
 80055de:	9704      	str	r7, [sp, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dc20      	bgt.n	8005626 <_dtoa_r+0x946>
 80055e4:	9308      	str	r3, [sp, #32]
 80055e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	dd1e      	ble.n	800562a <_dtoa_r+0x94a>
 80055ec:	9b08      	ldr	r3, [sp, #32]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f47f aebc 	bne.w	800536c <_dtoa_r+0x68c>
 80055f4:	4621      	mov	r1, r4
 80055f6:	2205      	movs	r2, #5
 80055f8:	4658      	mov	r0, fp
 80055fa:	f000 fa99 	bl	8005b30 <__multadd>
 80055fe:	4601      	mov	r1, r0
 8005600:	4604      	mov	r4, r0
 8005602:	4648      	mov	r0, r9
 8005604:	f000 fcaa 	bl	8005f5c <__mcmp>
 8005608:	2800      	cmp	r0, #0
 800560a:	f77f aeaf 	ble.w	800536c <_dtoa_r+0x68c>
 800560e:	2331      	movs	r3, #49	@ 0x31
 8005610:	4656      	mov	r6, sl
 8005612:	f806 3b01 	strb.w	r3, [r6], #1
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	3301      	adds	r3, #1
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	e6aa      	b.n	8005374 <_dtoa_r+0x694>
 800561e:	9c07      	ldr	r4, [sp, #28]
 8005620:	9704      	str	r7, [sp, #16]
 8005622:	4625      	mov	r5, r4
 8005624:	e7f3      	b.n	800560e <_dtoa_r+0x92e>
 8005626:	9b07      	ldr	r3, [sp, #28]
 8005628:	9308      	str	r3, [sp, #32]
 800562a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8104 	beq.w	800583a <_dtoa_r+0xb5a>
 8005632:	2e00      	cmp	r6, #0
 8005634:	dd05      	ble.n	8005642 <_dtoa_r+0x962>
 8005636:	4629      	mov	r1, r5
 8005638:	4632      	mov	r2, r6
 800563a:	4658      	mov	r0, fp
 800563c:	f000 fc22 	bl	8005e84 <__lshift>
 8005640:	4605      	mov	r5, r0
 8005642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005644:	2b00      	cmp	r3, #0
 8005646:	d05a      	beq.n	80056fe <_dtoa_r+0xa1e>
 8005648:	4658      	mov	r0, fp
 800564a:	6869      	ldr	r1, [r5, #4]
 800564c:	f000 fa0e 	bl	8005a6c <_Balloc>
 8005650:	4606      	mov	r6, r0
 8005652:	b928      	cbnz	r0, 8005660 <_dtoa_r+0x980>
 8005654:	4602      	mov	r2, r0
 8005656:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800565a:	4b83      	ldr	r3, [pc, #524]	@ (8005868 <_dtoa_r+0xb88>)
 800565c:	f7ff bb54 	b.w	8004d08 <_dtoa_r+0x28>
 8005660:	692a      	ldr	r2, [r5, #16]
 8005662:	f105 010c 	add.w	r1, r5, #12
 8005666:	3202      	adds	r2, #2
 8005668:	0092      	lsls	r2, r2, #2
 800566a:	300c      	adds	r0, #12
 800566c:	f000 fe36 	bl	80062dc <memcpy>
 8005670:	2201      	movs	r2, #1
 8005672:	4631      	mov	r1, r6
 8005674:	4658      	mov	r0, fp
 8005676:	f000 fc05 	bl	8005e84 <__lshift>
 800567a:	462f      	mov	r7, r5
 800567c:	4605      	mov	r5, r0
 800567e:	f10a 0301 	add.w	r3, sl, #1
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	9b08      	ldr	r3, [sp, #32]
 8005686:	4453      	add	r3, sl
 8005688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800568a:	9b02      	ldr	r3, [sp, #8]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	930a      	str	r3, [sp, #40]	@ 0x28
 8005692:	9b07      	ldr	r3, [sp, #28]
 8005694:	4621      	mov	r1, r4
 8005696:	3b01      	subs	r3, #1
 8005698:	4648      	mov	r0, r9
 800569a:	9302      	str	r3, [sp, #8]
 800569c:	f7ff fa95 	bl	8004bca <quorem>
 80056a0:	4639      	mov	r1, r7
 80056a2:	9008      	str	r0, [sp, #32]
 80056a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80056a8:	4648      	mov	r0, r9
 80056aa:	f000 fc57 	bl	8005f5c <__mcmp>
 80056ae:	462a      	mov	r2, r5
 80056b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80056b2:	4621      	mov	r1, r4
 80056b4:	4658      	mov	r0, fp
 80056b6:	f000 fc6d 	bl	8005f94 <__mdiff>
 80056ba:	68c2      	ldr	r2, [r0, #12]
 80056bc:	4606      	mov	r6, r0
 80056be:	bb02      	cbnz	r2, 8005702 <_dtoa_r+0xa22>
 80056c0:	4601      	mov	r1, r0
 80056c2:	4648      	mov	r0, r9
 80056c4:	f000 fc4a 	bl	8005f5c <__mcmp>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4631      	mov	r1, r6
 80056cc:	4658      	mov	r0, fp
 80056ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80056d0:	f000 fa0c 	bl	8005aec <_Bfree>
 80056d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056d8:	9e07      	ldr	r6, [sp, #28]
 80056da:	ea43 0102 	orr.w	r1, r3, r2
 80056de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056e0:	4319      	orrs	r1, r3
 80056e2:	d110      	bne.n	8005706 <_dtoa_r+0xa26>
 80056e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056e8:	d029      	beq.n	800573e <_dtoa_r+0xa5e>
 80056ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dd02      	ble.n	80056f6 <_dtoa_r+0xa16>
 80056f0:	9b08      	ldr	r3, [sp, #32]
 80056f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80056f6:	9b02      	ldr	r3, [sp, #8]
 80056f8:	f883 8000 	strb.w	r8, [r3]
 80056fc:	e63b      	b.n	8005376 <_dtoa_r+0x696>
 80056fe:	4628      	mov	r0, r5
 8005700:	e7bb      	b.n	800567a <_dtoa_r+0x99a>
 8005702:	2201      	movs	r2, #1
 8005704:	e7e1      	b.n	80056ca <_dtoa_r+0x9ea>
 8005706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	db04      	blt.n	8005716 <_dtoa_r+0xa36>
 800570c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800570e:	430b      	orrs	r3, r1
 8005710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005712:	430b      	orrs	r3, r1
 8005714:	d120      	bne.n	8005758 <_dtoa_r+0xa78>
 8005716:	2a00      	cmp	r2, #0
 8005718:	dded      	ble.n	80056f6 <_dtoa_r+0xa16>
 800571a:	4649      	mov	r1, r9
 800571c:	2201      	movs	r2, #1
 800571e:	4658      	mov	r0, fp
 8005720:	f000 fbb0 	bl	8005e84 <__lshift>
 8005724:	4621      	mov	r1, r4
 8005726:	4681      	mov	r9, r0
 8005728:	f000 fc18 	bl	8005f5c <__mcmp>
 800572c:	2800      	cmp	r0, #0
 800572e:	dc03      	bgt.n	8005738 <_dtoa_r+0xa58>
 8005730:	d1e1      	bne.n	80056f6 <_dtoa_r+0xa16>
 8005732:	f018 0f01 	tst.w	r8, #1
 8005736:	d0de      	beq.n	80056f6 <_dtoa_r+0xa16>
 8005738:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800573c:	d1d8      	bne.n	80056f0 <_dtoa_r+0xa10>
 800573e:	2339      	movs	r3, #57	@ 0x39
 8005740:	9a02      	ldr	r2, [sp, #8]
 8005742:	7013      	strb	r3, [r2, #0]
 8005744:	4633      	mov	r3, r6
 8005746:	461e      	mov	r6, r3
 8005748:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800574c:	3b01      	subs	r3, #1
 800574e:	2a39      	cmp	r2, #57	@ 0x39
 8005750:	d052      	beq.n	80057f8 <_dtoa_r+0xb18>
 8005752:	3201      	adds	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e60e      	b.n	8005376 <_dtoa_r+0x696>
 8005758:	2a00      	cmp	r2, #0
 800575a:	dd07      	ble.n	800576c <_dtoa_r+0xa8c>
 800575c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005760:	d0ed      	beq.n	800573e <_dtoa_r+0xa5e>
 8005762:	9a02      	ldr	r2, [sp, #8]
 8005764:	f108 0301 	add.w	r3, r8, #1
 8005768:	7013      	strb	r3, [r2, #0]
 800576a:	e604      	b.n	8005376 <_dtoa_r+0x696>
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	9a07      	ldr	r2, [sp, #28]
 8005770:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005776:	4293      	cmp	r3, r2
 8005778:	d028      	beq.n	80057cc <_dtoa_r+0xaec>
 800577a:	4649      	mov	r1, r9
 800577c:	2300      	movs	r3, #0
 800577e:	220a      	movs	r2, #10
 8005780:	4658      	mov	r0, fp
 8005782:	f000 f9d5 	bl	8005b30 <__multadd>
 8005786:	42af      	cmp	r7, r5
 8005788:	4681      	mov	r9, r0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	f04f 020a 	mov.w	r2, #10
 8005792:	4639      	mov	r1, r7
 8005794:	4658      	mov	r0, fp
 8005796:	d107      	bne.n	80057a8 <_dtoa_r+0xac8>
 8005798:	f000 f9ca 	bl	8005b30 <__multadd>
 800579c:	4607      	mov	r7, r0
 800579e:	4605      	mov	r5, r0
 80057a0:	9b07      	ldr	r3, [sp, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	9307      	str	r3, [sp, #28]
 80057a6:	e774      	b.n	8005692 <_dtoa_r+0x9b2>
 80057a8:	f000 f9c2 	bl	8005b30 <__multadd>
 80057ac:	4629      	mov	r1, r5
 80057ae:	4607      	mov	r7, r0
 80057b0:	2300      	movs	r3, #0
 80057b2:	220a      	movs	r2, #10
 80057b4:	4658      	mov	r0, fp
 80057b6:	f000 f9bb 	bl	8005b30 <__multadd>
 80057ba:	4605      	mov	r5, r0
 80057bc:	e7f0      	b.n	80057a0 <_dtoa_r+0xac0>
 80057be:	9b08      	ldr	r3, [sp, #32]
 80057c0:	2700      	movs	r7, #0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bfcc      	ite	gt
 80057c6:	461e      	movgt	r6, r3
 80057c8:	2601      	movle	r6, #1
 80057ca:	4456      	add	r6, sl
 80057cc:	4649      	mov	r1, r9
 80057ce:	2201      	movs	r2, #1
 80057d0:	4658      	mov	r0, fp
 80057d2:	f000 fb57 	bl	8005e84 <__lshift>
 80057d6:	4621      	mov	r1, r4
 80057d8:	4681      	mov	r9, r0
 80057da:	f000 fbbf 	bl	8005f5c <__mcmp>
 80057de:	2800      	cmp	r0, #0
 80057e0:	dcb0      	bgt.n	8005744 <_dtoa_r+0xa64>
 80057e2:	d102      	bne.n	80057ea <_dtoa_r+0xb0a>
 80057e4:	f018 0f01 	tst.w	r8, #1
 80057e8:	d1ac      	bne.n	8005744 <_dtoa_r+0xa64>
 80057ea:	4633      	mov	r3, r6
 80057ec:	461e      	mov	r6, r3
 80057ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057f2:	2a30      	cmp	r2, #48	@ 0x30
 80057f4:	d0fa      	beq.n	80057ec <_dtoa_r+0xb0c>
 80057f6:	e5be      	b.n	8005376 <_dtoa_r+0x696>
 80057f8:	459a      	cmp	sl, r3
 80057fa:	d1a4      	bne.n	8005746 <_dtoa_r+0xa66>
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	3301      	adds	r3, #1
 8005800:	9304      	str	r3, [sp, #16]
 8005802:	2331      	movs	r3, #49	@ 0x31
 8005804:	f88a 3000 	strb.w	r3, [sl]
 8005808:	e5b5      	b.n	8005376 <_dtoa_r+0x696>
 800580a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800580c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800586c <_dtoa_r+0xb8c>
 8005810:	b11b      	cbz	r3, 800581a <_dtoa_r+0xb3a>
 8005812:	f10a 0308 	add.w	r3, sl, #8
 8005816:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	4650      	mov	r0, sl
 800581c:	b017      	add	sp, #92	@ 0x5c
 800581e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005824:	2b01      	cmp	r3, #1
 8005826:	f77f ae3d 	ble.w	80054a4 <_dtoa_r+0x7c4>
 800582a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800582c:	930a      	str	r3, [sp, #40]	@ 0x28
 800582e:	2001      	movs	r0, #1
 8005830:	e65b      	b.n	80054ea <_dtoa_r+0x80a>
 8005832:	9b08      	ldr	r3, [sp, #32]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f77f aed6 	ble.w	80055e6 <_dtoa_r+0x906>
 800583a:	4656      	mov	r6, sl
 800583c:	4621      	mov	r1, r4
 800583e:	4648      	mov	r0, r9
 8005840:	f7ff f9c3 	bl	8004bca <quorem>
 8005844:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005848:	9b08      	ldr	r3, [sp, #32]
 800584a:	f806 8b01 	strb.w	r8, [r6], #1
 800584e:	eba6 020a 	sub.w	r2, r6, sl
 8005852:	4293      	cmp	r3, r2
 8005854:	ddb3      	ble.n	80057be <_dtoa_r+0xade>
 8005856:	4649      	mov	r1, r9
 8005858:	2300      	movs	r3, #0
 800585a:	220a      	movs	r2, #10
 800585c:	4658      	mov	r0, fp
 800585e:	f000 f967 	bl	8005b30 <__multadd>
 8005862:	4681      	mov	r9, r0
 8005864:	e7ea      	b.n	800583c <_dtoa_r+0xb5c>
 8005866:	bf00      	nop
 8005868:	080069fa 	.word	0x080069fa
 800586c:	0800697e 	.word	0x0800697e

08005870 <_free_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4605      	mov	r5, r0
 8005874:	2900      	cmp	r1, #0
 8005876:	d040      	beq.n	80058fa <_free_r+0x8a>
 8005878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587c:	1f0c      	subs	r4, r1, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfb8      	it	lt
 8005882:	18e4      	addlt	r4, r4, r3
 8005884:	f000 f8e6 	bl	8005a54 <__malloc_lock>
 8005888:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <_free_r+0x8c>)
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	b933      	cbnz	r3, 800589c <_free_r+0x2c>
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	4628      	mov	r0, r5
 8005894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005898:	f000 b8e2 	b.w	8005a60 <__malloc_unlock>
 800589c:	42a3      	cmp	r3, r4
 800589e:	d908      	bls.n	80058b2 <_free_r+0x42>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	1821      	adds	r1, r4, r0
 80058a4:	428b      	cmp	r3, r1
 80058a6:	bf01      	itttt	eq
 80058a8:	6819      	ldreq	r1, [r3, #0]
 80058aa:	685b      	ldreq	r3, [r3, #4]
 80058ac:	1809      	addeq	r1, r1, r0
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	e7ed      	b.n	800588e <_free_r+0x1e>
 80058b2:	461a      	mov	r2, r3
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b10b      	cbz	r3, 80058bc <_free_r+0x4c>
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d9fa      	bls.n	80058b2 <_free_r+0x42>
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	1850      	adds	r0, r2, r1
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d10b      	bne.n	80058dc <_free_r+0x6c>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	4401      	add	r1, r0
 80058c8:	1850      	adds	r0, r2, r1
 80058ca:	4283      	cmp	r3, r0
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	d1e0      	bne.n	8005892 <_free_r+0x22>
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4408      	add	r0, r1
 80058d6:	6010      	str	r0, [r2, #0]
 80058d8:	6053      	str	r3, [r2, #4]
 80058da:	e7da      	b.n	8005892 <_free_r+0x22>
 80058dc:	d902      	bls.n	80058e4 <_free_r+0x74>
 80058de:	230c      	movs	r3, #12
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	e7d6      	b.n	8005892 <_free_r+0x22>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	1821      	adds	r1, r4, r0
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf01      	itttt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	1809      	addeq	r1, r1, r0
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	6063      	str	r3, [r4, #4]
 80058f6:	6054      	str	r4, [r2, #4]
 80058f8:	e7cb      	b.n	8005892 <_free_r+0x22>
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	20000438 	.word	0x20000438

08005900 <malloc>:
 8005900:	4b02      	ldr	r3, [pc, #8]	@ (800590c <malloc+0xc>)
 8005902:	4601      	mov	r1, r0
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	f000 b825 	b.w	8005954 <_malloc_r>
 800590a:	bf00      	nop
 800590c:	2000001c 	.word	0x2000001c

08005910 <sbrk_aligned>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4e0f      	ldr	r6, [pc, #60]	@ (8005950 <sbrk_aligned+0x40>)
 8005914:	460c      	mov	r4, r1
 8005916:	6831      	ldr	r1, [r6, #0]
 8005918:	4605      	mov	r5, r0
 800591a:	b911      	cbnz	r1, 8005922 <sbrk_aligned+0x12>
 800591c:	f000 fcce 	bl	80062bc <_sbrk_r>
 8005920:	6030      	str	r0, [r6, #0]
 8005922:	4621      	mov	r1, r4
 8005924:	4628      	mov	r0, r5
 8005926:	f000 fcc9 	bl	80062bc <_sbrk_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d103      	bne.n	8005936 <sbrk_aligned+0x26>
 800592e:	f04f 34ff 	mov.w	r4, #4294967295
 8005932:	4620      	mov	r0, r4
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	1cc4      	adds	r4, r0, #3
 8005938:	f024 0403 	bic.w	r4, r4, #3
 800593c:	42a0      	cmp	r0, r4
 800593e:	d0f8      	beq.n	8005932 <sbrk_aligned+0x22>
 8005940:	1a21      	subs	r1, r4, r0
 8005942:	4628      	mov	r0, r5
 8005944:	f000 fcba 	bl	80062bc <_sbrk_r>
 8005948:	3001      	adds	r0, #1
 800594a:	d1f2      	bne.n	8005932 <sbrk_aligned+0x22>
 800594c:	e7ef      	b.n	800592e <sbrk_aligned+0x1e>
 800594e:	bf00      	nop
 8005950:	20000434 	.word	0x20000434

08005954 <_malloc_r>:
 8005954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005958:	1ccd      	adds	r5, r1, #3
 800595a:	f025 0503 	bic.w	r5, r5, #3
 800595e:	3508      	adds	r5, #8
 8005960:	2d0c      	cmp	r5, #12
 8005962:	bf38      	it	cc
 8005964:	250c      	movcc	r5, #12
 8005966:	2d00      	cmp	r5, #0
 8005968:	4606      	mov	r6, r0
 800596a:	db01      	blt.n	8005970 <_malloc_r+0x1c>
 800596c:	42a9      	cmp	r1, r5
 800596e:	d904      	bls.n	800597a <_malloc_r+0x26>
 8005970:	230c      	movs	r3, #12
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	2000      	movs	r0, #0
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a50 <_malloc_r+0xfc>
 800597e:	f000 f869 	bl	8005a54 <__malloc_lock>
 8005982:	f8d8 3000 	ldr.w	r3, [r8]
 8005986:	461c      	mov	r4, r3
 8005988:	bb44      	cbnz	r4, 80059dc <_malloc_r+0x88>
 800598a:	4629      	mov	r1, r5
 800598c:	4630      	mov	r0, r6
 800598e:	f7ff ffbf 	bl	8005910 <sbrk_aligned>
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	4604      	mov	r4, r0
 8005996:	d158      	bne.n	8005a4a <_malloc_r+0xf6>
 8005998:	f8d8 4000 	ldr.w	r4, [r8]
 800599c:	4627      	mov	r7, r4
 800599e:	2f00      	cmp	r7, #0
 80059a0:	d143      	bne.n	8005a2a <_malloc_r+0xd6>
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	d04b      	beq.n	8005a3e <_malloc_r+0xea>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	4639      	mov	r1, r7
 80059aa:	4630      	mov	r0, r6
 80059ac:	eb04 0903 	add.w	r9, r4, r3
 80059b0:	f000 fc84 	bl	80062bc <_sbrk_r>
 80059b4:	4581      	cmp	r9, r0
 80059b6:	d142      	bne.n	8005a3e <_malloc_r+0xea>
 80059b8:	6821      	ldr	r1, [r4, #0]
 80059ba:	4630      	mov	r0, r6
 80059bc:	1a6d      	subs	r5, r5, r1
 80059be:	4629      	mov	r1, r5
 80059c0:	f7ff ffa6 	bl	8005910 <sbrk_aligned>
 80059c4:	3001      	adds	r0, #1
 80059c6:	d03a      	beq.n	8005a3e <_malloc_r+0xea>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	442b      	add	r3, r5
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	f8d8 3000 	ldr.w	r3, [r8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	bb62      	cbnz	r2, 8005a30 <_malloc_r+0xdc>
 80059d6:	f8c8 7000 	str.w	r7, [r8]
 80059da:	e00f      	b.n	80059fc <_malloc_r+0xa8>
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	1b52      	subs	r2, r2, r5
 80059e0:	d420      	bmi.n	8005a24 <_malloc_r+0xd0>
 80059e2:	2a0b      	cmp	r2, #11
 80059e4:	d917      	bls.n	8005a16 <_malloc_r+0xc2>
 80059e6:	1961      	adds	r1, r4, r5
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	6025      	str	r5, [r4, #0]
 80059ec:	bf18      	it	ne
 80059ee:	6059      	strne	r1, [r3, #4]
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	bf08      	it	eq
 80059f4:	f8c8 1000 	streq.w	r1, [r8]
 80059f8:	5162      	str	r2, [r4, r5]
 80059fa:	604b      	str	r3, [r1, #4]
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 f82f 	bl	8005a60 <__malloc_unlock>
 8005a02:	f104 000b 	add.w	r0, r4, #11
 8005a06:	1d23      	adds	r3, r4, #4
 8005a08:	f020 0007 	bic.w	r0, r0, #7
 8005a0c:	1ac2      	subs	r2, r0, r3
 8005a0e:	bf1c      	itt	ne
 8005a10:	1a1b      	subne	r3, r3, r0
 8005a12:	50a3      	strne	r3, [r4, r2]
 8005a14:	e7af      	b.n	8005976 <_malloc_r+0x22>
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	bf0c      	ite	eq
 8005a1c:	f8c8 2000 	streq.w	r2, [r8]
 8005a20:	605a      	strne	r2, [r3, #4]
 8005a22:	e7eb      	b.n	80059fc <_malloc_r+0xa8>
 8005a24:	4623      	mov	r3, r4
 8005a26:	6864      	ldr	r4, [r4, #4]
 8005a28:	e7ae      	b.n	8005988 <_malloc_r+0x34>
 8005a2a:	463c      	mov	r4, r7
 8005a2c:	687f      	ldr	r7, [r7, #4]
 8005a2e:	e7b6      	b.n	800599e <_malloc_r+0x4a>
 8005a30:	461a      	mov	r2, r3
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	d1fb      	bne.n	8005a30 <_malloc_r+0xdc>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6053      	str	r3, [r2, #4]
 8005a3c:	e7de      	b.n	80059fc <_malloc_r+0xa8>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	4630      	mov	r0, r6
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	f000 f80c 	bl	8005a60 <__malloc_unlock>
 8005a48:	e794      	b.n	8005974 <_malloc_r+0x20>
 8005a4a:	6005      	str	r5, [r0, #0]
 8005a4c:	e7d6      	b.n	80059fc <_malloc_r+0xa8>
 8005a4e:	bf00      	nop
 8005a50:	20000438 	.word	0x20000438

08005a54 <__malloc_lock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	@ (8005a5c <__malloc_lock+0x8>)
 8005a56:	f7ff b8a8 	b.w	8004baa <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	20000430 	.word	0x20000430

08005a60 <__malloc_unlock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <__malloc_unlock+0x8>)
 8005a62:	f7ff b8a3 	b.w	8004bac <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	20000430 	.word	0x20000430

08005a6c <_Balloc>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	69c6      	ldr	r6, [r0, #28]
 8005a70:	4604      	mov	r4, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	b976      	cbnz	r6, 8005a94 <_Balloc+0x28>
 8005a76:	2010      	movs	r0, #16
 8005a78:	f7ff ff42 	bl	8005900 <malloc>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	61e0      	str	r0, [r4, #28]
 8005a80:	b920      	cbnz	r0, 8005a8c <_Balloc+0x20>
 8005a82:	216b      	movs	r1, #107	@ 0x6b
 8005a84:	4b17      	ldr	r3, [pc, #92]	@ (8005ae4 <_Balloc+0x78>)
 8005a86:	4818      	ldr	r0, [pc, #96]	@ (8005ae8 <_Balloc+0x7c>)
 8005a88:	f000 fc36 	bl	80062f8 <__assert_func>
 8005a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a90:	6006      	str	r6, [r0, #0]
 8005a92:	60c6      	str	r6, [r0, #12]
 8005a94:	69e6      	ldr	r6, [r4, #28]
 8005a96:	68f3      	ldr	r3, [r6, #12]
 8005a98:	b183      	cbz	r3, 8005abc <_Balloc+0x50>
 8005a9a:	69e3      	ldr	r3, [r4, #28]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aa2:	b9b8      	cbnz	r0, 8005ad4 <_Balloc+0x68>
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8005aaa:	1d72      	adds	r2, r6, #5
 8005aac:	4620      	mov	r0, r4
 8005aae:	0092      	lsls	r2, r2, #2
 8005ab0:	f000 fc40 	bl	8006334 <_calloc_r>
 8005ab4:	b160      	cbz	r0, 8005ad0 <_Balloc+0x64>
 8005ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aba:	e00e      	b.n	8005ada <_Balloc+0x6e>
 8005abc:	2221      	movs	r2, #33	@ 0x21
 8005abe:	2104      	movs	r1, #4
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fc37 	bl	8006334 <_calloc_r>
 8005ac6:	69e3      	ldr	r3, [r4, #28]
 8005ac8:	60f0      	str	r0, [r6, #12]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e4      	bne.n	8005a9a <_Balloc+0x2e>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	6802      	ldr	r2, [r0, #0]
 8005ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ada:	2300      	movs	r3, #0
 8005adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ae0:	e7f7      	b.n	8005ad2 <_Balloc+0x66>
 8005ae2:	bf00      	nop
 8005ae4:	0800698b 	.word	0x0800698b
 8005ae8:	08006a0b 	.word	0x08006a0b

08005aec <_Bfree>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	69c6      	ldr	r6, [r0, #28]
 8005af0:	4605      	mov	r5, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	b976      	cbnz	r6, 8005b14 <_Bfree+0x28>
 8005af6:	2010      	movs	r0, #16
 8005af8:	f7ff ff02 	bl	8005900 <malloc>
 8005afc:	4602      	mov	r2, r0
 8005afe:	61e8      	str	r0, [r5, #28]
 8005b00:	b920      	cbnz	r0, 8005b0c <_Bfree+0x20>
 8005b02:	218f      	movs	r1, #143	@ 0x8f
 8005b04:	4b08      	ldr	r3, [pc, #32]	@ (8005b28 <_Bfree+0x3c>)
 8005b06:	4809      	ldr	r0, [pc, #36]	@ (8005b2c <_Bfree+0x40>)
 8005b08:	f000 fbf6 	bl	80062f8 <__assert_func>
 8005b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b10:	6006      	str	r6, [r0, #0]
 8005b12:	60c6      	str	r6, [r0, #12]
 8005b14:	b13c      	cbz	r4, 8005b26 <_Bfree+0x3a>
 8005b16:	69eb      	ldr	r3, [r5, #28]
 8005b18:	6862      	ldr	r2, [r4, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b20:	6021      	str	r1, [r4, #0]
 8005b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	0800698b 	.word	0x0800698b
 8005b2c:	08006a0b 	.word	0x08006a0b

08005b30 <__multadd>:
 8005b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b34:	4607      	mov	r7, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	461e      	mov	r6, r3
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	690d      	ldr	r5, [r1, #16]
 8005b3e:	f101 0c14 	add.w	ip, r1, #20
 8005b42:	f8dc 3000 	ldr.w	r3, [ip]
 8005b46:	3001      	adds	r0, #1
 8005b48:	b299      	uxth	r1, r3
 8005b4a:	fb02 6101 	mla	r1, r2, r1, r6
 8005b4e:	0c1e      	lsrs	r6, r3, #16
 8005b50:	0c0b      	lsrs	r3, r1, #16
 8005b52:	fb02 3306 	mla	r3, r2, r6, r3
 8005b56:	b289      	uxth	r1, r1
 8005b58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b5c:	4285      	cmp	r5, r0
 8005b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b62:	f84c 1b04 	str.w	r1, [ip], #4
 8005b66:	dcec      	bgt.n	8005b42 <__multadd+0x12>
 8005b68:	b30e      	cbz	r6, 8005bae <__multadd+0x7e>
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	dc19      	bgt.n	8005ba4 <__multadd+0x74>
 8005b70:	6861      	ldr	r1, [r4, #4]
 8005b72:	4638      	mov	r0, r7
 8005b74:	3101      	adds	r1, #1
 8005b76:	f7ff ff79 	bl	8005a6c <_Balloc>
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	b928      	cbnz	r0, 8005b8a <__multadd+0x5a>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	21ba      	movs	r1, #186	@ 0xba
 8005b82:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <__multadd+0x84>)
 8005b84:	480c      	ldr	r0, [pc, #48]	@ (8005bb8 <__multadd+0x88>)
 8005b86:	f000 fbb7 	bl	80062f8 <__assert_func>
 8005b8a:	6922      	ldr	r2, [r4, #16]
 8005b8c:	f104 010c 	add.w	r1, r4, #12
 8005b90:	3202      	adds	r2, #2
 8005b92:	0092      	lsls	r2, r2, #2
 8005b94:	300c      	adds	r0, #12
 8005b96:	f000 fba1 	bl	80062dc <memcpy>
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	f7ff ffa5 	bl	8005aec <_Bfree>
 8005ba2:	4644      	mov	r4, r8
 8005ba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ba8:	3501      	adds	r5, #1
 8005baa:	615e      	str	r6, [r3, #20]
 8005bac:	6125      	str	r5, [r4, #16]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	080069fa 	.word	0x080069fa
 8005bb8:	08006a0b 	.word	0x08006a0b

08005bbc <__hi0bits>:
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005bc2:	bf3a      	itte	cc
 8005bc4:	0403      	lslcc	r3, r0, #16
 8005bc6:	2010      	movcc	r0, #16
 8005bc8:	2000      	movcs	r0, #0
 8005bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bce:	bf3c      	itt	cc
 8005bd0:	021b      	lslcc	r3, r3, #8
 8005bd2:	3008      	addcc	r0, #8
 8005bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bd8:	bf3c      	itt	cc
 8005bda:	011b      	lslcc	r3, r3, #4
 8005bdc:	3004      	addcc	r0, #4
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be2:	bf3c      	itt	cc
 8005be4:	009b      	lslcc	r3, r3, #2
 8005be6:	3002      	addcc	r0, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	db05      	blt.n	8005bf8 <__hi0bits+0x3c>
 8005bec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005bf0:	f100 0001 	add.w	r0, r0, #1
 8005bf4:	bf08      	it	eq
 8005bf6:	2020      	moveq	r0, #32
 8005bf8:	4770      	bx	lr

08005bfa <__lo0bits>:
 8005bfa:	6803      	ldr	r3, [r0, #0]
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	f013 0007 	ands.w	r0, r3, #7
 8005c02:	d00b      	beq.n	8005c1c <__lo0bits+0x22>
 8005c04:	07d9      	lsls	r1, r3, #31
 8005c06:	d421      	bmi.n	8005c4c <__lo0bits+0x52>
 8005c08:	0798      	lsls	r0, r3, #30
 8005c0a:	bf49      	itett	mi
 8005c0c:	085b      	lsrmi	r3, r3, #1
 8005c0e:	089b      	lsrpl	r3, r3, #2
 8005c10:	2001      	movmi	r0, #1
 8005c12:	6013      	strmi	r3, [r2, #0]
 8005c14:	bf5c      	itt	pl
 8005c16:	2002      	movpl	r0, #2
 8005c18:	6013      	strpl	r3, [r2, #0]
 8005c1a:	4770      	bx	lr
 8005c1c:	b299      	uxth	r1, r3
 8005c1e:	b909      	cbnz	r1, 8005c24 <__lo0bits+0x2a>
 8005c20:	2010      	movs	r0, #16
 8005c22:	0c1b      	lsrs	r3, r3, #16
 8005c24:	b2d9      	uxtb	r1, r3
 8005c26:	b909      	cbnz	r1, 8005c2c <__lo0bits+0x32>
 8005c28:	3008      	adds	r0, #8
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	0719      	lsls	r1, r3, #28
 8005c2e:	bf04      	itt	eq
 8005c30:	091b      	lsreq	r3, r3, #4
 8005c32:	3004      	addeq	r0, #4
 8005c34:	0799      	lsls	r1, r3, #30
 8005c36:	bf04      	itt	eq
 8005c38:	089b      	lsreq	r3, r3, #2
 8005c3a:	3002      	addeq	r0, #2
 8005c3c:	07d9      	lsls	r1, r3, #31
 8005c3e:	d403      	bmi.n	8005c48 <__lo0bits+0x4e>
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	f100 0001 	add.w	r0, r0, #1
 8005c46:	d003      	beq.n	8005c50 <__lo0bits+0x56>
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4770      	bx	lr
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	4770      	bx	lr
 8005c50:	2020      	movs	r0, #32
 8005c52:	4770      	bx	lr

08005c54 <__i2b>:
 8005c54:	b510      	push	{r4, lr}
 8005c56:	460c      	mov	r4, r1
 8005c58:	2101      	movs	r1, #1
 8005c5a:	f7ff ff07 	bl	8005a6c <_Balloc>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	b928      	cbnz	r0, 8005c6e <__i2b+0x1a>
 8005c62:	f240 1145 	movw	r1, #325	@ 0x145
 8005c66:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <__i2b+0x24>)
 8005c68:	4804      	ldr	r0, [pc, #16]	@ (8005c7c <__i2b+0x28>)
 8005c6a:	f000 fb45 	bl	80062f8 <__assert_func>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	6144      	str	r4, [r0, #20]
 8005c72:	6103      	str	r3, [r0, #16]
 8005c74:	bd10      	pop	{r4, pc}
 8005c76:	bf00      	nop
 8005c78:	080069fa 	.word	0x080069fa
 8005c7c:	08006a0b 	.word	0x08006a0b

08005c80 <__multiply>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	4614      	mov	r4, r2
 8005c86:	690a      	ldr	r2, [r1, #16]
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	460f      	mov	r7, r1
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bfa2      	ittt	ge
 8005c90:	4623      	movge	r3, r4
 8005c92:	460c      	movge	r4, r1
 8005c94:	461f      	movge	r7, r3
 8005c96:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005c9a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005c9e:	68a3      	ldr	r3, [r4, #8]
 8005ca0:	6861      	ldr	r1, [r4, #4]
 8005ca2:	eb0a 0609 	add.w	r6, sl, r9
 8005ca6:	42b3      	cmp	r3, r6
 8005ca8:	b085      	sub	sp, #20
 8005caa:	bfb8      	it	lt
 8005cac:	3101      	addlt	r1, #1
 8005cae:	f7ff fedd 	bl	8005a6c <_Balloc>
 8005cb2:	b930      	cbnz	r0, 8005cc2 <__multiply+0x42>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005cba:	4b43      	ldr	r3, [pc, #268]	@ (8005dc8 <__multiply+0x148>)
 8005cbc:	4843      	ldr	r0, [pc, #268]	@ (8005dcc <__multiply+0x14c>)
 8005cbe:	f000 fb1b 	bl	80062f8 <__assert_func>
 8005cc2:	f100 0514 	add.w	r5, r0, #20
 8005cc6:	462b      	mov	r3, r5
 8005cc8:	2200      	movs	r2, #0
 8005cca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cce:	4543      	cmp	r3, r8
 8005cd0:	d321      	bcc.n	8005d16 <__multiply+0x96>
 8005cd2:	f107 0114 	add.w	r1, r7, #20
 8005cd6:	f104 0214 	add.w	r2, r4, #20
 8005cda:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005cde:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005ce2:	9302      	str	r3, [sp, #8]
 8005ce4:	1b13      	subs	r3, r2, r4
 8005ce6:	3b15      	subs	r3, #21
 8005ce8:	f023 0303 	bic.w	r3, r3, #3
 8005cec:	3304      	adds	r3, #4
 8005cee:	f104 0715 	add.w	r7, r4, #21
 8005cf2:	42ba      	cmp	r2, r7
 8005cf4:	bf38      	it	cc
 8005cf6:	2304      	movcc	r3, #4
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	9b02      	ldr	r3, [sp, #8]
 8005cfc:	9103      	str	r1, [sp, #12]
 8005cfe:	428b      	cmp	r3, r1
 8005d00:	d80c      	bhi.n	8005d1c <__multiply+0x9c>
 8005d02:	2e00      	cmp	r6, #0
 8005d04:	dd03      	ble.n	8005d0e <__multiply+0x8e>
 8005d06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d05a      	beq.n	8005dc4 <__multiply+0x144>
 8005d0e:	6106      	str	r6, [r0, #16]
 8005d10:	b005      	add	sp, #20
 8005d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d16:	f843 2b04 	str.w	r2, [r3], #4
 8005d1a:	e7d8      	b.n	8005cce <__multiply+0x4e>
 8005d1c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005d20:	f1ba 0f00 	cmp.w	sl, #0
 8005d24:	d023      	beq.n	8005d6e <__multiply+0xee>
 8005d26:	46a9      	mov	r9, r5
 8005d28:	f04f 0c00 	mov.w	ip, #0
 8005d2c:	f104 0e14 	add.w	lr, r4, #20
 8005d30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d34:	f8d9 3000 	ldr.w	r3, [r9]
 8005d38:	fa1f fb87 	uxth.w	fp, r7
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d42:	4463      	add	r3, ip
 8005d44:	f8d9 c000 	ldr.w	ip, [r9]
 8005d48:	0c3f      	lsrs	r7, r7, #16
 8005d4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d4e:	fb0a c707 	mla	r7, sl, r7, ip
 8005d52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d5c:	4572      	cmp	r2, lr
 8005d5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d62:	f849 3b04 	str.w	r3, [r9], #4
 8005d66:	d8e3      	bhi.n	8005d30 <__multiply+0xb0>
 8005d68:	9b01      	ldr	r3, [sp, #4]
 8005d6a:	f845 c003 	str.w	ip, [r5, r3]
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	3104      	adds	r1, #4
 8005d72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d76:	f1b9 0f00 	cmp.w	r9, #0
 8005d7a:	d021      	beq.n	8005dc0 <__multiply+0x140>
 8005d7c:	46ae      	mov	lr, r5
 8005d7e:	f04f 0a00 	mov.w	sl, #0
 8005d82:	682b      	ldr	r3, [r5, #0]
 8005d84:	f104 0c14 	add.w	ip, r4, #20
 8005d88:	f8bc b000 	ldrh.w	fp, [ip]
 8005d8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	fb09 770b 	mla	r7, r9, fp, r7
 8005d96:	4457      	add	r7, sl
 8005d98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d9c:	f84e 3b04 	str.w	r3, [lr], #4
 8005da0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005da4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005da8:	f8be 3000 	ldrh.w	r3, [lr]
 8005dac:	4562      	cmp	r2, ip
 8005dae:	fb09 330a 	mla	r3, r9, sl, r3
 8005db2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005db6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dba:	d8e5      	bhi.n	8005d88 <__multiply+0x108>
 8005dbc:	9f01      	ldr	r7, [sp, #4]
 8005dbe:	51eb      	str	r3, [r5, r7]
 8005dc0:	3504      	adds	r5, #4
 8005dc2:	e79a      	b.n	8005cfa <__multiply+0x7a>
 8005dc4:	3e01      	subs	r6, #1
 8005dc6:	e79c      	b.n	8005d02 <__multiply+0x82>
 8005dc8:	080069fa 	.word	0x080069fa
 8005dcc:	08006a0b 	.word	0x08006a0b

08005dd0 <__pow5mult>:
 8005dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd4:	4615      	mov	r5, r2
 8005dd6:	f012 0203 	ands.w	r2, r2, #3
 8005dda:	4607      	mov	r7, r0
 8005ddc:	460e      	mov	r6, r1
 8005dde:	d007      	beq.n	8005df0 <__pow5mult+0x20>
 8005de0:	4c25      	ldr	r4, [pc, #148]	@ (8005e78 <__pow5mult+0xa8>)
 8005de2:	3a01      	subs	r2, #1
 8005de4:	2300      	movs	r3, #0
 8005de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dea:	f7ff fea1 	bl	8005b30 <__multadd>
 8005dee:	4606      	mov	r6, r0
 8005df0:	10ad      	asrs	r5, r5, #2
 8005df2:	d03d      	beq.n	8005e70 <__pow5mult+0xa0>
 8005df4:	69fc      	ldr	r4, [r7, #28]
 8005df6:	b97c      	cbnz	r4, 8005e18 <__pow5mult+0x48>
 8005df8:	2010      	movs	r0, #16
 8005dfa:	f7ff fd81 	bl	8005900 <malloc>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	61f8      	str	r0, [r7, #28]
 8005e02:	b928      	cbnz	r0, 8005e10 <__pow5mult+0x40>
 8005e04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005e08:	4b1c      	ldr	r3, [pc, #112]	@ (8005e7c <__pow5mult+0xac>)
 8005e0a:	481d      	ldr	r0, [pc, #116]	@ (8005e80 <__pow5mult+0xb0>)
 8005e0c:	f000 fa74 	bl	80062f8 <__assert_func>
 8005e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e14:	6004      	str	r4, [r0, #0]
 8005e16:	60c4      	str	r4, [r0, #12]
 8005e18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e20:	b94c      	cbnz	r4, 8005e36 <__pow5mult+0x66>
 8005e22:	f240 2171 	movw	r1, #625	@ 0x271
 8005e26:	4638      	mov	r0, r7
 8005e28:	f7ff ff14 	bl	8005c54 <__i2b>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4604      	mov	r4, r0
 8005e30:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e34:	6003      	str	r3, [r0, #0]
 8005e36:	f04f 0900 	mov.w	r9, #0
 8005e3a:	07eb      	lsls	r3, r5, #31
 8005e3c:	d50a      	bpl.n	8005e54 <__pow5mult+0x84>
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4622      	mov	r2, r4
 8005e42:	4638      	mov	r0, r7
 8005e44:	f7ff ff1c 	bl	8005c80 <__multiply>
 8005e48:	4680      	mov	r8, r0
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	f7ff fe4d 	bl	8005aec <_Bfree>
 8005e52:	4646      	mov	r6, r8
 8005e54:	106d      	asrs	r5, r5, #1
 8005e56:	d00b      	beq.n	8005e70 <__pow5mult+0xa0>
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	b938      	cbnz	r0, 8005e6c <__pow5mult+0x9c>
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4638      	mov	r0, r7
 8005e62:	f7ff ff0d 	bl	8005c80 <__multiply>
 8005e66:	6020      	str	r0, [r4, #0]
 8005e68:	f8c0 9000 	str.w	r9, [r0]
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	e7e4      	b.n	8005e3a <__pow5mult+0x6a>
 8005e70:	4630      	mov	r0, r6
 8005e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e76:	bf00      	nop
 8005e78:	08006a64 	.word	0x08006a64
 8005e7c:	0800698b 	.word	0x0800698b
 8005e80:	08006a0b 	.word	0x08006a0b

08005e84 <__lshift>:
 8005e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e88:	460c      	mov	r4, r1
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	4691      	mov	r9, r2
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	6849      	ldr	r1, [r1, #4]
 8005e92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e9c:	f108 0601 	add.w	r6, r8, #1
 8005ea0:	42b3      	cmp	r3, r6
 8005ea2:	db0b      	blt.n	8005ebc <__lshift+0x38>
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f7ff fde1 	bl	8005a6c <_Balloc>
 8005eaa:	4605      	mov	r5, r0
 8005eac:	b948      	cbnz	r0, 8005ec2 <__lshift+0x3e>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005eb4:	4b27      	ldr	r3, [pc, #156]	@ (8005f54 <__lshift+0xd0>)
 8005eb6:	4828      	ldr	r0, [pc, #160]	@ (8005f58 <__lshift+0xd4>)
 8005eb8:	f000 fa1e 	bl	80062f8 <__assert_func>
 8005ebc:	3101      	adds	r1, #1
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	e7ee      	b.n	8005ea0 <__lshift+0x1c>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f100 0114 	add.w	r1, r0, #20
 8005ec8:	f100 0210 	add.w	r2, r0, #16
 8005ecc:	4618      	mov	r0, r3
 8005ece:	4553      	cmp	r3, sl
 8005ed0:	db33      	blt.n	8005f3a <__lshift+0xb6>
 8005ed2:	6920      	ldr	r0, [r4, #16]
 8005ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ed8:	f104 0314 	add.w	r3, r4, #20
 8005edc:	f019 091f 	ands.w	r9, r9, #31
 8005ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ee4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ee8:	d02b      	beq.n	8005f42 <__lshift+0xbe>
 8005eea:	468a      	mov	sl, r1
 8005eec:	2200      	movs	r2, #0
 8005eee:	f1c9 0e20 	rsb	lr, r9, #32
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	fa00 f009 	lsl.w	r0, r0, r9
 8005ef8:	4310      	orrs	r0, r2
 8005efa:	f84a 0b04 	str.w	r0, [sl], #4
 8005efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f02:	459c      	cmp	ip, r3
 8005f04:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f08:	d8f3      	bhi.n	8005ef2 <__lshift+0x6e>
 8005f0a:	ebac 0304 	sub.w	r3, ip, r4
 8005f0e:	3b15      	subs	r3, #21
 8005f10:	f023 0303 	bic.w	r3, r3, #3
 8005f14:	3304      	adds	r3, #4
 8005f16:	f104 0015 	add.w	r0, r4, #21
 8005f1a:	4584      	cmp	ip, r0
 8005f1c:	bf38      	it	cc
 8005f1e:	2304      	movcc	r3, #4
 8005f20:	50ca      	str	r2, [r1, r3]
 8005f22:	b10a      	cbz	r2, 8005f28 <__lshift+0xa4>
 8005f24:	f108 0602 	add.w	r6, r8, #2
 8005f28:	3e01      	subs	r6, #1
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	612e      	str	r6, [r5, #16]
 8005f30:	f7ff fddc 	bl	8005aec <_Bfree>
 8005f34:	4628      	mov	r0, r5
 8005f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f3e:	3301      	adds	r3, #1
 8005f40:	e7c5      	b.n	8005ece <__lshift+0x4a>
 8005f42:	3904      	subs	r1, #4
 8005f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f48:	459c      	cmp	ip, r3
 8005f4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f4e:	d8f9      	bhi.n	8005f44 <__lshift+0xc0>
 8005f50:	e7ea      	b.n	8005f28 <__lshift+0xa4>
 8005f52:	bf00      	nop
 8005f54:	080069fa 	.word	0x080069fa
 8005f58:	08006a0b 	.word	0x08006a0b

08005f5c <__mcmp>:
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	690a      	ldr	r2, [r1, #16]
 8005f60:	6900      	ldr	r0, [r0, #16]
 8005f62:	b530      	push	{r4, r5, lr}
 8005f64:	1a80      	subs	r0, r0, r2
 8005f66:	d10e      	bne.n	8005f86 <__mcmp+0x2a>
 8005f68:	3314      	adds	r3, #20
 8005f6a:	3114      	adds	r1, #20
 8005f6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f7c:	4295      	cmp	r5, r2
 8005f7e:	d003      	beq.n	8005f88 <__mcmp+0x2c>
 8005f80:	d205      	bcs.n	8005f8e <__mcmp+0x32>
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	bd30      	pop	{r4, r5, pc}
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	d3f3      	bcc.n	8005f74 <__mcmp+0x18>
 8005f8c:	e7fb      	b.n	8005f86 <__mcmp+0x2a>
 8005f8e:	2001      	movs	r0, #1
 8005f90:	e7f9      	b.n	8005f86 <__mcmp+0x2a>
	...

08005f94 <__mdiff>:
 8005f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	4689      	mov	r9, r1
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4648      	mov	r0, r9
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	f7ff ffdb 	bl	8005f5c <__mcmp>
 8005fa6:	1e05      	subs	r5, r0, #0
 8005fa8:	d112      	bne.n	8005fd0 <__mdiff+0x3c>
 8005faa:	4629      	mov	r1, r5
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7ff fd5d 	bl	8005a6c <_Balloc>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	b928      	cbnz	r0, 8005fc2 <__mdiff+0x2e>
 8005fb6:	f240 2137 	movw	r1, #567	@ 0x237
 8005fba:	4b3e      	ldr	r3, [pc, #248]	@ (80060b4 <__mdiff+0x120>)
 8005fbc:	483e      	ldr	r0, [pc, #248]	@ (80060b8 <__mdiff+0x124>)
 8005fbe:	f000 f99b 	bl	80062f8 <__assert_func>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fc8:	4610      	mov	r0, r2
 8005fca:	b003      	add	sp, #12
 8005fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd0:	bfbc      	itt	lt
 8005fd2:	464b      	movlt	r3, r9
 8005fd4:	46a1      	movlt	r9, r4
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005fdc:	bfba      	itte	lt
 8005fde:	461c      	movlt	r4, r3
 8005fe0:	2501      	movlt	r5, #1
 8005fe2:	2500      	movge	r5, #0
 8005fe4:	f7ff fd42 	bl	8005a6c <_Balloc>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	b918      	cbnz	r0, 8005ff4 <__mdiff+0x60>
 8005fec:	f240 2145 	movw	r1, #581	@ 0x245
 8005ff0:	4b30      	ldr	r3, [pc, #192]	@ (80060b4 <__mdiff+0x120>)
 8005ff2:	e7e3      	b.n	8005fbc <__mdiff+0x28>
 8005ff4:	f100 0b14 	add.w	fp, r0, #20
 8005ff8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ffc:	f109 0310 	add.w	r3, r9, #16
 8006000:	60c5      	str	r5, [r0, #12]
 8006002:	f04f 0c00 	mov.w	ip, #0
 8006006:	f109 0514 	add.w	r5, r9, #20
 800600a:	46d9      	mov	r9, fp
 800600c:	6926      	ldr	r6, [r4, #16]
 800600e:	f104 0e14 	add.w	lr, r4, #20
 8006012:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006016:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	9b01      	ldr	r3, [sp, #4]
 800601e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006022:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006026:	b281      	uxth	r1, r0
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	fa1f f38a 	uxth.w	r3, sl
 800602e:	1a5b      	subs	r3, r3, r1
 8006030:	0c00      	lsrs	r0, r0, #16
 8006032:	4463      	add	r3, ip
 8006034:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006038:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006042:	4576      	cmp	r6, lr
 8006044:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006048:	f849 3b04 	str.w	r3, [r9], #4
 800604c:	d8e6      	bhi.n	800601c <__mdiff+0x88>
 800604e:	1b33      	subs	r3, r6, r4
 8006050:	3b15      	subs	r3, #21
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	3415      	adds	r4, #21
 8006058:	3304      	adds	r3, #4
 800605a:	42a6      	cmp	r6, r4
 800605c:	bf38      	it	cc
 800605e:	2304      	movcc	r3, #4
 8006060:	441d      	add	r5, r3
 8006062:	445b      	add	r3, fp
 8006064:	461e      	mov	r6, r3
 8006066:	462c      	mov	r4, r5
 8006068:	4544      	cmp	r4, r8
 800606a:	d30e      	bcc.n	800608a <__mdiff+0xf6>
 800606c:	f108 0103 	add.w	r1, r8, #3
 8006070:	1b49      	subs	r1, r1, r5
 8006072:	f021 0103 	bic.w	r1, r1, #3
 8006076:	3d03      	subs	r5, #3
 8006078:	45a8      	cmp	r8, r5
 800607a:	bf38      	it	cc
 800607c:	2100      	movcc	r1, #0
 800607e:	440b      	add	r3, r1
 8006080:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006084:	b199      	cbz	r1, 80060ae <__mdiff+0x11a>
 8006086:	6117      	str	r7, [r2, #16]
 8006088:	e79e      	b.n	8005fc8 <__mdiff+0x34>
 800608a:	46e6      	mov	lr, ip
 800608c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006090:	fa1f fc81 	uxth.w	ip, r1
 8006094:	44f4      	add	ip, lr
 8006096:	0c08      	lsrs	r0, r1, #16
 8006098:	4471      	add	r1, lr
 800609a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800609e:	b289      	uxth	r1, r1
 80060a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80060a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060a8:	f846 1b04 	str.w	r1, [r6], #4
 80060ac:	e7dc      	b.n	8006068 <__mdiff+0xd4>
 80060ae:	3f01      	subs	r7, #1
 80060b0:	e7e6      	b.n	8006080 <__mdiff+0xec>
 80060b2:	bf00      	nop
 80060b4:	080069fa 	.word	0x080069fa
 80060b8:	08006a0b 	.word	0x08006a0b

080060bc <__d2b>:
 80060bc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80060c0:	2101      	movs	r1, #1
 80060c2:	4690      	mov	r8, r2
 80060c4:	4699      	mov	r9, r3
 80060c6:	9e08      	ldr	r6, [sp, #32]
 80060c8:	f7ff fcd0 	bl	8005a6c <_Balloc>
 80060cc:	4604      	mov	r4, r0
 80060ce:	b930      	cbnz	r0, 80060de <__d2b+0x22>
 80060d0:	4602      	mov	r2, r0
 80060d2:	f240 310f 	movw	r1, #783	@ 0x30f
 80060d6:	4b23      	ldr	r3, [pc, #140]	@ (8006164 <__d2b+0xa8>)
 80060d8:	4823      	ldr	r0, [pc, #140]	@ (8006168 <__d2b+0xac>)
 80060da:	f000 f90d 	bl	80062f8 <__assert_func>
 80060de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80060e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060e6:	b10d      	cbz	r5, 80060ec <__d2b+0x30>
 80060e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	f1b8 0300 	subs.w	r3, r8, #0
 80060f2:	d024      	beq.n	800613e <__d2b+0x82>
 80060f4:	4668      	mov	r0, sp
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	f7ff fd7f 	bl	8005bfa <__lo0bits>
 80060fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006100:	b1d8      	cbz	r0, 800613a <__d2b+0x7e>
 8006102:	f1c0 0320 	rsb	r3, r0, #32
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	430b      	orrs	r3, r1
 800610c:	40c2      	lsrs	r2, r0
 800610e:	6163      	str	r3, [r4, #20]
 8006110:	9201      	str	r2, [sp, #4]
 8006112:	9b01      	ldr	r3, [sp, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	bf0c      	ite	eq
 8006118:	2201      	moveq	r2, #1
 800611a:	2202      	movne	r2, #2
 800611c:	61a3      	str	r3, [r4, #24]
 800611e:	6122      	str	r2, [r4, #16]
 8006120:	b1ad      	cbz	r5, 800614e <__d2b+0x92>
 8006122:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006126:	4405      	add	r5, r0
 8006128:	6035      	str	r5, [r6, #0]
 800612a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800612e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006130:	6018      	str	r0, [r3, #0]
 8006132:	4620      	mov	r0, r4
 8006134:	b002      	add	sp, #8
 8006136:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800613a:	6161      	str	r1, [r4, #20]
 800613c:	e7e9      	b.n	8006112 <__d2b+0x56>
 800613e:	a801      	add	r0, sp, #4
 8006140:	f7ff fd5b 	bl	8005bfa <__lo0bits>
 8006144:	9b01      	ldr	r3, [sp, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	6163      	str	r3, [r4, #20]
 800614a:	3020      	adds	r0, #32
 800614c:	e7e7      	b.n	800611e <__d2b+0x62>
 800614e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006152:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006156:	6030      	str	r0, [r6, #0]
 8006158:	6918      	ldr	r0, [r3, #16]
 800615a:	f7ff fd2f 	bl	8005bbc <__hi0bits>
 800615e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006162:	e7e4      	b.n	800612e <__d2b+0x72>
 8006164:	080069fa 	.word	0x080069fa
 8006168:	08006a0b 	.word	0x08006a0b

0800616c <__sflush_r>:
 800616c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	0716      	lsls	r6, r2, #28
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	d454      	bmi.n	8006224 <__sflush_r+0xb8>
 800617a:	684b      	ldr	r3, [r1, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	dc02      	bgt.n	8006186 <__sflush_r+0x1a>
 8006180:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	dd48      	ble.n	8006218 <__sflush_r+0xac>
 8006186:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006188:	2e00      	cmp	r6, #0
 800618a:	d045      	beq.n	8006218 <__sflush_r+0xac>
 800618c:	2300      	movs	r3, #0
 800618e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006192:	682f      	ldr	r7, [r5, #0]
 8006194:	6a21      	ldr	r1, [r4, #32]
 8006196:	602b      	str	r3, [r5, #0]
 8006198:	d030      	beq.n	80061fc <__sflush_r+0x90>
 800619a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	0759      	lsls	r1, r3, #29
 80061a0:	d505      	bpl.n	80061ae <__sflush_r+0x42>
 80061a2:	6863      	ldr	r3, [r4, #4]
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061a8:	b10b      	cbz	r3, 80061ae <__sflush_r+0x42>
 80061aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061ac:	1ad2      	subs	r2, r2, r3
 80061ae:	2300      	movs	r3, #0
 80061b0:	4628      	mov	r0, r5
 80061b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061b4:	6a21      	ldr	r1, [r4, #32]
 80061b6:	47b0      	blx	r6
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	d106      	bne.n	80061cc <__sflush_r+0x60>
 80061be:	6829      	ldr	r1, [r5, #0]
 80061c0:	291d      	cmp	r1, #29
 80061c2:	d82b      	bhi.n	800621c <__sflush_r+0xb0>
 80061c4:	4a28      	ldr	r2, [pc, #160]	@ (8006268 <__sflush_r+0xfc>)
 80061c6:	410a      	asrs	r2, r1
 80061c8:	07d6      	lsls	r6, r2, #31
 80061ca:	d427      	bmi.n	800621c <__sflush_r+0xb0>
 80061cc:	2200      	movs	r2, #0
 80061ce:	6062      	str	r2, [r4, #4]
 80061d0:	6922      	ldr	r2, [r4, #16]
 80061d2:	04d9      	lsls	r1, r3, #19
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	d504      	bpl.n	80061e2 <__sflush_r+0x76>
 80061d8:	1c42      	adds	r2, r0, #1
 80061da:	d101      	bne.n	80061e0 <__sflush_r+0x74>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b903      	cbnz	r3, 80061e2 <__sflush_r+0x76>
 80061e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80061e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061e4:	602f      	str	r7, [r5, #0]
 80061e6:	b1b9      	cbz	r1, 8006218 <__sflush_r+0xac>
 80061e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061ec:	4299      	cmp	r1, r3
 80061ee:	d002      	beq.n	80061f6 <__sflush_r+0x8a>
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7ff fb3d 	bl	8005870 <_free_r>
 80061f6:	2300      	movs	r3, #0
 80061f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061fa:	e00d      	b.n	8006218 <__sflush_r+0xac>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4628      	mov	r0, r5
 8006200:	47b0      	blx	r6
 8006202:	4602      	mov	r2, r0
 8006204:	1c50      	adds	r0, r2, #1
 8006206:	d1c9      	bne.n	800619c <__sflush_r+0x30>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0c6      	beq.n	800619c <__sflush_r+0x30>
 800620e:	2b1d      	cmp	r3, #29
 8006210:	d001      	beq.n	8006216 <__sflush_r+0xaa>
 8006212:	2b16      	cmp	r3, #22
 8006214:	d11d      	bne.n	8006252 <__sflush_r+0xe6>
 8006216:	602f      	str	r7, [r5, #0]
 8006218:	2000      	movs	r0, #0
 800621a:	e021      	b.n	8006260 <__sflush_r+0xf4>
 800621c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006220:	b21b      	sxth	r3, r3
 8006222:	e01a      	b.n	800625a <__sflush_r+0xee>
 8006224:	690f      	ldr	r7, [r1, #16]
 8006226:	2f00      	cmp	r7, #0
 8006228:	d0f6      	beq.n	8006218 <__sflush_r+0xac>
 800622a:	0793      	lsls	r3, r2, #30
 800622c:	bf18      	it	ne
 800622e:	2300      	movne	r3, #0
 8006230:	680e      	ldr	r6, [r1, #0]
 8006232:	bf08      	it	eq
 8006234:	694b      	ldreq	r3, [r1, #20]
 8006236:	1bf6      	subs	r6, r6, r7
 8006238:	600f      	str	r7, [r1, #0]
 800623a:	608b      	str	r3, [r1, #8]
 800623c:	2e00      	cmp	r6, #0
 800623e:	ddeb      	ble.n	8006218 <__sflush_r+0xac>
 8006240:	4633      	mov	r3, r6
 8006242:	463a      	mov	r2, r7
 8006244:	4628      	mov	r0, r5
 8006246:	6a21      	ldr	r1, [r4, #32]
 8006248:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800624c:	47e0      	blx	ip
 800624e:	2800      	cmp	r0, #0
 8006250:	dc07      	bgt.n	8006262 <__sflush_r+0xf6>
 8006252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800625a:	f04f 30ff 	mov.w	r0, #4294967295
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006262:	4407      	add	r7, r0
 8006264:	1a36      	subs	r6, r6, r0
 8006266:	e7e9      	b.n	800623c <__sflush_r+0xd0>
 8006268:	dfbffffe 	.word	0xdfbffffe

0800626c <_fflush_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	690b      	ldr	r3, [r1, #16]
 8006270:	4605      	mov	r5, r0
 8006272:	460c      	mov	r4, r1
 8006274:	b913      	cbnz	r3, 800627c <_fflush_r+0x10>
 8006276:	2500      	movs	r5, #0
 8006278:	4628      	mov	r0, r5
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	b118      	cbz	r0, 8006286 <_fflush_r+0x1a>
 800627e:	6a03      	ldr	r3, [r0, #32]
 8006280:	b90b      	cbnz	r3, 8006286 <_fflush_r+0x1a>
 8006282:	f7fe fb9b 	bl	80049bc <__sinit>
 8006286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f3      	beq.n	8006276 <_fflush_r+0xa>
 800628e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006290:	07d0      	lsls	r0, r2, #31
 8006292:	d404      	bmi.n	800629e <_fflush_r+0x32>
 8006294:	0599      	lsls	r1, r3, #22
 8006296:	d402      	bmi.n	800629e <_fflush_r+0x32>
 8006298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800629a:	f7fe fc86 	bl	8004baa <__retarget_lock_acquire_recursive>
 800629e:	4628      	mov	r0, r5
 80062a0:	4621      	mov	r1, r4
 80062a2:	f7ff ff63 	bl	800616c <__sflush_r>
 80062a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062a8:	4605      	mov	r5, r0
 80062aa:	07da      	lsls	r2, r3, #31
 80062ac:	d4e4      	bmi.n	8006278 <_fflush_r+0xc>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	059b      	lsls	r3, r3, #22
 80062b2:	d4e1      	bmi.n	8006278 <_fflush_r+0xc>
 80062b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062b6:	f7fe fc79 	bl	8004bac <__retarget_lock_release_recursive>
 80062ba:	e7dd      	b.n	8006278 <_fflush_r+0xc>

080062bc <_sbrk_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	2300      	movs	r3, #0
 80062c0:	4d05      	ldr	r5, [pc, #20]	@ (80062d8 <_sbrk_r+0x1c>)
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	f7fb f894 	bl	80013f4 <_sbrk>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_sbrk_r+0x1a>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_sbrk_r+0x1a>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	2000042c 	.word	0x2000042c

080062dc <memcpy>:
 80062dc:	440a      	add	r2, r1
 80062de:	4291      	cmp	r1, r2
 80062e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062e4:	d100      	bne.n	80062e8 <memcpy+0xc>
 80062e6:	4770      	bx	lr
 80062e8:	b510      	push	{r4, lr}
 80062ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ee:	4291      	cmp	r1, r2
 80062f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062f4:	d1f9      	bne.n	80062ea <memcpy+0xe>
 80062f6:	bd10      	pop	{r4, pc}

080062f8 <__assert_func>:
 80062f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062fa:	4614      	mov	r4, r2
 80062fc:	461a      	mov	r2, r3
 80062fe:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <__assert_func+0x2c>)
 8006300:	4605      	mov	r5, r0
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68d8      	ldr	r0, [r3, #12]
 8006306:	b954      	cbnz	r4, 800631e <__assert_func+0x26>
 8006308:	4b07      	ldr	r3, [pc, #28]	@ (8006328 <__assert_func+0x30>)
 800630a:	461c      	mov	r4, r3
 800630c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006310:	9100      	str	r1, [sp, #0]
 8006312:	462b      	mov	r3, r5
 8006314:	4905      	ldr	r1, [pc, #20]	@ (800632c <__assert_func+0x34>)
 8006316:	f000 f841 	bl	800639c <fiprintf>
 800631a:	f000 f851 	bl	80063c0 <abort>
 800631e:	4b04      	ldr	r3, [pc, #16]	@ (8006330 <__assert_func+0x38>)
 8006320:	e7f4      	b.n	800630c <__assert_func+0x14>
 8006322:	bf00      	nop
 8006324:	2000001c 	.word	0x2000001c
 8006328:	08006ba5 	.word	0x08006ba5
 800632c:	08006b77 	.word	0x08006b77
 8006330:	08006b6a 	.word	0x08006b6a

08006334 <_calloc_r>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	fba1 5402 	umull	r5, r4, r1, r2
 800633a:	b93c      	cbnz	r4, 800634c <_calloc_r+0x18>
 800633c:	4629      	mov	r1, r5
 800633e:	f7ff fb09 	bl	8005954 <_malloc_r>
 8006342:	4606      	mov	r6, r0
 8006344:	b928      	cbnz	r0, 8006352 <_calloc_r+0x1e>
 8006346:	2600      	movs	r6, #0
 8006348:	4630      	mov	r0, r6
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	220c      	movs	r2, #12
 800634e:	6002      	str	r2, [r0, #0]
 8006350:	e7f9      	b.n	8006346 <_calloc_r+0x12>
 8006352:	462a      	mov	r2, r5
 8006354:	4621      	mov	r1, r4
 8006356:	f7fe fbaa 	bl	8004aae <memset>
 800635a:	e7f5      	b.n	8006348 <_calloc_r+0x14>

0800635c <__ascii_mbtowc>:
 800635c:	b082      	sub	sp, #8
 800635e:	b901      	cbnz	r1, 8006362 <__ascii_mbtowc+0x6>
 8006360:	a901      	add	r1, sp, #4
 8006362:	b142      	cbz	r2, 8006376 <__ascii_mbtowc+0x1a>
 8006364:	b14b      	cbz	r3, 800637a <__ascii_mbtowc+0x1e>
 8006366:	7813      	ldrb	r3, [r2, #0]
 8006368:	600b      	str	r3, [r1, #0]
 800636a:	7812      	ldrb	r2, [r2, #0]
 800636c:	1e10      	subs	r0, r2, #0
 800636e:	bf18      	it	ne
 8006370:	2001      	movne	r0, #1
 8006372:	b002      	add	sp, #8
 8006374:	4770      	bx	lr
 8006376:	4610      	mov	r0, r2
 8006378:	e7fb      	b.n	8006372 <__ascii_mbtowc+0x16>
 800637a:	f06f 0001 	mvn.w	r0, #1
 800637e:	e7f8      	b.n	8006372 <__ascii_mbtowc+0x16>

08006380 <__ascii_wctomb>:
 8006380:	4603      	mov	r3, r0
 8006382:	4608      	mov	r0, r1
 8006384:	b141      	cbz	r1, 8006398 <__ascii_wctomb+0x18>
 8006386:	2aff      	cmp	r2, #255	@ 0xff
 8006388:	d904      	bls.n	8006394 <__ascii_wctomb+0x14>
 800638a:	228a      	movs	r2, #138	@ 0x8a
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	4770      	bx	lr
 8006394:	2001      	movs	r0, #1
 8006396:	700a      	strb	r2, [r1, #0]
 8006398:	4770      	bx	lr
	...

0800639c <fiprintf>:
 800639c:	b40e      	push	{r1, r2, r3}
 800639e:	b503      	push	{r0, r1, lr}
 80063a0:	4601      	mov	r1, r0
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	4805      	ldr	r0, [pc, #20]	@ (80063bc <fiprintf+0x20>)
 80063a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	f000 f835 	bl	800641c <_vfiprintf_r>
 80063b2:	b002      	add	sp, #8
 80063b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b8:	b003      	add	sp, #12
 80063ba:	4770      	bx	lr
 80063bc:	2000001c 	.word	0x2000001c

080063c0 <abort>:
 80063c0:	2006      	movs	r0, #6
 80063c2:	b508      	push	{r3, lr}
 80063c4:	f000 f9fe 	bl	80067c4 <raise>
 80063c8:	2001      	movs	r0, #1
 80063ca:	f7fa ff9e 	bl	800130a <_exit>

080063ce <__sfputc_r>:
 80063ce:	6893      	ldr	r3, [r2, #8]
 80063d0:	b410      	push	{r4}
 80063d2:	3b01      	subs	r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	6093      	str	r3, [r2, #8]
 80063d8:	da07      	bge.n	80063ea <__sfputc_r+0x1c>
 80063da:	6994      	ldr	r4, [r2, #24]
 80063dc:	42a3      	cmp	r3, r4
 80063de:	db01      	blt.n	80063e4 <__sfputc_r+0x16>
 80063e0:	290a      	cmp	r1, #10
 80063e2:	d102      	bne.n	80063ea <__sfputc_r+0x1c>
 80063e4:	bc10      	pop	{r4}
 80063e6:	f000 b931 	b.w	800664c <__swbuf_r>
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	1c58      	adds	r0, r3, #1
 80063ee:	6010      	str	r0, [r2, #0]
 80063f0:	7019      	strb	r1, [r3, #0]
 80063f2:	4608      	mov	r0, r1
 80063f4:	bc10      	pop	{r4}
 80063f6:	4770      	bx	lr

080063f8 <__sfputs_r>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	4606      	mov	r6, r0
 80063fc:	460f      	mov	r7, r1
 80063fe:	4614      	mov	r4, r2
 8006400:	18d5      	adds	r5, r2, r3
 8006402:	42ac      	cmp	r4, r5
 8006404:	d101      	bne.n	800640a <__sfputs_r+0x12>
 8006406:	2000      	movs	r0, #0
 8006408:	e007      	b.n	800641a <__sfputs_r+0x22>
 800640a:	463a      	mov	r2, r7
 800640c:	4630      	mov	r0, r6
 800640e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006412:	f7ff ffdc 	bl	80063ce <__sfputc_r>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d1f3      	bne.n	8006402 <__sfputs_r+0xa>
 800641a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800641c <_vfiprintf_r>:
 800641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	460d      	mov	r5, r1
 8006422:	4614      	mov	r4, r2
 8006424:	4698      	mov	r8, r3
 8006426:	4606      	mov	r6, r0
 8006428:	b09d      	sub	sp, #116	@ 0x74
 800642a:	b118      	cbz	r0, 8006434 <_vfiprintf_r+0x18>
 800642c:	6a03      	ldr	r3, [r0, #32]
 800642e:	b90b      	cbnz	r3, 8006434 <_vfiprintf_r+0x18>
 8006430:	f7fe fac4 	bl	80049bc <__sinit>
 8006434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006436:	07d9      	lsls	r1, r3, #31
 8006438:	d405      	bmi.n	8006446 <_vfiprintf_r+0x2a>
 800643a:	89ab      	ldrh	r3, [r5, #12]
 800643c:	059a      	lsls	r2, r3, #22
 800643e:	d402      	bmi.n	8006446 <_vfiprintf_r+0x2a>
 8006440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006442:	f7fe fbb2 	bl	8004baa <__retarget_lock_acquire_recursive>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	071b      	lsls	r3, r3, #28
 800644a:	d501      	bpl.n	8006450 <_vfiprintf_r+0x34>
 800644c:	692b      	ldr	r3, [r5, #16]
 800644e:	b99b      	cbnz	r3, 8006478 <_vfiprintf_r+0x5c>
 8006450:	4629      	mov	r1, r5
 8006452:	4630      	mov	r0, r6
 8006454:	f000 f938 	bl	80066c8 <__swsetup_r>
 8006458:	b170      	cbz	r0, 8006478 <_vfiprintf_r+0x5c>
 800645a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800645c:	07dc      	lsls	r4, r3, #31
 800645e:	d504      	bpl.n	800646a <_vfiprintf_r+0x4e>
 8006460:	f04f 30ff 	mov.w	r0, #4294967295
 8006464:	b01d      	add	sp, #116	@ 0x74
 8006466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646a:	89ab      	ldrh	r3, [r5, #12]
 800646c:	0598      	lsls	r0, r3, #22
 800646e:	d4f7      	bmi.n	8006460 <_vfiprintf_r+0x44>
 8006470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006472:	f7fe fb9b 	bl	8004bac <__retarget_lock_release_recursive>
 8006476:	e7f3      	b.n	8006460 <_vfiprintf_r+0x44>
 8006478:	2300      	movs	r3, #0
 800647a:	9309      	str	r3, [sp, #36]	@ 0x24
 800647c:	2320      	movs	r3, #32
 800647e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006482:	2330      	movs	r3, #48	@ 0x30
 8006484:	f04f 0901 	mov.w	r9, #1
 8006488:	f8cd 800c 	str.w	r8, [sp, #12]
 800648c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006638 <_vfiprintf_r+0x21c>
 8006490:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006494:	4623      	mov	r3, r4
 8006496:	469a      	mov	sl, r3
 8006498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800649c:	b10a      	cbz	r2, 80064a2 <_vfiprintf_r+0x86>
 800649e:	2a25      	cmp	r2, #37	@ 0x25
 80064a0:	d1f9      	bne.n	8006496 <_vfiprintf_r+0x7a>
 80064a2:	ebba 0b04 	subs.w	fp, sl, r4
 80064a6:	d00b      	beq.n	80064c0 <_vfiprintf_r+0xa4>
 80064a8:	465b      	mov	r3, fp
 80064aa:	4622      	mov	r2, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7ff ffa2 	bl	80063f8 <__sfputs_r>
 80064b4:	3001      	adds	r0, #1
 80064b6:	f000 80a7 	beq.w	8006608 <_vfiprintf_r+0x1ec>
 80064ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064bc:	445a      	add	r2, fp
 80064be:	9209      	str	r2, [sp, #36]	@ 0x24
 80064c0:	f89a 3000 	ldrb.w	r3, [sl]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 809f 	beq.w	8006608 <_vfiprintf_r+0x1ec>
 80064ca:	2300      	movs	r3, #0
 80064cc:	f04f 32ff 	mov.w	r2, #4294967295
 80064d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d4:	f10a 0a01 	add.w	sl, sl, #1
 80064d8:	9304      	str	r3, [sp, #16]
 80064da:	9307      	str	r3, [sp, #28]
 80064dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80064e2:	4654      	mov	r4, sl
 80064e4:	2205      	movs	r2, #5
 80064e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ea:	4853      	ldr	r0, [pc, #332]	@ (8006638 <_vfiprintf_r+0x21c>)
 80064ec:	f7fe fb5f 	bl	8004bae <memchr>
 80064f0:	9a04      	ldr	r2, [sp, #16]
 80064f2:	b9d8      	cbnz	r0, 800652c <_vfiprintf_r+0x110>
 80064f4:	06d1      	lsls	r1, r2, #27
 80064f6:	bf44      	itt	mi
 80064f8:	2320      	movmi	r3, #32
 80064fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064fe:	0713      	lsls	r3, r2, #28
 8006500:	bf44      	itt	mi
 8006502:	232b      	movmi	r3, #43	@ 0x2b
 8006504:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006508:	f89a 3000 	ldrb.w	r3, [sl]
 800650c:	2b2a      	cmp	r3, #42	@ 0x2a
 800650e:	d015      	beq.n	800653c <_vfiprintf_r+0x120>
 8006510:	4654      	mov	r4, sl
 8006512:	2000      	movs	r0, #0
 8006514:	f04f 0c0a 	mov.w	ip, #10
 8006518:	9a07      	ldr	r2, [sp, #28]
 800651a:	4621      	mov	r1, r4
 800651c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006520:	3b30      	subs	r3, #48	@ 0x30
 8006522:	2b09      	cmp	r3, #9
 8006524:	d94b      	bls.n	80065be <_vfiprintf_r+0x1a2>
 8006526:	b1b0      	cbz	r0, 8006556 <_vfiprintf_r+0x13a>
 8006528:	9207      	str	r2, [sp, #28]
 800652a:	e014      	b.n	8006556 <_vfiprintf_r+0x13a>
 800652c:	eba0 0308 	sub.w	r3, r0, r8
 8006530:	fa09 f303 	lsl.w	r3, r9, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	46a2      	mov	sl, r4
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	e7d2      	b.n	80064e2 <_vfiprintf_r+0xc6>
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	1d19      	adds	r1, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	9103      	str	r1, [sp, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	bfbb      	ittet	lt
 8006548:	425b      	neglt	r3, r3
 800654a:	f042 0202 	orrlt.w	r2, r2, #2
 800654e:	9307      	strge	r3, [sp, #28]
 8006550:	9307      	strlt	r3, [sp, #28]
 8006552:	bfb8      	it	lt
 8006554:	9204      	strlt	r2, [sp, #16]
 8006556:	7823      	ldrb	r3, [r4, #0]
 8006558:	2b2e      	cmp	r3, #46	@ 0x2e
 800655a:	d10a      	bne.n	8006572 <_vfiprintf_r+0x156>
 800655c:	7863      	ldrb	r3, [r4, #1]
 800655e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006560:	d132      	bne.n	80065c8 <_vfiprintf_r+0x1ac>
 8006562:	9b03      	ldr	r3, [sp, #12]
 8006564:	3402      	adds	r4, #2
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	9203      	str	r2, [sp, #12]
 800656c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006570:	9305      	str	r3, [sp, #20]
 8006572:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800663c <_vfiprintf_r+0x220>
 8006576:	2203      	movs	r2, #3
 8006578:	4650      	mov	r0, sl
 800657a:	7821      	ldrb	r1, [r4, #0]
 800657c:	f7fe fb17 	bl	8004bae <memchr>
 8006580:	b138      	cbz	r0, 8006592 <_vfiprintf_r+0x176>
 8006582:	2240      	movs	r2, #64	@ 0x40
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	eba0 000a 	sub.w	r0, r0, sl
 800658a:	4082      	lsls	r2, r0
 800658c:	4313      	orrs	r3, r2
 800658e:	3401      	adds	r4, #1
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006596:	2206      	movs	r2, #6
 8006598:	4829      	ldr	r0, [pc, #164]	@ (8006640 <_vfiprintf_r+0x224>)
 800659a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800659e:	f7fe fb06 	bl	8004bae <memchr>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d03f      	beq.n	8006626 <_vfiprintf_r+0x20a>
 80065a6:	4b27      	ldr	r3, [pc, #156]	@ (8006644 <_vfiprintf_r+0x228>)
 80065a8:	bb1b      	cbnz	r3, 80065f2 <_vfiprintf_r+0x1d6>
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	3307      	adds	r3, #7
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	3308      	adds	r3, #8
 80065b4:	9303      	str	r3, [sp, #12]
 80065b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b8:	443b      	add	r3, r7
 80065ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80065bc:	e76a      	b.n	8006494 <_vfiprintf_r+0x78>
 80065be:	460c      	mov	r4, r1
 80065c0:	2001      	movs	r0, #1
 80065c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c6:	e7a8      	b.n	800651a <_vfiprintf_r+0xfe>
 80065c8:	2300      	movs	r3, #0
 80065ca:	f04f 0c0a 	mov.w	ip, #10
 80065ce:	4619      	mov	r1, r3
 80065d0:	3401      	adds	r4, #1
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	4620      	mov	r0, r4
 80065d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065da:	3a30      	subs	r2, #48	@ 0x30
 80065dc:	2a09      	cmp	r2, #9
 80065de:	d903      	bls.n	80065e8 <_vfiprintf_r+0x1cc>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0c6      	beq.n	8006572 <_vfiprintf_r+0x156>
 80065e4:	9105      	str	r1, [sp, #20]
 80065e6:	e7c4      	b.n	8006572 <_vfiprintf_r+0x156>
 80065e8:	4604      	mov	r4, r0
 80065ea:	2301      	movs	r3, #1
 80065ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80065f0:	e7f0      	b.n	80065d4 <_vfiprintf_r+0x1b8>
 80065f2:	ab03      	add	r3, sp, #12
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	462a      	mov	r2, r5
 80065f8:	4630      	mov	r0, r6
 80065fa:	4b13      	ldr	r3, [pc, #76]	@ (8006648 <_vfiprintf_r+0x22c>)
 80065fc:	a904      	add	r1, sp, #16
 80065fe:	f7fd fd93 	bl	8004128 <_printf_float>
 8006602:	4607      	mov	r7, r0
 8006604:	1c78      	adds	r0, r7, #1
 8006606:	d1d6      	bne.n	80065b6 <_vfiprintf_r+0x19a>
 8006608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800660a:	07d9      	lsls	r1, r3, #31
 800660c:	d405      	bmi.n	800661a <_vfiprintf_r+0x1fe>
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	059a      	lsls	r2, r3, #22
 8006612:	d402      	bmi.n	800661a <_vfiprintf_r+0x1fe>
 8006614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006616:	f7fe fac9 	bl	8004bac <__retarget_lock_release_recursive>
 800661a:	89ab      	ldrh	r3, [r5, #12]
 800661c:	065b      	lsls	r3, r3, #25
 800661e:	f53f af1f 	bmi.w	8006460 <_vfiprintf_r+0x44>
 8006622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006624:	e71e      	b.n	8006464 <_vfiprintf_r+0x48>
 8006626:	ab03      	add	r3, sp, #12
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	462a      	mov	r2, r5
 800662c:	4630      	mov	r0, r6
 800662e:	4b06      	ldr	r3, [pc, #24]	@ (8006648 <_vfiprintf_r+0x22c>)
 8006630:	a904      	add	r1, sp, #16
 8006632:	f7fe f817 	bl	8004664 <_printf_i>
 8006636:	e7e4      	b.n	8006602 <_vfiprintf_r+0x1e6>
 8006638:	08006ca7 	.word	0x08006ca7
 800663c:	08006cad 	.word	0x08006cad
 8006640:	08006cb1 	.word	0x08006cb1
 8006644:	08004129 	.word	0x08004129
 8006648:	080063f9 	.word	0x080063f9

0800664c <__swbuf_r>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	460e      	mov	r6, r1
 8006650:	4614      	mov	r4, r2
 8006652:	4605      	mov	r5, r0
 8006654:	b118      	cbz	r0, 800665e <__swbuf_r+0x12>
 8006656:	6a03      	ldr	r3, [r0, #32]
 8006658:	b90b      	cbnz	r3, 800665e <__swbuf_r+0x12>
 800665a:	f7fe f9af 	bl	80049bc <__sinit>
 800665e:	69a3      	ldr	r3, [r4, #24]
 8006660:	60a3      	str	r3, [r4, #8]
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	071a      	lsls	r2, r3, #28
 8006666:	d501      	bpl.n	800666c <__swbuf_r+0x20>
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	b943      	cbnz	r3, 800667e <__swbuf_r+0x32>
 800666c:	4621      	mov	r1, r4
 800666e:	4628      	mov	r0, r5
 8006670:	f000 f82a 	bl	80066c8 <__swsetup_r>
 8006674:	b118      	cbz	r0, 800667e <__swbuf_r+0x32>
 8006676:	f04f 37ff 	mov.w	r7, #4294967295
 800667a:	4638      	mov	r0, r7
 800667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	6922      	ldr	r2, [r4, #16]
 8006682:	b2f6      	uxtb	r6, r6
 8006684:	1a98      	subs	r0, r3, r2
 8006686:	6963      	ldr	r3, [r4, #20]
 8006688:	4637      	mov	r7, r6
 800668a:	4283      	cmp	r3, r0
 800668c:	dc05      	bgt.n	800669a <__swbuf_r+0x4e>
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f7ff fdeb 	bl	800626c <_fflush_r>
 8006696:	2800      	cmp	r0, #0
 8006698:	d1ed      	bne.n	8006676 <__swbuf_r+0x2a>
 800669a:	68a3      	ldr	r3, [r4, #8]
 800669c:	3b01      	subs	r3, #1
 800669e:	60a3      	str	r3, [r4, #8]
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	6022      	str	r2, [r4, #0]
 80066a6:	701e      	strb	r6, [r3, #0]
 80066a8:	6962      	ldr	r2, [r4, #20]
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d004      	beq.n	80066ba <__swbuf_r+0x6e>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	07db      	lsls	r3, r3, #31
 80066b4:	d5e1      	bpl.n	800667a <__swbuf_r+0x2e>
 80066b6:	2e0a      	cmp	r6, #10
 80066b8:	d1df      	bne.n	800667a <__swbuf_r+0x2e>
 80066ba:	4621      	mov	r1, r4
 80066bc:	4628      	mov	r0, r5
 80066be:	f7ff fdd5 	bl	800626c <_fflush_r>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d0d9      	beq.n	800667a <__swbuf_r+0x2e>
 80066c6:	e7d6      	b.n	8006676 <__swbuf_r+0x2a>

080066c8 <__swsetup_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4b29      	ldr	r3, [pc, #164]	@ (8006770 <__swsetup_r+0xa8>)
 80066cc:	4605      	mov	r5, r0
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	460c      	mov	r4, r1
 80066d2:	b118      	cbz	r0, 80066dc <__swsetup_r+0x14>
 80066d4:	6a03      	ldr	r3, [r0, #32]
 80066d6:	b90b      	cbnz	r3, 80066dc <__swsetup_r+0x14>
 80066d8:	f7fe f970 	bl	80049bc <__sinit>
 80066dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e0:	0719      	lsls	r1, r3, #28
 80066e2:	d422      	bmi.n	800672a <__swsetup_r+0x62>
 80066e4:	06da      	lsls	r2, r3, #27
 80066e6:	d407      	bmi.n	80066f8 <__swsetup_r+0x30>
 80066e8:	2209      	movs	r2, #9
 80066ea:	602a      	str	r2, [r5, #0]
 80066ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	e033      	b.n	8006760 <__swsetup_r+0x98>
 80066f8:	0758      	lsls	r0, r3, #29
 80066fa:	d512      	bpl.n	8006722 <__swsetup_r+0x5a>
 80066fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066fe:	b141      	cbz	r1, 8006712 <__swsetup_r+0x4a>
 8006700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006704:	4299      	cmp	r1, r3
 8006706:	d002      	beq.n	800670e <__swsetup_r+0x46>
 8006708:	4628      	mov	r0, r5
 800670a:	f7ff f8b1 	bl	8005870 <_free_r>
 800670e:	2300      	movs	r3, #0
 8006710:	6363      	str	r3, [r4, #52]	@ 0x34
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	2300      	movs	r3, #0
 800671c:	6063      	str	r3, [r4, #4]
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	f043 0308 	orr.w	r3, r3, #8
 8006728:	81a3      	strh	r3, [r4, #12]
 800672a:	6923      	ldr	r3, [r4, #16]
 800672c:	b94b      	cbnz	r3, 8006742 <__swsetup_r+0x7a>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006738:	d003      	beq.n	8006742 <__swsetup_r+0x7a>
 800673a:	4621      	mov	r1, r4
 800673c:	4628      	mov	r0, r5
 800673e:	f000 f882 	bl	8006846 <__smakebuf_r>
 8006742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006746:	f013 0201 	ands.w	r2, r3, #1
 800674a:	d00a      	beq.n	8006762 <__swsetup_r+0x9a>
 800674c:	2200      	movs	r2, #0
 800674e:	60a2      	str	r2, [r4, #8]
 8006750:	6962      	ldr	r2, [r4, #20]
 8006752:	4252      	negs	r2, r2
 8006754:	61a2      	str	r2, [r4, #24]
 8006756:	6922      	ldr	r2, [r4, #16]
 8006758:	b942      	cbnz	r2, 800676c <__swsetup_r+0xa4>
 800675a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800675e:	d1c5      	bne.n	80066ec <__swsetup_r+0x24>
 8006760:	bd38      	pop	{r3, r4, r5, pc}
 8006762:	0799      	lsls	r1, r3, #30
 8006764:	bf58      	it	pl
 8006766:	6962      	ldrpl	r2, [r4, #20]
 8006768:	60a2      	str	r2, [r4, #8]
 800676a:	e7f4      	b.n	8006756 <__swsetup_r+0x8e>
 800676c:	2000      	movs	r0, #0
 800676e:	e7f7      	b.n	8006760 <__swsetup_r+0x98>
 8006770:	2000001c 	.word	0x2000001c

08006774 <_raise_r>:
 8006774:	291f      	cmp	r1, #31
 8006776:	b538      	push	{r3, r4, r5, lr}
 8006778:	4605      	mov	r5, r0
 800677a:	460c      	mov	r4, r1
 800677c:	d904      	bls.n	8006788 <_raise_r+0x14>
 800677e:	2316      	movs	r3, #22
 8006780:	6003      	str	r3, [r0, #0]
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	bd38      	pop	{r3, r4, r5, pc}
 8006788:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800678a:	b112      	cbz	r2, 8006792 <_raise_r+0x1e>
 800678c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006790:	b94b      	cbnz	r3, 80067a6 <_raise_r+0x32>
 8006792:	4628      	mov	r0, r5
 8006794:	f000 f830 	bl	80067f8 <_getpid_r>
 8006798:	4622      	mov	r2, r4
 800679a:	4601      	mov	r1, r0
 800679c:	4628      	mov	r0, r5
 800679e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067a2:	f000 b817 	b.w	80067d4 <_kill_r>
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d00a      	beq.n	80067c0 <_raise_r+0x4c>
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	d103      	bne.n	80067b6 <_raise_r+0x42>
 80067ae:	2316      	movs	r3, #22
 80067b0:	6003      	str	r3, [r0, #0]
 80067b2:	2001      	movs	r0, #1
 80067b4:	e7e7      	b.n	8006786 <_raise_r+0x12>
 80067b6:	2100      	movs	r1, #0
 80067b8:	4620      	mov	r0, r4
 80067ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80067be:	4798      	blx	r3
 80067c0:	2000      	movs	r0, #0
 80067c2:	e7e0      	b.n	8006786 <_raise_r+0x12>

080067c4 <raise>:
 80067c4:	4b02      	ldr	r3, [pc, #8]	@ (80067d0 <raise+0xc>)
 80067c6:	4601      	mov	r1, r0
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f7ff bfd3 	b.w	8006774 <_raise_r>
 80067ce:	bf00      	nop
 80067d0:	2000001c 	.word	0x2000001c

080067d4 <_kill_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	2300      	movs	r3, #0
 80067d8:	4d06      	ldr	r5, [pc, #24]	@ (80067f4 <_kill_r+0x20>)
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	f7fa fd82 	bl	80012ea <_kill>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d102      	bne.n	80067f0 <_kill_r+0x1c>
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	b103      	cbz	r3, 80067f0 <_kill_r+0x1c>
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	bf00      	nop
 80067f4:	2000042c 	.word	0x2000042c

080067f8 <_getpid_r>:
 80067f8:	f7fa bd70 	b.w	80012dc <_getpid>

080067fc <__swhatbuf_r>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	460c      	mov	r4, r1
 8006800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006804:	4615      	mov	r5, r2
 8006806:	2900      	cmp	r1, #0
 8006808:	461e      	mov	r6, r3
 800680a:	b096      	sub	sp, #88	@ 0x58
 800680c:	da0c      	bge.n	8006828 <__swhatbuf_r+0x2c>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	2100      	movs	r1, #0
 8006812:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006816:	bf14      	ite	ne
 8006818:	2340      	movne	r3, #64	@ 0x40
 800681a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800681e:	2000      	movs	r0, #0
 8006820:	6031      	str	r1, [r6, #0]
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	b016      	add	sp, #88	@ 0x58
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	466a      	mov	r2, sp
 800682a:	f000 f849 	bl	80068c0 <_fstat_r>
 800682e:	2800      	cmp	r0, #0
 8006830:	dbed      	blt.n	800680e <__swhatbuf_r+0x12>
 8006832:	9901      	ldr	r1, [sp, #4]
 8006834:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006838:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800683c:	4259      	negs	r1, r3
 800683e:	4159      	adcs	r1, r3
 8006840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006844:	e7eb      	b.n	800681e <__swhatbuf_r+0x22>

08006846 <__smakebuf_r>:
 8006846:	898b      	ldrh	r3, [r1, #12]
 8006848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800684a:	079d      	lsls	r5, r3, #30
 800684c:	4606      	mov	r6, r0
 800684e:	460c      	mov	r4, r1
 8006850:	d507      	bpl.n	8006862 <__smakebuf_r+0x1c>
 8006852:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	6123      	str	r3, [r4, #16]
 800685a:	2301      	movs	r3, #1
 800685c:	6163      	str	r3, [r4, #20]
 800685e:	b003      	add	sp, #12
 8006860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006862:	466a      	mov	r2, sp
 8006864:	ab01      	add	r3, sp, #4
 8006866:	f7ff ffc9 	bl	80067fc <__swhatbuf_r>
 800686a:	9f00      	ldr	r7, [sp, #0]
 800686c:	4605      	mov	r5, r0
 800686e:	4639      	mov	r1, r7
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff f86f 	bl	8005954 <_malloc_r>
 8006876:	b948      	cbnz	r0, 800688c <__smakebuf_r+0x46>
 8006878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687c:	059a      	lsls	r2, r3, #22
 800687e:	d4ee      	bmi.n	800685e <__smakebuf_r+0x18>
 8006880:	f023 0303 	bic.w	r3, r3, #3
 8006884:	f043 0302 	orr.w	r3, r3, #2
 8006888:	81a3      	strh	r3, [r4, #12]
 800688a:	e7e2      	b.n	8006852 <__smakebuf_r+0xc>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	9b01      	ldr	r3, [sp, #4]
 800689a:	6020      	str	r0, [r4, #0]
 800689c:	b15b      	cbz	r3, 80068b6 <__smakebuf_r+0x70>
 800689e:	4630      	mov	r0, r6
 80068a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068a4:	f000 f81e 	bl	80068e4 <_isatty_r>
 80068a8:	b128      	cbz	r0, 80068b6 <__smakebuf_r+0x70>
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	f023 0303 	bic.w	r3, r3, #3
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	431d      	orrs	r5, r3
 80068ba:	81a5      	strh	r5, [r4, #12]
 80068bc:	e7cf      	b.n	800685e <__smakebuf_r+0x18>
	...

080068c0 <_fstat_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	2300      	movs	r3, #0
 80068c4:	4d06      	ldr	r5, [pc, #24]	@ (80068e0 <_fstat_r+0x20>)
 80068c6:	4604      	mov	r4, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	f7fa fd6b 	bl	80013a8 <_fstat>
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	d102      	bne.n	80068dc <_fstat_r+0x1c>
 80068d6:	682b      	ldr	r3, [r5, #0]
 80068d8:	b103      	cbz	r3, 80068dc <_fstat_r+0x1c>
 80068da:	6023      	str	r3, [r4, #0]
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	bf00      	nop
 80068e0:	2000042c 	.word	0x2000042c

080068e4 <_isatty_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	2300      	movs	r3, #0
 80068e8:	4d05      	ldr	r5, [pc, #20]	@ (8006900 <_isatty_r+0x1c>)
 80068ea:	4604      	mov	r4, r0
 80068ec:	4608      	mov	r0, r1
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	f7fa fd69 	bl	80013c6 <_isatty>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_isatty_r+0x1a>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_isatty_r+0x1a>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	2000042c 	.word	0x2000042c

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
