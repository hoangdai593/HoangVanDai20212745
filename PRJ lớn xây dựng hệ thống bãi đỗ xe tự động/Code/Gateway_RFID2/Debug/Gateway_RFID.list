
Gateway_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa34  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800ab40  0800ab40  0000bb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf4  0800abf4  0000c1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf4  0800abf4  0000bbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abfc  0800abfc  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abfc  0800abfc  0000bbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac00  0800ac00  0000bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800ac04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001500  200001cc  0800add0  0000c1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016cc  0800add0  0000c6cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f09  00000000  00000000  0000c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b81  00000000  00000000  000230fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00026c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010be  00000000  00000000  00028248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5d4  00000000  00000000  00029306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b399  00000000  00000000  000448da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009261c  00000000  00000000  0005fc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f228f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000609c  00000000  00000000  000f22d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000f8370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ab28 	.word	0x0800ab28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	0800ab28 	.word	0x0800ab28

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <lcd_send_cmd>:
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f023 030f 	bic.w	r3, r3, #15
 8000674:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	f043 030c 	orr.w	r3, r3, #12
 8000682:	b2db      	uxtb	r3, r3
 8000684:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	b2db      	uxtb	r3, r3
 800068e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	f043 030c 	orr.w	r3, r3, #12
 8000696:	b2db      	uxtb	r3, r3
 8000698:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 80006a4:	f107 0208 	add.w	r2, r7, #8
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2304      	movs	r3, #4
 80006ae:	214e      	movs	r1, #78	@ 0x4e
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <lcd_send_cmd+0x5c>)
 80006b2:	f001 fd95 	bl	80021e0 <HAL_I2C_Master_Transmit>
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000027c 	.word	0x2000027c

080006c4 <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af02      	add	r7, sp, #8
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f023 030f 	bic.w	r3, r3, #15
 80006d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	f043 030d 	orr.w	r3, r3, #13
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	f043 0309 	orr.w	r3, r3, #9
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
 80006f2:	f043 030d 	orr.w	r3, r3, #13
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	f043 0309 	orr.w	r3, r3, #9
 8000700:	b2db      	uxtb	r3, r3
 8000702:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000704:	f107 0208 	add.w	r2, r7, #8
 8000708:	2364      	movs	r3, #100	@ 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2304      	movs	r3, #4
 800070e:	214e      	movs	r1, #78	@ 0x4e
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <lcd_send_data+0x5c>)
 8000712:	f001 fd65 	bl	80021e0 <HAL_I2C_Master_Transmit>
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000027c 	.word	0x2000027c

08000724 <lcd_clear>:

void lcd_clear (void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 800072a:	2080      	movs	r0, #128	@ 0x80
 800072c:	f7ff ff9a 	bl	8000664 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	e005      	b.n	8000742 <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 8000736:	2020      	movs	r0, #32
 8000738:	f7ff ffc4 	bl	80006c4 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b45      	cmp	r3, #69	@ 0x45
 8000746:	ddf6      	ble.n	8000736 <lcd_clear+0x12>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]
    switch (row)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <lcd_put_cur+0x18>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d005      	beq.n	8000774 <lcd_put_cur+0x22>
 8000768:	e009      	b.n	800077e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	603b      	str	r3, [r7, #0]
            break;
 8000772:	e004      	b.n	800077e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800077a:	603b      	str	r3, [r7, #0]
            break;
 800077c:	bf00      	nop
    }

    lcd_send_cmd(col);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff6e 	bl	8000664 <lcd_send_cmd>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <lcd_init>:

void lcd_init (void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 8000794:	2032      	movs	r0, #50	@ 0x32
 8000796:	f001 f8e1 	bl	800195c <HAL_Delay>
	lcd_send_cmd(0x30);
 800079a:	2030      	movs	r0, #48	@ 0x30
 800079c:	f7ff ff62 	bl	8000664 <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 80007a0:	2005      	movs	r0, #5
 80007a2:	f001 f8db 	bl	800195c <HAL_Delay>
	lcd_send_cmd(0x30);
 80007a6:	2030      	movs	r0, #48	@ 0x30
 80007a8:	f7ff ff5c 	bl	8000664 <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 80007ac:	2001      	movs	r0, #1
 80007ae:	f001 f8d5 	bl	800195c <HAL_Delay>
	lcd_send_cmd(0x30);
 80007b2:	2030      	movs	r0, #48	@ 0x30
 80007b4:	f7ff ff56 	bl	8000664 <lcd_send_cmd>
	HAL_Delay(10);
 80007b8:	200a      	movs	r0, #10
 80007ba:	f001 f8cf 	bl	800195c <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 80007be:	2020      	movs	r0, #32
 80007c0:	f7ff ff50 	bl	8000664 <lcd_send_cmd>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 f8c9 	bl	800195c <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 80007ca:	2028      	movs	r0, #40	@ 0x28
 80007cc:	f7ff ff4a 	bl	8000664 <lcd_send_cmd>
	HAL_Delay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f001 f8c3 	bl	800195c <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 80007d6:	2008      	movs	r0, #8
 80007d8:	f7ff ff44 	bl	8000664 <lcd_send_cmd>
	HAL_Delay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f001 f8bd 	bl	800195c <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff ff3e 	bl	8000664 <lcd_send_cmd>
	HAL_Delay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f001 f8b7 	bl	800195c <HAL_Delay>
	HAL_Delay(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f001 f8b4 	bl	800195c <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 80007f4:	2006      	movs	r0, #6
 80007f6:	f7ff ff35 	bl	8000664 <lcd_send_cmd>
	HAL_Delay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f001 f8ae 	bl	800195c <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 8000800:	200c      	movs	r0, #12
 8000802:	f7ff ff2f 	bl	8000664 <lcd_send_cmd>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8000812:	e006      	b.n	8000822 <lcd_send_string+0x18>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff51 	bl	80006c4 <lcd_send_data>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f4      	bne.n	8000814 <lcd_send_string+0xa>
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t us)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <delay+0x2c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000846:	bf00      	nop
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <delay+0x2c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3f9      	bcc.n	8000848 <delay+0x14>
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	20000328 	.word	0x20000328

08000864 <stepper_set_rpm>:
void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 800086c:	f643 1238 	movw	r2, #14648	@ 0x3938
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	fb92 f3f3 	sdiv	r3, r2, r3
 8000876:	b29b      	uxth	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffdb 	bl	8000834 <delay>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <stepper_half_drive>:
void stepper_half_drive (int step)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  switch (step){
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b07      	cmp	r3, #7
 8000894:	f200 80bc 	bhi.w	8000a10 <stepper_half_drive+0x188>
 8000898:	a201      	add	r2, pc, #4	@ (adr r2, 80008a0 <stepper_half_drive+0x18>)
 800089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089e:	bf00      	nop
 80008a0:	080008c1 	.word	0x080008c1
 80008a4:	080008eb 	.word	0x080008eb
 80008a8:	08000915 	.word	0x08000915
 80008ac:	0800093f 	.word	0x0800093f
 80008b0:	08000969 	.word	0x08000969
 80008b4:	08000993 	.word	0x08000993
 80008b8:	080009bd 	.word	0x080009bd
 80008bc:	080009e7 	.word	0x080009e7
      case 0:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 80008c0:	2201      	movs	r2, #1
 80008c2:	2101      	movs	r1, #1
 80008c4:	4854      	ldr	r0, [pc, #336]	@ (8000a18 <stepper_half_drive+0x190>)
 80008c6:	f001 fb16 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 80008ca:	2200      	movs	r2, #0
 80008cc:	2102      	movs	r1, #2
 80008ce:	4852      	ldr	r0, [pc, #328]	@ (8000a18 <stepper_half_drive+0x190>)
 80008d0:	f001 fb11 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 80008d4:	2200      	movs	r2, #0
 80008d6:	2104      	movs	r1, #4
 80008d8:	484f      	ldr	r0, [pc, #316]	@ (8000a18 <stepper_half_drive+0x190>)
 80008da:	f001 fb0c 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	484d      	ldr	r0, [pc, #308]	@ (8000a18 <stepper_half_drive+0x190>)
 80008e4:	f001 fb07 	bl	8001ef6 <HAL_GPIO_WritePin>
		  break;
 80008e8:	e092      	b.n	8000a10 <stepper_half_drive+0x188>

	  case 1:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 80008ea:	2201      	movs	r2, #1
 80008ec:	2101      	movs	r1, #1
 80008ee:	484a      	ldr	r0, [pc, #296]	@ (8000a18 <stepper_half_drive+0x190>)
 80008f0:	f001 fb01 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 80008f4:	2201      	movs	r2, #1
 80008f6:	2102      	movs	r1, #2
 80008f8:	4847      	ldr	r0, [pc, #284]	@ (8000a18 <stepper_half_drive+0x190>)
 80008fa:	f001 fafc 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 80008fe:	2200      	movs	r2, #0
 8000900:	2104      	movs	r1, #4
 8000902:	4845      	ldr	r0, [pc, #276]	@ (8000a18 <stepper_half_drive+0x190>)
 8000904:	f001 faf7 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 8000908:	2200      	movs	r2, #0
 800090a:	2108      	movs	r1, #8
 800090c:	4842      	ldr	r0, [pc, #264]	@ (8000a18 <stepper_half_drive+0x190>)
 800090e:	f001 faf2 	bl	8001ef6 <HAL_GPIO_WritePin>
		  break;
 8000912:	e07d      	b.n	8000a10 <stepper_half_drive+0x188>

          case 2:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 8000914:	2200      	movs	r2, #0
 8000916:	2101      	movs	r1, #1
 8000918:	483f      	ldr	r0, [pc, #252]	@ (8000a18 <stepper_half_drive+0x190>)
 800091a:	f001 faec 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 800091e:	2201      	movs	r2, #1
 8000920:	2102      	movs	r1, #2
 8000922:	483d      	ldr	r0, [pc, #244]	@ (8000a18 <stepper_half_drive+0x190>)
 8000924:	f001 fae7 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 8000928:	2200      	movs	r2, #0
 800092a:	2104      	movs	r1, #4
 800092c:	483a      	ldr	r0, [pc, #232]	@ (8000a18 <stepper_half_drive+0x190>)
 800092e:	f001 fae2 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	4838      	ldr	r0, [pc, #224]	@ (8000a18 <stepper_half_drive+0x190>)
 8000938:	f001 fadd 	bl	8001ef6 <HAL_GPIO_WritePin>
		  break;
 800093c:	e068      	b.n	8000a10 <stepper_half_drive+0x188>

	  case 3:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 800093e:	2200      	movs	r2, #0
 8000940:	2101      	movs	r1, #1
 8000942:	4835      	ldr	r0, [pc, #212]	@ (8000a18 <stepper_half_drive+0x190>)
 8000944:	f001 fad7 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	4832      	ldr	r0, [pc, #200]	@ (8000a18 <stepper_half_drive+0x190>)
 800094e:	f001 fad2 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN3
 8000952:	2201      	movs	r2, #1
 8000954:	2104      	movs	r1, #4
 8000956:	4830      	ldr	r0, [pc, #192]	@ (8000a18 <stepper_half_drive+0x190>)
 8000958:	f001 facd 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 800095c:	2200      	movs	r2, #0
 800095e:	2108      	movs	r1, #8
 8000960:	482d      	ldr	r0, [pc, #180]	@ (8000a18 <stepper_half_drive+0x190>)
 8000962:	f001 fac8 	bl	8001ef6 <HAL_GPIO_WritePin>
		  break;
 8000966:	e053      	b.n	8000a10 <stepper_half_drive+0x188>

	  case 4:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	482a      	ldr	r0, [pc, #168]	@ (8000a18 <stepper_half_drive+0x190>)
 800096e:	f001 fac2 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 8000972:	2200      	movs	r2, #0
 8000974:	2102      	movs	r1, #2
 8000976:	4828      	ldr	r0, [pc, #160]	@ (8000a18 <stepper_half_drive+0x190>)
 8000978:	f001 fabd 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN3
 800097c:	2201      	movs	r2, #1
 800097e:	2104      	movs	r1, #4
 8000980:	4825      	ldr	r0, [pc, #148]	@ (8000a18 <stepper_half_drive+0x190>)
 8000982:	f001 fab8 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	4823      	ldr	r0, [pc, #140]	@ (8000a18 <stepper_half_drive+0x190>)
 800098c:	f001 fab3 	bl	8001ef6 <HAL_GPIO_WritePin>
		  break;
 8000990:	e03e      	b.n	8000a10 <stepper_half_drive+0x188>

	  case 5:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	4820      	ldr	r0, [pc, #128]	@ (8000a18 <stepper_half_drive+0x190>)
 8000998:	f001 faad 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 800099c:	2200      	movs	r2, #0
 800099e:	2102      	movs	r1, #2
 80009a0:	481d      	ldr	r0, [pc, #116]	@ (8000a18 <stepper_half_drive+0x190>)
 80009a2:	f001 faa8 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN3
 80009a6:	2201      	movs	r2, #1
 80009a8:	2104      	movs	r1, #4
 80009aa:	481b      	ldr	r0, [pc, #108]	@ (8000a18 <stepper_half_drive+0x190>)
 80009ac:	f001 faa3 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN4
 80009b0:	2201      	movs	r2, #1
 80009b2:	2108      	movs	r1, #8
 80009b4:	4818      	ldr	r0, [pc, #96]	@ (8000a18 <stepper_half_drive+0x190>)
 80009b6:	f001 fa9e 	bl	8001ef6 <HAL_GPIO_WritePin>
		  break;
 80009ba:	e029      	b.n	8000a10 <stepper_half_drive+0x188>

	  case 6:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	4815      	ldr	r0, [pc, #84]	@ (8000a18 <stepper_half_drive+0x190>)
 80009c2:	f001 fa98 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	4813      	ldr	r0, [pc, #76]	@ (8000a18 <stepper_half_drive+0x190>)
 80009cc:	f001 fa93 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	4810      	ldr	r0, [pc, #64]	@ (8000a18 <stepper_half_drive+0x190>)
 80009d6:	f001 fa8e 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN4
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <stepper_half_drive+0x190>)
 80009e0:	f001 fa89 	bl	8001ef6 <HAL_GPIO_WritePin>
		  break;
 80009e4:	e014      	b.n	8000a10 <stepper_half_drive+0x188>

	  case 7:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 80009e6:	2201      	movs	r2, #1
 80009e8:	2101      	movs	r1, #1
 80009ea:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <stepper_half_drive+0x190>)
 80009ec:	f001 fa83 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 80009f0:	2200      	movs	r2, #0
 80009f2:	2102      	movs	r1, #2
 80009f4:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <stepper_half_drive+0x190>)
 80009f6:	f001 fa7e 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 80009fa:	2200      	movs	r2, #0
 80009fc:	2104      	movs	r1, #4
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <stepper_half_drive+0x190>)
 8000a00:	f001 fa79 	bl	8001ef6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN4
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <stepper_half_drive+0x190>)
 8000a0a:	f001 fa74 	bl	8001ef6 <HAL_GPIO_WritePin>
		  break;
 8000a0e:	bf00      	nop

	}
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010800 	.word	0x40010800

08000a1c <stepper_step_angle>:
void stepper_step_angle (float angle, int direction, int rpm) //direction-> 0 for CK, 1 for CCK
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  float anglepersequence = 0.703125;  // 360 = 512 sequences
 8000a28:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <stepper_step_angle+0x8c>)
 8000a2a:	61bb      	str	r3, [r7, #24]
  int numberofsequences = (int) (angle/anglepersequence);
 8000a2c:	69b9      	ldr	r1, [r7, #24]
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fd56 	bl	80004e0 <__aeabi_fdiv>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fdee 	bl	8000618 <__aeabi_f2iz>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	617b      	str	r3, [r7, #20]
  for (int seq=0; seq<numberofsequences; seq++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a44:	e027      	b.n	8000a96 <stepper_step_angle+0x7a>
  {
	if (direction == 0)  // for clockwise
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10f      	bne.n	8000a6c <stepper_step_angle+0x50>
	{
      for (int step=7; step>=0; step--)
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	e008      	b.n	8000a64 <stepper_step_angle+0x48>
	  {
	    stepper_half_drive(step);
 8000a52:	6a38      	ldr	r0, [r7, #32]
 8000a54:	f7ff ff18 	bl	8000888 <stepper_half_drive>
	    stepper_set_rpm(rpm);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff03 	bl	8000864 <stepper_set_rpm>
      for (int step=7; step>=0; step--)
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
 8000a64:	6a3b      	ldr	r3, [r7, #32]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	daf3      	bge.n	8000a52 <stepper_step_angle+0x36>
 8000a6a:	e011      	b.n	8000a90 <stepper_step_angle+0x74>
	  }
	}
	else if (direction == 1)  // for anti-clockwise
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d10e      	bne.n	8000a90 <stepper_step_angle+0x74>
	{
	  for (int step=0; step<=7; step++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
 8000a76:	e008      	b.n	8000a8a <stepper_step_angle+0x6e>
	  {
	    stepper_half_drive(step);
 8000a78:	69f8      	ldr	r0, [r7, #28]
 8000a7a:	f7ff ff05 	bl	8000888 <stepper_half_drive>
	    stepper_set_rpm(rpm);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fef0 	bl	8000864 <stepper_set_rpm>
	  for (int step=0; step<=7; step++)
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	3301      	adds	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	2b07      	cmp	r3, #7
 8000a8e:	ddf3      	ble.n	8000a78 <stepper_step_angle+0x5c>
  for (int seq=0; seq<numberofsequences; seq++)
 8000a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a92:	3301      	adds	r3, #1
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	dbd3      	blt.n	8000a46 <stepper_step_angle+0x2a>
	  }
	}
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	@ 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	3f340000 	.word	0x3f340000

08000aac <Stepper_rotate>:
float currentAngle = 0;
void Stepper_rotate (int angle, int rpm)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	int changeinangle = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
	changeinangle = angle-currentAngle;  // calculate the angle by which the motor needed to be rotated
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fc08 	bl	80002d0 <__aeabi_i2f>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <Stepper_rotate+0x88>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4610      	mov	r0, r2
 8000aca:	f7ff fb4b 	bl	8000164 <__aeabi_fsub>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fda1 	bl	8000618 <__aeabi_f2iz>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	60fb      	str	r3, [r7, #12]
	if (changeinangle > 0.71)  // clockwise
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	dd0f      	ble.n	8000b00 <Stepper_rotate+0x54>
	{
		stepper_step_angle (changeinangle,0,rpm);
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff fbf5 	bl	80002d0 <__aeabi_i2f>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff95 	bl	8000a1c <stepper_step_angle>
		currentAngle = angle;  // save the angle as current angle
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fbec 	bl	80002d0 <__aeabi_i2f>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <Stepper_rotate+0x88>)
 8000afc:	6013      	str	r3, [r2, #0]
	{
		changeinangle = -(changeinangle);
		stepper_step_angle (changeinangle,1,rpm);
		currentAngle = angle;
	}
}
 8000afe:	e014      	b.n	8000b2a <Stepper_rotate+0x7e>
	else if (changeinangle <0.71) // CCK
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	dc11      	bgt.n	8000b2a <Stepper_rotate+0x7e>
		changeinangle = -(changeinangle);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	425b      	negs	r3, r3
 8000b0a:	60fb      	str	r3, [r7, #12]
		stepper_step_angle (changeinangle,1,rpm);
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f7ff fbdf 	bl	80002d0 <__aeabi_i2f>
 8000b12:	4603      	mov	r3, r0
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff7f 	bl	8000a1c <stepper_step_angle>
		currentAngle = angle;
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fbd6 	bl	80002d0 <__aeabi_i2f>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4a03      	ldr	r2, [pc, #12]	@ (8000b34 <Stepper_rotate+0x88>)
 8000b28:	6013      	str	r3, [r2, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200003b8 	.word	0x200003b8

08000b38 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
     if (GPIO_Pin == GPIO_PIN_4)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	2b10      	cmp	r3, #16
 8000b46:	d118      	bne.n	8000b7a <HAL_GPIO_EXTI_Callback+0x42>
    {
        while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)
 8000b48:	bf00      	nop
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b4e:	f001 f9bb 	bl	8001ec8 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f8      	beq.n	8000b4a <HAL_GPIO_EXTI_Callback+0x12>
           {};

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b5e:	4816      	ldr	r0, [pc, #88]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b60:	f001 f9c9 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b6a:	4813      	ldr	r0, [pc, #76]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b6c:	f001 f9c3 	bl	8001ef6 <HAL_GPIO_WritePin>
        Stepper_rotate(0, 13);
 8000b70:	210d      	movs	r1, #13
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ff9a 	bl	8000aac <Stepper_rotate>

		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
		 Stepper_rotate(90, 10);
    }
}
 8000b78:	e01a      	b.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x78>
    else if (GPIO_Pin == GPIO_PIN_3)
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d117      	bne.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x78>
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)
 8000b80:	bf00      	nop
 8000b82:	2110      	movs	r1, #16
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b86:	f001 f99f 	bl	8001ec8 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f8      	beq.n	8000b82 <HAL_GPIO_EXTI_Callback+0x4a>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b96:	4808      	ldr	r0, [pc, #32]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b98:	f001 f9ad 	bl	8001ef6 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ba4:	f001 f9a7 	bl	8001ef6 <HAL_GPIO_WritePin>
		 Stepper_rotate(90, 10);
 8000ba8:	210a      	movs	r1, #10
 8000baa:	205a      	movs	r0, #90	@ 0x5a
 8000bac:	f7ff ff7e 	bl	8000aac <Stepper_rotate>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f000 fe69 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f8a7 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f000 fa01 	bl	8000fd0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bce:	f000 f8fd 	bl	8000dcc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000bd2:	f008 fe47 	bl	8009864 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000bd6:	f000 f927 	bl	8000e28 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000bda:	f000 f9ab 	bl	8000f34 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000bde:	f000 f959 	bl	8000e94 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000be2:	f000 fb5b 	bl	800129c <MFRC522_Init>
  lcd_init();
 8000be6:	f7ff fdd3 	bl	8000790 <lcd_init>
  HAL_TIM_Base_Start(&htim1);
 8000bea:	4840      	ldr	r0, [pc, #256]	@ (8000cec <main+0x130>)
 8000bec:	f004 fb98 	bl	8005320 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		 dataValid=1;
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf0 <main+0x134>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
		 memset(str, 0, sizeof(str));
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	483e      	ldr	r0, [pc, #248]	@ (8000cf4 <main+0x138>)
 8000bfc:	f009 fb04 	bl	800a208 <memset>
		 status = MFRC522_Request(PICC_REQIDL, str);
 8000c00:	493c      	ldr	r1, [pc, #240]	@ (8000cf4 <main+0x138>)
 8000c02:	2026      	movs	r0, #38	@ 0x26
 8000c04:	f000 fc41 	bl	800148a <MFRC522_Request>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf8 <main+0x13c>)
 8000c0e:	701a      	strb	r2, [r3, #0]
		 if (status != MI_OK)
 8000c10:	4b39      	ldr	r3, [pc, #228]	@ (8000cf8 <main+0x13c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <main+0x62>
		 {
			 dataValid = 0;
 8000c18:	4b35      	ldr	r3, [pc, #212]	@ (8000cf0 <main+0x134>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
		 }

		 status = MFRC522_Anticoll(str);
 8000c1e:	4835      	ldr	r0, [pc, #212]	@ (8000cf4 <main+0x138>)
 8000c20:	f000 fc58 	bl	80014d4 <MFRC522_Anticoll>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b33      	ldr	r3, [pc, #204]	@ (8000cf8 <main+0x13c>)
 8000c2a:	701a      	strb	r2, [r3, #0]
		 if (status != MI_OK)
 8000c2c:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <main+0x13c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <main+0x7e>
		 {
			  dataValid = 0;
 8000c34:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf0 <main+0x134>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
		 }
		  if (dataValid)
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <main+0x134>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d03d      	beq.n	8000cbe <main+0x102>
		  {
			  // Chuyển đổi dữ liệu từ byte sang dạng hex
			memcpy(sNum, str, 5);
 8000c42:	4b2e      	ldr	r3, [pc, #184]	@ (8000cfc <main+0x140>)
 8000c44:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf4 <main+0x138>)
 8000c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c4a:	6018      	str	r0, [r3, #0]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	7019      	strb	r1, [r3, #0]
			char hexBuffer[16];
			for (int i = 0; i < 5; i++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e010      	b.n	8000c78 <main+0xbc>
			{
				sprintf(&hexBuffer[i * 3], "%02X ", sNum[i]);
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	1d3a      	adds	r2, r7, #4
 8000c60:	18d0      	adds	r0, r2, r3
 8000c62:	4a26      	ldr	r2, [pc, #152]	@ (8000cfc <main+0x140>)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4924      	ldr	r1, [pc, #144]	@ (8000d00 <main+0x144>)
 8000c6e:	f009 faab 	bl	800a1c8 <siprintf>
			for (int i = 0; i < 5; i++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	ddeb      	ble.n	8000c56 <main+0x9a>
	        }

			// Chuẩn bị chuỗi dữ liệu cần gửi qua USB
			sprintf(TxBuffer, "%s\n", hexBuffer);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	461a      	mov	r2, r3
 8000c82:	4920      	ldr	r1, [pc, #128]	@ (8000d04 <main+0x148>)
 8000c84:	4820      	ldr	r0, [pc, #128]	@ (8000d08 <main+0x14c>)
 8000c86:	f009 fa9f 	bl	800a1c8 <siprintf>

			// Gửi dữ liệu qua USB
			CDC_Transmit_FS((uint8_t*)TxBuffer, strlen(TxBuffer));
 8000c8a:	481f      	ldr	r0, [pc, #124]	@ (8000d08 <main+0x14c>)
 8000c8c:	f7ff fa5e 	bl	800014c <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	481c      	ldr	r0, [pc, #112]	@ (8000d08 <main+0x14c>)
 8000c98:	f008 feb8 	bl	8009a0c <CDC_Transmit_FS>
				// Tín hiệu báo thành công

			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ca2:	481a      	ldr	r0, [pc, #104]	@ (8000d0c <main+0x150>)
 8000ca4:	f001 f927 	bl	8001ef6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cae:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <main+0x154>)
 8000cb0:	f001 f921 	bl	8001ef6 <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 8000cb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cb8:	f000 fe50 	bl	800195c <HAL_Delay>
 8000cbc:	e00b      	b.n	8000cd6 <main+0x11a>
		  } else
		  {
			  // Nếu không có dữ liệu hợp lệ
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // Tắt đèn LED báo ko có thẻ
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc4:	4811      	ldr	r0, [pc, #68]	@ (8000d0c <main+0x150>)
 8000cc6:	f001 f916 	bl	8001ef6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cd0:	480f      	ldr	r0, [pc, #60]	@ (8000d10 <main+0x154>)
 8000cd2:	f001 f910 	bl	8001ef6 <HAL_GPIO_WritePin>
					  );
	      }

		    		lcd_clear();
 8000cd6:	f7ff fd25 	bl	8000724 <lcd_clear>
		    		lcd_put_cur(0, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fd38 	bl	8000752 <lcd_put_cur>
		    		lcd_send_string (RxBuffer);
 8000ce2:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <main+0x158>)
 8000ce4:	f7ff fd91 	bl	800080a <lcd_send_string>
		 dataValid=1;
 8000ce8:	e782      	b.n	8000bf0 <main+0x34>
 8000cea:	bf00      	nop
 8000cec:	20000328 	.word	0x20000328
 8000cf0:	2000025c 	.word	0x2000025c
 8000cf4:	20000264 	.word	0x20000264
 8000cf8:	20000260 	.word	0x20000260
 8000cfc:	20000274 	.word	0x20000274
 8000d00:	0800ab40 	.word	0x0800ab40
 8000d04:	0800ab48 	.word	0x0800ab48
 8000d08:	200001e8 	.word	0x200001e8
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	2000021c 	.word	0x2000021c

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	@ 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d22:	2228      	movs	r2, #40	@ 0x28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f009 fa6e 	bl	800a208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d64:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 faee 	bl	8004350 <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d7a:	f000 f9d7 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fd5a 	bl	8004854 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000da6:	f000 f9c1 	bl	800112c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000daa:	2310      	movs	r3, #16
 8000dac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 fec7 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dc0:	f000 f9b4 	bl	800112c <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3750      	adds	r7, #80	@ 0x50
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dd2:	4a13      	ldr	r2, [pc, #76]	@ (8000e20 <MX_I2C1_Init+0x54>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dd8:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <MX_I2C1_Init+0x58>)
 8000dda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_I2C1_Init+0x50>)
 8000e0a:	f001 f8a5 	bl	8001f58 <HAL_I2C_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e14:	f000 f98a 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000027c 	.word	0x2000027c
 8000e20:	40005400 	.word	0x40005400
 8000e24:	000186a0 	.word	0x000186a0

08000e28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e2e:	4a18      	ldr	r2, [pc, #96]	@ (8000e90 <MX_SPI1_Init+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_SPI1_Init+0x64>)
 8000e7a:	f003 ff1b 	bl	8004cb4 <HAL_SPI_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e84:	f000 f952 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200002d0 	.word	0x200002d0
 8000e90:	40013000 	.word	0x40013000

08000e94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f30 <MX_TIM1_Init+0x9c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000eb8:	2247      	movs	r2, #71	@ 0x47
 8000eba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000ec4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000edc:	4813      	ldr	r0, [pc, #76]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000ede:	f004 f9d0 	bl	8005282 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ee8:	f000 f920 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000efa:	f004 fb4b 	bl	8005594 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f04:	f000 f912 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_TIM1_Init+0x98>)
 8000f16:	f004 fd35 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f20:	f000 f904 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000328 	.word	0x20000328
 8000f30:	40012c00 	.word	0x40012c00

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f52:	4a1e      	ldr	r2, [pc, #120]	@ (8000fcc <MX_TIM3_Init+0x98>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f58:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000f5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40;
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f66:	2228      	movs	r2, #40	@ 0x28
 8000f68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f76:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f78:	f004 f983 	bl	8005282 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 f8d3 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f94:	f004 fafe 	bl	8005594 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f9e:	f000 f8c5 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000fb0:	f004 fce8 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fba:	f000 f8b7 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000370 	.word	0x20000370
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8001118 <MX_GPIO_Init+0x148>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a4b      	ldr	r2, [pc, #300]	@ (8001118 <MX_GPIO_Init+0x148>)
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b49      	ldr	r3, [pc, #292]	@ (8001118 <MX_GPIO_Init+0x148>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	4b46      	ldr	r3, [pc, #280]	@ (8001118 <MX_GPIO_Init+0x148>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a45      	ldr	r2, [pc, #276]	@ (8001118 <MX_GPIO_Init+0x148>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b43      	ldr	r3, [pc, #268]	@ (8001118 <MX_GPIO_Init+0x148>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b40      	ldr	r3, [pc, #256]	@ (8001118 <MX_GPIO_Init+0x148>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a3f      	ldr	r2, [pc, #252]	@ (8001118 <MX_GPIO_Init+0x148>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b3d      	ldr	r3, [pc, #244]	@ (8001118 <MX_GPIO_Init+0x148>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b3a      	ldr	r3, [pc, #232]	@ (8001118 <MX_GPIO_Init+0x148>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a39      	ldr	r2, [pc, #228]	@ (8001118 <MX_GPIO_Init+0x148>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <MX_GPIO_Init+0x148>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104a:	4834      	ldr	r0, [pc, #208]	@ (800111c <MX_GPIO_Init+0x14c>)
 800104c:	f000 ff53 	bl	8001ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	211e      	movs	r1, #30
 8001054:	4832      	ldr	r0, [pc, #200]	@ (8001120 <MX_GPIO_Init+0x150>)
 8001056:	f000 ff4e 	bl	8001ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f247 0101 	movw	r1, #28673	@ 0x7001
 8001060:	4830      	ldr	r0, [pc, #192]	@ (8001124 <MX_GPIO_Init+0x154>)
 8001062:	f000 ff48 	bl	8001ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4827      	ldr	r0, [pc, #156]	@ (800111c <MX_GPIO_Init+0x14c>)
 8001080:	f000 fd9e 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001084:	2301      	movs	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4619      	mov	r1, r3
 8001096:	4822      	ldr	r0, [pc, #136]	@ (8001120 <MX_GPIO_Init+0x150>)
 8001098:	f000 fd92 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800109c:	231e      	movs	r3, #30
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	481b      	ldr	r0, [pc, #108]	@ (8001120 <MX_GPIO_Init+0x150>)
 80010b4:	f000 fd84 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80010b8:	f247 0301 	movw	r3, #28673	@ 0x7001
 80010bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	4814      	ldr	r0, [pc, #80]	@ (8001124 <MX_GPIO_Init+0x154>)
 80010d2:	f000 fd75 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80010d6:	2318      	movs	r3, #24
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010da:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <MX_GPIO_Init+0x158>)
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4619      	mov	r1, r3
 80010e8:	480e      	ldr	r0, [pc, #56]	@ (8001124 <MX_GPIO_Init+0x154>)
 80010ea:	f000 fd69 	bl	8001bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2009      	movs	r0, #9
 80010f4:	f000 fd2d 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010f8:	2009      	movs	r0, #9
 80010fa:	f000 fd46 	bl	8001b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	200a      	movs	r0, #10
 8001104:	f000 fd25 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001108:	200a      	movs	r0, #10
 800110a:	f000 fd3e 	bl	8001b8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	40011000 	.word	0x40011000
 8001120:	40010800 	.word	0x40010800
 8001124:	40010c00 	.word	0x40010c00
 8001128:	10210000 	.word	0x10210000

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x8>

08001138 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001142:	f107 020f 	add.w	r2, r7, #15
 8001146:	1df9      	adds	r1, r7, #7
 8001148:	2364      	movs	r3, #100	@ 0x64
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	4804      	ldr	r0, [pc, #16]	@ (8001160 <RC522_SPI_Transfer+0x28>)
 8001150:	f003 fe34 	bl	8004dbc <HAL_SPI_TransmitReceive>

	return rx_data;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200002d0 	.word	0x200002d0

08001164 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2110      	movs	r1, #16
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <Write_MFRC522+0x48>)
 800117a:	f000 febc 	bl	8001ef6 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffd4 	bl	8001138 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001190:	79bb      	ldrb	r3, [r7, #6]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffd0 	bl	8001138 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2110      	movs	r1, #16
 800119c:	4803      	ldr	r0, [pc, #12]	@ (80011ac <Write_MFRC522+0x48>)
 800119e:	f000 feaa 	bl	8001ef6 <HAL_GPIO_WritePin>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40010800 	.word	0x40010800

080011b0 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2110      	movs	r1, #16
 80011be:	480f      	ldr	r0, [pc, #60]	@ (80011fc <Read_MFRC522+0x4c>)
 80011c0:	f000 fe99 	bl	8001ef6 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffad 	bl	8001138 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ffaa 	bl	8001138 <RC522_SPI_Transfer>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2110      	movs	r1, #16
 80011ec:	4803      	ldr	r0, [pc, #12]	@ (80011fc <Read_MFRC522+0x4c>)
 80011ee:	f000 fe82 	bl	8001ef6 <HAL_GPIO_WritePin>

	return val;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]

}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010800 	.word	0x40010800

08001200 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffcc 	bl	80011b0 <Read_MFRC522>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	4313      	orrs	r3, r2
 8001222:	b2da      	uxtb	r2, r3
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff9b 	bl	8001164 <Write_MFRC522>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	460a      	mov	r2, r1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	4613      	mov	r3, r2
 8001244:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ffb1 	bl	80011b0 <Read_MFRC522>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001252:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001256:	43db      	mvns	r3, r3
 8001258:	b25a      	sxtb	r2, r3
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4013      	ands	r3, r2
 8001260:	b25b      	sxtb	r3, r3
 8001262:	b2da      	uxtb	r2, r3
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff7b 	bl	8001164 <Write_MFRC522>
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800127a:	2014      	movs	r0, #20
 800127c:	f7ff ff98 	bl	80011b0 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001280:	2103      	movs	r1, #3
 8001282:	2014      	movs	r0, #20
 8001284:	f7ff ffbc 	bl	8001200 <SetBitMask>
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001290:	210f      	movs	r1, #15
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff ff66 	bl	8001164 <Write_MFRC522>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2110      	movs	r1, #16
 80012a4:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <MFRC522_Init+0x54>)
 80012a6:	f000 fe26 	bl	8001ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2101      	movs	r1, #1
 80012ae:	4811      	ldr	r0, [pc, #68]	@ (80012f4 <MFRC522_Init+0x58>)
 80012b0:	f000 fe21 	bl	8001ef6 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80012b4:	f7ff ffea 	bl	800128c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80012b8:	218d      	movs	r1, #141	@ 0x8d
 80012ba:	202a      	movs	r0, #42	@ 0x2a
 80012bc:	f7ff ff52 	bl	8001164 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80012c0:	213e      	movs	r1, #62	@ 0x3e
 80012c2:	202b      	movs	r0, #43	@ 0x2b
 80012c4:	f7ff ff4e 	bl	8001164 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80012c8:	211e      	movs	r1, #30
 80012ca:	202d      	movs	r0, #45	@ 0x2d
 80012cc:	f7ff ff4a 	bl	8001164 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	202c      	movs	r0, #44	@ 0x2c
 80012d4:	f7ff ff46 	bl	8001164 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80012d8:	2140      	movs	r1, #64	@ 0x40
 80012da:	2015      	movs	r0, #21
 80012dc:	f7ff ff42 	bl	8001164 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80012e0:	213d      	movs	r1, #61	@ 0x3d
 80012e2:	2011      	movs	r0, #17
 80012e4:	f7ff ff3e 	bl	8001164 <Write_MFRC522>

	AntennaOn();
 80012e8:	f7ff ffc5 	bl	8001276 <AntennaOn>
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	4613      	mov	r3, r2
 8001308:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800130a:	2302      	movs	r3, #2
 800130c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b0c      	cmp	r3, #12
 800131a:	d006      	beq.n	800132a <MFRC522_ToCard+0x32>
 800131c:	2b0e      	cmp	r3, #14
 800131e:	d109      	bne.n	8001334 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001320:	2312      	movs	r3, #18
 8001322:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001324:	2310      	movs	r3, #16
 8001326:	777b      	strb	r3, [r7, #29]
			break;
 8001328:	e005      	b.n	8001336 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800132a:	2377      	movs	r3, #119	@ 0x77
 800132c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800132e:	2330      	movs	r3, #48	@ 0x30
 8001330:	777b      	strb	r3, [r7, #29]
			break;
 8001332:	e000      	b.n	8001336 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001334:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001336:	7fbb      	ldrb	r3, [r7, #30]
 8001338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	2002      	movs	r0, #2
 8001342:	f7ff ff0f 	bl	8001164 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001346:	2180      	movs	r1, #128	@ 0x80
 8001348:	2004      	movs	r0, #4
 800134a:	f7ff ff74 	bl	8001236 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800134e:	2180      	movs	r1, #128	@ 0x80
 8001350:	200a      	movs	r0, #10
 8001352:	f7ff ff55 	bl	8001200 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001356:	2100      	movs	r1, #0
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff ff03 	bl	8001164 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	e00a      	b.n	800137a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	2009      	movs	r0, #9
 8001370:	f7ff fef8 	bl	8001164 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	3301      	adds	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3f0      	bcc.n	8001364 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	4619      	mov	r1, r3
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff feec 	bl	8001164 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d103      	bne.n	800139a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	200d      	movs	r0, #13
 8001396:	f7ff ff33 	bl	8001200 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800139a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800139e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80013a0:	2004      	movs	r0, #4
 80013a2:	f7ff ff05 	bl	80011b0 <Read_MFRC522>
 80013a6:	4603      	mov	r3, r0
 80013a8:	773b      	strb	r3, [r7, #28]
        i--;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00a      	beq.n	80013cc <MFRC522_ToCard+0xd4>
 80013b6:	7f3b      	ldrb	r3, [r7, #28]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <MFRC522_ToCard+0xd4>
 80013c0:	7f3a      	ldrb	r2, [r7, #28]
 80013c2:	7f7b      	ldrb	r3, [r7, #29]
 80013c4:	4013      	ands	r3, r2
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0e9      	beq.n	80013a0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	200d      	movs	r0, #13
 80013d0:	f7ff ff31 	bl	8001236 <ClearBitMask>

    if (i != 0)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d052      	beq.n	8001480 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80013da:	2006      	movs	r0, #6
 80013dc:	f7ff fee8 	bl	80011b0 <Read_MFRC522>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f003 031b 	and.w	r3, r3, #27
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d148      	bne.n	800147c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80013ee:	7f3a      	ldrb	r2, [r7, #28]
 80013f0:	7fbb      	ldrb	r3, [r7, #30]
 80013f2:	4013      	ands	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80013fe:	2301      	movs	r3, #1
 8001400:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	d13b      	bne.n	8001480 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001408:	200a      	movs	r0, #10
 800140a:	f7ff fed1 	bl	80011b0 <Read_MFRC522>
 800140e:	4603      	mov	r3, r0
 8001410:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001412:	200c      	movs	r0, #12
 8001414:	f7ff fecc 	bl	80011b0 <Read_MFRC522>
 8001418:	4603      	mov	r3, r0
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8001426:	7f3b      	ldrb	r3, [r7, #28]
 8001428:	3b01      	subs	r3, #1
 800142a:	00da      	lsls	r2, r3, #3
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	4413      	add	r3, r2
 8001430:	461a      	mov	r2, r3
 8001432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e004      	b.n	8001442 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001438:	7f3b      	ldrb	r3, [r7, #28]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	461a      	mov	r2, r3
 800143e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001440:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001442:	7f3b      	ldrb	r3, [r7, #28]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800144c:	7f3b      	ldrb	r3, [r7, #28]
 800144e:	2b10      	cmp	r3, #16
 8001450:	d901      	bls.n	8001456 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8001452:	2310      	movs	r3, #16
 8001454:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	e00a      	b.n	8001472 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	18d4      	adds	r4, r2, r3
 8001462:	2009      	movs	r0, #9
 8001464:	f7ff fea4 	bl	80011b0 <Read_MFRC522>
 8001468:	4603      	mov	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	3301      	adds	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	7f3b      	ldrb	r3, [r7, #28]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3f0      	bcc.n	800145c <MFRC522_ToCard+0x164>
 800147a:	e001      	b.n	8001480 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800147c:	2302      	movs	r3, #2
 800147e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001480:	7ffb      	ldrb	r3, [r7, #31]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	@ 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}

0800148a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af02      	add	r7, sp, #8
 8001490:	4603      	mov	r3, r0
 8001492:	6039      	str	r1, [r7, #0]
 8001494:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8001496:	2107      	movs	r1, #7
 8001498:	200d      	movs	r0, #13
 800149a:	f7ff fe63 	bl	8001164 <Write_MFRC522>

	TagType[0] = reqMode;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	200c      	movs	r0, #12
 80014b2:	f7ff ff21 	bl	80012f8 <MFRC522_ToCard>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <MFRC522_Request+0x3c>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d001      	beq.n	80014ca <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80014c6:	2302      	movs	r3, #2
 80014c8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80014e0:	2100      	movs	r1, #0
 80014e2:	200d      	movs	r0, #13
 80014e4:	f7ff fe3e 	bl	8001164 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2293      	movs	r2, #147	@ 0x93
 80014ec:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3301      	adds	r3, #1
 80014f2:	2220      	movs	r2, #32
 80014f4:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	200c      	movs	r0, #12
 8001504:	f7ff fef8 	bl	80012f8 <MFRC522_ToCard>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d118      	bne.n	8001544 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	73bb      	strb	r3, [r7, #14]
 8001516:	e009      	b.n	800152c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	7b7b      	ldrb	r3, [r7, #13]
 8001522:	4053      	eors	r3, r2
 8001524:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001526:	7bbb      	ldrb	r3, [r7, #14]
 8001528:	3301      	adds	r3, #1
 800152a:	73bb      	strb	r3, [r7, #14]
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d9f2      	bls.n	8001518 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	7b7a      	ldrb	r2, [r7, #13]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001540:	2302      	movs	r3, #2
 8001542:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <HAL_MspInit+0x5c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6193      	str	r3, [r2, #24]
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_MspInit+0x5c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a0e      	ldr	r2, [pc, #56]	@ (80015ac <HAL_MspInit+0x5c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <HAL_MspInit+0x5c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_MspInit+0x60>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_MspInit+0x60>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000

080015b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <HAL_I2C_MspInit+0x70>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d123      	bne.n	800161c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <HAL_I2C_MspInit+0x74>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a13      	ldr	r2, [pc, #76]	@ (8001628 <HAL_I2C_MspInit+0x74>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_I2C_MspInit+0x74>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_M_Pin|LCD_SDA_M_Pin;
 80015ec:	23c0      	movs	r3, #192	@ 0xc0
 80015ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	480b      	ldr	r0, [pc, #44]	@ (800162c <HAL_I2C_MspInit+0x78>)
 8001600:	f000 fade 	bl	8001bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <HAL_I2C_MspInit+0x74>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	4a07      	ldr	r2, [pc, #28]	@ (8001628 <HAL_I2C_MspInit+0x74>)
 800160a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800160e:	61d3      	str	r3, [r2, #28]
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <HAL_I2C_MspInit+0x74>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40005400 	.word	0x40005400
 8001628:	40021000 	.word	0x40021000
 800162c:	40010c00 	.word	0x40010c00

08001630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1b      	ldr	r2, [pc, #108]	@ (80016b8 <HAL_SPI_MspInit+0x88>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d12f      	bne.n	80016b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <HAL_SPI_MspInit+0x8c>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a19      	ldr	r2, [pc, #100]	@ (80016bc <HAL_SPI_MspInit+0x8c>)
 8001656:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <HAL_SPI_MspInit+0x8c>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <HAL_SPI_MspInit+0x8c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a13      	ldr	r2, [pc, #76]	@ (80016bc <HAL_SPI_MspInit+0x8c>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_SPI_MspInit+0x8c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001680:	23a0      	movs	r3, #160	@ 0xa0
 8001682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <HAL_SPI_MspInit+0x90>)
 8001694:	f000 fa94 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001698:	2340      	movs	r3, #64	@ 0x40
 800169a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <HAL_SPI_MspInit+0x90>)
 80016ac:	f000 fa88 	bl	8001bc0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013000 	.word	0x40013000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010800 	.word	0x40010800

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a16      	ldr	r2, [pc, #88]	@ (800172c <HAL_TIM_Base_MspInit+0x68>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10c      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d6:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <HAL_TIM_Base_MspInit+0x6c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a15      	ldr	r2, [pc, #84]	@ (8001730 <HAL_TIM_Base_MspInit+0x6c>)
 80016dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <HAL_TIM_Base_MspInit+0x6c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016ee:	e018      	b.n	8001722 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001734 <HAL_TIM_Base_MspInit+0x70>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d113      	bne.n	8001722 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <HAL_TIM_Base_MspInit+0x6c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001730 <HAL_TIM_Base_MspInit+0x6c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_TIM_Base_MspInit+0x6c>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	201d      	movs	r0, #29
 8001718:	f000 fa1b 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800171c:	201d      	movs	r0, #29
 800171e:	f000 fa34 	bl	8001b8a <HAL_NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40000400 	.word	0x40000400

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f8cc 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001794:	2008      	movs	r0, #8
 8001796:	f000 fbc7 	bl	8001f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}

0800179e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017a2:	2010      	movs	r0, #16
 80017a4:	f000 fbc0 	bl	8001f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017b2:	f001 f989 	bl	8002ac8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000108c 	.word	0x2000108c

080017c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <TIM3_IRQHandler+0x10>)
 80017c6:	f003 fdf5 	bl	80053b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000370 	.word	0x20000370

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f008 fd08 	bl	800a218 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20005000 	.word	0x20005000
 8001834:	00000400 	.word	0x00000400
 8001838:	200003bc 	.word	0x200003bc
 800183c:	200016d0 	.word	0x200016d0

08001840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800184c:	f7ff fff8 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001852:	490c      	ldr	r1, [pc, #48]	@ (8001884 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001854:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a09      	ldr	r2, [pc, #36]	@ (800188c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001868:	4c09      	ldr	r4, [pc, #36]	@ (8001890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f008 fcd5 	bl	800a224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff f99f 	bl	8000bbc <main>
  bx lr
 800187e:	4770      	bx	lr
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001888:	0800ac04 	.word	0x0800ac04
  ldr r2, =_sbss
 800188c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001890:	200016cc 	.word	0x200016cc

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_Init+0x28>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_Init+0x28>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f947 	bl	8001b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe4c 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f95f 	bl	8001ba6 <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 f927 	bl	8001b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_IncTick+0x1c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_IncTick+0x20>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a03      	ldr	r2, [pc, #12]	@ (8001944 <HAL_IncTick+0x20>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000008 	.word	0x20000008
 8001944:	200003c0 	.word	0x200003c0

08001948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b02      	ldr	r3, [pc, #8]	@ (8001958 <HAL_GetTick+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	200003c0 	.word	0x200003c0

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fff0 	bl	8001948 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffe0 	bl	8001948 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4906      	ldr	r1, [pc, #24]	@ (8001a3c <__NVIC_EnableIRQ+0x34>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	@ (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	@ 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b08:	d301      	bcc.n	8001b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00f      	b.n	8001b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <SysTick_Config+0x40>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b16:	210f      	movs	r1, #15
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f7ff ff90 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <SysTick_Config+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b26:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <SysTick_Config+0x40>)
 8001b28:	2207      	movs	r2, #7
 8001b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010

08001b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff2d 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b64:	f7ff ff42 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ff90 	bl	8001a94 <NVIC_EncodePriority>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff5f 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff35 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffa2 	bl	8001af8 <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b08b      	sub	sp, #44	@ 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e169      	b.n	8001ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8158 	bne.w	8001ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a9a      	ldr	r2, [pc, #616]	@ (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001bfc:	4a98      	ldr	r2, [pc, #608]	@ (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d875      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c02:	4a98      	ldr	r2, [pc, #608]	@ (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d058      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c08:	4a96      	ldr	r2, [pc, #600]	@ (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d86f      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c0e:	4a96      	ldr	r2, [pc, #600]	@ (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d052      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c14:	4a94      	ldr	r2, [pc, #592]	@ (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d869      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c1a:	4a94      	ldr	r2, [pc, #592]	@ (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d04c      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c20:	4a92      	ldr	r2, [pc, #584]	@ (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d863      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c26:	4a92      	ldr	r2, [pc, #584]	@ (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d046      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c2c:	4a90      	ldr	r2, [pc, #576]	@ (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d85d      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c32:	2b12      	cmp	r3, #18
 8001c34:	d82a      	bhi.n	8001c8c <HAL_GPIO_Init+0xcc>
 8001c36:	2b12      	cmp	r3, #18
 8001c38:	d859      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c40 <HAL_GPIO_Init+0x80>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001cbb 	.word	0x08001cbb
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001ca7 	.word	0x08001ca7
 8001c4c:	08001ce9 	.word	0x08001ce9
 8001c50:	08001cef 	.word	0x08001cef
 8001c54:	08001cef 	.word	0x08001cef
 8001c58:	08001cef 	.word	0x08001cef
 8001c5c:	08001cef 	.word	0x08001cef
 8001c60:	08001cef 	.word	0x08001cef
 8001c64:	08001cef 	.word	0x08001cef
 8001c68:	08001cef 	.word	0x08001cef
 8001c6c:	08001cef 	.word	0x08001cef
 8001c70:	08001cef 	.word	0x08001cef
 8001c74:	08001cef 	.word	0x08001cef
 8001c78:	08001cef 	.word	0x08001cef
 8001c7c:	08001cef 	.word	0x08001cef
 8001c80:	08001cef 	.word	0x08001cef
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001cb1 	.word	0x08001cb1
 8001c8c:	4a79      	ldr	r2, [pc, #484]	@ (8001e74 <HAL_GPIO_Init+0x2b4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c92:	e02c      	b.n	8001cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e029      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e024      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	3308      	adds	r3, #8
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e01f      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e01a      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e013      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	611a      	str	r2, [r3, #16]
          break;
 8001cda:	e009      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	615a      	str	r2, [r3, #20]
          break;
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          break;
 8001cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2bff      	cmp	r3, #255	@ 0xff
 8001cf4:	d801      	bhi.n	8001cfa <HAL_GPIO_Init+0x13a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_Init+0x13e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2bff      	cmp	r3, #255	@ 0xff
 8001d04:	d802      	bhi.n	8001d0c <HAL_GPIO_Init+0x14c>
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x152>
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	3b08      	subs	r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	210f      	movs	r1, #15
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80b1 	beq.w	8001ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d40:	4b4d      	ldr	r3, [pc, #308]	@ (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	@ (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d58:	4a48      	ldr	r2, [pc, #288]	@ (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a40      	ldr	r2, [pc, #256]	@ (8001e80 <HAL_GPIO_Init+0x2c0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_GPIO_Init+0x1ec>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3f      	ldr	r2, [pc, #252]	@ (8001e84 <HAL_GPIO_Init+0x2c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1e8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e88 <HAL_GPIO_Init+0x2c8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1e4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3d      	ldr	r2, [pc, #244]	@ (8001e8c <HAL_GPIO_Init+0x2cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1e0>
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e004      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001dac:	2300      	movs	r3, #0
 8001dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dbe:	492f      	ldr	r1, [pc, #188]	@ (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	492c      	ldr	r1, [pc, #176]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4928      	ldr	r1, [pc, #160]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e00:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	4922      	ldr	r1, [pc, #136]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	491e      	ldr	r1, [pc, #120]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4918      	ldr	r1, [pc, #96]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4914      	ldr	r1, [pc, #80]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d021      	beq.n	8001e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	490e      	ldr	r1, [pc, #56]	@ (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e021      	b.n	8001ea2 <HAL_GPIO_Init+0x2e2>
 8001e5e:	bf00      	nop
 8001e60:	10320000 	.word	0x10320000
 8001e64:	10310000 	.word	0x10310000
 8001e68:	10220000 	.word	0x10220000
 8001e6c:	10210000 	.word	0x10210000
 8001e70:	10120000 	.word	0x10120000
 8001e74:	10110000 	.word	0x10110000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4909      	ldr	r1, [pc, #36]	@ (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f ae8e 	bne.w	8001bd4 <HAL_GPIO_Init+0x14>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	372c      	adds	r7, #44	@ 0x2c
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	807b      	strh	r3, [r7, #2]
 8001f02:	4613      	mov	r3, r2
 8001f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f06:	787b      	ldrb	r3, [r7, #1]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f12:	e003      	b.n	8001f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f3e:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fdf6 	bl	8000b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40010400 	.word	0x40010400

08001f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e12b      	b.n	80021c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fb18 	bl	80015b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	@ 0x24
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fbc:	f002 fd92 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8001fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a81      	ldr	r2, [pc, #516]	@ (80021cc <HAL_I2C_Init+0x274>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d807      	bhi.n	8001fdc <HAL_I2C_Init+0x84>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a80      	ldr	r2, [pc, #512]	@ (80021d0 <HAL_I2C_Init+0x278>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	bf94      	ite	ls
 8001fd4:	2301      	movls	r3, #1
 8001fd6:	2300      	movhi	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e006      	b.n	8001fea <HAL_I2C_Init+0x92>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a7d      	ldr	r2, [pc, #500]	@ (80021d4 <HAL_I2C_Init+0x27c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	bf94      	ite	ls
 8001fe4:	2301      	movls	r3, #1
 8001fe6:	2300      	movhi	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0e7      	b.n	80021c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a78      	ldr	r2, [pc, #480]	@ (80021d8 <HAL_I2C_Init+0x280>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9b      	lsrs	r3, r3, #18
 8001ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a6a      	ldr	r2, [pc, #424]	@ (80021cc <HAL_I2C_Init+0x274>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d802      	bhi.n	800202c <HAL_I2C_Init+0xd4>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	3301      	adds	r3, #1
 800202a:	e009      	b.n	8002040 <HAL_I2C_Init+0xe8>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	4a69      	ldr	r2, [pc, #420]	@ (80021dc <HAL_I2C_Init+0x284>)
 8002038:	fba2 2303 	umull	r2, r3, r2, r3
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	3301      	adds	r3, #1
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	430b      	orrs	r3, r1
 8002046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002052:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	495c      	ldr	r1, [pc, #368]	@ (80021cc <HAL_I2C_Init+0x274>)
 800205c:	428b      	cmp	r3, r1
 800205e:	d819      	bhi.n	8002094 <HAL_I2C_Init+0x13c>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e59      	subs	r1, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fbb1 f3f3 	udiv	r3, r1, r3
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002074:	400b      	ands	r3, r1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_I2C_Init+0x138>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e59      	subs	r1, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fbb1 f3f3 	udiv	r3, r1, r3
 8002088:	3301      	adds	r3, #1
 800208a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208e:	e051      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002090:	2304      	movs	r3, #4
 8002092:	e04f      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d111      	bne.n	80020c0 <HAL_I2C_Init+0x168>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e012      	b.n	80020e6 <HAL_I2C_Init+0x18e>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	0099      	lsls	r1, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_I2C_Init+0x196>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e022      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10e      	bne.n	8002114 <HAL_I2C_Init+0x1bc>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1e58      	subs	r0, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	440b      	add	r3, r1
 8002104:	fbb0 f3f3 	udiv	r3, r0, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002112:	e00f      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	0099      	lsls	r1, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	fbb0 f3f3 	udiv	r3, r0, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	6809      	ldr	r1, [r1, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002162:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6911      	ldr	r1, [r2, #16]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68d2      	ldr	r2, [r2, #12]
 800216e:	4311      	orrs	r1, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	430b      	orrs	r3, r1
 8002176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	000186a0 	.word	0x000186a0
 80021d0:	001e847f 	.word	0x001e847f
 80021d4:	003d08ff 	.word	0x003d08ff
 80021d8:	431bde83 	.word	0x431bde83
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff fba8 	bl	8001948 <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	f040 80e0 	bne.w	80023c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2319      	movs	r3, #25
 800220e:	2201      	movs	r2, #1
 8002210:	4970      	ldr	r1, [pc, #448]	@ (80023d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f964 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	e0d3      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_I2C_Master_Transmit+0x50>
 800222c:	2302      	movs	r3, #2
 800222e:	e0cc      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d007      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2221      	movs	r2, #33	@ 0x21
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2210      	movs	r2, #16
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	893a      	ldrh	r2, [r7, #8]
 8002286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a50      	ldr	r2, [pc, #320]	@ (80023d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f89c 	bl	80023dc <I2C_MasterRequestWrite>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e08d      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022c4:	e066      	b.n	8002394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa22 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d107      	bne.n	80022ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d11b      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x188>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d017      	beq.n	8002368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	6a39      	ldr	r1, [r7, #32]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fa19 	bl	80027a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e01a      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d194      	bne.n	80022c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	00100002 	.word	0x00100002
 80023d8:	ffff0000 	.word	0xffff0000

080023dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	460b      	mov	r3, r1
 80023ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d006      	beq.n	8002406 <I2C_MasterRequestWrite+0x2a>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d003      	beq.n	8002406 <I2C_MasterRequestWrite+0x2a>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002404:	d108      	bne.n	8002418 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e00b      	b.n	8002430 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	2b12      	cmp	r3, #18
 800241e:	d107      	bne.n	8002430 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800242e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f84f 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002456:	d103      	bne.n	8002460 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e035      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800246c:	d108      	bne.n	8002480 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800246e:	897b      	ldrh	r3, [r7, #10]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	e01b      	b.n	80024b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002480:	897b      	ldrh	r3, [r7, #10]
 8002482:	11db      	asrs	r3, r3, #7
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f003 0306 	and.w	r3, r3, #6
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f063 030f 	orn	r3, r3, #15
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	490e      	ldr	r1, [pc, #56]	@ (80024d8 <I2C_MasterRequestWrite+0xfc>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f898 	bl	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e010      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4907      	ldr	r1, [pc, #28]	@ (80024dc <I2C_MasterRequestWrite+0x100>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f888 	bl	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	00010008 	.word	0x00010008
 80024dc:	00010002 	.word	0x00010002

080024e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f0:	e048      	b.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d044      	beq.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7ff fa25 	bl	8001948 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d139      	bne.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10d      	bne.n	8002536 <I2C_WaitOnFlagUntilTimeout+0x56>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	43da      	mvns	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4013      	ands	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	e00c      	b.n	8002550 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	43da      	mvns	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4013      	ands	r3, r2
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	429a      	cmp	r2, r3
 8002554:	d116      	bne.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f043 0220 	orr.w	r2, r3, #32
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e023      	b.n	80025cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10d      	bne.n	80025aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	43da      	mvns	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	e00c      	b.n	80025c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	43da      	mvns	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d093      	beq.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e2:	e071      	b.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f2:	d123      	bne.n	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002602:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800260c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f043 0204 	orr.w	r2, r3, #4
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e067      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d041      	beq.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7ff f980 	bl	8001948 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d136      	bne.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10c      	bne.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	e00b      	b.n	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	43da      	mvns	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4013      	ands	r3, r2
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e021      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10c      	bne.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	43da      	mvns	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4013      	ands	r3, r2
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e00b      	b.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	f47f af6d 	bne.w	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002720:	e034      	b.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f886 	bl	8002834 <I2C_IsAcknowledgeFailed>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e034      	b.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d028      	beq.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7ff f905 	bl	8001948 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11d      	bne.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275a:	2b80      	cmp	r3, #128	@ 0x80
 800275c:	d016      	beq.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e007      	b.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002796:	2b80      	cmp	r3, #128	@ 0x80
 8002798:	d1c3      	bne.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b0:	e034      	b.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f83e 	bl	8002834 <I2C_IsAcknowledgeFailed>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e034      	b.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d028      	beq.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7ff f8bd 	bl	8001948 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11d      	bne.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d016      	beq.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e007      	b.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b04      	cmp	r3, #4
 8002828:	d1c3      	bne.n	80027b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800284a:	d11b      	bne.n	8002884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0e8      	b.n	8002a74 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f007 f9dc 	bl	8009c74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2203      	movs	r2, #3
 80028c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 f8eb 	bl	8005aaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028de:	f003 f8c1 	bl	8005a64 <USB_CoreInit>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0bf      	b.n	8002a74 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 f8ef 	bl	8005ade <USB_SetCurrentMode>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0b0      	b.n	8002a74 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
 8002916:	e03e      	b.n	8002996 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	3311      	adds	r3, #17
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	3310      	adds	r3, #16
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	3313      	adds	r3, #19
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	3320      	adds	r3, #32
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3324      	adds	r3, #36	@ 0x24
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	3301      	adds	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	791b      	ldrb	r3, [r3, #4]
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	429a      	cmp	r2, r3
 800299e:	d3bb      	bcc.n	8002918 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e044      	b.n	8002a30 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	791b      	ldrb	r3, [r3, #4]
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3b5      	bcc.n	80029a6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a44:	f003 f857 	bl	8005af6 <USB_DevInit>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00c      	b.n	8002a74 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 fad6 	bl	800801e <USB_DevDisconnect>

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_Start+0x16>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e016      	b.n	8002ac0 <HAL_PCD_Start+0x44>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 ffed 	bl	8005a7e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f007 fb57 	bl	800a15a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f005 faaa 	bl	800800a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f005 faac 	bl	8008032 <USB_ReadInterrupts>
 8002ada:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fb1a 	bl	8003120 <PCD_EP_ISR_Handler>

    return;
 8002aec:	e119      	b.n	8002d22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f007 f92a 	bl	8009d6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b16:	2100      	movs	r1, #0
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f905 	bl	8002d28 <HAL_PCD_SetAddress>

    return;
 8002b1e:	e100      	b.n	8002d22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b42:	e0ee      	b.n	8002d22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00c      	beq.n	8002b68 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b60:	b292      	uxth	r2, r2
 8002b62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b66:	e0dc      	b.n	8002d22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d027      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0204 	bic.w	r2, r2, #4
 8002b84:	b292      	uxth	r2, r2
 8002b86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0208 	bic.w	r2, r2, #8
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f007 f91a 	bl	8009ddc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bc0:	e0af      	b.n	8002d22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8083 	beq.w	8002cd4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	77fb      	strb	r3, [r7, #31]
 8002bd2:	e010      	b.n	8002bf6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	7ffb      	ldrb	r3, [r7, #31]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	441a      	add	r2, r3
 8002be0:	7ffb      	ldrb	r3, [r7, #31]
 8002be2:	8812      	ldrh	r2, [r2, #0]
 8002be4:	b292      	uxth	r2, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	3320      	adds	r3, #32
 8002bea:	443b      	add	r3, r7
 8002bec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002bf0:	7ffb      	ldrb	r3, [r7, #31]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	77fb      	strb	r3, [r7, #31]
 8002bf6:	7ffb      	ldrb	r3, [r7, #31]
 8002bf8:	2b07      	cmp	r3, #7
 8002bfa:	d9eb      	bls.n	8002bd4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	b292      	uxth	r2, r2
 8002c28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002c2c:	bf00      	nop
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f6      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c52:	b292      	uxth	r2, r2
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e00f      	b.n	8002c7e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	4611      	mov	r1, r2
 8002c66:	7ffa      	ldrb	r2, [r7, #31]
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	440a      	add	r2, r1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	3320      	adds	r3, #32
 8002c70:	443b      	add	r3, r7
 8002c72:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c76:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c78:	7ffb      	ldrb	r3, [r7, #31]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	77fb      	strb	r3, [r7, #31]
 8002c7e:	7ffb      	ldrb	r3, [r7, #31]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	d9ec      	bls.n	8002c5e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0208 	orr.w	r2, r2, #8
 8002c96:	b292      	uxth	r2, r2
 8002c98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0204 	orr.w	r2, r2, #4
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f007 f86b 	bl	8009da8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cd2:	e026      	b.n	8002d22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00f      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cf0:	b292      	uxth	r2, r2
 8002cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f007 f829 	bl	8009d4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cfc:	e011      	b.n	8002d22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00c      	beq.n	8002d22 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d1a:	b292      	uxth	r2, r2
 8002d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d20:	bf00      	nop
  }
}
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_PCD_SetAddress+0x1a>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e012      	b.n	8002d68 <HAL_PCD_SetAddress+0x40>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f005 f943 	bl	8007fe4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	70fb      	strb	r3, [r7, #3]
 8002d82:	460b      	mov	r3, r1
 8002d84:	803b      	strh	r3, [r7, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da0e      	bge.n	8002db4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 0207 	and.w	r2, r3, #7
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	3310      	adds	r3, #16
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	705a      	strb	r2, [r3, #1]
 8002db2:	e00e      	b.n	8002dd2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 0207 	and.w	r2, r3, #7
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dde:	883a      	ldrh	r2, [r7, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	78ba      	ldrb	r2, [r7, #2]
 8002de8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dea:	78bb      	ldrb	r3, [r7, #2]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d102      	bne.n	8002df6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_PCD_EP_Open+0x94>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e00e      	b.n	8002e22 <HAL_PCD_EP_Open+0xb2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68f9      	ldr	r1, [r7, #12]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f002 fe8c 	bl	8005b30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002e20:	7afb      	ldrb	r3, [r7, #11]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da0e      	bge.n	8002e5c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 0207 	and.w	r2, r3, #7
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	705a      	strb	r2, [r3, #1]
 8002e5a:	e00e      	b.n	8002e7a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 0207 	and.w	r2, r3, #7
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_PCD_EP_Close+0x6a>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e00e      	b.n	8002eb2 <HAL_PCD_EP_Close+0x88>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 fa04 	bl	80062b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eca:	7afb      	ldrb	r3, [r7, #11]
 8002ecc:	f003 0207 	and.w	r2, r3, #7
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6979      	ldr	r1, [r7, #20]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fbbb 	bl	8006688 <USB_EPStartXfer>

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 0207 	and.w	r2, r3, #7
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	460b      	mov	r3, r1
 8002f58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	7afb      	ldrb	r3, [r7, #11]
 8002f5c:	f003 0207 	and.w	r2, r3, #7
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	3310      	adds	r3, #16
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2201      	movs	r2, #1
 8002f94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f96:	7afb      	ldrb	r3, [r7, #11]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6979      	ldr	r1, [r7, #20]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fb6d 	bl	8006688 <USB_EPStartXfer>

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	7912      	ldrb	r2, [r2, #4]
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e04c      	b.n	8003070 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da0e      	bge.n	8002ffc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 0207 	and.w	r2, r3, #7
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3310      	adds	r3, #16
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	705a      	strb	r2, [r3, #1]
 8002ffa:	e00c      	b.n	8003016 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_PCD_EP_SetStall+0x7e>
 8003032:	2302      	movs	r3, #2
 8003034:	e01c      	b.n	8003070 <HAL_PCD_EP_SetStall+0xb8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	4618      	mov	r0, r3
 8003046:	f004 fed0 	bl	8007dea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	2b00      	cmp	r3, #0
 8003052:	d108      	bne.n	8003066 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f004 fff5 	bl	8008050 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	7912      	ldrb	r2, [r2, #4]
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e040      	b.n	8003118 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0e      	bge.n	80030bc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 0207 	and.w	r2, r3, #7
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	3310      	adds	r3, #16
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	705a      	strb	r2, [r3, #1]
 80030ba:	e00e      	b.n	80030da <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	f003 0207 	and.w	r2, r3, #7
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_PCD_EP_ClrStall+0x82>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e00e      	b.n	8003118 <HAL_PCD_EP_ClrStall+0xa0>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	4618      	mov	r0, r3
 800310a:	f004 febe 	bl	8007e8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b096      	sub	sp, #88	@ 0x58
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003128:	e3bb      	b.n	80038a2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003132:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003136:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003144:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003148:	2b00      	cmp	r3, #0
 800314a:	f040 8175 	bne.w	8003438 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800314e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d14e      	bne.n	80031f8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316a:	81fb      	strh	r3, [r7, #14]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	89fb      	ldrh	r3, [r7, #14]
 8003172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317a:	b29b      	uxth	r3, r3
 800317c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3310      	adds	r3, #16
 8003182:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	3302      	adds	r3, #2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	441a      	add	r2, r3
 80031ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031be:	2100      	movs	r1, #0
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f006 fdaa 	bl	8009d1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7b5b      	ldrb	r3, [r3, #13]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8368 	beq.w	80038a2 <PCD_EP_ISR_Handler+0x782>
 80031d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 8363 	bne.w	80038a2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7b5b      	ldrb	r3, [r3, #13]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	735a      	strb	r2, [r3, #13]
 80031f6:	e354      	b.n	80038a2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031fe:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800320a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800320e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003212:	2b00      	cmp	r3, #0
 8003214:	d034      	beq.n	8003280 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	3306      	adds	r3, #6
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800323e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003240:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800324c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003252:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003254:	b29b      	uxth	r3, r3
 8003256:	f004 ff4b 	bl	80080f0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29a      	uxth	r2, r3
 8003262:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003266:	4013      	ands	r3, r2
 8003268:	823b      	strh	r3, [r7, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	8a3a      	ldrh	r2, [r7, #16]
 8003270:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003274:	b292      	uxth	r2, r2
 8003276:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f006 fd21 	bl	8009cc0 <HAL_PCD_SetupStageCallback>
 800327e:	e310      	b.n	80038a2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003280:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003284:	2b00      	cmp	r3, #0
 8003286:	f280 830c 	bge.w	80038a2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29a      	uxth	r2, r3
 8003292:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003296:	4013      	ands	r3, r2
 8003298:	83fb      	strh	r3, [r7, #30]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	8bfa      	ldrh	r2, [r7, #30]
 80032a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032a4:	b292      	uxth	r2, r2
 80032a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	3306      	adds	r3, #6
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d019      	beq.n	8003310 <PCD_EP_ISR_Handler+0x1f0>
 80032dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d015      	beq.n	8003310 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	6959      	ldr	r1, [r3, #20]
 80032ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f004 fefb 	bl	80080f0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	441a      	add	r2, r3
 8003304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003306:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003308:	2100      	movs	r1, #0
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f006 fcea 	bl	8009ce4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800331a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800331e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 82bd 	bne.w	80038a2 <PCD_EP_ISR_Handler+0x782>
 8003328:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800332c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003330:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003334:	f000 82b5 	beq.w	80038a2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4413      	add	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003362:	b29a      	uxth	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b3e      	cmp	r3, #62	@ 0x3e
 800336e:	d91d      	bls.n	80033ac <PCD_EP_ISR_Handler+0x28c>
 8003370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	647b      	str	r3, [r7, #68]	@ 0x44
 8003378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <PCD_EP_ISR_Handler+0x26a>
 8003384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003386:	3b01      	subs	r3, #1
 8003388:	647b      	str	r3, [r7, #68]	@ 0x44
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29a      	uxth	r2, r3
 8003390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003392:	b29b      	uxth	r3, r3
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	b29b      	uxth	r3, r3
 8003398:	4313      	orrs	r3, r2
 800339a:	b29b      	uxth	r3, r3
 800339c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	e026      	b.n	80033fa <PCD_EP_ISR_Handler+0x2da>
 80033ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <PCD_EP_ISR_Handler+0x2aa>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	e017      	b.n	80033fa <PCD_EP_ISR_Handler+0x2da>
 80033ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <PCD_EP_ISR_Handler+0x2c4>
 80033de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033e0:	3301      	adds	r3, #1
 80033e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	029b      	lsls	r3, r3, #10
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340a:	827b      	strh	r3, [r7, #18]
 800340c:	8a7b      	ldrh	r3, [r7, #18]
 800340e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003412:	827b      	strh	r3, [r7, #18]
 8003414:	8a7b      	ldrh	r3, [r7, #18]
 8003416:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800341a:	827b      	strh	r3, [r7, #18]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	8a7b      	ldrh	r3, [r7, #18]
 8003422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800342a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800342e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]
 8003436:	e234      	b.n	80038a2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800344c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003450:	2b00      	cmp	r3, #0
 8003452:	f280 80fc 	bge.w	800364e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29a      	uxth	r2, r3
 8003468:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800346c:	4013      	ands	r3, r2
 800346e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003484:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003488:	b292      	uxth	r2, r2
 800348a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800348c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80034a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a4:	7b1b      	ldrb	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d125      	bne.n	80034f6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	3306      	adds	r3, #6
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80034d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8092 	beq.w	8003604 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e6:	6959      	ldr	r1, [r3, #20]
 80034e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ea:	88da      	ldrh	r2, [r3, #6]
 80034ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034f0:	f004 fdfe 	bl	80080f0 <USB_ReadPMA>
 80034f4:	e086      	b.n	8003604 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f8:	78db      	ldrb	r3, [r3, #3]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d10a      	bne.n	8003514 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003502:	461a      	mov	r2, r3
 8003504:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9d9 	bl	80038be <HAL_PCD_EP_DB_Receive>
 800350c:	4603      	mov	r3, r0
 800350e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003512:	e077      	b.n	8003604 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800352a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	441a      	add	r2, r3
 8003540:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800354c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003550:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003554:	b29b      	uxth	r3, r3
 8003556:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d024      	beq.n	80035bc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	3302      	adds	r3, #2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800359e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02e      	beq.n	8003604 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ac:	6959      	ldr	r1, [r3, #20]
 80035ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b0:	891a      	ldrh	r2, [r3, #8]
 80035b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035b6:	f004 fd9b 	bl	80080f0 <USB_ReadPMA>
 80035ba:	e023      	b.n	8003604 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	3306      	adds	r3, #6
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80035e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fa:	895a      	ldrh	r2, [r3, #10]
 80035fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003600:	f004 fd76 	bl	80080f0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800360c:	441a      	add	r2, r3
 800360e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003610:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800361a:	441a      	add	r2, r3
 800361c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <PCD_EP_ISR_Handler+0x514>
 8003628:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800362c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d206      	bcs.n	8003642 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f006 fb52 	bl	8009ce4 <HAL_PCD_DataOutStageCallback>
 8003640:	e005      	b.n	800364e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003648:	4618      	mov	r0, r3
 800364a:	f003 f81d 	bl	8006688 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800364e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8123 	beq.w	80038a2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800365c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	3310      	adds	r3, #16
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	441a      	add	r2, r3
 800369c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80036a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80036ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 80a2 	bne.w	80037fa <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80036b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80036bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036be:	7b1b      	ldrb	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8093 	beq.w	80037ec <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d046      	beq.n	8003760 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d126      	bne.n	8003728 <PCD_EP_ISR_Handler+0x608>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	4413      	add	r3, r2
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	011a      	lsls	r2, r3, #4
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	4413      	add	r3, r2
 80036fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003700:	623b      	str	r3, [r7, #32]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370c:	b29a      	uxth	r2, r3
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003720:	b29a      	uxth	r2, r3
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	e061      	b.n	80037ec <PCD_EP_ISR_Handler+0x6cc>
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d15d      	bne.n	80037ec <PCD_EP_ISR_Handler+0x6cc>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003744:	4413      	add	r3, r2
 8003746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	011a      	lsls	r2, r3, #4
 800374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003750:	4413      	add	r3, r2
 8003752:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003756:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375a:	2200      	movs	r2, #0
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	e045      	b.n	80037ec <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d126      	bne.n	80037bc <PCD_EP_ISR_Handler+0x69c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800377c:	b29b      	uxth	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	4413      	add	r3, r2
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
 8003786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	011a      	lsls	r2, r3, #4
 800378c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378e:	4413      	add	r3, r2
 8003790:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003794:	633b      	str	r3, [r7, #48]	@ 0x30
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	e017      	b.n	80037ec <PCD_EP_ISR_Handler+0x6cc>
 80037bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d113      	bne.n	80037ec <PCD_EP_ISR_Handler+0x6cc>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d2:	4413      	add	r3, r2
 80037d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	011a      	lsls	r2, r3, #4
 80037dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037de:	4413      	add	r3, r2
 80037e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	2200      	movs	r2, #0
 80037ea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f006 fa91 	bl	8009d1a <HAL_PCD_DataInStageCallback>
 80037f8:	e053      	b.n	80038a2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d146      	bne.n	8003894 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800380e:	b29b      	uxth	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	3302      	adds	r3, #2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800383a:	429a      	cmp	r2, r3
 800383c:	d907      	bls.n	800384e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384a:	619a      	str	r2, [r3, #24]
 800384c:	e002      	b.n	8003854 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800384e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800385c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f006 fa59 	bl	8009d1a <HAL_PCD_DataInStageCallback>
 8003868:	e01b      	b.n	80038a2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800386a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003872:	441a      	add	r2, r3
 8003874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003876:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003880:	441a      	add	r2, r3
 8003882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003884:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800388c:	4618      	mov	r0, r3
 800388e:	f002 fefb 	bl	8006688 <USB_EPStartXfer>
 8003892:	e006      	b.n	80038a2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003894:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003898:	461a      	mov	r2, r3
 800389a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f91b 	bl	8003ad8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	b21b      	sxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f6ff ac3b 	blt.w	800312a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3758      	adds	r7, #88	@ 0x58
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	4613      	mov	r3, r2
 80038ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d07e      	beq.n	80039d4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	3302      	adds	r3, #2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	8b7b      	ldrh	r3, [r7, #26]
 8003906:	429a      	cmp	r2, r3
 8003908:	d306      	bcc.n	8003918 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	8b7b      	ldrh	r3, [r7, #26]
 8003910:	1ad2      	subs	r2, r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	619a      	str	r2, [r3, #24]
 8003916:	e002      	b.n	800391e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d123      	bne.n	800396e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800393c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003940:	833b      	strh	r3, [r7, #24]
 8003942:	8b3b      	ldrh	r3, [r7, #24]
 8003944:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003948:	833b      	strh	r3, [r7, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	8b3b      	ldrh	r3, [r7, #24]
 800395a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800395e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800396a:	b29b      	uxth	r3, r3
 800396c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01f      	beq.n	80039b8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	82fb      	strh	r3, [r7, #22]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	8afb      	ldrh	r3, [r7, #22]
 80039a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039b8:	8b7b      	ldrh	r3, [r7, #26]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8087 	beq.w	8003ace <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6959      	ldr	r1, [r3, #20]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	891a      	ldrh	r2, [r3, #8]
 80039cc:	8b7b      	ldrh	r3, [r7, #26]
 80039ce:	f004 fb8f 	bl	80080f0 <USB_ReadPMA>
 80039d2:	e07c      	b.n	8003ace <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039dc:	b29b      	uxth	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	3306      	adds	r3, #6
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	8b7b      	ldrh	r3, [r7, #26]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d306      	bcc.n	8003a16 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	8b7b      	ldrh	r3, [r7, #26]
 8003a0e:	1ad2      	subs	r2, r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	619a      	str	r2, [r3, #24]
 8003a14:	e002      	b.n	8003a1c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d123      	bne.n	8003a6c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3e:	83fb      	strh	r3, [r7, #30]
 8003a40:	8bfb      	ldrh	r3, [r7, #30]
 8003a42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a46:	83fb      	strh	r3, [r7, #30]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	8bfb      	ldrh	r3, [r7, #30]
 8003a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d11f      	bne.n	8003ab6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a90:	83bb      	strh	r3, [r7, #28]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	8bbb      	ldrh	r3, [r7, #28]
 8003aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ab6:	8b7b      	ldrh	r3, [r7, #26]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6959      	ldr	r1, [r3, #20]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	895a      	ldrh	r2, [r3, #10]
 8003ac8:	8b7b      	ldrh	r3, [r7, #26]
 8003aca:	f004 fb11 	bl	80080f0 <USB_ReadPMA>
    }
  }

  return count;
 8003ace:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b0a4      	sub	sp, #144	@ 0x90
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 81dd 	beq.w	8003eac <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	3302      	adds	r3, #2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d907      	bls.n	8003b3a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	619a      	str	r2, [r3, #24]
 8003b38:	e002      	b.n	8003b40 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 80b9 	bne.w	8003cbc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	785b      	ldrb	r3, [r3, #1]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d126      	bne.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b66:	4413      	add	r3, r2
 8003b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	011a      	lsls	r2, r3, #4
 8003b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b72:	4413      	add	r3, r2
 8003b74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e01a      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d116      	bne.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbc:	4413      	add	r3, r2
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	011a      	lsls	r2, r3, #4
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc8:	4413      	add	r3, r2
 8003bca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bce:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d126      	bne.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	011a      	lsls	r2, r3, #4
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	801a      	strh	r2, [r3, #0]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	e017      	b.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d113      	bne.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	4413      	add	r3, r2
 8003c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	011a      	lsls	r2, r3, #4
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	4413      	add	r3, r2
 8003c56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	4619      	mov	r1, r3
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f006 f856 	bl	8009d1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 82fc 	beq.w	8004272 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c94:	82fb      	strh	r3, [r7, #22]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	441a      	add	r2, r3
 8003ca4:	8afb      	ldrh	r3, [r7, #22]
 8003ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	8013      	strh	r3, [r2, #0]
 8003cba:	e2da      	b.n	8004272 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d021      	beq.n	8003d0a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	f040 82ae 	bne.w	8004272 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d1e:	441a      	add	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d30b      	bcc.n	8003d56 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6a1a      	ldr	r2, [r3, #32]
 8003d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	621a      	str	r2, [r3, #32]
 8003d54:	e017      	b.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003d5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d6e:	e00a      	b.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d165      	bne.n	8003e5a <HAL_PCD_EP_DB_Transmit+0x382>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da2:	4413      	add	r3, r2
 8003da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	011a      	lsls	r2, r3, #4
 8003dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dae:	4413      	add	r3, r2
 8003db0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dca:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dcc:	d91d      	bls.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x332>
 8003dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_PCD_EP_DB_Transmit+0x310>
 8003de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de4:	3b01      	subs	r3, #1
 8003de6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	029b      	lsls	r3, r3, #10
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	801a      	strh	r2, [r3, #0]
 8003e08:	e044      	b.n	8003e94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x350>
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	e035      	b.n	8003e94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e3e:	3301      	adds	r3, #1
 8003e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	029b      	lsls	r3, r3, #10
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	e01c      	b.n	8003e94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d118      	bne.n	8003e94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e76:	4413      	add	r3, r2
 8003e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	011a      	lsls	r2, r3, #4
 8003e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e82:	4413      	add	r3, r2
 8003e84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e92:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6959      	ldr	r1, [r3, #20]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	891a      	ldrh	r2, [r3, #8]
 8003ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f004 f8de 	bl	8008066 <USB_WritePMA>
 8003eaa:	e1e2      	b.n	8004272 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3306      	adds	r3, #6
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d307      	bcc.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003eec:	1ad2      	subs	r2, r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	619a      	str	r2, [r3, #24]
 8003ef2:	e002      	b.n	8003efa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 80c0 	bne.w	8004084 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d126      	bne.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x482>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f20:	4413      	add	r3, r2
 8003f22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	011a      	lsls	r2, r3, #4
 8003f2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f42:	801a      	strh	r2, [r3, #0]
 8003f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	e01a      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d116      	bne.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f76:	4413      	add	r3, r2
 8003f78:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	011a      	lsls	r2, r3, #4
 8003f80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f82:	4413      	add	r3, r2
 8003f84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	785b      	ldrb	r3, [r3, #1]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d12b      	bne.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb2:	4413      	add	r3, r2
 8003fb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	011a      	lsls	r2, r3, #4
 8003fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	e017      	b.n	8004026 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d113      	bne.n	8004026 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004006:	b29b      	uxth	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800400c:	4413      	add	r3, r2
 800400e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	011a      	lsls	r2, r3, #4
 8004016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004018:	4413      	add	r3, r2
 800401a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800401e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004020:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004022:	2200      	movs	r2, #0
 8004024:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	4619      	mov	r1, r3
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f005 fe74 	bl	8009d1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 811a 	bne.w	8004272 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004058:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800406e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004076:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800407a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800407e:	b29b      	uxth	r3, r3
 8004080:	8013      	strh	r3, [r2, #0]
 8004082:	e0f6      	b.n	8004272 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d121      	bne.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 80ca 	bne.w	8004272 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040e6:	441a      	add	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040f4:	441a      	add	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6a1a      	ldr	r2, [r3, #32]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	429a      	cmp	r2, r3
 8004104:	d30b      	bcc.n	800411e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	621a      	str	r2, [r3, #32]
 800411c:	e017      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d108      	bne.n	8004138 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004126:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800412a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004136:	e00a      	b.n	800414e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2200      	movs	r2, #0
 8004144:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	657b      	str	r3, [r7, #84]	@ 0x54
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d165      	bne.n	8004228 <HAL_PCD_EP_DB_Transmit+0x750>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004170:	4413      	add	r3, r2
 8004172:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	011a      	lsls	r2, r3, #4
 800417a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800417c:	4413      	add	r3, r2
 800417e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004182:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418e:	b29a      	uxth	r2, r3
 8004190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004192:	801a      	strh	r2, [r3, #0]
 8004194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004198:	2b3e      	cmp	r3, #62	@ 0x3e
 800419a:	d91d      	bls.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x700>
 800419c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80041b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041b2:	3b01      	subs	r3, #1
 80041b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041be:	b29b      	uxth	r3, r3
 80041c0:	029b      	lsls	r3, r3, #10
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e041      	b.n	800425c <HAL_PCD_EP_DB_Transmit+0x784>
 80041d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x71e>
 80041e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	e032      	b.n	800425c <HAL_PCD_EP_DB_Transmit+0x784>
 80041f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_PCD_EP_DB_Transmit+0x738>
 800420a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800420c:	3301      	adds	r3, #1
 800420e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29a      	uxth	r2, r3
 8004216:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004218:	b29b      	uxth	r3, r3
 800421a:	029b      	lsls	r3, r3, #10
 800421c:	b29b      	uxth	r3, r3
 800421e:	4313      	orrs	r3, r2
 8004220:	b29a      	uxth	r2, r3
 8004222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004224:	801a      	strh	r2, [r3, #0]
 8004226:	e019      	b.n	800425c <HAL_PCD_EP_DB_Transmit+0x784>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d115      	bne.n	800425c <HAL_PCD_EP_DB_Transmit+0x784>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004238:	b29b      	uxth	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423e:	4413      	add	r3, r2
 8004240:	657b      	str	r3, [r7, #84]	@ 0x54
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	011a      	lsls	r2, r3, #4
 8004248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424a:	4413      	add	r3, r2
 800424c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004250:	653b      	str	r3, [r7, #80]	@ 0x50
 8004252:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004256:	b29a      	uxth	r2, r3
 8004258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800425a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6959      	ldr	r1, [r3, #20]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	895a      	ldrh	r2, [r3, #10]
 8004268:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800426c:	b29b      	uxth	r3, r3
 800426e:	f003 fefa 	bl	8008066 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428c:	82bb      	strh	r3, [r7, #20]
 800428e:	8abb      	ldrh	r3, [r7, #20]
 8004290:	f083 0310 	eor.w	r3, r3, #16
 8004294:	82bb      	strh	r3, [r7, #20]
 8004296:	8abb      	ldrh	r3, [r7, #20]
 8004298:	f083 0320 	eor.w	r3, r3, #32
 800429c:	82bb      	strh	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	8abb      	ldrh	r3, [r7, #20]
 80042ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3790      	adds	r7, #144	@ 0x90
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	817b      	strh	r3, [r7, #10]
 80042da:	4613      	mov	r3, r2
 80042dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	f003 0207 	and.w	r2, r3, #7
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	3310      	adds	r3, #16
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e009      	b.n	8004316 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004302:	897a      	ldrh	r2, [r7, #10]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004316:	893b      	ldrh	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	b29a      	uxth	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	80da      	strh	r2, [r3, #6]
 800432a:	e00b      	b.n	8004344 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2201      	movs	r2, #1
 8004330:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	b29a      	uxth	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	b29a      	uxth	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e272      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8087 	beq.w	800447e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004370:	4b92      	ldr	r3, [pc, #584]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b04      	cmp	r3, #4
 800437a:	d00c      	beq.n	8004396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800437c:	4b8f      	ldr	r3, [pc, #572]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d112      	bne.n	80043ae <HAL_RCC_OscConfig+0x5e>
 8004388:	4b8c      	ldr	r3, [pc, #560]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004394:	d10b      	bne.n	80043ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004396:	4b89      	ldr	r3, [pc, #548]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d06c      	beq.n	800447c <HAL_RCC_OscConfig+0x12c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d168      	bne.n	800447c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e24c      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x76>
 80043b8:	4b80      	ldr	r3, [pc, #512]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a7f      	ldr	r2, [pc, #508]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80043be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e02e      	b.n	8004424 <HAL_RCC_OscConfig+0xd4>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x98>
 80043ce:	4b7b      	ldr	r3, [pc, #492]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a7a      	ldr	r2, [pc, #488]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b78      	ldr	r3, [pc, #480]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a77      	ldr	r2, [pc, #476]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80043e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e01d      	b.n	8004424 <HAL_RCC_OscConfig+0xd4>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0xbc>
 80043f2:	4b72      	ldr	r3, [pc, #456]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a71      	ldr	r2, [pc, #452]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b6f      	ldr	r3, [pc, #444]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6e      	ldr	r2, [pc, #440]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0xd4>
 800440c:	4b6b      	ldr	r3, [pc, #428]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6a      	ldr	r2, [pc, #424]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b68      	ldr	r3, [pc, #416]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a67      	ldr	r2, [pc, #412]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fa8c 	bl	8001948 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004434:	f7fd fa88 	bl	8001948 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	@ 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e200      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b5d      	ldr	r3, [pc, #372]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0xe4>
 8004452:	e014      	b.n	800447e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd fa78 	bl	8001948 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd fa74 	bl	8001948 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	@ 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1ec      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	4b53      	ldr	r3, [pc, #332]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x10c>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d063      	beq.n	8004552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800448a:	4b4c      	ldr	r3, [pc, #304]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004496:	4b49      	ldr	r3, [pc, #292]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d11c      	bne.n	80044dc <HAL_RCC_OscConfig+0x18c>
 80044a2:	4b46      	ldr	r3, [pc, #280]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	4b43      	ldr	r3, [pc, #268]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_RCC_OscConfig+0x176>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e1c0      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c6:	4b3d      	ldr	r3, [pc, #244]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4939      	ldr	r1, [pc, #228]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	e03a      	b.n	8004552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e4:	4b36      	ldr	r3, [pc, #216]	@ (80045c0 <HAL_RCC_OscConfig+0x270>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ea:	f7fd fa2d 	bl	8001948 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fd fa29 	bl	8001948 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e1a1      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	4b2d      	ldr	r3, [pc, #180]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004510:	4b2a      	ldr	r3, [pc, #168]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4927      	ldr	r1, [pc, #156]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	e015      	b.n	8004552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004526:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <HAL_RCC_OscConfig+0x270>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fd fa0c 	bl	8001948 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004534:	f7fd fa08 	bl	8001948 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e180      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d03a      	beq.n	80045d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d019      	beq.n	800459a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004566:	4b17      	ldr	r3, [pc, #92]	@ (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456c:	f7fd f9ec 	bl	8001948 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004574:	f7fd f9e8 	bl	8001948 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e160      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <HAL_RCC_OscConfig+0x26c>)
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004592:	2001      	movs	r0, #1
 8004594:	f000 faba 	bl	8004b0c <RCC_Delay>
 8004598:	e01c      	b.n	80045d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <HAL_RCC_OscConfig+0x274>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a0:	f7fd f9d2 	bl	8001948 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a6:	e00f      	b.n	80045c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fd f9ce 	bl	8001948 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d908      	bls.n	80045c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e146      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
 80045c0:	42420000 	.word	0x42420000
 80045c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	4b92      	ldr	r3, [pc, #584]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e9      	bne.n	80045a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80a6 	beq.w	800472e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	4b88      	ldr	r3, [pc, #544]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	4a87      	ldr	r2, [pc, #540]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045fc:	61d3      	str	r3, [r2, #28]
 80045fe:	4b85      	ldr	r3, [pc, #532]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460e:	4b82      	ldr	r3, [pc, #520]	@ (8004818 <HAL_RCC_OscConfig+0x4c8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d118      	bne.n	800464c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461a:	4b7f      	ldr	r3, [pc, #508]	@ (8004818 <HAL_RCC_OscConfig+0x4c8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7e      	ldr	r2, [pc, #504]	@ (8004818 <HAL_RCC_OscConfig+0x4c8>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004626:	f7fd f98f 	bl	8001948 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fd f98b 	bl	8001948 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b64      	cmp	r3, #100	@ 0x64
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e103      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	4b75      	ldr	r3, [pc, #468]	@ (8004818 <HAL_RCC_OscConfig+0x4c8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d106      	bne.n	8004662 <HAL_RCC_OscConfig+0x312>
 8004654:	4b6f      	ldr	r3, [pc, #444]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	4a6e      	ldr	r2, [pc, #440]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6213      	str	r3, [r2, #32]
 8004660:	e02d      	b.n	80046be <HAL_RCC_OscConfig+0x36e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0x334>
 800466a:	4b6a      	ldr	r3, [pc, #424]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4a69      	ldr	r2, [pc, #420]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	6213      	str	r3, [r2, #32]
 8004676:	4b67      	ldr	r3, [pc, #412]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	4a66      	ldr	r2, [pc, #408]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	6213      	str	r3, [r2, #32]
 8004682:	e01c      	b.n	80046be <HAL_RCC_OscConfig+0x36e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b05      	cmp	r3, #5
 800468a:	d10c      	bne.n	80046a6 <HAL_RCC_OscConfig+0x356>
 800468c:	4b61      	ldr	r3, [pc, #388]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	4a60      	ldr	r2, [pc, #384]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	6213      	str	r3, [r2, #32]
 8004698:	4b5e      	ldr	r3, [pc, #376]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	4a5d      	ldr	r2, [pc, #372]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6213      	str	r3, [r2, #32]
 80046a4:	e00b      	b.n	80046be <HAL_RCC_OscConfig+0x36e>
 80046a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6213      	str	r3, [r2, #32]
 80046b2:	4b58      	ldr	r3, [pc, #352]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	4a57      	ldr	r2, [pc, #348]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d015      	beq.n	80046f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c6:	f7fd f93f 	bl	8001948 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fd f93b 	bl	8001948 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0b1      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ee      	beq.n	80046ce <HAL_RCC_OscConfig+0x37e>
 80046f0:	e014      	b.n	800471c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fd f929 	bl	8001948 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fd f925 	bl	8001948 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e09b      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004710:	4b40      	ldr	r3, [pc, #256]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1ee      	bne.n	80046fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004722:	4b3c      	ldr	r3, [pc, #240]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4a3b      	ldr	r2, [pc, #236]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800472c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8087 	beq.w	8004846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004738:	4b36      	ldr	r3, [pc, #216]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b08      	cmp	r3, #8
 8004742:	d061      	beq.n	8004808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d146      	bne.n	80047da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474c:	4b33      	ldr	r3, [pc, #204]	@ (800481c <HAL_RCC_OscConfig+0x4cc>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fd f8f9 	bl	8001948 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475a:	f7fd f8f5 	bl	8001948 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e06d      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800476c:	4b29      	ldr	r3, [pc, #164]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f0      	bne.n	800475a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004780:	d108      	bne.n	8004794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004782:	4b24      	ldr	r3, [pc, #144]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4921      	ldr	r1, [pc, #132]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004794:	4b1f      	ldr	r3, [pc, #124]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a19      	ldr	r1, [r3, #32]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	430b      	orrs	r3, r1
 80047a6:	491b      	ldr	r1, [pc, #108]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ac:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <HAL_RCC_OscConfig+0x4cc>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fd f8c9 	bl	8001948 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fd f8c5 	bl	8001948 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e03d      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047cc:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x46a>
 80047d8:	e035      	b.n	8004846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047da:	4b10      	ldr	r3, [pc, #64]	@ (800481c <HAL_RCC_OscConfig+0x4cc>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd f8b2 	bl	8001948 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fd f8ae 	bl	8001948 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e026      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fa:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x498>
 8004806:	e01e      	b.n	8004846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e019      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
 8004814:	40021000 	.word	0x40021000
 8004818:	40007000 	.word	0x40007000
 800481c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_RCC_OscConfig+0x500>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	429a      	cmp	r2, r3
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000

08004854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0d0      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b6a      	ldr	r3, [pc, #424]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d910      	bls.n	8004898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b67      	ldr	r3, [pc, #412]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 0207 	bic.w	r2, r3, #7
 800487e:	4965      	ldr	r1, [pc, #404]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b63      	ldr	r3, [pc, #396]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0b8      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b0:	4b59      	ldr	r3, [pc, #356]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a58      	ldr	r2, [pc, #352]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c8:	4b53      	ldr	r3, [pc, #332]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a52      	ldr	r2, [pc, #328]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80048d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b50      	ldr	r3, [pc, #320]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	494d      	ldr	r1, [pc, #308]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d040      	beq.n	8004974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	4b47      	ldr	r3, [pc, #284]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d115      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e07f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b41      	ldr	r3, [pc, #260]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e073      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	4b3d      	ldr	r3, [pc, #244]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06b      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004932:	4b39      	ldr	r3, [pc, #228]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4936      	ldr	r1, [pc, #216]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004944:	f7fd f800 	bl	8001948 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fc fffc 	bl	8001948 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e053      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	4b2d      	ldr	r3, [pc, #180]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f003 020c 	and.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d1eb      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004974:	4b27      	ldr	r3, [pc, #156]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d210      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b24      	ldr	r3, [pc, #144]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 0207 	bic.w	r2, r3, #7
 800498a:	4922      	ldr	r1, [pc, #136]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b20      	ldr	r3, [pc, #128]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e032      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b0:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4916      	ldr	r1, [pc, #88]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049ce:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	490e      	ldr	r1, [pc, #56]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049e2:	f000 f821 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	490a      	ldr	r1, [pc, #40]	@ (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	5ccb      	ldrb	r3, [r1, r3]
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	4a09      	ldr	r2, [pc, #36]	@ (8004a20 <HAL_RCC_ClockConfig+0x1cc>)
 80049fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049fe:	4b09      	ldr	r3, [pc, #36]	@ (8004a24 <HAL_RCC_ClockConfig+0x1d0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fc ff5e 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40022000 	.word	0x40022000
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	0800ab94 	.word	0x0800ab94
 8004a20:	20000000 	.word	0x20000000
 8004a24:	20000004 	.word	0x20000004

08004a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a42:	4b1e      	ldr	r3, [pc, #120]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x94>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d002      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x30>
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0x36>
 8004a56:	e027      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a58:	4b19      	ldr	r3, [pc, #100]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a5a:	613b      	str	r3, [r7, #16]
      break;
 8004a5c:	e027      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	0c9b      	lsrs	r3, r3, #18
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a68:	5cd3      	ldrb	r3, [r2, r3]
 8004a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a76:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x94>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	0c5b      	lsrs	r3, r3, #17
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	4a11      	ldr	r2, [pc, #68]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a82:	5cd3      	ldrb	r3, [r2, r3]
 8004a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a8a:	fb03 f202 	mul.w	r2, r3, r2
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	e004      	b.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	613b      	str	r3, [r7, #16]
      break;
 8004aa6:	e002      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004aaa:	613b      	str	r3, [r7, #16]
      break;
 8004aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aae:	693b      	ldr	r3, [r7, #16]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	007a1200 	.word	0x007a1200
 8004ac4:	0800abac 	.word	0x0800abac
 8004ac8:	0800abbc 	.word	0x0800abbc
 8004acc:	003d0900 	.word	0x003d0900

08004ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad4:	4b02      	ldr	r3, [pc, #8]	@ (8004ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	20000000 	.word	0x20000000

08004ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ae8:	f7ff fff2 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	0a1b      	lsrs	r3, r3, #8
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4903      	ldr	r1, [pc, #12]	@ (8004b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	0800aba4 	.word	0x0800aba4

08004b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b14:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <RCC_Delay+0x34>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a0a      	ldr	r2, [pc, #40]	@ (8004b44 <RCC_Delay+0x38>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0a5b      	lsrs	r3, r3, #9
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b28:	bf00      	nop
  }
  while (Delay --);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1e5a      	subs	r2, r3, #1
 8004b2e:	60fa      	str	r2, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f9      	bne.n	8004b28 <RCC_Delay+0x1c>
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	20000000 	.word	0x20000000
 8004b44:	10624dd3 	.word	0x10624dd3

08004b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d07d      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b68:	4b4f      	ldr	r3, [pc, #316]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10d      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b74:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4a4b      	ldr	r2, [pc, #300]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b7e:	61d3      	str	r3, [r2, #28]
 8004b80:	4b49      	ldr	r3, [pc, #292]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	4b46      	ldr	r3, [pc, #280]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d118      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9c:	4b43      	ldr	r3, [pc, #268]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a42      	ldr	r2, [pc, #264]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba8:	f7fc fece 	bl	8001948 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	e008      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb0:	f7fc feca 	bl	8001948 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	@ 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e06d      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bce:	4b36      	ldr	r3, [pc, #216]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02e      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d027      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bec:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c02:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d014      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fc fe99 	bl	8001948 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fc fe95 	bl	8001948 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e036      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ee      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4917      	ldr	r1, [pc, #92]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c54:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4a13      	ldr	r2, [pc, #76]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	490b      	ldr	r1, [pc, #44]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4904      	ldr	r1, [pc, #16]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	42420440 	.word	0x42420440

08004cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e076      	b.n	8004db4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d108      	bne.n	8004ce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cd6:	d009      	beq.n	8004cec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	61da      	str	r2, [r3, #28]
 8004cde:	e005      	b.n	8004cec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fc92 	bl	8001630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d70:	ea42 0103 	orr.w	r1, r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	0c1a      	lsrs	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f002 0204 	and.w	r2, r2, #4
 8004d92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004da2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	@ 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dce:	f7fc fdbb 	bl	8001948 <HAL_GetTick>
 8004dd2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dda:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004de2:	887b      	ldrh	r3, [r7, #2]
 8004de4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004de6:	7ffb      	ldrb	r3, [r7, #31]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d00c      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x4a>
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df2:	d106      	bne.n	8004e02 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <HAL_SPI_TransmitReceive+0x46>
 8004dfc:	7ffb      	ldrb	r3, [r7, #31]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d001      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
 8004e04:	e17f      	b.n	8005106 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x5c>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x5c>
 8004e12:	887b      	ldrh	r3, [r7, #2]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e174      	b.n	8005106 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x6e>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e16d      	b.n	8005106 <HAL_SPI_TransmitReceive+0x34a>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d003      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2205      	movs	r2, #5
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	887a      	ldrh	r2, [r7, #2]
 8004e6e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e86:	2b40      	cmp	r3, #64	@ 0x40
 8004e88:	d007      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea2:	d17e      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0xf6>
 8004eac:	8afb      	ldrh	r3, [r7, #22]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d16c      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	881a      	ldrh	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed6:	e059      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d11b      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x162>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d016      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x162>
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d113      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	1c9a      	adds	r2, r3, #2
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d119      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x1a4>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d014      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	b292      	uxth	r2, r2
 8004f42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f48:	1c9a      	adds	r2, r3, #2
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f60:	f7fc fcf2 	bl	8001948 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d80d      	bhi.n	8004f8c <HAL_SPI_TransmitReceive+0x1d0>
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d009      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e0bc      	b.n	8005106 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1a0      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x11c>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d19b      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x11c>
 8004fa0:	e082      	b.n	80050a8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_TransmitReceive+0x1f4>
 8004faa:	8afb      	ldrh	r3, [r7, #22]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d171      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd6:	e05d      	b.n	8005094 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d11c      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x264>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d017      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x264>
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d114      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b01      	cmp	r3, #1
 800502c:	d119      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x2a6>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d014      	beq.n	8005062 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800505e:	2301      	movs	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005062:	f7fc fc71 	bl	8001948 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506e:	429a      	cmp	r2, r3
 8005070:	d803      	bhi.n	800507a <HAL_SPI_TransmitReceive+0x2be>
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d102      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x2c4>
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e038      	b.n	8005106 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d19c      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x21c>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d197      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a8:	6a3a      	ldr	r2, [r7, #32]
 80050aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f8b7 	bl	8005220 <SPI_EndRxTxTransaction>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e01d      	b.n	8005106 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005104:	2300      	movs	r3, #0
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3728      	adds	r7, #40	@ 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005120:	f7fc fc12 	bl	8001948 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	4413      	add	r3, r2
 800512e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005130:	f7fc fc0a 	bl	8001948 <HAL_GetTick>
 8005134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005136:	4b39      	ldr	r3, [pc, #228]	@ (800521c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	015b      	lsls	r3, r3, #5
 800513c:	0d1b      	lsrs	r3, r3, #20
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	fb02 f303 	mul.w	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005146:	e054      	b.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d050      	beq.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005150:	f7fc fbfa 	bl	8001948 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	429a      	cmp	r2, r3
 800515e:	d902      	bls.n	8005166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d13d      	bne.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800517e:	d111      	bne.n	80051a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005188:	d004      	beq.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005192:	d107      	bne.n	80051a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ac:	d10f      	bne.n	80051ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e017      	b.n	8005212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	429a      	cmp	r2, r3
 800520e:	d19b      	bne.n	8005148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000000 	.word	0x20000000

08005220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2201      	movs	r2, #1
 8005234:	2102      	movs	r1, #2
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff ff6a 	bl	8005110 <SPI_WaitFlagStateUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005246:	f043 0220 	orr.w	r2, r3, #32
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e013      	b.n	800527a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2200      	movs	r2, #0
 800525a:	2180      	movs	r1, #128	@ 0x80
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff ff57 	bl	8005110 <SPI_WaitFlagStateUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e000      	b.n	800527a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e041      	b.n	8005318 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fc fa0b 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f000 fa5b 	bl	800577c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d001      	beq.n	8005338 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e032      	b.n	800539e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a18      	ldr	r2, [pc, #96]	@ (80053a8 <HAL_TIM_Base_Start+0x88>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <HAL_TIM_Base_Start+0x48>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005352:	d009      	beq.n	8005368 <HAL_TIM_Base_Start+0x48>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a14      	ldr	r2, [pc, #80]	@ (80053ac <HAL_TIM_Base_Start+0x8c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <HAL_TIM_Base_Start+0x48>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a13      	ldr	r2, [pc, #76]	@ (80053b0 <HAL_TIM_Base_Start+0x90>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d111      	bne.n	800538c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b06      	cmp	r3, #6
 8005378:	d010      	beq.n	800539c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538a:	e007      	b.n	800539c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800

080053b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d020      	beq.n	8005418 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01b      	beq.n	8005418 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0202 	mvn.w	r2, #2
 80053e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9a1 	bl	8005746 <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f994 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f9a3 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0204 	mvn.w	r2, #4
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f97b 	bl	8005746 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f96e 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f97d 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d020      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01b      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0208 	mvn.w	r2, #8
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2204      	movs	r2, #4
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f955 	bl	8005746 <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f948 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f957 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d020      	beq.n	80054fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0210 	mvn.w	r2, #16
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2208      	movs	r2, #8
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f92f 	bl	8005746 <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f922 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f931 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00c      	beq.n	8005520 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0201 	mvn.w	r2, #1
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f901 	bl	8005722 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00c      	beq.n	8005544 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005530:	2b00      	cmp	r3, #0
 8005532:	d007      	beq.n	8005544 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa87 	bl	8005a52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00c      	beq.n	8005568 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f901 	bl	800576a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00c      	beq.n	800558c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0220 	mvn.w	r2, #32
 8005584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa5a 	bl	8005a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIM_ConfigClockSource+0x1c>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e0b4      	b.n	800571a <HAL_TIM_ConfigClockSource+0x186>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e8:	d03e      	beq.n	8005668 <HAL_TIM_ConfigClockSource+0xd4>
 80055ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ee:	f200 8087 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f6:	f000 8086 	beq.w	8005706 <HAL_TIM_ConfigClockSource+0x172>
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fe:	d87f      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b70      	cmp	r3, #112	@ 0x70
 8005602:	d01a      	beq.n	800563a <HAL_TIM_ConfigClockSource+0xa6>
 8005604:	2b70      	cmp	r3, #112	@ 0x70
 8005606:	d87b      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b60      	cmp	r3, #96	@ 0x60
 800560a:	d050      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x11a>
 800560c:	2b60      	cmp	r3, #96	@ 0x60
 800560e:	d877      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b50      	cmp	r3, #80	@ 0x50
 8005612:	d03c      	beq.n	800568e <HAL_TIM_ConfigClockSource+0xfa>
 8005614:	2b50      	cmp	r3, #80	@ 0x50
 8005616:	d873      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	d058      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x13a>
 800561c:	2b40      	cmp	r3, #64	@ 0x40
 800561e:	d86f      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b30      	cmp	r3, #48	@ 0x30
 8005622:	d064      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x15a>
 8005624:	2b30      	cmp	r3, #48	@ 0x30
 8005626:	d86b      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b20      	cmp	r3, #32
 800562a:	d060      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b20      	cmp	r3, #32
 800562e:	d867      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d05c      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x15a>
 8005634:	2b10      	cmp	r3, #16
 8005636:	d05a      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x15a>
 8005638:	e062      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800564a:	f000 f97c 	bl	8005946 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800565c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	609a      	str	r2, [r3, #8]
      break;
 8005666:	e04f      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005678:	f000 f965 	bl	8005946 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800568a:	609a      	str	r2, [r3, #8]
      break;
 800568c:	e03c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	461a      	mov	r2, r3
 800569c:	f000 f8dc 	bl	8005858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2150      	movs	r1, #80	@ 0x50
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 f933 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056ac:	e02c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ba:	461a      	mov	r2, r3
 80056bc:	f000 f8fa 	bl	80058b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2160      	movs	r1, #96	@ 0x60
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 f923 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056cc:	e01c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	461a      	mov	r2, r3
 80056dc:	f000 f8bc 	bl	8005858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2140      	movs	r1, #64	@ 0x40
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 f913 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056ec:	e00c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f000 f90a 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056fe:	e003      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
      break;
 8005704:	e000      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a2f      	ldr	r2, [pc, #188]	@ (800584c <TIM_Base_SetConfig+0xd0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00b      	beq.n	80057ac <TIM_Base_SetConfig+0x30>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579a:	d007      	beq.n	80057ac <TIM_Base_SetConfig+0x30>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a2c      	ldr	r2, [pc, #176]	@ (8005850 <TIM_Base_SetConfig+0xd4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_Base_SetConfig+0x30>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <TIM_Base_SetConfig+0xd8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d108      	bne.n	80057be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a22      	ldr	r2, [pc, #136]	@ (800584c <TIM_Base_SetConfig+0xd0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00b      	beq.n	80057de <TIM_Base_SetConfig+0x62>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057cc:	d007      	beq.n	80057de <TIM_Base_SetConfig+0x62>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005850 <TIM_Base_SetConfig+0xd4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_Base_SetConfig+0x62>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005854 <TIM_Base_SetConfig+0xd8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a0d      	ldr	r2, [pc, #52]	@ (800584c <TIM_Base_SetConfig+0xd0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d103      	bne.n	8005824 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f023 0201 	bic.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	611a      	str	r2, [r3, #16]
  }
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800

08005858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0201 	bic.w	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f023 030a 	bic.w	r3, r3, #10
 8005894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr

080058b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0210 	bic.w	r2, r3, #16
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	031b      	lsls	r3, r3, #12
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr

08005912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	f043 0307 	orr.w	r3, r3, #7
 8005934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005960:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	021a      	lsls	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	431a      	orrs	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4313      	orrs	r3, r2
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	609a      	str	r2, [r3, #8]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005998:	2302      	movs	r3, #2
 800599a:	e046      	b.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a16      	ldr	r2, [pc, #88]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e8:	d009      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a10      	ldr	r2, [pc, #64]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800

08005a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a8e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005a92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ab2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005ab6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	4013      	ands	r3, r2
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr

08005ade <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	4638      	mov	r0, r7
 8005b00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b09d      	sub	sp, #116	@ 0x74
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b56:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	78db      	ldrb	r3, [r3, #3]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d81f      	bhi.n	8005ba2 <USB_ActivateEndpoint+0x72>
 8005b62:	a201      	add	r2, pc, #4	@ (adr r2, 8005b68 <USB_ActivateEndpoint+0x38>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b95 	.word	0x08005b95
 8005b70:	08005bab 	.word	0x08005bab
 8005b74:	08005b87 	.word	0x08005b87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b84:	e012      	b.n	8005bac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b8a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005b8e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b92:	e00b      	b.n	8005bac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b9c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ba0:	e004      	b.n	8005bac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005ba8:	e000      	b.n	8005bac <USB_ActivateEndpoint+0x7c>
      break;
 8005baa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	441a      	add	r2, r3
 8005bb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	7b1b      	ldrb	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 8178 	bne.w	8005f0c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8084 	beq.w	8005d2e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	4413      	add	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	011a      	lsls	r2, r3, #4
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	88db      	ldrh	r3, [r3, #6]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	827b      	strh	r3, [r7, #18]
 8005c68:	8a7b      	ldrh	r3, [r7, #18]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01b      	beq.n	8005caa <USB_ActivateEndpoint+0x17a>
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c88:	823b      	strh	r3, [r7, #16]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	441a      	add	r2, r3
 8005c94:	8a3b      	ldrh	r3, [r7, #16]
 8005c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ca2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	78db      	ldrb	r3, [r3, #3]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d020      	beq.n	8005cf4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc8:	81bb      	strh	r3, [r7, #12]
 8005cca:	89bb      	ldrh	r3, [r7, #12]
 8005ccc:	f083 0320 	eor.w	r3, r3, #32
 8005cd0:	81bb      	strh	r3, [r7, #12]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	89bb      	ldrh	r3, [r7, #12]
 8005cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	8013      	strh	r3, [r2, #0]
 8005cf2:	e2d5      	b.n	80062a0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d0a:	81fb      	strh	r3, [r7, #14]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	441a      	add	r2, r3
 8005d16:	89fb      	ldrh	r3, [r7, #14]
 8005d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	8013      	strh	r3, [r2, #0]
 8005d2c:	e2b8      	b.n	80062a0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	4413      	add	r3, r2
 8005d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	011a      	lsls	r2, r3, #4
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d60:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	4413      	add	r3, r2
 8005d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	011a      	lsls	r2, r3, #4
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	4413      	add	r3, r2
 8005d80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d9c:	d91d      	bls.n	8005dda <USB_ActivateEndpoint+0x2aa>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <USB_ActivateEndpoint+0x288>
 8005db2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005db4:	3b01      	subs	r3, #1
 8005db6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	029b      	lsls	r3, r3, #10
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	e026      	b.n	8005e28 <USB_ActivateEndpoint+0x2f8>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <USB_ActivateEndpoint+0x2c8>
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	e017      	b.n	8005e28 <USB_ActivateEndpoint+0x2f8>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <USB_ActivateEndpoint+0x2e2>
 8005e0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e0e:	3301      	adds	r3, #1
 8005e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	029b      	lsls	r3, r3, #10
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	4313      	orrs	r3, r2
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01b      	beq.n	8005e78 <USB_ActivateEndpoint+0x348>
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e56:	843b      	strh	r3, [r7, #32]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	8c3b      	ldrh	r3, [r7, #32]
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d124      	bne.n	8005eca <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e96:	83bb      	strh	r3, [r7, #28]
 8005e98:	8bbb      	ldrh	r3, [r7, #28]
 8005e9a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e9e:	83bb      	strh	r3, [r7, #28]
 8005ea0:	8bbb      	ldrh	r3, [r7, #28]
 8005ea2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ea6:	83bb      	strh	r3, [r7, #28]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	441a      	add	r2, r3
 8005eb2:	8bbb      	ldrh	r3, [r7, #28]
 8005eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	8013      	strh	r3, [r2, #0]
 8005ec8:	e1ea      	b.n	80062a0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee0:	83fb      	strh	r3, [r7, #30]
 8005ee2:	8bfb      	ldrh	r3, [r7, #30]
 8005ee4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ee8:	83fb      	strh	r3, [r7, #30]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	8bfb      	ldrh	r3, [r7, #30]
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
 8005f0a:	e1c9      	b.n	80062a0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	78db      	ldrb	r3, [r3, #3]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d11e      	bne.n	8005f52 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f44:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	8013      	strh	r3, [r2, #0]
 8005f50:	e01d      	b.n	8005f8e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f68:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f9e:	4413      	add	r3, r2
 8005fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	011a      	lsls	r2, r3, #4
 8005fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	891b      	ldrh	r3, [r3, #8]
 8005fb6:	085b      	lsrs	r3, r3, #1
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd2:	4413      	add	r3, r2
 8005fd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	011a      	lsls	r2, r3, #4
 8005fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005fe4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	895b      	ldrh	r3, [r3, #10]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ff4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f040 8093 	bne.w	8006126 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <USB_ActivateEndpoint+0x524>
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800602e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006032:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006048:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800604c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006050:	b29b      	uxth	r3, r3
 8006052:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006062:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01b      	beq.n	80060a4 <USB_ActivateEndpoint+0x574>
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800609c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ba:	873b      	strh	r3, [r7, #56]	@ 0x38
 80060bc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80060be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80060c2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80060c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80060c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80060ca:	873b      	strh	r3, [r7, #56]	@ 0x38
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80060d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006102:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	441a      	add	r2, r3
 800610e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800611c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006120:	b29b      	uxth	r3, r3
 8006122:	8013      	strh	r3, [r2, #0]
 8006124:	e0bc      	b.n	80062a0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006136:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800613a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01d      	beq.n	800617e <USB_ActivateEndpoint+0x64e>
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006158:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006172:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800618e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01d      	beq.n	80061d6 <USB_ActivateEndpoint+0x6a6>
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	441a      	add	r2, r3
 80061be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80061c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	78db      	ldrb	r3, [r3, #3]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d024      	beq.n	8006228 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80061f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80061fc:	f083 0320 	eor.w	r3, r3, #32
 8006200:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800621e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
 8006226:	e01d      	b.n	8006264 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800623a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800623e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	441a      	add	r2, r3
 800624c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800625c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006260:	b29b      	uxth	r3, r3
 8006262:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800628c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006290:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800629c:	b29b      	uxth	r3, r3
 800629e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80062a0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3774      	adds	r7, #116	@ 0x74
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop

080062b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b08d      	sub	sp, #52	@ 0x34
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	7b1b      	ldrb	r3, [r3, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 808e 	bne.w	80063e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d044      	beq.n	8006356 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	81bb      	strh	r3, [r7, #12]
 80062da:	89bb      	ldrh	r3, [r7, #12]
 80062dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01b      	beq.n	800631c <USB_DeactivateEndpoint+0x6c>
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fa:	817b      	strh	r3, [r7, #10]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	441a      	add	r2, r3
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800630c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006314:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006318:	b29b      	uxth	r3, r3
 800631a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006332:	813b      	strh	r3, [r7, #8]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	441a      	add	r2, r3
 800633e:	893b      	ldrh	r3, [r7, #8]
 8006340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006350:	b29b      	uxth	r3, r3
 8006352:	8013      	strh	r3, [r2, #0]
 8006354:	e192      	b.n	800667c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	827b      	strh	r3, [r7, #18]
 8006364:	8a7b      	ldrh	r3, [r7, #18]
 8006366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01b      	beq.n	80063a6 <USB_DeactivateEndpoint+0xf6>
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006384:	823b      	strh	r3, [r7, #16]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	8a3b      	ldrh	r3, [r7, #16]
 8006392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800639a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800639e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063bc:	81fb      	strh	r3, [r7, #14]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	89fb      	ldrh	r3, [r7, #14]
 80063ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063da:	b29b      	uxth	r3, r3
 80063dc:	8013      	strh	r3, [r2, #0]
 80063de:	e14d      	b.n	800667c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 80a5 	bne.w	8006534 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	843b      	strh	r3, [r7, #32]
 80063f8:	8c3b      	ldrh	r3, [r7, #32]
 80063fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01b      	beq.n	800643a <USB_DeactivateEndpoint+0x18a>
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006418:	83fb      	strh	r3, [r7, #30]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	441a      	add	r2, r3
 8006424:	8bfb      	ldrh	r3, [r7, #30]
 8006426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800642a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800642e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006436:	b29b      	uxth	r3, r3
 8006438:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	83bb      	strh	r3, [r7, #28]
 8006448:	8bbb      	ldrh	r3, [r7, #28]
 800644a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01b      	beq.n	800648a <USB_DeactivateEndpoint+0x1da>
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006468:	837b      	strh	r3, [r7, #26]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	8b7b      	ldrh	r3, [r7, #26]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006482:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800649c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a0:	833b      	strh	r3, [r7, #24]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	8b3b      	ldrh	r3, [r7, #24]
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d8:	82fb      	strh	r3, [r7, #22]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	8afb      	ldrh	r3, [r7, #22]
 80064e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006510:	82bb      	strh	r3, [r7, #20]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8abb      	ldrh	r3, [r7, #20]
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800652a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]
 8006532:	e0a3      	b.n	800667c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006542:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01b      	beq.n	8006584 <USB_DeactivateEndpoint+0x2d4>
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29b      	uxth	r3, r3
 800655a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800655e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006562:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006578:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800657c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006580:	b29b      	uxth	r3, r3
 8006582:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006592:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <USB_DeactivateEndpoint+0x324>
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006600:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006608:	b29b      	uxth	r3, r3
 800660a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800661e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006622:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	441a      	add	r2, r3
 800662e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800663c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006640:	b29b      	uxth	r3, r3
 8006642:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800665a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800666c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3734      	adds	r7, #52	@ 0x34
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr

08006688 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b0c2      	sub	sp, #264	@ 0x108
 800668c:	af00      	add	r7, sp, #0
 800668e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006696:	6018      	str	r0, [r3, #0]
 8006698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	f040 86b7 	bne.w	8007422 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d908      	bls.n	80066e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80066d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80066e0:	e007      	b.n	80066f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	7b1b      	ldrb	r3, [r3, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d13a      	bne.n	8006778 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6959      	ldr	r1, [r3, #20]
 800670e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	88da      	ldrh	r2, [r3, #6]
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	b29b      	uxth	r3, r3
 8006720:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006724:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006728:	6800      	ldr	r0, [r0, #0]
 800672a:	f001 fc9c 	bl	8008066 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800672e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006748:	b29b      	uxth	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	011a      	lsls	r2, r3, #4
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4413      	add	r3, r2
 8006764:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	f000 be1f 	b.w	80073b6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	78db      	ldrb	r3, [r3, #3]
 8006784:	2b02      	cmp	r3, #2
 8006786:	f040 8462 	bne.w	800704e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	f240 83df 	bls.w	8006f66 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80067a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ce:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80067d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	441a      	add	r2, r3
 80067ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80067f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80067fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006800:	b29b      	uxth	r3, r3
 8006802:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a1a      	ldr	r2, [r3, #32]
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006814:	1ad2      	subs	r2, r2, r3
 8006816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 81c7 	beq.w	8006bd8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800684a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	633b      	str	r3, [r7, #48]	@ 0x30
 8006856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d177      	bne.n	8006956 <USB_EPStartXfer+0x2ce>
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	4413      	add	r3, r2
 8006888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800688a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	011a      	lsls	r2, r3, #4
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	4413      	add	r3, r2
 800689c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80068b8:	d921      	bls.n	80068fe <USB_EPStartXfer+0x276>
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <USB_EPStartXfer+0x252>
 80068d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80068d4:	3b01      	subs	r3, #1
 80068d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	029b      	lsls	r3, r3, #10
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	801a      	strh	r2, [r3, #0]
 80068fc:	e050      	b.n	80069a0 <USB_EPStartXfer+0x318>
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <USB_EPStartXfer+0x294>
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006914:	b29a      	uxth	r2, r3
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	e041      	b.n	80069a0 <USB_EPStartXfer+0x318>
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <USB_EPStartXfer+0x2b4>
 8006932:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006936:	3301      	adds	r3, #1
 8006938:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29a      	uxth	r2, r3
 8006942:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006946:	b29b      	uxth	r3, r3
 8006948:	029b      	lsls	r3, r3, #10
 800694a:	b29b      	uxth	r3, r3
 800694c:	4313      	orrs	r3, r2
 800694e:	b29a      	uxth	r2, r3
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	e024      	b.n	80069a0 <USB_EPStartXfer+0x318>
 8006956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	785b      	ldrb	r3, [r3, #1]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d11c      	bne.n	80069a0 <USB_EPStartXfer+0x318>
 8006966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006974:	b29b      	uxth	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	4413      	add	r3, r2
 800697c:	633b      	str	r3, [r7, #48]	@ 0x30
 800697e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	011a      	lsls	r2, r3, #4
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	4413      	add	r3, r2
 8006990:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699a:	b29a      	uxth	r2, r3
 800699c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	895b      	ldrh	r3, [r3, #10]
 80069ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6959      	ldr	r1, [r3, #20]
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069ce:	6800      	ldr	r0, [r0, #0]
 80069d0:	f001 fb49 	bl	8008066 <USB_WritePMA>
            ep->xfer_buff += len;
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695a      	ldr	r2, [r3, #20]
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e4:	441a      	add	r2, r3
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6a1a      	ldr	r2, [r3, #32]
 80069fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d90f      	bls.n	8006a2e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6a1a      	ldr	r2, [r3, #32]
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	621a      	str	r2, [r3, #32]
 8006a2c:	e00e      	b.n	8006a4c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d177      	bne.n	8006b4c <USB_EPStartXfer+0x4c4>
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	011a      	lsls	r2, r3, #4
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aac:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aae:	d921      	bls.n	8006af4 <USB_EPStartXfer+0x46c>
 8006ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d104      	bne.n	8006ad0 <USB_EPStartXfer+0x448>
 8006ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aca:	3b01      	subs	r3, #1
 8006acc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	029b      	lsls	r3, r3, #10
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	e056      	b.n	8006ba2 <USB_EPStartXfer+0x51a>
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <USB_EPStartXfer+0x48a>
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e047      	b.n	8006ba2 <USB_EPStartXfer+0x51a>
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b16:	085b      	lsrs	r3, r3, #1
 8006b18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <USB_EPStartXfer+0x4aa>
 8006b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	029b      	lsls	r3, r3, #10
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	4313      	orrs	r3, r2
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	e02a      	b.n	8006ba2 <USB_EPStartXfer+0x51a>
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d122      	bne.n	8006ba2 <USB_EPStartXfer+0x51a>
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	623b      	str	r3, [r7, #32]
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	623b      	str	r3, [r7, #32]
 8006b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	891b      	ldrh	r3, [r3, #8]
 8006bae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6959      	ldr	r1, [r3, #20]
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006bc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bcc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bd0:	6800      	ldr	r0, [r0, #0]
 8006bd2:	f001 fa48 	bl	8008066 <USB_WritePMA>
 8006bd6:	e3ee      	b.n	80073b6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d177      	bne.n	8006cd8 <USB_EPStartXfer+0x650>
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c08:	4413      	add	r3, r2
 8006c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	011a      	lsls	r2, r3, #4
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c3a:	d921      	bls.n	8006c80 <USB_EPStartXfer+0x5f8>
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USB_EPStartXfer+0x5d4>
 8006c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	029b      	lsls	r3, r3, #10
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e056      	b.n	8006d2e <USB_EPStartXfer+0x6a6>
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <USB_EPStartXfer+0x616>
 8006c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	e047      	b.n	8006d2e <USB_EPStartXfer+0x6a6>
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <USB_EPStartXfer+0x636>
 8006cb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cb8:	3301      	adds	r3, #1
 8006cba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd4:	801a      	strh	r2, [r3, #0]
 8006cd6:	e02a      	b.n	8006d2e <USB_EPStartXfer+0x6a6>
 8006cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d122      	bne.n	8006d2e <USB_EPStartXfer+0x6a6>
 8006ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d08:	4413      	add	r3, r2
 8006d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	011a      	lsls	r2, r3, #4
 8006d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	891b      	ldrh	r3, [r3, #8]
 8006d3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6959      	ldr	r1, [r3, #20]
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d5c:	6800      	ldr	r0, [r0, #0]
 8006d5e:	f001 f982 	bl	8008066 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d72:	441a      	add	r2, r3
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6a1a      	ldr	r2, [r3, #32]
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d90f      	bls.n	8006dbc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	1ad2      	subs	r2, r2, r3
 8006dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	621a      	str	r2, [r3, #32]
 8006dba:	e00e      	b.n	8006dda <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d177      	bne.n	8006ee6 <USB_EPStartXfer+0x85e>
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e16:	4413      	add	r3, r2
 8006e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	011a      	lsls	r2, r3, #4
 8006e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e40:	801a      	strh	r2, [r3, #0]
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e46:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e48:	d921      	bls.n	8006e8e <USB_EPStartXfer+0x806>
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d104      	bne.n	8006e6a <USB_EPStartXfer+0x7e2>
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e64:	3b01      	subs	r3, #1
 8006e66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	029b      	lsls	r3, r3, #10
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	e050      	b.n	8006f30 <USB_EPStartXfer+0x8a8>
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <USB_EPStartXfer+0x824>
 8006e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e041      	b.n	8006f30 <USB_EPStartXfer+0x8a8>
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <USB_EPStartXfer+0x844>
 8006ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	029b      	lsls	r3, r3, #10
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	4313      	orrs	r3, r2
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e024      	b.n	8006f30 <USB_EPStartXfer+0x8a8>
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d11c      	bne.n	8006f30 <USB_EPStartXfer+0x8a8>
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f0a:	4413      	add	r3, r2
 8006f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	011a      	lsls	r2, r3, #4
 8006f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	895b      	ldrh	r3, [r3, #10]
 8006f3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6959      	ldr	r1, [r3, #20]
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	f001 f881 	bl	8008066 <USB_WritePMA>
 8006f64:	e227      	b.n	80073b6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	441a      	add	r2, r3
 8006fba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff2:	4413      	add	r3, r2
 8006ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	011a      	lsls	r2, r3, #4
 8007004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007006:	4413      	add	r3, r2
 8007008:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800700c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007012:	b29a      	uxth	r2, r3
 8007014:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007016:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	891b      	ldrh	r3, [r3, #8]
 8007024:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6959      	ldr	r1, [r3, #20]
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007038:	b29b      	uxth	r3, r3
 800703a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800703e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007042:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	f001 f80d 	bl	8008066 <USB_WritePMA>
 800704c:	e1b3      	b.n	80073b6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800704e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6a1a      	ldr	r2, [r3, #32]
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80c6 	beq.w	8007220 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	673b      	str	r3, [r7, #112]	@ 0x70
 80070a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d177      	bne.n	80071a0 <USB_EPStartXfer+0xb18>
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070d0:	4413      	add	r3, r2
 80070d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	011a      	lsls	r2, r3, #4
 80070e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070e4:	4413      	add	r3, r2
 80070e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80070ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007100:	2b3e      	cmp	r3, #62	@ 0x3e
 8007102:	d921      	bls.n	8007148 <USB_EPStartXfer+0xac0>
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <USB_EPStartXfer+0xa9c>
 800711a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800711e:	3b01      	subs	r3, #1
 8007120:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29a      	uxth	r2, r3
 800712a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800712e:	b29b      	uxth	r3, r3
 8007130:	029b      	lsls	r3, r3, #10
 8007132:	b29b      	uxth	r3, r3
 8007134:	4313      	orrs	r3, r2
 8007136:	b29b      	uxth	r3, r3
 8007138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007140:	b29a      	uxth	r2, r3
 8007142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	e050      	b.n	80071ea <USB_EPStartXfer+0xb62>
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <USB_EPStartXfer+0xade>
 8007150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715e:	b29a      	uxth	r2, r3
 8007160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	e041      	b.n	80071ea <USB_EPStartXfer+0xb62>
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <USB_EPStartXfer+0xafe>
 800717c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007180:	3301      	adds	r3, #1
 8007182:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007190:	b29b      	uxth	r3, r3
 8007192:	029b      	lsls	r3, r3, #10
 8007194:	b29b      	uxth	r3, r3
 8007196:	4313      	orrs	r3, r2
 8007198:	b29a      	uxth	r2, r3
 800719a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	e024      	b.n	80071ea <USB_EPStartXfer+0xb62>
 80071a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d11c      	bne.n	80071ea <USB_EPStartXfer+0xb62>
 80071b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071be:	b29b      	uxth	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071c4:	4413      	add	r3, r2
 80071c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	011a      	lsls	r2, r3, #4
 80071d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071d8:	4413      	add	r3, r2
 80071da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80071ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	895b      	ldrh	r3, [r3, #10]
 80071f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6959      	ldr	r1, [r3, #20]
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720a:	b29b      	uxth	r3, r3
 800720c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007210:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007214:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007218:	6800      	ldr	r0, [r0, #0]
 800721a:	f000 ff24 	bl	8008066 <USB_WritePMA>
 800721e:	e0ca      	b.n	80073b6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d177      	bne.n	8007320 <USB_EPStartXfer+0xc98>
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800723c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800724a:	b29b      	uxth	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007250:	4413      	add	r3, r2
 8007252:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	011a      	lsls	r2, r3, #4
 8007262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007264:	4413      	add	r3, r2
 8007266:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800726a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800726c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007276:	b29a      	uxth	r2, r3
 8007278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	2b3e      	cmp	r3, #62	@ 0x3e
 8007282:	d921      	bls.n	80072c8 <USB_EPStartXfer+0xc40>
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <USB_EPStartXfer+0xc1c>
 800729a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800729e:	3b01      	subs	r3, #1
 80072a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	029b      	lsls	r3, r3, #10
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e05c      	b.n	8007382 <USB_EPStartXfer+0xcfa>
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <USB_EPStartXfer+0xc5e>
 80072d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072de:	b29a      	uxth	r2, r3
 80072e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	e04d      	b.n	8007382 <USB_EPStartXfer+0xcfa>
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <USB_EPStartXfer+0xc7e>
 80072fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007300:	3301      	adds	r3, #1
 8007302:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007310:	b29b      	uxth	r3, r3
 8007312:	029b      	lsls	r3, r3, #10
 8007314:	b29b      	uxth	r3, r3
 8007316:	4313      	orrs	r3, r2
 8007318:	b29a      	uxth	r2, r3
 800731a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800731c:	801a      	strh	r2, [r3, #0]
 800731e:	e030      	b.n	8007382 <USB_EPStartXfer+0xcfa>
 8007320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d128      	bne.n	8007382 <USB_EPStartXfer+0xcfa>
 8007330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800734c:	b29b      	uxth	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007354:	4413      	add	r3, r2
 8007356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800735a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	011a      	lsls	r2, r3, #4
 8007368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800736c:	4413      	add	r3, r2
 800736e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007372:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737a:	b29a      	uxth	r2, r3
 800737c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007380:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	891b      	ldrh	r3, [r3, #8]
 800738e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6959      	ldr	r1, [r3, #20]
 800739e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073b0:	6800      	ldr	r0, [r0, #0]
 80073b2:	f000 fe58 	bl	8008066 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80073b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073dc:	817b      	strh	r3, [r7, #10]
 80073de:	897b      	ldrh	r3, [r7, #10]
 80073e0:	f083 0310 	eor.w	r3, r3, #16
 80073e4:	817b      	strh	r3, [r7, #10]
 80073e6:	897b      	ldrh	r3, [r7, #10]
 80073e8:	f083 0320 	eor.w	r3, r3, #32
 80073ec:	817b      	strh	r3, [r7, #10]
 80073ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	441a      	add	r2, r3
 8007408:	897b      	ldrh	r3, [r7, #10]
 800740a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800740e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800741a:	b29b      	uxth	r3, r3
 800741c:	8013      	strh	r3, [r2, #0]
 800741e:	f000 bcde 	b.w	8007dde <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	7b1b      	ldrb	r3, [r3, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 80bb 	bne.w	80075aa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	429a      	cmp	r2, r3
 800744e:	d917      	bls.n	8007480 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699a      	ldr	r2, [r3, #24]
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007470:	1ad2      	subs	r2, r2, r3
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	619a      	str	r2, [r3, #24]
 800747e:	e00e      	b.n	800749e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80074c2:	4413      	add	r3, r2
 80074c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	011a      	lsls	r2, r3, #4
 80074d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80074da:	4413      	add	r3, r2
 80074dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80074fe:	d924      	bls.n	800754a <USB_EPStartXfer+0xec2>
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800750a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <USB_EPStartXfer+0xe98>
 8007516:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800751a:	3b01      	subs	r3, #1
 800751c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007520:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800752c:	b29b      	uxth	r3, r3
 800752e:	029b      	lsls	r3, r3, #10
 8007530:	b29b      	uxth	r3, r3
 8007532:	4313      	orrs	r3, r2
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753e:	b29a      	uxth	r2, r3
 8007540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	f000 bc10 	b.w	8007d6a <USB_EPStartXfer+0x16e2>
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10c      	bne.n	800756c <USB_EPStartXfer+0xee4>
 8007552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007562:	b29a      	uxth	r2, r3
 8007564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	e3fe      	b.n	8007d6a <USB_EPStartXfer+0x16e2>
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <USB_EPStartXfer+0xf04>
 8007582:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007586:	3301      	adds	r3, #1
 8007588:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800758c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29a      	uxth	r2, r3
 8007594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007598:	b29b      	uxth	r3, r3
 800759a:	029b      	lsls	r3, r3, #10
 800759c:	b29b      	uxth	r3, r3
 800759e:	4313      	orrs	r3, r2
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	e3df      	b.n	8007d6a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	78db      	ldrb	r3, [r3, #3]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	f040 8218 	bne.w	80079ec <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f040 809d 	bne.w	8007708 <USB_EPStartXfer+0x1080>
 80075ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075f2:	4413      	add	r3, r2
 80075f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	011a      	lsls	r2, r3, #4
 8007606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800760a:	4413      	add	r3, r2
 800760c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007610:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007620:	b29a      	uxth	r2, r3
 8007622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b3e      	cmp	r3, #62	@ 0x3e
 8007636:	d92b      	bls.n	8007690 <USB_EPStartXfer+0x1008>
 8007638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <USB_EPStartXfer+0xfe0>
 800765e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007662:	3b01      	subs	r3, #1
 8007664:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29a      	uxth	r2, r3
 8007670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007674:	b29b      	uxth	r3, r3
 8007676:	029b      	lsls	r3, r3, #10
 8007678:	b29b      	uxth	r3, r3
 800767a:	4313      	orrs	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007686:	b29a      	uxth	r2, r3
 8007688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	e070      	b.n	8007772 <USB_EPStartXfer+0x10ea>
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10c      	bne.n	80076ba <USB_EPStartXfer+0x1032>
 80076a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	e05b      	b.n	8007772 <USB_EPStartXfer+0x10ea>
 80076ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <USB_EPStartXfer+0x1062>
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e4:	3301      	adds	r3, #1
 80076e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	4313      	orrs	r3, r2
 80076fe:	b29a      	uxth	r2, r3
 8007700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007704:	801a      	strh	r2, [r3, #0]
 8007706:	e034      	b.n	8007772 <USB_EPStartXfer+0x10ea>
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d12c      	bne.n	8007772 <USB_EPStartXfer+0x10ea>
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007734:	b29b      	uxth	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800773c:	4413      	add	r3, r2
 800773e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	011a      	lsls	r2, r3, #4
 8007750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007754:	4413      	add	r3, r2
 8007756:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800775a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800775e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	b29a      	uxth	r2, r3
 800776c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007770:	801a      	strh	r2, [r3, #0]
 8007772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f040 809d 	bne.w	80078cc <USB_EPStartXfer+0x1244>
 8007792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077b6:	4413      	add	r3, r2
 80077b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	011a      	lsls	r2, r3, #4
 80077ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077ce:	4413      	add	r3, r2
 80077d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80077fa:	d92b      	bls.n	8007854 <USB_EPStartXfer+0x11cc>
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800780e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	2b00      	cmp	r3, #0
 8007820:	d104      	bne.n	800782c <USB_EPStartXfer+0x11a4>
 8007822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007826:	3b01      	subs	r3, #1
 8007828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800782c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29a      	uxth	r2, r3
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007838:	b29b      	uxth	r3, r3
 800783a:	029b      	lsls	r3, r3, #10
 800783c:	b29b      	uxth	r3, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	b29b      	uxth	r3, r3
 8007842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	e069      	b.n	8007928 <USB_EPStartXfer+0x12a0>
 8007854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10c      	bne.n	800787e <USB_EPStartXfer+0x11f6>
 8007864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007874:	b29a      	uxth	r2, r3
 8007876:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	e054      	b.n	8007928 <USB_EPStartXfer+0x12a0>
 800787e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d004      	beq.n	80078ae <USB_EPStartXfer+0x1226>
 80078a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a8:	3301      	adds	r3, #1
 80078aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	029b      	lsls	r3, r3, #10
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4313      	orrs	r3, r2
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	e02d      	b.n	8007928 <USB_EPStartXfer+0x12a0>
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d125      	bne.n	8007928 <USB_EPStartXfer+0x12a0>
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078f2:	4413      	add	r3, r2
 80078f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	011a      	lsls	r2, r3, #4
 8007906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800790a:	4413      	add	r3, r2
 800790c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007910:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	b29a      	uxth	r2, r3
 8007922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007926:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8218 	beq.w	8007d6a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800793a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800795a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800795e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <USB_EPStartXfer+0x12ea>
 8007966:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800796a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10d      	bne.n	800798e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007972:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800797a:	2b00      	cmp	r3, #0
 800797c:	f040 81f5 	bne.w	8007d6a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007980:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 81ee 	bne.w	8007d6a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800798e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80079b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80079d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	8013      	strh	r3, [r2, #0]
 80079ea:	e1be      	b.n	8007d6a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80079ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	78db      	ldrb	r3, [r3, #3]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	f040 81b4 	bne.w	8007d66 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80079fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d917      	bls.n	8007a4a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3a:	1ad2      	subs	r2, r2, r3
 8007a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	619a      	str	r2, [r3, #24]
 8007a48:	e00e      	b.n	8007a68 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2200      	movs	r2, #0
 8007a66:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f040 8085 	bne.w	8007b84 <USB_EPStartXfer+0x14fc>
 8007a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	011a      	lsls	r2, r3, #4
 8007ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ad2:	801a      	strh	r2, [r3, #0]
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ada:	d923      	bls.n	8007b24 <USB_EPStartXfer+0x149c>
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aea:	f003 031f 	and.w	r3, r3, #31
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d104      	bne.n	8007afc <USB_EPStartXfer+0x1474>
 8007af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007af6:	3b01      	subs	r3, #1
 8007af8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	029b      	lsls	r3, r3, #10
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	e060      	b.n	8007be6 <USB_EPStartXfer+0x155e>
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10c      	bne.n	8007b46 <USB_EPStartXfer+0x14be>
 8007b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b42:	801a      	strh	r2, [r3, #0]
 8007b44:	e04f      	b.n	8007be6 <USB_EPStartXfer+0x155e>
 8007b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <USB_EPStartXfer+0x14de>
 8007b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b60:	3301      	adds	r3, #1
 8007b62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	029b      	lsls	r3, r3, #10
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b80:	801a      	strh	r2, [r3, #0]
 8007b82:	e030      	b.n	8007be6 <USB_EPStartXfer+0x155e>
 8007b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d128      	bne.n	8007be6 <USB_EPStartXfer+0x155e>
 8007b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bb8:	4413      	add	r3, r2
 8007bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	011a      	lsls	r2, r3, #4
 8007bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007be4:	801a      	strh	r2, [r3, #0]
 8007be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 8085 	bne.w	8007d10 <USB_EPStartXfer+0x1688>
 8007c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	011a      	lsls	r2, r3, #4
 8007c3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c42:	4413      	add	r3, r2
 8007c44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c64:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c66:	d923      	bls.n	8007cb0 <USB_EPStartXfer+0x1628>
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c76:	f003 031f 	and.w	r3, r3, #31
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <USB_EPStartXfer+0x1600>
 8007c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c82:	3b01      	subs	r3, #1
 8007c84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	029b      	lsls	r3, r3, #10
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	e05c      	b.n	8007d6a <USB_EPStartXfer+0x16e2>
 8007cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10c      	bne.n	8007cd2 <USB_EPStartXfer+0x164a>
 8007cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	e04b      	b.n	8007d6a <USB_EPStartXfer+0x16e2>
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d004      	beq.n	8007cf2 <USB_EPStartXfer+0x166a>
 8007ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cec:	3301      	adds	r3, #1
 8007cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	029b      	lsls	r3, r3, #10
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	4313      	orrs	r3, r2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	e02c      	b.n	8007d6a <USB_EPStartXfer+0x16e2>
 8007d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d124      	bne.n	8007d6a <USB_EPStartXfer+0x16e2>
 8007d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d36:	4413      	add	r3, r2
 8007d38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	011a      	lsls	r2, r3, #4
 8007d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d4e:	4413      	add	r3, r2
 8007d50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e001      	b.n	8007d6a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e03a      	b.n	8007de0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007da0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007da4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007da8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d020      	beq.n	8007e3e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e12:	81bb      	strh	r3, [r7, #12]
 8007e14:	89bb      	ldrh	r3, [r7, #12]
 8007e16:	f083 0310 	eor.w	r3, r3, #16
 8007e1a:	81bb      	strh	r3, [r7, #12]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	441a      	add	r2, r3
 8007e26:	89bb      	ldrh	r3, [r7, #12]
 8007e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	8013      	strh	r3, [r2, #0]
 8007e3c:	e01f      	b.n	8007e7e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e54:	81fb      	strh	r3, [r7, #14]
 8007e56:	89fb      	ldrh	r3, [r7, #14]
 8007e58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e5c:	81fb      	strh	r3, [r7, #14]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	441a      	add	r2, r3
 8007e68:	89fb      	ldrh	r3, [r7, #14]
 8007e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr

08007e8a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b087      	sub	sp, #28
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	7b1b      	ldrb	r3, [r3, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 809d 	bne.w	8007fd8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	785b      	ldrb	r3, [r3, #1]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d04c      	beq.n	8007f40 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	823b      	strh	r3, [r7, #16]
 8007eb4:	8a3b      	ldrh	r3, [r7, #16]
 8007eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01b      	beq.n	8007ef6 <USB_EPClearStall+0x6c>
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed4:	81fb      	strh	r3, [r7, #14]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	441a      	add	r2, r3
 8007ee0:	89fb      	ldrh	r3, [r7, #14]
 8007ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	78db      	ldrb	r3, [r3, #3]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d06c      	beq.n	8007fd8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f14:	81bb      	strh	r3, [r7, #12]
 8007f16:	89bb      	ldrh	r3, [r7, #12]
 8007f18:	f083 0320 	eor.w	r3, r3, #32
 8007f1c:	81bb      	strh	r3, [r7, #12]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	441a      	add	r2, r3
 8007f28:	89bb      	ldrh	r3, [r7, #12]
 8007f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	8013      	strh	r3, [r2, #0]
 8007f3e:	e04b      	b.n	8007fd8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	82fb      	strh	r3, [r7, #22]
 8007f4e:	8afb      	ldrh	r3, [r7, #22]
 8007f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01b      	beq.n	8007f90 <USB_EPClearStall+0x106>
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f6e:	82bb      	strh	r3, [r7, #20]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	441a      	add	r2, r3
 8007f7a:	8abb      	ldrh	r3, [r7, #20]
 8007f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa6:	827b      	strh	r3, [r7, #18]
 8007fa8:	8a7b      	ldrh	r3, [r7, #18]
 8007faa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007fae:	827b      	strh	r3, [r7, #18]
 8007fb0:	8a7b      	ldrh	r3, [r7, #18]
 8007fb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007fb6:	827b      	strh	r3, [r7, #18]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	8a7b      	ldrh	r3, [r7, #18]
 8007fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d103      	bne.n	8007ffe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2280      	movs	r2, #128	@ 0x80
 8007ffa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr

0800800a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr

0800801e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr

08008032 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008040:	b29b      	uxth	r3, r3
 8008042:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008044:	68fb      	ldr	r3, [r7, #12]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr

08008066 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008066:	b480      	push	{r7}
 8008068:	b08b      	sub	sp, #44	@ 0x2c
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	4611      	mov	r1, r2
 8008072:	461a      	mov	r2, r3
 8008074:	460b      	mov	r3, r1
 8008076:	80fb      	strh	r3, [r7, #6]
 8008078:	4613      	mov	r3, r2
 800807a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800807c:	88bb      	ldrh	r3, [r7, #4]
 800807e:	3301      	adds	r3, #1
 8008080:	085b      	lsrs	r3, r3, #1
 8008082:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800808c:	88fb      	ldrh	r3, [r7, #6]
 800808e:	005a      	lsls	r2, r3, #1
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008098:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
 800809e:	e01e      	b.n	80080de <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3301      	adds	r3, #1
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	b21a      	sxth	r2, r3
 80080b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	b21b      	sxth	r3, r3
 80080b8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	8a7a      	ldrh	r2, [r7, #18]
 80080be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	3302      	adds	r3, #2
 80080c4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	3302      	adds	r3, #2
 80080ca:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	3301      	adds	r3, #1
 80080d0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	3301      	adds	r3, #1
 80080d6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	3b01      	subs	r3, #1
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1dd      	bne.n	80080a0 <USB_WritePMA+0x3a>
  }
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	372c      	adds	r7, #44	@ 0x2c
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr

080080f0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b08b      	sub	sp, #44	@ 0x2c
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4611      	mov	r1, r2
 80080fc:	461a      	mov	r2, r3
 80080fe:	460b      	mov	r3, r1
 8008100:	80fb      	strh	r3, [r7, #6]
 8008102:	4613      	mov	r3, r2
 8008104:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008106:	88bb      	ldrh	r3, [r7, #4]
 8008108:	085b      	lsrs	r3, r3, #1
 800810a:	b29b      	uxth	r3, r3
 800810c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	005a      	lsls	r2, r3, #1
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008122:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
 8008128:	e01b      	b.n	8008162 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	3302      	adds	r3, #2
 8008136:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	b2da      	uxtb	r2, r3
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	3301      	adds	r3, #1
 8008144:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	0a1b      	lsrs	r3, r3, #8
 800814a:	b2da      	uxtb	r2, r3
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	3301      	adds	r3, #1
 8008154:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	3302      	adds	r3, #2
 800815a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	3b01      	subs	r3, #1
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e0      	bne.n	800812a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008168:	88bb      	ldrh	r3, [r7, #4]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	b29b      	uxth	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	b2da      	uxtb	r2, r3
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	701a      	strb	r2, [r3, #0]
  }
}
 8008184:	bf00      	nop
 8008186:	372c      	adds	r7, #44	@ 0x2c
 8008188:	46bd      	mov	sp, r7
 800818a:	bc80      	pop	{r7}
 800818c:	4770      	bx	lr

0800818e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7c1b      	ldrb	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d115      	bne.n	80081d2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081aa:	2202      	movs	r2, #2
 80081ac:	2181      	movs	r1, #129	@ 0x81
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 fe97 	bl	8009ee2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081be:	2202      	movs	r2, #2
 80081c0:	2101      	movs	r1, #1
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 fe8d 	bl	8009ee2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80081d0:	e012      	b.n	80081f8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081d2:	2340      	movs	r3, #64	@ 0x40
 80081d4:	2202      	movs	r2, #2
 80081d6:	2181      	movs	r1, #129	@ 0x81
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 fe82 	bl	8009ee2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081e4:	2340      	movs	r3, #64	@ 0x40
 80081e6:	2202      	movs	r2, #2
 80081e8:	2101      	movs	r1, #1
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 fe79 	bl	8009ee2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081f8:	2308      	movs	r3, #8
 80081fa:	2203      	movs	r2, #3
 80081fc:	2182      	movs	r1, #130	@ 0x82
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 fe6f 	bl	8009ee2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800820a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800820e:	f001 ff8f 	bl	800a130 <USBD_static_malloc>
 8008212:	4602      	mov	r2, r0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
 8008228:	e026      	b.n	8008278 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008230:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	7c1b      	ldrb	r3, [r3, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d109      	bne.n	8008268 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800825a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800825e:	2101      	movs	r1, #1
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 ff2e 	bl	800a0c2 <USBD_LL_PrepareReceive>
 8008266:	e007      	b.n	8008278 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800826e:	2340      	movs	r3, #64	@ 0x40
 8008270:	2101      	movs	r1, #1
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 ff25 	bl	800a0c2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	460b      	mov	r3, r1
 800828c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008292:	2181      	movs	r1, #129	@ 0x81
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 fe4a 	bl	8009f2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80082a0:	2101      	movs	r1, #1
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 fe43 	bl	8009f2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80082b0:	2182      	movs	r1, #130	@ 0x82
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 fe3b 	bl	8009f2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00e      	beq.n	80082e6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 ff35 	bl	800a148 <USBD_static_free>
    pdev->pClassData = NULL;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008300:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008316:	2b00      	cmp	r3, #0
 8008318:	d039      	beq.n	800838e <USBD_CDC_Setup+0x9e>
 800831a:	2b20      	cmp	r3, #32
 800831c:	d17f      	bne.n	800841e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d029      	beq.n	800837a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b25b      	sxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	da11      	bge.n	8008354 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800833c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	88d2      	ldrh	r2, [r2, #6]
 8008342:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008344:	6939      	ldr	r1, [r7, #16]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	88db      	ldrh	r3, [r3, #6]
 800834a:	461a      	mov	r2, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 fa05 	bl	800975c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008352:	e06b      	b.n	800842c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	785a      	ldrb	r2, [r3, #1]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	b2da      	uxtb	r2, r3
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800836a:	6939      	ldr	r1, [r7, #16]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	88db      	ldrh	r3, [r3, #6]
 8008370:	461a      	mov	r2, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fa20 	bl	80097b8 <USBD_CtlPrepareRx>
      break;
 8008378:	e058      	b.n	800842c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	7850      	ldrb	r0, [r2, #1]
 8008386:	2200      	movs	r2, #0
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	4798      	blx	r3
      break;
 800838c:	e04e      	b.n	800842c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	2b0b      	cmp	r3, #11
 8008394:	d02e      	beq.n	80083f4 <USBD_CDC_Setup+0x104>
 8008396:	2b0b      	cmp	r3, #11
 8008398:	dc38      	bgt.n	800840c <USBD_CDC_Setup+0x11c>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <USBD_CDC_Setup+0xb4>
 800839e:	2b0a      	cmp	r3, #10
 80083a0:	d014      	beq.n	80083cc <USBD_CDC_Setup+0xdc>
 80083a2:	e033      	b.n	800840c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d107      	bne.n	80083be <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	2202      	movs	r2, #2
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 f9d0 	bl	800975c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083bc:	e02e      	b.n	800841c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 f961 	bl	8009688 <USBD_CtlError>
            ret = USBD_FAIL;
 80083c6:	2302      	movs	r3, #2
 80083c8:	75fb      	strb	r3, [r7, #23]
          break;
 80083ca:	e027      	b.n	800841c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d107      	bne.n	80083e6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80083d6:	f107 030f 	add.w	r3, r7, #15
 80083da:	2201      	movs	r2, #1
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 f9bc 	bl	800975c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083e4:	e01a      	b.n	800841c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 f94d 	bl	8009688 <USBD_CtlError>
            ret = USBD_FAIL;
 80083ee:	2302      	movs	r3, #2
 80083f0:	75fb      	strb	r3, [r7, #23]
          break;
 80083f2:	e013      	b.n	800841c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d00d      	beq.n	800841a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 f941 	bl	8009688 <USBD_CtlError>
            ret = USBD_FAIL;
 8008406:	2302      	movs	r3, #2
 8008408:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800840a:	e006      	b.n	800841a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 f93a 	bl	8009688 <USBD_CtlError>
          ret = USBD_FAIL;
 8008414:	2302      	movs	r3, #2
 8008416:	75fb      	strb	r3, [r7, #23]
          break;
 8008418:	e000      	b.n	800841c <USBD_CDC_Setup+0x12c>
          break;
 800841a:	bf00      	nop
      }
      break;
 800841c:	e006      	b.n	800842c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f931 	bl	8009688 <USBD_CtlError>
      ret = USBD_FAIL;
 8008426:	2302      	movs	r3, #2
 8008428:	75fb      	strb	r3, [r7, #23]
      break;
 800842a:	bf00      	nop
  }

  return ret;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008448:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008450:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008458:	2b00      	cmp	r3, #0
 800845a:	d03a      	beq.n	80084d2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800845c:	78fa      	ldrb	r2, [r7, #3]
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	331c      	adds	r3, #28
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d029      	beq.n	80084c6 <USBD_CDC_DataIn+0x90>
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	331c      	adds	r3, #28
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	78f9      	ldrb	r1, [r7, #3]
 8008486:	68b8      	ldr	r0, [r7, #8]
 8008488:	460b      	mov	r3, r1
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	4403      	add	r3, r0
 8008492:	3320      	adds	r3, #32
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	fbb2 f1f3 	udiv	r1, r2, r3
 800849a:	fb01 f303 	mul.w	r3, r1, r3
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d110      	bne.n	80084c6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	331c      	adds	r3, #28
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084b8:	78f9      	ldrb	r1, [r7, #3]
 80084ba:	2300      	movs	r3, #0
 80084bc:	2200      	movs	r2, #0
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 fddc 	bl	800a07c <USBD_LL_Transmit>
 80084c4:	e003      	b.n	80084ce <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e000      	b.n	80084d4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80084d2:	2302      	movs	r3, #2
  }
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 fe07 	bl	800a108 <USBD_LL_GetRxDataSize>
 80084fa:	4602      	mov	r2, r0
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00d      	beq.n	8008528 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008520:	4611      	mov	r1, r2
 8008522:	4798      	blx	r3

    return USBD_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	e000      	b.n	800852a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008528:	2302      	movs	r3, #2
  }
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008540:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008548:	2b00      	cmp	r3, #0
 800854a:	d014      	beq.n	8008576 <USBD_CDC_EP0_RxReady+0x44>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008552:	2bff      	cmp	r3, #255	@ 0xff
 8008554:	d00f      	beq.n	8008576 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008564:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800856c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	22ff      	movs	r2, #255	@ 0xff
 8008572:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2243      	movs	r2, #67	@ 0x43
 800858c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800858e:	4b03      	ldr	r3, [pc, #12]	@ (800859c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	20000094 	.word	0x20000094

080085a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2243      	movs	r2, #67	@ 0x43
 80085ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80085ae:	4b03      	ldr	r3, [pc, #12]	@ (80085bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	20000050 	.word	0x20000050

080085c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2243      	movs	r2, #67	@ 0x43
 80085cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80085ce:	4b03      	ldr	r3, [pc, #12]	@ (80085dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	200000d8 	.word	0x200000d8

080085e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	220a      	movs	r2, #10
 80085ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80085ee:	4b03      	ldr	r3, [pc, #12]	@ (80085fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	2000000c 	.word	0x2000000c

08008600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800860a:	2302      	movs	r3, #2
 800860c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr

0800862c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008640:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800864a:	88fa      	ldrh	r2, [r7, #6]
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	371c      	adds	r7, #28
 8008658:	46bd      	mov	sp, r7
 800865a:	bc80      	pop	{r7}
 800865c:	4770      	bx	lr

0800865e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800865e:	b480      	push	{r7}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800866e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008692:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d01c      	beq.n	80086d8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d115      	bne.n	80086d4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	2181      	movs	r1, #129	@ 0x81
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 fcd6 	bl	800a07c <USBD_LL_Transmit>

      return USBD_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	e002      	b.n	80086da <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80086d8:	2302      	movs	r3, #2
  }
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d017      	beq.n	800872c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7c1b      	ldrb	r3, [r3, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800870a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800870e:	2101      	movs	r1, #1
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 fcd6 	bl	800a0c2 <USBD_LL_PrepareReceive>
 8008716:	e007      	b.n	8008728 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800871e:	2340      	movs	r3, #64	@ 0x40
 8008720:	2101      	movs	r1, #1
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fccd 	bl	800a0c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	e000      	b.n	800872e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800872c:	2302      	movs	r3, #2
  }
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	4613      	mov	r3, r2
 8008742:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800874a:	2302      	movs	r3, #2
 800874c:	e01a      	b.n	8008784 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	79fa      	ldrb	r2, [r7, #7]
 800877a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f001 fb3b 	bl	8009df8 <USBD_LL_Init>

  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d006      	beq.n	80087ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]
 80087ac:	e001      	b.n	80087b2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80087ae:	2302      	movs	r3, #2
 80087b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fb70 	bl	8009eac <USBD_LL_Start>

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr

080087ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	460b      	mov	r3, r1
 80087f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80087f6:	2302      	movs	r3, #2
 80087f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00c      	beq.n	800881e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	4611      	mov	r1, r2
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	4798      	blx	r3
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	78fa      	ldrb	r2, [r7, #3]
 800883e:	4611      	mov	r1, r2
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f000 fed8 	bl	8009616 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008874:	461a      	mov	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008882:	f003 031f 	and.w	r3, r3, #31
 8008886:	2b02      	cmp	r3, #2
 8008888:	d016      	beq.n	80088b8 <USBD_LL_SetupStage+0x6a>
 800888a:	2b02      	cmp	r3, #2
 800888c:	d81c      	bhi.n	80088c8 <USBD_LL_SetupStage+0x7a>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <USBD_LL_SetupStage+0x4a>
 8008892:	2b01      	cmp	r3, #1
 8008894:	d008      	beq.n	80088a8 <USBD_LL_SetupStage+0x5a>
 8008896:	e017      	b.n	80088c8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f9cb 	bl	8008c3c <USBD_StdDevReq>
      break;
 80088a6:	e01a      	b.n	80088de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fa2d 	bl	8008d10 <USBD_StdItfReq>
      break;
 80088b6:	e012      	b.n	80088de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa6d 	bl	8008da0 <USBD_StdEPReq>
      break;
 80088c6:	e00a      	b.n	80088de <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80088ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 fb48 	bl	8009f6c <USBD_LL_StallEP>
      break;
 80088dc:	bf00      	nop
  }

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	460b      	mov	r3, r1
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088f6:	7afb      	ldrb	r3, [r7, #11]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d14b      	bne.n	8008994 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008902:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800890a:	2b03      	cmp	r3, #3
 800890c:	d134      	bne.n	8008978 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	429a      	cmp	r2, r3
 8008918:	d919      	bls.n	800894e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008930:	429a      	cmp	r2, r3
 8008932:	d203      	bcs.n	800893c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008938:	b29b      	uxth	r3, r3
 800893a:	e002      	b.n	8008942 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008940:	b29b      	uxth	r3, r3
 8008942:	461a      	mov	r2, r3
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 ff54 	bl	80097f4 <USBD_CtlContinueRx>
 800894c:	e038      	b.n	80089c0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008960:	2b03      	cmp	r3, #3
 8008962:	d105      	bne.n	8008970 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 ff51 	bl	8009818 <USBD_CtlSendStatus>
 8008976:	e023      	b.n	80089c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800897e:	2b05      	cmp	r3, #5
 8008980:	d11e      	bne.n	80089c0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800898a:	2100      	movs	r1, #0
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f001 faed 	bl	8009f6c <USBD_LL_StallEP>
 8008992:	e015      	b.n	80089c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00d      	beq.n	80089bc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d108      	bne.n	80089bc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	7afa      	ldrb	r2, [r7, #11]
 80089b4:	4611      	mov	r1, r2
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	4798      	blx	r3
 80089ba:	e001      	b.n	80089c0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089bc:	2302      	movs	r3, #2
 80089be:	e000      	b.n	80089c2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b086      	sub	sp, #24
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	460b      	mov	r3, r1
 80089d4:	607a      	str	r2, [r7, #4]
 80089d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089d8:	7afb      	ldrb	r3, [r7, #11]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d17f      	bne.n	8008ade <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3314      	adds	r3, #20
 80089e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d15c      	bne.n	8008aa8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d915      	bls.n	8008a26 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	1ad2      	subs	r2, r2, r3
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	461a      	mov	r2, r3
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 febe 	bl	8009794 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f001 fb4f 	bl	800a0c2 <USBD_LL_PrepareReceive>
 8008a24:	e04e      	b.n	8008ac4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	6912      	ldr	r2, [r2, #16]
 8008a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a32:	fb01 f202 	mul.w	r2, r1, r2
 8008a36:	1a9b      	subs	r3, r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11c      	bne.n	8008a76 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d316      	bcc.n	8008a76 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d20f      	bcs.n	8008a76 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a56:	2200      	movs	r2, #0
 8008a58:	2100      	movs	r1, #0
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fe9a 	bl	8009794 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f001 fb27 	bl	800a0c2 <USBD_LL_PrepareReceive>
 8008a74:	e026      	b.n	8008ac4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d105      	bne.n	8008a98 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008a98:	2180      	movs	r1, #128	@ 0x80
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f001 fa66 	bl	8009f6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 fecc 	bl	800983e <USBD_CtlReceiveStatus>
 8008aa6:	e00d      	b.n	8008ac4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d004      	beq.n	8008abc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d103      	bne.n	8008ac4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008abc:	2180      	movs	r1, #128	@ 0x80
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f001 fa54 	bl	8009f6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d11d      	bne.n	8008b0a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7ff fe81 	bl	80087d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008adc:	e015      	b.n	8008b0a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00d      	beq.n	8008b06 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d108      	bne.n	8008b06 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	7afa      	ldrb	r2, [r7, #11]
 8008afe:	4611      	mov	r1, r2
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	4798      	blx	r3
 8008b04:	e001      	b.n	8008b0a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b06:	2302      	movs	r3, #2
 8008b08:	e000      	b.n	8008b0c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b1c:	2340      	movs	r3, #64	@ 0x40
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2100      	movs	r1, #0
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 f9dd 	bl	8009ee2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2240      	movs	r2, #64	@ 0x40
 8008b34:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b38:	2340      	movs	r3, #64	@ 0x40
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2180      	movs	r1, #128	@ 0x80
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 f9cf 	bl	8009ee2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2240      	movs	r2, #64	@ 0x40
 8008b4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d009      	beq.n	8008b8c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6852      	ldr	r2, [r2, #4]
 8008b84:	b2d2      	uxtb	r2, r2
 8008b86:	4611      	mov	r1, r2
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	4798      	blx	r3
  }

  return USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	78fa      	ldrb	r2, [r7, #3]
 8008ba6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bc80      	pop	{r7}
 8008bb2:	4770      	bx	lr

08008bb4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2204      	movs	r2, #4
 8008bcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr

08008bdc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d105      	bne.n	8008bfa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr

08008c06 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d10b      	bne.n	8008c30 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c52:	2b40      	cmp	r3, #64	@ 0x40
 8008c54:	d005      	beq.n	8008c62 <USBD_StdDevReq+0x26>
 8008c56:	2b40      	cmp	r3, #64	@ 0x40
 8008c58:	d84f      	bhi.n	8008cfa <USBD_StdDevReq+0xbe>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d009      	beq.n	8008c72 <USBD_StdDevReq+0x36>
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d14b      	bne.n	8008cfa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
      break;
 8008c70:	e048      	b.n	8008d04 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	2b09      	cmp	r3, #9
 8008c78:	d839      	bhi.n	8008cee <USBD_StdDevReq+0xb2>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <USBD_StdDevReq+0x44>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008cd1 	.word	0x08008cd1
 8008c84:	08008ce5 	.word	0x08008ce5
 8008c88:	08008cef 	.word	0x08008cef
 8008c8c:	08008cdb 	.word	0x08008cdb
 8008c90:	08008cef 	.word	0x08008cef
 8008c94:	08008cb3 	.word	0x08008cb3
 8008c98:	08008ca9 	.word	0x08008ca9
 8008c9c:	08008cef 	.word	0x08008cef
 8008ca0:	08008cc7 	.word	0x08008cc7
 8008ca4:	08008cbd 	.word	0x08008cbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f9dc 	bl	8009068 <USBD_GetDescriptor>
          break;
 8008cb0:	e022      	b.n	8008cf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fb3f 	bl	8009338 <USBD_SetAddress>
          break;
 8008cba:	e01d      	b.n	8008cf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fb7e 	bl	80093c0 <USBD_SetConfig>
          break;
 8008cc4:	e018      	b.n	8008cf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fc07 	bl	80094dc <USBD_GetConfig>
          break;
 8008cce:	e013      	b.n	8008cf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fc37 	bl	8009546 <USBD_GetStatus>
          break;
 8008cd8:	e00e      	b.n	8008cf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fc65 	bl	80095ac <USBD_SetFeature>
          break;
 8008ce2:	e009      	b.n	8008cf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fc74 	bl	80095d4 <USBD_ClrFeature>
          break;
 8008cec:	e004      	b.n	8008cf8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fcc9 	bl	8009688 <USBD_CtlError>
          break;
 8008cf6:	bf00      	nop
      }
      break;
 8008cf8:	e004      	b.n	8008d04 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fcc3 	bl	8009688 <USBD_CtlError>
      break;
 8008d02:	bf00      	nop
  }

  return ret;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop

08008d10 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d26:	2b40      	cmp	r3, #64	@ 0x40
 8008d28:	d005      	beq.n	8008d36 <USBD_StdItfReq+0x26>
 8008d2a:	2b40      	cmp	r3, #64	@ 0x40
 8008d2c:	d82e      	bhi.n	8008d8c <USBD_StdItfReq+0x7c>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <USBD_StdItfReq+0x26>
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	d12a      	bne.n	8008d8c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d81d      	bhi.n	8008d7e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	889b      	ldrh	r3, [r3, #4]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d813      	bhi.n	8008d74 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	88db      	ldrh	r3, [r3, #6]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d110      	bne.n	8008d88 <USBD_StdItfReq+0x78>
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10d      	bne.n	8008d88 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fd53 	bl	8009818 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d72:	e009      	b.n	8008d88 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fc86 	bl	8009688 <USBD_CtlError>
          break;
 8008d7c:	e004      	b.n	8008d88 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fc81 	bl	8009688 <USBD_CtlError>
          break;
 8008d86:	e000      	b.n	8008d8a <USBD_StdItfReq+0x7a>
          break;
 8008d88:	bf00      	nop
      }
      break;
 8008d8a:	e004      	b.n	8008d96 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fc7a 	bl	8009688 <USBD_CtlError>
      break;
 8008d94:	bf00      	nop
  }

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	889b      	ldrh	r3, [r3, #4]
 8008db2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dbc:	2b40      	cmp	r3, #64	@ 0x40
 8008dbe:	d007      	beq.n	8008dd0 <USBD_StdEPReq+0x30>
 8008dc0:	2b40      	cmp	r3, #64	@ 0x40
 8008dc2:	f200 8146 	bhi.w	8009052 <USBD_StdEPReq+0x2b2>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <USBD_StdEPReq+0x40>
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	f040 8141 	bne.w	8009052 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	4798      	blx	r3
      break;
 8008dde:	e13d      	b.n	800905c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d10a      	bne.n	8008e02 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	e12d      	b.n	800905e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	785b      	ldrb	r3, [r3, #1]
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d007      	beq.n	8008e1a <USBD_StdEPReq+0x7a>
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	f300 811b 	bgt.w	8009046 <USBD_StdEPReq+0x2a6>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d072      	beq.n	8008efa <USBD_StdEPReq+0x15a>
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d03a      	beq.n	8008e8e <USBD_StdEPReq+0xee>
 8008e18:	e115      	b.n	8009046 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d002      	beq.n	8008e2a <USBD_StdEPReq+0x8a>
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d015      	beq.n	8008e54 <USBD_StdEPReq+0xb4>
 8008e28:	e02b      	b.n	8008e82 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00c      	beq.n	8008e4a <USBD_StdEPReq+0xaa>
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	2b80      	cmp	r3, #128	@ 0x80
 8008e34:	d009      	beq.n	8008e4a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 f896 	bl	8009f6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e40:	2180      	movs	r1, #128	@ 0x80
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 f892 	bl	8009f6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e48:	e020      	b.n	8008e8c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fc1b 	bl	8009688 <USBD_CtlError>
              break;
 8008e52:	e01b      	b.n	8008e8c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	885b      	ldrh	r3, [r3, #2]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10e      	bne.n	8008e7a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00b      	beq.n	8008e7a <USBD_StdEPReq+0xda>
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	2b80      	cmp	r3, #128	@ 0x80
 8008e66:	d008      	beq.n	8008e7a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	88db      	ldrh	r3, [r3, #6]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d104      	bne.n	8008e7a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 f879 	bl	8009f6c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fccc 	bl	8009818 <USBD_CtlSendStatus>

              break;
 8008e80:	e004      	b.n	8008e8c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fbff 	bl	8009688 <USBD_CtlError>
              break;
 8008e8a:	bf00      	nop
          }
          break;
 8008e8c:	e0e0      	b.n	8009050 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d002      	beq.n	8008e9e <USBD_StdEPReq+0xfe>
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d015      	beq.n	8008ec8 <USBD_StdEPReq+0x128>
 8008e9c:	e026      	b.n	8008eec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00c      	beq.n	8008ebe <USBD_StdEPReq+0x11e>
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	2b80      	cmp	r3, #128	@ 0x80
 8008ea8:	d009      	beq.n	8008ebe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 f85c 	bl	8009f6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008eb4:	2180      	movs	r1, #128	@ 0x80
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 f858 	bl	8009f6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ebc:	e01c      	b.n	8008ef8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fbe1 	bl	8009688 <USBD_CtlError>
              break;
 8008ec6:	e017      	b.n	8008ef8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	885b      	ldrh	r3, [r3, #2]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d112      	bne.n	8008ef6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d004      	beq.n	8008ee4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 f863 	bl	8009faa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fc97 	bl	8009818 <USBD_CtlSendStatus>
              }
              break;
 8008eea:	e004      	b.n	8008ef6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fbca 	bl	8009688 <USBD_CtlError>
              break;
 8008ef4:	e000      	b.n	8008ef8 <USBD_StdEPReq+0x158>
              break;
 8008ef6:	bf00      	nop
          }
          break;
 8008ef8:	e0aa      	b.n	8009050 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d002      	beq.n	8008f0a <USBD_StdEPReq+0x16a>
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d032      	beq.n	8008f6e <USBD_StdEPReq+0x1ce>
 8008f08:	e097      	b.n	800903a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d007      	beq.n	8008f20 <USBD_StdEPReq+0x180>
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	2b80      	cmp	r3, #128	@ 0x80
 8008f14:	d004      	beq.n	8008f20 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fbb5 	bl	8009688 <USBD_CtlError>
                break;
 8008f1e:	e091      	b.n	8009044 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	da0b      	bge.n	8008f40 <USBD_StdEPReq+0x1a0>
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	3310      	adds	r3, #16
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	e00b      	b.n	8008f58 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	4413      	add	r3, r2
 8008f56:	3304      	adds	r3, #4
 8008f58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2202      	movs	r2, #2
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fbf8 	bl	800975c <USBD_CtlSendData>
              break;
 8008f6c:	e06a      	b.n	8009044 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	da11      	bge.n	8008f9a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	f003 020f 	and.w	r2, r3, #15
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	440b      	add	r3, r1
 8008f88:	3318      	adds	r3, #24
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d117      	bne.n	8008fc0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fb78 	bl	8009688 <USBD_CtlError>
                  break;
 8008f98:	e054      	b.n	8009044 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	f003 020f 	and.w	r2, r3, #15
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	440b      	add	r3, r1
 8008fac:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb65 	bl	8009688 <USBD_CtlError>
                  break;
 8008fbe:	e041      	b.n	8009044 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da0b      	bge.n	8008fe0 <USBD_StdEPReq+0x240>
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	3310      	adds	r3, #16
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	4413      	add	r3, r2
 8008fdc:	3304      	adds	r3, #4
 8008fde:	e00b      	b.n	8008ff8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <USBD_StdEPReq+0x266>
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	2b80      	cmp	r3, #128	@ 0x80
 8009004:	d103      	bne.n	800900e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	e00e      	b.n	800902c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 ffe8 	bl	8009fe8 <USBD_LL_IsStallEP>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2201      	movs	r2, #1
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	e002      	b.n	800902c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2202      	movs	r2, #2
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb92 	bl	800975c <USBD_CtlSendData>
              break;
 8009038:	e004      	b.n	8009044 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fb23 	bl	8009688 <USBD_CtlError>
              break;
 8009042:	bf00      	nop
          }
          break;
 8009044:	e004      	b.n	8009050 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fb1d 	bl	8009688 <USBD_CtlError>
          break;
 800904e:	bf00      	nop
      }
      break;
 8009050:	e004      	b.n	800905c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fb17 	bl	8009688 <USBD_CtlError>
      break;
 800905a:	bf00      	nop
  }

  return ret;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	885b      	ldrh	r3, [r3, #2]
 8009082:	0a1b      	lsrs	r3, r3, #8
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	2b06      	cmp	r3, #6
 800908a:	f200 8128 	bhi.w	80092de <USBD_GetDescriptor+0x276>
 800908e:	a201      	add	r2, pc, #4	@ (adr r2, 8009094 <USBD_GetDescriptor+0x2c>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090b1 	.word	0x080090b1
 8009098:	080090c9 	.word	0x080090c9
 800909c:	08009109 	.word	0x08009109
 80090a0:	080092df 	.word	0x080092df
 80090a4:	080092df 	.word	0x080092df
 80090a8:	0800927f 	.word	0x0800927f
 80090ac:	080092ab 	.word	0x080092ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	7c12      	ldrb	r2, [r2, #16]
 80090bc:	f107 0108 	add.w	r1, r7, #8
 80090c0:	4610      	mov	r0, r2
 80090c2:	4798      	blx	r3
 80090c4:	60f8      	str	r0, [r7, #12]
      break;
 80090c6:	e112      	b.n	80092ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	7c1b      	ldrb	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10d      	bne.n	80090ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d8:	f107 0208 	add.w	r2, r7, #8
 80090dc:	4610      	mov	r0, r2
 80090de:	4798      	blx	r3
 80090e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3301      	adds	r3, #1
 80090e6:	2202      	movs	r2, #2
 80090e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090ea:	e100      	b.n	80092ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f4:	f107 0208 	add.w	r2, r7, #8
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3301      	adds	r3, #1
 8009102:	2202      	movs	r2, #2
 8009104:	701a      	strb	r2, [r3, #0]
      break;
 8009106:	e0f2      	b.n	80092ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	885b      	ldrh	r3, [r3, #2]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b05      	cmp	r3, #5
 8009110:	f200 80ac 	bhi.w	800926c <USBD_GetDescriptor+0x204>
 8009114:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <USBD_GetDescriptor+0xb4>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	08009135 	.word	0x08009135
 8009120:	08009169 	.word	0x08009169
 8009124:	0800919d 	.word	0x0800919d
 8009128:	080091d1 	.word	0x080091d1
 800912c:	08009205 	.word	0x08009205
 8009130:	08009239 	.word	0x08009239
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00b      	beq.n	8009158 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	7c12      	ldrb	r2, [r2, #16]
 800914c:	f107 0108 	add.w	r1, r7, #8
 8009150:	4610      	mov	r0, r2
 8009152:	4798      	blx	r3
 8009154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009156:	e091      	b.n	800927c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fa94 	bl	8009688 <USBD_CtlError>
            err++;
 8009160:	7afb      	ldrb	r3, [r7, #11]
 8009162:	3301      	adds	r3, #1
 8009164:	72fb      	strb	r3, [r7, #11]
          break;
 8009166:	e089      	b.n	800927c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	7c12      	ldrb	r2, [r2, #16]
 8009180:	f107 0108 	add.w	r1, r7, #8
 8009184:	4610      	mov	r0, r2
 8009186:	4798      	blx	r3
 8009188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800918a:	e077      	b.n	800927c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fa7a 	bl	8009688 <USBD_CtlError>
            err++;
 8009194:	7afb      	ldrb	r3, [r7, #11]
 8009196:	3301      	adds	r3, #1
 8009198:	72fb      	strb	r3, [r7, #11]
          break;
 800919a:	e06f      	b.n	800927c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00b      	beq.n	80091c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	7c12      	ldrb	r2, [r2, #16]
 80091b4:	f107 0108 	add.w	r1, r7, #8
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
 80091bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091be:	e05d      	b.n	800927c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa60 	bl	8009688 <USBD_CtlError>
            err++;
 80091c8:	7afb      	ldrb	r3, [r7, #11]
 80091ca:	3301      	adds	r3, #1
 80091cc:	72fb      	strb	r3, [r7, #11]
          break;
 80091ce:	e055      	b.n	800927c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00b      	beq.n	80091f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	7c12      	ldrb	r2, [r2, #16]
 80091e8:	f107 0108 	add.w	r1, r7, #8
 80091ec:	4610      	mov	r0, r2
 80091ee:	4798      	blx	r3
 80091f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091f2:	e043      	b.n	800927c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fa46 	bl	8009688 <USBD_CtlError>
            err++;
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	3301      	adds	r3, #1
 8009200:	72fb      	strb	r3, [r7, #11]
          break;
 8009202:	e03b      	b.n	800927c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00b      	beq.n	8009228 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	7c12      	ldrb	r2, [r2, #16]
 800921c:	f107 0108 	add.w	r1, r7, #8
 8009220:	4610      	mov	r0, r2
 8009222:	4798      	blx	r3
 8009224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009226:	e029      	b.n	800927c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa2c 	bl	8009688 <USBD_CtlError>
            err++;
 8009230:	7afb      	ldrb	r3, [r7, #11]
 8009232:	3301      	adds	r3, #1
 8009234:	72fb      	strb	r3, [r7, #11]
          break;
 8009236:	e021      	b.n	800927c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00b      	beq.n	800925c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	7c12      	ldrb	r2, [r2, #16]
 8009250:	f107 0108 	add.w	r1, r7, #8
 8009254:	4610      	mov	r0, r2
 8009256:	4798      	blx	r3
 8009258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800925a:	e00f      	b.n	800927c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fa12 	bl	8009688 <USBD_CtlError>
            err++;
 8009264:	7afb      	ldrb	r3, [r7, #11]
 8009266:	3301      	adds	r3, #1
 8009268:	72fb      	strb	r3, [r7, #11]
          break;
 800926a:	e007      	b.n	800927c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fa0a 	bl	8009688 <USBD_CtlError>
          err++;
 8009274:	7afb      	ldrb	r3, [r7, #11]
 8009276:	3301      	adds	r3, #1
 8009278:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800927a:	e038      	b.n	80092ee <USBD_GetDescriptor+0x286>
 800927c:	e037      	b.n	80092ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7c1b      	ldrb	r3, [r3, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d109      	bne.n	800929a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800928c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800928e:	f107 0208 	add.w	r2, r7, #8
 8009292:	4610      	mov	r0, r2
 8009294:	4798      	blx	r3
 8009296:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009298:	e029      	b.n	80092ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f9f3 	bl	8009688 <USBD_CtlError>
        err++;
 80092a2:	7afb      	ldrb	r3, [r7, #11]
 80092a4:	3301      	adds	r3, #1
 80092a6:	72fb      	strb	r3, [r7, #11]
      break;
 80092a8:	e021      	b.n	80092ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	7c1b      	ldrb	r3, [r3, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10d      	bne.n	80092ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ba:	f107 0208 	add.w	r2, r7, #8
 80092be:	4610      	mov	r0, r2
 80092c0:	4798      	blx	r3
 80092c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3301      	adds	r3, #1
 80092c8:	2207      	movs	r2, #7
 80092ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092cc:	e00f      	b.n	80092ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f9d9 	bl	8009688 <USBD_CtlError>
        err++;
 80092d6:	7afb      	ldrb	r3, [r7, #11]
 80092d8:	3301      	adds	r3, #1
 80092da:	72fb      	strb	r3, [r7, #11]
      break;
 80092dc:	e007      	b.n	80092ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f9d1 	bl	8009688 <USBD_CtlError>
      err++;
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	3301      	adds	r3, #1
 80092ea:	72fb      	strb	r3, [r7, #11]
      break;
 80092ec:	bf00      	nop
  }

  if (err != 0U)
 80092ee:	7afb      	ldrb	r3, [r7, #11]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d11c      	bne.n	800932e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80092f4:	893b      	ldrh	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d011      	beq.n	800931e <USBD_GetDescriptor+0x2b6>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	88db      	ldrh	r3, [r3, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00d      	beq.n	800931e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	88da      	ldrh	r2, [r3, #6]
 8009306:	893b      	ldrh	r3, [r7, #8]
 8009308:	4293      	cmp	r3, r2
 800930a:	bf28      	it	cs
 800930c:	4613      	movcs	r3, r2
 800930e:	b29b      	uxth	r3, r3
 8009310:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009312:	893b      	ldrh	r3, [r7, #8]
 8009314:	461a      	mov	r2, r3
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fa1f 	bl	800975c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	88db      	ldrh	r3, [r3, #6]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa76 	bl	8009818 <USBD_CtlSendStatus>
 800932c:	e000      	b.n	8009330 <USBD_GetDescriptor+0x2c8>
    return;
 800932e:	bf00      	nop
    }
  }
}
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop

08009338 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	889b      	ldrh	r3, [r3, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d130      	bne.n	80093ac <USBD_SetAddress+0x74>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	88db      	ldrh	r3, [r3, #6]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d12c      	bne.n	80093ac <USBD_SetAddress+0x74>
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	885b      	ldrh	r3, [r3, #2]
 8009356:	2b7f      	cmp	r3, #127	@ 0x7f
 8009358:	d828      	bhi.n	80093ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	885b      	ldrh	r3, [r3, #2]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009364:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800936c:	2b03      	cmp	r3, #3
 800936e:	d104      	bne.n	800937a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f988 	bl	8009688 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009378:	e01d      	b.n	80093b6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7bfa      	ldrb	r2, [r7, #15]
 800937e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fe59 	bl	800a03e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fa43 	bl	8009818 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d004      	beq.n	80093a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a0:	e009      	b.n	80093b6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093aa:	e004      	b.n	80093b6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f96a 	bl	8009688 <USBD_CtlError>
  }
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	885b      	ldrh	r3, [r3, #2]
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	4b41      	ldr	r3, [pc, #260]	@ (80094d8 <USBD_SetConfig+0x118>)
 80093d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093d4:	4b40      	ldr	r3, [pc, #256]	@ (80094d8 <USBD_SetConfig+0x118>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d904      	bls.n	80093e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f952 	bl	8009688 <USBD_CtlError>
 80093e4:	e075      	b.n	80094d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d002      	beq.n	80093f6 <USBD_SetConfig+0x36>
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d023      	beq.n	800943c <USBD_SetConfig+0x7c>
 80093f4:	e062      	b.n	80094bc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80093f6:	4b38      	ldr	r3, [pc, #224]	@ (80094d8 <USBD_SetConfig+0x118>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d01a      	beq.n	8009434 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80093fe:	4b36      	ldr	r3, [pc, #216]	@ (80094d8 <USBD_SetConfig+0x118>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2203      	movs	r2, #3
 800940c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009410:	4b31      	ldr	r3, [pc, #196]	@ (80094d8 <USBD_SetConfig+0x118>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff f9e7 	bl	80087ea <USBD_SetClassConfig>
 800941c:	4603      	mov	r3, r0
 800941e:	2b02      	cmp	r3, #2
 8009420:	d104      	bne.n	800942c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f92f 	bl	8009688 <USBD_CtlError>
            return;
 800942a:	e052      	b.n	80094d2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f9f3 	bl	8009818 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009432:	e04e      	b.n	80094d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9ef 	bl	8009818 <USBD_CtlSendStatus>
        break;
 800943a:	e04a      	b.n	80094d2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800943c:	4b26      	ldr	r3, [pc, #152]	@ (80094d8 <USBD_SetConfig+0x118>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d112      	bne.n	800946a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800944c:	4b22      	ldr	r3, [pc, #136]	@ (80094d8 <USBD_SetConfig+0x118>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009456:	4b20      	ldr	r3, [pc, #128]	@ (80094d8 <USBD_SetConfig+0x118>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff f9e3 	bl	8008828 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f9d8 	bl	8009818 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009468:	e033      	b.n	80094d2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800946a:	4b1b      	ldr	r3, [pc, #108]	@ (80094d8 <USBD_SetConfig+0x118>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	429a      	cmp	r2, r3
 8009476:	d01d      	beq.n	80094b4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	b2db      	uxtb	r3, r3
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff f9d1 	bl	8008828 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009486:	4b14      	ldr	r3, [pc, #80]	@ (80094d8 <USBD_SetConfig+0x118>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009490:	4b11      	ldr	r3, [pc, #68]	@ (80094d8 <USBD_SetConfig+0x118>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff f9a7 	bl	80087ea <USBD_SetClassConfig>
 800949c:	4603      	mov	r3, r0
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d104      	bne.n	80094ac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f8ef 	bl	8009688 <USBD_CtlError>
            return;
 80094aa:	e012      	b.n	80094d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f9b3 	bl	8009818 <USBD_CtlSendStatus>
        break;
 80094b2:	e00e      	b.n	80094d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f9af 	bl	8009818 <USBD_CtlSendStatus>
        break;
 80094ba:	e00a      	b.n	80094d2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f8e2 	bl	8009688 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80094c4:	4b04      	ldr	r3, [pc, #16]	@ (80094d8 <USBD_SetConfig+0x118>)
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	4619      	mov	r1, r3
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff f9ac 	bl	8008828 <USBD_ClrClassConfig>
        break;
 80094d0:	bf00      	nop
    }
  }
}
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	200003c4 	.word	0x200003c4

080094dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	88db      	ldrh	r3, [r3, #6]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d004      	beq.n	80094f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f8c9 	bl	8009688 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094f6:	e022      	b.n	800953e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094fe:	2b02      	cmp	r3, #2
 8009500:	dc02      	bgt.n	8009508 <USBD_GetConfig+0x2c>
 8009502:	2b00      	cmp	r3, #0
 8009504:	dc03      	bgt.n	800950e <USBD_GetConfig+0x32>
 8009506:	e015      	b.n	8009534 <USBD_GetConfig+0x58>
 8009508:	2b03      	cmp	r3, #3
 800950a:	d00b      	beq.n	8009524 <USBD_GetConfig+0x48>
 800950c:	e012      	b.n	8009534 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3308      	adds	r3, #8
 8009518:	2201      	movs	r2, #1
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f91d 	bl	800975c <USBD_CtlSendData>
        break;
 8009522:	e00c      	b.n	800953e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3304      	adds	r3, #4
 8009528:	2201      	movs	r2, #1
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f915 	bl	800975c <USBD_CtlSendData>
        break;
 8009532:	e004      	b.n	800953e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f8a6 	bl	8009688 <USBD_CtlError>
        break;
 800953c:	bf00      	nop
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009556:	3b01      	subs	r3, #1
 8009558:	2b02      	cmp	r3, #2
 800955a:	d81e      	bhi.n	800959a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	88db      	ldrh	r3, [r3, #6]
 8009560:	2b02      	cmp	r3, #2
 8009562:	d004      	beq.n	800956e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f88e 	bl	8009688 <USBD_CtlError>
        break;
 800956c:	e01a      	b.n	80095a4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800957a:	2b00      	cmp	r3, #0
 800957c:	d005      	beq.n	800958a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f043 0202 	orr.w	r2, r3, #2
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	330c      	adds	r3, #12
 800958e:	2202      	movs	r2, #2
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f8e2 	bl	800975c <USBD_CtlSendData>
      break;
 8009598:	e004      	b.n	80095a4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f873 	bl	8009688 <USBD_CtlError>
      break;
 80095a2:	bf00      	nop
  }
}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	885b      	ldrh	r3, [r3, #2]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d106      	bne.n	80095cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f926 	bl	8009818 <USBD_CtlSendStatus>
  }
}
 80095cc:	bf00      	nop
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e4:	3b01      	subs	r3, #1
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d80b      	bhi.n	8009602 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	885b      	ldrh	r3, [r3, #2]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d10c      	bne.n	800960c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f90c 	bl	8009818 <USBD_CtlSendStatus>
      }
      break;
 8009600:	e004      	b.n	800960c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f83f 	bl	8009688 <USBD_CtlError>
      break;
 800960a:	e000      	b.n	800960e <USBD_ClrFeature+0x3a>
      break;
 800960c:	bf00      	nop
  }
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	785a      	ldrb	r2, [r3, #1]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	3302      	adds	r3, #2
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	3303      	adds	r3, #3
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	021b      	lsls	r3, r3, #8
 8009640:	b29b      	uxth	r3, r3
 8009642:	4413      	add	r3, r2
 8009644:	b29a      	uxth	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	3304      	adds	r3, #4
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	3305      	adds	r3, #5
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	021b      	lsls	r3, r3, #8
 800965a:	b29b      	uxth	r3, r3
 800965c:	4413      	add	r3, r2
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	3306      	adds	r3, #6
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	3307      	adds	r3, #7
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	b29b      	uxth	r3, r3
 8009676:	4413      	add	r3, r2
 8009678:	b29a      	uxth	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	80da      	strh	r2, [r3, #6]

}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr

08009688 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009692:	2180      	movs	r1, #128	@ 0x80
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc69 	bl	8009f6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800969a:	2100      	movs	r1, #0
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fc65 	bl	8009f6c <USBD_LL_StallEP>
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b086      	sub	sp, #24
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d032      	beq.n	8009726 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f000 f834 	bl	800972e <USBD_GetLen>
 80096c6:	4603      	mov	r3, r0
 80096c8:	3301      	adds	r3, #1
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	75fa      	strb	r2, [r7, #23]
 80096da:	461a      	mov	r2, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4413      	add	r3, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	7812      	ldrb	r2, [r2, #0]
 80096e4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	75fa      	strb	r2, [r7, #23]
 80096ec:	461a      	mov	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	4413      	add	r3, r2
 80096f2:	2203      	movs	r2, #3
 80096f4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096f6:	e012      	b.n	800971e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	60fa      	str	r2, [r7, #12]
 80096fe:	7dfa      	ldrb	r2, [r7, #23]
 8009700:	1c51      	adds	r1, r2, #1
 8009702:	75f9      	strb	r1, [r7, #23]
 8009704:	4611      	mov	r1, r2
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	440a      	add	r2, r1
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	1c5a      	adds	r2, r3, #1
 8009712:	75fa      	strb	r2, [r7, #23]
 8009714:	461a      	mov	r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	4413      	add	r3, r2
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e8      	bne.n	80096f8 <USBD_GetString+0x4e>
    }
  }
}
 8009726:	bf00      	nop
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800972e:	b480      	push	{r7}
 8009730:	b085      	sub	sp, #20
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800973a:	e005      	b.n	8009748 <USBD_GetLen+0x1a>
  {
    len++;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	3301      	adds	r3, #1
 8009740:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	3301      	adds	r3, #1
 8009746:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1f5      	bne.n	800973c <USBD_GetLen+0xe>
  }

  return len;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	bc80      	pop	{r7}
 800975a:	4770      	bx	lr

0800975c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	4613      	mov	r3, r2
 8009768:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2202      	movs	r2, #2
 800976e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009772:	88fa      	ldrh	r2, [r7, #6]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	2100      	movs	r1, #0
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 fc79 	bl	800a07c <USBD_LL_Transmit>

  return USBD_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097a2:	88fb      	ldrh	r3, [r7, #6]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	2100      	movs	r1, #0
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 fc67 	bl	800a07c <USBD_LL_Transmit>

  return USBD_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	4613      	mov	r3, r2
 80097c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2203      	movs	r2, #3
 80097ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097ce:	88fa      	ldrh	r2, [r7, #6]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80097d6:	88fa      	ldrh	r2, [r7, #6]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097de:	88fb      	ldrh	r3, [r7, #6]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	2100      	movs	r1, #0
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 fc6c 	bl	800a0c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fc5a 	bl	800a0c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2204      	movs	r2, #4
 8009824:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009828:	2300      	movs	r3, #0
 800982a:	2200      	movs	r2, #0
 800982c:	2100      	movs	r1, #0
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fc24 	bl	800a07c <USBD_LL_Transmit>

  return USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2205      	movs	r2, #5
 800984a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800984e:	2300      	movs	r3, #0
 8009850:	2200      	movs	r2, #0
 8009852:	2100      	movs	r1, #0
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fc34 	bl	800a0c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009868:	2200      	movs	r2, #0
 800986a:	4912      	ldr	r1, [pc, #72]	@ (80098b4 <MX_USB_DEVICE_Init+0x50>)
 800986c:	4812      	ldr	r0, [pc, #72]	@ (80098b8 <MX_USB_DEVICE_Init+0x54>)
 800986e:	f7fe ff62 	bl	8008736 <USBD_Init>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009878:	f7f7 fc58 	bl	800112c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800987c:	490f      	ldr	r1, [pc, #60]	@ (80098bc <MX_USB_DEVICE_Init+0x58>)
 800987e:	480e      	ldr	r0, [pc, #56]	@ (80098b8 <MX_USB_DEVICE_Init+0x54>)
 8009880:	f7fe ff84 	bl	800878c <USBD_RegisterClass>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800988a:	f7f7 fc4f 	bl	800112c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800988e:	490c      	ldr	r1, [pc, #48]	@ (80098c0 <MX_USB_DEVICE_Init+0x5c>)
 8009890:	4809      	ldr	r0, [pc, #36]	@ (80098b8 <MX_USB_DEVICE_Init+0x54>)
 8009892:	f7fe feb5 	bl	8008600 <USBD_CDC_RegisterInterface>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800989c:	f7f7 fc46 	bl	800112c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098a0:	4805      	ldr	r0, [pc, #20]	@ (80098b8 <MX_USB_DEVICE_Init+0x54>)
 80098a2:	f7fe ff8c 	bl	80087be <USBD_Start>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098ac:	f7f7 fc3e 	bl	800112c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098b0:	bf00      	nop
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	2000012c 	.word	0x2000012c
 80098b8:	200003c8 	.word	0x200003c8
 80098bc:	20000018 	.word	0x20000018
 80098c0:	2000011c 	.word	0x2000011c

080098c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098c8:	2200      	movs	r2, #0
 80098ca:	4905      	ldr	r1, [pc, #20]	@ (80098e0 <CDC_Init_FS+0x1c>)
 80098cc:	4805      	ldr	r0, [pc, #20]	@ (80098e4 <CDC_Init_FS+0x20>)
 80098ce:	f7fe fead 	bl	800862c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098d2:	4905      	ldr	r1, [pc, #20]	@ (80098e8 <CDC_Init_FS+0x24>)
 80098d4:	4803      	ldr	r0, [pc, #12]	@ (80098e4 <CDC_Init_FS+0x20>)
 80098d6:	f7fe fec2 	bl	800865e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098dc:	4618      	mov	r0, r3
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	20000a8c 	.word	0x20000a8c
 80098e4:	200003c8 	.word	0x200003c8
 80098e8:	2000068c 	.word	0x2000068c

080098ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bc80      	pop	{r7}
 80098f8:	4770      	bx	lr
	...

080098fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	4603      	mov	r3, r0
 8009904:	6039      	str	r1, [r7, #0]
 8009906:	71fb      	strb	r3, [r7, #7]
 8009908:	4613      	mov	r3, r2
 800990a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	2b23      	cmp	r3, #35	@ 0x23
 8009910:	d84a      	bhi.n	80099a8 <CDC_Control_FS+0xac>
 8009912:	a201      	add	r2, pc, #4	@ (adr r2, 8009918 <CDC_Control_FS+0x1c>)
 8009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009918:	080099a9 	.word	0x080099a9
 800991c:	080099a9 	.word	0x080099a9
 8009920:	080099a9 	.word	0x080099a9
 8009924:	080099a9 	.word	0x080099a9
 8009928:	080099a9 	.word	0x080099a9
 800992c:	080099a9 	.word	0x080099a9
 8009930:	080099a9 	.word	0x080099a9
 8009934:	080099a9 	.word	0x080099a9
 8009938:	080099a9 	.word	0x080099a9
 800993c:	080099a9 	.word	0x080099a9
 8009940:	080099a9 	.word	0x080099a9
 8009944:	080099a9 	.word	0x080099a9
 8009948:	080099a9 	.word	0x080099a9
 800994c:	080099a9 	.word	0x080099a9
 8009950:	080099a9 	.word	0x080099a9
 8009954:	080099a9 	.word	0x080099a9
 8009958:	080099a9 	.word	0x080099a9
 800995c:	080099a9 	.word	0x080099a9
 8009960:	080099a9 	.word	0x080099a9
 8009964:	080099a9 	.word	0x080099a9
 8009968:	080099a9 	.word	0x080099a9
 800996c:	080099a9 	.word	0x080099a9
 8009970:	080099a9 	.word	0x080099a9
 8009974:	080099a9 	.word	0x080099a9
 8009978:	080099a9 	.word	0x080099a9
 800997c:	080099a9 	.word	0x080099a9
 8009980:	080099a9 	.word	0x080099a9
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099a9 	.word	0x080099a9
 800998c:	080099a9 	.word	0x080099a9
 8009990:	080099a9 	.word	0x080099a9
 8009994:	080099a9 	.word	0x080099a9
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099a9 	.word	0x080099a9
 80099a0:	080099a9 	.word	0x080099a9
 80099a4:	080099a9 	.word	0x080099a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099a8:	bf00      	nop
  }

  return (USBD_OK);
 80099aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop

080099b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	480f      	ldr	r0, [pc, #60]	@ (8009a04 <CDC_Receive_FS+0x4c>)
 80099c6:	f7fe fe4a 	bl	800865e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099ca:	480e      	ldr	r0, [pc, #56]	@ (8009a04 <CDC_Receive_FS+0x4c>)
 80099cc:	f7fe fe89 	bl	80086e2 <USBD_CDC_ReceivePacket>
  memset (RxBuffer, '\0', 64);  // clear the buffer
 80099d0:	2240      	movs	r2, #64	@ 0x40
 80099d2:	2100      	movs	r1, #0
 80099d4:	480c      	ldr	r0, [pc, #48]	@ (8009a08 <CDC_Receive_FS+0x50>)
 80099d6:	f000 fc17 	bl	800a208 <memset>
    uint8_t len = (uint8_t) *Len;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	73fb      	strb	r3, [r7, #15]
    memcpy(RxBuffer, Buf, len);  // copy the data to the buffer
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	461a      	mov	r2, r3
 80099e4:	6879      	ldr	r1, [r7, #4]
 80099e6:	4808      	ldr	r0, [pc, #32]	@ (8009a08 <CDC_Receive_FS+0x50>)
 80099e8:	f000 fc42 	bl	800a270 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	461a      	mov	r2, r3
 80099f0:	2100      	movs	r1, #0
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fc08 	bl	800a208 <memset>
  return (USBD_OK);
 80099f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	200003c8 	.word	0x200003c8
 8009a08:	2000021c 	.word	0x2000021c

08009a0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a54 <CDC_Transmit_FS+0x48>)
 8009a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e00b      	b.n	8009a4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a32:	887b      	ldrh	r3, [r7, #2]
 8009a34:	461a      	mov	r2, r3
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4806      	ldr	r0, [pc, #24]	@ (8009a54 <CDC_Transmit_FS+0x48>)
 8009a3a:	f7fe fdf7 	bl	800862c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a3e:	4805      	ldr	r0, [pc, #20]	@ (8009a54 <CDC_Transmit_FS+0x48>)
 8009a40:	f7fe fe20 	bl	8008684 <USBD_CDC_TransmitPacket>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	200003c8 	.word	0x200003c8

08009a58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2212      	movs	r2, #18
 8009a68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a6a:	4b03      	ldr	r3, [pc, #12]	@ (8009a78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bc80      	pop	{r7}
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	20000148 	.word	0x20000148

08009a7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	6039      	str	r1, [r7, #0]
 8009a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2204      	movs	r2, #4
 8009a8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a8e:	4b03      	ldr	r3, [pc, #12]	@ (8009a9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	2000015c 	.word	0x2000015c

08009aa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	6039      	str	r1, [r7, #0]
 8009aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009aac:	79fb      	ldrb	r3, [r7, #7]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	4907      	ldr	r1, [pc, #28]	@ (8009ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ab6:	4808      	ldr	r0, [pc, #32]	@ (8009ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ab8:	f7ff fdf7 	bl	80096aa <USBD_GetString>
 8009abc:	e004      	b.n	8009ac8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	4904      	ldr	r1, [pc, #16]	@ (8009ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ac2:	4805      	ldr	r0, [pc, #20]	@ (8009ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ac4:	f7ff fdf1 	bl	80096aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ac8:	4b02      	ldr	r3, [pc, #8]	@ (8009ad4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000e8c 	.word	0x20000e8c
 8009ad8:	0800ab4c 	.word	0x0800ab4c

08009adc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	6039      	str	r1, [r7, #0]
 8009ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	4904      	ldr	r1, [pc, #16]	@ (8009afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009aec:	4804      	ldr	r0, [pc, #16]	@ (8009b00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009aee:	f7ff fddc 	bl	80096aa <USBD_GetString>
  return USBD_StrDesc;
 8009af2:	4b02      	ldr	r3, [pc, #8]	@ (8009afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20000e8c 	.word	0x20000e8c
 8009b00:	0800ab64 	.word	0x0800ab64

08009b04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	6039      	str	r1, [r7, #0]
 8009b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	221a      	movs	r2, #26
 8009b14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b16:	f000 f843 	bl	8009ba0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b1a:	4b02      	ldr	r3, [pc, #8]	@ (8009b24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	20000160 	.word	0x20000160

08009b28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	6039      	str	r1, [r7, #0]
 8009b32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d105      	bne.n	8009b46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	4907      	ldr	r1, [pc, #28]	@ (8009b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b3e:	4808      	ldr	r0, [pc, #32]	@ (8009b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b40:	f7ff fdb3 	bl	80096aa <USBD_GetString>
 8009b44:	e004      	b.n	8009b50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	4904      	ldr	r1, [pc, #16]	@ (8009b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b4a:	4805      	ldr	r0, [pc, #20]	@ (8009b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b4c:	f7ff fdad 	bl	80096aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b50:	4b02      	ldr	r3, [pc, #8]	@ (8009b5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20000e8c 	.word	0x20000e8c
 8009b60:	0800ab78 	.word	0x0800ab78

08009b64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	6039      	str	r1, [r7, #0]
 8009b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d105      	bne.n	8009b82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	4907      	ldr	r1, [pc, #28]	@ (8009b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b7a:	4808      	ldr	r0, [pc, #32]	@ (8009b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b7c:	f7ff fd95 	bl	80096aa <USBD_GetString>
 8009b80:	e004      	b.n	8009b8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	4904      	ldr	r1, [pc, #16]	@ (8009b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b86:	4805      	ldr	r0, [pc, #20]	@ (8009b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b88:	f7ff fd8f 	bl	80096aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b8c:	4b02      	ldr	r3, [pc, #8]	@ (8009b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20000e8c 	.word	0x20000e8c
 8009b9c:	0800ab84 	.word	0x0800ab84

08009ba0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8009be4 <Get_SerialNum+0x44>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bac:	4b0e      	ldr	r3, [pc, #56]	@ (8009be8 <Get_SerialNum+0x48>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8009bec <Get_SerialNum+0x4c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bc6:	2208      	movs	r2, #8
 8009bc8:	4909      	ldr	r1, [pc, #36]	@ (8009bf0 <Get_SerialNum+0x50>)
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f814 	bl	8009bf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bd0:	2204      	movs	r2, #4
 8009bd2:	4908      	ldr	r1, [pc, #32]	@ (8009bf4 <Get_SerialNum+0x54>)
 8009bd4:	68b8      	ldr	r0, [r7, #8]
 8009bd6:	f000 f80f 	bl	8009bf8 <IntToUnicode>
  }
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	1ffff7e8 	.word	0x1ffff7e8
 8009be8:	1ffff7ec 	.word	0x1ffff7ec
 8009bec:	1ffff7f0 	.word	0x1ffff7f0
 8009bf0:	20000162 	.word	0x20000162
 8009bf4:	20000172 	.word	0x20000172

08009bf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	4613      	mov	r3, r2
 8009c04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	75fb      	strb	r3, [r7, #23]
 8009c0e:	e027      	b.n	8009c60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	0f1b      	lsrs	r3, r3, #28
 8009c14:	2b09      	cmp	r3, #9
 8009c16:	d80b      	bhi.n	8009c30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	0f1b      	lsrs	r3, r3, #28
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	4619      	mov	r1, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	440b      	add	r3, r1
 8009c28:	3230      	adds	r2, #48	@ 0x30
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	e00a      	b.n	8009c46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	0f1b      	lsrs	r3, r3, #28
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	440b      	add	r3, r1
 8009c40:	3237      	adds	r2, #55	@ 0x37
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	011b      	lsls	r3, r3, #4
 8009c4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	3301      	adds	r3, #1
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	4413      	add	r3, r2
 8009c56:	2200      	movs	r2, #0
 8009c58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	75fb      	strb	r3, [r7, #23]
 8009c60:	7dfa      	ldrb	r2, [r7, #23]
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d3d3      	bcc.n	8009c10 <IntToUnicode+0x18>
  }
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bc80      	pop	{r7}
 8009c72:	4770      	bx	lr

08009c74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a0d      	ldr	r2, [pc, #52]	@ (8009cb8 <HAL_PCD_MspInit+0x44>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d113      	bne.n	8009cae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009c86:	4b0d      	ldr	r3, [pc, #52]	@ (8009cbc <HAL_PCD_MspInit+0x48>)
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009cbc <HAL_PCD_MspInit+0x48>)
 8009c8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c90:	61d3      	str	r3, [r2, #28]
 8009c92:	4b0a      	ldr	r3, [pc, #40]	@ (8009cbc <HAL_PCD_MspInit+0x48>)
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	2014      	movs	r0, #20
 8009ca4:	f7f7 ff55 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009ca8:	2014      	movs	r0, #20
 8009caa:	f7f7 ff6e 	bl	8001b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	40005c00 	.word	0x40005c00
 8009cbc:	40021000 	.word	0x40021000

08009cc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	f7fe fdb9 	bl	800884e <USBD_LL_SetupStage>
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009cf6:	78fa      	ldrb	r2, [r7, #3]
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	440b      	add	r3, r1
 8009d04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f7fe fdeb 	bl	80088e8 <USBD_LL_DataOutStage>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	440b      	add	r3, r1
 8009d3a:	3324      	adds	r3, #36	@ 0x24
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	4619      	mov	r1, r3
 8009d42:	f7fe fe42 	bl	80089ca <USBD_LL_DataInStage>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe ff52 	bl	8008c06 <USBD_LL_SOF>
}
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d72:	2301      	movs	r3, #1
 8009d74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	799b      	ldrb	r3, [r3, #6]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d001      	beq.n	8009d82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d7e:	f7f7 f9d5 	bl	800112c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d88:	7bfa      	ldrb	r2, [r7, #15]
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fe ff02 	bl	8008b96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe febb 	bl	8008b14 <USBD_LL_Reset>
}
 8009d9e:	bf00      	nop
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fefc 	bl	8008bb4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	7a9b      	ldrb	r3, [r3, #10]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dc4:	4b04      	ldr	r3, [pc, #16]	@ (8009dd8 <HAL_PCD_SuspendCallback+0x30>)
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	4a03      	ldr	r2, [pc, #12]	@ (8009dd8 <HAL_PCD_SuspendCallback+0x30>)
 8009dca:	f043 0306 	orr.w	r3, r3, #6
 8009dce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	e000ed00 	.word	0xe000ed00

08009ddc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fef6 	bl	8008bdc <USBD_LL_Resume>
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009e00:	4a28      	ldr	r2, [pc, #160]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a26      	ldr	r2, [pc, #152]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e0c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009e10:	4b24      	ldr	r3, [pc, #144]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e12:	4a25      	ldr	r2, [pc, #148]	@ (8009ea8 <USBD_LL_Init+0xb0>)
 8009e14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009e16:	4b23      	ldr	r3, [pc, #140]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e18:	2208      	movs	r2, #8
 8009e1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009e1c:	4b21      	ldr	r3, [pc, #132]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e1e:	2202      	movs	r2, #2
 8009e20:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009e22:	4b20      	ldr	r3, [pc, #128]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009e28:	4b1e      	ldr	r3, [pc, #120]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009e34:	481b      	ldr	r0, [pc, #108]	@ (8009ea4 <USBD_LL_Init+0xac>)
 8009e36:	f7f8 fd2b 	bl	8002890 <HAL_PCD_Init>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009e40:	f7f7 f974 	bl	800112c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e4a:	2318      	movs	r3, #24
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	f7fa fa3c 	bl	80042cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e5a:	2358      	movs	r3, #88	@ 0x58
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2180      	movs	r1, #128	@ 0x80
 8009e60:	f7fa fa34 	bl	80042cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e6a:	23c0      	movs	r3, #192	@ 0xc0
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2181      	movs	r1, #129	@ 0x81
 8009e70:	f7fa fa2c 	bl	80042cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e7a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2101      	movs	r1, #1
 8009e82:	f7fa fa23 	bl	80042cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e90:	2200      	movs	r2, #0
 8009e92:	2182      	movs	r1, #130	@ 0x82
 8009e94:	f7fa fa1a 	bl	80042cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	2000108c 	.word	0x2000108c
 8009ea8:	40005c00 	.word	0x40005c00

08009eac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7f8 fdda 	bl	8002a7c <HAL_PCD_Start>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 f94e 	bl	800a170 <USBD_Get_USB_Status>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	4608      	mov	r0, r1
 8009eec:	4611      	mov	r1, r2
 8009eee:	461a      	mov	r2, r3
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	70fb      	strb	r3, [r7, #3]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	70bb      	strb	r3, [r7, #2]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f0a:	78bb      	ldrb	r3, [r7, #2]
 8009f0c:	883a      	ldrh	r2, [r7, #0]
 8009f0e:	78f9      	ldrb	r1, [r7, #3]
 8009f10:	f7f8 ff2e 	bl	8002d70 <HAL_PCD_EP_Open>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 f928 	bl	800a170 <USBD_Get_USB_Status>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7f8 ff6c 	bl	8002e2a <HAL_PCD_EP_Close>
 8009f52:	4603      	mov	r3, r0
 8009f54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 f909 	bl	800a170 <USBD_Get_USB_Status>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7f9 f814 	bl	8002fb8 <HAL_PCD_EP_SetStall>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 f8ea 	bl	800a170 <USBD_Get_USB_Status>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fc4:	78fa      	ldrb	r2, [r7, #3]
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7f9 f855 	bl	8003078 <HAL_PCD_EP_ClrStall>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 f8cb 	bl	800a170 <USBD_Get_USB_Status>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ffa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a000:	2b00      	cmp	r3, #0
 800a002:	da0b      	bge.n	800a01c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a00a:	68f9      	ldr	r1, [r7, #12]
 800a00c:	4613      	mov	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	440b      	add	r3, r1
 800a016:	3312      	adds	r3, #18
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	e00b      	b.n	800a034 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a022:	68f9      	ldr	r1, [r7, #12]
 800a024:	4613      	mov	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	440b      	add	r3, r1
 800a02e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a032:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	bc80      	pop	{r7}
 800a03c:	4770      	bx	lr

0800a03e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	460b      	mov	r3, r1
 800a048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a058:	78fa      	ldrb	r2, [r7, #3]
 800a05a:	4611      	mov	r1, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7f8 fe63 	bl	8002d28 <HAL_PCD_SetAddress>
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 f881 	bl	800a170 <USBD_Get_USB_Status>
 800a06e:	4603      	mov	r3, r0
 800a070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a072:	7bbb      	ldrb	r3, [r7, #14]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	607a      	str	r2, [r7, #4]
 800a086:	461a      	mov	r2, r3
 800a088:	460b      	mov	r3, r1
 800a08a:	72fb      	strb	r3, [r7, #11]
 800a08c:	4613      	mov	r3, r2
 800a08e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a09e:	893b      	ldrh	r3, [r7, #8]
 800a0a0:	7af9      	ldrb	r1, [r7, #11]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	f7f8 ff51 	bl	8002f4a <HAL_PCD_EP_Transmit>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f85e 	bl	800a170 <USBD_Get_USB_Status>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b086      	sub	sp, #24
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	72fb      	strb	r3, [r7, #11]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a0e4:	893b      	ldrh	r3, [r7, #8]
 800a0e6:	7af9      	ldrb	r1, [r7, #11]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f7f8 fee6 	bl	8002eba <HAL_PCD_EP_Receive>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 f83b 	bl	800a170 <USBD_Get_USB_Status>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a11a:	78fa      	ldrb	r2, [r7, #3]
 800a11c:	4611      	mov	r1, r2
 800a11e:	4618      	mov	r0, r3
 800a120:	f7f8 fefc 	bl	8002f1c <HAL_PCD_EP_GetRxCount>
 800a124:	4603      	mov	r3, r0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
	...

0800a130 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a138:	4b02      	ldr	r3, [pc, #8]	@ (800a144 <USBD_static_malloc+0x14>)
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	bc80      	pop	{r7}
 800a142:	4770      	bx	lr
 800a144:	20001364 	.word	0x20001364

0800a148 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]

}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr

0800a15a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bc80      	pop	{r7}
 800a16e:	4770      	bx	lr

0800a170 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	2b03      	cmp	r3, #3
 800a182:	d817      	bhi.n	800a1b4 <USBD_Get_USB_Status+0x44>
 800a184:	a201      	add	r2, pc, #4	@ (adr r2, 800a18c <USBD_Get_USB_Status+0x1c>)
 800a186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18a:	bf00      	nop
 800a18c:	0800a19d 	.word	0x0800a19d
 800a190:	0800a1a3 	.word	0x0800a1a3
 800a194:	0800a1a9 	.word	0x0800a1a9
 800a198:	0800a1af 	.word	0x0800a1af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a0:	e00b      	b.n	800a1ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a6:	e008      	b.n	800a1ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ac:	e005      	b.n	800a1ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b2:	e002      	b.n	800a1ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b8:	bf00      	nop
  }
  return usb_status;
 800a1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bc80      	pop	{r7}
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop

0800a1c8 <siprintf>:
 800a1c8:	b40e      	push	{r1, r2, r3}
 800a1ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a1ce:	b500      	push	{lr}
 800a1d0:	b09c      	sub	sp, #112	@ 0x70
 800a1d2:	ab1d      	add	r3, sp, #116	@ 0x74
 800a1d4:	9002      	str	r0, [sp, #8]
 800a1d6:	9006      	str	r0, [sp, #24]
 800a1d8:	9107      	str	r1, [sp, #28]
 800a1da:	9104      	str	r1, [sp, #16]
 800a1dc:	4808      	ldr	r0, [pc, #32]	@ (800a200 <siprintf+0x38>)
 800a1de:	4909      	ldr	r1, [pc, #36]	@ (800a204 <siprintf+0x3c>)
 800a1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e4:	9105      	str	r1, [sp, #20]
 800a1e6:	6800      	ldr	r0, [r0, #0]
 800a1e8:	a902      	add	r1, sp, #8
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	f000 f9a0 	bl	800a530 <_svfiprintf_r>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	9b02      	ldr	r3, [sp, #8]
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	b01c      	add	sp, #112	@ 0x70
 800a1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1fc:	b003      	add	sp, #12
 800a1fe:	4770      	bx	lr
 800a200:	2000017c 	.word	0x2000017c
 800a204:	ffff0208 	.word	0xffff0208

0800a208 <memset>:
 800a208:	4603      	mov	r3, r0
 800a20a:	4402      	add	r2, r0
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d100      	bne.n	800a212 <memset+0xa>
 800a210:	4770      	bx	lr
 800a212:	f803 1b01 	strb.w	r1, [r3], #1
 800a216:	e7f9      	b.n	800a20c <memset+0x4>

0800a218 <__errno>:
 800a218:	4b01      	ldr	r3, [pc, #4]	@ (800a220 <__errno+0x8>)
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	2000017c 	.word	0x2000017c

0800a224 <__libc_init_array>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	2600      	movs	r6, #0
 800a228:	4d0c      	ldr	r5, [pc, #48]	@ (800a25c <__libc_init_array+0x38>)
 800a22a:	4c0d      	ldr	r4, [pc, #52]	@ (800a260 <__libc_init_array+0x3c>)
 800a22c:	1b64      	subs	r4, r4, r5
 800a22e:	10a4      	asrs	r4, r4, #2
 800a230:	42a6      	cmp	r6, r4
 800a232:	d109      	bne.n	800a248 <__libc_init_array+0x24>
 800a234:	f000 fc78 	bl	800ab28 <_init>
 800a238:	2600      	movs	r6, #0
 800a23a:	4d0a      	ldr	r5, [pc, #40]	@ (800a264 <__libc_init_array+0x40>)
 800a23c:	4c0a      	ldr	r4, [pc, #40]	@ (800a268 <__libc_init_array+0x44>)
 800a23e:	1b64      	subs	r4, r4, r5
 800a240:	10a4      	asrs	r4, r4, #2
 800a242:	42a6      	cmp	r6, r4
 800a244:	d105      	bne.n	800a252 <__libc_init_array+0x2e>
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	f855 3b04 	ldr.w	r3, [r5], #4
 800a24c:	4798      	blx	r3
 800a24e:	3601      	adds	r6, #1
 800a250:	e7ee      	b.n	800a230 <__libc_init_array+0xc>
 800a252:	f855 3b04 	ldr.w	r3, [r5], #4
 800a256:	4798      	blx	r3
 800a258:	3601      	adds	r6, #1
 800a25a:	e7f2      	b.n	800a242 <__libc_init_array+0x1e>
 800a25c:	0800abfc 	.word	0x0800abfc
 800a260:	0800abfc 	.word	0x0800abfc
 800a264:	0800abfc 	.word	0x0800abfc
 800a268:	0800ac00 	.word	0x0800ac00

0800a26c <__retarget_lock_acquire_recursive>:
 800a26c:	4770      	bx	lr

0800a26e <__retarget_lock_release_recursive>:
 800a26e:	4770      	bx	lr

0800a270 <memcpy>:
 800a270:	440a      	add	r2, r1
 800a272:	4291      	cmp	r1, r2
 800a274:	f100 33ff 	add.w	r3, r0, #4294967295
 800a278:	d100      	bne.n	800a27c <memcpy+0xc>
 800a27a:	4770      	bx	lr
 800a27c:	b510      	push	{r4, lr}
 800a27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a282:	4291      	cmp	r1, r2
 800a284:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a288:	d1f9      	bne.n	800a27e <memcpy+0xe>
 800a28a:	bd10      	pop	{r4, pc}

0800a28c <_free_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4605      	mov	r5, r0
 800a290:	2900      	cmp	r1, #0
 800a292:	d040      	beq.n	800a316 <_free_r+0x8a>
 800a294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a298:	1f0c      	subs	r4, r1, #4
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bfb8      	it	lt
 800a29e:	18e4      	addlt	r4, r4, r3
 800a2a0:	f000 f8de 	bl	800a460 <__malloc_lock>
 800a2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a318 <_free_r+0x8c>)
 800a2a6:	6813      	ldr	r3, [r2, #0]
 800a2a8:	b933      	cbnz	r3, 800a2b8 <_free_r+0x2c>
 800a2aa:	6063      	str	r3, [r4, #4]
 800a2ac:	6014      	str	r4, [r2, #0]
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b4:	f000 b8da 	b.w	800a46c <__malloc_unlock>
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	d908      	bls.n	800a2ce <_free_r+0x42>
 800a2bc:	6820      	ldr	r0, [r4, #0]
 800a2be:	1821      	adds	r1, r4, r0
 800a2c0:	428b      	cmp	r3, r1
 800a2c2:	bf01      	itttt	eq
 800a2c4:	6819      	ldreq	r1, [r3, #0]
 800a2c6:	685b      	ldreq	r3, [r3, #4]
 800a2c8:	1809      	addeq	r1, r1, r0
 800a2ca:	6021      	streq	r1, [r4, #0]
 800a2cc:	e7ed      	b.n	800a2aa <_free_r+0x1e>
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	b10b      	cbz	r3, 800a2d8 <_free_r+0x4c>
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	d9fa      	bls.n	800a2ce <_free_r+0x42>
 800a2d8:	6811      	ldr	r1, [r2, #0]
 800a2da:	1850      	adds	r0, r2, r1
 800a2dc:	42a0      	cmp	r0, r4
 800a2de:	d10b      	bne.n	800a2f8 <_free_r+0x6c>
 800a2e0:	6820      	ldr	r0, [r4, #0]
 800a2e2:	4401      	add	r1, r0
 800a2e4:	1850      	adds	r0, r2, r1
 800a2e6:	4283      	cmp	r3, r0
 800a2e8:	6011      	str	r1, [r2, #0]
 800a2ea:	d1e0      	bne.n	800a2ae <_free_r+0x22>
 800a2ec:	6818      	ldr	r0, [r3, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4408      	add	r0, r1
 800a2f2:	6010      	str	r0, [r2, #0]
 800a2f4:	6053      	str	r3, [r2, #4]
 800a2f6:	e7da      	b.n	800a2ae <_free_r+0x22>
 800a2f8:	d902      	bls.n	800a300 <_free_r+0x74>
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	602b      	str	r3, [r5, #0]
 800a2fe:	e7d6      	b.n	800a2ae <_free_r+0x22>
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	1821      	adds	r1, r4, r0
 800a304:	428b      	cmp	r3, r1
 800a306:	bf01      	itttt	eq
 800a308:	6819      	ldreq	r1, [r3, #0]
 800a30a:	685b      	ldreq	r3, [r3, #4]
 800a30c:	1809      	addeq	r1, r1, r0
 800a30e:	6021      	streq	r1, [r4, #0]
 800a310:	6063      	str	r3, [r4, #4]
 800a312:	6054      	str	r4, [r2, #4]
 800a314:	e7cb      	b.n	800a2ae <_free_r+0x22>
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	200016c8 	.word	0x200016c8

0800a31c <sbrk_aligned>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	4e0f      	ldr	r6, [pc, #60]	@ (800a35c <sbrk_aligned+0x40>)
 800a320:	460c      	mov	r4, r1
 800a322:	6831      	ldr	r1, [r6, #0]
 800a324:	4605      	mov	r5, r0
 800a326:	b911      	cbnz	r1, 800a32e <sbrk_aligned+0x12>
 800a328:	f000 fbaa 	bl	800aa80 <_sbrk_r>
 800a32c:	6030      	str	r0, [r6, #0]
 800a32e:	4621      	mov	r1, r4
 800a330:	4628      	mov	r0, r5
 800a332:	f000 fba5 	bl	800aa80 <_sbrk_r>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	d103      	bne.n	800a342 <sbrk_aligned+0x26>
 800a33a:	f04f 34ff 	mov.w	r4, #4294967295
 800a33e:	4620      	mov	r0, r4
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	1cc4      	adds	r4, r0, #3
 800a344:	f024 0403 	bic.w	r4, r4, #3
 800a348:	42a0      	cmp	r0, r4
 800a34a:	d0f8      	beq.n	800a33e <sbrk_aligned+0x22>
 800a34c:	1a21      	subs	r1, r4, r0
 800a34e:	4628      	mov	r0, r5
 800a350:	f000 fb96 	bl	800aa80 <_sbrk_r>
 800a354:	3001      	adds	r0, #1
 800a356:	d1f2      	bne.n	800a33e <sbrk_aligned+0x22>
 800a358:	e7ef      	b.n	800a33a <sbrk_aligned+0x1e>
 800a35a:	bf00      	nop
 800a35c:	200016c4 	.word	0x200016c4

0800a360 <_malloc_r>:
 800a360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a364:	1ccd      	adds	r5, r1, #3
 800a366:	f025 0503 	bic.w	r5, r5, #3
 800a36a:	3508      	adds	r5, #8
 800a36c:	2d0c      	cmp	r5, #12
 800a36e:	bf38      	it	cc
 800a370:	250c      	movcc	r5, #12
 800a372:	2d00      	cmp	r5, #0
 800a374:	4606      	mov	r6, r0
 800a376:	db01      	blt.n	800a37c <_malloc_r+0x1c>
 800a378:	42a9      	cmp	r1, r5
 800a37a:	d904      	bls.n	800a386 <_malloc_r+0x26>
 800a37c:	230c      	movs	r3, #12
 800a37e:	6033      	str	r3, [r6, #0]
 800a380:	2000      	movs	r0, #0
 800a382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a386:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a45c <_malloc_r+0xfc>
 800a38a:	f000 f869 	bl	800a460 <__malloc_lock>
 800a38e:	f8d8 3000 	ldr.w	r3, [r8]
 800a392:	461c      	mov	r4, r3
 800a394:	bb44      	cbnz	r4, 800a3e8 <_malloc_r+0x88>
 800a396:	4629      	mov	r1, r5
 800a398:	4630      	mov	r0, r6
 800a39a:	f7ff ffbf 	bl	800a31c <sbrk_aligned>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	d158      	bne.n	800a456 <_malloc_r+0xf6>
 800a3a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a3a8:	4627      	mov	r7, r4
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	d143      	bne.n	800a436 <_malloc_r+0xd6>
 800a3ae:	2c00      	cmp	r4, #0
 800a3b0:	d04b      	beq.n	800a44a <_malloc_r+0xea>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	eb04 0903 	add.w	r9, r4, r3
 800a3bc:	f000 fb60 	bl	800aa80 <_sbrk_r>
 800a3c0:	4581      	cmp	r9, r0
 800a3c2:	d142      	bne.n	800a44a <_malloc_r+0xea>
 800a3c4:	6821      	ldr	r1, [r4, #0]
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	1a6d      	subs	r5, r5, r1
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f7ff ffa6 	bl	800a31c <sbrk_aligned>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d03a      	beq.n	800a44a <_malloc_r+0xea>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	442b      	add	r3, r5
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	f8d8 3000 	ldr.w	r3, [r8]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	bb62      	cbnz	r2, 800a43c <_malloc_r+0xdc>
 800a3e2:	f8c8 7000 	str.w	r7, [r8]
 800a3e6:	e00f      	b.n	800a408 <_malloc_r+0xa8>
 800a3e8:	6822      	ldr	r2, [r4, #0]
 800a3ea:	1b52      	subs	r2, r2, r5
 800a3ec:	d420      	bmi.n	800a430 <_malloc_r+0xd0>
 800a3ee:	2a0b      	cmp	r2, #11
 800a3f0:	d917      	bls.n	800a422 <_malloc_r+0xc2>
 800a3f2:	1961      	adds	r1, r4, r5
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	6025      	str	r5, [r4, #0]
 800a3f8:	bf18      	it	ne
 800a3fa:	6059      	strne	r1, [r3, #4]
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	bf08      	it	eq
 800a400:	f8c8 1000 	streq.w	r1, [r8]
 800a404:	5162      	str	r2, [r4, r5]
 800a406:	604b      	str	r3, [r1, #4]
 800a408:	4630      	mov	r0, r6
 800a40a:	f000 f82f 	bl	800a46c <__malloc_unlock>
 800a40e:	f104 000b 	add.w	r0, r4, #11
 800a412:	1d23      	adds	r3, r4, #4
 800a414:	f020 0007 	bic.w	r0, r0, #7
 800a418:	1ac2      	subs	r2, r0, r3
 800a41a:	bf1c      	itt	ne
 800a41c:	1a1b      	subne	r3, r3, r0
 800a41e:	50a3      	strne	r3, [r4, r2]
 800a420:	e7af      	b.n	800a382 <_malloc_r+0x22>
 800a422:	6862      	ldr	r2, [r4, #4]
 800a424:	42a3      	cmp	r3, r4
 800a426:	bf0c      	ite	eq
 800a428:	f8c8 2000 	streq.w	r2, [r8]
 800a42c:	605a      	strne	r2, [r3, #4]
 800a42e:	e7eb      	b.n	800a408 <_malloc_r+0xa8>
 800a430:	4623      	mov	r3, r4
 800a432:	6864      	ldr	r4, [r4, #4]
 800a434:	e7ae      	b.n	800a394 <_malloc_r+0x34>
 800a436:	463c      	mov	r4, r7
 800a438:	687f      	ldr	r7, [r7, #4]
 800a43a:	e7b6      	b.n	800a3aa <_malloc_r+0x4a>
 800a43c:	461a      	mov	r2, r3
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	42a3      	cmp	r3, r4
 800a442:	d1fb      	bne.n	800a43c <_malloc_r+0xdc>
 800a444:	2300      	movs	r3, #0
 800a446:	6053      	str	r3, [r2, #4]
 800a448:	e7de      	b.n	800a408 <_malloc_r+0xa8>
 800a44a:	230c      	movs	r3, #12
 800a44c:	4630      	mov	r0, r6
 800a44e:	6033      	str	r3, [r6, #0]
 800a450:	f000 f80c 	bl	800a46c <__malloc_unlock>
 800a454:	e794      	b.n	800a380 <_malloc_r+0x20>
 800a456:	6005      	str	r5, [r0, #0]
 800a458:	e7d6      	b.n	800a408 <_malloc_r+0xa8>
 800a45a:	bf00      	nop
 800a45c:	200016c8 	.word	0x200016c8

0800a460 <__malloc_lock>:
 800a460:	4801      	ldr	r0, [pc, #4]	@ (800a468 <__malloc_lock+0x8>)
 800a462:	f7ff bf03 	b.w	800a26c <__retarget_lock_acquire_recursive>
 800a466:	bf00      	nop
 800a468:	200016c0 	.word	0x200016c0

0800a46c <__malloc_unlock>:
 800a46c:	4801      	ldr	r0, [pc, #4]	@ (800a474 <__malloc_unlock+0x8>)
 800a46e:	f7ff befe 	b.w	800a26e <__retarget_lock_release_recursive>
 800a472:	bf00      	nop
 800a474:	200016c0 	.word	0x200016c0

0800a478 <__ssputs_r>:
 800a478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a47c:	461f      	mov	r7, r3
 800a47e:	688e      	ldr	r6, [r1, #8]
 800a480:	4682      	mov	sl, r0
 800a482:	42be      	cmp	r6, r7
 800a484:	460c      	mov	r4, r1
 800a486:	4690      	mov	r8, r2
 800a488:	680b      	ldr	r3, [r1, #0]
 800a48a:	d82d      	bhi.n	800a4e8 <__ssputs_r+0x70>
 800a48c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a490:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a494:	d026      	beq.n	800a4e4 <__ssputs_r+0x6c>
 800a496:	6965      	ldr	r5, [r4, #20]
 800a498:	6909      	ldr	r1, [r1, #16]
 800a49a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a49e:	eba3 0901 	sub.w	r9, r3, r1
 800a4a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4a6:	1c7b      	adds	r3, r7, #1
 800a4a8:	444b      	add	r3, r9
 800a4aa:	106d      	asrs	r5, r5, #1
 800a4ac:	429d      	cmp	r5, r3
 800a4ae:	bf38      	it	cc
 800a4b0:	461d      	movcc	r5, r3
 800a4b2:	0553      	lsls	r3, r2, #21
 800a4b4:	d527      	bpl.n	800a506 <__ssputs_r+0x8e>
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	f7ff ff52 	bl	800a360 <_malloc_r>
 800a4bc:	4606      	mov	r6, r0
 800a4be:	b360      	cbz	r0, 800a51a <__ssputs_r+0xa2>
 800a4c0:	464a      	mov	r2, r9
 800a4c2:	6921      	ldr	r1, [r4, #16]
 800a4c4:	f7ff fed4 	bl	800a270 <memcpy>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a4ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	6126      	str	r6, [r4, #16]
 800a4d6:	444e      	add	r6, r9
 800a4d8:	6026      	str	r6, [r4, #0]
 800a4da:	463e      	mov	r6, r7
 800a4dc:	6165      	str	r5, [r4, #20]
 800a4de:	eba5 0509 	sub.w	r5, r5, r9
 800a4e2:	60a5      	str	r5, [r4, #8]
 800a4e4:	42be      	cmp	r6, r7
 800a4e6:	d900      	bls.n	800a4ea <__ssputs_r+0x72>
 800a4e8:	463e      	mov	r6, r7
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	4641      	mov	r1, r8
 800a4ee:	6820      	ldr	r0, [r4, #0]
 800a4f0:	f000 faac 	bl	800aa4c <memmove>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	1b9b      	subs	r3, r3, r6
 800a4fa:	60a3      	str	r3, [r4, #8]
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	4433      	add	r3, r6
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	462a      	mov	r2, r5
 800a508:	f000 fad8 	bl	800aabc <_realloc_r>
 800a50c:	4606      	mov	r6, r0
 800a50e:	2800      	cmp	r0, #0
 800a510:	d1e0      	bne.n	800a4d4 <__ssputs_r+0x5c>
 800a512:	4650      	mov	r0, sl
 800a514:	6921      	ldr	r1, [r4, #16]
 800a516:	f7ff feb9 	bl	800a28c <_free_r>
 800a51a:	230c      	movs	r3, #12
 800a51c:	f8ca 3000 	str.w	r3, [sl]
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	f04f 30ff 	mov.w	r0, #4294967295
 800a526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a52a:	81a3      	strh	r3, [r4, #12]
 800a52c:	e7e9      	b.n	800a502 <__ssputs_r+0x8a>
	...

0800a530 <_svfiprintf_r>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	4698      	mov	r8, r3
 800a536:	898b      	ldrh	r3, [r1, #12]
 800a538:	4607      	mov	r7, r0
 800a53a:	061b      	lsls	r3, r3, #24
 800a53c:	460d      	mov	r5, r1
 800a53e:	4614      	mov	r4, r2
 800a540:	b09d      	sub	sp, #116	@ 0x74
 800a542:	d510      	bpl.n	800a566 <_svfiprintf_r+0x36>
 800a544:	690b      	ldr	r3, [r1, #16]
 800a546:	b973      	cbnz	r3, 800a566 <_svfiprintf_r+0x36>
 800a548:	2140      	movs	r1, #64	@ 0x40
 800a54a:	f7ff ff09 	bl	800a360 <_malloc_r>
 800a54e:	6028      	str	r0, [r5, #0]
 800a550:	6128      	str	r0, [r5, #16]
 800a552:	b930      	cbnz	r0, 800a562 <_svfiprintf_r+0x32>
 800a554:	230c      	movs	r3, #12
 800a556:	603b      	str	r3, [r7, #0]
 800a558:	f04f 30ff 	mov.w	r0, #4294967295
 800a55c:	b01d      	add	sp, #116	@ 0x74
 800a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a562:	2340      	movs	r3, #64	@ 0x40
 800a564:	616b      	str	r3, [r5, #20]
 800a566:	2300      	movs	r3, #0
 800a568:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56a:	2320      	movs	r3, #32
 800a56c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a570:	2330      	movs	r3, #48	@ 0x30
 800a572:	f04f 0901 	mov.w	r9, #1
 800a576:	f8cd 800c 	str.w	r8, [sp, #12]
 800a57a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a714 <_svfiprintf_r+0x1e4>
 800a57e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a582:	4623      	mov	r3, r4
 800a584:	469a      	mov	sl, r3
 800a586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a58a:	b10a      	cbz	r2, 800a590 <_svfiprintf_r+0x60>
 800a58c:	2a25      	cmp	r2, #37	@ 0x25
 800a58e:	d1f9      	bne.n	800a584 <_svfiprintf_r+0x54>
 800a590:	ebba 0b04 	subs.w	fp, sl, r4
 800a594:	d00b      	beq.n	800a5ae <_svfiprintf_r+0x7e>
 800a596:	465b      	mov	r3, fp
 800a598:	4622      	mov	r2, r4
 800a59a:	4629      	mov	r1, r5
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff ff6b 	bl	800a478 <__ssputs_r>
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	f000 80a7 	beq.w	800a6f6 <_svfiprintf_r+0x1c6>
 800a5a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5aa:	445a      	add	r2, fp
 800a5ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 809f 	beq.w	800a6f6 <_svfiprintf_r+0x1c6>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a5be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c2:	f10a 0a01 	add.w	sl, sl, #1
 800a5c6:	9304      	str	r3, [sp, #16]
 800a5c8:	9307      	str	r3, [sp, #28]
 800a5ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5d0:	4654      	mov	r4, sl
 800a5d2:	2205      	movs	r2, #5
 800a5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d8:	484e      	ldr	r0, [pc, #312]	@ (800a714 <_svfiprintf_r+0x1e4>)
 800a5da:	f000 fa61 	bl	800aaa0 <memchr>
 800a5de:	9a04      	ldr	r2, [sp, #16]
 800a5e0:	b9d8      	cbnz	r0, 800a61a <_svfiprintf_r+0xea>
 800a5e2:	06d0      	lsls	r0, r2, #27
 800a5e4:	bf44      	itt	mi
 800a5e6:	2320      	movmi	r3, #32
 800a5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5ec:	0711      	lsls	r1, r2, #28
 800a5ee:	bf44      	itt	mi
 800a5f0:	232b      	movmi	r3, #43	@ 0x2b
 800a5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5fc:	d015      	beq.n	800a62a <_svfiprintf_r+0xfa>
 800a5fe:	4654      	mov	r4, sl
 800a600:	2000      	movs	r0, #0
 800a602:	f04f 0c0a 	mov.w	ip, #10
 800a606:	9a07      	ldr	r2, [sp, #28]
 800a608:	4621      	mov	r1, r4
 800a60a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a60e:	3b30      	subs	r3, #48	@ 0x30
 800a610:	2b09      	cmp	r3, #9
 800a612:	d94b      	bls.n	800a6ac <_svfiprintf_r+0x17c>
 800a614:	b1b0      	cbz	r0, 800a644 <_svfiprintf_r+0x114>
 800a616:	9207      	str	r2, [sp, #28]
 800a618:	e014      	b.n	800a644 <_svfiprintf_r+0x114>
 800a61a:	eba0 0308 	sub.w	r3, r0, r8
 800a61e:	fa09 f303 	lsl.w	r3, r9, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	46a2      	mov	sl, r4
 800a626:	9304      	str	r3, [sp, #16]
 800a628:	e7d2      	b.n	800a5d0 <_svfiprintf_r+0xa0>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	1d19      	adds	r1, r3, #4
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	9103      	str	r1, [sp, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	bfbb      	ittet	lt
 800a636:	425b      	neglt	r3, r3
 800a638:	f042 0202 	orrlt.w	r2, r2, #2
 800a63c:	9307      	strge	r3, [sp, #28]
 800a63e:	9307      	strlt	r3, [sp, #28]
 800a640:	bfb8      	it	lt
 800a642:	9204      	strlt	r2, [sp, #16]
 800a644:	7823      	ldrb	r3, [r4, #0]
 800a646:	2b2e      	cmp	r3, #46	@ 0x2e
 800a648:	d10a      	bne.n	800a660 <_svfiprintf_r+0x130>
 800a64a:	7863      	ldrb	r3, [r4, #1]
 800a64c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a64e:	d132      	bne.n	800a6b6 <_svfiprintf_r+0x186>
 800a650:	9b03      	ldr	r3, [sp, #12]
 800a652:	3402      	adds	r4, #2
 800a654:	1d1a      	adds	r2, r3, #4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	9203      	str	r2, [sp, #12]
 800a65a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a65e:	9305      	str	r3, [sp, #20]
 800a660:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a718 <_svfiprintf_r+0x1e8>
 800a664:	2203      	movs	r2, #3
 800a666:	4650      	mov	r0, sl
 800a668:	7821      	ldrb	r1, [r4, #0]
 800a66a:	f000 fa19 	bl	800aaa0 <memchr>
 800a66e:	b138      	cbz	r0, 800a680 <_svfiprintf_r+0x150>
 800a670:	2240      	movs	r2, #64	@ 0x40
 800a672:	9b04      	ldr	r3, [sp, #16]
 800a674:	eba0 000a 	sub.w	r0, r0, sl
 800a678:	4082      	lsls	r2, r0
 800a67a:	4313      	orrs	r3, r2
 800a67c:	3401      	adds	r4, #1
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	2206      	movs	r2, #6
 800a686:	4825      	ldr	r0, [pc, #148]	@ (800a71c <_svfiprintf_r+0x1ec>)
 800a688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a68c:	f000 fa08 	bl	800aaa0 <memchr>
 800a690:	2800      	cmp	r0, #0
 800a692:	d036      	beq.n	800a702 <_svfiprintf_r+0x1d2>
 800a694:	4b22      	ldr	r3, [pc, #136]	@ (800a720 <_svfiprintf_r+0x1f0>)
 800a696:	bb1b      	cbnz	r3, 800a6e0 <_svfiprintf_r+0x1b0>
 800a698:	9b03      	ldr	r3, [sp, #12]
 800a69a:	3307      	adds	r3, #7
 800a69c:	f023 0307 	bic.w	r3, r3, #7
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	9303      	str	r3, [sp, #12]
 800a6a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a6:	4433      	add	r3, r6
 800a6a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6aa:	e76a      	b.n	800a582 <_svfiprintf_r+0x52>
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b4:	e7a8      	b.n	800a608 <_svfiprintf_r+0xd8>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f04f 0c0a 	mov.w	ip, #10
 800a6bc:	4619      	mov	r1, r3
 800a6be:	3401      	adds	r4, #1
 800a6c0:	9305      	str	r3, [sp, #20]
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6c8:	3a30      	subs	r2, #48	@ 0x30
 800a6ca:	2a09      	cmp	r2, #9
 800a6cc:	d903      	bls.n	800a6d6 <_svfiprintf_r+0x1a6>
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0c6      	beq.n	800a660 <_svfiprintf_r+0x130>
 800a6d2:	9105      	str	r1, [sp, #20]
 800a6d4:	e7c4      	b.n	800a660 <_svfiprintf_r+0x130>
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	2301      	movs	r3, #1
 800a6da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6de:	e7f0      	b.n	800a6c2 <_svfiprintf_r+0x192>
 800a6e0:	ab03      	add	r3, sp, #12
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	462a      	mov	r2, r5
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a724 <_svfiprintf_r+0x1f4>)
 800a6ea:	a904      	add	r1, sp, #16
 800a6ec:	f3af 8000 	nop.w
 800a6f0:	1c42      	adds	r2, r0, #1
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	d1d6      	bne.n	800a6a4 <_svfiprintf_r+0x174>
 800a6f6:	89ab      	ldrh	r3, [r5, #12]
 800a6f8:	065b      	lsls	r3, r3, #25
 800a6fa:	f53f af2d 	bmi.w	800a558 <_svfiprintf_r+0x28>
 800a6fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a700:	e72c      	b.n	800a55c <_svfiprintf_r+0x2c>
 800a702:	ab03      	add	r3, sp, #12
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	462a      	mov	r2, r5
 800a708:	4638      	mov	r0, r7
 800a70a:	4b06      	ldr	r3, [pc, #24]	@ (800a724 <_svfiprintf_r+0x1f4>)
 800a70c:	a904      	add	r1, sp, #16
 800a70e:	f000 f87d 	bl	800a80c <_printf_i>
 800a712:	e7ed      	b.n	800a6f0 <_svfiprintf_r+0x1c0>
 800a714:	0800abbe 	.word	0x0800abbe
 800a718:	0800abc4 	.word	0x0800abc4
 800a71c:	0800abc8 	.word	0x0800abc8
 800a720:	00000000 	.word	0x00000000
 800a724:	0800a479 	.word	0x0800a479

0800a728 <_printf_common>:
 800a728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a72c:	4616      	mov	r6, r2
 800a72e:	4698      	mov	r8, r3
 800a730:	688a      	ldr	r2, [r1, #8]
 800a732:	690b      	ldr	r3, [r1, #16]
 800a734:	4607      	mov	r7, r0
 800a736:	4293      	cmp	r3, r2
 800a738:	bfb8      	it	lt
 800a73a:	4613      	movlt	r3, r2
 800a73c:	6033      	str	r3, [r6, #0]
 800a73e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a742:	460c      	mov	r4, r1
 800a744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a748:	b10a      	cbz	r2, 800a74e <_printf_common+0x26>
 800a74a:	3301      	adds	r3, #1
 800a74c:	6033      	str	r3, [r6, #0]
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	0699      	lsls	r1, r3, #26
 800a752:	bf42      	ittt	mi
 800a754:	6833      	ldrmi	r3, [r6, #0]
 800a756:	3302      	addmi	r3, #2
 800a758:	6033      	strmi	r3, [r6, #0]
 800a75a:	6825      	ldr	r5, [r4, #0]
 800a75c:	f015 0506 	ands.w	r5, r5, #6
 800a760:	d106      	bne.n	800a770 <_printf_common+0x48>
 800a762:	f104 0a19 	add.w	sl, r4, #25
 800a766:	68e3      	ldr	r3, [r4, #12]
 800a768:	6832      	ldr	r2, [r6, #0]
 800a76a:	1a9b      	subs	r3, r3, r2
 800a76c:	42ab      	cmp	r3, r5
 800a76e:	dc2b      	bgt.n	800a7c8 <_printf_common+0xa0>
 800a770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a774:	6822      	ldr	r2, [r4, #0]
 800a776:	3b00      	subs	r3, #0
 800a778:	bf18      	it	ne
 800a77a:	2301      	movne	r3, #1
 800a77c:	0692      	lsls	r2, r2, #26
 800a77e:	d430      	bmi.n	800a7e2 <_printf_common+0xba>
 800a780:	4641      	mov	r1, r8
 800a782:	4638      	mov	r0, r7
 800a784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a788:	47c8      	blx	r9
 800a78a:	3001      	adds	r0, #1
 800a78c:	d023      	beq.n	800a7d6 <_printf_common+0xae>
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	6922      	ldr	r2, [r4, #16]
 800a792:	f003 0306 	and.w	r3, r3, #6
 800a796:	2b04      	cmp	r3, #4
 800a798:	bf14      	ite	ne
 800a79a:	2500      	movne	r5, #0
 800a79c:	6833      	ldreq	r3, [r6, #0]
 800a79e:	f04f 0600 	mov.w	r6, #0
 800a7a2:	bf08      	it	eq
 800a7a4:	68e5      	ldreq	r5, [r4, #12]
 800a7a6:	f104 041a 	add.w	r4, r4, #26
 800a7aa:	bf08      	it	eq
 800a7ac:	1aed      	subeq	r5, r5, r3
 800a7ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a7b2:	bf08      	it	eq
 800a7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	bfc4      	itt	gt
 800a7bc:	1a9b      	subgt	r3, r3, r2
 800a7be:	18ed      	addgt	r5, r5, r3
 800a7c0:	42b5      	cmp	r5, r6
 800a7c2:	d11a      	bne.n	800a7fa <_printf_common+0xd2>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e008      	b.n	800a7da <_printf_common+0xb2>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4652      	mov	r2, sl
 800a7cc:	4641      	mov	r1, r8
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	47c8      	blx	r9
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d103      	bne.n	800a7de <_printf_common+0xb6>
 800a7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	3501      	adds	r5, #1
 800a7e0:	e7c1      	b.n	800a766 <_printf_common+0x3e>
 800a7e2:	2030      	movs	r0, #48	@ 0x30
 800a7e4:	18e1      	adds	r1, r4, r3
 800a7e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7f0:	4422      	add	r2, r4
 800a7f2:	3302      	adds	r3, #2
 800a7f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7f8:	e7c2      	b.n	800a780 <_printf_common+0x58>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	4641      	mov	r1, r8
 800a800:	4638      	mov	r0, r7
 800a802:	47c8      	blx	r9
 800a804:	3001      	adds	r0, #1
 800a806:	d0e6      	beq.n	800a7d6 <_printf_common+0xae>
 800a808:	3601      	adds	r6, #1
 800a80a:	e7d9      	b.n	800a7c0 <_printf_common+0x98>

0800a80c <_printf_i>:
 800a80c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a810:	7e0f      	ldrb	r7, [r1, #24]
 800a812:	4691      	mov	r9, r2
 800a814:	2f78      	cmp	r7, #120	@ 0x78
 800a816:	4680      	mov	r8, r0
 800a818:	460c      	mov	r4, r1
 800a81a:	469a      	mov	sl, r3
 800a81c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a81e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a822:	d807      	bhi.n	800a834 <_printf_i+0x28>
 800a824:	2f62      	cmp	r7, #98	@ 0x62
 800a826:	d80a      	bhi.n	800a83e <_printf_i+0x32>
 800a828:	2f00      	cmp	r7, #0
 800a82a:	f000 80d3 	beq.w	800a9d4 <_printf_i+0x1c8>
 800a82e:	2f58      	cmp	r7, #88	@ 0x58
 800a830:	f000 80ba 	beq.w	800a9a8 <_printf_i+0x19c>
 800a834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a83c:	e03a      	b.n	800a8b4 <_printf_i+0xa8>
 800a83e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a842:	2b15      	cmp	r3, #21
 800a844:	d8f6      	bhi.n	800a834 <_printf_i+0x28>
 800a846:	a101      	add	r1, pc, #4	@ (adr r1, 800a84c <_printf_i+0x40>)
 800a848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a84c:	0800a8a5 	.word	0x0800a8a5
 800a850:	0800a8b9 	.word	0x0800a8b9
 800a854:	0800a835 	.word	0x0800a835
 800a858:	0800a835 	.word	0x0800a835
 800a85c:	0800a835 	.word	0x0800a835
 800a860:	0800a835 	.word	0x0800a835
 800a864:	0800a8b9 	.word	0x0800a8b9
 800a868:	0800a835 	.word	0x0800a835
 800a86c:	0800a835 	.word	0x0800a835
 800a870:	0800a835 	.word	0x0800a835
 800a874:	0800a835 	.word	0x0800a835
 800a878:	0800a9bb 	.word	0x0800a9bb
 800a87c:	0800a8e3 	.word	0x0800a8e3
 800a880:	0800a975 	.word	0x0800a975
 800a884:	0800a835 	.word	0x0800a835
 800a888:	0800a835 	.word	0x0800a835
 800a88c:	0800a9dd 	.word	0x0800a9dd
 800a890:	0800a835 	.word	0x0800a835
 800a894:	0800a8e3 	.word	0x0800a8e3
 800a898:	0800a835 	.word	0x0800a835
 800a89c:	0800a835 	.word	0x0800a835
 800a8a0:	0800a97d 	.word	0x0800a97d
 800a8a4:	6833      	ldr	r3, [r6, #0]
 800a8a6:	1d1a      	adds	r2, r3, #4
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6032      	str	r2, [r6, #0]
 800a8ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e09e      	b.n	800a9f6 <_printf_i+0x1ea>
 800a8b8:	6833      	ldr	r3, [r6, #0]
 800a8ba:	6820      	ldr	r0, [r4, #0]
 800a8bc:	1d19      	adds	r1, r3, #4
 800a8be:	6031      	str	r1, [r6, #0]
 800a8c0:	0606      	lsls	r6, r0, #24
 800a8c2:	d501      	bpl.n	800a8c8 <_printf_i+0xbc>
 800a8c4:	681d      	ldr	r5, [r3, #0]
 800a8c6:	e003      	b.n	800a8d0 <_printf_i+0xc4>
 800a8c8:	0645      	lsls	r5, r0, #25
 800a8ca:	d5fb      	bpl.n	800a8c4 <_printf_i+0xb8>
 800a8cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	da03      	bge.n	800a8dc <_printf_i+0xd0>
 800a8d4:	232d      	movs	r3, #45	@ 0x2d
 800a8d6:	426d      	negs	r5, r5
 800a8d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8dc:	230a      	movs	r3, #10
 800a8de:	4859      	ldr	r0, [pc, #356]	@ (800aa44 <_printf_i+0x238>)
 800a8e0:	e011      	b.n	800a906 <_printf_i+0xfa>
 800a8e2:	6821      	ldr	r1, [r4, #0]
 800a8e4:	6833      	ldr	r3, [r6, #0]
 800a8e6:	0608      	lsls	r0, r1, #24
 800a8e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8ec:	d402      	bmi.n	800a8f4 <_printf_i+0xe8>
 800a8ee:	0649      	lsls	r1, r1, #25
 800a8f0:	bf48      	it	mi
 800a8f2:	b2ad      	uxthmi	r5, r5
 800a8f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8f6:	6033      	str	r3, [r6, #0]
 800a8f8:	bf14      	ite	ne
 800a8fa:	230a      	movne	r3, #10
 800a8fc:	2308      	moveq	r3, #8
 800a8fe:	4851      	ldr	r0, [pc, #324]	@ (800aa44 <_printf_i+0x238>)
 800a900:	2100      	movs	r1, #0
 800a902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a906:	6866      	ldr	r6, [r4, #4]
 800a908:	2e00      	cmp	r6, #0
 800a90a:	bfa8      	it	ge
 800a90c:	6821      	ldrge	r1, [r4, #0]
 800a90e:	60a6      	str	r6, [r4, #8]
 800a910:	bfa4      	itt	ge
 800a912:	f021 0104 	bicge.w	r1, r1, #4
 800a916:	6021      	strge	r1, [r4, #0]
 800a918:	b90d      	cbnz	r5, 800a91e <_printf_i+0x112>
 800a91a:	2e00      	cmp	r6, #0
 800a91c:	d04b      	beq.n	800a9b6 <_printf_i+0x1aa>
 800a91e:	4616      	mov	r6, r2
 800a920:	fbb5 f1f3 	udiv	r1, r5, r3
 800a924:	fb03 5711 	mls	r7, r3, r1, r5
 800a928:	5dc7      	ldrb	r7, [r0, r7]
 800a92a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a92e:	462f      	mov	r7, r5
 800a930:	42bb      	cmp	r3, r7
 800a932:	460d      	mov	r5, r1
 800a934:	d9f4      	bls.n	800a920 <_printf_i+0x114>
 800a936:	2b08      	cmp	r3, #8
 800a938:	d10b      	bne.n	800a952 <_printf_i+0x146>
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	07df      	lsls	r7, r3, #31
 800a93e:	d508      	bpl.n	800a952 <_printf_i+0x146>
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	6861      	ldr	r1, [r4, #4]
 800a944:	4299      	cmp	r1, r3
 800a946:	bfde      	ittt	le
 800a948:	2330      	movle	r3, #48	@ 0x30
 800a94a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a94e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a952:	1b92      	subs	r2, r2, r6
 800a954:	6122      	str	r2, [r4, #16]
 800a956:	464b      	mov	r3, r9
 800a958:	4621      	mov	r1, r4
 800a95a:	4640      	mov	r0, r8
 800a95c:	f8cd a000 	str.w	sl, [sp]
 800a960:	aa03      	add	r2, sp, #12
 800a962:	f7ff fee1 	bl	800a728 <_printf_common>
 800a966:	3001      	adds	r0, #1
 800a968:	d14a      	bne.n	800aa00 <_printf_i+0x1f4>
 800a96a:	f04f 30ff 	mov.w	r0, #4294967295
 800a96e:	b004      	add	sp, #16
 800a970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	f043 0320 	orr.w	r3, r3, #32
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	2778      	movs	r7, #120	@ 0x78
 800a97e:	4832      	ldr	r0, [pc, #200]	@ (800aa48 <_printf_i+0x23c>)
 800a980:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	6831      	ldr	r1, [r6, #0]
 800a988:	061f      	lsls	r7, r3, #24
 800a98a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a98e:	d402      	bmi.n	800a996 <_printf_i+0x18a>
 800a990:	065f      	lsls	r7, r3, #25
 800a992:	bf48      	it	mi
 800a994:	b2ad      	uxthmi	r5, r5
 800a996:	6031      	str	r1, [r6, #0]
 800a998:	07d9      	lsls	r1, r3, #31
 800a99a:	bf44      	itt	mi
 800a99c:	f043 0320 	orrmi.w	r3, r3, #32
 800a9a0:	6023      	strmi	r3, [r4, #0]
 800a9a2:	b11d      	cbz	r5, 800a9ac <_printf_i+0x1a0>
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	e7ab      	b.n	800a900 <_printf_i+0xf4>
 800a9a8:	4826      	ldr	r0, [pc, #152]	@ (800aa44 <_printf_i+0x238>)
 800a9aa:	e7e9      	b.n	800a980 <_printf_i+0x174>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	f023 0320 	bic.w	r3, r3, #32
 800a9b2:	6023      	str	r3, [r4, #0]
 800a9b4:	e7f6      	b.n	800a9a4 <_printf_i+0x198>
 800a9b6:	4616      	mov	r6, r2
 800a9b8:	e7bd      	b.n	800a936 <_printf_i+0x12a>
 800a9ba:	6833      	ldr	r3, [r6, #0]
 800a9bc:	6825      	ldr	r5, [r4, #0]
 800a9be:	1d18      	adds	r0, r3, #4
 800a9c0:	6961      	ldr	r1, [r4, #20]
 800a9c2:	6030      	str	r0, [r6, #0]
 800a9c4:	062e      	lsls	r6, r5, #24
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	d501      	bpl.n	800a9ce <_printf_i+0x1c2>
 800a9ca:	6019      	str	r1, [r3, #0]
 800a9cc:	e002      	b.n	800a9d4 <_printf_i+0x1c8>
 800a9ce:	0668      	lsls	r0, r5, #25
 800a9d0:	d5fb      	bpl.n	800a9ca <_printf_i+0x1be>
 800a9d2:	8019      	strh	r1, [r3, #0]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4616      	mov	r6, r2
 800a9d8:	6123      	str	r3, [r4, #16]
 800a9da:	e7bc      	b.n	800a956 <_printf_i+0x14a>
 800a9dc:	6833      	ldr	r3, [r6, #0]
 800a9de:	2100      	movs	r1, #0
 800a9e0:	1d1a      	adds	r2, r3, #4
 800a9e2:	6032      	str	r2, [r6, #0]
 800a9e4:	681e      	ldr	r6, [r3, #0]
 800a9e6:	6862      	ldr	r2, [r4, #4]
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f000 f859 	bl	800aaa0 <memchr>
 800a9ee:	b108      	cbz	r0, 800a9f4 <_printf_i+0x1e8>
 800a9f0:	1b80      	subs	r0, r0, r6
 800a9f2:	6060      	str	r0, [r4, #4]
 800a9f4:	6863      	ldr	r3, [r4, #4]
 800a9f6:	6123      	str	r3, [r4, #16]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9fe:	e7aa      	b.n	800a956 <_printf_i+0x14a>
 800aa00:	4632      	mov	r2, r6
 800aa02:	4649      	mov	r1, r9
 800aa04:	4640      	mov	r0, r8
 800aa06:	6923      	ldr	r3, [r4, #16]
 800aa08:	47d0      	blx	sl
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d0ad      	beq.n	800a96a <_printf_i+0x15e>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	079b      	lsls	r3, r3, #30
 800aa12:	d413      	bmi.n	800aa3c <_printf_i+0x230>
 800aa14:	68e0      	ldr	r0, [r4, #12]
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	4298      	cmp	r0, r3
 800aa1a:	bfb8      	it	lt
 800aa1c:	4618      	movlt	r0, r3
 800aa1e:	e7a6      	b.n	800a96e <_printf_i+0x162>
 800aa20:	2301      	movs	r3, #1
 800aa22:	4632      	mov	r2, r6
 800aa24:	4649      	mov	r1, r9
 800aa26:	4640      	mov	r0, r8
 800aa28:	47d0      	blx	sl
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	d09d      	beq.n	800a96a <_printf_i+0x15e>
 800aa2e:	3501      	adds	r5, #1
 800aa30:	68e3      	ldr	r3, [r4, #12]
 800aa32:	9903      	ldr	r1, [sp, #12]
 800aa34:	1a5b      	subs	r3, r3, r1
 800aa36:	42ab      	cmp	r3, r5
 800aa38:	dcf2      	bgt.n	800aa20 <_printf_i+0x214>
 800aa3a:	e7eb      	b.n	800aa14 <_printf_i+0x208>
 800aa3c:	2500      	movs	r5, #0
 800aa3e:	f104 0619 	add.w	r6, r4, #25
 800aa42:	e7f5      	b.n	800aa30 <_printf_i+0x224>
 800aa44:	0800abcf 	.word	0x0800abcf
 800aa48:	0800abe0 	.word	0x0800abe0

0800aa4c <memmove>:
 800aa4c:	4288      	cmp	r0, r1
 800aa4e:	b510      	push	{r4, lr}
 800aa50:	eb01 0402 	add.w	r4, r1, r2
 800aa54:	d902      	bls.n	800aa5c <memmove+0x10>
 800aa56:	4284      	cmp	r4, r0
 800aa58:	4623      	mov	r3, r4
 800aa5a:	d807      	bhi.n	800aa6c <memmove+0x20>
 800aa5c:	1e43      	subs	r3, r0, #1
 800aa5e:	42a1      	cmp	r1, r4
 800aa60:	d008      	beq.n	800aa74 <memmove+0x28>
 800aa62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa6a:	e7f8      	b.n	800aa5e <memmove+0x12>
 800aa6c:	4601      	mov	r1, r0
 800aa6e:	4402      	add	r2, r0
 800aa70:	428a      	cmp	r2, r1
 800aa72:	d100      	bne.n	800aa76 <memmove+0x2a>
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa7e:	e7f7      	b.n	800aa70 <memmove+0x24>

0800aa80 <_sbrk_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	2300      	movs	r3, #0
 800aa84:	4d05      	ldr	r5, [pc, #20]	@ (800aa9c <_sbrk_r+0x1c>)
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	f7f6 fea2 	bl	80017d4 <_sbrk>
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d102      	bne.n	800aa9a <_sbrk_r+0x1a>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	b103      	cbz	r3, 800aa9a <_sbrk_r+0x1a>
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	200016bc 	.word	0x200016bc

0800aaa0 <memchr>:
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	b510      	push	{r4, lr}
 800aaa4:	b2c9      	uxtb	r1, r1
 800aaa6:	4402      	add	r2, r0
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	d101      	bne.n	800aab2 <memchr+0x12>
 800aaae:	2000      	movs	r0, #0
 800aab0:	e003      	b.n	800aaba <memchr+0x1a>
 800aab2:	7804      	ldrb	r4, [r0, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	428c      	cmp	r4, r1
 800aab8:	d1f6      	bne.n	800aaa8 <memchr+0x8>
 800aaba:	bd10      	pop	{r4, pc}

0800aabc <_realloc_r>:
 800aabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac0:	4680      	mov	r8, r0
 800aac2:	4615      	mov	r5, r2
 800aac4:	460c      	mov	r4, r1
 800aac6:	b921      	cbnz	r1, 800aad2 <_realloc_r+0x16>
 800aac8:	4611      	mov	r1, r2
 800aaca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aace:	f7ff bc47 	b.w	800a360 <_malloc_r>
 800aad2:	b92a      	cbnz	r2, 800aae0 <_realloc_r+0x24>
 800aad4:	f7ff fbda 	bl	800a28c <_free_r>
 800aad8:	2400      	movs	r4, #0
 800aada:	4620      	mov	r0, r4
 800aadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae0:	f000 f81a 	bl	800ab18 <_malloc_usable_size_r>
 800aae4:	4285      	cmp	r5, r0
 800aae6:	4606      	mov	r6, r0
 800aae8:	d802      	bhi.n	800aaf0 <_realloc_r+0x34>
 800aaea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aaee:	d8f4      	bhi.n	800aada <_realloc_r+0x1e>
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	f7ff fc34 	bl	800a360 <_malloc_r>
 800aaf8:	4607      	mov	r7, r0
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d0ec      	beq.n	800aad8 <_realloc_r+0x1c>
 800aafe:	42b5      	cmp	r5, r6
 800ab00:	462a      	mov	r2, r5
 800ab02:	4621      	mov	r1, r4
 800ab04:	bf28      	it	cs
 800ab06:	4632      	movcs	r2, r6
 800ab08:	f7ff fbb2 	bl	800a270 <memcpy>
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4640      	mov	r0, r8
 800ab10:	f7ff fbbc 	bl	800a28c <_free_r>
 800ab14:	463c      	mov	r4, r7
 800ab16:	e7e0      	b.n	800aada <_realloc_r+0x1e>

0800ab18 <_malloc_usable_size_r>:
 800ab18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab1c:	1f18      	subs	r0, r3, #4
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bfbc      	itt	lt
 800ab22:	580b      	ldrlt	r3, [r1, r0]
 800ab24:	18c0      	addlt	r0, r0, r3
 800ab26:	4770      	bx	lr

0800ab28 <_init>:
 800ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2a:	bf00      	nop
 800ab2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab2e:	bc08      	pop	{r3}
 800ab30:	469e      	mov	lr, r3
 800ab32:	4770      	bx	lr

0800ab34 <_fini>:
 800ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab36:	bf00      	nop
 800ab38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab3a:	bc08      	pop	{r3}
 800ab3c:	469e      	mov	lr, r3
 800ab3e:	4770      	bx	lr
