
Gateway_RFID2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd14  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800be20  0800be20  0000ce20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf14  0800bf14  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf14  0800bf14  0000cf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf1c  0800bf1c  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf1c  0800bf1c  0000cf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf20  0800bf20  0000cf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bf24  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015bc  200001d8  0800c0fc  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001794  0800c0fc  0000d794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aeaf  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f4  00000000  00000000  000280b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  0002c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001316  00000000  00000000  0002da40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd23  00000000  00000000  0002ed56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebfa  00000000  00000000  0004aa79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ce0  00000000  00000000  00069673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d18  00000000  00000000  000fe398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001050b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800be08 	.word	0x0800be08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800be08 	.word	0x0800be08

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <lcd_set_i2c>:

#define SLAVE_ADDRESS_LCD 0x4E // thay đổi địa chỉ này tùy thuộc vào cấu hình của bạn
/* vì chỉ dùng 4 bit cao làm 4 bit truyền dữ liệu nên phải truyền mỗi byte thành 2 lần */
/* 3 bit thấp là các chân En, RW, RS nên cũng cần phải đặt luôn trong mỗi lần truyền */

void lcd_set_i2c(I2C_HandleTypeDef* hi2c) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    current_hi2c = hi2c;
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <lcd_set_i2c+0x18>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000000 	.word	0x20000000

08000680 <lcd_send_cmd>:

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f023 030f 	bic.w	r3, r3, #15
 8000690:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	f043 030c 	orr.w	r3, r3, #12
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	f043 0308 	orr.w	r3, r3, #8
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	f043 030c 	orr.w	r3, r3, #12
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(current_hi2c, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <lcd_send_cmd+0x5c>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	f107 0208 	add.w	r2, r7, #8
 80006c8:	2364      	movs	r3, #100	@ 0x64
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2304      	movs	r3, #4
 80006ce:	214e      	movs	r1, #78	@ 0x4e
 80006d0:	f002 f82a 	bl	8002728 <HAL_I2C_Master_Transmit>
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000000 	.word	0x20000000

080006e0 <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	f043 030d 	orr.w	r3, r3, #13
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	f043 0309 	orr.w	r3, r3, #9
 8000708:	b2db      	uxtb	r3, r3
 800070a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	f043 030d 	orr.w	r3, r3, #13
 8000712:	b2db      	uxtb	r3, r3
 8000714:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f043 0309 	orr.w	r3, r3, #9
 800071c:	b2db      	uxtb	r3, r3
 800071e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(current_hi2c, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <lcd_send_data+0x5c>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	f107 0208 	add.w	r2, r7, #8
 8000728:	2364      	movs	r3, #100	@ 0x64
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2304      	movs	r3, #4
 800072e:	214e      	movs	r1, #78	@ 0x4e
 8000730:	f001 fffa 	bl	8002728 <HAL_I2C_Master_Transmit>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000000 	.word	0x20000000

08000740 <lcd_clear>:

void lcd_clear (void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 8000746:	2080      	movs	r0, #128	@ 0x80
 8000748:	f7ff ff9a 	bl	8000680 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	e005      	b.n	800075e <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 8000752:	2020      	movs	r0, #32
 8000754:	f7ff ffc4 	bl	80006e0 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3301      	adds	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b45      	cmp	r3, #69	@ 0x45
 8000762:	ddf6      	ble.n	8000752 <lcd_clear+0x12>
	}
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
    switch (row)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <lcd_put_cur+0x18>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d005      	beq.n	8000790 <lcd_put_cur+0x22>
 8000784:	e009      	b.n	800079a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	603b      	str	r3, [r7, #0]
            break;
 800078e:	e004      	b.n	800079a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000796:	603b      	str	r3, [r7, #0]
            break;
 8000798:	bf00      	nop
    }

    lcd_send_cmd(col);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff6e 	bl	8000680 <lcd_send_cmd>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <lcd_init>:

void lcd_init (void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 80007b0:	2032      	movs	r0, #50	@ 0x32
 80007b2:	f001 fac5 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd(0x30);
 80007b6:	2030      	movs	r0, #48	@ 0x30
 80007b8:	f7ff ff62 	bl	8000680 <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 80007bc:	2005      	movs	r0, #5
 80007be:	f001 fabf 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd(0x30);
 80007c2:	2030      	movs	r0, #48	@ 0x30
 80007c4:	f7ff ff5c 	bl	8000680 <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 80007c8:	2001      	movs	r0, #1
 80007ca:	f001 fab9 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd(0x30);
 80007ce:	2030      	movs	r0, #48	@ 0x30
 80007d0:	f7ff ff56 	bl	8000680 <lcd_send_cmd>
	HAL_Delay(10);
 80007d4:	200a      	movs	r0, #10
 80007d6:	f001 fab3 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 80007da:	2020      	movs	r0, #32
 80007dc:	f7ff ff50 	bl	8000680 <lcd_send_cmd>
	HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f001 faad 	bl	8001d40 <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f7ff ff4a 	bl	8000680 <lcd_send_cmd>
	HAL_Delay(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f001 faa7 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 80007f2:	2008      	movs	r0, #8
 80007f4:	f7ff ff44 	bl	8000680 <lcd_send_cmd>
	HAL_Delay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 faa1 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff3e 	bl	8000680 <lcd_send_cmd>
	HAL_Delay(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f001 fa9b 	bl	8001d40 <HAL_Delay>
	HAL_Delay(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f001 fa98 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 8000810:	2006      	movs	r0, #6
 8000812:	f7ff ff35 	bl	8000680 <lcd_send_cmd>
	HAL_Delay(1);
 8000816:	2001      	movs	r0, #1
 8000818:	f001 fa92 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 800081c:	200c      	movs	r0, #12
 800081e:	f7ff ff2f 	bl	8000680 <lcd_send_cmd>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}

08000826 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 800082e:	e006      	b.n	800083e <lcd_send_string+0x18>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff51 	bl	80006e0 <lcd_send_data>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f4      	bne.n	8000830 <lcd_send_string+0xa>
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <RS485_SendCommand>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RS485_SendCommand(uint8_t slaveID)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
    txBuffer_1[0] = slaveID;  // �?ịa chỉ Slave
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <RS485_SendCommand+0x2c>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
    txBuffer_1[1] = '\n';     // Ký tự kết thúc
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <RS485_SendCommand+0x2c>)
 8000862:	220a      	movs	r2, #10
 8000864:	705a      	strb	r2, [r3, #1]
    HAL_UART_Transmit(&huart1, txBuffer_1, 5, HAL_MAX_DELAY);
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2205      	movs	r2, #5
 800086c:	4903      	ldr	r1, [pc, #12]	@ (800087c <RS485_SendCommand+0x2c>)
 800086e:	4804      	ldr	r0, [pc, #16]	@ (8000880 <RS485_SendCommand+0x30>)
 8000870:	f005 fc4a 	bl	8006108 <HAL_UART_Transmit>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000268 	.word	0x20000268
 8000880:	20000438 	.word	0x20000438

08000884 <delay>:
void delay (uint16_t us)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <delay+0x2c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000896:	bf00      	nop
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <delay+0x2c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d3f9      	bcc.n	8000898 <delay+0x14>
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	200003a8 	.word	0x200003a8

080008b4 <stepper_set_rpm>:
void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 80008bc:	f643 1238 	movw	r2, #14648	@ 0x3938
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ffdb 	bl	8000884 <delay>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <stepper_half_drive>:
void stepper_half_drive (int step)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  switch (step){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b07      	cmp	r3, #7
 80008e4:	f200 80bc 	bhi.w	8000a60 <stepper_half_drive+0x188>
 80008e8:	a201      	add	r2, pc, #4	@ (adr r2, 80008f0 <stepper_half_drive+0x18>)
 80008ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ee:	bf00      	nop
 80008f0:	08000911 	.word	0x08000911
 80008f4:	0800093b 	.word	0x0800093b
 80008f8:	08000965 	.word	0x08000965
 80008fc:	0800098f 	.word	0x0800098f
 8000900:	080009b9 	.word	0x080009b9
 8000904:	080009e3 	.word	0x080009e3
 8000908:	08000a0d 	.word	0x08000a0d
 800090c:	08000a37 	.word	0x08000a37
      case 0:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	4854      	ldr	r0, [pc, #336]	@ (8000a68 <stepper_half_drive+0x190>)
 8000916:	f001 fd92 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 800091a:	2200      	movs	r2, #0
 800091c:	2102      	movs	r1, #2
 800091e:	4852      	ldr	r0, [pc, #328]	@ (8000a68 <stepper_half_drive+0x190>)
 8000920:	f001 fd8d 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 8000924:	2200      	movs	r2, #0
 8000926:	2104      	movs	r1, #4
 8000928:	484f      	ldr	r0, [pc, #316]	@ (8000a68 <stepper_half_drive+0x190>)
 800092a:	f001 fd88 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	484d      	ldr	r0, [pc, #308]	@ (8000a68 <stepper_half_drive+0x190>)
 8000934:	f001 fd83 	bl	800243e <HAL_GPIO_WritePin>
		  break;
 8000938:	e092      	b.n	8000a60 <stepper_half_drive+0x188>

	  case 1:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	484a      	ldr	r0, [pc, #296]	@ (8000a68 <stepper_half_drive+0x190>)
 8000940:	f001 fd7d 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 8000944:	2201      	movs	r2, #1
 8000946:	2102      	movs	r1, #2
 8000948:	4847      	ldr	r0, [pc, #284]	@ (8000a68 <stepper_half_drive+0x190>)
 800094a:	f001 fd78 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 800094e:	2200      	movs	r2, #0
 8000950:	2104      	movs	r1, #4
 8000952:	4845      	ldr	r0, [pc, #276]	@ (8000a68 <stepper_half_drive+0x190>)
 8000954:	f001 fd73 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	4842      	ldr	r0, [pc, #264]	@ (8000a68 <stepper_half_drive+0x190>)
 800095e:	f001 fd6e 	bl	800243e <HAL_GPIO_WritePin>
		  break;
 8000962:	e07d      	b.n	8000a60 <stepper_half_drive+0x188>

          case 2:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 8000964:	2200      	movs	r2, #0
 8000966:	2101      	movs	r1, #1
 8000968:	483f      	ldr	r0, [pc, #252]	@ (8000a68 <stepper_half_drive+0x190>)
 800096a:	f001 fd68 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 800096e:	2201      	movs	r2, #1
 8000970:	2102      	movs	r1, #2
 8000972:	483d      	ldr	r0, [pc, #244]	@ (8000a68 <stepper_half_drive+0x190>)
 8000974:	f001 fd63 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 8000978:	2200      	movs	r2, #0
 800097a:	2104      	movs	r1, #4
 800097c:	483a      	ldr	r0, [pc, #232]	@ (8000a68 <stepper_half_drive+0x190>)
 800097e:	f001 fd5e 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	4838      	ldr	r0, [pc, #224]	@ (8000a68 <stepper_half_drive+0x190>)
 8000988:	f001 fd59 	bl	800243e <HAL_GPIO_WritePin>
		  break;
 800098c:	e068      	b.n	8000a60 <stepper_half_drive+0x188>

	  case 3:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 800098e:	2200      	movs	r2, #0
 8000990:	2101      	movs	r1, #1
 8000992:	4835      	ldr	r0, [pc, #212]	@ (8000a68 <stepper_half_drive+0x190>)
 8000994:	f001 fd53 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 8000998:	2201      	movs	r2, #1
 800099a:	2102      	movs	r1, #2
 800099c:	4832      	ldr	r0, [pc, #200]	@ (8000a68 <stepper_half_drive+0x190>)
 800099e:	f001 fd4e 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN3
 80009a2:	2201      	movs	r2, #1
 80009a4:	2104      	movs	r1, #4
 80009a6:	4830      	ldr	r0, [pc, #192]	@ (8000a68 <stepper_half_drive+0x190>)
 80009a8:	f001 fd49 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	482d      	ldr	r0, [pc, #180]	@ (8000a68 <stepper_half_drive+0x190>)
 80009b2:	f001 fd44 	bl	800243e <HAL_GPIO_WritePin>
		  break;
 80009b6:	e053      	b.n	8000a60 <stepper_half_drive+0x188>

	  case 4:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	482a      	ldr	r0, [pc, #168]	@ (8000a68 <stepper_half_drive+0x190>)
 80009be:	f001 fd3e 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 80009c2:	2200      	movs	r2, #0
 80009c4:	2102      	movs	r1, #2
 80009c6:	4828      	ldr	r0, [pc, #160]	@ (8000a68 <stepper_half_drive+0x190>)
 80009c8:	f001 fd39 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN3
 80009cc:	2201      	movs	r2, #1
 80009ce:	2104      	movs	r1, #4
 80009d0:	4825      	ldr	r0, [pc, #148]	@ (8000a68 <stepper_half_drive+0x190>)
 80009d2:	f001 fd34 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN4
 80009d6:	2200      	movs	r2, #0
 80009d8:	2108      	movs	r1, #8
 80009da:	4823      	ldr	r0, [pc, #140]	@ (8000a68 <stepper_half_drive+0x190>)
 80009dc:	f001 fd2f 	bl	800243e <HAL_GPIO_WritePin>
		  break;
 80009e0:	e03e      	b.n	8000a60 <stepper_half_drive+0x188>

	  case 5:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 80009e2:	2200      	movs	r2, #0
 80009e4:	2101      	movs	r1, #1
 80009e6:	4820      	ldr	r0, [pc, #128]	@ (8000a68 <stepper_half_drive+0x190>)
 80009e8:	f001 fd29 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 80009ec:	2200      	movs	r2, #0
 80009ee:	2102      	movs	r1, #2
 80009f0:	481d      	ldr	r0, [pc, #116]	@ (8000a68 <stepper_half_drive+0x190>)
 80009f2:	f001 fd24 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN3
 80009f6:	2201      	movs	r2, #1
 80009f8:	2104      	movs	r1, #4
 80009fa:	481b      	ldr	r0, [pc, #108]	@ (8000a68 <stepper_half_drive+0x190>)
 80009fc:	f001 fd1f 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN4
 8000a00:	2201      	movs	r2, #1
 8000a02:	2108      	movs	r1, #8
 8000a04:	4818      	ldr	r0, [pc, #96]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a06:	f001 fd1a 	bl	800243e <HAL_GPIO_WritePin>
		  break;
 8000a0a:	e029      	b.n	8000a60 <stepper_half_drive+0x188>

	  case 6:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // IN1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4815      	ldr	r0, [pc, #84]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a12:	f001 fd14 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 8000a16:	2200      	movs	r2, #0
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4813      	ldr	r0, [pc, #76]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a1c:	f001 fd0f 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 8000a20:	2200      	movs	r2, #0
 8000a22:	2104      	movs	r1, #4
 8000a24:	4810      	ldr	r0, [pc, #64]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a26:	f001 fd0a 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN4
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	480e      	ldr	r0, [pc, #56]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a30:	f001 fd05 	bl	800243e <HAL_GPIO_WritePin>
		  break;
 8000a34:	e014      	b.n	8000a60 <stepper_half_drive+0x188>

	  case 7:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 8000a36:	2201      	movs	r2, #1
 8000a38:	2101      	movs	r1, #1
 8000a3a:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a3c:	f001 fcff 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	4808      	ldr	r0, [pc, #32]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a46:	f001 fcfa 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);   // IN3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a50:	f001 fcf5 	bl	800243e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN4
 8000a54:	2201      	movs	r2, #1
 8000a56:	2108      	movs	r1, #8
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <stepper_half_drive+0x190>)
 8000a5a:	f001 fcf0 	bl	800243e <HAL_GPIO_WritePin>
		  break;
 8000a5e:	bf00      	nop

	}
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40010800 	.word	0x40010800

08000a6c <stepper_step_angle>:
void stepper_step_angle (float angle, int direction, int rpm) //direction-> 0 for CK, 1 for CCK
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  float anglepersequence = 0.703125;  // 360 = 512 sequences
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <stepper_step_angle+0x8c>)
 8000a7a:	61bb      	str	r3, [r7, #24]
  int numberofsequences = (int) (angle/anglepersequence);
 8000a7c:	69b9      	ldr	r1, [r7, #24]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff fd2e 	bl	80004e0 <__aeabi_fdiv>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fdc6 	bl	8000618 <__aeabi_f2iz>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	617b      	str	r3, [r7, #20]
  for (int seq=0; seq<numberofsequences; seq++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a94:	e027      	b.n	8000ae6 <stepper_step_angle+0x7a>
  {
	if (direction == 0)  // for clockwise
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10f      	bne.n	8000abc <stepper_step_angle+0x50>
	{
      for (int step=7; step>=0; step--)
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	e008      	b.n	8000ab4 <stepper_step_angle+0x48>
	  {
	    stepper_half_drive(step);
 8000aa2:	6a38      	ldr	r0, [r7, #32]
 8000aa4:	f7ff ff18 	bl	80008d8 <stepper_half_drive>
	    stepper_set_rpm(rpm);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff03 	bl	80008b4 <stepper_set_rpm>
      for (int step=7; step>=0; step--)
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	daf3      	bge.n	8000aa2 <stepper_step_angle+0x36>
 8000aba:	e011      	b.n	8000ae0 <stepper_step_angle+0x74>
	  }
	}
	else if (direction == 1)  // for anti-clockwise
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10e      	bne.n	8000ae0 <stepper_step_angle+0x74>
	{
	  for (int step=0; step<=7; step++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	e008      	b.n	8000ada <stepper_step_angle+0x6e>
	  {
	    stepper_half_drive(step);
 8000ac8:	69f8      	ldr	r0, [r7, #28]
 8000aca:	f7ff ff05 	bl	80008d8 <stepper_half_drive>
	    stepper_set_rpm(rpm);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fef0 	bl	80008b4 <stepper_set_rpm>
	  for (int step=0; step<=7; step++)
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	ddf3      	ble.n	8000ac8 <stepper_step_angle+0x5c>
  for (int seq=0; seq<numberofsequences; seq++)
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	dbd3      	blt.n	8000a96 <stepper_step_angle+0x2a>
	  }
	}
  }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	3f340000 	.word	0x3f340000

08000afc <Stepper_rotate>:
float currentAngle = 0;
void Stepper_rotate (int angle, int rpm)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	int changeinangle = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
	changeinangle = angle-currentAngle;  // calculate the angle by which the motor needed to be rotated
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fbe0 	bl	80002d0 <__aeabi_i2f>
 8000b10:	4602      	mov	r2, r0
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <Stepper_rotate+0x88>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4619      	mov	r1, r3
 8000b18:	4610      	mov	r0, r2
 8000b1a:	f7ff fb23 	bl	8000164 <__aeabi_fsub>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd79 	bl	8000618 <__aeabi_f2iz>
 8000b26:	4603      	mov	r3, r0
 8000b28:	60fb      	str	r3, [r7, #12]
	if (changeinangle > 0.71)  // clockwise
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dd0f      	ble.n	8000b50 <Stepper_rotate+0x54>
	{
		stepper_step_angle (changeinangle,0,rpm);
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff fbcd 	bl	80002d0 <__aeabi_i2f>
 8000b36:	4603      	mov	r3, r0
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff95 	bl	8000a6c <stepper_step_angle>
		currentAngle = angle;  // save the angle as current angle
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fbc4 	bl	80002d0 <__aeabi_i2f>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <Stepper_rotate+0x88>)
 8000b4c:	6013      	str	r3, [r2, #0]
	{
		changeinangle = -(changeinangle);
		stepper_step_angle (changeinangle,1,rpm);
		currentAngle = angle;
	}
}
 8000b4e:	e014      	b.n	8000b7a <Stepper_rotate+0x7e>
	else if (changeinangle <0.71) // CCK
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	dc11      	bgt.n	8000b7a <Stepper_rotate+0x7e>
		changeinangle = -(changeinangle);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	425b      	negs	r3, r3
 8000b5a:	60fb      	str	r3, [r7, #12]
		stepper_step_angle (changeinangle,1,rpm);
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff fbb7 	bl	80002d0 <__aeabi_i2f>
 8000b62:	4603      	mov	r3, r0
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	2101      	movs	r1, #1
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff7f 	bl	8000a6c <stepper_step_angle>
		currentAngle = angle;
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fbae 	bl	80002d0 <__aeabi_i2f>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a03      	ldr	r2, [pc, #12]	@ (8000b84 <Stepper_rotate+0x88>)
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000480 	.word	0x20000480

08000b88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
     if (GPIO_Pin == GPIO_PIN_4)
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	2b10      	cmp	r3, #16
 8000b96:	d11d      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x4c>
    {
        while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)
 8000b98:	bf00      	nop
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	481f      	ldr	r0, [pc, #124]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x94>)
 8000b9e:	f001 fc37 	bl	8002410 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f8      	beq.n	8000b9a <HAL_GPIO_EXTI_Callback+0x12>
           {};
        lcd_set_i2c(&hi2c1);
 8000ba8:	481d      	ldr	r0, [pc, #116]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x98>)
 8000baa:	f7ff fd5b 	bl	8000664 <lcd_set_i2c>
        lcd_clear();
 8000bae:	f7ff fdc7 	bl	8000740 <lcd_clear>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb8:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x94>)
 8000bba:	f001 fc40 	bl	800243e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc4:	4815      	ldr	r0, [pc, #84]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x94>)
 8000bc6:	f001 fc3a 	bl	800243e <HAL_GPIO_WritePin>
        Stepper_rotate(0, 13);
 8000bca:	210d      	movs	r1, #13
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ff95 	bl	8000afc <Stepper_rotate>
         lcd_clear();
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
		 Stepper_rotate(90, 10);
    }
}
 8000bd2:	e01f      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0x8c>
    else if (GPIO_Pin == GPIO_PIN_3)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	2b08      	cmp	r3, #8
 8000bd8:	d11c      	bne.n	8000c14 <HAL_GPIO_EXTI_Callback+0x8c>
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)
 8000bda:	bf00      	nop
 8000bdc:	2110      	movs	r1, #16
 8000bde:	480f      	ldr	r0, [pc, #60]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x94>)
 8000be0:	f001 fc16 	bl	8002410 <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f8      	beq.n	8000bdc <HAL_GPIO_EXTI_Callback+0x54>
         lcd_set_i2c(&hi2c1);
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x98>)
 8000bec:	f7ff fd3a 	bl	8000664 <lcd_set_i2c>
         lcd_clear();
 8000bf0:	f7ff fda6 	bl	8000740 <lcd_clear>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x94>)
 8000bfc:	f001 fc1f 	bl	800243e <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x94>)
 8000c08:	f001 fc19 	bl	800243e <HAL_GPIO_WritePin>
		 Stepper_rotate(90, 10);
 8000c0c:	210a      	movs	r1, #10
 8000c0e:	205a      	movs	r0, #90	@ 0x5a
 8000c10:	f7ff ff74 	bl	8000afc <Stepper_rotate>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	200002a8 	.word	0x200002a8

08000c24 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <HAL_UART_RxCpltCallback+0x44>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d114      	bne.n	8000c60 <HAL_UART_RxCpltCallback+0x3c>
    {
        if (rxBuffer_1[0] == 0xF0)
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <HAL_UART_RxCpltCallback+0x48>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c3c:	d103      	bne.n	8000c46 <HAL_UART_RxCpltCallback+0x22>
        {
            numSpace_L1 = rxBuffer_1[1];
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <HAL_UART_RxCpltCallback+0x48>)
 8000c40:	785a      	ldrb	r2, [r3, #1]
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_UART_RxCpltCallback+0x4c>)
 8000c44:	701a      	strb	r2, [r3, #0]

        }

        if (rxBuffer_1[0] == 0xF1)
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_UART_RxCpltCallback+0x48>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2bf1      	cmp	r3, #241	@ 0xf1
 8000c4c:	d103      	bne.n	8000c56 <HAL_UART_RxCpltCallback+0x32>
		{
			numSpace_L2 = rxBuffer_1[1];
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <HAL_UART_RxCpltCallback+0x48>)
 8000c50:	785a      	ldrb	r2, [r3, #1]
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <HAL_UART_RxCpltCallback+0x50>)
 8000c54:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, rxBuffer_1, 5); // Continue receiving
 8000c56:	2205      	movs	r2, #5
 8000c58:	4904      	ldr	r1, [pc, #16]	@ (8000c6c <HAL_UART_RxCpltCallback+0x48>)
 8000c5a:	4807      	ldr	r0, [pc, #28]	@ (8000c78 <HAL_UART_RxCpltCallback+0x54>)
 8000c5c:	f005 fadf 	bl	800621e <HAL_UART_Receive_IT>
     }
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	20000270 	.word	0x20000270
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000009 	.word	0x20000009
 8000c78:	20000438 	.word	0x20000438

08000c7c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)  // Kiểm tra nếu ngắt từ Timer 3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d118      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x44>
    {
    	if (node_num==0)
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d108      	bne.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x2c>
    	{
    		RS485_SendCommand(slaveID_lst[0]);
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fdd8 	bl	8000850 <RS485_SendCommand>
    		node_num = 1;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
    	{
			RS485_SendCommand(slaveID_lst[1]);
			node_num = 0;
		}
    }
}
 8000ca6:	e00b      	b.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x44>
    	}else if (node_num==1)
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d107      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x44>
			RS485_SendCommand(slaveID_lst[1]);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cb2:	785b      	ldrb	r3, [r3, #1]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fdcb 	bl	8000850 <RS485_SendCommand>
			node_num = 0;
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40000800 	.word	0x40000800
 8000ccc:	20000296 	.word	0x20000296
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 ffcf 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f929 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f000 fadb 	bl	800129c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ce6:	f000 f97f 	bl	8000fe8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000cea:	f009 ff27 	bl	800ab3c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000cee:	f000 f9d7 	bl	80010a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000cf2:	f000 fa0b 	bl	800110c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000cf6:	f000 faa7 	bl	8001248 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000cfa:	f000 f9a3 	bl	8001044 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000cfe:	f000 fa55 	bl	80011ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000d02:	f000 fc31 	bl	8001568 <MFRC522_Init>
  lcd_set_i2c(&hi2c1);
 8000d06:	4871      	ldr	r0, [pc, #452]	@ (8000ecc <main+0x1f8>)
 8000d08:	f7ff fcac 	bl	8000664 <lcd_set_i2c>
  lcd_init();
 8000d0c:	f7ff fd4e 	bl	80007ac <lcd_init>


  lcd_set_i2c(&hi2c2);
 8000d10:	486f      	ldr	r0, [pc, #444]	@ (8000ed0 <main+0x1fc>)
 8000d12:	f7ff fca7 	bl	8000664 <lcd_set_i2c>
  lcd_init();
 8000d16:	f7ff fd49 	bl	80007ac <lcd_init>
  lcd_clear();
 8000d1a:	f7ff fd11 	bl	8000740 <lcd_clear>
  lcd_put_cur(0,0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fd24 	bl	800076e <lcd_put_cur>
  lcd_send_string("L1 con: 32 cho");
 8000d26:	486b      	ldr	r0, [pc, #428]	@ (8000ed4 <main+0x200>)
 8000d28:	f7ff fd7d 	bl	8000826 <lcd_send_string>
  lcd_put_cur(1,0);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fd1d 	bl	800076e <lcd_put_cur>
  lcd_send_string("L2 con: 30 cho");
 8000d34:	4868      	ldr	r0, [pc, #416]	@ (8000ed8 <main+0x204>)
 8000d36:	f7ff fd76 	bl	8000826 <lcd_send_string>
  HAL_TIM_Base_Start(&htim1);
 8000d3a:	4868      	ldr	r0, [pc, #416]	@ (8000edc <main+0x208>)
 8000d3c:	f004 fda8 	bl	8005890 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d40:	4867      	ldr	r0, [pc, #412]	@ (8000ee0 <main+0x20c>)
 8000d42:	f004 fdef 	bl	8005924 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, rxBuffer_1, 5);
 8000d46:	2205      	movs	r2, #5
 8000d48:	4966      	ldr	r1, [pc, #408]	@ (8000ee4 <main+0x210>)
 8000d4a:	4867      	ldr	r0, [pc, #412]	@ (8000ee8 <main+0x214>)
 8000d4c:	f005 fa67 	bl	800621e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		 dataValid=1;
 8000d50:	4b66      	ldr	r3, [pc, #408]	@ (8000eec <main+0x218>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
		 memset(str, 0, sizeof(str));
 8000d56:	2210      	movs	r2, #16
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4865      	ldr	r0, [pc, #404]	@ (8000ef0 <main+0x21c>)
 8000d5c:	f00a fbc4 	bl	800b4e8 <memset>
		 status = MFRC522_Request(PICC_REQIDL, str);
 8000d60:	4963      	ldr	r1, [pc, #396]	@ (8000ef0 <main+0x21c>)
 8000d62:	2026      	movs	r0, #38	@ 0x26
 8000d64:	f000 fcf7 	bl	8001756 <MFRC522_Request>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b61      	ldr	r3, [pc, #388]	@ (8000ef4 <main+0x220>)
 8000d6e:	701a      	strb	r2, [r3, #0]
		 if (status != MI_OK)
 8000d70:	4b60      	ldr	r3, [pc, #384]	@ (8000ef4 <main+0x220>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <main+0xaa>
		 {
			 dataValid = 0;
 8000d78:	4b5c      	ldr	r3, [pc, #368]	@ (8000eec <main+0x218>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
		 }

		 status = MFRC522_Anticoll(str);
 8000d7e:	485c      	ldr	r0, [pc, #368]	@ (8000ef0 <main+0x21c>)
 8000d80:	f000 fd0e 	bl	80017a0 <MFRC522_Anticoll>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b5a      	ldr	r3, [pc, #360]	@ (8000ef4 <main+0x220>)
 8000d8a:	701a      	strb	r2, [r3, #0]
		 if (status != MI_OK)
 8000d8c:	4b59      	ldr	r3, [pc, #356]	@ (8000ef4 <main+0x220>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <main+0xc6>
		 {
			  dataValid = 0;
 8000d94:	4b55      	ldr	r3, [pc, #340]	@ (8000eec <main+0x218>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
		 }
		  if (dataValid)
 8000d9a:	4b54      	ldr	r3, [pc, #336]	@ (8000eec <main+0x218>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03d      	beq.n	8000e1e <main+0x14a>
		  {
			  // Chuyển đổi dữ liệu từ byte sang dạng hex
			memcpy(sNum, str, 5);
 8000da2:	4b55      	ldr	r3, [pc, #340]	@ (8000ef8 <main+0x224>)
 8000da4:	4a52      	ldr	r2, [pc, #328]	@ (8000ef0 <main+0x21c>)
 8000da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000daa:	6018      	str	r0, [r3, #0]
 8000dac:	3304      	adds	r3, #4
 8000dae:	7019      	strb	r1, [r3, #0]
			char hexBuffer[16];
			for (int i = 0; i < 5; i++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	e010      	b.n	8000dd8 <main+0x104>
			{
				sprintf(&hexBuffer[i * 3], "%02X ", sNum[i]);
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	1d3a      	adds	r2, r7, #4
 8000dc0:	18d0      	adds	r0, r2, r3
 8000dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ef8 <main+0x224>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	494b      	ldr	r1, [pc, #300]	@ (8000efc <main+0x228>)
 8000dce:	f00a fb6b 	bl	800b4a8 <siprintf>
			for (int i = 0; i < 5; i++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	ddeb      	ble.n	8000db6 <main+0xe2>
	        }

			// Chuẩn bị chuỗi dữ liệu cần gửi qua USB
			sprintf(TxBuffer, "%s\n", hexBuffer);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	461a      	mov	r2, r3
 8000de2:	4947      	ldr	r1, [pc, #284]	@ (8000f00 <main+0x22c>)
 8000de4:	4847      	ldr	r0, [pc, #284]	@ (8000f04 <main+0x230>)
 8000de6:	f00a fb5f 	bl	800b4a8 <siprintf>

			// Gửi dữ liệu qua USB
			CDC_Transmit_FS((uint8_t*)TxBuffer, strlen(TxBuffer));
 8000dea:	4846      	ldr	r0, [pc, #280]	@ (8000f04 <main+0x230>)
 8000dec:	f7ff f9ae 	bl	800014c <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4619      	mov	r1, r3
 8000df6:	4843      	ldr	r0, [pc, #268]	@ (8000f04 <main+0x230>)
 8000df8:	f009 ff78 	bl	800acec <CDC_Transmit_FS>
				// Tín hiệu báo thành công

			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e02:	4841      	ldr	r0, [pc, #260]	@ (8000f08 <main+0x234>)
 8000e04:	f001 fb1b 	bl	800243e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e0e:	483f      	ldr	r0, [pc, #252]	@ (8000f0c <main+0x238>)
 8000e10:	f001 fb15 	bl	800243e <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 8000e14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e18:	f000 ff92 	bl	8001d40 <HAL_Delay>
 8000e1c:	e00b      	b.n	8000e36 <main+0x162>
		  } else
		  {
			  // Nếu không có dữ liệu hợp lệ
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  // Tắt đèn LED báo ko có thẻ
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e24:	4838      	ldr	r0, [pc, #224]	@ (8000f08 <main+0x234>)
 8000e26:	f001 fb0a 	bl	800243e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e30:	4836      	ldr	r0, [pc, #216]	@ (8000f0c <main+0x238>)
 8000e32:	f001 fb04 	bl	800243e <HAL_GPIO_WritePin>
					  );
	      }
//Hien thi tien
		  if (fee!=0){
 8000e36:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <main+0x23c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00e      	beq.n	8000e5c <main+0x188>
		  	lcd_set_i2c(&hi2c1);
 8000e3e:	4823      	ldr	r0, [pc, #140]	@ (8000ecc <main+0x1f8>)
 8000e40:	f7ff fc10 	bl	8000664 <lcd_set_i2c>
		    lcd_clear();
 8000e44:	f7ff fc7c 	bl	8000740 <lcd_clear>
		    lcd_put_cur(0, 0);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fc8f 	bl	800076e <lcd_put_cur>
		    lcd_send_string (RxBuffer);
 8000e50:	4830      	ldr	r0, [pc, #192]	@ (8000f14 <main+0x240>)
 8000e52:	f7ff fce8 	bl	8000826 <lcd_send_string>
		    fee =0;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	@ (8000f10 <main+0x23c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
		  }
		  if (numSpace_L1 != numSpace_pre_L1)
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <main+0x244>)
 8000e5e:	781a      	ldrb	r2, [r3, #0]
 8000e60:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <main+0x248>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d014      	beq.n	8000e92 <main+0x1be>
		  {
			  lcd_set_i2c(&hi2c2);
 8000e68:	4819      	ldr	r0, [pc, #100]	@ (8000ed0 <main+0x1fc>)
 8000e6a:	f7ff fbfb 	bl	8000664 <lcd_set_i2c>
			  lcd_put_cur(0,0);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fc7c 	bl	800076e <lcd_put_cur>
			  sprintf(buf_numcar,"L1 con: %d cho",(int)numSpace_L1);
 8000e76:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <main+0x244>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4928      	ldr	r1, [pc, #160]	@ (8000f20 <main+0x24c>)
 8000e7e:	4829      	ldr	r0, [pc, #164]	@ (8000f24 <main+0x250>)
 8000e80:	f00a fb12 	bl	800b4a8 <siprintf>
			  lcd_send_string(buf_numcar);
 8000e84:	4827      	ldr	r0, [pc, #156]	@ (8000f24 <main+0x250>)
 8000e86:	f7ff fcce 	bl	8000826 <lcd_send_string>
			  numSpace_pre_L1 = numSpace_L1;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <main+0x244>)
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <main+0x248>)
 8000e90:	701a      	strb	r2, [r3, #0]
		  }
		  if (numSpace_L2 != numSpace_pre_L2)
 8000e92:	4b25      	ldr	r3, [pc, #148]	@ (8000f28 <main+0x254>)
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <main+0x258>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f43f af58 	beq.w	8000d50 <main+0x7c>
		  {
			  lcd_set_i2c(&hi2c2);
 8000ea0:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <main+0x1fc>)
 8000ea2:	f7ff fbdf 	bl	8000664 <lcd_set_i2c>
			  lcd_put_cur(1,0);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff fc60 	bl	800076e <lcd_put_cur>
			  sprintf(buf_numcar,"L2 con: %d cho",(int)numSpace_L2);
 8000eae:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <main+0x254>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	491e      	ldr	r1, [pc, #120]	@ (8000f30 <main+0x25c>)
 8000eb6:	481b      	ldr	r0, [pc, #108]	@ (8000f24 <main+0x250>)
 8000eb8:	f00a faf6 	bl	800b4a8 <siprintf>
			  lcd_send_string(buf_numcar);
 8000ebc:	4819      	ldr	r0, [pc, #100]	@ (8000f24 <main+0x250>)
 8000ebe:	f7ff fcb2 	bl	8000826 <lcd_send_string>
			  numSpace_pre_L2 = numSpace_L2;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <main+0x254>)
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <main+0x258>)
 8000ec8:	701a      	strb	r2, [r3, #0]
		 dataValid=1;
 8000eca:	e741      	b.n	8000d50 <main+0x7c>
 8000ecc:	200002a8 	.word	0x200002a8
 8000ed0:	200002fc 	.word	0x200002fc
 8000ed4:	0800be20 	.word	0x0800be20
 8000ed8:	0800be30 	.word	0x0800be30
 8000edc:	200003a8 	.word	0x200003a8
 8000ee0:	200003f0 	.word	0x200003f0
 8000ee4:	20000270 	.word	0x20000270
 8000ee8:	20000438 	.word	0x20000438
 8000eec:	20000278 	.word	0x20000278
 8000ef0:	20000280 	.word	0x20000280
 8000ef4:	2000027c 	.word	0x2000027c
 8000ef8:	20000290 	.word	0x20000290
 8000efc:	0800be40 	.word	0x0800be40
 8000f00:	0800be48 	.word	0x0800be48
 8000f04:	200001f4 	.word	0x200001f4
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	20000295 	.word	0x20000295
 8000f14:	20000228 	.word	0x20000228
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000006 	.word	0x20000006
 8000f20:	0800be4c 	.word	0x0800be4c
 8000f24:	20000298 	.word	0x20000298
 8000f28:	20000009 	.word	0x20000009
 8000f2c:	20000007 	.word	0x20000007
 8000f30:	0800be5c 	.word	0x0800be5c

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	@ 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f3e:	2228      	movs	r2, #40	@ 0x28
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00a fad0 	bl	800b4e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f72:	2301      	movs	r3, #1
 8000f74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f80:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fc84 	bl	8004898 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f96:	f000 fa2f 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fef0 	bl	8004d9c <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fc2:	f000 fa19 	bl	80013f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 f871 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000fdc:	f000 fa0c 	bl	80013f8 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3750      	adds	r7, #80	@ 0x50
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_I2C1_Init+0x50>)
 8000fee:	4a13      	ldr	r2, [pc, #76]	@ (800103c <MX_I2C1_Init+0x54>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_I2C1_Init+0x50>)
 8000ff4:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <MX_I2C1_Init+0x58>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_I2C1_Init+0x50>)
 8001006:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800100a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_I2C1_Init+0x50>)
 8001026:	f001 fa3b 	bl	80024a0 <HAL_I2C_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001030:	f000 f9e2 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002a8 	.word	0x200002a8
 800103c:	40005400 	.word	0x40005400
 8001040:	000186a0 	.word	0x000186a0

08001044 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_I2C2_Init+0x50>)
 800104a:	4a13      	ldr	r2, [pc, #76]	@ (8001098 <MX_I2C2_Init+0x54>)
 800104c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_I2C2_Init+0x50>)
 8001050:	4a12      	ldr	r2, [pc, #72]	@ (800109c <MX_I2C2_Init+0x58>)
 8001052:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_I2C2_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_I2C2_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <MX_I2C2_Init+0x50>)
 8001062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001066:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <MX_I2C2_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_I2C2_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <MX_I2C2_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_I2C2_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	@ (8001094 <MX_I2C2_Init+0x50>)
 8001082:	f001 fa0d 	bl	80024a0 <HAL_I2C_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800108c:	f000 f9b4 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200002fc 	.word	0x200002fc
 8001098:	40005800 	.word	0x40005800
 800109c:	000186a0 	.word	0x000186a0

080010a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <MX_SPI1_Init+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010d4:	2210      	movs	r2, #16
 80010d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010f2:	f004 f897 	bl	8005224 <HAL_SPI_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010fc:	f000 f97c 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000350 	.word	0x20000350
 8001108:	40013000 	.word	0x40013000

0800110c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001128:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_TIM1_Init+0x98>)
 800112a:	4a1f      	ldr	r2, [pc, #124]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 800112c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001130:	2247      	movs	r2, #71	@ 0x47
 8001132:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_TIM1_Init+0x98>)
 800113c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001140:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_TIM1_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001156:	f004 fb4c 	bl	80057f2 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001160:	f000 f94a 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001172:	f004 fd19 	bl	8005ba8 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800117c:	f000 f93c 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_TIM1_Init+0x98>)
 800118e:	f004 fefb 	bl	8005f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001198:	f000 f92e 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200003a8 	.word	0x200003a8
 80011a8:	40012c00 	.word	0x40012c00

080011ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <MX_TIM4_Init+0x94>)
 80011ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <MX_TIM4_Init+0x98>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <MX_TIM4_Init+0x94>)
 80011d0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_TIM4_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_TIM4_Init+0x94>)
 80011de:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_TIM4_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_TIM4_Init+0x94>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f0:	4813      	ldr	r0, [pc, #76]	@ (8001240 <MX_TIM4_Init+0x94>)
 80011f2:	f004 fafe 	bl	80057f2 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80011fc:	f000 f8fc 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <MX_TIM4_Init+0x94>)
 800120e:	f004 fccb 	bl	8005ba8 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001218:	f000 f8ee 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_TIM4_Init+0x94>)
 800122a:	f004 fead 	bl	8005f88 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 f8e0 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200003f0 	.word	0x200003f0
 8001244:	40000800 	.word	0x40000800

08001248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_USART1_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001254:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001280:	f004 fef2 	bl	8006068 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f8b5 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000438 	.word	0x20000438
 8001298:	40013800 	.word	0x40013800

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	4b4c      	ldr	r3, [pc, #304]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	4b46      	ldr	r3, [pc, #280]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a45      	ldr	r2, [pc, #276]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b43      	ldr	r3, [pc, #268]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b40      	ldr	r3, [pc, #256]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a3f      	ldr	r2, [pc, #252]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b3d      	ldr	r3, [pc, #244]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b3a      	ldr	r3, [pc, #232]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a39      	ldr	r2, [pc, #228]	@ (80013e4 <MX_GPIO_Init+0x148>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b37      	ldr	r3, [pc, #220]	@ (80013e4 <MX_GPIO_Init+0x148>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001316:	4834      	ldr	r0, [pc, #208]	@ (80013e8 <MX_GPIO_Init+0x14c>)
 8001318:	f001 f891 	bl	800243e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	211e      	movs	r1, #30
 8001320:	4832      	ldr	r0, [pc, #200]	@ (80013ec <MX_GPIO_Init+0x150>)
 8001322:	f001 f88c 	bl	800243e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f247 0101 	movw	r1, #28673	@ 0x7001
 800132c:	4830      	ldr	r0, [pc, #192]	@ (80013f0 <MX_GPIO_Init+0x154>)
 800132e:	f001 f886 	bl	800243e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	4827      	ldr	r0, [pc, #156]	@ (80013e8 <MX_GPIO_Init+0x14c>)
 800134c:	f000 fedc 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001350:	2301      	movs	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	4822      	ldr	r0, [pc, #136]	@ (80013ec <MX_GPIO_Init+0x150>)
 8001364:	f000 fed0 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001368:	231e      	movs	r3, #30
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2302      	movs	r3, #2
 8001376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4619      	mov	r1, r3
 800137e:	481b      	ldr	r0, [pc, #108]	@ (80013ec <MX_GPIO_Init+0x150>)
 8001380:	f000 fec2 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001384:	f247 0301 	movw	r3, #28673	@ 0x7001
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2302      	movs	r3, #2
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	4814      	ldr	r0, [pc, #80]	@ (80013f0 <MX_GPIO_Init+0x154>)
 800139e:	f000 feb3 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80013a2:	2318      	movs	r3, #24
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a6:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <MX_GPIO_Init+0x158>)
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4619      	mov	r1, r3
 80013b4:	480e      	ldr	r0, [pc, #56]	@ (80013f0 <MX_GPIO_Init+0x154>)
 80013b6:	f000 fea7 	bl	8002108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2009      	movs	r0, #9
 80013c0:	f000 fdb9 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013c4:	2009      	movs	r0, #9
 80013c6:	f000 fdd2 	bl	8001f6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	200a      	movs	r0, #10
 80013d0:	f000 fdb1 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013d4:	200a      	movs	r0, #10
 80013d6:	f000 fdca 	bl	8001f6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013da:	bf00      	nop
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40011000 	.word	0x40011000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	10210000 	.word	0x10210000

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800140e:	f107 020f 	add.w	r2, r7, #15
 8001412:	1df9      	adds	r1, r7, #7
 8001414:	2364      	movs	r3, #100	@ 0x64
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	4804      	ldr	r0, [pc, #16]	@ (800142c <RC522_SPI_Transfer+0x28>)
 800141c:	f003 ff86 	bl	800532c <HAL_SPI_TransmitReceive>

	return rx_data;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000350 	.word	0x20000350

08001430 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	460a      	mov	r2, r1
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	4613      	mov	r3, r2
 800143e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <Write_MFRC522+0x48>)
 8001446:	f000 fffa 	bl	800243e <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ffd4 	bl	8001404 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ffd0 	bl	8001404 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2110      	movs	r1, #16
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <Write_MFRC522+0x48>)
 800146a:	f000 ffe8 	bl	800243e <HAL_GPIO_WritePin>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40010800 	.word	0x40010800

0800147c <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2110      	movs	r1, #16
 800148a:	480f      	ldr	r0, [pc, #60]	@ (80014c8 <Read_MFRC522+0x4c>)
 800148c:	f000 ffd7 	bl	800243e <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	b25b      	sxtb	r3, r3
 8001496:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800149a:	b25b      	sxtb	r3, r3
 800149c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ffad 	bl	8001404 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff ffaa 	bl	8001404 <RC522_SPI_Transfer>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2110      	movs	r1, #16
 80014b8:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <Read_MFRC522+0x4c>)
 80014ba:	f000 ffc0 	bl	800243e <HAL_GPIO_WritePin>

	return val;
 80014be:	7bfb      	ldrb	r3, [r7, #15]

}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40010800 	.word	0x40010800

080014cc <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	460a      	mov	r2, r1
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	4613      	mov	r3, r2
 80014da:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ffcc 	bl	800147c <Read_MFRC522>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff9b 	bl	8001430 <Write_MFRC522>
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	460a      	mov	r2, r1
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	4613      	mov	r3, r2
 8001510:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffb1 	bl	800147c <Read_MFRC522>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800151e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001522:	43db      	mvns	r3, r3
 8001524:	b25a      	sxtb	r2, r3
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4013      	ands	r3, r2
 800152c:	b25b      	sxtb	r3, r3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff7b 	bl	8001430 <Write_MFRC522>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001546:	2014      	movs	r0, #20
 8001548:	f7ff ff98 	bl	800147c <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 800154c:	2103      	movs	r1, #3
 800154e:	2014      	movs	r0, #20
 8001550:	f7ff ffbc 	bl	80014cc <SetBitMask>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800155c:	210f      	movs	r1, #15
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff ff66 	bl	8001430 <Write_MFRC522>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2110      	movs	r1, #16
 8001570:	4812      	ldr	r0, [pc, #72]	@ (80015bc <MFRC522_Init+0x54>)
 8001572:	f000 ff64 	bl	800243e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2101      	movs	r1, #1
 800157a:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <MFRC522_Init+0x58>)
 800157c:	f000 ff5f 	bl	800243e <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001580:	f7ff ffea 	bl	8001558 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001584:	218d      	movs	r1, #141	@ 0x8d
 8001586:	202a      	movs	r0, #42	@ 0x2a
 8001588:	f7ff ff52 	bl	8001430 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 800158c:	213e      	movs	r1, #62	@ 0x3e
 800158e:	202b      	movs	r0, #43	@ 0x2b
 8001590:	f7ff ff4e 	bl	8001430 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8001594:	211e      	movs	r1, #30
 8001596:	202d      	movs	r0, #45	@ 0x2d
 8001598:	f7ff ff4a 	bl	8001430 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800159c:	2100      	movs	r1, #0
 800159e:	202c      	movs	r0, #44	@ 0x2c
 80015a0:	f7ff ff46 	bl	8001430 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80015a4:	2140      	movs	r1, #64	@ 0x40
 80015a6:	2015      	movs	r0, #21
 80015a8:	f7ff ff42 	bl	8001430 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80015ac:	213d      	movs	r1, #61	@ 0x3d
 80015ae:	2011      	movs	r0, #17
 80015b0:	f7ff ff3e 	bl	8001430 <Write_MFRC522>

	AntennaOn();
 80015b4:	f7ff ffc5 	bl	8001542 <AntennaOn>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40010800 	.word	0x40010800
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	4613      	mov	r3, r2
 80015d4:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80015d6:	2302      	movs	r3, #2
 80015d8:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80015de:	2300      	movs	r3, #0
 80015e0:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b0c      	cmp	r3, #12
 80015e6:	d006      	beq.n	80015f6 <MFRC522_ToCard+0x32>
 80015e8:	2b0e      	cmp	r3, #14
 80015ea:	d109      	bne.n	8001600 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80015ec:	2312      	movs	r3, #18
 80015ee:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80015f0:	2310      	movs	r3, #16
 80015f2:	777b      	strb	r3, [r7, #29]
			break;
 80015f4:	e005      	b.n	8001602 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80015f6:	2377      	movs	r3, #119	@ 0x77
 80015f8:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80015fa:	2330      	movs	r3, #48	@ 0x30
 80015fc:	777b      	strb	r3, [r7, #29]
			break;
 80015fe:	e000      	b.n	8001602 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001600:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001602:	7fbb      	ldrb	r3, [r7, #30]
 8001604:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	2002      	movs	r0, #2
 800160e:	f7ff ff0f 	bl	8001430 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001612:	2180      	movs	r1, #128	@ 0x80
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff ff74 	bl	8001502 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	200a      	movs	r0, #10
 800161e:	f7ff ff55 	bl	80014cc <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001622:	2100      	movs	r1, #0
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff ff03 	bl	8001430 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	e00a      	b.n	8001646 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	2009      	movs	r0, #9
 800163c:	f7ff fef8 	bl	8001430 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3301      	adds	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3f0      	bcc.n	8001630 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	4619      	mov	r1, r3
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff feec 	bl	8001430 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b0c      	cmp	r3, #12
 800165c:	d103      	bne.n	8001666 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 800165e:	2180      	movs	r1, #128	@ 0x80
 8001660:	200d      	movs	r0, #13
 8001662:	f7ff ff33 	bl	80014cc <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001666:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800166a:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 800166c:	2004      	movs	r0, #4
 800166e:	f7ff ff05 	bl	800147c <Read_MFRC522>
 8001672:	4603      	mov	r3, r0
 8001674:	773b      	strb	r3, [r7, #28]
        i--;
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	3b01      	subs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <MFRC522_ToCard+0xd4>
 8001682:	7f3b      	ldrb	r3, [r7, #28]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <MFRC522_ToCard+0xd4>
 800168c:	7f3a      	ldrb	r2, [r7, #28]
 800168e:	7f7b      	ldrb	r3, [r7, #29]
 8001690:	4013      	ands	r3, r2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0e9      	beq.n	800166c <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	200d      	movs	r0, #13
 800169c:	f7ff ff31 	bl	8001502 <ClearBitMask>

    if (i != 0)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d052      	beq.n	800174c <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80016a6:	2006      	movs	r0, #6
 80016a8:	f7ff fee8 	bl	800147c <Read_MFRC522>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f003 031b 	and.w	r3, r3, #27
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d148      	bne.n	8001748 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80016ba:	7f3a      	ldrb	r2, [r7, #28]
 80016bc:	7fbb      	ldrb	r3, [r7, #30]
 80016be:	4013      	ands	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d13b      	bne.n	800174c <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80016d4:	200a      	movs	r0, #10
 80016d6:	f7ff fed1 	bl	800147c <Read_MFRC522>
 80016da:	4603      	mov	r3, r0
 80016dc:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80016de:	200c      	movs	r0, #12
 80016e0:	f7ff fecc 	bl	800147c <Read_MFRC522>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80016f2:	7f3b      	ldrb	r3, [r7, #28]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	00da      	lsls	r2, r3, #3
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4413      	add	r3, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e004      	b.n	800170e <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001704:	7f3b      	ldrb	r3, [r7, #28]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	461a      	mov	r2, r3
 800170a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170c:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800170e:	7f3b      	ldrb	r3, [r7, #28]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001714:	2301      	movs	r3, #1
 8001716:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001718:	7f3b      	ldrb	r3, [r7, #28]
 800171a:	2b10      	cmp	r3, #16
 800171c:	d901      	bls.n	8001722 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 800171e:	2310      	movs	r3, #16
 8001720:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	e00a      	b.n	800173e <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	18d4      	adds	r4, r2, r3
 800172e:	2009      	movs	r0, #9
 8001730:	f7ff fea4 	bl	800147c <Read_MFRC522>
 8001734:	4603      	mov	r3, r0
 8001736:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	3301      	adds	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	7f3b      	ldrb	r3, [r7, #28]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3f0      	bcc.n	8001728 <MFRC522_ToCard+0x164>
 8001746:	e001      	b.n	800174c <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8001748:	2302      	movs	r3, #2
 800174a:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 800174c:	7ffb      	ldrb	r3, [r7, #31]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}

08001756 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af02      	add	r7, sp, #8
 800175c:	4603      	mov	r3, r0
 800175e:	6039      	str	r1, [r7, #0]
 8001760:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8001762:	2107      	movs	r1, #7
 8001764:	200d      	movs	r0, #13
 8001766:	f7ff fe63 	bl	8001430 <Write_MFRC522>

	TagType[0] = reqMode;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2201      	movs	r2, #1
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	200c      	movs	r0, #12
 800177e:	f7ff ff21 	bl	80015c4 <MFRC522_ToCard>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <MFRC522_Request+0x3c>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b10      	cmp	r3, #16
 8001790:	d001      	beq.n	8001796 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8001792:	2302      	movs	r3, #2
 8001794:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80017ac:	2100      	movs	r1, #0
 80017ae:	200d      	movs	r0, #13
 80017b0:	f7ff fe3e 	bl	8001430 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2293      	movs	r2, #147	@ 0x93
 80017b8:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3301      	adds	r3, #1
 80017be:	2220      	movs	r2, #32
 80017c0:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2202      	movs	r2, #2
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	200c      	movs	r0, #12
 80017d0:	f7ff fef8 	bl	80015c4 <MFRC522_ToCard>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	73bb      	strb	r3, [r7, #14]
 80017e2:	e009      	b.n	80017f8 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80017e4:	7bbb      	ldrb	r3, [r7, #14]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	4053      	eors	r3, r2
 80017f0:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80017f2:	7bbb      	ldrb	r3, [r7, #14]
 80017f4:	3301      	adds	r3, #1
 80017f6:	73bb      	strb	r3, [r7, #14]
 80017f8:	7bbb      	ldrb	r3, [r7, #14]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d9f2      	bls.n	80017e4 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80017fe:	7bbb      	ldrb	r3, [r7, #14]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	7b7a      	ldrb	r2, [r7, #13]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 800180c:	2302      	movs	r3, #2
 800180e:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_MspInit+0x5c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a14      	ldr	r2, [pc, #80]	@ (8001878 <HAL_MspInit+0x5c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6193      	str	r3, [r2, #24]
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_MspInit+0x5c>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_MspInit+0x5c>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a0e      	ldr	r2, [pc, #56]	@ (8001878 <HAL_MspInit+0x5c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_MspInit+0x5c>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_MspInit+0x60>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_MspInit+0x60>)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000

08001880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	@ 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a2b      	ldr	r2, [pc, #172]	@ (8001948 <HAL_I2C_MspInit+0xc8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d124      	bne.n	80018ea <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a29      	ldr	r2, [pc, #164]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_M_Pin|LCD_SDA_M_Pin;
 80018b8:	23c0      	movs	r3, #192	@ 0xc0
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018bc:	2312      	movs	r3, #18
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4619      	mov	r1, r3
 80018ca:	4821      	ldr	r0, [pc, #132]	@ (8001950 <HAL_I2C_MspInit+0xd0>)
 80018cc:	f000 fc1c 	bl	8002108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d0:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 80018d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018da:	61d3      	str	r3, [r2, #28]
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018e8:	e029      	b.n	800193e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <HAL_I2C_MspInit+0xd4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d124      	bne.n	800193e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800190c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001912:	2312      	movs	r3, #18
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	4619      	mov	r1, r3
 8001920:	480b      	ldr	r0, [pc, #44]	@ (8001950 <HAL_I2C_MspInit+0xd0>)
 8001922:	f000 fbf1 	bl	8002108 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a08      	ldr	r2, [pc, #32]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 800192c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_I2C_MspInit+0xcc>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	@ 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40005400 	.word	0x40005400
 800194c:	40021000 	.word	0x40021000
 8001950:	40010c00 	.word	0x40010c00
 8001954:	40005800 	.word	0x40005800

08001958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <HAL_SPI_MspInit+0x88>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12f      	bne.n	80019d8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001978:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <HAL_SPI_MspInit+0x8c>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a19      	ldr	r2, [pc, #100]	@ (80019e4 <HAL_SPI_MspInit+0x8c>)
 800197e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <HAL_SPI_MspInit+0x8c>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <HAL_SPI_MspInit+0x8c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a13      	ldr	r2, [pc, #76]	@ (80019e4 <HAL_SPI_MspInit+0x8c>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <HAL_SPI_MspInit+0x8c>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019a8:	23a0      	movs	r3, #160	@ 0xa0
 80019aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4619      	mov	r1, r3
 80019ba:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <HAL_SPI_MspInit+0x90>)
 80019bc:	f000 fba4 	bl	8002108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c0:	2340      	movs	r3, #64	@ 0x40
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <HAL_SPI_MspInit+0x90>)
 80019d4:	f000 fb98 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40013000 	.word	0x40013000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010800 	.word	0x40010800

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a16      	ldr	r2, [pc, #88]	@ (8001a54 <HAL_TIM_Base_MspInit+0x68>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10c      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019fe:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <HAL_TIM_Base_MspInit+0x6c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <HAL_TIM_Base_MspInit+0x6c>)
 8001a04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a08:	6193      	str	r3, [r2, #24]
 8001a0a:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <HAL_TIM_Base_MspInit+0x6c>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a16:	e018      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a5c <HAL_TIM_Base_MspInit+0x70>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d113      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <HAL_TIM_Base_MspInit+0x6c>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <HAL_TIM_Base_MspInit+0x6c>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_TIM_Base_MspInit+0x6c>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	201e      	movs	r0, #30
 8001a40:	f000 fa79 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a44:	201e      	movs	r0, #30
 8001a46:	f000 fa92 	bl	8001f6e <HAL_NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40012c00 	.word	0x40012c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40000800 	.word	0x40000800

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a20      	ldr	r2, [pc, #128]	@ (8001afc <HAL_UART_MspInit+0x9c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d139      	bne.n	8001af4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a80:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <HAL_UART_MspInit+0xa0>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a1e      	ldr	r2, [pc, #120]	@ (8001b00 <HAL_UART_MspInit+0xa0>)
 8001a86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <HAL_UART_MspInit+0xa0>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_UART_MspInit+0xa0>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <HAL_UART_MspInit+0xa0>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <HAL_UART_MspInit+0xa0>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480f      	ldr	r0, [pc, #60]	@ (8001b04 <HAL_UART_MspInit+0xa4>)
 8001ac6:	f000 fb1f 	bl	8002108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4619      	mov	r1, r3
 8001ade:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <HAL_UART_MspInit+0xa4>)
 8001ae0:	f000 fb12 	bl	8002108 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2025      	movs	r0, #37	@ 0x25
 8001aea:	f000 fa24 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aee:	2025      	movs	r0, #37	@ 0x25
 8001af0:	f000 fa3d 	bl	8001f6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40013800 	.word	0x40013800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010800 	.word	0x40010800

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <NMI_Handler+0x4>

08001b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <MemManage_Handler+0x4>

08001b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 f8d6 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b64:	2008      	movs	r0, #8
 8001b66:	f000 fc83 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b72:	2010      	movs	r0, #16
 8001b74:	f000 fc7c 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b82:	f001 fa45 	bl	8003010 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20001154 	.word	0x20001154

08001b90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <TIM4_IRQHandler+0x10>)
 8001b96:	f003 ff17 	bl	80059c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200003f0 	.word	0x200003f0

08001ba4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <USART1_IRQHandler+0x10>)
 8001baa:	f004 fb5d 	bl	8006268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000438 	.word	0x20000438

08001bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <_sbrk+0x5c>)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <_sbrk+0x60>)
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <_sbrk+0x64>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <_sbrk+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be8:	f009 fc86 	bl	800b4f8 <__errno>
 8001bec:	4603      	mov	r3, r0
 8001bee:	220c      	movs	r2, #12
 8001bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e009      	b.n	8001c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <_sbrk+0x64>)
 8001c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20005000 	.word	0x20005000
 8001c18:	00000400 	.word	0x00000400
 8001c1c:	20000484 	.word	0x20000484
 8001c20:	20001798 	.word	0x20001798

08001c24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c30:	f7ff fff8 	bl	8001c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480b      	ldr	r0, [pc, #44]	@ (8001c64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c36:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c38:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c4c:	4c09      	ldr	r4, [pc, #36]	@ (8001c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f009 fc53 	bl	800b504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c5e:	f7ff f839 	bl	8000cd4 <main>
  bx lr
 8001c62:	4770      	bx	lr
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c6c:	0800bf24 	.word	0x0800bf24
  ldr r2, =_sbss
 8001c70:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c74:	20001794 	.word	0x20001794

08001c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC1_2_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_Init+0x28>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_Init+0x28>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f947 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fdc0 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f95f 	bl	8001f8a <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 f927 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000000c 	.word	0x2000000c
 8001d00:	20000014 	.word	0x20000014
 8001d04:	20000010 	.word	0x20000010

08001d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_IncTick+0x1c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000014 	.word	0x20000014
 8001d28:	20000488 	.word	0x20000488

08001d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b02      	ldr	r3, [pc, #8]	@ (8001d3c <HAL_GetTick+0x10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000488 	.word	0x20000488

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffe0 	bl	8001d2c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000014 	.word	0x20000014

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4906      	ldr	r1, [pc, #24]	@ (8001e20 <__NVIC_EnableIRQ+0x34>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	@ (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f7ff ff90 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff2d 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff42 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff90 	bl	8001e78 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5f 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff35 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa2 	bl	8001edc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d008      	beq.n	8001fcc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e020      	b.n	800200e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 020e 	bic.w	r2, r2, #14
 8001fda:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d005      	beq.n	800203c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2204      	movs	r2, #4
 8002034:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e051      	b.n	80020e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 020e 	bic.w	r2, r2, #14
 800204a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a22      	ldr	r2, [pc, #136]	@ (80020ec <HAL_DMA_Abort_IT+0xd4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d029      	beq.n	80020ba <HAL_DMA_Abort_IT+0xa2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a21      	ldr	r2, [pc, #132]	@ (80020f0 <HAL_DMA_Abort_IT+0xd8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d022      	beq.n	80020b6 <HAL_DMA_Abort_IT+0x9e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <HAL_DMA_Abort_IT+0xdc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01a      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x98>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <HAL_DMA_Abort_IT+0xe0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d012      	beq.n	80020aa <HAL_DMA_Abort_IT+0x92>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <HAL_DMA_Abort_IT+0xe4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00a      	beq.n	80020a4 <HAL_DMA_Abort_IT+0x8c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <HAL_DMA_Abort_IT+0xe8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d102      	bne.n	800209e <HAL_DMA_Abort_IT+0x86>
 8002098:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800209c:	e00e      	b.n	80020bc <HAL_DMA_Abort_IT+0xa4>
 800209e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020a2:	e00b      	b.n	80020bc <HAL_DMA_Abort_IT+0xa4>
 80020a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020a8:	e008      	b.n	80020bc <HAL_DMA_Abort_IT+0xa4>
 80020aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ae:	e005      	b.n	80020bc <HAL_DMA_Abort_IT+0xa4>
 80020b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b4:	e002      	b.n	80020bc <HAL_DMA_Abort_IT+0xa4>
 80020b6:	2310      	movs	r3, #16
 80020b8:	e000      	b.n	80020bc <HAL_DMA_Abort_IT+0xa4>
 80020ba:	2301      	movs	r3, #1
 80020bc:	4a11      	ldr	r2, [pc, #68]	@ (8002104 <HAL_DMA_Abort_IT+0xec>)
 80020be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
    } 
  }
  return status;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40020008 	.word	0x40020008
 80020f0:	4002001c 	.word	0x4002001c
 80020f4:	40020030 	.word	0x40020030
 80020f8:	40020044 	.word	0x40020044
 80020fc:	40020058 	.word	0x40020058
 8002100:	4002006c 	.word	0x4002006c
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b08b      	sub	sp, #44	@ 0x2c
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	e169      	b.n	80023f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800211c:	2201      	movs	r2, #1
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 8158 	bne.w	80023ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a9a      	ldr	r2, [pc, #616]	@ (80023a8 <HAL_GPIO_Init+0x2a0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d05e      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002144:	4a98      	ldr	r2, [pc, #608]	@ (80023a8 <HAL_GPIO_Init+0x2a0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d875      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800214a:	4a98      	ldr	r2, [pc, #608]	@ (80023ac <HAL_GPIO_Init+0x2a4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d058      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002150:	4a96      	ldr	r2, [pc, #600]	@ (80023ac <HAL_GPIO_Init+0x2a4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d86f      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002156:	4a96      	ldr	r2, [pc, #600]	@ (80023b0 <HAL_GPIO_Init+0x2a8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d052      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 800215c:	4a94      	ldr	r2, [pc, #592]	@ (80023b0 <HAL_GPIO_Init+0x2a8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d869      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002162:	4a94      	ldr	r2, [pc, #592]	@ (80023b4 <HAL_GPIO_Init+0x2ac>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d04c      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002168:	4a92      	ldr	r2, [pc, #584]	@ (80023b4 <HAL_GPIO_Init+0x2ac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d863      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800216e:	4a92      	ldr	r2, [pc, #584]	@ (80023b8 <HAL_GPIO_Init+0x2b0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d046      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002174:	4a90      	ldr	r2, [pc, #576]	@ (80023b8 <HAL_GPIO_Init+0x2b0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d85d      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800217a:	2b12      	cmp	r3, #18
 800217c:	d82a      	bhi.n	80021d4 <HAL_GPIO_Init+0xcc>
 800217e:	2b12      	cmp	r3, #18
 8002180:	d859      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002182:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <HAL_GPIO_Init+0x80>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002203 	.word	0x08002203
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080021ef 	.word	0x080021ef
 8002194:	08002231 	.word	0x08002231
 8002198:	08002237 	.word	0x08002237
 800219c:	08002237 	.word	0x08002237
 80021a0:	08002237 	.word	0x08002237
 80021a4:	08002237 	.word	0x08002237
 80021a8:	08002237 	.word	0x08002237
 80021ac:	08002237 	.word	0x08002237
 80021b0:	08002237 	.word	0x08002237
 80021b4:	08002237 	.word	0x08002237
 80021b8:	08002237 	.word	0x08002237
 80021bc:	08002237 	.word	0x08002237
 80021c0:	08002237 	.word	0x08002237
 80021c4:	08002237 	.word	0x08002237
 80021c8:	08002237 	.word	0x08002237
 80021cc:	080021e5 	.word	0x080021e5
 80021d0:	080021f9 	.word	0x080021f9
 80021d4:	4a79      	ldr	r2, [pc, #484]	@ (80023bc <HAL_GPIO_Init+0x2b4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021da:	e02c      	b.n	8002236 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	623b      	str	r3, [r7, #32]
          break;
 80021e2:	e029      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	3304      	adds	r3, #4
 80021ea:	623b      	str	r3, [r7, #32]
          break;
 80021ec:	e024      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	3308      	adds	r3, #8
 80021f4:	623b      	str	r3, [r7, #32]
          break;
 80021f6:	e01f      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	330c      	adds	r3, #12
 80021fe:	623b      	str	r3, [r7, #32]
          break;
 8002200:	e01a      	b.n	8002238 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800220a:	2304      	movs	r3, #4
 800220c:	623b      	str	r3, [r7, #32]
          break;
 800220e:	e013      	b.n	8002238 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002218:	2308      	movs	r3, #8
 800221a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	611a      	str	r2, [r3, #16]
          break;
 8002222:	e009      	b.n	8002238 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002224:	2308      	movs	r3, #8
 8002226:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	615a      	str	r2, [r3, #20]
          break;
 800222e:	e003      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
          break;
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x130>
          break;
 8002236:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2bff      	cmp	r3, #255	@ 0xff
 800223c:	d801      	bhi.n	8002242 <HAL_GPIO_Init+0x13a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_Init+0x13e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2bff      	cmp	r3, #255	@ 0xff
 800224c:	d802      	bhi.n	8002254 <HAL_GPIO_Init+0x14c>
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x152>
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	3b08      	subs	r3, #8
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	210f      	movs	r1, #15
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	401a      	ands	r2, r3
 800226c:	6a39      	ldr	r1, [r7, #32]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	431a      	orrs	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80b1 	beq.w	80023ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002288:	4b4d      	ldr	r3, [pc, #308]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4a4c      	ldr	r2, [pc, #304]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6193      	str	r3, [r2, #24]
 8002294:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022a0:	4a48      	ldr	r2, [pc, #288]	@ (80023c4 <HAL_GPIO_Init+0x2bc>)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	220f      	movs	r2, #15
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a40      	ldr	r2, [pc, #256]	@ (80023c8 <HAL_GPIO_Init+0x2c0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_GPIO_Init+0x1ec>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3f      	ldr	r2, [pc, #252]	@ (80023cc <HAL_GPIO_Init+0x2c4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1e8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3e      	ldr	r2, [pc, #248]	@ (80023d0 <HAL_GPIO_Init+0x2c8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1e4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3d      	ldr	r2, [pc, #244]	@ (80023d4 <HAL_GPIO_Init+0x2cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1e0>
 80022e4:	2303      	movs	r3, #3
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e004      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022f4:	2300      	movs	r3, #0
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002306:	492f      	ldr	r1, [pc, #188]	@ (80023c4 <HAL_GPIO_Init+0x2bc>)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002320:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	492c      	ldr	r1, [pc, #176]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800232e:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4928      	ldr	r1, [pc, #160]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4922      	ldr	r1, [pc, #136]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002356:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	491e      	ldr	r1, [pc, #120]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002360:	4013      	ands	r3, r2
 8002362:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4918      	ldr	r1, [pc, #96]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4914      	ldr	r1, [pc, #80]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d021      	beq.n	80023dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	490e      	ldr	r1, [pc, #56]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e021      	b.n	80023ea <HAL_GPIO_Init+0x2e2>
 80023a6:	bf00      	nop
 80023a8:	10320000 	.word	0x10320000
 80023ac:	10310000 	.word	0x10310000
 80023b0:	10220000 	.word	0x10220000
 80023b4:	10210000 	.word	0x10210000
 80023b8:	10120000 	.word	0x10120000
 80023bc:	10110000 	.word	0x10110000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40011400 	.word	0x40011400
 80023d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_GPIO_Init+0x304>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4909      	ldr	r1, [pc, #36]	@ (800240c <HAL_GPIO_Init+0x304>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	3301      	adds	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f47f ae8e 	bne.w	800211c <HAL_GPIO_Init+0x14>
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	372c      	adds	r7, #44	@ 0x2c
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	807b      	strh	r3, [r7, #2]
 800244a:	4613      	mov	r3, r2
 800244c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800244e:	787b      	ldrb	r3, [r7, #1]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800245a:	e003      	b.n	8002464 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	041a      	lsls	r2, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	611a      	str	r2, [r3, #16]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
	...

08002470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002486:	4a05      	ldr	r2, [pc, #20]	@ (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fb7a 	bl	8000b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40010400 	.word	0x40010400

080024a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e12b      	b.n	800270a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff f9da 	bl	8001880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2224      	movs	r2, #36	@ 0x24
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002504:	f002 fd92 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a81      	ldr	r2, [pc, #516]	@ (8002714 <HAL_I2C_Init+0x274>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d807      	bhi.n	8002524 <HAL_I2C_Init+0x84>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a80      	ldr	r2, [pc, #512]	@ (8002718 <HAL_I2C_Init+0x278>)
 8002518:	4293      	cmp	r3, r2
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e006      	b.n	8002532 <HAL_I2C_Init+0x92>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a7d      	ldr	r2, [pc, #500]	@ (800271c <HAL_I2C_Init+0x27c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	bf94      	ite	ls
 800252c:	2301      	movls	r3, #1
 800252e:	2300      	movhi	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0e7      	b.n	800270a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a78      	ldr	r2, [pc, #480]	@ (8002720 <HAL_I2C_Init+0x280>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a6a      	ldr	r2, [pc, #424]	@ (8002714 <HAL_I2C_Init+0x274>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d802      	bhi.n	8002574 <HAL_I2C_Init+0xd4>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3301      	adds	r3, #1
 8002572:	e009      	b.n	8002588 <HAL_I2C_Init+0xe8>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	4a69      	ldr	r2, [pc, #420]	@ (8002724 <HAL_I2C_Init+0x284>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	3301      	adds	r3, #1
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800259a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	495c      	ldr	r1, [pc, #368]	@ (8002714 <HAL_I2C_Init+0x274>)
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d819      	bhi.n	80025dc <HAL_I2C_Init+0x13c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e59      	subs	r1, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025bc:	400b      	ands	r3, r1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_I2C_Init+0x138>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e59      	subs	r1, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d6:	e051      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025d8:	2304      	movs	r3, #4
 80025da:	e04f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d111      	bne.n	8002608 <HAL_I2C_Init+0x168>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e58      	subs	r0, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e012      	b.n	800262e <HAL_I2C_Init+0x18e>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x196>
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_I2C_Init+0x1dc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <HAL_I2C_Init+0x1bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e58      	subs	r0, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800265a:	e00f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	0099      	lsls	r1, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6911      	ldr	r1, [r2, #16]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	000186a0 	.word	0x000186a0
 8002718:	001e847f 	.word	0x001e847f
 800271c:	003d08ff 	.word	0x003d08ff
 8002720:	431bde83 	.word	0x431bde83
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	460b      	mov	r3, r1
 8002736:	817b      	strh	r3, [r7, #10]
 8002738:	4613      	mov	r3, r2
 800273a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff faf6 	bl	8001d2c <HAL_GetTick>
 8002740:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b20      	cmp	r3, #32
 800274c:	f040 80e0 	bne.w	8002910 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2319      	movs	r3, #25
 8002756:	2201      	movs	r2, #1
 8002758:	4970      	ldr	r1, [pc, #448]	@ (800291c <HAL_I2C_Master_Transmit+0x1f4>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f964 	bl	8002a28 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
 8002768:	e0d3      	b.n	8002912 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_I2C_Master_Transmit+0x50>
 8002774:	2302      	movs	r3, #2
 8002776:	e0cc      	b.n	8002912 <HAL_I2C_Master_Transmit+0x1ea>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d007      	beq.n	800279e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2221      	movs	r2, #33	@ 0x21
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2210      	movs	r2, #16
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	893a      	ldrh	r2, [r7, #8]
 80027ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a50      	ldr	r2, [pc, #320]	@ (8002920 <HAL_I2C_Master_Transmit+0x1f8>)
 80027de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027e0:	8979      	ldrh	r1, [r7, #10]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f89c 	bl	8002924 <I2C_MasterRequestWrite>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e08d      	b.n	8002912 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800280c:	e066      	b.n	80028dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	6a39      	ldr	r1, [r7, #32]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fa22 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00d      	beq.n	800283a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2b04      	cmp	r3, #4
 8002824:	d107      	bne.n	8002836 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002834:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06b      	b.n	8002912 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d11b      	bne.n	80028b0 <HAL_I2C_Master_Transmit+0x188>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d017      	beq.n	80028b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	781a      	ldrb	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	6a39      	ldr	r1, [r7, #32]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fa19 	bl	8002cec <I2C_WaitOnBTFFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d107      	bne.n	80028d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e01a      	b.n	8002912 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d194      	bne.n	800280e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e000      	b.n	8002912 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	00100002 	.word	0x00100002
 8002920:	ffff0000 	.word	0xffff0000

08002924 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	460b      	mov	r3, r1
 8002932:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b08      	cmp	r3, #8
 800293e:	d006      	beq.n	800294e <I2C_MasterRequestWrite+0x2a>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d003      	beq.n	800294e <I2C_MasterRequestWrite+0x2a>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800294c:	d108      	bne.n	8002960 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e00b      	b.n	8002978 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	2b12      	cmp	r3, #18
 8002966:	d107      	bne.n	8002978 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002976:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f84f 	bl	8002a28 <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00d      	beq.n	80029ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800299e:	d103      	bne.n	80029a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e035      	b.n	8002a18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029b4:	d108      	bne.n	80029c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	e01b      	b.n	8002a00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029c8:	897b      	ldrh	r3, [r7, #10]
 80029ca:	11db      	asrs	r3, r3, #7
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f003 0306 	and.w	r3, r3, #6
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f063 030f 	orn	r3, r3, #15
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	490e      	ldr	r1, [pc, #56]	@ (8002a20 <I2C_MasterRequestWrite+0xfc>)
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f898 	bl	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e010      	b.n	8002a18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4907      	ldr	r1, [pc, #28]	@ (8002a24 <I2C_MasterRequestWrite+0x100>)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f888 	bl	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	00010008 	.word	0x00010008
 8002a24:	00010002 	.word	0x00010002

08002a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a38:	e048      	b.n	8002acc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d044      	beq.n	8002acc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f973 	bl	8001d2c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d139      	bne.n	8002acc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10d      	bne.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	e00c      	b.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	43da      	mvns	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d116      	bne.n	8002acc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e023      	b.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	0c1b      	lsrs	r3, r3, #16
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10d      	bne.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	43da      	mvns	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	e00c      	b.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	43da      	mvns	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d093      	beq.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b2a:	e071      	b.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3a:	d123      	bne.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e067      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d041      	beq.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8c:	f7ff f8ce 	bl	8001d2c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d302      	bcc.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d136      	bne.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10c      	bne.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e00b      	b.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e021      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	0c1b      	lsrs	r3, r3, #16
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10c      	bne.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	43da      	mvns	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4013      	ands	r3, r2
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e00b      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf14      	ite	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	2300      	moveq	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f47f af6d 	bne.w	8002b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c68:	e034      	b.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f886 	bl	8002d7c <I2C_IsAcknowledgeFailed>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e034      	b.n	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d028      	beq.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c82:	f7ff f853 	bl	8001d2c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d302      	bcc.n	8002c98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11d      	bne.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	2b80      	cmp	r3, #128	@ 0x80
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e007      	b.n	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cde:	2b80      	cmp	r3, #128	@ 0x80
 8002ce0:	d1c3      	bne.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf8:	e034      	b.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f83e 	bl	8002d7c <I2C_IsAcknowledgeFailed>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e034      	b.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d028      	beq.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7ff f80b 	bl	8001d2c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11d      	bne.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d016      	beq.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e007      	b.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d1c3      	bne.n	8002cfa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d92:	d11b      	bne.n	8002dcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0e8      	b.n	8002fbc <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f008 f8a8 	bl	800af54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2203      	movs	r2, #3
 8002e08:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 ffb3 	bl	8006d82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e26:	f003 ff89 	bl	8006d3c <USB_CoreInit>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0bf      	b.n	8002fbc <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 ffb7 	bl	8006db6 <USB_SetCurrentMode>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2202      	movs	r2, #2
 8002e52:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0b0      	b.n	8002fbc <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e03e      	b.n	8002ede <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3311      	adds	r3, #17
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3310      	adds	r3, #16
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	3313      	adds	r3, #19
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3320      	adds	r3, #32
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3324      	adds	r3, #36	@ 0x24
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	3301      	adds	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	791b      	ldrb	r3, [r3, #4]
 8002ee2:	7bfa      	ldrb	r2, [r7, #15]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d3bb      	bcc.n	8002e60 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e044      	b.n	8002f78 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	440b      	add	r3, r1
 8002f28:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	3301      	adds	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	791b      	ldrb	r3, [r3, #4]
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3b5      	bcc.n	8002eee <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f8c:	f003 ff1f 	bl	8006dce <USB_DevInit>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00c      	b.n	8002fbc <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f006 f99e 	bl	80092f6 <USB_DevDisconnect>

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_PCD_Start+0x16>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e016      	b.n	8003008 <HAL_PCD_Start+0x44>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 feb5 	bl	8006d56 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002fec:	2101      	movs	r1, #1
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f008 fa23 	bl	800b43a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f006 f972 	bl	80092e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f006 f974 	bl	800930a <USB_ReadInterrupts>
 8003022:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fb1a 	bl	8003668 <PCD_EP_ISR_Handler>

    return;
 8003034:	e119      	b.n	800326a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003052:	b292      	uxth	r2, r2
 8003054:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f007 fff6 	bl	800b04a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800305e:	2100      	movs	r1, #0
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f905 	bl	8003270 <HAL_PCD_SetAddress>

    return;
 8003066:	e100      	b.n	800326a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003084:	b292      	uxth	r2, r2
 8003086:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800308a:	e0ee      	b.n	800326a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030a8:	b292      	uxth	r2, r2
 80030aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80030ae:	e0dc      	b.n	800326a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d027      	beq.n	800310a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0204 	bic.w	r2, r2, #4
 80030cc:	b292      	uxth	r2, r2
 80030ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0208 	bic.w	r2, r2, #8
 80030e4:	b292      	uxth	r2, r2
 80030e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f007 ffe6 	bl	800b0bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003102:	b292      	uxth	r2, r2
 8003104:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003108:	e0af      	b.n	800326a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8083 	beq.w	800321c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003116:	2300      	movs	r3, #0
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e010      	b.n	800313e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	441a      	add	r2, r3
 8003128:	7ffb      	ldrb	r3, [r7, #31]
 800312a:	8812      	ldrh	r2, [r2, #0]
 800312c:	b292      	uxth	r2, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	3320      	adds	r3, #32
 8003132:	443b      	add	r3, r7
 8003134:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003138:	7ffb      	ldrb	r3, [r7, #31]
 800313a:	3301      	adds	r3, #1
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	7ffb      	ldrb	r3, [r7, #31]
 8003140:	2b07      	cmp	r3, #7
 8003142:	d9eb      	bls.n	800311c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	b292      	uxth	r2, r2
 8003158:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	b292      	uxth	r2, r2
 8003170:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003174:	bf00      	nop
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800317e:	b29b      	uxth	r3, r3
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f6      	beq.n	8003176 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319a:	b292      	uxth	r2, r2
 800319c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e00f      	b.n	80031c6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	4611      	mov	r1, r2
 80031ae:	7ffa      	ldrb	r2, [r7, #31]
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	440a      	add	r2, r1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	3320      	adds	r3, #32
 80031b8:	443b      	add	r3, r7
 80031ba:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80031be:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80031c0:	7ffb      	ldrb	r3, [r7, #31]
 80031c2:	3301      	adds	r3, #1
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	2b07      	cmp	r3, #7
 80031ca:	d9ec      	bls.n	80031a6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	b292      	uxth	r2, r2
 80031e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031f6:	b292      	uxth	r2, r2
 80031f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003204:	b29a      	uxth	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0204 	orr.w	r2, r2, #4
 800320e:	b292      	uxth	r2, r2
 8003210:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f007 ff37 	bl	800b088 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800321a:	e026      	b.n	800326a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00f      	beq.n	8003246 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003238:	b292      	uxth	r2, r2
 800323a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f007 fef5 	bl	800b02e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003244:	e011      	b.n	800326a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00c      	beq.n	800326a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003262:	b292      	uxth	r2, r2
 8003264:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003268:	bf00      	nop
  }
}
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_PCD_SetAddress+0x1a>
 8003286:	2302      	movs	r3, #2
 8003288:	e012      	b.n	80032b0 <HAL_PCD_SetAddress+0x40>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f006 f80b 	bl	80092bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	4608      	mov	r0, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	70fb      	strb	r3, [r7, #3]
 80032ca:	460b      	mov	r3, r1
 80032cc:	803b      	strh	r3, [r7, #0]
 80032ce:	4613      	mov	r3, r2
 80032d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	da0e      	bge.n	80032fc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 0207 	and.w	r2, r3, #7
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3310      	adds	r3, #16
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	705a      	strb	r2, [r3, #1]
 80032fa:	e00e      	b.n	800331a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 0207 	and.w	r2, r3, #7
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003326:	883a      	ldrh	r2, [r7, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	78ba      	ldrb	r2, [r7, #2]
 8003330:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003332:	78bb      	ldrb	r3, [r7, #2]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d102      	bne.n	800333e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_PCD_EP_Open+0x94>
 8003348:	2302      	movs	r3, #2
 800334a:	e00e      	b.n	800336a <HAL_PCD_EP_Open+0xb2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	4618      	mov	r0, r3
 800335c:	f003 fd54 	bl	8006e08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003368:	7afb      	ldrb	r3, [r7, #11]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800337e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003382:	2b00      	cmp	r3, #0
 8003384:	da0e      	bge.n	80033a4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 0207 	and.w	r2, r3, #7
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	3310      	adds	r3, #16
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	705a      	strb	r2, [r3, #1]
 80033a2:	e00e      	b.n	80033c2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 0207 	and.w	r2, r3, #7
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_PCD_EP_Close+0x6a>
 80033d8:	2302      	movs	r3, #2
 80033da:	e00e      	b.n	80033fa <HAL_PCD_EP_Close+0x88>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f004 f8cc 	bl	8007588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	460b      	mov	r3, r1
 8003410:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003412:	7afb      	ldrb	r3, [r7, #11]
 8003414:	f003 0207 	and.w	r2, r3, #7
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003442:	7afb      	ldrb	r3, [r7, #11]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	b2da      	uxtb	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6979      	ldr	r1, [r7, #20]
 8003454:	4618      	mov	r0, r3
 8003456:	f004 fa83 	bl	8007960 <USB_EPStartXfer>

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 0207 	and.w	r2, r3, #7
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	460b      	mov	r3, r1
 80034a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a2:	7afb      	ldrb	r3, [r7, #11]
 80034a4:	f003 0207 	and.w	r2, r3, #7
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	3310      	adds	r3, #16
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4413      	add	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2201      	movs	r2, #1
 80034dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034de:	7afb      	ldrb	r3, [r7, #11]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6979      	ldr	r1, [r7, #20]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f004 fa35 	bl	8007960 <USB_EPStartXfer>

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	7912      	ldrb	r2, [r2, #4]
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e04c      	b.n	80035b8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800351e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da0e      	bge.n	8003544 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 0207 	and.w	r2, r3, #7
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	3310      	adds	r3, #16
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	705a      	strb	r2, [r3, #1]
 8003542:	e00c      	b.n	800355e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_PCD_EP_SetStall+0x7e>
 800357a:	2302      	movs	r3, #2
 800357c:	e01c      	b.n	80035b8 <HAL_PCD_EP_SetStall+0xb8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	4618      	mov	r0, r3
 800358e:	f005 fd98 	bl	80090c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f005 febd 	bl	8009328 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	7912      	ldrb	r2, [r2, #4]
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e040      	b.n	8003660 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	da0e      	bge.n	8003604 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 0207 	and.w	r2, r3, #7
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	3310      	adds	r3, #16
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	705a      	strb	r2, [r3, #1]
 8003602:	e00e      	b.n	8003622 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	f003 0207 	and.w	r2, r3, #7
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_PCD_EP_ClrStall+0x82>
 800363e:	2302      	movs	r3, #2
 8003640:	e00e      	b.n	8003660 <HAL_PCD_EP_ClrStall+0xa0>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fd86 	bl	8009162 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b096      	sub	sp, #88	@ 0x58
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003670:	e3bb      	b.n	8003dea <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800367a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800367e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800368c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003690:	2b00      	cmp	r3, #0
 8003692:	f040 8175 	bne.w	8003980 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003696:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d14e      	bne.n	8003740 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	81fb      	strh	r3, [r7, #14]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	89fb      	ldrh	r3, [r7, #14]
 80036ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3310      	adds	r3, #16
 80036ca:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	3302      	adds	r3, #2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80036f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	441a      	add	r2, r3
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003706:	2100      	movs	r1, #0
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f007 fc76 	bl	800affa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7b5b      	ldrb	r3, [r3, #13]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8368 	beq.w	8003dea <PCD_EP_ISR_Handler+0x782>
 800371a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 8363 	bne.w	8003dea <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7b5b      	ldrb	r3, [r3, #13]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800372e:	b2da      	uxtb	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	735a      	strb	r2, [r3, #13]
 800373e:	e354      	b.n	8003dea <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003746:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003752:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800375a:	2b00      	cmp	r3, #0
 800375c:	d034      	beq.n	80037c8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003766:	b29b      	uxth	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	3306      	adds	r3, #6
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003788:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800379c:	b29b      	uxth	r3, r3
 800379e:	f005 fe13 	bl	80093c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80037ae:	4013      	ands	r3, r2
 80037b0:	823b      	strh	r3, [r7, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	8a3a      	ldrh	r2, [r7, #16]
 80037b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037bc:	b292      	uxth	r2, r2
 80037be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f007 fbed 	bl	800afa0 <HAL_PCD_SetupStageCallback>
 80037c6:	e310      	b.n	8003dea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f280 830c 	bge.w	8003dea <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80037de:	4013      	ands	r3, r2
 80037e0:	83fb      	strh	r3, [r7, #30]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	8bfa      	ldrh	r2, [r7, #30]
 80037e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037ec:	b292      	uxth	r2, r2
 80037ee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	3306      	adds	r3, #6
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800381c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d019      	beq.n	8003858 <PCD_EP_ISR_Handler+0x1f0>
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003832:	6959      	ldr	r1, [r3, #20]
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800383c:	b29b      	uxth	r3, r3
 800383e:	f005 fdc3 	bl	80093c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	441a      	add	r2, r3
 800384c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003850:	2100      	movs	r1, #0
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f007 fbb6 	bl	800afc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003862:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 82bd 	bne.w	8003dea <PCD_EP_ISR_Handler+0x782>
 8003870:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003874:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003878:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800387c:	f000 82b5 	beq.w	8003dea <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800388e:	b29b      	uxth	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4413      	add	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	801a      	strh	r2, [r3, #0]
 80038b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80038b6:	d91d      	bls.n	80038f4 <PCD_EP_ISR_Handler+0x28c>
 80038b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	647b      	str	r3, [r7, #68]	@ 0x44
 80038c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <PCD_EP_ISR_Handler+0x26a>
 80038cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ce:	3b01      	subs	r3, #1
 80038d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038da:	b29b      	uxth	r3, r3
 80038dc:	029b      	lsls	r3, r3, #10
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4313      	orrs	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	e026      	b.n	8003942 <PCD_EP_ISR_Handler+0x2da>
 80038f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <PCD_EP_ISR_Handler+0x2aa>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800390a:	b29a      	uxth	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	e017      	b.n	8003942 <PCD_EP_ISR_Handler+0x2da>
 8003912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	647b      	str	r3, [r7, #68]	@ 0x44
 800391a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <PCD_EP_ISR_Handler+0x2c4>
 8003926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003928:	3301      	adds	r3, #1
 800392a:	647b      	str	r3, [r7, #68]	@ 0x44
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29a      	uxth	r2, r3
 8003932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003934:	b29b      	uxth	r3, r3
 8003936:	029b      	lsls	r3, r3, #10
 8003938:	b29b      	uxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b29a      	uxth	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800394e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003952:	827b      	strh	r3, [r7, #18]
 8003954:	8a7b      	ldrh	r3, [r7, #18]
 8003956:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800395a:	827b      	strh	r3, [r7, #18]
 800395c:	8a7b      	ldrh	r3, [r7, #18]
 800395e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003962:	827b      	strh	r3, [r7, #18]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	8a7b      	ldrh	r3, [r7, #18]
 800396a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800396e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397a:	b29b      	uxth	r3, r3
 800397c:	8013      	strh	r3, [r2, #0]
 800397e:	e234      	b.n	8003dea <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003994:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003998:	2b00      	cmp	r3, #0
 800399a:	f280 80fc 	bge.w	8003b96 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80039b4:	4013      	ands	r3, r2
 80039b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80039cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039d0:	b292      	uxth	r2, r2
 80039d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80039d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80039ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ec:	7b1b      	ldrb	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d125      	bne.n	8003a3e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	3306      	adds	r3, #6
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a1a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003a1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8092 	beq.w	8003b4c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2e:	6959      	ldr	r1, [r3, #20]
 8003a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a32:	88da      	ldrh	r2, [r3, #6]
 8003a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a38:	f005 fcc6 	bl	80093c8 <USB_ReadPMA>
 8003a3c:	e086      	b.n	8003b4c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a40:	78db      	ldrb	r3, [r3, #3]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d10a      	bne.n	8003a5c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f9d9 	bl	8003e06 <HAL_PCD_EP_DB_Receive>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003a5a:	e077      	b.n	8003b4c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a76:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	441a      	add	r2, r3
 8003a88:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d024      	beq.n	8003b04 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	3302      	adds	r3, #2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003ae6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02e      	beq.n	8003b4c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af4:	6959      	ldr	r1, [r3, #20]
 8003af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af8:	891a      	ldrh	r2, [r3, #8]
 8003afa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003afe:	f005 fc63 	bl	80093c8 <USB_ReadPMA>
 8003b02:	e023      	b.n	8003b4c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	3306      	adds	r3, #6
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003b30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3e:	6959      	ldr	r1, [r3, #20]
 8003b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b42:	895a      	ldrh	r2, [r3, #10]
 8003b44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b48:	f005 fc3e 	bl	80093c8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b54:	441a      	add	r2, r3
 8003b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b62:	441a      	add	r2, r3
 8003b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b66:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <PCD_EP_ISR_Handler+0x514>
 8003b70:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d206      	bcs.n	8003b8a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f007 fa1e 	bl	800afc4 <HAL_PCD_DataOutStageCallback>
 8003b88:	e005      	b.n	8003b96 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fee5 	bl	8007960 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8123 	beq.w	8003dea <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003ba4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	3310      	adds	r3, #16
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf6:	78db      	ldrb	r3, [r3, #3]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f040 80a2 	bne.w	8003d42 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c06:	7b1b      	ldrb	r3, [r3, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8093 	beq.w	8003d34 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d046      	beq.n	8003ca8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d126      	bne.n	8003c70 <PCD_EP_ISR_Handler+0x608>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	4413      	add	r3, r2
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	011a      	lsls	r2, r3, #4
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	4413      	add	r3, r2
 8003c44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	801a      	strh	r2, [r3, #0]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	801a      	strh	r2, [r3, #0]
 8003c6e:	e061      	b.n	8003d34 <PCD_EP_ISR_Handler+0x6cc>
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d15d      	bne.n	8003d34 <PCD_EP_ISR_Handler+0x6cc>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	4413      	add	r3, r2
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	011a      	lsls	r2, r3, #4
 8003c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c98:	4413      	add	r3, r2
 8003c9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	e045      	b.n	8003d34 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d126      	bne.n	8003d04 <PCD_EP_ISR_Handler+0x69c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cca:	4413      	add	r3, r2
 8003ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011a      	lsls	r2, r3, #4
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e017      	b.n	8003d34 <PCD_EP_ISR_Handler+0x6cc>
 8003d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d113      	bne.n	8003d34 <PCD_EP_ISR_Handler+0x6cc>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1a:	4413      	add	r3, r2
 8003d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	011a      	lsls	r2, r3, #4
 8003d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d26:	4413      	add	r3, r2
 8003d28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	2200      	movs	r2, #0
 8003d32:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f007 f95d 	bl	800affa <HAL_PCD_DataInStageCallback>
 8003d40:	e053      	b.n	8003dea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003d42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d146      	bne.n	8003ddc <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	3302      	adds	r3, #2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d76:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d907      	bls.n	8003d96 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d8e:	1ad2      	subs	r2, r2, r3
 8003d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d92:	619a      	str	r2, [r3, #24]
 8003d94:	e002      	b.n	8003d9c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d98:	2200      	movs	r2, #0
 8003d9a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f007 f925 	bl	800affa <HAL_PCD_DataInStageCallback>
 8003db0:	e01b      	b.n	8003dea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003dba:	441a      	add	r2, r3
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003dc8:	441a      	add	r2, r3
 8003dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dcc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fdc3 	bl	8007960 <USB_EPStartXfer>
 8003dda:	e006      	b.n	8003dea <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ddc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003de0:	461a      	mov	r2, r3
 8003de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f91b 	bl	8004020 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	b21b      	sxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f6ff ac3b 	blt.w	8003672 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3758      	adds	r7, #88	@ 0x58
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b088      	sub	sp, #32
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d07e      	beq.n	8003f1c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	3302      	adds	r3, #2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	8b7b      	ldrh	r3, [r7, #26]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d306      	bcc.n	8003e60 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	8b7b      	ldrh	r3, [r7, #26]
 8003e58:	1ad2      	subs	r2, r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	619a      	str	r2, [r3, #24]
 8003e5e:	e002      	b.n	8003e66 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d123      	bne.n	8003eb6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e88:	833b      	strh	r3, [r7, #24]
 8003e8a:	8b3b      	ldrh	r3, [r7, #24]
 8003e8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e90:	833b      	strh	r3, [r7, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	8b3b      	ldrh	r3, [r7, #24]
 8003ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01f      	beq.n	8003f00 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eda:	82fb      	strh	r3, [r7, #22]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	8afb      	ldrh	r3, [r7, #22]
 8003eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f00:	8b7b      	ldrh	r3, [r7, #26]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8087 	beq.w	8004016 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6959      	ldr	r1, [r3, #20]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	891a      	ldrh	r2, [r3, #8]
 8003f14:	8b7b      	ldrh	r3, [r7, #26]
 8003f16:	f005 fa57 	bl	80093c8 <USB_ReadPMA>
 8003f1a:	e07c      	b.n	8004016 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	3306      	adds	r3, #6
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	8b7b      	ldrh	r3, [r7, #26]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d306      	bcc.n	8003f5e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	8b7b      	ldrh	r3, [r7, #26]
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	619a      	str	r2, [r3, #24]
 8003f5c:	e002      	b.n	8003f64 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d123      	bne.n	8003fb4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f86:	83fb      	strh	r3, [r7, #30]
 8003f88:	8bfb      	ldrh	r3, [r7, #30]
 8003f8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f8e:	83fb      	strh	r3, [r7, #30]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	8bfb      	ldrh	r3, [r7, #30]
 8003fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11f      	bne.n	8003ffe <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd8:	83bb      	strh	r3, [r7, #28]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	441a      	add	r2, r3
 8003fe8:	8bbb      	ldrh	r3, [r7, #28]
 8003fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ffe:	8b7b      	ldrh	r3, [r7, #26]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6959      	ldr	r1, [r3, #20]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	895a      	ldrh	r2, [r3, #10]
 8004010:	8b7b      	ldrh	r3, [r7, #26]
 8004012:	f005 f9d9 	bl	80093c8 <USB_ReadPMA>
    }
  }

  return count;
 8004016:	8b7b      	ldrh	r3, [r7, #26]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b0a4      	sub	sp, #144	@ 0x90
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 81dd 	beq.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	3302      	adds	r3, #2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004062:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800406e:	429a      	cmp	r2, r3
 8004070:	d907      	bls.n	8004082 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800407a:	1ad2      	subs	r2, r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	619a      	str	r2, [r3, #24]
 8004080:	e002      	b.n	8004088 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2200      	movs	r2, #0
 8004086:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 80b9 	bne.w	8004204 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d126      	bne.n	80040e8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ae:	4413      	add	r3, r2
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	011a      	lsls	r2, r3, #4
 80040b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ba:	4413      	add	r3, r2
 80040bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	801a      	strh	r2, [r3, #0]
 80040d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	e01a      	b.n	800411e <HAL_PCD_EP_DB_Transmit+0xfe>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	785b      	ldrb	r3, [r3, #1]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d116      	bne.n	800411e <HAL_PCD_EP_DB_Transmit+0xfe>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004104:	4413      	add	r3, r2
 8004106:	637b      	str	r3, [r7, #52]	@ 0x34
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	011a      	lsls	r2, r3, #4
 800410e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004110:	4413      	add	r3, r2
 8004112:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004116:	633b      	str	r3, [r7, #48]	@ 0x30
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	2200      	movs	r2, #0
 800411c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d126      	bne.n	800417a <HAL_PCD_EP_DB_Transmit+0x15a>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	011a      	lsls	r2, r3, #4
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800415e:	b29a      	uxth	r2, r3
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004172:	b29a      	uxth	r2, r3
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	801a      	strh	r2, [r3, #0]
 8004178:	e017      	b.n	80041aa <HAL_PCD_EP_DB_Transmit+0x18a>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d113      	bne.n	80041aa <HAL_PCD_EP_DB_Transmit+0x18a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	4413      	add	r3, r2
 8004192:	627b      	str	r3, [r7, #36]	@ 0x24
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	011a      	lsls	r2, r3, #4
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	4413      	add	r3, r2
 800419e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	2200      	movs	r2, #0
 80041a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	4619      	mov	r1, r3
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f006 ff22 	bl	800affa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 82fc 	beq.w	80047ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	82fb      	strh	r3, [r7, #22]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	8afb      	ldrh	r3, [r7, #22]
 80041ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fe:	b29b      	uxth	r3, r3
 8004200:	8013      	strh	r3, [r2, #0]
 8004202:	e2da      	b.n	80047ba <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d021      	beq.n	8004252 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004228:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800423e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004246:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800424a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004258:	2b01      	cmp	r3, #1
 800425a:	f040 82ae 	bne.w	80047ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004266:	441a      	add	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004274:	441a      	add	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6a1a      	ldr	r2, [r3, #32]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	d30b      	bcc.n	800429e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	621a      	str	r2, [r3, #32]
 800429c:	e017      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80042a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042b6:	e00a      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2200      	movs	r2, #0
 80042cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d165      	bne.n	80043a2 <HAL_PCD_EP_DB_Transmit+0x382>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ea:	4413      	add	r3, r2
 80042ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	011a      	lsls	r2, r3, #4
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	4413      	add	r3, r2
 80042f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004308:	b29a      	uxth	r2, r3
 800430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004312:	2b3e      	cmp	r3, #62	@ 0x3e
 8004314:	d91d      	bls.n	8004352 <HAL_PCD_EP_DB_Transmit+0x332>
 8004316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800431e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <HAL_PCD_EP_DB_Transmit+0x310>
 800432a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800432c:	3b01      	subs	r3, #1
 800432e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29a      	uxth	r2, r3
 8004336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004338:	b29b      	uxth	r3, r3
 800433a:	029b      	lsls	r3, r3, #10
 800433c:	b29b      	uxth	r3, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800434a:	b29a      	uxth	r2, r3
 800434c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	e044      	b.n	80043dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_PCD_EP_DB_Transmit+0x350>
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004368:	b29a      	uxth	r2, r3
 800436a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	e035      	b.n	80043dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_PCD_EP_DB_Transmit+0x36a>
 8004384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004386:	3301      	adds	r3, #1
 8004388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29a      	uxth	r2, r3
 8004390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004392:	b29b      	uxth	r3, r3
 8004394:	029b      	lsls	r3, r3, #10
 8004396:	b29b      	uxth	r3, r3
 8004398:	4313      	orrs	r3, r2
 800439a:	b29a      	uxth	r2, r3
 800439c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439e:	801a      	strh	r2, [r3, #0]
 80043a0:	e01c      	b.n	80043dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d118      	bne.n	80043dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043be:	4413      	add	r3, r2
 80043c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	011a      	lsls	r2, r3, #4
 80043c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ca:	4413      	add	r3, r2
 80043cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043da:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6959      	ldr	r1, [r3, #20]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	891a      	ldrh	r2, [r3, #8]
 80043e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f004 ffa6 	bl	800933e <USB_WritePMA>
 80043f2:	e1e2      	b.n	80047ba <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	3306      	adds	r3, #6
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800441c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004428:	429a      	cmp	r2, r3
 800442a:	d307      	bcc.n	800443c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004434:	1ad2      	subs	r2, r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	619a      	str	r2, [r3, #24]
 800443a:	e002      	b.n	8004442 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2200      	movs	r2, #0
 8004440:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 80c0 	bne.w	80045cc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d126      	bne.n	80044a2 <HAL_PCD_EP_DB_Transmit+0x482>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004468:	4413      	add	r3, r2
 800446a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	011a      	lsls	r2, r3, #4
 8004472:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004474:	4413      	add	r3, r2
 8004476:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800447a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800447c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004486:	b29a      	uxth	r2, r3
 8004488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449a:	b29a      	uxth	r2, r3
 800449c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	e01a      	b.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	785b      	ldrb	r3, [r3, #1]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d116      	bne.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044be:	4413      	add	r3, r2
 80044c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	011a      	lsls	r2, r3, #4
 80044c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ca:	4413      	add	r3, r2
 80044cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80044d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044d4:	2200      	movs	r2, #0
 80044d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d12b      	bne.n	800453e <HAL_PCD_EP_DB_Transmit+0x51e>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fa:	4413      	add	r3, r2
 80044fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	011a      	lsls	r2, r3, #4
 8004504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004506:	4413      	add	r3, r2
 8004508:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800450c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004510:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800451c:	b29a      	uxth	r2, r3
 800451e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004534:	b29a      	uxth	r2, r3
 8004536:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800453a:	801a      	strh	r2, [r3, #0]
 800453c:	e017      	b.n	800456e <HAL_PCD_EP_DB_Transmit+0x54e>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d113      	bne.n	800456e <HAL_PCD_EP_DB_Transmit+0x54e>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004554:	4413      	add	r3, r2
 8004556:	677b      	str	r3, [r7, #116]	@ 0x74
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	011a      	lsls	r2, r3, #4
 800455e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004560:	4413      	add	r3, r2
 8004562:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004566:	673b      	str	r3, [r7, #112]	@ 0x70
 8004568:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800456a:	2200      	movs	r2, #0
 800456c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	4619      	mov	r1, r3
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f006 fd40 	bl	800affa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 811a 	bne.w	80047ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800459c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80045b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	8013      	strh	r3, [r2, #0]
 80045ca:	e0f6      	b.n	80047ba <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d121      	bne.n	800461a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800460a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800460e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004616:	b29b      	uxth	r3, r3
 8004618:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 80ca 	bne.w	80047ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800462e:	441a      	add	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800463c:	441a      	add	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6a1a      	ldr	r2, [r3, #32]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	429a      	cmp	r2, r3
 800464c:	d30b      	bcc.n	8004666 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6a1a      	ldr	r2, [r3, #32]
 800465a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800465e:	1ad2      	subs	r2, r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	621a      	str	r2, [r3, #32]
 8004664:	e017      	b.n	8004696 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800466e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800467e:	e00a      	b.n	8004696 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2200      	movs	r2, #0
 800468c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	657b      	str	r3, [r7, #84]	@ 0x54
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d165      	bne.n	8004770 <HAL_PCD_EP_DB_Transmit+0x750>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b8:	4413      	add	r3, r2
 80046ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	011a      	lsls	r2, r3, #4
 80046c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046c4:	4413      	add	r3, r2
 80046c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80046e2:	d91d      	bls.n	8004720 <HAL_PCD_EP_DB_Transmit+0x700>
 80046e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <HAL_PCD_EP_DB_Transmit+0x6de>
 80046f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046fa:	3b01      	subs	r3, #1
 80046fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29a      	uxth	r2, r3
 8004704:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004706:	b29b      	uxth	r3, r3
 8004708:	029b      	lsls	r3, r3, #10
 800470a:	b29b      	uxth	r3, r3
 800470c:	4313      	orrs	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004718:	b29a      	uxth	r2, r3
 800471a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e041      	b.n	80047a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8004720:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <HAL_PCD_EP_DB_Transmit+0x71e>
 8004728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29a      	uxth	r2, r3
 8004738:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	e032      	b.n	80047a4 <HAL_PCD_EP_DB_Transmit+0x784>
 800473e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_PCD_EP_DB_Transmit+0x738>
 8004752:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004754:	3301      	adds	r3, #1
 8004756:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29a      	uxth	r2, r3
 800475e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004760:	b29b      	uxth	r3, r3
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	b29b      	uxth	r3, r3
 8004766:	4313      	orrs	r3, r2
 8004768:	b29a      	uxth	r2, r3
 800476a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	e019      	b.n	80047a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d115      	bne.n	80047a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004786:	4413      	add	r3, r2
 8004788:	657b      	str	r3, [r7, #84]	@ 0x54
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	011a      	lsls	r2, r3, #4
 8004790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004792:	4413      	add	r3, r2
 8004794:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004798:	653b      	str	r3, [r7, #80]	@ 0x50
 800479a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6959      	ldr	r1, [r3, #20]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	895a      	ldrh	r2, [r3, #10]
 80047b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f004 fdc2 	bl	800933e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d4:	82bb      	strh	r3, [r7, #20]
 80047d6:	8abb      	ldrh	r3, [r7, #20]
 80047d8:	f083 0310 	eor.w	r3, r3, #16
 80047dc:	82bb      	strh	r3, [r7, #20]
 80047de:	8abb      	ldrh	r3, [r7, #20]
 80047e0:	f083 0320 	eor.w	r3, r3, #32
 80047e4:	82bb      	strh	r3, [r7, #20]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	441a      	add	r2, r3
 80047f4:	8abb      	ldrh	r3, [r7, #20]
 80047f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004806:	b29b      	uxth	r3, r3
 8004808:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3790      	adds	r7, #144	@ 0x90
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	817b      	strh	r3, [r7, #10]
 8004822:	4613      	mov	r3, r2
 8004824:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	f003 0207 	and.w	r2, r3, #7
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	3310      	adds	r3, #16
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e009      	b.n	800485e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800484a:	897a      	ldrh	r2, [r7, #10]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800485e:	893b      	ldrh	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	b29a      	uxth	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	80da      	strh	r2, [r3, #6]
 8004872:	e00b      	b.n	800488c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2201      	movs	r2, #1
 8004878:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	b29a      	uxth	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	b29a      	uxth	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e272      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8087 	beq.w	80049c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b8:	4b92      	ldr	r3, [pc, #584]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d00c      	beq.n	80048de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d112      	bne.n	80048f6 <HAL_RCC_OscConfig+0x5e>
 80048d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048dc:	d10b      	bne.n	80048f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048de:	4b89      	ldr	r3, [pc, #548]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x12c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d168      	bne.n	80049c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e24c      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x76>
 8004900:	4b80      	ldr	r3, [pc, #512]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7f      	ldr	r2, [pc, #508]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e02e      	b.n	800496c <HAL_RCC_OscConfig+0xd4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x98>
 8004916:	4b7b      	ldr	r3, [pc, #492]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a7a      	ldr	r2, [pc, #488]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 800491c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b78      	ldr	r3, [pc, #480]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a77      	ldr	r2, [pc, #476]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004928:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <HAL_RCC_OscConfig+0xd4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0xbc>
 800493a:	4b72      	ldr	r3, [pc, #456]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a71      	ldr	r2, [pc, #452]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b6f      	ldr	r3, [pc, #444]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xd4>
 8004954:	4b6b      	ldr	r3, [pc, #428]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6a      	ldr	r2, [pc, #424]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 800495a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b68      	ldr	r3, [pc, #416]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a67      	ldr	r2, [pc, #412]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800496a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fd f9da 	bl	8001d2c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497c:	f7fd f9d6 	bl	8001d2c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	@ 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e200      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b5d      	ldr	r3, [pc, #372]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0xe4>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fd f9c6 	bl	8001d2c <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fd f9c2 	bl	8001d2c <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	@ 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e1ec      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	4b53      	ldr	r3, [pc, #332]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x10c>
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d063      	beq.n	8004a9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049de:	4b49      	ldr	r3, [pc, #292]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x18c>
 80049ea:	4b46      	ldr	r3, [pc, #280]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	4b43      	ldr	r3, [pc, #268]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x176>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1c0      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4939      	ldr	r1, [pc, #228]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	e03a      	b.n	8004a9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d020      	beq.n	8004a6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a2c:	4b36      	ldr	r3, [pc, #216]	@ (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fd f97b 	bl	8001d2c <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3a:	f7fd f977 	bl	8001d2c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e1a1      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a58:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4927      	ldr	r1, [pc, #156]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
 8004a6c:	e015      	b.n	8004a9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6e:	4b26      	ldr	r3, [pc, #152]	@ (8004b08 <HAL_RCC_OscConfig+0x270>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd f95a 	bl	8001d2c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a7c:	f7fd f956 	bl	8001d2c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e180      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d03a      	beq.n	8004b1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d019      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aae:	4b17      	ldr	r3, [pc, #92]	@ (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab4:	f7fd f93a 	bl	8001d2c <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004abc:	f7fd f936 	bl	8001d2c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e160      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ada:	2001      	movs	r0, #1
 8004adc:	f000 face 	bl	800507c <RCC_Delay>
 8004ae0:	e01c      	b.n	8004b1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae8:	f7fd f920 	bl	8001d2c <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aee:	e00f      	b.n	8004b10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af0:	f7fd f91c 	bl	8001d2c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d908      	bls.n	8004b10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e146      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	42420000 	.word	0x42420000
 8004b0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b10:	4b92      	ldr	r3, [pc, #584]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e9      	bne.n	8004af0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80a6 	beq.w	8004c76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3a:	4b88      	ldr	r3, [pc, #544]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4a87      	ldr	r2, [pc, #540]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	61d3      	str	r3, [r2, #28]
 8004b46:	4b85      	ldr	r3, [pc, #532]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	4b82      	ldr	r3, [pc, #520]	@ (8004d60 <HAL_RCC_OscConfig+0x4c8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d118      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b62:	4b7f      	ldr	r3, [pc, #508]	@ (8004d60 <HAL_RCC_OscConfig+0x4c8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a7e      	ldr	r2, [pc, #504]	@ (8004d60 <HAL_RCC_OscConfig+0x4c8>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6e:	f7fd f8dd 	bl	8001d2c <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b76:	f7fd f8d9 	bl	8001d2c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b64      	cmp	r3, #100	@ 0x64
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e103      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	4b75      	ldr	r3, [pc, #468]	@ (8004d60 <HAL_RCC_OscConfig+0x4c8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x312>
 8004b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6213      	str	r3, [r2, #32]
 8004ba8:	e02d      	b.n	8004c06 <HAL_RCC_OscConfig+0x36e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x334>
 8004bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4a69      	ldr	r2, [pc, #420]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	6213      	str	r3, [r2, #32]
 8004bbe:	4b67      	ldr	r3, [pc, #412]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	4a66      	ldr	r2, [pc, #408]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	6213      	str	r3, [r2, #32]
 8004bca:	e01c      	b.n	8004c06 <HAL_RCC_OscConfig+0x36e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d10c      	bne.n	8004bee <HAL_RCC_OscConfig+0x356>
 8004bd4:	4b61      	ldr	r3, [pc, #388]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4a60      	ldr	r2, [pc, #384]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	f043 0304 	orr.w	r3, r3, #4
 8004bde:	6213      	str	r3, [r2, #32]
 8004be0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6213      	str	r3, [r2, #32]
 8004bec:	e00b      	b.n	8004c06 <HAL_RCC_OscConfig+0x36e>
 8004bee:	4b5b      	ldr	r3, [pc, #364]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	6213      	str	r3, [r2, #32]
 8004bfa:	4b58      	ldr	r3, [pc, #352]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	4a57      	ldr	r2, [pc, #348]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c00:	f023 0304 	bic.w	r3, r3, #4
 8004c04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d015      	beq.n	8004c3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0e:	f7fd f88d 	bl	8001d2c <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fd f889 	bl	8001d2c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0b1      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ee      	beq.n	8004c16 <HAL_RCC_OscConfig+0x37e>
 8004c38:	e014      	b.n	8004c64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3a:	f7fd f877 	bl	8001d2c <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fd f873 	bl	8001d2c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e09b      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c58:	4b40      	ldr	r3, [pc, #256]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ee      	bne.n	8004c42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d105      	bne.n	8004c76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8087 	beq.w	8004d8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c80:	4b36      	ldr	r3, [pc, #216]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d061      	beq.n	8004d50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d146      	bne.n	8004d22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c94:	4b33      	ldr	r3, [pc, #204]	@ (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fd f847 	bl	8001d2c <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fd f843 	bl	8001d2c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e06d      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cb4:	4b29      	ldr	r3, [pc, #164]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc8:	d108      	bne.n	8004cdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cca:	4b24      	ldr	r3, [pc, #144]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4921      	ldr	r1, [pc, #132]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a19      	ldr	r1, [r3, #32]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	430b      	orrs	r3, r1
 8004cee:	491b      	ldr	r1, [pc, #108]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fd f817 	bl	8001d2c <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fd f813 	bl	8001d2c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e03d      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d14:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x46a>
 8004d20:	e035      	b.n	8004d8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d22:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <HAL_RCC_OscConfig+0x4cc>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fd f800 	bl	8001d2c <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d30:	f7fc fffc 	bl	8001d2c <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e026      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d42:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <HAL_RCC_OscConfig+0x4c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x498>
 8004d4e:	e01e      	b.n	8004d8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e019      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40007000 	.word	0x40007000
 8004d64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_OscConfig+0x500>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000

08004d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0d0      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004db0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d910      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b67      	ldr	r3, [pc, #412]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 0207 	bic.w	r2, r3, #7
 8004dc6:	4965      	ldr	r1, [pc, #404]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b63      	ldr	r3, [pc, #396]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b8      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df8:	4b59      	ldr	r3, [pc, #356]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4a58      	ldr	r2, [pc, #352]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e10:	4b53      	ldr	r3, [pc, #332]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a52      	ldr	r2, [pc, #328]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b50      	ldr	r3, [pc, #320]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	494d      	ldr	r1, [pc, #308]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d040      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d115      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	4b41      	ldr	r3, [pc, #260]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e073      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e06b      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	4b39      	ldr	r3, [pc, #228]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4936      	ldr	r1, [pc, #216]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e8c:	f7fc ff4e 	bl	8001d2c <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e94:	f7fc ff4a 	bl	8001d2c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e053      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b27      	ldr	r3, [pc, #156]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d210      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b24      	ldr	r3, [pc, #144]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 0207 	bic.w	r2, r3, #7
 8004ed2:	4922      	ldr	r1, [pc, #136]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e032      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4916      	ldr	r1, [pc, #88]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f16:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	490e      	ldr	r1, [pc, #56]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f2a:	f000 f821 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	490a      	ldr	r1, [pc, #40]	@ (8004f64 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3c:	5ccb      	ldrb	r3, [r1, r3]
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x1cc>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <HAL_RCC_ClockConfig+0x1d0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fc feac 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40021000 	.word	0x40021000
 8004f64:	0800beb4 	.word	0x0800beb4
 8004f68:	2000000c 	.word	0x2000000c
 8004f6c:	20000010 	.word	0x20000010

08004f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d002      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x30>
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x36>
 8004f9e:	e027      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fa0:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fa2:	613b      	str	r3, [r7, #16]
      break;
 8004fa4:	e027      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	0c9b      	lsrs	r3, r3, #18
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	4a17      	ldr	r2, [pc, #92]	@ (800500c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fb0:	5cd3      	ldrb	r3, [r2, r3]
 8004fb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fbe:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	0c5b      	lsrs	r3, r3, #17
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	4a11      	ldr	r2, [pc, #68]	@ (8005010 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fca:	5cd3      	ldrb	r3, [r2, r3]
 8004fcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fd2:	fb03 f202 	mul.w	r2, r3, r2
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e004      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fe4:	fb02 f303 	mul.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	613b      	str	r3, [r7, #16]
      break;
 8004fee:	e002      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ff2:	613b      	str	r3, [r7, #16]
      break;
 8004ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff6:	693b      	ldr	r3, [r7, #16]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	007a1200 	.word	0x007a1200
 800500c:	0800becc 	.word	0x0800becc
 8005010:	0800bedc 	.word	0x0800bedc
 8005014:	003d0900 	.word	0x003d0900

08005018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800501c:	4b02      	ldr	r3, [pc, #8]	@ (8005028 <HAL_RCC_GetHCLKFreq+0x10>)
 800501e:	681b      	ldr	r3, [r3, #0]
}
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	2000000c 	.word	0x2000000c

0800502c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005030:	f7ff fff2 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 8005034:	4602      	mov	r2, r0
 8005036:	4b05      	ldr	r3, [pc, #20]	@ (800504c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	4903      	ldr	r1, [pc, #12]	@ (8005050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005042:	5ccb      	ldrb	r3, [r1, r3]
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40021000 	.word	0x40021000
 8005050:	0800bec4 	.word	0x0800bec4

08005054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005058:	f7ff ffde 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	0adb      	lsrs	r3, r3, #11
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	4903      	ldr	r1, [pc, #12]	@ (8005078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800506a:	5ccb      	ldrb	r3, [r1, r3]
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	0800bec4 	.word	0x0800bec4

0800507c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005084:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <RCC_Delay+0x34>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a0a      	ldr	r2, [pc, #40]	@ (80050b4 <RCC_Delay+0x38>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	0a5b      	lsrs	r3, r3, #9
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005098:	bf00      	nop
  }
  while (Delay --);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1e5a      	subs	r2, r3, #1
 800509e:	60fa      	str	r2, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f9      	bne.n	8005098 <RCC_Delay+0x1c>
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr
 80050b0:	2000000c 	.word	0x2000000c
 80050b4:	10624dd3 	.word	0x10624dd3

080050b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d07d      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80050d4:	2300      	movs	r3, #0
 80050d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10d      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	61d3      	str	r3, [r2, #28]
 80050f0:	4b49      	ldr	r3, [pc, #292]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fc:	2301      	movs	r3, #1
 80050fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005100:	4b46      	ldr	r3, [pc, #280]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d118      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510c:	4b43      	ldr	r3, [pc, #268]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a42      	ldr	r2, [pc, #264]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005118:	f7fc fe08 	bl	8001d2c <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511e:	e008      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005120:	f7fc fe04 	bl	8001d2c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	@ 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e06d      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005132:	4b3a      	ldr	r3, [pc, #232]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800513e:	4b36      	ldr	r3, [pc, #216]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005146:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d02e      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d027      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800515c:	4b2e      	ldr	r3, [pc, #184]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005164:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005166:	4b2e      	ldr	r3, [pc, #184]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800516c:	4b2c      	ldr	r3, [pc, #176]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005172:	4a29      	ldr	r2, [pc, #164]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d014      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fc fdd3 	bl	8001d2c <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005188:	e00a      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518a:	f7fc fdcf 	bl	8001d2c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005198:	4293      	cmp	r3, r2
 800519a:	d901      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e036      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ee      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4917      	ldr	r1, [pc, #92]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051be:	7dfb      	ldrb	r3, [r7, #23]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c4:	4b14      	ldr	r3, [pc, #80]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4a13      	ldr	r2, [pc, #76]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	490b      	ldr	r1, [pc, #44]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	4904      	ldr	r1, [pc, #16]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005208:	4313      	orrs	r3, r2
 800520a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
 800521c:	40007000 	.word	0x40007000
 8005220:	42420440 	.word	0x42420440

08005224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e076      	b.n	8005324 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d108      	bne.n	8005250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005246:	d009      	beq.n	800525c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	61da      	str	r2, [r3, #28]
 800524e:	e005      	b.n	800525c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fc fb6e 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e0:	ea42 0103 	orr.w	r1, r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	0c1a      	lsrs	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f002 0204 	and.w	r2, r2, #4
 8005302:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005312:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	@ 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800533a:	2301      	movs	r3, #1
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800533e:	f7fc fcf5 	bl	8001d2c <HAL_GetTick>
 8005342:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800534a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005356:	7ffb      	ldrb	r3, [r7, #31]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d00c      	beq.n	8005376 <HAL_SPI_TransmitReceive+0x4a>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005362:	d106      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x46>
 800536c:	7ffb      	ldrb	r3, [r7, #31]
 800536e:	2b04      	cmp	r3, #4
 8005370:	d001      	beq.n	8005376 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
 8005374:	e17f      	b.n	8005676 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x5c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x5c>
 8005382:	887b      	ldrh	r3, [r7, #2]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e174      	b.n	8005676 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_SPI_TransmitReceive+0x6e>
 8005396:	2302      	movs	r3, #2
 8005398:	e16d      	b.n	8005676 <HAL_SPI_TransmitReceive+0x34a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d003      	beq.n	80053b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2205      	movs	r2, #5
 80053b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	887a      	ldrh	r2, [r7, #2]
 80053c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	887a      	ldrh	r2, [r7, #2]
 80053cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	887a      	ldrh	r2, [r7, #2]
 80053de:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f6:	2b40      	cmp	r3, #64	@ 0x40
 80053f8:	d007      	beq.n	800540a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005412:	d17e      	bne.n	8005512 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_SPI_TransmitReceive+0xf6>
 800541c:	8afb      	ldrh	r3, [r7, #22]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d16c      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005446:	e059      	b.n	80054fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d11b      	bne.n	800548e <HAL_SPI_TransmitReceive+0x162>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d016      	beq.n	800548e <HAL_SPI_TransmitReceive+0x162>
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	2b01      	cmp	r3, #1
 8005464:	d113      	bne.n	800548e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546a:	881a      	ldrh	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005476:	1c9a      	adds	r2, r3, #2
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b01      	cmp	r3, #1
 800549a:	d119      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x1a4>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d014      	beq.n	80054d0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	b292      	uxth	r2, r2
 80054b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	1c9a      	adds	r2, r3, #2
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054cc:	2301      	movs	r3, #1
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054d0:	f7fc fc2c 	bl	8001d2c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054dc:	429a      	cmp	r2, r3
 80054de:	d80d      	bhi.n	80054fc <HAL_SPI_TransmitReceive+0x1d0>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e6:	d009      	beq.n	80054fc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0bc      	b.n	8005676 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1a0      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x11c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d19b      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x11c>
 8005510:	e082      	b.n	8005618 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x1f4>
 800551a:	8afb      	ldrh	r3, [r7, #22]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d171      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005546:	e05d      	b.n	8005604 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b02      	cmp	r3, #2
 8005554:	d11c      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x264>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d017      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x264>
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	2b01      	cmp	r3, #1
 8005564:	d114      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	7812      	ldrb	r2, [r2, #0]
 8005572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d119      	bne.n	80055d2 <HAL_SPI_TransmitReceive+0x2a6>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d014      	beq.n	80055d2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055ce:	2301      	movs	r3, #1
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055d2:	f7fc fbab 	bl	8001d2c <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055de:	429a      	cmp	r2, r3
 80055e0:	d803      	bhi.n	80055ea <HAL_SPI_TransmitReceive+0x2be>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d102      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x2c4>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e038      	b.n	8005676 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d19c      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x21c>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d197      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005618:	6a3a      	ldr	r2, [r7, #32]
 800561a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f8b7 	bl	8005790 <SPI_EndRxTxTransaction>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e01d      	b.n	8005676 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005674:	2300      	movs	r3, #0
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3728      	adds	r7, #40	@ 0x28
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	4613      	mov	r3, r2
 800568e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005690:	f7fc fb4c 	bl	8001d2c <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	4413      	add	r3, r2
 800569e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056a0:	f7fc fb44 	bl	8001d2c <HAL_GetTick>
 80056a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056a6:	4b39      	ldr	r3, [pc, #228]	@ (800578c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	015b      	lsls	r3, r3, #5
 80056ac:	0d1b      	lsrs	r3, r3, #20
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056b6:	e054      	b.n	8005762 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d050      	beq.n	8005762 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056c0:	f7fc fb34 	bl	8001d2c <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d902      	bls.n	80056d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d13d      	bne.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ee:	d111      	bne.n	8005714 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f8:	d004      	beq.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005702:	d107      	bne.n	8005714 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005712:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800571c:	d10f      	bne.n	800573e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800573c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e017      	b.n	8005782 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3b01      	subs	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4013      	ands	r3, r2
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	429a      	cmp	r2, r3
 8005770:	bf0c      	ite	eq
 8005772:	2301      	moveq	r3, #1
 8005774:	2300      	movne	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	429a      	cmp	r2, r3
 800577e:	d19b      	bne.n	80056b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	2000000c 	.word	0x2000000c

08005790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2201      	movs	r2, #1
 80057a4:	2102      	movs	r1, #2
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7ff ff6a 	bl	8005680 <SPI_WaitFlagStateUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e013      	b.n	80057ea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2200      	movs	r2, #0
 80057ca:	2180      	movs	r1, #128	@ 0x80
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff ff57 	bl	8005680 <SPI_WaitFlagStateUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e000      	b.n	80057ea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e041      	b.n	8005888 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fc f8e7 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f000 faa5 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a18      	ldr	r2, [pc, #96]	@ (8005918 <HAL_TIM_Base_Start+0x88>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_TIM_Base_Start+0x48>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c2:	d009      	beq.n	80058d8 <HAL_TIM_Base_Start+0x48>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a14      	ldr	r2, [pc, #80]	@ (800591c <HAL_TIM_Base_Start+0x8c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIM_Base_Start+0x48>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a13      	ldr	r2, [pc, #76]	@ (8005920 <HAL_TIM_Base_Start+0x90>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d111      	bne.n	80058fc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d010      	beq.n	800590c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	e007      	b.n	800590c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800

08005924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d001      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e03a      	b.n	80059b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a18      	ldr	r2, [pc, #96]	@ (80059bc <HAL_TIM_Base_Start_IT+0x98>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_TIM_Base_Start_IT+0x58>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005966:	d009      	beq.n	800597c <HAL_TIM_Base_Start_IT+0x58>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a14      	ldr	r2, [pc, #80]	@ (80059c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_Base_Start_IT+0x58>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d111      	bne.n	80059a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b06      	cmp	r3, #6
 800598c:	d010      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0201 	orr.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599e:	e007      	b.n	80059b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800

080059c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d020      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0202 	mvn.w	r2, #2
 80059fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f998 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f98b 	bl	8005d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f99a 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d020      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01b      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0204 	mvn.w	r2, #4
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f972 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f965 	bl	8005d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f974 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d020      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0208 	mvn.w	r2, #8
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f94c 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f93f 	bl	8005d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f94e 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d020      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0210 	mvn.w	r2, #16
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f926 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f919 	bl	8005d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f928 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0201 	mvn.w	r2, #1
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb f8a4 	bl	8000c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa7f 	bl	8006056 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8f8 	bl	8005d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0220 	mvn.w	r2, #32
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa52 	bl	8006044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e0b4      	b.n	8005d2e <HAL_TIM_ConfigClockSource+0x186>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfc:	d03e      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0xd4>
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c02:	f200 8087 	bhi.w	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c0a:	f000 8086 	beq.w	8005d1a <HAL_TIM_ConfigClockSource+0x172>
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c12:	d87f      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b70      	cmp	r3, #112	@ 0x70
 8005c16:	d01a      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0xa6>
 8005c18:	2b70      	cmp	r3, #112	@ 0x70
 8005c1a:	d87b      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b60      	cmp	r3, #96	@ 0x60
 8005c1e:	d050      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8005c20:	2b60      	cmp	r3, #96	@ 0x60
 8005c22:	d877      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b50      	cmp	r3, #80	@ 0x50
 8005c26:	d03c      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8005c28:	2b50      	cmp	r3, #80	@ 0x50
 8005c2a:	d873      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b40      	cmp	r3, #64	@ 0x40
 8005c2e:	d058      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8005c30:	2b40      	cmp	r3, #64	@ 0x40
 8005c32:	d86f      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c34:	2b30      	cmp	r3, #48	@ 0x30
 8005c36:	d064      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c38:	2b30      	cmp	r3, #48	@ 0x30
 8005c3a:	d86b      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d060      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d867      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05c      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d05a      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c4c:	e062      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c5e:	f000 f974 	bl	8005f4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	609a      	str	r2, [r3, #8]
      break;
 8005c7a:	e04f      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c8c:	f000 f95d 	bl	8005f4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c9e:	609a      	str	r2, [r3, #8]
      break;
 8005ca0:	e03c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f000 f8d4 	bl	8005e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2150      	movs	r1, #80	@ 0x50
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f92b 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005cc0:	e02c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f000 f8f2 	bl	8005eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2160      	movs	r1, #96	@ 0x60
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f91b 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005ce0:	e01c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 f8b4 	bl	8005e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2140      	movs	r1, #64	@ 0x40
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f90b 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005d00:	e00c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f000 f902 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005d12:	e003      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
      break;
 8005d18:	e000      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr
	...

08005d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a2f      	ldr	r2, [pc, #188]	@ (8005e50 <TIM_Base_SetConfig+0xd0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <TIM_Base_SetConfig+0x30>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d9e:	d007      	beq.n	8005db0 <TIM_Base_SetConfig+0x30>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e54 <TIM_Base_SetConfig+0xd4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0x30>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a2b      	ldr	r2, [pc, #172]	@ (8005e58 <TIM_Base_SetConfig+0xd8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a22      	ldr	r2, [pc, #136]	@ (8005e50 <TIM_Base_SetConfig+0xd0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00b      	beq.n	8005de2 <TIM_Base_SetConfig+0x62>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd0:	d007      	beq.n	8005de2 <TIM_Base_SetConfig+0x62>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e54 <TIM_Base_SetConfig+0xd4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_Base_SetConfig+0x62>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <TIM_Base_SetConfig+0xd8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d108      	bne.n	8005df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005e50 <TIM_Base_SetConfig+0xd0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d103      	bne.n	8005e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f023 0201 	bic.w	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	611a      	str	r2, [r3, #16]
  }
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800

08005e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0201 	bic.w	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 030a 	bic.w	r3, r3, #10
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f023 0210 	bic.w	r2, r3, #16
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	031b      	lsls	r3, r3, #12
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	621a      	str	r2, [r3, #32]
}
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f043 0307 	orr.w	r3, r3, #7
 8005f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b087      	sub	sp, #28
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	021a      	lsls	r2, r3, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	609a      	str	r2, [r3, #8]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e046      	b.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a16      	ldr	r2, [pc, #88]	@ (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00e      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fec:	d009      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a12      	ldr	r2, [pc, #72]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d004      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a10      	ldr	r2, [pc, #64]	@ (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d10c      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	4313      	orrs	r3, r2
 8006012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800

08006044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr

08006068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e042      	b.n	8006100 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fb fce6 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2224      	movs	r2, #36	@ 0x24
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fdb7 	bl	8006c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	@ 0x28
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b20      	cmp	r3, #32
 8006126:	d175      	bne.n	8006214 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_UART_Transmit+0x2c>
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e06e      	b.n	8006216 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2221      	movs	r2, #33	@ 0x21
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006146:	f7fb fdf1 	bl	8001d2c <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	88fa      	ldrh	r2, [r7, #6]
 8006150:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	88fa      	ldrh	r2, [r7, #6]
 8006156:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006160:	d108      	bne.n	8006174 <HAL_UART_Transmit+0x6c>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e003      	b.n	800617c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006178:	2300      	movs	r3, #0
 800617a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800617c:	e02e      	b.n	80061dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2200      	movs	r2, #0
 8006186:	2180      	movs	r1, #128	@ 0x80
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fb1c 	bl	80067c6 <UART_WaitOnFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e03a      	b.n	8006216 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10b      	bne.n	80061be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	3302      	adds	r3, #2
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	e007      	b.n	80061ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3301      	adds	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1cb      	bne.n	800617e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2140      	movs	r1, #64	@ 0x40
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fae8 	bl	80067c6 <UART_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e006      	b.n	8006216 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e000      	b.n	8006216 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006214:	2302      	movs	r3, #2
  }
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	4613      	mov	r3, r2
 800622a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b20      	cmp	r3, #32
 8006236:	d112      	bne.n	800625e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_UART_Receive_IT+0x26>
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e00b      	b.n	8006260 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800624e:	88fb      	ldrh	r3, [r7, #6]
 8006250:	461a      	mov	r2, r3
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fb0f 	bl	8006878 <UART_Start_Receive_IT>
 800625a:	4603      	mov	r3, r0
 800625c:	e000      	b.n	8006260 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800625e:	2302      	movs	r3, #2
  }
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b0ba      	sub	sp, #232	@ 0xe8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800628e:	2300      	movs	r3, #0
 8006290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80062a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10f      	bne.n	80062ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <HAL_UART_IRQHandler+0x66>
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fbec 	bl	8006aa4 <UART_Receive_IT>
      return;
 80062cc:	e25b      	b.n	8006786 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80de 	beq.w	8006494 <HAL_UART_IRQHandler+0x22c>
 80062d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d106      	bne.n	80062f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80d1 	beq.w	8006494 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <HAL_UART_IRQHandler+0xae>
 80062fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630e:	f043 0201 	orr.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_UART_IRQHandler+0xd2>
 8006322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006332:	f043 0202 	orr.w	r2, r3, #2
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800633a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <HAL_UART_IRQHandler+0xf6>
 8006346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006356:	f043 0204 	orr.w	r2, r3, #4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d011      	beq.n	800638e <HAL_UART_IRQHandler+0x126>
 800636a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d105      	bne.n	8006382 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	f043 0208 	orr.w	r2, r3, #8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 81f2 	beq.w	800677c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_UART_IRQHandler+0x14e>
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fb77 	bl	8006aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <HAL_UART_IRQHandler+0x17a>
 80063da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d04f      	beq.n	8006482 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa81 	bl	80068ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d041      	beq.n	800647a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800640c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3314      	adds	r3, #20
 800641e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006422:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800642e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800643a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1d9      	bne.n	80063f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d013      	beq.n	8006472 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	4a7e      	ldr	r2, [pc, #504]	@ (8006648 <HAL_UART_IRQHandler+0x3e0>)
 8006450:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006456:	4618      	mov	r0, r3
 8006458:	f7fb fdde 	bl	8002018 <HAL_DMA_Abort_IT>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d016      	beq.n	8006490 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800646c:	4610      	mov	r0, r2
 800646e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	e00e      	b.n	8006490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f993 	bl	800679e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	e00a      	b.n	8006490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f98f 	bl	800679e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	e006      	b.n	8006490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f98b 	bl	800679e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800648e:	e175      	b.n	800677c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	bf00      	nop
    return;
 8006492:	e173      	b.n	800677c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	f040 814f 	bne.w	800673c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8148 	beq.w	800673c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8141 	beq.w	800673c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80b6 	beq.w	800664c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 8145 	beq.w	8006780 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064fe:	429a      	cmp	r2, r3
 8006500:	f080 813e 	bcs.w	8006780 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800650a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b20      	cmp	r3, #32
 8006514:	f000 8088 	beq.w	8006628 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	330c      	adds	r3, #12
 800651e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800652e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006532:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006536:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006544:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006550:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800655c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1d9      	bne.n	8006518 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3314      	adds	r3, #20
 800656a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3314      	adds	r3, #20
 8006584:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006588:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800658c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006590:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800659a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e1      	bne.n	8006564 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e3      	bne.n	80065a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f8:	f023 0310 	bic.w	r3, r3, #16
 80065fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800660a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800660c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006610:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e3      	bne.n	80065e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006622:	4618      	mov	r0, r3
 8006624:	f7fb fcbd 	bl	8001fa2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006636:	b29b      	uxth	r3, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8b6 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006644:	e09c      	b.n	8006780 <HAL_UART_IRQHandler+0x518>
 8006646:	bf00      	nop
 8006648:	080069af 	.word	0x080069af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006654:	b29b      	uxth	r3, r3
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 808e 	beq.w	8006784 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8089 	beq.w	8006784 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006688:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006696:	647a      	str	r2, [r7, #68]	@ 0x44
 8006698:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800669c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e3      	bne.n	8006672 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3314      	adds	r3, #20
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	623b      	str	r3, [r7, #32]
   return(result);
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3314      	adds	r3, #20
 80066ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80066d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e3      	bne.n	80066aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 0310 	bic.w	r3, r3, #16
 8006706:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006714:	61fa      	str	r2, [r7, #28]
 8006716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	69b9      	ldr	r1, [r7, #24]
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	617b      	str	r3, [r7, #20]
   return(result);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e3      	bne.n	80066f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800672e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f83b 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800673a:	e023      	b.n	8006784 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <HAL_UART_IRQHandler+0x4f4>
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f93e 	bl	80069d6 <UART_Transmit_IT>
    return;
 800675a:	e014      	b.n	8006786 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <HAL_UART_IRQHandler+0x51e>
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f97d 	bl	8006a74 <UART_EndTransmit_IT>
    return;
 800677a:	e004      	b.n	8006786 <HAL_UART_IRQHandler+0x51e>
    return;
 800677c:	bf00      	nop
 800677e:	e002      	b.n	8006786 <HAL_UART_IRQHandler+0x51e>
      return;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <HAL_UART_IRQHandler+0x51e>
      return;
 8006784:	bf00      	nop
  }
}
 8006786:	37e8      	adds	r7, #232	@ 0xe8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr

080067b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr

080067c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b086      	sub	sp, #24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d6:	e03b      	b.n	8006850 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067de:	d037      	beq.n	8006850 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e0:	f7fb faa4 	bl	8001d2c <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d302      	bcc.n	80067f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e03a      	b.n	8006870 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d023      	beq.n	8006850 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b80      	cmp	r3, #128	@ 0x80
 800680c:	d020      	beq.n	8006850 <UART_WaitOnFlagUntilTimeout+0x8a>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b40      	cmp	r3, #64	@ 0x40
 8006812:	d01d      	beq.n	8006850 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b08      	cmp	r3, #8
 8006820:	d116      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f856 	bl	80068ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2208      	movs	r2, #8
 8006842:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e00f      	b.n	8006870 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4013      	ands	r3, r2
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	429a      	cmp	r2, r3
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	429a      	cmp	r2, r3
 800686c:	d0b4      	beq.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2222      	movs	r2, #34	@ 0x22
 80068a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0201 	orr.w	r2, r2, #1
 80068cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0220 	orr.w	r2, r2, #32
 80068dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr

080068ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b095      	sub	sp, #84	@ 0x54
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006912:	643a      	str	r2, [r7, #64]	@ 0x40
 8006914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006918:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e5      	bne.n	80068f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3314      	adds	r3, #20
 800692c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	61fb      	str	r3, [r7, #28]
   return(result);
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006948:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800694c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695e:	2b01      	cmp	r3, #1
 8006960:	d119      	bne.n	8006996 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	60bb      	str	r3, [r7, #8]
   return(result);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f023 0310 	bic.w	r3, r3, #16
 8006978:	647b      	str	r3, [r7, #68]	@ 0x44
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	330c      	adds	r3, #12
 8006980:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006982:	61ba      	str	r2, [r7, #24]
 8006984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6979      	ldr	r1, [r7, #20]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	613b      	str	r3, [r7, #16]
   return(result);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e5      	bne.n	8006962 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069a4:	bf00      	nop
 80069a6:	3754      	adds	r7, #84	@ 0x54
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr

080069ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff fee8 	bl	800679e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b21      	cmp	r3, #33	@ 0x21
 80069e8:	d13e      	bne.n	8006a68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f2:	d114      	bne.n	8006a1e <UART_Transmit_IT+0x48>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d110      	bne.n	8006a1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	1c9a      	adds	r2, r3, #2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	621a      	str	r2, [r3, #32]
 8006a1c:	e008      	b.n	8006a30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	1c59      	adds	r1, r3, #1
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6211      	str	r1, [r2, #32]
 8006a28:	781a      	ldrb	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10f      	bne.n	8006a64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e000      	b.n	8006a6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a68:	2302      	movs	r3, #2
  }
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr

08006a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff fe79 	bl	800678c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	@ 0x30
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b22      	cmp	r3, #34	@ 0x22
 8006ab6:	f040 80ae 	bne.w	8006c16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac2:	d117      	bne.n	8006af4 <UART_Receive_IT+0x50>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d113      	bne.n	8006af4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aec:	1c9a      	adds	r2, r3, #2
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006af2:	e026      	b.n	8006b42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b06:	d007      	beq.n	8006b18 <UART_Receive_IT+0x74>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <UART_Receive_IT+0x82>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	e008      	b.n	8006b38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d15d      	bne.n	8006c12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0220 	bic.w	r2, r2, #32
 8006b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d135      	bne.n	8006c08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	330c      	adds	r3, #12
 8006ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f023 0310 	bic.w	r3, r3, #16
 8006bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc2:	623a      	str	r2, [r7, #32]
 8006bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	69f9      	ldr	r1, [r7, #28]
 8006bc8:	6a3a      	ldr	r2, [r7, #32]
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e5      	bne.n	8006ba2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b10      	cmp	r3, #16
 8006be2:	d10a      	bne.n	8006bfa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fdd5 	bl	80067b0 <HAL_UARTEx_RxEventCallback>
 8006c06:	e002      	b.n	8006c0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fa f80b 	bl	8000c24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e002      	b.n	8006c18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	e000      	b.n	8006c18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c16:	2302      	movs	r3, #2
  }
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3730      	adds	r7, #48	@ 0x30
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006c5a:	f023 030c 	bic.w	r3, r3, #12
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	430b      	orrs	r3, r1
 8006c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a2c      	ldr	r2, [pc, #176]	@ (8006d34 <UART_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d103      	bne.n	8006c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c88:	f7fe f9e4 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	e002      	b.n	8006c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c90:	f7fe f9cc 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8006c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009a      	lsls	r2, r3, #2
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cac:	4a22      	ldr	r2, [pc, #136]	@ (8006d38 <UART_SetConfig+0x118>)
 8006cae:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	0119      	lsls	r1, r3, #4
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009a      	lsls	r2, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <UART_SetConfig+0x118>)
 8006cce:	fba3 0302 	umull	r0, r3, r3, r2
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	2064      	movs	r0, #100	@ 0x64
 8006cd6:	fb00 f303 	mul.w	r3, r0, r3
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	3332      	adds	r3, #50	@ 0x32
 8006ce0:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <UART_SetConfig+0x118>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cec:	4419      	add	r1, r3
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009a      	lsls	r2, r3, #2
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d04:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <UART_SetConfig+0x118>)
 8006d06:	fba3 0302 	umull	r0, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	2064      	movs	r0, #100	@ 0x64
 8006d0e:	fb00 f303 	mul.w	r3, r0, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	3332      	adds	r3, #50	@ 0x32
 8006d18:	4a07      	ldr	r2, [pc, #28]	@ (8006d38 <UART_SetConfig+0x118>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	440a      	add	r2, r1
 8006d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40013800 	.word	0x40013800
 8006d38:	51eb851f 	.word	0x51eb851f

08006d3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	4638      	mov	r0, r7
 8006d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d66:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006d6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr

08006d82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d8a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006d8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	4013      	ands	r3, r2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr

08006dce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b09d      	sub	sp, #116	@ 0x74
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d81f      	bhi.n	8006e7a <USB_ActivateEndpoint+0x72>
 8006e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <USB_ActivateEndpoint+0x38>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e51 	.word	0x08006e51
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e83 	.word	0x08006e83
 8006e4c:	08006e5f 	.word	0x08006e5f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006e50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e5c:	e012      	b.n	8006e84 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006e5e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e62:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006e66:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e6a:	e00b      	b.n	8006e84 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006e6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e78:	e004      	b.n	8006e84 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006e80:	e000      	b.n	8006e84 <USB_ActivateEndpoint+0x7c>
      break;
 8006e82:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	441a      	add	r2, r3
 8006e8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	441a      	add	r2, r3
 8006ed2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	7b1b      	ldrb	r3, [r3, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 8178 	bne.w	80071e4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8084 	beq.w	8007006 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	4413      	add	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	011a      	lsls	r2, r3, #4
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	88db      	ldrh	r3, [r3, #6]
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	827b      	strh	r3, [r7, #18]
 8006f40:	8a7b      	ldrh	r3, [r7, #18]
 8006f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01b      	beq.n	8006f82 <USB_ActivateEndpoint+0x17a>
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f60:	823b      	strh	r3, [r7, #16]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	441a      	add	r2, r3
 8006f6c:	8a3b      	ldrh	r3, [r7, #16]
 8006f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	78db      	ldrb	r3, [r3, #3]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d020      	beq.n	8006fcc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa0:	81bb      	strh	r3, [r7, #12]
 8006fa2:	89bb      	ldrh	r3, [r7, #12]
 8006fa4:	f083 0320 	eor.w	r3, r3, #32
 8006fa8:	81bb      	strh	r3, [r7, #12]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	441a      	add	r2, r3
 8006fb4:	89bb      	ldrh	r3, [r7, #12]
 8006fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	8013      	strh	r3, [r2, #0]
 8006fca:	e2d5      	b.n	8007578 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fe2:	81fb      	strh	r3, [r7, #14]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	89fb      	ldrh	r3, [r7, #14]
 8006ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007000:	b29b      	uxth	r3, r3
 8007002:	8013      	strh	r3, [r2, #0]
 8007004:	e2b8      	b.n	8007578 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	633b      	str	r3, [r7, #48]	@ 0x30
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007010:	b29b      	uxth	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	4413      	add	r3, r2
 8007018:	633b      	str	r3, [r7, #48]	@ 0x30
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	011a      	lsls	r2, r3, #4
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	4413      	add	r3, r2
 8007024:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	88db      	ldrh	r3, [r3, #6]
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	b29b      	uxth	r3, r3
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007044:	b29b      	uxth	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	4413      	add	r3, r2
 800704c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	011a      	lsls	r2, r3, #4
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	4413      	add	r3, r2
 8007058:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007068:	b29a      	uxth	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b3e      	cmp	r3, #62	@ 0x3e
 8007074:	d91d      	bls.n	80070b2 <USB_ActivateEndpoint+0x2aa>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <USB_ActivateEndpoint+0x288>
 800708a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800708c:	3b01      	subs	r3, #1
 800708e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29a      	uxth	r2, r3
 8007096:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007098:	b29b      	uxth	r3, r3
 800709a:	029b      	lsls	r3, r3, #10
 800709c:	b29b      	uxth	r3, r3
 800709e:	4313      	orrs	r3, r2
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e026      	b.n	8007100 <USB_ActivateEndpoint+0x2f8>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <USB_ActivateEndpoint+0x2c8>
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e017      	b.n	8007100 <USB_ActivateEndpoint+0x2f8>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <USB_ActivateEndpoint+0x2e2>
 80070e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070e6:	3301      	adds	r3, #1
 80070e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	029b      	lsls	r3, r3, #10
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	4313      	orrs	r3, r2
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800710e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01b      	beq.n	8007150 <USB_ActivateEndpoint+0x348>
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800712a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800712e:	843b      	strh	r3, [r7, #32]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	441a      	add	r2, r3
 800713a:	8c3b      	ldrh	r3, [r7, #32]
 800713c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800714c:	b29b      	uxth	r3, r3
 800714e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d124      	bne.n	80071a2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800716a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800716e:	83bb      	strh	r3, [r7, #28]
 8007170:	8bbb      	ldrh	r3, [r7, #28]
 8007172:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007176:	83bb      	strh	r3, [r7, #28]
 8007178:	8bbb      	ldrh	r3, [r7, #28]
 800717a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800717e:	83bb      	strh	r3, [r7, #28]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	441a      	add	r2, r3
 800718a:	8bbb      	ldrh	r3, [r7, #28]
 800718c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800719c:	b29b      	uxth	r3, r3
 800719e:	8013      	strh	r3, [r2, #0]
 80071a0:	e1ea      	b.n	8007578 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b8:	83fb      	strh	r3, [r7, #30]
 80071ba:	8bfb      	ldrh	r3, [r7, #30]
 80071bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071c0:	83fb      	strh	r3, [r7, #30]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	441a      	add	r2, r3
 80071cc:	8bfb      	ldrh	r3, [r7, #30]
 80071ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071de:	b29b      	uxth	r3, r3
 80071e0:	8013      	strh	r3, [r2, #0]
 80071e2:	e1c9      	b.n	8007578 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	78db      	ldrb	r3, [r3, #3]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d11e      	bne.n	800722a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007202:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	441a      	add	r2, r3
 8007210:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800721c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
 8007228:	e01d      	b.n	8007266 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800723c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007240:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800725e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007262:	b29b      	uxth	r3, r3
 8007264:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007270:	b29b      	uxth	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007276:	4413      	add	r3, r2
 8007278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	011a      	lsls	r2, r3, #4
 8007280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007282:	4413      	add	r3, r2
 8007284:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007288:	65bb      	str	r3, [r7, #88]	@ 0x58
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	891b      	ldrh	r3, [r3, #8]
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	657b      	str	r3, [r7, #84]	@ 0x54
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072aa:	4413      	add	r3, r2
 80072ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	011a      	lsls	r2, r3, #4
 80072b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80072bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	895b      	ldrh	r3, [r3, #10]
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072cc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 8093 	bne.w	80073fe <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80072e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01b      	beq.n	800732c <USB_ActivateEndpoint+0x524>
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	b29b      	uxth	r3, r3
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800730a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	441a      	add	r2, r3
 8007316:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800731c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007328:	b29b      	uxth	r3, r3
 800732a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800733a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800733c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01b      	beq.n	800737c <USB_ActivateEndpoint+0x574>
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	441a      	add	r2, r3
 8007366:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800736c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007374:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007378:	b29b      	uxth	r3, r3
 800737a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	b29b      	uxth	r3, r3
 800738a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800738e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007392:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007394:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007396:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800739a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800739c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800739e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80073a2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80073b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073da:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	441a      	add	r2, r3
 80073e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	8013      	strh	r3, [r2, #0]
 80073fc:	e0bc      	b.n	8007578 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800740e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01d      	beq.n	8007456 <USB_ActivateEndpoint+0x64e>
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800742c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007430:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800744a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800744e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007452:	b29b      	uxth	r3, r3
 8007454:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007466:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800746a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01d      	beq.n	80074ae <USB_ActivateEndpoint+0x6a6>
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007488:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	441a      	add	r2, r3
 8007496:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800749a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800749e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	78db      	ldrb	r3, [r3, #3]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d024      	beq.n	8007500 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074cc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80074d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80074d4:	f083 0320 	eor.w	r3, r3, #32
 80074d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80074ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	8013      	strh	r3, [r2, #0]
 80074fe:	e01d      	b.n	800753c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007516:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800754e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007552:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	441a      	add	r2, r3
 8007560:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800756c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007574:	b29b      	uxth	r3, r3
 8007576:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007578:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800757c:	4618      	mov	r0, r3
 800757e:	3774      	adds	r7, #116	@ 0x74
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop

08007588 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007588:	b480      	push	{r7}
 800758a:	b08d      	sub	sp, #52	@ 0x34
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	7b1b      	ldrb	r3, [r3, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f040 808e 	bne.w	80076b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d044      	beq.n	800762e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	81bb      	strh	r3, [r7, #12]
 80075b2:	89bb      	ldrh	r3, [r7, #12]
 80075b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01b      	beq.n	80075f4 <USB_DeactivateEndpoint+0x6c>
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d2:	817b      	strh	r3, [r7, #10]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	441a      	add	r2, r3
 80075de:	897b      	ldrh	r3, [r7, #10]
 80075e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800760a:	813b      	strh	r3, [r7, #8]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	441a      	add	r2, r3
 8007616:	893b      	ldrh	r3, [r7, #8]
 8007618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800761c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007628:	b29b      	uxth	r3, r3
 800762a:	8013      	strh	r3, [r2, #0]
 800762c:	e192      	b.n	8007954 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	827b      	strh	r3, [r7, #18]
 800763c:	8a7b      	ldrh	r3, [r7, #18]
 800763e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01b      	beq.n	800767e <USB_DeactivateEndpoint+0xf6>
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765c:	823b      	strh	r3, [r7, #16]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	441a      	add	r2, r3
 8007668:	8a3b      	ldrh	r3, [r7, #16]
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007694:	81fb      	strh	r3, [r7, #14]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	89fb      	ldrh	r3, [r7, #14]
 80076a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8013      	strh	r3, [r2, #0]
 80076b6:	e14d      	b.n	8007954 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 80a5 	bne.w	800780c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	843b      	strh	r3, [r7, #32]
 80076d0:	8c3b      	ldrh	r3, [r7, #32]
 80076d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01b      	beq.n	8007712 <USB_DeactivateEndpoint+0x18a>
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f0:	83fb      	strh	r3, [r7, #30]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	441a      	add	r2, r3
 80076fc:	8bfb      	ldrh	r3, [r7, #30]
 80076fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800770a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800770e:	b29b      	uxth	r3, r3
 8007710:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	83bb      	strh	r3, [r7, #28]
 8007720:	8bbb      	ldrh	r3, [r7, #28]
 8007722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d01b      	beq.n	8007762 <USB_DeactivateEndpoint+0x1da>
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800773c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007740:	837b      	strh	r3, [r7, #26]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	441a      	add	r2, r3
 800774c:	8b7b      	ldrh	r3, [r7, #26]
 800774e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800775a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800775e:	b29b      	uxth	r3, r3
 8007760:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007778:	833b      	strh	r3, [r7, #24]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	441a      	add	r2, r3
 8007784:	8b3b      	ldrh	r3, [r7, #24]
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007792:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b0:	82fb      	strh	r3, [r7, #22]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	8afb      	ldrh	r3, [r7, #22]
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e8:	82bb      	strh	r3, [r7, #20]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	441a      	add	r2, r3
 80077f4:	8abb      	ldrh	r3, [r7, #20]
 80077f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007806:	b29b      	uxth	r3, r3
 8007808:	8013      	strh	r3, [r2, #0]
 800780a:	e0a3      	b.n	8007954 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800781a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800781c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01b      	beq.n	800785c <USB_DeactivateEndpoint+0x2d4>
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	441a      	add	r2, r3
 8007846:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800784c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007850:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007858:	b29b      	uxth	r3, r3
 800785a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800786a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800786c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01b      	beq.n	80078ac <USB_DeactivateEndpoint+0x324>
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	441a      	add	r2, r3
 8007896:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800789c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	441a      	add	r2, r3
 8007906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800790c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007918:	b29b      	uxth	r3, r3
 800791a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800792e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007932:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	441a      	add	r2, r3
 800793e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800794c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007950:	b29b      	uxth	r3, r3
 8007952:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3734      	adds	r7, #52	@ 0x34
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr

08007960 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b0c2      	sub	sp, #264	@ 0x108
 8007964:	af00      	add	r7, sp, #0
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800796e:	6018      	str	r0, [r3, #0]
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007978:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800797a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b01      	cmp	r3, #1
 8007988:	f040 86b7 	bne.w	80086fa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800798c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d908      	bls.n	80079ba <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80079a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80079b8:	e007      	b.n	80079ca <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80079ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80079ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	7b1b      	ldrb	r3, [r3, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d13a      	bne.n	8007a50 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80079da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6959      	ldr	r1, [r3, #20]
 80079e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	88da      	ldrh	r2, [r3, #6]
 80079f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a00:	6800      	ldr	r0, [r0, #0]
 8007a02:	f001 fc9c 	bl	800933e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	4413      	add	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	011a      	lsls	r2, r3, #4
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	f000 be1f 	b.w	800868e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	78db      	ldrb	r3, [r3, #3]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	f040 8462 	bne.w	8008326 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	f240 83df 	bls.w	800823e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aa6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	441a      	add	r2, r3
 8007ac4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6a1a      	ldr	r2, [r3, #32]
 8007ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 81c7 	beq.w	8007eb0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d177      	bne.n	8007c2e <USB_EPStartXfer+0x2ce>
 8007b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	4413      	add	r3, r2
 8007b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	011a      	lsls	r2, r3, #4
 8007b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b72:	4413      	add	r3, r2
 8007b74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b90:	d921      	bls.n	8007bd6 <USB_EPStartXfer+0x276>
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <USB_EPStartXfer+0x252>
 8007ba8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007bac:	3b01      	subs	r3, #1
 8007bae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	029b      	lsls	r3, r3, #10
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	e050      	b.n	8007c78 <USB_EPStartXfer+0x318>
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <USB_EPStartXfer+0x294>
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e041      	b.n	8007c78 <USB_EPStartXfer+0x318>
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <USB_EPStartXfer+0x2b4>
 8007c0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	029b      	lsls	r3, r3, #10
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	4313      	orrs	r3, r2
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	e024      	b.n	8007c78 <USB_EPStartXfer+0x318>
 8007c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d11c      	bne.n	8007c78 <USB_EPStartXfer+0x318>
 8007c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	4413      	add	r3, r2
 8007c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	011a      	lsls	r2, r3, #4
 8007c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	895b      	ldrh	r3, [r3, #10]
 8007c84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6959      	ldr	r1, [r3, #20]
 8007c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ca2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ca6:	6800      	ldr	r0, [r0, #0]
 8007ca8:	f001 fb49 	bl	800933e <USB_WritePMA>
            ep->xfer_buff += len;
 8007cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695a      	ldr	r2, [r3, #20]
 8007cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbc:	441a      	add	r2, r3
 8007cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6a1a      	ldr	r2, [r3, #32]
 8007cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d90f      	bls.n	8007d06 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6a1a      	ldr	r2, [r3, #32]
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	621a      	str	r2, [r3, #32]
 8007d04:	e00e      	b.n	8007d24 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2200      	movs	r2, #0
 8007d22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d177      	bne.n	8007e24 <USB_EPStartXfer+0x4c4>
 8007d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	4413      	add	r3, r2
 8007d56:	61bb      	str	r3, [r7, #24]
 8007d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	011a      	lsls	r2, r3, #4
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	801a      	strh	r2, [r3, #0]
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d84:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d86:	d921      	bls.n	8007dcc <USB_EPStartXfer+0x46c>
 8007d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d104      	bne.n	8007da8 <USB_EPStartXfer+0x448>
 8007d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007da2:	3b01      	subs	r3, #1
 8007da4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	029b      	lsls	r3, r3, #10
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	e056      	b.n	8007e7a <USB_EPStartXfer+0x51a>
 8007dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <USB_EPStartXfer+0x48a>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	e047      	b.n	8007e7a <USB_EPStartXfer+0x51a>
 8007dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dee:	085b      	lsrs	r3, r3, #1
 8007df0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <USB_EPStartXfer+0x4aa>
 8007e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e04:	3301      	adds	r3, #1
 8007e06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	029b      	lsls	r3, r3, #10
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	e02a      	b.n	8007e7a <USB_EPStartXfer+0x51a>
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d122      	bne.n	8007e7a <USB_EPStartXfer+0x51a>
 8007e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	623b      	str	r3, [r7, #32]
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	4413      	add	r3, r2
 8007e56:	623b      	str	r3, [r7, #32]
 8007e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	011a      	lsls	r2, r3, #4
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	891b      	ldrh	r3, [r3, #8]
 8007e86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6959      	ldr	r1, [r3, #20]
 8007e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ea0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ea4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ea8:	6800      	ldr	r0, [r0, #0]
 8007eaa:	f001 fa48 	bl	800933e <USB_WritePMA>
 8007eae:	e3ee      	b.n	800868e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d177      	bne.n	8007fb0 <USB_EPStartXfer+0x650>
 8007ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ee0:	4413      	add	r3, r2
 8007ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	011a      	lsls	r2, r3, #4
 8007ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f10:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f12:	d921      	bls.n	8007f58 <USB_EPStartXfer+0x5f8>
 8007f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <USB_EPStartXfer+0x5d4>
 8007f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	029b      	lsls	r3, r3, #10
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	4313      	orrs	r3, r2
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f54:	801a      	strh	r2, [r3, #0]
 8007f56:	e056      	b.n	8008006 <USB_EPStartXfer+0x6a6>
 8007f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <USB_EPStartXfer+0x616>
 8007f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	e047      	b.n	8008006 <USB_EPStartXfer+0x6a6>
 8007f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7a:	085b      	lsrs	r3, r3, #1
 8007f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <USB_EPStartXfer+0x636>
 8007f8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f90:	3301      	adds	r3, #1
 8007f92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	e02a      	b.n	8008006 <USB_EPStartXfer+0x6a6>
 8007fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d122      	bne.n	8008006 <USB_EPStartXfer+0x6a6>
 8007fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fe0:	4413      	add	r3, r2
 8007fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	011a      	lsls	r2, r3, #4
 8007ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008000:	b29a      	uxth	r2, r3
 8008002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008004:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	891b      	ldrh	r3, [r3, #8]
 8008012:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800801a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6959      	ldr	r1, [r3, #20]
 8008022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008026:	b29b      	uxth	r3, r3
 8008028:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800802c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008030:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008034:	6800      	ldr	r0, [r0, #0]
 8008036:	f001 f982 	bl	800933e <USB_WritePMA>
            ep->xfer_buff += len;
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804a:	441a      	add	r2, r3
 800804c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6a1a      	ldr	r2, [r3, #32]
 8008064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	429a      	cmp	r2, r3
 8008072:	d90f      	bls.n	8008094 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6a1a      	ldr	r2, [r3, #32]
 8008080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008084:	1ad2      	subs	r2, r2, r3
 8008086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800808a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	621a      	str	r2, [r3, #32]
 8008092:	e00e      	b.n	80080b2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80080a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2200      	movs	r2, #0
 80080b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80080be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d177      	bne.n	80081be <USB_EPStartXfer+0x85e>
 80080ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	461a      	mov	r2, r3
 80080ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ee:	4413      	add	r3, r2
 80080f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	011a      	lsls	r2, r3, #4
 8008100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008102:	4413      	add	r3, r2
 8008104:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
 800810a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008114:	b29a      	uxth	r2, r3
 8008116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008118:	801a      	strh	r2, [r3, #0]
 800811a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008120:	d921      	bls.n	8008166 <USB_EPStartXfer+0x806>
 8008122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <USB_EPStartXfer+0x7e2>
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	3b01      	subs	r3, #1
 800813e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29a      	uxth	r2, r3
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814c:	b29b      	uxth	r3, r3
 800814e:	029b      	lsls	r3, r3, #10
 8008150:	b29b      	uxth	r3, r3
 8008152:	4313      	orrs	r3, r2
 8008154:	b29b      	uxth	r3, r3
 8008156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815e:	b29a      	uxth	r2, r3
 8008160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008162:	801a      	strh	r2, [r3, #0]
 8008164:	e050      	b.n	8008208 <USB_EPStartXfer+0x8a8>
 8008166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <USB_EPStartXfer+0x824>
 800816e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817c:	b29a      	uxth	r2, r3
 800817e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008180:	801a      	strh	r2, [r3, #0]
 8008182:	e041      	b.n	8008208 <USB_EPStartXfer+0x8a8>
 8008184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008188:	085b      	lsrs	r3, r3, #1
 800818a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <USB_EPStartXfer+0x844>
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819e:	3301      	adds	r3, #1
 80081a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	029b      	lsls	r3, r3, #10
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4313      	orrs	r3, r2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ba:	801a      	strh	r2, [r3, #0]
 80081bc:	e024      	b.n	8008208 <USB_EPStartXfer+0x8a8>
 80081be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d11c      	bne.n	8008208 <USB_EPStartXfer+0x8a8>
 80081ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081dc:	b29b      	uxth	r3, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081e2:	4413      	add	r3, r2
 80081e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80081e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	011a      	lsls	r2, r3, #4
 80081f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081f6:	4413      	add	r3, r2
 80081f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008202:	b29a      	uxth	r2, r3
 8008204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008206:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	895b      	ldrh	r3, [r3, #10]
 8008214:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6959      	ldr	r1, [r3, #20]
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008228:	b29b      	uxth	r3, r3
 800822a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800822e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008232:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	f001 f881 	bl	800933e <USB_WritePMA>
 800823c:	e227      	b.n	800868e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800823e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800824e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008274:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	441a      	add	r2, r3
 8008292:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800829a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800829e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	461a      	mov	r2, r3
 80082c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082ca:	4413      	add	r3, r2
 80082cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	011a      	lsls	r2, r3, #4
 80082dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082de:	4413      	add	r3, r2
 80082e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	891b      	ldrh	r3, [r3, #8]
 80082fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6959      	ldr	r1, [r3, #20]
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	b29b      	uxth	r3, r3
 8008312:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008316:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800831a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800831e:	6800      	ldr	r0, [r0, #0]
 8008320:	f001 f80d 	bl	800933e <USB_WritePMA>
 8008324:	e1b3      	b.n	800868e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6a1a      	ldr	r2, [r3, #32]
 8008332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008336:	1ad2      	subs	r2, r2, r3
 8008338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 80c6 	beq.w	80084f8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	673b      	str	r3, [r7, #112]	@ 0x70
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d177      	bne.n	8008478 <USB_EPStartXfer+0xb18>
 8008388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083a8:	4413      	add	r3, r2
 80083aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	011a      	lsls	r2, r3, #4
 80083ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083bc:	4413      	add	r3, r2
 80083be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80083c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083d2:	801a      	strh	r2, [r3, #0]
 80083d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80083da:	d921      	bls.n	8008420 <USB_EPStartXfer+0xac0>
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e0:	095b      	lsrs	r3, r3, #5
 80083e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ea:	f003 031f 	and.w	r3, r3, #31
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <USB_EPStartXfer+0xa9c>
 80083f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80083f6:	3b01      	subs	r3, #1
 80083f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008406:	b29b      	uxth	r3, r3
 8008408:	029b      	lsls	r3, r3, #10
 800840a:	b29b      	uxth	r3, r3
 800840c:	4313      	orrs	r3, r2
 800840e:	b29b      	uxth	r3, r3
 8008410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008418:	b29a      	uxth	r2, r3
 800841a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	e050      	b.n	80084c2 <USB_EPStartXfer+0xb62>
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <USB_EPStartXfer+0xade>
 8008428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008436:	b29a      	uxth	r2, r3
 8008438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	e041      	b.n	80084c2 <USB_EPStartXfer+0xb62>
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008442:	085b      	lsrs	r3, r3, #1
 8008444:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <USB_EPStartXfer+0xafe>
 8008454:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008458:	3301      	adds	r3, #1
 800845a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800845e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29a      	uxth	r2, r3
 8008464:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008468:	b29b      	uxth	r3, r3
 800846a:	029b      	lsls	r3, r3, #10
 800846c:	b29b      	uxth	r3, r3
 800846e:	4313      	orrs	r3, r2
 8008470:	b29a      	uxth	r2, r3
 8008472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	e024      	b.n	80084c2 <USB_EPStartXfer+0xb62>
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d11c      	bne.n	80084c2 <USB_EPStartXfer+0xb62>
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008496:	b29b      	uxth	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800849c:	4413      	add	r3, r2
 800849e:	673b      	str	r3, [r7, #112]	@ 0x70
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	011a      	lsls	r2, r3, #4
 80084ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084b0:	4413      	add	r3, r2
 80084b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80084b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084bc:	b29a      	uxth	r2, r3
 80084be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80084c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	895b      	ldrh	r3, [r3, #10]
 80084ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6959      	ldr	r1, [r3, #20]
 80084de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084f0:	6800      	ldr	r0, [r0, #0]
 80084f2:	f000 ff24 	bl	800933e <USB_WritePMA>
 80084f6:	e0ca      	b.n	800868e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d177      	bne.n	80085f8 <USB_EPStartXfer+0xc98>
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008522:	b29b      	uxth	r3, r3
 8008524:	461a      	mov	r2, r3
 8008526:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008528:	4413      	add	r3, r2
 800852a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800852c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	011a      	lsls	r2, r3, #4
 800853a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800853c:	4413      	add	r3, r2
 800853e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008542:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	b29b      	uxth	r3, r3
 800854a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800854e:	b29a      	uxth	r2, r3
 8008550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008552:	801a      	strh	r2, [r3, #0]
 8008554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008558:	2b3e      	cmp	r3, #62	@ 0x3e
 800855a:	d921      	bls.n	80085a0 <USB_EPStartXfer+0xc40>
 800855c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <USB_EPStartXfer+0xc1c>
 8008572:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008576:	3b01      	subs	r3, #1
 8008578:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800857c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	b29a      	uxth	r2, r3
 8008582:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008586:	b29b      	uxth	r3, r3
 8008588:	029b      	lsls	r3, r3, #10
 800858a:	b29b      	uxth	r3, r3
 800858c:	4313      	orrs	r3, r2
 800858e:	b29b      	uxth	r3, r3
 8008590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008598:	b29a      	uxth	r2, r3
 800859a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800859c:	801a      	strh	r2, [r3, #0]
 800859e:	e05c      	b.n	800865a <USB_EPStartXfer+0xcfa>
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <USB_EPStartXfer+0xc5e>
 80085a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	e04d      	b.n	800865a <USB_EPStartXfer+0xcfa>
 80085be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c2:	085b      	lsrs	r3, r3, #1
 80085c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80085c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <USB_EPStartXfer+0xc7e>
 80085d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80085d8:	3301      	adds	r3, #1
 80085da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80085de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085f4:	801a      	strh	r2, [r3, #0]
 80085f6:	e030      	b.n	800865a <USB_EPStartXfer+0xcfa>
 80085f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	785b      	ldrb	r3, [r3, #1]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d128      	bne.n	800865a <USB_EPStartXfer+0xcfa>
 8008608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800862c:	4413      	add	r3, r2
 800862e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	011a      	lsls	r2, r3, #4
 8008640:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008644:	4413      	add	r3, r2
 8008646:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800864a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800864e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008652:	b29a      	uxth	r2, r3
 8008654:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008658:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800865a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	891b      	ldrh	r3, [r3, #8]
 8008666:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800866a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6959      	ldr	r1, [r3, #20]
 8008676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867a:	b29b      	uxth	r3, r3
 800867c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008680:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008684:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008688:	6800      	ldr	r0, [r0, #0]
 800868a:	f000 fe58 	bl	800933e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800868e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086b4:	817b      	strh	r3, [r7, #10]
 80086b6:	897b      	ldrh	r3, [r7, #10]
 80086b8:	f083 0310 	eor.w	r3, r3, #16
 80086bc:	817b      	strh	r3, [r7, #10]
 80086be:	897b      	ldrh	r3, [r7, #10]
 80086c0:	f083 0320 	eor.w	r3, r3, #32
 80086c4:	817b      	strh	r3, [r7, #10]
 80086c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	441a      	add	r2, r3
 80086e0:	897b      	ldrh	r3, [r7, #10]
 80086e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	8013      	strh	r3, [r2, #0]
 80086f6:	f000 bcde 	b.w	80090b6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80086fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	7b1b      	ldrb	r3, [r3, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 80bb 	bne.w	8008882 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800870c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	699a      	ldr	r2, [r3, #24]
 8008718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	429a      	cmp	r2, r3
 8008726:	d917      	bls.n	8008758 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008748:	1ad2      	subs	r2, r2, r3
 800874a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	619a      	str	r2, [r3, #24]
 8008756:	e00e      	b.n	8008776 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008792:	b29b      	uxth	r3, r3
 8008794:	461a      	mov	r2, r3
 8008796:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800879a:	4413      	add	r3, r2
 800879c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	011a      	lsls	r2, r3, #4
 80087ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80087b2:	4413      	add	r3, r2
 80087b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80087b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087ce:	801a      	strh	r2, [r3, #0]
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80087d6:	d924      	bls.n	8008822 <USB_EPStartXfer+0xec2>
 80087d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e6:	f003 031f 	and.w	r3, r3, #31
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <USB_EPStartXfer+0xe98>
 80087ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80087f2:	3b01      	subs	r3, #1
 80087f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008804:	b29b      	uxth	r3, r3
 8008806:	029b      	lsls	r3, r3, #10
 8008808:	b29b      	uxth	r3, r3
 800880a:	4313      	orrs	r3, r2
 800880c:	b29b      	uxth	r3, r3
 800880e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008816:	b29a      	uxth	r2, r3
 8008818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800881c:	801a      	strh	r2, [r3, #0]
 800881e:	f000 bc10 	b.w	8009042 <USB_EPStartXfer+0x16e2>
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10c      	bne.n	8008844 <USB_EPStartXfer+0xee4>
 800882a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	b29b      	uxth	r3, r3
 8008832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883a:	b29a      	uxth	r2, r3
 800883c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	e3fe      	b.n	8009042 <USB_EPStartXfer+0x16e2>
 8008844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008848:	085b      	lsrs	r3, r3, #1
 800884a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800884e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <USB_EPStartXfer+0xf04>
 800885a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800885e:	3301      	adds	r3, #1
 8008860:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	b29a      	uxth	r2, r3
 800886c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008870:	b29b      	uxth	r3, r3
 8008872:	029b      	lsls	r3, r3, #10
 8008874:	b29b      	uxth	r3, r3
 8008876:	4313      	orrs	r3, r2
 8008878:	b29a      	uxth	r2, r3
 800887a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	e3df      	b.n	8009042 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	78db      	ldrb	r3, [r3, #3]
 800888e:	2b02      	cmp	r3, #2
 8008890:	f040 8218 	bne.w	8008cc4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 809d 	bne.w	80089e0 <USB_EPStartXfer+0x1080>
 80088a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ca:	4413      	add	r3, r2
 80088cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	011a      	lsls	r2, r3, #4
 80088de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088e2:	4413      	add	r3, r2
 80088e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80088e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80088ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088fe:	801a      	strh	r2, [r3, #0]
 8008900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b3e      	cmp	r3, #62	@ 0x3e
 800890e:	d92b      	bls.n	8008968 <USB_EPStartXfer+0x1008>
 8008910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	f003 031f 	and.w	r3, r3, #31
 8008932:	2b00      	cmp	r3, #0
 8008934:	d104      	bne.n	8008940 <USB_EPStartXfer+0xfe0>
 8008936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893a:	3b01      	subs	r3, #1
 800893c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b29a      	uxth	r2, r3
 8008948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800894c:	b29b      	uxth	r3, r3
 800894e:	029b      	lsls	r3, r3, #10
 8008950:	b29b      	uxth	r3, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	b29b      	uxth	r3, r3
 8008956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800895e:	b29a      	uxth	r2, r3
 8008960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008964:	801a      	strh	r2, [r3, #0]
 8008966:	e070      	b.n	8008a4a <USB_EPStartXfer+0x10ea>
 8008968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10c      	bne.n	8008992 <USB_EPStartXfer+0x1032>
 8008978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008988:	b29a      	uxth	r2, r3
 800898a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800898e:	801a      	strh	r2, [r3, #0]
 8008990:	e05b      	b.n	8008a4a <USB_EPStartXfer+0x10ea>
 8008992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	085b      	lsrs	r3, r3, #1
 80089a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <USB_EPStartXfer+0x1062>
 80089b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089bc:	3301      	adds	r3, #1
 80089be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	029b      	lsls	r3, r3, #10
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	e034      	b.n	8008a4a <USB_EPStartXfer+0x10ea>
 80089e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	785b      	ldrb	r3, [r3, #1]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d12c      	bne.n	8008a4a <USB_EPStartXfer+0x10ea>
 80089f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a14:	4413      	add	r3, r2
 8008a16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	011a      	lsls	r2, r3, #4
 8008a28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008a48:	801a      	strh	r2, [r3, #0]
 8008a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f040 809d 	bne.w	8008ba4 <USB_EPStartXfer+0x1244>
 8008a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a8e:	4413      	add	r3, r2
 8008a90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	011a      	lsls	r2, r3, #4
 8008aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ad2:	d92b      	bls.n	8008b2c <USB_EPStartXfer+0x11cc>
 8008ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f003 031f 	and.w	r3, r3, #31
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <USB_EPStartXfer+0x11a4>
 8008afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008afe:	3b01      	subs	r3, #1
 8008b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	029b      	lsls	r3, r3, #10
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	4313      	orrs	r3, r2
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	e069      	b.n	8008c00 <USB_EPStartXfer+0x12a0>
 8008b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10c      	bne.n	8008b56 <USB_EPStartXfer+0x11f6>
 8008b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b52:	801a      	strh	r2, [r3, #0]
 8008b54:	e054      	b.n	8008c00 <USB_EPStartXfer+0x12a0>
 8008b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	085b      	lsrs	r3, r3, #1
 8008b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <USB_EPStartXfer+0x1226>
 8008b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b80:	3301      	adds	r3, #1
 8008b82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	029b      	lsls	r3, r3, #10
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ba0:	801a      	strh	r2, [r3, #0]
 8008ba2:	e02d      	b.n	8008c00 <USB_EPStartXfer+0x12a0>
 8008ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	785b      	ldrb	r3, [r3, #1]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d125      	bne.n	8008c00 <USB_EPStartXfer+0x12a0>
 8008bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008bca:	4413      	add	r3, r2
 8008bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	011a      	lsls	r2, r3, #4
 8008bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008be2:	4413      	add	r3, r2
 8008be4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008be8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008bfe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8218 	beq.w	8009042 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <USB_EPStartXfer+0x12ea>
 8008c3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10d      	bne.n	8008c66 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f040 81f5 	bne.w	8009042 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f040 81ee 	bne.w	8009042 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c8c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	441a      	add	r2, r3
 8008caa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	8013      	strh	r3, [r2, #0]
 8008cc2:	e1be      	b.n	8009042 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	f040 81b4 	bne.w	800903e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	699a      	ldr	r2, [r3, #24]
 8008ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d917      	bls.n	8008d22 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	699a      	ldr	r2, [r3, #24]
 8008d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d12:	1ad2      	subs	r2, r2, r3
 8008d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	619a      	str	r2, [r3, #24]
 8008d20:	e00e      	b.n	8008d40 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 8085 	bne.w	8008e5c <USB_EPStartXfer+0x14fc>
 8008d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d76:	4413      	add	r3, r2
 8008d78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	011a      	lsls	r2, r3, #4
 8008d8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d8e:	4413      	add	r3, r2
 8008d90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008daa:	801a      	strh	r2, [r3, #0]
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008db2:	d923      	bls.n	8008dfc <USB_EPStartXfer+0x149c>
 8008db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db8:	095b      	lsrs	r3, r3, #5
 8008dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc2:	f003 031f 	and.w	r3, r3, #31
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d104      	bne.n	8008dd4 <USB_EPStartXfer+0x1474>
 8008dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008dd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	029b      	lsls	r3, r3, #10
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	4313      	orrs	r3, r2
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008df8:	801a      	strh	r2, [r3, #0]
 8008dfa:	e060      	b.n	8008ebe <USB_EPStartXfer+0x155e>
 8008dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10c      	bne.n	8008e1e <USB_EPStartXfer+0x14be>
 8008e04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	e04f      	b.n	8008ebe <USB_EPStartXfer+0x155e>
 8008e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e22:	085b      	lsrs	r3, r3, #1
 8008e24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d004      	beq.n	8008e3e <USB_EPStartXfer+0x14de>
 8008e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e38:	3301      	adds	r3, #1
 8008e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	029b      	lsls	r3, r3, #10
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	4313      	orrs	r3, r2
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	e030      	b.n	8008ebe <USB_EPStartXfer+0x155e>
 8008e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d128      	bne.n	8008ebe <USB_EPStartXfer+0x155e>
 8008e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e90:	4413      	add	r3, r2
 8008e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	011a      	lsls	r2, r3, #4
 8008ea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008eae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f040 8085 	bne.w	8008fe8 <USB_EPStartXfer+0x1688>
 8008ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	461a      	mov	r2, r3
 8008efe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008f02:	4413      	add	r3, r2
 8008f04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	011a      	lsls	r2, r3, #4
 8008f16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f3e:	d923      	bls.n	8008f88 <USB_EPStartXfer+0x1628>
 8008f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f44:	095b      	lsrs	r3, r3, #5
 8008f46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f4e:	f003 031f 	and.w	r3, r3, #31
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d104      	bne.n	8008f60 <USB_EPStartXfer+0x1600>
 8008f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	029b      	lsls	r3, r3, #10
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	4313      	orrs	r3, r2
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	e05c      	b.n	8009042 <USB_EPStartXfer+0x16e2>
 8008f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10c      	bne.n	8008faa <USB_EPStartXfer+0x164a>
 8008f90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fa6:	801a      	strh	r2, [r3, #0]
 8008fa8:	e04b      	b.n	8009042 <USB_EPStartXfer+0x16e2>
 8008faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fae:	085b      	lsrs	r3, r3, #1
 8008fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d004      	beq.n	8008fca <USB_EPStartXfer+0x166a>
 8008fc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	029b      	lsls	r3, r3, #10
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fe4:	801a      	strh	r2, [r3, #0]
 8008fe6:	e02c      	b.n	8009042 <USB_EPStartXfer+0x16e2>
 8008fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	785b      	ldrb	r3, [r3, #1]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d124      	bne.n	8009042 <USB_EPStartXfer+0x16e2>
 8008ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009006:	b29b      	uxth	r3, r3
 8009008:	461a      	mov	r2, r3
 800900a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800900e:	4413      	add	r3, r2
 8009010:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	011a      	lsls	r2, r3, #4
 8009022:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009026:	4413      	add	r3, r2
 8009028:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800902c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009034:	b29a      	uxth	r2, r3
 8009036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800903a:	801a      	strh	r2, [r3, #0]
 800903c:	e001      	b.n	8009042 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e03a      	b.n	80090b8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009068:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800906c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009070:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009074:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009078:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800907c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009080:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	441a      	add	r2, r3
 800909e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80090a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	785b      	ldrb	r3, [r3, #1]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d020      	beq.n	8009116 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ea:	81bb      	strh	r3, [r7, #12]
 80090ec:	89bb      	ldrh	r3, [r7, #12]
 80090ee:	f083 0310 	eor.w	r3, r3, #16
 80090f2:	81bb      	strh	r3, [r7, #12]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	441a      	add	r2, r3
 80090fe:	89bb      	ldrh	r3, [r7, #12]
 8009100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800910c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009110:	b29b      	uxth	r3, r3
 8009112:	8013      	strh	r3, [r2, #0]
 8009114:	e01f      	b.n	8009156 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29b      	uxth	r3, r3
 8009124:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800912c:	81fb      	strh	r3, [r7, #14]
 800912e:	89fb      	ldrh	r3, [r7, #14]
 8009130:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009134:	81fb      	strh	r3, [r7, #14]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	441a      	add	r2, r3
 8009140:	89fb      	ldrh	r3, [r7, #14]
 8009142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800914a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800914e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009152:	b29b      	uxth	r3, r3
 8009154:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr

08009162 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009162:	b480      	push	{r7}
 8009164:	b087      	sub	sp, #28
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	7b1b      	ldrb	r3, [r3, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f040 809d 	bne.w	80092b0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	785b      	ldrb	r3, [r3, #1]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d04c      	beq.n	8009218 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	823b      	strh	r3, [r7, #16]
 800918c:	8a3b      	ldrh	r3, [r7, #16]
 800918e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009192:	2b00      	cmp	r3, #0
 8009194:	d01b      	beq.n	80091ce <USB_EPClearStall+0x6c>
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ac:	81fb      	strh	r3, [r7, #14]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	441a      	add	r2, r3
 80091b8:	89fb      	ldrh	r3, [r7, #14]
 80091ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	78db      	ldrb	r3, [r3, #3]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d06c      	beq.n	80092b0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091ec:	81bb      	strh	r3, [r7, #12]
 80091ee:	89bb      	ldrh	r3, [r7, #12]
 80091f0:	f083 0320 	eor.w	r3, r3, #32
 80091f4:	81bb      	strh	r3, [r7, #12]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	441a      	add	r2, r3
 8009200:	89bb      	ldrh	r3, [r7, #12]
 8009202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800920a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800920e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009212:	b29b      	uxth	r3, r3
 8009214:	8013      	strh	r3, [r2, #0]
 8009216:	e04b      	b.n	80092b0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	82fb      	strh	r3, [r7, #22]
 8009226:	8afb      	ldrh	r3, [r7, #22]
 8009228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01b      	beq.n	8009268 <USB_EPClearStall+0x106>
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009246:	82bb      	strh	r3, [r7, #20]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	441a      	add	r2, r3
 8009252:	8abb      	ldrh	r3, [r7, #20]
 8009254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800925c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009264:	b29b      	uxth	r3, r3
 8009266:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800927a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800927e:	827b      	strh	r3, [r7, #18]
 8009280:	8a7b      	ldrh	r3, [r7, #18]
 8009282:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009286:	827b      	strh	r3, [r7, #18]
 8009288:	8a7b      	ldrh	r3, [r7, #18]
 800928a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800928e:	827b      	strh	r3, [r7, #18]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	441a      	add	r2, r3
 800929a:	8a7b      	ldrh	r3, [r7, #18]
 800929c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr

080092bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d103      	bne.n	80092d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2280      	movs	r2, #128	@ 0x80
 80092d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr

080092e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bc80      	pop	{r7}
 80092f4:	4770      	bx	lr

080092f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr

0800930a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009318:	b29b      	uxth	r3, r3
 800931a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800931c:	68fb      	ldr	r3, [r7, #12]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr

08009328 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr

0800933e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800933e:	b480      	push	{r7}
 8009340:	b08b      	sub	sp, #44	@ 0x2c
 8009342:	af00      	add	r7, sp, #0
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	60b9      	str	r1, [r7, #8]
 8009348:	4611      	mov	r1, r2
 800934a:	461a      	mov	r2, r3
 800934c:	460b      	mov	r3, r1
 800934e:	80fb      	strh	r3, [r7, #6]
 8009350:	4613      	mov	r3, r2
 8009352:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009354:	88bb      	ldrh	r3, [r7, #4]
 8009356:	3301      	adds	r3, #1
 8009358:	085b      	lsrs	r3, r3, #1
 800935a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009364:	88fb      	ldrh	r3, [r7, #6]
 8009366:	005a      	lsls	r2, r3, #1
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009370:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	627b      	str	r3, [r7, #36]	@ 0x24
 8009376:	e01e      	b.n	80093b6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	3301      	adds	r3, #1
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	b21a      	sxth	r2, r3
 8009388:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800938c:	4313      	orrs	r3, r2
 800938e:	b21b      	sxth	r3, r3
 8009390:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	8a7a      	ldrh	r2, [r7, #18]
 8009396:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	3302      	adds	r3, #2
 800939c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	3302      	adds	r3, #2
 80093a2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	3301      	adds	r3, #1
 80093a8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	3301      	adds	r3, #1
 80093ae:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	3b01      	subs	r3, #1
 80093b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1dd      	bne.n	8009378 <USB_WritePMA+0x3a>
  }
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	372c      	adds	r7, #44	@ 0x2c
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bc80      	pop	{r7}
 80093c6:	4770      	bx	lr

080093c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b08b      	sub	sp, #44	@ 0x2c
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	4611      	mov	r1, r2
 80093d4:	461a      	mov	r2, r3
 80093d6:	460b      	mov	r3, r1
 80093d8:	80fb      	strh	r3, [r7, #6]
 80093da:	4613      	mov	r3, r2
 80093dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80093de:	88bb      	ldrh	r3, [r7, #4]
 80093e0:	085b      	lsrs	r3, r3, #1
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	005a      	lsls	r2, r3, #1
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093fa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009400:	e01b      	b.n	800943a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	3302      	adds	r3, #2
 800940e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	b2da      	uxtb	r2, r3
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	3301      	adds	r3, #1
 800941c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	0a1b      	lsrs	r3, r3, #8
 8009422:	b2da      	uxtb	r2, r3
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	3301      	adds	r3, #1
 800942c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	3302      	adds	r3, #2
 8009432:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	3b01      	subs	r3, #1
 8009438:	627b      	str	r3, [r7, #36]	@ 0x24
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e0      	bne.n	8009402 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009440:	88bb      	ldrh	r3, [r7, #4]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	b29b      	uxth	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	b29b      	uxth	r3, r3
 8009452:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	b2da      	uxtb	r2, r3
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	701a      	strb	r2, [r3, #0]
  }
}
 800945c:	bf00      	nop
 800945e:	372c      	adds	r7, #44	@ 0x2c
 8009460:	46bd      	mov	sp, r7
 8009462:	bc80      	pop	{r7}
 8009464:	4770      	bx	lr

08009466 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	7c1b      	ldrb	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d115      	bne.n	80094aa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800947e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009482:	2202      	movs	r2, #2
 8009484:	2181      	movs	r1, #129	@ 0x81
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fe9b 	bl	800b1c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009496:	2202      	movs	r2, #2
 8009498:	2101      	movs	r1, #1
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 fe91 	bl	800b1c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80094a8:	e012      	b.n	80094d0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80094aa:	2340      	movs	r3, #64	@ 0x40
 80094ac:	2202      	movs	r2, #2
 80094ae:	2181      	movs	r1, #129	@ 0x81
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f001 fe86 	bl	800b1c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80094bc:	2340      	movs	r3, #64	@ 0x40
 80094be:	2202      	movs	r2, #2
 80094c0:	2101      	movs	r1, #1
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 fe7d 	bl	800b1c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094d0:	2308      	movs	r3, #8
 80094d2:	2203      	movs	r2, #3
 80094d4:	2182      	movs	r1, #130	@ 0x82
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 fe73 	bl	800b1c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094e2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80094e6:	f001 ff93 	bl	800b410 <USBD_static_malloc>
 80094ea:	4602      	mov	r2, r0
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d102      	bne.n	8009502 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]
 8009500:	e026      	b.n	8009550 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009508:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2200      	movs	r2, #0
 8009518:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7c1b      	ldrb	r3, [r3, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d109      	bne.n	8009540 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009536:	2101      	movs	r1, #1
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 ff32 	bl	800b3a2 <USBD_LL_PrepareReceive>
 800953e:	e007      	b.n	8009550 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009546:	2340      	movs	r3, #64	@ 0x40
 8009548:	2101      	movs	r1, #1
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 ff29 	bl	800b3a2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800956a:	2181      	movs	r1, #129	@ 0x81
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 fe4e 	bl	800b20e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009578:	2101      	movs	r1, #1
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fe47 	bl	800b20e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009588:	2182      	movs	r1, #130	@ 0x82
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 fe3f 	bl	800b20e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00e      	beq.n	80095be <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 ff39 	bl	800b428 <USBD_static_free>
    pdev->pClassData = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d039      	beq.n	8009666 <USBD_CDC_Setup+0x9e>
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	d17f      	bne.n	80096f6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	88db      	ldrh	r3, [r3, #6]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d029      	beq.n	8009652 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b25b      	sxtb	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	da11      	bge.n	800962c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009614:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	88d2      	ldrh	r2, [r2, #6]
 800961a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800961c:	6939      	ldr	r1, [r7, #16]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	88db      	ldrh	r3, [r3, #6]
 8009622:	461a      	mov	r2, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 fa05 	bl	800aa34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800962a:	e06b      	b.n	8009704 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	785a      	ldrb	r2, [r3, #1]
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	88db      	ldrh	r3, [r3, #6]
 800963a:	b2da      	uxtb	r2, r3
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009642:	6939      	ldr	r1, [r7, #16]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	88db      	ldrh	r3, [r3, #6]
 8009648:	461a      	mov	r2, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fa20 	bl	800aa90 <USBD_CtlPrepareRx>
      break;
 8009650:	e058      	b.n	8009704 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	7850      	ldrb	r0, [r2, #1]
 800965e:	2200      	movs	r2, #0
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	4798      	blx	r3
      break;
 8009664:	e04e      	b.n	8009704 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	2b0b      	cmp	r3, #11
 800966c:	d02e      	beq.n	80096cc <USBD_CDC_Setup+0x104>
 800966e:	2b0b      	cmp	r3, #11
 8009670:	dc38      	bgt.n	80096e4 <USBD_CDC_Setup+0x11c>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <USBD_CDC_Setup+0xb4>
 8009676:	2b0a      	cmp	r3, #10
 8009678:	d014      	beq.n	80096a4 <USBD_CDC_Setup+0xdc>
 800967a:	e033      	b.n	80096e4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009682:	2b03      	cmp	r3, #3
 8009684:	d107      	bne.n	8009696 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009686:	f107 030c 	add.w	r3, r7, #12
 800968a:	2202      	movs	r2, #2
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 f9d0 	bl	800aa34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009694:	e02e      	b.n	80096f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 f961 	bl	800a960 <USBD_CtlError>
            ret = USBD_FAIL;
 800969e:	2302      	movs	r3, #2
 80096a0:	75fb      	strb	r3, [r7, #23]
          break;
 80096a2:	e027      	b.n	80096f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d107      	bne.n	80096be <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80096ae:	f107 030f 	add.w	r3, r7, #15
 80096b2:	2201      	movs	r2, #1
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 f9bc 	bl	800aa34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096bc:	e01a      	b.n	80096f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f94d 	bl	800a960 <USBD_CtlError>
            ret = USBD_FAIL;
 80096c6:	2302      	movs	r3, #2
 80096c8:	75fb      	strb	r3, [r7, #23]
          break;
 80096ca:	e013      	b.n	80096f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d00d      	beq.n	80096f2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 f941 	bl	800a960 <USBD_CtlError>
            ret = USBD_FAIL;
 80096de:	2302      	movs	r3, #2
 80096e0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096e2:	e006      	b.n	80096f2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 f93a 	bl	800a960 <USBD_CtlError>
          ret = USBD_FAIL;
 80096ec:	2302      	movs	r3, #2
 80096ee:	75fb      	strb	r3, [r7, #23]
          break;
 80096f0:	e000      	b.n	80096f4 <USBD_CDC_Setup+0x12c>
          break;
 80096f2:	bf00      	nop
      }
      break;
 80096f4:	e006      	b.n	8009704 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 f931 	bl	800a960 <USBD_CtlError>
      ret = USBD_FAIL;
 80096fe:	2302      	movs	r3, #2
 8009700:	75fb      	strb	r3, [r7, #23]
      break;
 8009702:	bf00      	nop
  }

  return ret;
 8009704:	7dfb      	ldrb	r3, [r7, #23]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	460b      	mov	r3, r1
 8009718:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009720:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009728:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d03a      	beq.n	80097aa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	6879      	ldr	r1, [r7, #4]
 8009738:	4613      	mov	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	440b      	add	r3, r1
 8009742:	331c      	adds	r3, #28
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d029      	beq.n	800979e <USBD_CDC_DataIn+0x90>
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	440b      	add	r3, r1
 8009758:	331c      	adds	r3, #28
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	78f9      	ldrb	r1, [r7, #3]
 800975e:	68b8      	ldr	r0, [r7, #8]
 8009760:	460b      	mov	r3, r1
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	440b      	add	r3, r1
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	4403      	add	r3, r0
 800976a:	3320      	adds	r3, #32
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009772:	fb01 f303 	mul.w	r3, r1, r3
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d110      	bne.n	800979e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800977c:	78fa      	ldrb	r2, [r7, #3]
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	4613      	mov	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	440b      	add	r3, r1
 800978a:	331c      	adds	r3, #28
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009790:	78f9      	ldrb	r1, [r7, #3]
 8009792:	2300      	movs	r3, #0
 8009794:	2200      	movs	r2, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 fde0 	bl	800b35c <USBD_LL_Transmit>
 800979c:	e003      	b.n	80097a6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	e000      	b.n	80097ac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80097aa:	2302      	movs	r3, #2
  }
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 fe0b 	bl	800b3e8 <USBD_LL_GetRxDataSize>
 80097d2:	4602      	mov	r2, r0
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00d      	beq.n	8009800 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80097f8:	4611      	mov	r1, r2
 80097fa:	4798      	blx	r3

    return USBD_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	e000      	b.n	8009802 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009800:	2302      	movs	r3, #2
  }
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009818:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009820:	2b00      	cmp	r3, #0
 8009822:	d014      	beq.n	800984e <USBD_CDC_EP0_RxReady+0x44>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800982a:	2bff      	cmp	r3, #255	@ 0xff
 800982c:	d00f      	beq.n	800984e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800983c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009844:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	22ff      	movs	r2, #255	@ 0xff
 800984a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2243      	movs	r2, #67	@ 0x43
 8009864:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009866:	4b03      	ldr	r3, [pc, #12]	@ (8009874 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	bc80      	pop	{r7}
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	200000a0 	.word	0x200000a0

08009878 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2243      	movs	r2, #67	@ 0x43
 8009884:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009886:	4b03      	ldr	r3, [pc, #12]	@ (8009894 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	bc80      	pop	{r7}
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	2000005c 	.word	0x2000005c

08009898 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2243      	movs	r2, #67	@ 0x43
 80098a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80098a6:	4b03      	ldr	r3, [pc, #12]	@ (80098b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bc80      	pop	{r7}
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	200000e4 	.word	0x200000e4

080098b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	220a      	movs	r2, #10
 80098c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80098c6:	4b03      	ldr	r3, [pc, #12]	@ (80098d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000018 	.word	0x20000018

080098d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80098e2:	2302      	movs	r3, #2
 80098e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d005      	beq.n	80098f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	bc80      	pop	{r7}
 8009902:	4770      	bx	lr

08009904 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	4613      	mov	r3, r2
 8009910:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009918:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009922:	88fa      	ldrh	r2, [r7, #6]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	371c      	adds	r7, #28
 8009930:	46bd      	mov	sp, r7
 8009932:	bc80      	pop	{r7}
 8009934:	4770      	bx	lr

08009936 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009936:	b480      	push	{r7}
 8009938:	b085      	sub	sp, #20
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009946:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	bc80      	pop	{r7}
 800995a:	4770      	bx	lr

0800995c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800996a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009972:	2b00      	cmp	r3, #0
 8009974:	d01c      	beq.n	80099b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800997c:	2b00      	cmp	r3, #0
 800997e:	d115      	bne.n	80099ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2181      	movs	r1, #129	@ 0x81
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 fcda 	bl	800b35c <USBD_LL_Transmit>

      return USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e002      	b.n	80099b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e000      	b.n	80099b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80099b0:	2302      	movs	r3, #2
  }
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d017      	beq.n	8009a04 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	7c1b      	ldrb	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d109      	bne.n	80099f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099e6:	2101      	movs	r1, #1
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 fcda 	bl	800b3a2 <USBD_LL_PrepareReceive>
 80099ee:	e007      	b.n	8009a00 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099f6:	2340      	movs	r3, #64	@ 0x40
 80099f8:	2101      	movs	r1, #1
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 fcd1 	bl	800b3a2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	e000      	b.n	8009a06 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009a04:	2302      	movs	r3, #2
  }
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009a22:	2302      	movs	r3, #2
 8009a24:	e01a      	b.n	8009a5c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	79fa      	ldrb	r2, [r7, #7]
 8009a52:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f001 fb3f 	bl	800b0d8 <USBD_LL_Init>

  return USBD_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d006      	beq.n	8009a86 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
 8009a84:	e001      	b.n	8009a8a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009a86:	2302      	movs	r3, #2
 8009a88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bc80      	pop	{r7}
 8009a94:	4770      	bx	lr

08009a96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f001 fb74 	bl	800b18c <USBD_LL_Start>

  return USBD_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b083      	sub	sp, #12
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bc80      	pop	{r7}
 8009ac0:	4770      	bx	lr

08009ac2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009ace:	2302      	movs	r3, #2
 8009ad0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00c      	beq.n	8009af6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	4798      	blx	r3
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	78fa      	ldrb	r2, [r7, #3]
 8009b16:	4611      	mov	r1, r2
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	4798      	blx	r3

  return USBD_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b082      	sub	sp, #8
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 fed8 	bl	800a8ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009b5a:	f003 031f 	and.w	r3, r3, #31
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d016      	beq.n	8009b90 <USBD_LL_SetupStage+0x6a>
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d81c      	bhi.n	8009ba0 <USBD_LL_SetupStage+0x7a>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <USBD_LL_SetupStage+0x4a>
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d008      	beq.n	8009b80 <USBD_LL_SetupStage+0x5a>
 8009b6e:	e017      	b.n	8009ba0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f9cb 	bl	8009f14 <USBD_StdDevReq>
      break;
 8009b7e:	e01a      	b.n	8009bb6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fa2d 	bl	8009fe8 <USBD_StdItfReq>
      break;
 8009b8e:	e012      	b.n	8009bb6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fa6d 	bl	800a078 <USBD_StdEPReq>
      break;
 8009b9e:	e00a      	b.n	8009bb6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009ba6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 fb4c 	bl	800b24c <USBD_LL_StallEP>
      break;
 8009bb4:	bf00      	nop
  }

  return USBD_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d14b      	bne.n	8009c6c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009bda:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d134      	bne.n	8009c50 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d919      	bls.n	8009c26 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	68da      	ldr	r2, [r3, #12]
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	1ad2      	subs	r2, r2, r3
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d203      	bcs.n	8009c14 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	e002      	b.n	8009c1a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 ff54 	bl	800aacc <USBD_CtlContinueRx>
 8009c24:	e038      	b.n	8009c98 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d105      	bne.n	8009c48 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 ff51 	bl	800aaf0 <USBD_CtlSendStatus>
 8009c4e:	e023      	b.n	8009c98 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c56:	2b05      	cmp	r3, #5
 8009c58:	d11e      	bne.n	8009c98 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009c62:	2100      	movs	r1, #0
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f001 faf1 	bl	800b24c <USBD_LL_StallEP>
 8009c6a:	e015      	b.n	8009c98 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00d      	beq.n	8009c94 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d108      	bne.n	8009c94 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	7afa      	ldrb	r2, [r7, #11]
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	4798      	blx	r3
 8009c92:	e001      	b.n	8009c98 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c94:	2302      	movs	r3, #2
 8009c96:	e000      	b.n	8009c9a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b086      	sub	sp, #24
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	460b      	mov	r3, r1
 8009cac:	607a      	str	r2, [r7, #4]
 8009cae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d17f      	bne.n	8009db6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3314      	adds	r3, #20
 8009cba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d15c      	bne.n	8009d80 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	68da      	ldr	r2, [r3, #12]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d915      	bls.n	8009cfe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	1ad2      	subs	r2, r2, r3
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	6879      	ldr	r1, [r7, #4]
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 febe 	bl	800aa6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f001 fb53 	bl	800b3a2 <USBD_LL_PrepareReceive>
 8009cfc:	e04e      	b.n	8009d9c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	6912      	ldr	r2, [r2, #16]
 8009d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d0a:	fb01 f202 	mul.w	r2, r1, r2
 8009d0e:	1a9b      	subs	r3, r3, r2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d11c      	bne.n	8009d4e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d316      	bcc.n	8009d4e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d20f      	bcs.n	8009d4e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2100      	movs	r1, #0
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fe9a 	bl	800aa6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d40:	2300      	movs	r3, #0
 8009d42:	2200      	movs	r2, #0
 8009d44:	2100      	movs	r1, #0
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f001 fb2b 	bl	800b3a2 <USBD_LL_PrepareReceive>
 8009d4c:	e026      	b.n	8009d9c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00a      	beq.n	8009d70 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d105      	bne.n	8009d70 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009d70:	2180      	movs	r1, #128	@ 0x80
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f001 fa6a 	bl	800b24c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 fecc 	bl	800ab16 <USBD_CtlReceiveStatus>
 8009d7e:	e00d      	b.n	8009d9c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d86:	2b04      	cmp	r3, #4
 8009d88:	d004      	beq.n	8009d94 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d103      	bne.n	8009d9c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009d94:	2180      	movs	r1, #128	@ 0x80
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f001 fa58 	bl	800b24c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d11d      	bne.n	8009de2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f7ff fe81 	bl	8009aae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009db4:	e015      	b.n	8009de2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00d      	beq.n	8009dde <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d108      	bne.n	8009dde <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	7afa      	ldrb	r2, [r7, #11]
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	4798      	blx	r3
 8009ddc:	e001      	b.n	8009de2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009dde:	2302      	movs	r3, #2
 8009de0:	e000      	b.n	8009de4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009df4:	2340      	movs	r3, #64	@ 0x40
 8009df6:	2200      	movs	r2, #0
 8009df8:	2100      	movs	r1, #0
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 f9e1 	bl	800b1c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2240      	movs	r2, #64	@ 0x40
 8009e0c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e10:	2340      	movs	r3, #64	@ 0x40
 8009e12:	2200      	movs	r2, #0
 8009e14:	2180      	movs	r1, #128	@ 0x80
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 f9d3 	bl	800b1c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2240      	movs	r2, #64	@ 0x40
 8009e26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d009      	beq.n	8009e64 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6852      	ldr	r2, [r2, #4]
 8009e5c:	b2d2      	uxtb	r2, r2
 8009e5e:	4611      	mov	r1, r2
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	4798      	blx	r3
  }

  return USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bc80      	pop	{r7}
 8009e8a:	4770      	bx	lr

08009e8c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2204      	movs	r2, #4
 8009ea4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bc80      	pop	{r7}
 8009eb2:	4770      	bx	lr

08009eb4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ec2:	2b04      	cmp	r3, #4
 8009ec4:	d105      	bne.n	8009ed2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bc80      	pop	{r7}
 8009edc:	4770      	bx	lr

08009ede <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d10b      	bne.n	8009f08 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d005      	beq.n	8009f08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f2a:	2b40      	cmp	r3, #64	@ 0x40
 8009f2c:	d005      	beq.n	8009f3a <USBD_StdDevReq+0x26>
 8009f2e:	2b40      	cmp	r3, #64	@ 0x40
 8009f30:	d84f      	bhi.n	8009fd2 <USBD_StdDevReq+0xbe>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d009      	beq.n	8009f4a <USBD_StdDevReq+0x36>
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d14b      	bne.n	8009fd2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	4798      	blx	r3
      break;
 8009f48:	e048      	b.n	8009fdc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	2b09      	cmp	r3, #9
 8009f50:	d839      	bhi.n	8009fc6 <USBD_StdDevReq+0xb2>
 8009f52:	a201      	add	r2, pc, #4	@ (adr r2, 8009f58 <USBD_StdDevReq+0x44>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009fa9 	.word	0x08009fa9
 8009f5c:	08009fbd 	.word	0x08009fbd
 8009f60:	08009fc7 	.word	0x08009fc7
 8009f64:	08009fb3 	.word	0x08009fb3
 8009f68:	08009fc7 	.word	0x08009fc7
 8009f6c:	08009f8b 	.word	0x08009f8b
 8009f70:	08009f81 	.word	0x08009f81
 8009f74:	08009fc7 	.word	0x08009fc7
 8009f78:	08009f9f 	.word	0x08009f9f
 8009f7c:	08009f95 	.word	0x08009f95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f9dc 	bl	800a340 <USBD_GetDescriptor>
          break;
 8009f88:	e022      	b.n	8009fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fb3f 	bl	800a610 <USBD_SetAddress>
          break;
 8009f92:	e01d      	b.n	8009fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fb7e 	bl	800a698 <USBD_SetConfig>
          break;
 8009f9c:	e018      	b.n	8009fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fc07 	bl	800a7b4 <USBD_GetConfig>
          break;
 8009fa6:	e013      	b.n	8009fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fc37 	bl	800a81e <USBD_GetStatus>
          break;
 8009fb0:	e00e      	b.n	8009fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fc65 	bl	800a884 <USBD_SetFeature>
          break;
 8009fba:	e009      	b.n	8009fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fc74 	bl	800a8ac <USBD_ClrFeature>
          break;
 8009fc4:	e004      	b.n	8009fd0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fcc9 	bl	800a960 <USBD_CtlError>
          break;
 8009fce:	bf00      	nop
      }
      break;
 8009fd0:	e004      	b.n	8009fdc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fcc3 	bl	800a960 <USBD_CtlError>
      break;
 8009fda:	bf00      	nop
  }

  return ret;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop

08009fe8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ffe:	2b40      	cmp	r3, #64	@ 0x40
 800a000:	d005      	beq.n	800a00e <USBD_StdItfReq+0x26>
 800a002:	2b40      	cmp	r3, #64	@ 0x40
 800a004:	d82e      	bhi.n	800a064 <USBD_StdItfReq+0x7c>
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <USBD_StdItfReq+0x26>
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d12a      	bne.n	800a064 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a014:	3b01      	subs	r3, #1
 800a016:	2b02      	cmp	r3, #2
 800a018:	d81d      	bhi.n	800a056 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	889b      	ldrh	r3, [r3, #4]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b01      	cmp	r3, #1
 800a022:	d813      	bhi.n	800a04c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	4798      	blx	r3
 800a032:	4603      	mov	r3, r0
 800a034:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	88db      	ldrh	r3, [r3, #6]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d110      	bne.n	800a060 <USBD_StdItfReq+0x78>
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10d      	bne.n	800a060 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fd53 	bl	800aaf0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a04a:	e009      	b.n	800a060 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fc86 	bl	800a960 <USBD_CtlError>
          break;
 800a054:	e004      	b.n	800a060 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fc81 	bl	800a960 <USBD_CtlError>
          break;
 800a05e:	e000      	b.n	800a062 <USBD_StdItfReq+0x7a>
          break;
 800a060:	bf00      	nop
      }
      break;
 800a062:	e004      	b.n	800a06e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fc7a 	bl	800a960 <USBD_CtlError>
      break;
 800a06c:	bf00      	nop
  }

  return USBD_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	889b      	ldrh	r3, [r3, #4]
 800a08a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a094:	2b40      	cmp	r3, #64	@ 0x40
 800a096:	d007      	beq.n	800a0a8 <USBD_StdEPReq+0x30>
 800a098:	2b40      	cmp	r3, #64	@ 0x40
 800a09a:	f200 8146 	bhi.w	800a32a <USBD_StdEPReq+0x2b2>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00a      	beq.n	800a0b8 <USBD_StdEPReq+0x40>
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	f040 8141 	bne.w	800a32a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	4798      	blx	r3
      break;
 800a0b6:	e13d      	b.n	800a334 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	d10a      	bne.n	800a0da <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	4798      	blx	r3
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	e12d      	b.n	800a336 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	785b      	ldrb	r3, [r3, #1]
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d007      	beq.n	800a0f2 <USBD_StdEPReq+0x7a>
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	f300 811b 	bgt.w	800a31e <USBD_StdEPReq+0x2a6>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d072      	beq.n	800a1d2 <USBD_StdEPReq+0x15a>
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d03a      	beq.n	800a166 <USBD_StdEPReq+0xee>
 800a0f0:	e115      	b.n	800a31e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d002      	beq.n	800a102 <USBD_StdEPReq+0x8a>
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d015      	beq.n	800a12c <USBD_StdEPReq+0xb4>
 800a100:	e02b      	b.n	800a15a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00c      	beq.n	800a122 <USBD_StdEPReq+0xaa>
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b80      	cmp	r3, #128	@ 0x80
 800a10c:	d009      	beq.n	800a122 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 f89a 	bl	800b24c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a118:	2180      	movs	r1, #128	@ 0x80
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 f896 	bl	800b24c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a120:	e020      	b.n	800a164 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fc1b 	bl	800a960 <USBD_CtlError>
              break;
 800a12a:	e01b      	b.n	800a164 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	885b      	ldrh	r3, [r3, #2]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10e      	bne.n	800a152 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a134:	7bbb      	ldrb	r3, [r7, #14]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00b      	beq.n	800a152 <USBD_StdEPReq+0xda>
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b80      	cmp	r3, #128	@ 0x80
 800a13e:	d008      	beq.n	800a152 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	88db      	ldrh	r3, [r3, #6]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 f87d 	bl	800b24c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fccc 	bl	800aaf0 <USBD_CtlSendStatus>

              break;
 800a158:	e004      	b.n	800a164 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fbff 	bl	800a960 <USBD_CtlError>
              break;
 800a162:	bf00      	nop
          }
          break;
 800a164:	e0e0      	b.n	800a328 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d002      	beq.n	800a176 <USBD_StdEPReq+0xfe>
 800a170:	2b03      	cmp	r3, #3
 800a172:	d015      	beq.n	800a1a0 <USBD_StdEPReq+0x128>
 800a174:	e026      	b.n	800a1c4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00c      	beq.n	800a196 <USBD_StdEPReq+0x11e>
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	2b80      	cmp	r3, #128	@ 0x80
 800a180:	d009      	beq.n	800a196 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 f860 	bl	800b24c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a18c:	2180      	movs	r1, #128	@ 0x80
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f001 f85c 	bl	800b24c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a194:	e01c      	b.n	800a1d0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fbe1 	bl	800a960 <USBD_CtlError>
              break;
 800a19e:	e017      	b.n	800a1d0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	885b      	ldrh	r3, [r3, #2]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d112      	bne.n	800a1ce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f001 f867 	bl	800b28a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fc97 	bl	800aaf0 <USBD_CtlSendStatus>
              }
              break;
 800a1c2:	e004      	b.n	800a1ce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fbca 	bl	800a960 <USBD_CtlError>
              break;
 800a1cc:	e000      	b.n	800a1d0 <USBD_StdEPReq+0x158>
              break;
 800a1ce:	bf00      	nop
          }
          break;
 800a1d0:	e0aa      	b.n	800a328 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d002      	beq.n	800a1e2 <USBD_StdEPReq+0x16a>
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d032      	beq.n	800a246 <USBD_StdEPReq+0x1ce>
 800a1e0:	e097      	b.n	800a312 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d007      	beq.n	800a1f8 <USBD_StdEPReq+0x180>
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2b80      	cmp	r3, #128	@ 0x80
 800a1ec:	d004      	beq.n	800a1f8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fbb5 	bl	800a960 <USBD_CtlError>
                break;
 800a1f6:	e091      	b.n	800a31c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	da0b      	bge.n	800a218 <USBD_StdEPReq+0x1a0>
 800a200:	7bbb      	ldrb	r3, [r7, #14]
 800a202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	3310      	adds	r3, #16
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	4413      	add	r3, r2
 800a214:	3304      	adds	r3, #4
 800a216:	e00b      	b.n	800a230 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a218:	7bbb      	ldrb	r3, [r7, #14]
 800a21a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a21e:	4613      	mov	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	4413      	add	r3, r2
 800a22e:	3304      	adds	r3, #4
 800a230:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2202      	movs	r2, #2
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fbf8 	bl	800aa34 <USBD_CtlSendData>
              break;
 800a244:	e06a      	b.n	800a31c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	da11      	bge.n	800a272 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	f003 020f 	and.w	r2, r3, #15
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	4613      	mov	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	440b      	add	r3, r1
 800a260:	3318      	adds	r3, #24
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d117      	bne.n	800a298 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fb78 	bl	800a960 <USBD_CtlError>
                  break;
 800a270:	e054      	b.n	800a31c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	f003 020f 	and.w	r2, r3, #15
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	440b      	add	r3, r1
 800a284:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d104      	bne.n	800a298 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fb65 	bl	800a960 <USBD_CtlError>
                  break;
 800a296:	e041      	b.n	800a31c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	da0b      	bge.n	800a2b8 <USBD_StdEPReq+0x240>
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	3310      	adds	r3, #16
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	e00b      	b.n	800a2d0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <USBD_StdEPReq+0x266>
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b80      	cmp	r3, #128	@ 0x80
 800a2dc:	d103      	bne.n	800a2e6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	e00e      	b.n	800a304 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 ffec 	bl	800b2c8 <USBD_LL_IsStallEP>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	e002      	b.n	800a304 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2202      	movs	r2, #2
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fb92 	bl	800aa34 <USBD_CtlSendData>
              break;
 800a310:	e004      	b.n	800a31c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fb23 	bl	800a960 <USBD_CtlError>
              break;
 800a31a:	bf00      	nop
          }
          break;
 800a31c:	e004      	b.n	800a328 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fb1d 	bl	800a960 <USBD_CtlError>
          break;
 800a326:	bf00      	nop
      }
      break;
 800a328:	e004      	b.n	800a334 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fb17 	bl	800a960 <USBD_CtlError>
      break;
 800a332:	bf00      	nop
  }

  return ret;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a352:	2300      	movs	r3, #0
 800a354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	885b      	ldrh	r3, [r3, #2]
 800a35a:	0a1b      	lsrs	r3, r3, #8
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	3b01      	subs	r3, #1
 800a360:	2b06      	cmp	r3, #6
 800a362:	f200 8128 	bhi.w	800a5b6 <USBD_GetDescriptor+0x276>
 800a366:	a201      	add	r2, pc, #4	@ (adr r2, 800a36c <USBD_GetDescriptor+0x2c>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a389 	.word	0x0800a389
 800a370:	0800a3a1 	.word	0x0800a3a1
 800a374:	0800a3e1 	.word	0x0800a3e1
 800a378:	0800a5b7 	.word	0x0800a5b7
 800a37c:	0800a5b7 	.word	0x0800a5b7
 800a380:	0800a557 	.word	0x0800a557
 800a384:	0800a583 	.word	0x0800a583
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	7c12      	ldrb	r2, [r2, #16]
 800a394:	f107 0108 	add.w	r1, r7, #8
 800a398:	4610      	mov	r0, r2
 800a39a:	4798      	blx	r3
 800a39c:	60f8      	str	r0, [r7, #12]
      break;
 800a39e:	e112      	b.n	800a5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	7c1b      	ldrb	r3, [r3, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10d      	bne.n	800a3c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b0:	f107 0208 	add.w	r2, r7, #8
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4798      	blx	r3
 800a3b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	2202      	movs	r2, #2
 800a3c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3c2:	e100      	b.n	800a5c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3cc:	f107 0208 	add.w	r2, r7, #8
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	4798      	blx	r3
 800a3d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	2202      	movs	r2, #2
 800a3dc:	701a      	strb	r2, [r3, #0]
      break;
 800a3de:	e0f2      	b.n	800a5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	885b      	ldrh	r3, [r3, #2]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	f200 80ac 	bhi.w	800a544 <USBD_GetDescriptor+0x204>
 800a3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f4 <USBD_GetDescriptor+0xb4>)
 800a3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f2:	bf00      	nop
 800a3f4:	0800a40d 	.word	0x0800a40d
 800a3f8:	0800a441 	.word	0x0800a441
 800a3fc:	0800a475 	.word	0x0800a475
 800a400:	0800a4a9 	.word	0x0800a4a9
 800a404:	0800a4dd 	.word	0x0800a4dd
 800a408:	0800a511 	.word	0x0800a511
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00b      	beq.n	800a430 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	7c12      	ldrb	r2, [r2, #16]
 800a424:	f107 0108 	add.w	r1, r7, #8
 800a428:	4610      	mov	r0, r2
 800a42a:	4798      	blx	r3
 800a42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a42e:	e091      	b.n	800a554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fa94 	bl	800a960 <USBD_CtlError>
            err++;
 800a438:	7afb      	ldrb	r3, [r7, #11]
 800a43a:	3301      	adds	r3, #1
 800a43c:	72fb      	strb	r3, [r7, #11]
          break;
 800a43e:	e089      	b.n	800a554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00b      	beq.n	800a464 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	7c12      	ldrb	r2, [r2, #16]
 800a458:	f107 0108 	add.w	r1, r7, #8
 800a45c:	4610      	mov	r0, r2
 800a45e:	4798      	blx	r3
 800a460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a462:	e077      	b.n	800a554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fa7a 	bl	800a960 <USBD_CtlError>
            err++;
 800a46c:	7afb      	ldrb	r3, [r7, #11]
 800a46e:	3301      	adds	r3, #1
 800a470:	72fb      	strb	r3, [r7, #11]
          break;
 800a472:	e06f      	b.n	800a554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00b      	beq.n	800a498 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	7c12      	ldrb	r2, [r2, #16]
 800a48c:	f107 0108 	add.w	r1, r7, #8
 800a490:	4610      	mov	r0, r2
 800a492:	4798      	blx	r3
 800a494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a496:	e05d      	b.n	800a554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fa60 	bl	800a960 <USBD_CtlError>
            err++;
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4a6:	e055      	b.n	800a554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00b      	beq.n	800a4cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	7c12      	ldrb	r2, [r2, #16]
 800a4c0:	f107 0108 	add.w	r1, r7, #8
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	4798      	blx	r3
 800a4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ca:	e043      	b.n	800a554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fa46 	bl	800a960 <USBD_CtlError>
            err++;
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4da:	e03b      	b.n	800a554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00b      	beq.n	800a500 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	7c12      	ldrb	r2, [r2, #16]
 800a4f4:	f107 0108 	add.w	r1, r7, #8
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	4798      	blx	r3
 800a4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4fe:	e029      	b.n	800a554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fa2c 	bl	800a960 <USBD_CtlError>
            err++;
 800a508:	7afb      	ldrb	r3, [r7, #11]
 800a50a:	3301      	adds	r3, #1
 800a50c:	72fb      	strb	r3, [r7, #11]
          break;
 800a50e:	e021      	b.n	800a554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00b      	beq.n	800a534 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	7c12      	ldrb	r2, [r2, #16]
 800a528:	f107 0108 	add.w	r1, r7, #8
 800a52c:	4610      	mov	r0, r2
 800a52e:	4798      	blx	r3
 800a530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a532:	e00f      	b.n	800a554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fa12 	bl	800a960 <USBD_CtlError>
            err++;
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	3301      	adds	r3, #1
 800a540:	72fb      	strb	r3, [r7, #11]
          break;
 800a542:	e007      	b.n	800a554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fa0a 	bl	800a960 <USBD_CtlError>
          err++;
 800a54c:	7afb      	ldrb	r3, [r7, #11]
 800a54e:	3301      	adds	r3, #1
 800a550:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a552:	e038      	b.n	800a5c6 <USBD_GetDescriptor+0x286>
 800a554:	e037      	b.n	800a5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	7c1b      	ldrb	r3, [r3, #16]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d109      	bne.n	800a572 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a566:	f107 0208 	add.w	r2, r7, #8
 800a56a:	4610      	mov	r0, r2
 800a56c:	4798      	blx	r3
 800a56e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a570:	e029      	b.n	800a5c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f9f3 	bl	800a960 <USBD_CtlError>
        err++;
 800a57a:	7afb      	ldrb	r3, [r7, #11]
 800a57c:	3301      	adds	r3, #1
 800a57e:	72fb      	strb	r3, [r7, #11]
      break;
 800a580:	e021      	b.n	800a5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	7c1b      	ldrb	r3, [r3, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10d      	bne.n	800a5a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a592:	f107 0208 	add.w	r2, r7, #8
 800a596:	4610      	mov	r0, r2
 800a598:	4798      	blx	r3
 800a59a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5a4:	e00f      	b.n	800a5c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f9d9 	bl	800a960 <USBD_CtlError>
        err++;
 800a5ae:	7afb      	ldrb	r3, [r7, #11]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5b4:	e007      	b.n	800a5c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f9d1 	bl	800a960 <USBD_CtlError>
      err++;
 800a5be:	7afb      	ldrb	r3, [r7, #11]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5c4:	bf00      	nop
  }

  if (err != 0U)
 800a5c6:	7afb      	ldrb	r3, [r7, #11]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d11c      	bne.n	800a606 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a5cc:	893b      	ldrh	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d011      	beq.n	800a5f6 <USBD_GetDescriptor+0x2b6>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	88db      	ldrh	r3, [r3, #6]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00d      	beq.n	800a5f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	88da      	ldrh	r2, [r3, #6]
 800a5de:	893b      	ldrh	r3, [r7, #8]
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	bf28      	it	cs
 800a5e4:	4613      	movcs	r3, r2
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5ea:	893b      	ldrh	r3, [r7, #8]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	68f9      	ldr	r1, [r7, #12]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fa1f 	bl	800aa34 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	88db      	ldrh	r3, [r3, #6]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d104      	bne.n	800a608 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fa76 	bl	800aaf0 <USBD_CtlSendStatus>
 800a604:	e000      	b.n	800a608 <USBD_GetDescriptor+0x2c8>
    return;
 800a606:	bf00      	nop
    }
  }
}
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop

0800a610 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	889b      	ldrh	r3, [r3, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d130      	bne.n	800a684 <USBD_SetAddress+0x74>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	88db      	ldrh	r3, [r3, #6]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d12c      	bne.n	800a684 <USBD_SetAddress+0x74>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	885b      	ldrh	r3, [r3, #2]
 800a62e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a630:	d828      	bhi.n	800a684 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	885b      	ldrh	r3, [r3, #2]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a63c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a644:	2b03      	cmp	r3, #3
 800a646:	d104      	bne.n	800a652 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f988 	bl	800a960 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a650:	e01d      	b.n	800a68e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7bfa      	ldrb	r2, [r7, #15]
 800a656:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fe5d 	bl	800b31e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fa43 	bl	800aaf0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d004      	beq.n	800a67a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a678:	e009      	b.n	800a68e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a682:	e004      	b.n	800a68e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f96a 	bl	800a960 <USBD_CtlError>
  }
}
 800a68c:	bf00      	nop
 800a68e:	bf00      	nop
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	885b      	ldrh	r3, [r3, #2]
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	4b41      	ldr	r3, [pc, #260]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a6aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a6ac:	4b40      	ldr	r3, [pc, #256]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d904      	bls.n	800a6be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f952 	bl	800a960 <USBD_CtlError>
 800a6bc:	e075      	b.n	800a7aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d002      	beq.n	800a6ce <USBD_SetConfig+0x36>
 800a6c8:	2b03      	cmp	r3, #3
 800a6ca:	d023      	beq.n	800a714 <USBD_SetConfig+0x7c>
 800a6cc:	e062      	b.n	800a794 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a6ce:	4b38      	ldr	r3, [pc, #224]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d01a      	beq.n	800a70c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a6d6:	4b36      	ldr	r3, [pc, #216]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a6e8:	4b31      	ldr	r3, [pc, #196]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff f9e7 	bl	8009ac2 <USBD_SetClassConfig>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d104      	bne.n	800a704 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f92f 	bl	800a960 <USBD_CtlError>
            return;
 800a702:	e052      	b.n	800a7aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f9f3 	bl	800aaf0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a70a:	e04e      	b.n	800a7aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f9ef 	bl	800aaf0 <USBD_CtlSendStatus>
        break;
 800a712:	e04a      	b.n	800a7aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a714:	4b26      	ldr	r3, [pc, #152]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d112      	bne.n	800a742 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a724:	4b22      	ldr	r3, [pc, #136]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a72e:	4b20      	ldr	r3, [pc, #128]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	4619      	mov	r1, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff f9e3 	bl	8009b00 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f9d8 	bl	800aaf0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a740:	e033      	b.n	800a7aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a742:	4b1b      	ldr	r3, [pc, #108]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d01d      	beq.n	800a78c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff f9d1 	bl	8009b00 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a75e:	4b14      	ldr	r3, [pc, #80]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a768:	4b11      	ldr	r3, [pc, #68]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff f9a7 	bl	8009ac2 <USBD_SetClassConfig>
 800a774:	4603      	mov	r3, r0
 800a776:	2b02      	cmp	r3, #2
 800a778:	d104      	bne.n	800a784 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f8ef 	bl	800a960 <USBD_CtlError>
            return;
 800a782:	e012      	b.n	800a7aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f9b3 	bl	800aaf0 <USBD_CtlSendStatus>
        break;
 800a78a:	e00e      	b.n	800a7aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f9af 	bl	800aaf0 <USBD_CtlSendStatus>
        break;
 800a792:	e00a      	b.n	800a7aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f8e2 	bl	800a960 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a79c:	4b04      	ldr	r3, [pc, #16]	@ (800a7b0 <USBD_SetConfig+0x118>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff f9ac 	bl	8009b00 <USBD_ClrClassConfig>
        break;
 800a7a8:	bf00      	nop
    }
  }
}
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	2000048c 	.word	0x2000048c

0800a7b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	88db      	ldrh	r3, [r3, #6]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d004      	beq.n	800a7d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f8c9 	bl	800a960 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7ce:	e022      	b.n	800a816 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	dc02      	bgt.n	800a7e0 <USBD_GetConfig+0x2c>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dc03      	bgt.n	800a7e6 <USBD_GetConfig+0x32>
 800a7de:	e015      	b.n	800a80c <USBD_GetConfig+0x58>
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d00b      	beq.n	800a7fc <USBD_GetConfig+0x48>
 800a7e4:	e012      	b.n	800a80c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f91d 	bl	800aa34 <USBD_CtlSendData>
        break;
 800a7fa:	e00c      	b.n	800a816 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3304      	adds	r3, #4
 800a800:	2201      	movs	r2, #1
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f915 	bl	800aa34 <USBD_CtlSendData>
        break;
 800a80a:	e004      	b.n	800a816 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f8a6 	bl	800a960 <USBD_CtlError>
        break;
 800a814:	bf00      	nop
}
 800a816:	bf00      	nop
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a82e:	3b01      	subs	r3, #1
 800a830:	2b02      	cmp	r3, #2
 800a832:	d81e      	bhi.n	800a872 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	88db      	ldrh	r3, [r3, #6]
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d004      	beq.n	800a846 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f88e 	bl	800a960 <USBD_CtlError>
        break;
 800a844:	e01a      	b.n	800a87c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f043 0202 	orr.w	r2, r3, #2
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	330c      	adds	r3, #12
 800a866:	2202      	movs	r2, #2
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f8e2 	bl	800aa34 <USBD_CtlSendData>
      break;
 800a870:	e004      	b.n	800a87c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f873 	bl	800a960 <USBD_CtlError>
      break;
 800a87a:	bf00      	nop
  }
}
 800a87c:	bf00      	nop
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	885b      	ldrh	r3, [r3, #2]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d106      	bne.n	800a8a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f926 	bl	800aaf0 <USBD_CtlSendStatus>
  }
}
 800a8a4:	bf00      	nop
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d80b      	bhi.n	800a8da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	885b      	ldrh	r3, [r3, #2]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d10c      	bne.n	800a8e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f90c 	bl	800aaf0 <USBD_CtlSendStatus>
      }
      break;
 800a8d8:	e004      	b.n	800a8e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f83f 	bl	800a960 <USBD_CtlError>
      break;
 800a8e2:	e000      	b.n	800a8e6 <USBD_ClrFeature+0x3a>
      break;
 800a8e4:	bf00      	nop
  }
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781a      	ldrb	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	785a      	ldrb	r2, [r3, #1]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	3302      	adds	r3, #2
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	3303      	adds	r3, #3
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	021b      	lsls	r3, r3, #8
 800a918:	b29b      	uxth	r3, r3
 800a91a:	4413      	add	r3, r2
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	3304      	adds	r3, #4
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	3305      	adds	r3, #5
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	021b      	lsls	r3, r3, #8
 800a932:	b29b      	uxth	r3, r3
 800a934:	4413      	add	r3, r2
 800a936:	b29a      	uxth	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	3306      	adds	r3, #6
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	3307      	adds	r3, #7
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	021b      	lsls	r3, r3, #8
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	4413      	add	r3, r2
 800a950:	b29a      	uxth	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	80da      	strh	r2, [r3, #6]

}
 800a956:	bf00      	nop
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bc80      	pop	{r7}
 800a95e:	4770      	bx	lr

0800a960 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a96a:	2180      	movs	r1, #128	@ 0x80
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fc6d 	bl	800b24c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a972:	2100      	movs	r1, #0
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fc69 	bl	800b24c <USBD_LL_StallEP>
}
 800a97a:	bf00      	nop
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b086      	sub	sp, #24
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a98e:	2300      	movs	r3, #0
 800a990:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d032      	beq.n	800a9fe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f834 	bl	800aa06 <USBD_GetLen>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	75fa      	strb	r2, [r7, #23]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	7812      	ldrb	r2, [r2, #0]
 800a9bc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	75fa      	strb	r2, [r7, #23]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	2203      	movs	r2, #3
 800a9cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a9ce:	e012      	b.n	800a9f6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	1c5a      	adds	r2, r3, #1
 800a9d4:	60fa      	str	r2, [r7, #12]
 800a9d6:	7dfa      	ldrb	r2, [r7, #23]
 800a9d8:	1c51      	adds	r1, r2, #1
 800a9da:	75f9      	strb	r1, [r7, #23]
 800a9dc:	4611      	mov	r1, r2
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	440a      	add	r2, r1
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	75fa      	strb	r2, [r7, #23]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e8      	bne.n	800a9d0 <USBD_GetString+0x4e>
    }
  }
}
 800a9fe:	bf00      	nop
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800aa12:	e005      	b.n	800aa20 <USBD_GetLen+0x1a>
  {
    len++;
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	3301      	adds	r3, #1
 800aa18:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1f5      	bne.n	800aa14 <USBD_GetLen+0xe>
  }

  return len;
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bc80      	pop	{r7}
 800aa32:	4770      	bx	lr

0800aa34 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2202      	movs	r2, #2
 800aa46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aa4a:	88fa      	ldrh	r2, [r7, #6]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800aa50:	88fa      	ldrh	r2, [r7, #6]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 fc7d 	bl	800b35c <USBD_LL_Transmit>

  return USBD_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	4613      	mov	r3, r2
 800aa78:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa7a:	88fb      	ldrh	r3, [r7, #6]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	2100      	movs	r1, #0
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 fc6b 	bl	800b35c <USBD_LL_Transmit>

  return USBD_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aaa6:	88fa      	ldrh	r2, [r7, #6]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aaae:	88fa      	ldrh	r2, [r7, #6]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aab6:	88fb      	ldrh	r3, [r7, #6]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	2100      	movs	r1, #0
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 fc70 	bl	800b3a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	4613      	mov	r3, r2
 800aad8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aada:	88fb      	ldrh	r3, [r7, #6]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	2100      	movs	r1, #0
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 fc5e 	bl	800b3a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2204      	movs	r2, #4
 800aafc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab00:	2300      	movs	r3, #0
 800ab02:	2200      	movs	r2, #0
 800ab04:	2100      	movs	r1, #0
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fc28 	bl	800b35c <USBD_LL_Transmit>

  return USBD_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b082      	sub	sp, #8
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2205      	movs	r2, #5
 800ab22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab26:	2300      	movs	r3, #0
 800ab28:	2200      	movs	r2, #0
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fc38 	bl	800b3a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab40:	2200      	movs	r2, #0
 800ab42:	4912      	ldr	r1, [pc, #72]	@ (800ab8c <MX_USB_DEVICE_Init+0x50>)
 800ab44:	4812      	ldr	r0, [pc, #72]	@ (800ab90 <MX_USB_DEVICE_Init+0x54>)
 800ab46:	f7fe ff62 	bl	8009a0e <USBD_Init>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab50:	f7f6 fc52 	bl	80013f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab54:	490f      	ldr	r1, [pc, #60]	@ (800ab94 <MX_USB_DEVICE_Init+0x58>)
 800ab56:	480e      	ldr	r0, [pc, #56]	@ (800ab90 <MX_USB_DEVICE_Init+0x54>)
 800ab58:	f7fe ff84 	bl	8009a64 <USBD_RegisterClass>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab62:	f7f6 fc49 	bl	80013f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab66:	490c      	ldr	r1, [pc, #48]	@ (800ab98 <MX_USB_DEVICE_Init+0x5c>)
 800ab68:	4809      	ldr	r0, [pc, #36]	@ (800ab90 <MX_USB_DEVICE_Init+0x54>)
 800ab6a:	f7fe feb5 	bl	80098d8 <USBD_CDC_RegisterInterface>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab74:	f7f6 fc40 	bl	80013f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab78:	4805      	ldr	r0, [pc, #20]	@ (800ab90 <MX_USB_DEVICE_Init+0x54>)
 800ab7a:	f7fe ff8c 	bl	8009a96 <USBD_Start>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab84:	f7f6 fc38 	bl	80013f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab88:	bf00      	nop
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000138 	.word	0x20000138
 800ab90:	20000490 	.word	0x20000490
 800ab94:	20000024 	.word	0x20000024
 800ab98:	20000128 	.word	0x20000128

0800ab9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aba0:	2200      	movs	r2, #0
 800aba2:	4905      	ldr	r1, [pc, #20]	@ (800abb8 <CDC_Init_FS+0x1c>)
 800aba4:	4805      	ldr	r0, [pc, #20]	@ (800abbc <CDC_Init_FS+0x20>)
 800aba6:	f7fe fead 	bl	8009904 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800abaa:	4905      	ldr	r1, [pc, #20]	@ (800abc0 <CDC_Init_FS+0x24>)
 800abac:	4803      	ldr	r0, [pc, #12]	@ (800abbc <CDC_Init_FS+0x20>)
 800abae:	f7fe fec2 	bl	8009936 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800abb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	20000b54 	.word	0x20000b54
 800abbc:	20000490 	.word	0x20000490
 800abc0:	20000754 	.word	0x20000754

0800abc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800abc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800abca:	4618      	mov	r0, r3
 800abcc:	46bd      	mov	sp, r7
 800abce:	bc80      	pop	{r7}
 800abd0:	4770      	bx	lr
	...

0800abd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	6039      	str	r1, [r7, #0]
 800abde:	71fb      	strb	r3, [r7, #7]
 800abe0:	4613      	mov	r3, r2
 800abe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800abe4:	79fb      	ldrb	r3, [r7, #7]
 800abe6:	2b23      	cmp	r3, #35	@ 0x23
 800abe8:	d84a      	bhi.n	800ac80 <CDC_Control_FS+0xac>
 800abea:	a201      	add	r2, pc, #4	@ (adr r2, 800abf0 <CDC_Control_FS+0x1c>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac81 	.word	0x0800ac81
 800abf4:	0800ac81 	.word	0x0800ac81
 800abf8:	0800ac81 	.word	0x0800ac81
 800abfc:	0800ac81 	.word	0x0800ac81
 800ac00:	0800ac81 	.word	0x0800ac81
 800ac04:	0800ac81 	.word	0x0800ac81
 800ac08:	0800ac81 	.word	0x0800ac81
 800ac0c:	0800ac81 	.word	0x0800ac81
 800ac10:	0800ac81 	.word	0x0800ac81
 800ac14:	0800ac81 	.word	0x0800ac81
 800ac18:	0800ac81 	.word	0x0800ac81
 800ac1c:	0800ac81 	.word	0x0800ac81
 800ac20:	0800ac81 	.word	0x0800ac81
 800ac24:	0800ac81 	.word	0x0800ac81
 800ac28:	0800ac81 	.word	0x0800ac81
 800ac2c:	0800ac81 	.word	0x0800ac81
 800ac30:	0800ac81 	.word	0x0800ac81
 800ac34:	0800ac81 	.word	0x0800ac81
 800ac38:	0800ac81 	.word	0x0800ac81
 800ac3c:	0800ac81 	.word	0x0800ac81
 800ac40:	0800ac81 	.word	0x0800ac81
 800ac44:	0800ac81 	.word	0x0800ac81
 800ac48:	0800ac81 	.word	0x0800ac81
 800ac4c:	0800ac81 	.word	0x0800ac81
 800ac50:	0800ac81 	.word	0x0800ac81
 800ac54:	0800ac81 	.word	0x0800ac81
 800ac58:	0800ac81 	.word	0x0800ac81
 800ac5c:	0800ac81 	.word	0x0800ac81
 800ac60:	0800ac81 	.word	0x0800ac81
 800ac64:	0800ac81 	.word	0x0800ac81
 800ac68:	0800ac81 	.word	0x0800ac81
 800ac6c:	0800ac81 	.word	0x0800ac81
 800ac70:	0800ac81 	.word	0x0800ac81
 800ac74:	0800ac81 	.word	0x0800ac81
 800ac78:	0800ac81 	.word	0x0800ac81
 800ac7c:	0800ac81 	.word	0x0800ac81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac80:	bf00      	nop
  }

  return (USBD_OK);
 800ac82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bc80      	pop	{r7}
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop

0800ac90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	4810      	ldr	r0, [pc, #64]	@ (800ace0 <CDC_Receive_FS+0x50>)
 800ac9e:	f7fe fe4a 	bl	8009936 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aca2:	480f      	ldr	r0, [pc, #60]	@ (800ace0 <CDC_Receive_FS+0x50>)
 800aca4:	f7fe fe89 	bl	80099ba <USBD_CDC_ReceivePacket>
  memset (RxBuffer, '\0', 64);  // clear the buffer
 800aca8:	2240      	movs	r2, #64	@ 0x40
 800acaa:	2100      	movs	r1, #0
 800acac:	480d      	ldr	r0, [pc, #52]	@ (800ace4 <CDC_Receive_FS+0x54>)
 800acae:	f000 fc1b 	bl	800b4e8 <memset>
    uint8_t len = (uint8_t) *Len;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	73fb      	strb	r3, [r7, #15]
    memcpy(RxBuffer, Buf, len);  // copy the data to the buffer
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
 800acba:	461a      	mov	r2, r3
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	4809      	ldr	r0, [pc, #36]	@ (800ace4 <CDC_Receive_FS+0x54>)
 800acc0:	f000 fc46 	bl	800b550 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	461a      	mov	r2, r3
 800acc8:	2100      	movs	r1, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fc0c 	bl	800b4e8 <memset>
    fee=1;
 800acd0:	4b05      	ldr	r3, [pc, #20]	@ (800ace8 <CDC_Receive_FS+0x58>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800acd6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20000490 	.word	0x20000490
 800ace4:	20000228 	.word	0x20000228
 800ace8:	20000295 	.word	0x20000295

0800acec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800acfc:	4b0d      	ldr	r3, [pc, #52]	@ (800ad34 <CDC_Transmit_FS+0x48>)
 800acfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e00b      	b.n	800ad2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ad12:	887b      	ldrh	r3, [r7, #2]
 800ad14:	461a      	mov	r2, r3
 800ad16:	6879      	ldr	r1, [r7, #4]
 800ad18:	4806      	ldr	r0, [pc, #24]	@ (800ad34 <CDC_Transmit_FS+0x48>)
 800ad1a:	f7fe fdf3 	bl	8009904 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ad1e:	4805      	ldr	r0, [pc, #20]	@ (800ad34 <CDC_Transmit_FS+0x48>)
 800ad20:	f7fe fe1c 	bl	800995c <USBD_CDC_TransmitPacket>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20000490 	.word	0x20000490

0800ad38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2212      	movs	r2, #18
 800ad48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad4a:	4b03      	ldr	r3, [pc, #12]	@ (800ad58 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	20000154 	.word	0x20000154

0800ad5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	6039      	str	r1, [r7, #0]
 800ad66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2204      	movs	r2, #4
 800ad6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad6e:	4b03      	ldr	r3, [pc, #12]	@ (800ad7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bc80      	pop	{r7}
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	20000168 	.word	0x20000168

0800ad80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	6039      	str	r1, [r7, #0]
 800ad8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d105      	bne.n	800ad9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	4907      	ldr	r1, [pc, #28]	@ (800adb4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad96:	4808      	ldr	r0, [pc, #32]	@ (800adb8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad98:	f7ff fdf3 	bl	800a982 <USBD_GetString>
 800ad9c:	e004      	b.n	800ada8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	4904      	ldr	r1, [pc, #16]	@ (800adb4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ada2:	4805      	ldr	r0, [pc, #20]	@ (800adb8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ada4:	f7ff fded 	bl	800a982 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ada8:	4b02      	ldr	r3, [pc, #8]	@ (800adb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000f54 	.word	0x20000f54
 800adb8:	0800be6c 	.word	0x0800be6c

0800adbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	6039      	str	r1, [r7, #0]
 800adc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	4904      	ldr	r1, [pc, #16]	@ (800addc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800adcc:	4804      	ldr	r0, [pc, #16]	@ (800ade0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800adce:	f7ff fdd8 	bl	800a982 <USBD_GetString>
  return USBD_StrDesc;
 800add2:	4b02      	ldr	r3, [pc, #8]	@ (800addc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800add4:	4618      	mov	r0, r3
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20000f54 	.word	0x20000f54
 800ade0:	0800be84 	.word	0x0800be84

0800ade4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	221a      	movs	r2, #26
 800adf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800adf6:	f000 f843 	bl	800ae80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800adfa:	4b02      	ldr	r3, [pc, #8]	@ (800ae04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	2000016c 	.word	0x2000016c

0800ae08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	6039      	str	r1, [r7, #0]
 800ae12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d105      	bne.n	800ae26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	4907      	ldr	r1, [pc, #28]	@ (800ae3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae1e:	4808      	ldr	r0, [pc, #32]	@ (800ae40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae20:	f7ff fdaf 	bl	800a982 <USBD_GetString>
 800ae24:	e004      	b.n	800ae30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	4904      	ldr	r1, [pc, #16]	@ (800ae3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae2a:	4805      	ldr	r0, [pc, #20]	@ (800ae40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae2c:	f7ff fda9 	bl	800a982 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae30:	4b02      	ldr	r3, [pc, #8]	@ (800ae3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000f54 	.word	0x20000f54
 800ae40:	0800be98 	.word	0x0800be98

0800ae44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	6039      	str	r1, [r7, #0]
 800ae4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae50:	79fb      	ldrb	r3, [r7, #7]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d105      	bne.n	800ae62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	4907      	ldr	r1, [pc, #28]	@ (800ae78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae5a:	4808      	ldr	r0, [pc, #32]	@ (800ae7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae5c:	f7ff fd91 	bl	800a982 <USBD_GetString>
 800ae60:	e004      	b.n	800ae6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	4904      	ldr	r1, [pc, #16]	@ (800ae78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae66:	4805      	ldr	r0, [pc, #20]	@ (800ae7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae68:	f7ff fd8b 	bl	800a982 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae6c:	4b02      	ldr	r3, [pc, #8]	@ (800ae78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20000f54 	.word	0x20000f54
 800ae7c:	0800bea4 	.word	0x0800bea4

0800ae80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae86:	4b0f      	ldr	r3, [pc, #60]	@ (800aec4 <Get_SerialNum+0x44>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae8c:	4b0e      	ldr	r3, [pc, #56]	@ (800aec8 <Get_SerialNum+0x48>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae92:	4b0e      	ldr	r3, [pc, #56]	@ (800aecc <Get_SerialNum+0x4c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d009      	beq.n	800aeba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aea6:	2208      	movs	r2, #8
 800aea8:	4909      	ldr	r1, [pc, #36]	@ (800aed0 <Get_SerialNum+0x50>)
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f000 f814 	bl	800aed8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aeb0:	2204      	movs	r2, #4
 800aeb2:	4908      	ldr	r1, [pc, #32]	@ (800aed4 <Get_SerialNum+0x54>)
 800aeb4:	68b8      	ldr	r0, [r7, #8]
 800aeb6:	f000 f80f 	bl	800aed8 <IntToUnicode>
  }
}
 800aeba:	bf00      	nop
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	1ffff7e8 	.word	0x1ffff7e8
 800aec8:	1ffff7ec 	.word	0x1ffff7ec
 800aecc:	1ffff7f0 	.word	0x1ffff7f0
 800aed0:	2000016e 	.word	0x2000016e
 800aed4:	2000017e 	.word	0x2000017e

0800aed8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	4613      	mov	r3, r2
 800aee4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aeea:	2300      	movs	r3, #0
 800aeec:	75fb      	strb	r3, [r7, #23]
 800aeee:	e027      	b.n	800af40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	0f1b      	lsrs	r3, r3, #28
 800aef4:	2b09      	cmp	r3, #9
 800aef6:	d80b      	bhi.n	800af10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	0f1b      	lsrs	r3, r3, #28
 800aefc:	b2da      	uxtb	r2, r3
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	4619      	mov	r1, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	440b      	add	r3, r1
 800af08:	3230      	adds	r2, #48	@ 0x30
 800af0a:	b2d2      	uxtb	r2, r2
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	e00a      	b.n	800af26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	0f1b      	lsrs	r3, r3, #28
 800af14:	b2da      	uxtb	r2, r3
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	4619      	mov	r1, r3
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	440b      	add	r3, r1
 800af20:	3237      	adds	r2, #55	@ 0x37
 800af22:	b2d2      	uxtb	r2, r2
 800af24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	011b      	lsls	r3, r3, #4
 800af2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	3301      	adds	r3, #1
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	4413      	add	r3, r2
 800af36:	2200      	movs	r2, #0
 800af38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	3301      	adds	r3, #1
 800af3e:	75fb      	strb	r3, [r7, #23]
 800af40:	7dfa      	ldrb	r2, [r7, #23]
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	429a      	cmp	r2, r3
 800af46:	d3d3      	bcc.n	800aef0 <IntToUnicode+0x18>
  }
}
 800af48:	bf00      	nop
 800af4a:	bf00      	nop
 800af4c:	371c      	adds	r7, #28
 800af4e:	46bd      	mov	sp, r7
 800af50:	bc80      	pop	{r7}
 800af52:	4770      	bx	lr

0800af54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a0d      	ldr	r2, [pc, #52]	@ (800af98 <HAL_PCD_MspInit+0x44>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d113      	bne.n	800af8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800af66:	4b0d      	ldr	r3, [pc, #52]	@ (800af9c <HAL_PCD_MspInit+0x48>)
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	4a0c      	ldr	r2, [pc, #48]	@ (800af9c <HAL_PCD_MspInit+0x48>)
 800af6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af70:	61d3      	str	r3, [r2, #28]
 800af72:	4b0a      	ldr	r3, [pc, #40]	@ (800af9c <HAL_PCD_MspInit+0x48>)
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800af7e:	2200      	movs	r2, #0
 800af80:	2100      	movs	r1, #0
 800af82:	2014      	movs	r0, #20
 800af84:	f7f6 ffd7 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800af88:	2014      	movs	r0, #20
 800af8a:	f7f6 fff0 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800af8e:	bf00      	nop
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	40005c00 	.word	0x40005c00
 800af9c:	40021000 	.word	0x40021000

0800afa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800afb4:	4619      	mov	r1, r3
 800afb6:	4610      	mov	r0, r2
 800afb8:	f7fe fdb5 	bl	8009b26 <USBD_LL_SetupStage>
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800afd6:	78fa      	ldrb	r2, [r7, #3]
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	00db      	lsls	r3, r3, #3
 800afe2:	440b      	add	r3, r1
 800afe4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	78fb      	ldrb	r3, [r7, #3]
 800afec:	4619      	mov	r1, r3
 800afee:	f7fe fde7 	bl	8009bc0 <USBD_LL_DataOutStage>
}
 800aff2:	bf00      	nop
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b00c:	78fa      	ldrb	r2, [r7, #3]
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	440b      	add	r3, r1
 800b01a:	3324      	adds	r3, #36	@ 0x24
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	78fb      	ldrb	r3, [r7, #3]
 800b020:	4619      	mov	r1, r3
 800b022:	f7fe fe3e 	bl	8009ca2 <USBD_LL_DataInStage>
}
 800b026:	bf00      	nop
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fe ff4e 	bl	8009ede <USBD_LL_SOF>
}
 800b042:	bf00      	nop
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b052:	2301      	movs	r3, #1
 800b054:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	799b      	ldrb	r3, [r3, #6]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d001      	beq.n	800b062 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b05e:	f7f6 f9cb 	bl	80013f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b068:	7bfa      	ldrb	r2, [r7, #15]
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fe fefe 	bl	8009e6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fe feb7 	bl	8009dec <USBD_LL_Reset>
}
 800b07e:	bf00      	nop
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe fef8 	bl	8009e8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	7a9b      	ldrb	r3, [r3, #10]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d005      	beq.n	800b0b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0a4:	4b04      	ldr	r3, [pc, #16]	@ (800b0b8 <HAL_PCD_SuspendCallback+0x30>)
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	4a03      	ldr	r2, [pc, #12]	@ (800b0b8 <HAL_PCD_SuspendCallback+0x30>)
 800b0aa:	f043 0306 	orr.w	r3, r3, #6
 800b0ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	e000ed00 	.word	0xe000ed00

0800b0bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fe fef2 	bl	8009eb4 <USBD_LL_Resume>
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b0e0:	4a28      	ldr	r2, [pc, #160]	@ (800b184 <USBD_LL_Init+0xac>)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a26      	ldr	r2, [pc, #152]	@ (800b184 <USBD_LL_Init+0xac>)
 800b0ec:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b0f0:	4b24      	ldr	r3, [pc, #144]	@ (800b184 <USBD_LL_Init+0xac>)
 800b0f2:	4a25      	ldr	r2, [pc, #148]	@ (800b188 <USBD_LL_Init+0xb0>)
 800b0f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b0f6:	4b23      	ldr	r3, [pc, #140]	@ (800b184 <USBD_LL_Init+0xac>)
 800b0f8:	2208      	movs	r2, #8
 800b0fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b0fc:	4b21      	ldr	r3, [pc, #132]	@ (800b184 <USBD_LL_Init+0xac>)
 800b0fe:	2202      	movs	r2, #2
 800b100:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b102:	4b20      	ldr	r3, [pc, #128]	@ (800b184 <USBD_LL_Init+0xac>)
 800b104:	2200      	movs	r2, #0
 800b106:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b108:	4b1e      	ldr	r3, [pc, #120]	@ (800b184 <USBD_LL_Init+0xac>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b10e:	4b1d      	ldr	r3, [pc, #116]	@ (800b184 <USBD_LL_Init+0xac>)
 800b110:	2200      	movs	r2, #0
 800b112:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b114:	481b      	ldr	r0, [pc, #108]	@ (800b184 <USBD_LL_Init+0xac>)
 800b116:	f7f7 fe5f 	bl	8002dd8 <HAL_PCD_Init>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b120:	f7f6 f96a 	bl	80013f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b12a:	2318      	movs	r3, #24
 800b12c:	2200      	movs	r2, #0
 800b12e:	2100      	movs	r1, #0
 800b130:	f7f9 fb70 	bl	8004814 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b13a:	2358      	movs	r3, #88	@ 0x58
 800b13c:	2200      	movs	r2, #0
 800b13e:	2180      	movs	r1, #128	@ 0x80
 800b140:	f7f9 fb68 	bl	8004814 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b14a:	23c0      	movs	r3, #192	@ 0xc0
 800b14c:	2200      	movs	r2, #0
 800b14e:	2181      	movs	r1, #129	@ 0x81
 800b150:	f7f9 fb60 	bl	8004814 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b15a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b15e:	2200      	movs	r2, #0
 800b160:	2101      	movs	r1, #1
 800b162:	f7f9 fb57 	bl	8004814 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b16c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b170:	2200      	movs	r2, #0
 800b172:	2182      	movs	r1, #130	@ 0x82
 800b174:	f7f9 fb4e 	bl	8004814 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	20001154 	.word	0x20001154
 800b188:	40005c00 	.word	0x40005c00

0800b18c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7f7 ff0e 	bl	8002fc4 <HAL_PCD_Start>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 f94e 	bl	800b450 <USBD_Get_USB_Status>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	4608      	mov	r0, r1
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	70fb      	strb	r3, [r7, #3]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70bb      	strb	r3, [r7, #2]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b1ea:	78bb      	ldrb	r3, [r7, #2]
 800b1ec:	883a      	ldrh	r2, [r7, #0]
 800b1ee:	78f9      	ldrb	r1, [r7, #3]
 800b1f0:	f7f8 f862 	bl	80032b8 <HAL_PCD_EP_Open>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 f928 	bl	800b450 <USBD_Get_USB_Status>
 800b200:	4603      	mov	r3, r0
 800b202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b204:	7bbb      	ldrb	r3, [r7, #14]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	460b      	mov	r3, r1
 800b218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b228:	78fa      	ldrb	r2, [r7, #3]
 800b22a:	4611      	mov	r1, r2
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7f8 f8a0 	bl	8003372 <HAL_PCD_EP_Close>
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 f909 	bl	800b450 <USBD_Get_USB_Status>
 800b23e:	4603      	mov	r3, r0
 800b240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b242:	7bbb      	ldrb	r3, [r7, #14]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b266:	78fa      	ldrb	r2, [r7, #3]
 800b268:	4611      	mov	r1, r2
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7f8 f948 	bl	8003500 <HAL_PCD_EP_SetStall>
 800b270:	4603      	mov	r3, r0
 800b272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	4618      	mov	r0, r3
 800b278:	f000 f8ea 	bl	800b450 <USBD_Get_USB_Status>
 800b27c:	4603      	mov	r3, r0
 800b27e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b280:	7bbb      	ldrb	r3, [r7, #14]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	460b      	mov	r3, r1
 800b294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2a4:	78fa      	ldrb	r2, [r7, #3]
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7f8 f989 	bl	80035c0 <HAL_PCD_EP_ClrStall>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 f8cb 	bl	800b450 <USBD_Get_USB_Status>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b2dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	da0b      	bge.n	800b2fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b2e4:	78fb      	ldrb	r3, [r7, #3]
 800b2e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2ea:	68f9      	ldr	r1, [r7, #12]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	440b      	add	r3, r1
 800b2f6:	3312      	adds	r3, #18
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	e00b      	b.n	800b314 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b302:	68f9      	ldr	r1, [r7, #12]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	00db      	lsls	r3, r3, #3
 800b30c:	440b      	add	r3, r1
 800b30e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b312:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	bc80      	pop	{r7}
 800b31c:	4770      	bx	lr

0800b31e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b084      	sub	sp, #16
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	460b      	mov	r3, r1
 800b328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b338:	78fa      	ldrb	r2, [r7, #3]
 800b33a:	4611      	mov	r1, r2
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7f7 ff97 	bl	8003270 <HAL_PCD_SetAddress>
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 f881 	bl	800b450 <USBD_Get_USB_Status>
 800b34e:	4603      	mov	r3, r0
 800b350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b352:	7bbb      	ldrb	r3, [r7, #14]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	607a      	str	r2, [r7, #4]
 800b366:	461a      	mov	r2, r3
 800b368:	460b      	mov	r3, r1
 800b36a:	72fb      	strb	r3, [r7, #11]
 800b36c:	4613      	mov	r3, r2
 800b36e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b37e:	893b      	ldrh	r3, [r7, #8]
 800b380:	7af9      	ldrb	r1, [r7, #11]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	f7f8 f885 	bl	8003492 <HAL_PCD_EP_Transmit>
 800b388:	4603      	mov	r3, r0
 800b38a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 f85e 	bl	800b450 <USBD_Get_USB_Status>
 800b394:	4603      	mov	r3, r0
 800b396:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b398:	7dbb      	ldrb	r3, [r7, #22]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b086      	sub	sp, #24
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	72fb      	strb	r3, [r7, #11]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b3c4:	893b      	ldrh	r3, [r7, #8]
 800b3c6:	7af9      	ldrb	r1, [r7, #11]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	f7f8 f81a 	bl	8003402 <HAL_PCD_EP_Receive>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 f83b 	bl	800b450 <USBD_Get_USB_Status>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b3de:	7dbb      	ldrb	r3, [r7, #22]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3fa:	78fa      	ldrb	r2, [r7, #3]
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7f8 f830 	bl	8003464 <HAL_PCD_EP_GetRxCount>
 800b404:	4603      	mov	r3, r0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b418:	4b02      	ldr	r3, [pc, #8]	@ (800b424 <USBD_static_malloc+0x14>)
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	bc80      	pop	{r7}
 800b422:	4770      	bx	lr
 800b424:	2000142c 	.word	0x2000142c

0800b428 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]

}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	bc80      	pop	{r7}
 800b438:	4770      	bx	lr

0800b43a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	460b      	mov	r3, r1
 800b444:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b446:	bf00      	nop
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bc80      	pop	{r7}
 800b44e:	4770      	bx	lr

0800b450 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	2b03      	cmp	r3, #3
 800b462:	d817      	bhi.n	800b494 <USBD_Get_USB_Status+0x44>
 800b464:	a201      	add	r2, pc, #4	@ (adr r2, 800b46c <USBD_Get_USB_Status+0x1c>)
 800b466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46a:	bf00      	nop
 800b46c:	0800b47d 	.word	0x0800b47d
 800b470:	0800b483 	.word	0x0800b483
 800b474:	0800b489 	.word	0x0800b489
 800b478:	0800b48f 	.word	0x0800b48f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73fb      	strb	r3, [r7, #15]
    break;
 800b480:	e00b      	b.n	800b49a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b482:	2302      	movs	r3, #2
 800b484:	73fb      	strb	r3, [r7, #15]
    break;
 800b486:	e008      	b.n	800b49a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b488:	2301      	movs	r3, #1
 800b48a:	73fb      	strb	r3, [r7, #15]
    break;
 800b48c:	e005      	b.n	800b49a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b48e:	2302      	movs	r3, #2
 800b490:	73fb      	strb	r3, [r7, #15]
    break;
 800b492:	e002      	b.n	800b49a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b494:	2302      	movs	r3, #2
 800b496:	73fb      	strb	r3, [r7, #15]
    break;
 800b498:	bf00      	nop
  }
  return usb_status;
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bc80      	pop	{r7}
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop

0800b4a8 <siprintf>:
 800b4a8:	b40e      	push	{r1, r2, r3}
 800b4aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4ae:	b500      	push	{lr}
 800b4b0:	b09c      	sub	sp, #112	@ 0x70
 800b4b2:	ab1d      	add	r3, sp, #116	@ 0x74
 800b4b4:	9002      	str	r0, [sp, #8]
 800b4b6:	9006      	str	r0, [sp, #24]
 800b4b8:	9107      	str	r1, [sp, #28]
 800b4ba:	9104      	str	r1, [sp, #16]
 800b4bc:	4808      	ldr	r0, [pc, #32]	@ (800b4e0 <siprintf+0x38>)
 800b4be:	4909      	ldr	r1, [pc, #36]	@ (800b4e4 <siprintf+0x3c>)
 800b4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c4:	9105      	str	r1, [sp, #20]
 800b4c6:	6800      	ldr	r0, [r0, #0]
 800b4c8:	a902      	add	r1, sp, #8
 800b4ca:	9301      	str	r3, [sp, #4]
 800b4cc:	f000 f9a0 	bl	800b810 <_svfiprintf_r>
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	9b02      	ldr	r3, [sp, #8]
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	b01c      	add	sp, #112	@ 0x70
 800b4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4dc:	b003      	add	sp, #12
 800b4de:	4770      	bx	lr
 800b4e0:	20000188 	.word	0x20000188
 800b4e4:	ffff0208 	.word	0xffff0208

0800b4e8 <memset>:
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	4402      	add	r2, r0
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d100      	bne.n	800b4f2 <memset+0xa>
 800b4f0:	4770      	bx	lr
 800b4f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4f6:	e7f9      	b.n	800b4ec <memset+0x4>

0800b4f8 <__errno>:
 800b4f8:	4b01      	ldr	r3, [pc, #4]	@ (800b500 <__errno+0x8>)
 800b4fa:	6818      	ldr	r0, [r3, #0]
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	20000188 	.word	0x20000188

0800b504 <__libc_init_array>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	2600      	movs	r6, #0
 800b508:	4d0c      	ldr	r5, [pc, #48]	@ (800b53c <__libc_init_array+0x38>)
 800b50a:	4c0d      	ldr	r4, [pc, #52]	@ (800b540 <__libc_init_array+0x3c>)
 800b50c:	1b64      	subs	r4, r4, r5
 800b50e:	10a4      	asrs	r4, r4, #2
 800b510:	42a6      	cmp	r6, r4
 800b512:	d109      	bne.n	800b528 <__libc_init_array+0x24>
 800b514:	f000 fc78 	bl	800be08 <_init>
 800b518:	2600      	movs	r6, #0
 800b51a:	4d0a      	ldr	r5, [pc, #40]	@ (800b544 <__libc_init_array+0x40>)
 800b51c:	4c0a      	ldr	r4, [pc, #40]	@ (800b548 <__libc_init_array+0x44>)
 800b51e:	1b64      	subs	r4, r4, r5
 800b520:	10a4      	asrs	r4, r4, #2
 800b522:	42a6      	cmp	r6, r4
 800b524:	d105      	bne.n	800b532 <__libc_init_array+0x2e>
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	f855 3b04 	ldr.w	r3, [r5], #4
 800b52c:	4798      	blx	r3
 800b52e:	3601      	adds	r6, #1
 800b530:	e7ee      	b.n	800b510 <__libc_init_array+0xc>
 800b532:	f855 3b04 	ldr.w	r3, [r5], #4
 800b536:	4798      	blx	r3
 800b538:	3601      	adds	r6, #1
 800b53a:	e7f2      	b.n	800b522 <__libc_init_array+0x1e>
 800b53c:	0800bf1c 	.word	0x0800bf1c
 800b540:	0800bf1c 	.word	0x0800bf1c
 800b544:	0800bf1c 	.word	0x0800bf1c
 800b548:	0800bf20 	.word	0x0800bf20

0800b54c <__retarget_lock_acquire_recursive>:
 800b54c:	4770      	bx	lr

0800b54e <__retarget_lock_release_recursive>:
 800b54e:	4770      	bx	lr

0800b550 <memcpy>:
 800b550:	440a      	add	r2, r1
 800b552:	4291      	cmp	r1, r2
 800b554:	f100 33ff 	add.w	r3, r0, #4294967295
 800b558:	d100      	bne.n	800b55c <memcpy+0xc>
 800b55a:	4770      	bx	lr
 800b55c:	b510      	push	{r4, lr}
 800b55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b562:	4291      	cmp	r1, r2
 800b564:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b568:	d1f9      	bne.n	800b55e <memcpy+0xe>
 800b56a:	bd10      	pop	{r4, pc}

0800b56c <_free_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	4605      	mov	r5, r0
 800b570:	2900      	cmp	r1, #0
 800b572:	d040      	beq.n	800b5f6 <_free_r+0x8a>
 800b574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b578:	1f0c      	subs	r4, r1, #4
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	bfb8      	it	lt
 800b57e:	18e4      	addlt	r4, r4, r3
 800b580:	f000 f8de 	bl	800b740 <__malloc_lock>
 800b584:	4a1c      	ldr	r2, [pc, #112]	@ (800b5f8 <_free_r+0x8c>)
 800b586:	6813      	ldr	r3, [r2, #0]
 800b588:	b933      	cbnz	r3, 800b598 <_free_r+0x2c>
 800b58a:	6063      	str	r3, [r4, #4]
 800b58c:	6014      	str	r4, [r2, #0]
 800b58e:	4628      	mov	r0, r5
 800b590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b594:	f000 b8da 	b.w	800b74c <__malloc_unlock>
 800b598:	42a3      	cmp	r3, r4
 800b59a:	d908      	bls.n	800b5ae <_free_r+0x42>
 800b59c:	6820      	ldr	r0, [r4, #0]
 800b59e:	1821      	adds	r1, r4, r0
 800b5a0:	428b      	cmp	r3, r1
 800b5a2:	bf01      	itttt	eq
 800b5a4:	6819      	ldreq	r1, [r3, #0]
 800b5a6:	685b      	ldreq	r3, [r3, #4]
 800b5a8:	1809      	addeq	r1, r1, r0
 800b5aa:	6021      	streq	r1, [r4, #0]
 800b5ac:	e7ed      	b.n	800b58a <_free_r+0x1e>
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	b10b      	cbz	r3, 800b5b8 <_free_r+0x4c>
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	d9fa      	bls.n	800b5ae <_free_r+0x42>
 800b5b8:	6811      	ldr	r1, [r2, #0]
 800b5ba:	1850      	adds	r0, r2, r1
 800b5bc:	42a0      	cmp	r0, r4
 800b5be:	d10b      	bne.n	800b5d8 <_free_r+0x6c>
 800b5c0:	6820      	ldr	r0, [r4, #0]
 800b5c2:	4401      	add	r1, r0
 800b5c4:	1850      	adds	r0, r2, r1
 800b5c6:	4283      	cmp	r3, r0
 800b5c8:	6011      	str	r1, [r2, #0]
 800b5ca:	d1e0      	bne.n	800b58e <_free_r+0x22>
 800b5cc:	6818      	ldr	r0, [r3, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4408      	add	r0, r1
 800b5d2:	6010      	str	r0, [r2, #0]
 800b5d4:	6053      	str	r3, [r2, #4]
 800b5d6:	e7da      	b.n	800b58e <_free_r+0x22>
 800b5d8:	d902      	bls.n	800b5e0 <_free_r+0x74>
 800b5da:	230c      	movs	r3, #12
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	e7d6      	b.n	800b58e <_free_r+0x22>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	1821      	adds	r1, r4, r0
 800b5e4:	428b      	cmp	r3, r1
 800b5e6:	bf01      	itttt	eq
 800b5e8:	6819      	ldreq	r1, [r3, #0]
 800b5ea:	685b      	ldreq	r3, [r3, #4]
 800b5ec:	1809      	addeq	r1, r1, r0
 800b5ee:	6021      	streq	r1, [r4, #0]
 800b5f0:	6063      	str	r3, [r4, #4]
 800b5f2:	6054      	str	r4, [r2, #4]
 800b5f4:	e7cb      	b.n	800b58e <_free_r+0x22>
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	20001790 	.word	0x20001790

0800b5fc <sbrk_aligned>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	4e0f      	ldr	r6, [pc, #60]	@ (800b63c <sbrk_aligned+0x40>)
 800b600:	460c      	mov	r4, r1
 800b602:	6831      	ldr	r1, [r6, #0]
 800b604:	4605      	mov	r5, r0
 800b606:	b911      	cbnz	r1, 800b60e <sbrk_aligned+0x12>
 800b608:	f000 fbaa 	bl	800bd60 <_sbrk_r>
 800b60c:	6030      	str	r0, [r6, #0]
 800b60e:	4621      	mov	r1, r4
 800b610:	4628      	mov	r0, r5
 800b612:	f000 fba5 	bl	800bd60 <_sbrk_r>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d103      	bne.n	800b622 <sbrk_aligned+0x26>
 800b61a:	f04f 34ff 	mov.w	r4, #4294967295
 800b61e:	4620      	mov	r0, r4
 800b620:	bd70      	pop	{r4, r5, r6, pc}
 800b622:	1cc4      	adds	r4, r0, #3
 800b624:	f024 0403 	bic.w	r4, r4, #3
 800b628:	42a0      	cmp	r0, r4
 800b62a:	d0f8      	beq.n	800b61e <sbrk_aligned+0x22>
 800b62c:	1a21      	subs	r1, r4, r0
 800b62e:	4628      	mov	r0, r5
 800b630:	f000 fb96 	bl	800bd60 <_sbrk_r>
 800b634:	3001      	adds	r0, #1
 800b636:	d1f2      	bne.n	800b61e <sbrk_aligned+0x22>
 800b638:	e7ef      	b.n	800b61a <sbrk_aligned+0x1e>
 800b63a:	bf00      	nop
 800b63c:	2000178c 	.word	0x2000178c

0800b640 <_malloc_r>:
 800b640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b644:	1ccd      	adds	r5, r1, #3
 800b646:	f025 0503 	bic.w	r5, r5, #3
 800b64a:	3508      	adds	r5, #8
 800b64c:	2d0c      	cmp	r5, #12
 800b64e:	bf38      	it	cc
 800b650:	250c      	movcc	r5, #12
 800b652:	2d00      	cmp	r5, #0
 800b654:	4606      	mov	r6, r0
 800b656:	db01      	blt.n	800b65c <_malloc_r+0x1c>
 800b658:	42a9      	cmp	r1, r5
 800b65a:	d904      	bls.n	800b666 <_malloc_r+0x26>
 800b65c:	230c      	movs	r3, #12
 800b65e:	6033      	str	r3, [r6, #0]
 800b660:	2000      	movs	r0, #0
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b73c <_malloc_r+0xfc>
 800b66a:	f000 f869 	bl	800b740 <__malloc_lock>
 800b66e:	f8d8 3000 	ldr.w	r3, [r8]
 800b672:	461c      	mov	r4, r3
 800b674:	bb44      	cbnz	r4, 800b6c8 <_malloc_r+0x88>
 800b676:	4629      	mov	r1, r5
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff ffbf 	bl	800b5fc <sbrk_aligned>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	4604      	mov	r4, r0
 800b682:	d158      	bne.n	800b736 <_malloc_r+0xf6>
 800b684:	f8d8 4000 	ldr.w	r4, [r8]
 800b688:	4627      	mov	r7, r4
 800b68a:	2f00      	cmp	r7, #0
 800b68c:	d143      	bne.n	800b716 <_malloc_r+0xd6>
 800b68e:	2c00      	cmp	r4, #0
 800b690:	d04b      	beq.n	800b72a <_malloc_r+0xea>
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	4639      	mov	r1, r7
 800b696:	4630      	mov	r0, r6
 800b698:	eb04 0903 	add.w	r9, r4, r3
 800b69c:	f000 fb60 	bl	800bd60 <_sbrk_r>
 800b6a0:	4581      	cmp	r9, r0
 800b6a2:	d142      	bne.n	800b72a <_malloc_r+0xea>
 800b6a4:	6821      	ldr	r1, [r4, #0]
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	1a6d      	subs	r5, r5, r1
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	f7ff ffa6 	bl	800b5fc <sbrk_aligned>
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d03a      	beq.n	800b72a <_malloc_r+0xea>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	442b      	add	r3, r5
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	bb62      	cbnz	r2, 800b71c <_malloc_r+0xdc>
 800b6c2:	f8c8 7000 	str.w	r7, [r8]
 800b6c6:	e00f      	b.n	800b6e8 <_malloc_r+0xa8>
 800b6c8:	6822      	ldr	r2, [r4, #0]
 800b6ca:	1b52      	subs	r2, r2, r5
 800b6cc:	d420      	bmi.n	800b710 <_malloc_r+0xd0>
 800b6ce:	2a0b      	cmp	r2, #11
 800b6d0:	d917      	bls.n	800b702 <_malloc_r+0xc2>
 800b6d2:	1961      	adds	r1, r4, r5
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	6025      	str	r5, [r4, #0]
 800b6d8:	bf18      	it	ne
 800b6da:	6059      	strne	r1, [r3, #4]
 800b6dc:	6863      	ldr	r3, [r4, #4]
 800b6de:	bf08      	it	eq
 800b6e0:	f8c8 1000 	streq.w	r1, [r8]
 800b6e4:	5162      	str	r2, [r4, r5]
 800b6e6:	604b      	str	r3, [r1, #4]
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f000 f82f 	bl	800b74c <__malloc_unlock>
 800b6ee:	f104 000b 	add.w	r0, r4, #11
 800b6f2:	1d23      	adds	r3, r4, #4
 800b6f4:	f020 0007 	bic.w	r0, r0, #7
 800b6f8:	1ac2      	subs	r2, r0, r3
 800b6fa:	bf1c      	itt	ne
 800b6fc:	1a1b      	subne	r3, r3, r0
 800b6fe:	50a3      	strne	r3, [r4, r2]
 800b700:	e7af      	b.n	800b662 <_malloc_r+0x22>
 800b702:	6862      	ldr	r2, [r4, #4]
 800b704:	42a3      	cmp	r3, r4
 800b706:	bf0c      	ite	eq
 800b708:	f8c8 2000 	streq.w	r2, [r8]
 800b70c:	605a      	strne	r2, [r3, #4]
 800b70e:	e7eb      	b.n	800b6e8 <_malloc_r+0xa8>
 800b710:	4623      	mov	r3, r4
 800b712:	6864      	ldr	r4, [r4, #4]
 800b714:	e7ae      	b.n	800b674 <_malloc_r+0x34>
 800b716:	463c      	mov	r4, r7
 800b718:	687f      	ldr	r7, [r7, #4]
 800b71a:	e7b6      	b.n	800b68a <_malloc_r+0x4a>
 800b71c:	461a      	mov	r2, r3
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	42a3      	cmp	r3, r4
 800b722:	d1fb      	bne.n	800b71c <_malloc_r+0xdc>
 800b724:	2300      	movs	r3, #0
 800b726:	6053      	str	r3, [r2, #4]
 800b728:	e7de      	b.n	800b6e8 <_malloc_r+0xa8>
 800b72a:	230c      	movs	r3, #12
 800b72c:	4630      	mov	r0, r6
 800b72e:	6033      	str	r3, [r6, #0]
 800b730:	f000 f80c 	bl	800b74c <__malloc_unlock>
 800b734:	e794      	b.n	800b660 <_malloc_r+0x20>
 800b736:	6005      	str	r5, [r0, #0]
 800b738:	e7d6      	b.n	800b6e8 <_malloc_r+0xa8>
 800b73a:	bf00      	nop
 800b73c:	20001790 	.word	0x20001790

0800b740 <__malloc_lock>:
 800b740:	4801      	ldr	r0, [pc, #4]	@ (800b748 <__malloc_lock+0x8>)
 800b742:	f7ff bf03 	b.w	800b54c <__retarget_lock_acquire_recursive>
 800b746:	bf00      	nop
 800b748:	20001788 	.word	0x20001788

0800b74c <__malloc_unlock>:
 800b74c:	4801      	ldr	r0, [pc, #4]	@ (800b754 <__malloc_unlock+0x8>)
 800b74e:	f7ff befe 	b.w	800b54e <__retarget_lock_release_recursive>
 800b752:	bf00      	nop
 800b754:	20001788 	.word	0x20001788

0800b758 <__ssputs_r>:
 800b758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b75c:	461f      	mov	r7, r3
 800b75e:	688e      	ldr	r6, [r1, #8]
 800b760:	4682      	mov	sl, r0
 800b762:	42be      	cmp	r6, r7
 800b764:	460c      	mov	r4, r1
 800b766:	4690      	mov	r8, r2
 800b768:	680b      	ldr	r3, [r1, #0]
 800b76a:	d82d      	bhi.n	800b7c8 <__ssputs_r+0x70>
 800b76c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b770:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b774:	d026      	beq.n	800b7c4 <__ssputs_r+0x6c>
 800b776:	6965      	ldr	r5, [r4, #20]
 800b778:	6909      	ldr	r1, [r1, #16]
 800b77a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b77e:	eba3 0901 	sub.w	r9, r3, r1
 800b782:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b786:	1c7b      	adds	r3, r7, #1
 800b788:	444b      	add	r3, r9
 800b78a:	106d      	asrs	r5, r5, #1
 800b78c:	429d      	cmp	r5, r3
 800b78e:	bf38      	it	cc
 800b790:	461d      	movcc	r5, r3
 800b792:	0553      	lsls	r3, r2, #21
 800b794:	d527      	bpl.n	800b7e6 <__ssputs_r+0x8e>
 800b796:	4629      	mov	r1, r5
 800b798:	f7ff ff52 	bl	800b640 <_malloc_r>
 800b79c:	4606      	mov	r6, r0
 800b79e:	b360      	cbz	r0, 800b7fa <__ssputs_r+0xa2>
 800b7a0:	464a      	mov	r2, r9
 800b7a2:	6921      	ldr	r1, [r4, #16]
 800b7a4:	f7ff fed4 	bl	800b550 <memcpy>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	6126      	str	r6, [r4, #16]
 800b7b6:	444e      	add	r6, r9
 800b7b8:	6026      	str	r6, [r4, #0]
 800b7ba:	463e      	mov	r6, r7
 800b7bc:	6165      	str	r5, [r4, #20]
 800b7be:	eba5 0509 	sub.w	r5, r5, r9
 800b7c2:	60a5      	str	r5, [r4, #8]
 800b7c4:	42be      	cmp	r6, r7
 800b7c6:	d900      	bls.n	800b7ca <__ssputs_r+0x72>
 800b7c8:	463e      	mov	r6, r7
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	4641      	mov	r1, r8
 800b7ce:	6820      	ldr	r0, [r4, #0]
 800b7d0:	f000 faac 	bl	800bd2c <memmove>
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	68a3      	ldr	r3, [r4, #8]
 800b7d8:	1b9b      	subs	r3, r3, r6
 800b7da:	60a3      	str	r3, [r4, #8]
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	4433      	add	r3, r6
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e6:	462a      	mov	r2, r5
 800b7e8:	f000 fad8 	bl	800bd9c <_realloc_r>
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d1e0      	bne.n	800b7b4 <__ssputs_r+0x5c>
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	6921      	ldr	r1, [r4, #16]
 800b7f6:	f7ff feb9 	bl	800b56c <_free_r>
 800b7fa:	230c      	movs	r3, #12
 800b7fc:	f8ca 3000 	str.w	r3, [sl]
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	f04f 30ff 	mov.w	r0, #4294967295
 800b806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	e7e9      	b.n	800b7e2 <__ssputs_r+0x8a>
	...

0800b810 <_svfiprintf_r>:
 800b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	4698      	mov	r8, r3
 800b816:	898b      	ldrh	r3, [r1, #12]
 800b818:	4607      	mov	r7, r0
 800b81a:	061b      	lsls	r3, r3, #24
 800b81c:	460d      	mov	r5, r1
 800b81e:	4614      	mov	r4, r2
 800b820:	b09d      	sub	sp, #116	@ 0x74
 800b822:	d510      	bpl.n	800b846 <_svfiprintf_r+0x36>
 800b824:	690b      	ldr	r3, [r1, #16]
 800b826:	b973      	cbnz	r3, 800b846 <_svfiprintf_r+0x36>
 800b828:	2140      	movs	r1, #64	@ 0x40
 800b82a:	f7ff ff09 	bl	800b640 <_malloc_r>
 800b82e:	6028      	str	r0, [r5, #0]
 800b830:	6128      	str	r0, [r5, #16]
 800b832:	b930      	cbnz	r0, 800b842 <_svfiprintf_r+0x32>
 800b834:	230c      	movs	r3, #12
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	f04f 30ff 	mov.w	r0, #4294967295
 800b83c:	b01d      	add	sp, #116	@ 0x74
 800b83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b842:	2340      	movs	r3, #64	@ 0x40
 800b844:	616b      	str	r3, [r5, #20]
 800b846:	2300      	movs	r3, #0
 800b848:	9309      	str	r3, [sp, #36]	@ 0x24
 800b84a:	2320      	movs	r3, #32
 800b84c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b850:	2330      	movs	r3, #48	@ 0x30
 800b852:	f04f 0901 	mov.w	r9, #1
 800b856:	f8cd 800c 	str.w	r8, [sp, #12]
 800b85a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b9f4 <_svfiprintf_r+0x1e4>
 800b85e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b862:	4623      	mov	r3, r4
 800b864:	469a      	mov	sl, r3
 800b866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86a:	b10a      	cbz	r2, 800b870 <_svfiprintf_r+0x60>
 800b86c:	2a25      	cmp	r2, #37	@ 0x25
 800b86e:	d1f9      	bne.n	800b864 <_svfiprintf_r+0x54>
 800b870:	ebba 0b04 	subs.w	fp, sl, r4
 800b874:	d00b      	beq.n	800b88e <_svfiprintf_r+0x7e>
 800b876:	465b      	mov	r3, fp
 800b878:	4622      	mov	r2, r4
 800b87a:	4629      	mov	r1, r5
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff ff6b 	bl	800b758 <__ssputs_r>
 800b882:	3001      	adds	r0, #1
 800b884:	f000 80a7 	beq.w	800b9d6 <_svfiprintf_r+0x1c6>
 800b888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b88a:	445a      	add	r2, fp
 800b88c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b88e:	f89a 3000 	ldrb.w	r3, [sl]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f000 809f 	beq.w	800b9d6 <_svfiprintf_r+0x1c6>
 800b898:	2300      	movs	r3, #0
 800b89a:	f04f 32ff 	mov.w	r2, #4294967295
 800b89e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8a2:	f10a 0a01 	add.w	sl, sl, #1
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	9307      	str	r3, [sp, #28]
 800b8aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8b0:	4654      	mov	r4, sl
 800b8b2:	2205      	movs	r2, #5
 800b8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b8:	484e      	ldr	r0, [pc, #312]	@ (800b9f4 <_svfiprintf_r+0x1e4>)
 800b8ba:	f000 fa61 	bl	800bd80 <memchr>
 800b8be:	9a04      	ldr	r2, [sp, #16]
 800b8c0:	b9d8      	cbnz	r0, 800b8fa <_svfiprintf_r+0xea>
 800b8c2:	06d0      	lsls	r0, r2, #27
 800b8c4:	bf44      	itt	mi
 800b8c6:	2320      	movmi	r3, #32
 800b8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8cc:	0711      	lsls	r1, r2, #28
 800b8ce:	bf44      	itt	mi
 800b8d0:	232b      	movmi	r3, #43	@ 0x2b
 800b8d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8dc:	d015      	beq.n	800b90a <_svfiprintf_r+0xfa>
 800b8de:	4654      	mov	r4, sl
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	f04f 0c0a 	mov.w	ip, #10
 800b8e6:	9a07      	ldr	r2, [sp, #28]
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ee:	3b30      	subs	r3, #48	@ 0x30
 800b8f0:	2b09      	cmp	r3, #9
 800b8f2:	d94b      	bls.n	800b98c <_svfiprintf_r+0x17c>
 800b8f4:	b1b0      	cbz	r0, 800b924 <_svfiprintf_r+0x114>
 800b8f6:	9207      	str	r2, [sp, #28]
 800b8f8:	e014      	b.n	800b924 <_svfiprintf_r+0x114>
 800b8fa:	eba0 0308 	sub.w	r3, r0, r8
 800b8fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b902:	4313      	orrs	r3, r2
 800b904:	46a2      	mov	sl, r4
 800b906:	9304      	str	r3, [sp, #16]
 800b908:	e7d2      	b.n	800b8b0 <_svfiprintf_r+0xa0>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	1d19      	adds	r1, r3, #4
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	9103      	str	r1, [sp, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	bfbb      	ittet	lt
 800b916:	425b      	neglt	r3, r3
 800b918:	f042 0202 	orrlt.w	r2, r2, #2
 800b91c:	9307      	strge	r3, [sp, #28]
 800b91e:	9307      	strlt	r3, [sp, #28]
 800b920:	bfb8      	it	lt
 800b922:	9204      	strlt	r2, [sp, #16]
 800b924:	7823      	ldrb	r3, [r4, #0]
 800b926:	2b2e      	cmp	r3, #46	@ 0x2e
 800b928:	d10a      	bne.n	800b940 <_svfiprintf_r+0x130>
 800b92a:	7863      	ldrb	r3, [r4, #1]
 800b92c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b92e:	d132      	bne.n	800b996 <_svfiprintf_r+0x186>
 800b930:	9b03      	ldr	r3, [sp, #12]
 800b932:	3402      	adds	r4, #2
 800b934:	1d1a      	adds	r2, r3, #4
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	9203      	str	r2, [sp, #12]
 800b93a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b93e:	9305      	str	r3, [sp, #20]
 800b940:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b9f8 <_svfiprintf_r+0x1e8>
 800b944:	2203      	movs	r2, #3
 800b946:	4650      	mov	r0, sl
 800b948:	7821      	ldrb	r1, [r4, #0]
 800b94a:	f000 fa19 	bl	800bd80 <memchr>
 800b94e:	b138      	cbz	r0, 800b960 <_svfiprintf_r+0x150>
 800b950:	2240      	movs	r2, #64	@ 0x40
 800b952:	9b04      	ldr	r3, [sp, #16]
 800b954:	eba0 000a 	sub.w	r0, r0, sl
 800b958:	4082      	lsls	r2, r0
 800b95a:	4313      	orrs	r3, r2
 800b95c:	3401      	adds	r4, #1
 800b95e:	9304      	str	r3, [sp, #16]
 800b960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b964:	2206      	movs	r2, #6
 800b966:	4825      	ldr	r0, [pc, #148]	@ (800b9fc <_svfiprintf_r+0x1ec>)
 800b968:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b96c:	f000 fa08 	bl	800bd80 <memchr>
 800b970:	2800      	cmp	r0, #0
 800b972:	d036      	beq.n	800b9e2 <_svfiprintf_r+0x1d2>
 800b974:	4b22      	ldr	r3, [pc, #136]	@ (800ba00 <_svfiprintf_r+0x1f0>)
 800b976:	bb1b      	cbnz	r3, 800b9c0 <_svfiprintf_r+0x1b0>
 800b978:	9b03      	ldr	r3, [sp, #12]
 800b97a:	3307      	adds	r3, #7
 800b97c:	f023 0307 	bic.w	r3, r3, #7
 800b980:	3308      	adds	r3, #8
 800b982:	9303      	str	r3, [sp, #12]
 800b984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b986:	4433      	add	r3, r6
 800b988:	9309      	str	r3, [sp, #36]	@ 0x24
 800b98a:	e76a      	b.n	800b862 <_svfiprintf_r+0x52>
 800b98c:	460c      	mov	r4, r1
 800b98e:	2001      	movs	r0, #1
 800b990:	fb0c 3202 	mla	r2, ip, r2, r3
 800b994:	e7a8      	b.n	800b8e8 <_svfiprintf_r+0xd8>
 800b996:	2300      	movs	r3, #0
 800b998:	f04f 0c0a 	mov.w	ip, #10
 800b99c:	4619      	mov	r1, r3
 800b99e:	3401      	adds	r4, #1
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9a8:	3a30      	subs	r2, #48	@ 0x30
 800b9aa:	2a09      	cmp	r2, #9
 800b9ac:	d903      	bls.n	800b9b6 <_svfiprintf_r+0x1a6>
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0c6      	beq.n	800b940 <_svfiprintf_r+0x130>
 800b9b2:	9105      	str	r1, [sp, #20]
 800b9b4:	e7c4      	b.n	800b940 <_svfiprintf_r+0x130>
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9be:	e7f0      	b.n	800b9a2 <_svfiprintf_r+0x192>
 800b9c0:	ab03      	add	r3, sp, #12
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	462a      	mov	r2, r5
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba04 <_svfiprintf_r+0x1f4>)
 800b9ca:	a904      	add	r1, sp, #16
 800b9cc:	f3af 8000 	nop.w
 800b9d0:	1c42      	adds	r2, r0, #1
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	d1d6      	bne.n	800b984 <_svfiprintf_r+0x174>
 800b9d6:	89ab      	ldrh	r3, [r5, #12]
 800b9d8:	065b      	lsls	r3, r3, #25
 800b9da:	f53f af2d 	bmi.w	800b838 <_svfiprintf_r+0x28>
 800b9de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9e0:	e72c      	b.n	800b83c <_svfiprintf_r+0x2c>
 800b9e2:	ab03      	add	r3, sp, #12
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	462a      	mov	r2, r5
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	4b06      	ldr	r3, [pc, #24]	@ (800ba04 <_svfiprintf_r+0x1f4>)
 800b9ec:	a904      	add	r1, sp, #16
 800b9ee:	f000 f87d 	bl	800baec <_printf_i>
 800b9f2:	e7ed      	b.n	800b9d0 <_svfiprintf_r+0x1c0>
 800b9f4:	0800bede 	.word	0x0800bede
 800b9f8:	0800bee4 	.word	0x0800bee4
 800b9fc:	0800bee8 	.word	0x0800bee8
 800ba00:	00000000 	.word	0x00000000
 800ba04:	0800b759 	.word	0x0800b759

0800ba08 <_printf_common>:
 800ba08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0c:	4616      	mov	r6, r2
 800ba0e:	4698      	mov	r8, r3
 800ba10:	688a      	ldr	r2, [r1, #8]
 800ba12:	690b      	ldr	r3, [r1, #16]
 800ba14:	4607      	mov	r7, r0
 800ba16:	4293      	cmp	r3, r2
 800ba18:	bfb8      	it	lt
 800ba1a:	4613      	movlt	r3, r2
 800ba1c:	6033      	str	r3, [r6, #0]
 800ba1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba22:	460c      	mov	r4, r1
 800ba24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba28:	b10a      	cbz	r2, 800ba2e <_printf_common+0x26>
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	6033      	str	r3, [r6, #0]
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	0699      	lsls	r1, r3, #26
 800ba32:	bf42      	ittt	mi
 800ba34:	6833      	ldrmi	r3, [r6, #0]
 800ba36:	3302      	addmi	r3, #2
 800ba38:	6033      	strmi	r3, [r6, #0]
 800ba3a:	6825      	ldr	r5, [r4, #0]
 800ba3c:	f015 0506 	ands.w	r5, r5, #6
 800ba40:	d106      	bne.n	800ba50 <_printf_common+0x48>
 800ba42:	f104 0a19 	add.w	sl, r4, #25
 800ba46:	68e3      	ldr	r3, [r4, #12]
 800ba48:	6832      	ldr	r2, [r6, #0]
 800ba4a:	1a9b      	subs	r3, r3, r2
 800ba4c:	42ab      	cmp	r3, r5
 800ba4e:	dc2b      	bgt.n	800baa8 <_printf_common+0xa0>
 800ba50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba54:	6822      	ldr	r2, [r4, #0]
 800ba56:	3b00      	subs	r3, #0
 800ba58:	bf18      	it	ne
 800ba5a:	2301      	movne	r3, #1
 800ba5c:	0692      	lsls	r2, r2, #26
 800ba5e:	d430      	bmi.n	800bac2 <_printf_common+0xba>
 800ba60:	4641      	mov	r1, r8
 800ba62:	4638      	mov	r0, r7
 800ba64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba68:	47c8      	blx	r9
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	d023      	beq.n	800bab6 <_printf_common+0xae>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	6922      	ldr	r2, [r4, #16]
 800ba72:	f003 0306 	and.w	r3, r3, #6
 800ba76:	2b04      	cmp	r3, #4
 800ba78:	bf14      	ite	ne
 800ba7a:	2500      	movne	r5, #0
 800ba7c:	6833      	ldreq	r3, [r6, #0]
 800ba7e:	f04f 0600 	mov.w	r6, #0
 800ba82:	bf08      	it	eq
 800ba84:	68e5      	ldreq	r5, [r4, #12]
 800ba86:	f104 041a 	add.w	r4, r4, #26
 800ba8a:	bf08      	it	eq
 800ba8c:	1aed      	subeq	r5, r5, r3
 800ba8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ba92:	bf08      	it	eq
 800ba94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	bfc4      	itt	gt
 800ba9c:	1a9b      	subgt	r3, r3, r2
 800ba9e:	18ed      	addgt	r5, r5, r3
 800baa0:	42b5      	cmp	r5, r6
 800baa2:	d11a      	bne.n	800bada <_printf_common+0xd2>
 800baa4:	2000      	movs	r0, #0
 800baa6:	e008      	b.n	800baba <_printf_common+0xb2>
 800baa8:	2301      	movs	r3, #1
 800baaa:	4652      	mov	r2, sl
 800baac:	4641      	mov	r1, r8
 800baae:	4638      	mov	r0, r7
 800bab0:	47c8      	blx	r9
 800bab2:	3001      	adds	r0, #1
 800bab4:	d103      	bne.n	800babe <_printf_common+0xb6>
 800bab6:	f04f 30ff 	mov.w	r0, #4294967295
 800baba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babe:	3501      	adds	r5, #1
 800bac0:	e7c1      	b.n	800ba46 <_printf_common+0x3e>
 800bac2:	2030      	movs	r0, #48	@ 0x30
 800bac4:	18e1      	adds	r1, r4, r3
 800bac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bad0:	4422      	add	r2, r4
 800bad2:	3302      	adds	r3, #2
 800bad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bad8:	e7c2      	b.n	800ba60 <_printf_common+0x58>
 800bada:	2301      	movs	r3, #1
 800badc:	4622      	mov	r2, r4
 800bade:	4641      	mov	r1, r8
 800bae0:	4638      	mov	r0, r7
 800bae2:	47c8      	blx	r9
 800bae4:	3001      	adds	r0, #1
 800bae6:	d0e6      	beq.n	800bab6 <_printf_common+0xae>
 800bae8:	3601      	adds	r6, #1
 800baea:	e7d9      	b.n	800baa0 <_printf_common+0x98>

0800baec <_printf_i>:
 800baec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf0:	7e0f      	ldrb	r7, [r1, #24]
 800baf2:	4691      	mov	r9, r2
 800baf4:	2f78      	cmp	r7, #120	@ 0x78
 800baf6:	4680      	mov	r8, r0
 800baf8:	460c      	mov	r4, r1
 800bafa:	469a      	mov	sl, r3
 800bafc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bafe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb02:	d807      	bhi.n	800bb14 <_printf_i+0x28>
 800bb04:	2f62      	cmp	r7, #98	@ 0x62
 800bb06:	d80a      	bhi.n	800bb1e <_printf_i+0x32>
 800bb08:	2f00      	cmp	r7, #0
 800bb0a:	f000 80d3 	beq.w	800bcb4 <_printf_i+0x1c8>
 800bb0e:	2f58      	cmp	r7, #88	@ 0x58
 800bb10:	f000 80ba 	beq.w	800bc88 <_printf_i+0x19c>
 800bb14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb1c:	e03a      	b.n	800bb94 <_printf_i+0xa8>
 800bb1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb22:	2b15      	cmp	r3, #21
 800bb24:	d8f6      	bhi.n	800bb14 <_printf_i+0x28>
 800bb26:	a101      	add	r1, pc, #4	@ (adr r1, 800bb2c <_printf_i+0x40>)
 800bb28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb2c:	0800bb85 	.word	0x0800bb85
 800bb30:	0800bb99 	.word	0x0800bb99
 800bb34:	0800bb15 	.word	0x0800bb15
 800bb38:	0800bb15 	.word	0x0800bb15
 800bb3c:	0800bb15 	.word	0x0800bb15
 800bb40:	0800bb15 	.word	0x0800bb15
 800bb44:	0800bb99 	.word	0x0800bb99
 800bb48:	0800bb15 	.word	0x0800bb15
 800bb4c:	0800bb15 	.word	0x0800bb15
 800bb50:	0800bb15 	.word	0x0800bb15
 800bb54:	0800bb15 	.word	0x0800bb15
 800bb58:	0800bc9b 	.word	0x0800bc9b
 800bb5c:	0800bbc3 	.word	0x0800bbc3
 800bb60:	0800bc55 	.word	0x0800bc55
 800bb64:	0800bb15 	.word	0x0800bb15
 800bb68:	0800bb15 	.word	0x0800bb15
 800bb6c:	0800bcbd 	.word	0x0800bcbd
 800bb70:	0800bb15 	.word	0x0800bb15
 800bb74:	0800bbc3 	.word	0x0800bbc3
 800bb78:	0800bb15 	.word	0x0800bb15
 800bb7c:	0800bb15 	.word	0x0800bb15
 800bb80:	0800bc5d 	.word	0x0800bc5d
 800bb84:	6833      	ldr	r3, [r6, #0]
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6032      	str	r2, [r6, #0]
 800bb8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb94:	2301      	movs	r3, #1
 800bb96:	e09e      	b.n	800bcd6 <_printf_i+0x1ea>
 800bb98:	6833      	ldr	r3, [r6, #0]
 800bb9a:	6820      	ldr	r0, [r4, #0]
 800bb9c:	1d19      	adds	r1, r3, #4
 800bb9e:	6031      	str	r1, [r6, #0]
 800bba0:	0606      	lsls	r6, r0, #24
 800bba2:	d501      	bpl.n	800bba8 <_printf_i+0xbc>
 800bba4:	681d      	ldr	r5, [r3, #0]
 800bba6:	e003      	b.n	800bbb0 <_printf_i+0xc4>
 800bba8:	0645      	lsls	r5, r0, #25
 800bbaa:	d5fb      	bpl.n	800bba4 <_printf_i+0xb8>
 800bbac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	da03      	bge.n	800bbbc <_printf_i+0xd0>
 800bbb4:	232d      	movs	r3, #45	@ 0x2d
 800bbb6:	426d      	negs	r5, r5
 800bbb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbbc:	230a      	movs	r3, #10
 800bbbe:	4859      	ldr	r0, [pc, #356]	@ (800bd24 <_printf_i+0x238>)
 800bbc0:	e011      	b.n	800bbe6 <_printf_i+0xfa>
 800bbc2:	6821      	ldr	r1, [r4, #0]
 800bbc4:	6833      	ldr	r3, [r6, #0]
 800bbc6:	0608      	lsls	r0, r1, #24
 800bbc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbcc:	d402      	bmi.n	800bbd4 <_printf_i+0xe8>
 800bbce:	0649      	lsls	r1, r1, #25
 800bbd0:	bf48      	it	mi
 800bbd2:	b2ad      	uxthmi	r5, r5
 800bbd4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbd6:	6033      	str	r3, [r6, #0]
 800bbd8:	bf14      	ite	ne
 800bbda:	230a      	movne	r3, #10
 800bbdc:	2308      	moveq	r3, #8
 800bbde:	4851      	ldr	r0, [pc, #324]	@ (800bd24 <_printf_i+0x238>)
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbe6:	6866      	ldr	r6, [r4, #4]
 800bbe8:	2e00      	cmp	r6, #0
 800bbea:	bfa8      	it	ge
 800bbec:	6821      	ldrge	r1, [r4, #0]
 800bbee:	60a6      	str	r6, [r4, #8]
 800bbf0:	bfa4      	itt	ge
 800bbf2:	f021 0104 	bicge.w	r1, r1, #4
 800bbf6:	6021      	strge	r1, [r4, #0]
 800bbf8:	b90d      	cbnz	r5, 800bbfe <_printf_i+0x112>
 800bbfa:	2e00      	cmp	r6, #0
 800bbfc:	d04b      	beq.n	800bc96 <_printf_i+0x1aa>
 800bbfe:	4616      	mov	r6, r2
 800bc00:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc04:	fb03 5711 	mls	r7, r3, r1, r5
 800bc08:	5dc7      	ldrb	r7, [r0, r7]
 800bc0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc0e:	462f      	mov	r7, r5
 800bc10:	42bb      	cmp	r3, r7
 800bc12:	460d      	mov	r5, r1
 800bc14:	d9f4      	bls.n	800bc00 <_printf_i+0x114>
 800bc16:	2b08      	cmp	r3, #8
 800bc18:	d10b      	bne.n	800bc32 <_printf_i+0x146>
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	07df      	lsls	r7, r3, #31
 800bc1e:	d508      	bpl.n	800bc32 <_printf_i+0x146>
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	6861      	ldr	r1, [r4, #4]
 800bc24:	4299      	cmp	r1, r3
 800bc26:	bfde      	ittt	le
 800bc28:	2330      	movle	r3, #48	@ 0x30
 800bc2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc32:	1b92      	subs	r2, r2, r6
 800bc34:	6122      	str	r2, [r4, #16]
 800bc36:	464b      	mov	r3, r9
 800bc38:	4621      	mov	r1, r4
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	f8cd a000 	str.w	sl, [sp]
 800bc40:	aa03      	add	r2, sp, #12
 800bc42:	f7ff fee1 	bl	800ba08 <_printf_common>
 800bc46:	3001      	adds	r0, #1
 800bc48:	d14a      	bne.n	800bce0 <_printf_i+0x1f4>
 800bc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4e:	b004      	add	sp, #16
 800bc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc54:	6823      	ldr	r3, [r4, #0]
 800bc56:	f043 0320 	orr.w	r3, r3, #32
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	2778      	movs	r7, #120	@ 0x78
 800bc5e:	4832      	ldr	r0, [pc, #200]	@ (800bd28 <_printf_i+0x23c>)
 800bc60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	6831      	ldr	r1, [r6, #0]
 800bc68:	061f      	lsls	r7, r3, #24
 800bc6a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc6e:	d402      	bmi.n	800bc76 <_printf_i+0x18a>
 800bc70:	065f      	lsls	r7, r3, #25
 800bc72:	bf48      	it	mi
 800bc74:	b2ad      	uxthmi	r5, r5
 800bc76:	6031      	str	r1, [r6, #0]
 800bc78:	07d9      	lsls	r1, r3, #31
 800bc7a:	bf44      	itt	mi
 800bc7c:	f043 0320 	orrmi.w	r3, r3, #32
 800bc80:	6023      	strmi	r3, [r4, #0]
 800bc82:	b11d      	cbz	r5, 800bc8c <_printf_i+0x1a0>
 800bc84:	2310      	movs	r3, #16
 800bc86:	e7ab      	b.n	800bbe0 <_printf_i+0xf4>
 800bc88:	4826      	ldr	r0, [pc, #152]	@ (800bd24 <_printf_i+0x238>)
 800bc8a:	e7e9      	b.n	800bc60 <_printf_i+0x174>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	f023 0320 	bic.w	r3, r3, #32
 800bc92:	6023      	str	r3, [r4, #0]
 800bc94:	e7f6      	b.n	800bc84 <_printf_i+0x198>
 800bc96:	4616      	mov	r6, r2
 800bc98:	e7bd      	b.n	800bc16 <_printf_i+0x12a>
 800bc9a:	6833      	ldr	r3, [r6, #0]
 800bc9c:	6825      	ldr	r5, [r4, #0]
 800bc9e:	1d18      	adds	r0, r3, #4
 800bca0:	6961      	ldr	r1, [r4, #20]
 800bca2:	6030      	str	r0, [r6, #0]
 800bca4:	062e      	lsls	r6, r5, #24
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	d501      	bpl.n	800bcae <_printf_i+0x1c2>
 800bcaa:	6019      	str	r1, [r3, #0]
 800bcac:	e002      	b.n	800bcb4 <_printf_i+0x1c8>
 800bcae:	0668      	lsls	r0, r5, #25
 800bcb0:	d5fb      	bpl.n	800bcaa <_printf_i+0x1be>
 800bcb2:	8019      	strh	r1, [r3, #0]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4616      	mov	r6, r2
 800bcb8:	6123      	str	r3, [r4, #16]
 800bcba:	e7bc      	b.n	800bc36 <_printf_i+0x14a>
 800bcbc:	6833      	ldr	r3, [r6, #0]
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	1d1a      	adds	r2, r3, #4
 800bcc2:	6032      	str	r2, [r6, #0]
 800bcc4:	681e      	ldr	r6, [r3, #0]
 800bcc6:	6862      	ldr	r2, [r4, #4]
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f000 f859 	bl	800bd80 <memchr>
 800bcce:	b108      	cbz	r0, 800bcd4 <_printf_i+0x1e8>
 800bcd0:	1b80      	subs	r0, r0, r6
 800bcd2:	6060      	str	r0, [r4, #4]
 800bcd4:	6863      	ldr	r3, [r4, #4]
 800bcd6:	6123      	str	r3, [r4, #16]
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcde:	e7aa      	b.n	800bc36 <_printf_i+0x14a>
 800bce0:	4632      	mov	r2, r6
 800bce2:	4649      	mov	r1, r9
 800bce4:	4640      	mov	r0, r8
 800bce6:	6923      	ldr	r3, [r4, #16]
 800bce8:	47d0      	blx	sl
 800bcea:	3001      	adds	r0, #1
 800bcec:	d0ad      	beq.n	800bc4a <_printf_i+0x15e>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	079b      	lsls	r3, r3, #30
 800bcf2:	d413      	bmi.n	800bd1c <_printf_i+0x230>
 800bcf4:	68e0      	ldr	r0, [r4, #12]
 800bcf6:	9b03      	ldr	r3, [sp, #12]
 800bcf8:	4298      	cmp	r0, r3
 800bcfa:	bfb8      	it	lt
 800bcfc:	4618      	movlt	r0, r3
 800bcfe:	e7a6      	b.n	800bc4e <_printf_i+0x162>
 800bd00:	2301      	movs	r3, #1
 800bd02:	4632      	mov	r2, r6
 800bd04:	4649      	mov	r1, r9
 800bd06:	4640      	mov	r0, r8
 800bd08:	47d0      	blx	sl
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d09d      	beq.n	800bc4a <_printf_i+0x15e>
 800bd0e:	3501      	adds	r5, #1
 800bd10:	68e3      	ldr	r3, [r4, #12]
 800bd12:	9903      	ldr	r1, [sp, #12]
 800bd14:	1a5b      	subs	r3, r3, r1
 800bd16:	42ab      	cmp	r3, r5
 800bd18:	dcf2      	bgt.n	800bd00 <_printf_i+0x214>
 800bd1a:	e7eb      	b.n	800bcf4 <_printf_i+0x208>
 800bd1c:	2500      	movs	r5, #0
 800bd1e:	f104 0619 	add.w	r6, r4, #25
 800bd22:	e7f5      	b.n	800bd10 <_printf_i+0x224>
 800bd24:	0800beef 	.word	0x0800beef
 800bd28:	0800bf00 	.word	0x0800bf00

0800bd2c <memmove>:
 800bd2c:	4288      	cmp	r0, r1
 800bd2e:	b510      	push	{r4, lr}
 800bd30:	eb01 0402 	add.w	r4, r1, r2
 800bd34:	d902      	bls.n	800bd3c <memmove+0x10>
 800bd36:	4284      	cmp	r4, r0
 800bd38:	4623      	mov	r3, r4
 800bd3a:	d807      	bhi.n	800bd4c <memmove+0x20>
 800bd3c:	1e43      	subs	r3, r0, #1
 800bd3e:	42a1      	cmp	r1, r4
 800bd40:	d008      	beq.n	800bd54 <memmove+0x28>
 800bd42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd4a:	e7f8      	b.n	800bd3e <memmove+0x12>
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	4402      	add	r2, r0
 800bd50:	428a      	cmp	r2, r1
 800bd52:	d100      	bne.n	800bd56 <memmove+0x2a>
 800bd54:	bd10      	pop	{r4, pc}
 800bd56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd5e:	e7f7      	b.n	800bd50 <memmove+0x24>

0800bd60 <_sbrk_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	2300      	movs	r3, #0
 800bd64:	4d05      	ldr	r5, [pc, #20]	@ (800bd7c <_sbrk_r+0x1c>)
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7f5 ff24 	bl	8001bb8 <_sbrk>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_sbrk_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_sbrk_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	20001784 	.word	0x20001784

0800bd80 <memchr>:
 800bd80:	4603      	mov	r3, r0
 800bd82:	b510      	push	{r4, lr}
 800bd84:	b2c9      	uxtb	r1, r1
 800bd86:	4402      	add	r2, r0
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	d101      	bne.n	800bd92 <memchr+0x12>
 800bd8e:	2000      	movs	r0, #0
 800bd90:	e003      	b.n	800bd9a <memchr+0x1a>
 800bd92:	7804      	ldrb	r4, [r0, #0]
 800bd94:	3301      	adds	r3, #1
 800bd96:	428c      	cmp	r4, r1
 800bd98:	d1f6      	bne.n	800bd88 <memchr+0x8>
 800bd9a:	bd10      	pop	{r4, pc}

0800bd9c <_realloc_r>:
 800bd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda0:	4680      	mov	r8, r0
 800bda2:	4615      	mov	r5, r2
 800bda4:	460c      	mov	r4, r1
 800bda6:	b921      	cbnz	r1, 800bdb2 <_realloc_r+0x16>
 800bda8:	4611      	mov	r1, r2
 800bdaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdae:	f7ff bc47 	b.w	800b640 <_malloc_r>
 800bdb2:	b92a      	cbnz	r2, 800bdc0 <_realloc_r+0x24>
 800bdb4:	f7ff fbda 	bl	800b56c <_free_r>
 800bdb8:	2400      	movs	r4, #0
 800bdba:	4620      	mov	r0, r4
 800bdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc0:	f000 f81a 	bl	800bdf8 <_malloc_usable_size_r>
 800bdc4:	4285      	cmp	r5, r0
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	d802      	bhi.n	800bdd0 <_realloc_r+0x34>
 800bdca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bdce:	d8f4      	bhi.n	800bdba <_realloc_r+0x1e>
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	f7ff fc34 	bl	800b640 <_malloc_r>
 800bdd8:	4607      	mov	r7, r0
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d0ec      	beq.n	800bdb8 <_realloc_r+0x1c>
 800bdde:	42b5      	cmp	r5, r6
 800bde0:	462a      	mov	r2, r5
 800bde2:	4621      	mov	r1, r4
 800bde4:	bf28      	it	cs
 800bde6:	4632      	movcs	r2, r6
 800bde8:	f7ff fbb2 	bl	800b550 <memcpy>
 800bdec:	4621      	mov	r1, r4
 800bdee:	4640      	mov	r0, r8
 800bdf0:	f7ff fbbc 	bl	800b56c <_free_r>
 800bdf4:	463c      	mov	r4, r7
 800bdf6:	e7e0      	b.n	800bdba <_realloc_r+0x1e>

0800bdf8 <_malloc_usable_size_r>:
 800bdf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdfc:	1f18      	subs	r0, r3, #4
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bfbc      	itt	lt
 800be02:	580b      	ldrlt	r3, [r1, r0]
 800be04:	18c0      	addlt	r0, r0, r3
 800be06:	4770      	bx	lr

0800be08 <_init>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr

0800be14 <_fini>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	bf00      	nop
 800be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1a:	bc08      	pop	{r3}
 800be1c:	469e      	mov	lr, r3
 800be1e:	4770      	bx	lr
