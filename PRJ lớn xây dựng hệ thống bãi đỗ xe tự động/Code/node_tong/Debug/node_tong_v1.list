
node_tong_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e70  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003f7c  08003f7c  00004f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff4  08003ff4  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003ff4  08003ff4  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ff4  08003ff4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff4  08003ff4  00004ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ff8  08003ff8  00004ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ffc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000068  08004064  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004064  00005334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb87  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020dd  00000000  00000000  00013c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00015cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf5  00000000  00000000  00016c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018145  00000000  00000000  00017805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dcb  00000000  00000000  0002f94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd2f  00000000  00000000  00041715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004568  00000000  00000000  000ce488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d29f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f64 	.word	0x08003f64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003f64 	.word	0x08003f64

0800014c <lcd_send_cmd>:
    current_hi2c = hi2c;
}

// hàm truyền lệnh, rs=0 để truyền lệnh
void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(current_hi2c, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 800018c:	4b06      	ldr	r3, [pc, #24]	@ (80001a8 <lcd_send_cmd+0x5c>)
 800018e:	6818      	ldr	r0, [r3, #0]
 8000190:	f107 0208 	add.w	r2, r7, #8
 8000194:	2364      	movs	r3, #100	@ 0x64
 8000196:	9300      	str	r3, [sp, #0]
 8000198:	2304      	movs	r3, #4
 800019a:	214e      	movs	r1, #78	@ 0x4e
 800019c:	f001 f9e8 	bl	8001570 <HAL_I2C_Master_Transmit>
}
 80001a0:	bf00      	nop
 80001a2:	3710      	adds	r7, #16
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	20000000 	.word	0x20000000

080001ac <lcd_send_data>:

// hàm truyền dữ liệu, 1 byte, rs=1 để truyền dữ liệu
void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  // en=1, rs=1
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  // en=0, rs=1
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  // en=1, rs=1
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  // en=0, rs=1
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(current_hi2c, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 80001ec:	4b06      	ldr	r3, [pc, #24]	@ (8000208 <lcd_send_data+0x5c>)
 80001ee:	6818      	ldr	r0, [r3, #0]
 80001f0:	f107 0208 	add.w	r2, r7, #8
 80001f4:	2364      	movs	r3, #100	@ 0x64
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	2304      	movs	r3, #4
 80001fa:	214e      	movs	r1, #78	@ 0x4e
 80001fc:	f001 f9b8 	bl	8001570 <HAL_I2C_Master_Transmit>
}
 8000200:	bf00      	nop
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20000000 	.word	0x20000000

0800020c <lcd_clear>:

void lcd_clear (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 8000212:	2080      	movs	r0, #128	@ 0x80
 8000214:	f7ff ff9a 	bl	800014c <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8000218:	2300      	movs	r3, #0
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	e005      	b.n	800022a <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 800021e:	2020      	movs	r0, #32
 8000220:	f7ff ffc4 	bl	80001ac <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b45      	cmp	r3, #69	@ 0x45
 800022e:	ddf6      	ble.n	800021e <lcd_clear+0x12>
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b082      	sub	sp, #8
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
    switch (row)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d003      	beq.n	8000252 <lcd_put_cur+0x18>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d005      	beq.n	800025c <lcd_put_cur+0x22>
 8000250:	e009      	b.n	8000266 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000258:	603b      	str	r3, [r7, #0]
            break;
 800025a:	e004      	b.n	8000266 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000262:	603b      	str	r3, [r7, #0]
            break;
 8000264:	bf00      	nop
    }

    lcd_send_cmd(col);
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff6e 	bl	800014c <lcd_send_cmd>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <lcd_init>:

void lcd_init (void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// khởi tạo 4 bit
	HAL_Delay(50);  // đợi >40ms
 800027c:	2032      	movs	r0, #50	@ 0x32
 800027e:	f000 fccb 	bl	8000c18 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000282:	2030      	movs	r0, #48	@ 0x30
 8000284:	f7ff ff62 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // đợi >4.1ms
 8000288:	2005      	movs	r0, #5
 800028a:	f000 fcc5 	bl	8000c18 <HAL_Delay>
	lcd_send_cmd(0x30);
 800028e:	2030      	movs	r0, #48	@ 0x30
 8000290:	f7ff ff5c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // đợi >100us
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fcbf 	bl	8000c18 <HAL_Delay>
	lcd_send_cmd(0x30);
 800029a:	2030      	movs	r0, #48	@ 0x30
 800029c:	f7ff ff56 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80002a0:	200a      	movs	r0, #10
 80002a2:	f000 fcb9 	bl	8000c18 <HAL_Delay>
	lcd_send_cmd(0x20);  // chế độ 4 bit
 80002a6:	2020      	movs	r0, #32
 80002a8:	f7ff ff50 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80002ac:	200a      	movs	r0, #10
 80002ae:	f000 fcb3 	bl	8000c18 <HAL_Delay>

  // khởi tạo hiển thị
	lcd_send_cmd(0x28); // Cài đặt chức năng --> DL=0 (chế độ 4 bit), N=1 (hiển thị 2 dòng), F=0 (ký tự 5x8)
 80002b2:	2028      	movs	r0, #40	@ 0x28
 80002b4:	f7ff ff4a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 fcad 	bl	8000c18 <HAL_Delay>
	lcd_send_cmd(0x08); // Điều khiển bật/tắt hiển thị --> D=0, C=0, B=0 ---> tắt hiển thị
 80002be:	2008      	movs	r0, #8
 80002c0:	f7ff ff44 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 fca7 	bl	8000c18 <HAL_Delay>
	lcd_send_cmd(0x01);  // xóa màn hình
 80002ca:	2001      	movs	r0, #1
 80002cc:	f7ff ff3e 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 fca1 	bl	8000c18 <HAL_Delay>
	HAL_Delay(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f000 fc9e 	bl	8000c18 <HAL_Delay>
	lcd_send_cmd(0x06); // Cài đặt chế độ nhập --> I/D=1 (tăng con trỏ) & S=0 (không dịch chuyển)
 80002dc:	2006      	movs	r0, #6
 80002de:	f7ff ff35 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fc98 	bl	8000c18 <HAL_Delay>
	lcd_send_cmd(0x0C); // Điều khiển bật/tắt hiển thị --> D=1, C và B=0. (Con trỏ và nhấp nháy, hai bit cuối)
 80002e8:	200c      	movs	r0, #12
 80002ea:	f7ff ff2f 	bl	800014c <lcd_send_cmd>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b082      	sub	sp, #8
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 80002fa:	e006      	b.n	800030a <lcd_send_string+0x18>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	607a      	str	r2, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff51 	bl	80001ac <lcd_send_data>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d1f4      	bne.n	80002fc <lcd_send_string+0xa>
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <RS485_SendCommand>:
/* USER CODE BEGIN 0 */
// RS485

// Gửi lệnh tới Slave với địa chỉ ID
void RS485_SendCommand(uint8_t slaveID)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    txBuffer_1[0] = slaveID;  // �?ịa chỉ Slave
 8000326:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <RS485_SendCommand+0x2c>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	7013      	strb	r3, [r2, #0]
    txBuffer_1[1] = '\n';     // Ký tự kết thúc
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <RS485_SendCommand+0x2c>)
 800032e:	220a      	movs	r2, #10
 8000330:	705a      	strb	r2, [r3, #1]
    HAL_UART_Transmit(&huart1, txBuffer_1, 5, HAL_MAX_DELAY);
 8000332:	f04f 33ff 	mov.w	r3, #4294967295
 8000336:	2205      	movs	r2, #5
 8000338:	4903      	ldr	r1, [pc, #12]	@ (8000348 <RS485_SendCommand+0x2c>)
 800033a:	4804      	ldr	r0, [pc, #16]	@ (800034c <RS485_SendCommand+0x30>)
 800033c:	f002 fb48 	bl	80029d0 <HAL_UART_Transmit>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	200001b8 	.word	0x200001b8
 800034c:	20000120 	.word	0x20000120

08000350 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a23      	ldr	r2, [pc, #140]	@ (80003ec <HAL_UART_RxCpltCallback+0x9c>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d120      	bne.n	80003a4 <HAL_UART_RxCpltCallback+0x54>
    {
        if (rxBuffer_1[0] == 0x01 || rxBuffer_1[0] == 0x02)
 8000362:	4b23      	ldr	r3, [pc, #140]	@ (80003f0 <HAL_UART_RxCpltCallback+0xa0>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d003      	beq.n	8000372 <HAL_UART_RxCpltCallback+0x22>
 800036a:	4b21      	ldr	r3, [pc, #132]	@ (80003f0 <HAL_UART_RxCpltCallback+0xa0>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b02      	cmp	r3, #2
 8000370:	d112      	bne.n	8000398 <HAL_UART_RxCpltCallback+0x48>
        {
            int index = rxBuffer_1[0] - 1; // Mapping slave ID to array index
 8000372:	4b1f      	ldr	r3, [pc, #124]	@ (80003f0 <HAL_UART_RxCpltCallback+0xa0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	3b01      	subs	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
            if (rxBuffer_1[1] == 1)
 800037a:	4b1d      	ldr	r3, [pc, #116]	@ (80003f0 <HAL_UART_RxCpltCallback+0xa0>)
 800037c:	785b      	ldrb	r3, [r3, #1]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d105      	bne.n	800038e <HAL_UART_RxCpltCallback+0x3e>
                nodeisCar[index] = 1;
 8000382:	4a1c      	ldr	r2, [pc, #112]	@ (80003f4 <HAL_UART_RxCpltCallback+0xa4>)
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	4413      	add	r3, r2
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e004      	b.n	8000398 <HAL_UART_RxCpltCallback+0x48>
            else
                nodeisCar[index] = 0;
 800038e:	4a19      	ldr	r2, [pc, #100]	@ (80003f4 <HAL_UART_RxCpltCallback+0xa4>)
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	4413      	add	r3, r2
 8000394:	2200      	movs	r2, #0
 8000396:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, rxBuffer_1, 5); // Continue receiving
 8000398:	2205      	movs	r2, #5
 800039a:	4915      	ldr	r1, [pc, #84]	@ (80003f0 <HAL_UART_RxCpltCallback+0xa0>)
 800039c:	4816      	ldr	r0, [pc, #88]	@ (80003f8 <HAL_UART_RxCpltCallback+0xa8>)
 800039e:	f002 fba2 	bl	8002ae6 <HAL_UART_Receive_IT>

			HAL_UART_Transmit(&huart2, txBuffer_2, 5, HAL_MAX_DELAY);
    	}
        HAL_UART_Receive_IT(&huart2, rxBuffer_2, 5); // Continue receiving
    }
}
 80003a2:	e01e      	b.n	80003e2 <HAL_UART_RxCpltCallback+0x92>
    else if (huart->Instance == USART2)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a14      	ldr	r2, [pc, #80]	@ (80003fc <HAL_UART_RxCpltCallback+0xac>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d119      	bne.n	80003e2 <HAL_UART_RxCpltCallback+0x92>
    	if (rxBuffer_2[0] == myID)
 80003ae:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <HAL_UART_RxCpltCallback+0xb0>)
 80003b0:	781a      	ldrb	r2, [r3, #0]
 80003b2:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <HAL_UART_RxCpltCallback+0xb4>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d10e      	bne.n	80003d8 <HAL_UART_RxCpltCallback+0x88>
			txBuffer_2[0] = myID;
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_UART_RxCpltCallback+0xb4>)
 80003bc:	781a      	ldrb	r2, [r3, #0]
 80003be:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <HAL_UART_RxCpltCallback+0xb8>)
 80003c0:	701a      	strb	r2, [r3, #0]
			txBuffer_2[1] = numSpace_cur;
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_UART_RxCpltCallback+0xbc>)
 80003c4:	781a      	ldrb	r2, [r3, #0]
 80003c6:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <HAL_UART_RxCpltCallback+0xb8>)
 80003c8:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart2, txBuffer_2, 5, HAL_MAX_DELAY);
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	2205      	movs	r2, #5
 80003d0:	490d      	ldr	r1, [pc, #52]	@ (8000408 <HAL_UART_RxCpltCallback+0xb8>)
 80003d2:	480f      	ldr	r0, [pc, #60]	@ (8000410 <HAL_UART_RxCpltCallback+0xc0>)
 80003d4:	f002 fafc 	bl	80029d0 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart2, rxBuffer_2, 5); // Continue receiving
 80003d8:	2205      	movs	r2, #5
 80003da:	4909      	ldr	r1, [pc, #36]	@ (8000400 <HAL_UART_RxCpltCallback+0xb0>)
 80003dc:	480c      	ldr	r0, [pc, #48]	@ (8000410 <HAL_UART_RxCpltCallback+0xc0>)
 80003de:	f002 fb82 	bl	8002ae6 <HAL_UART_Receive_IT>
}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40013800 	.word	0x40013800
 80003f0:	200001b0 	.word	0x200001b0
 80003f4:	200001d0 	.word	0x200001d0
 80003f8:	20000120 	.word	0x20000120
 80003fc:	40004400 	.word	0x40004400
 8000400:	200001c0 	.word	0x200001c0
 8000404:	20000009 	.word	0x20000009
 8000408:	200001c8 	.word	0x200001c8
 800040c:	20000006 	.word	0x20000006
 8000410:	20000168 	.word	0x20000168

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041a:	f000 fb9b 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041e:	f000 f889 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000422:	f000 f99f 	bl	8000764 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000426:	f000 f949 	bl	80006bc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800042a:	f000 f8c9 	bl	80005c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800042e:	f000 f8f5 	bl	800061c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000432:	f000 f96d 	bl	8000710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000436:	f7ff ff1f 	bl	8000278 <lcd_init>
  lcd_clear();
 800043a:	f7ff fee7 	bl	800020c <lcd_clear>
  lcd_put_cur(0,0);
 800043e:	2100      	movs	r1, #0
 8000440:	2000      	movs	r0, #0
 8000442:	f7ff fefa 	bl	800023a <lcd_put_cur>
  lcd_send_string("So cho trong:");
 8000446:	482e      	ldr	r0, [pc, #184]	@ (8000500 <main+0xec>)
 8000448:	f7ff ff53 	bl	80002f2 <lcd_send_string>
  lcd_put_cur(1,0);
 800044c:	2100      	movs	r1, #0
 800044e:	2001      	movs	r0, #1
 8000450:	f7ff fef3 	bl	800023a <lcd_put_cur>
  lcd_send_string("30");
 8000454:	482b      	ldr	r0, [pc, #172]	@ (8000504 <main+0xf0>)
 8000456:	f7ff ff4c 	bl	80002f2 <lcd_send_string>
  HAL_UART_Receive_IT(&huart1, rxBuffer_1,5);
 800045a:	2205      	movs	r2, #5
 800045c:	492a      	ldr	r1, [pc, #168]	@ (8000508 <main+0xf4>)
 800045e:	482b      	ldr	r0, [pc, #172]	@ (800050c <main+0xf8>)
 8000460:	f002 fb41 	bl	8002ae6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rxBuffer_2,5);
 8000464:	2205      	movs	r2, #5
 8000466:	492a      	ldr	r1, [pc, #168]	@ (8000510 <main+0xfc>)
 8000468:	482a      	ldr	r0, [pc, #168]	@ (8000514 <main+0x100>)
 800046a:	f002 fb3c 	bl	8002ae6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i=0; i<NumNode; i++)
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e00d      	b.n	8000490 <main+0x7c>
		  {
			  RS485_SendCommand(node_id[i]);
 8000474:	4a28      	ldr	r2, [pc, #160]	@ (8000518 <main+0x104>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	4413      	add	r3, r2
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff4d 	bl	800031c <RS485_SendCommand>
			  HAL_Delay(3000);
 8000482:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000486:	f000 fbc7 	bl	8000c18 <HAL_Delay>
	  for(int i=0; i<NumNode; i++)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3301      	adds	r3, #1
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2b01      	cmp	r3, #1
 8000494:	ddee      	ble.n	8000474 <main+0x60>
		  }
		  int numCars = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
		  for(int i = 0; i < NumNode; i++)
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	e00a      	b.n	80004b6 <main+0xa2>
		  {
			  numCars += nodeisCar[i]; // Tổng số xe ở các node
 80004a0:	4a1e      	ldr	r2, [pc, #120]	@ (800051c <main+0x108>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	4413      	add	r3, r2
 80004ae:	60bb      	str	r3, [r7, #8]
		  for(int i = 0; i < NumNode; i++)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3301      	adds	r3, #1
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	ddf1      	ble.n	80004a0 <main+0x8c>
		  }
		  numSpace_cur = numSpace_MAX - numCars; // Cập nhật số chỗ trống
 80004bc:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <main+0x10c>)
 80004be:	781a      	ldrb	r2, [r3, #0]
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b16      	ldr	r3, [pc, #88]	@ (8000524 <main+0x110>)
 80004ca:	701a      	strb	r2, [r3, #0]
		  if (numSpace_cur != numSpace_pre)
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <main+0x110>)
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <main+0x114>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d0ca      	beq.n	800046e <main+0x5a>
		  {
			  lcd_put_cur(1,0);
 80004d8:	2100      	movs	r1, #0
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff fead 	bl	800023a <lcd_put_cur>
			  sprintf(buffer,"%d",(int)numSpace_cur);
 80004e0:	4b10      	ldr	r3, [pc, #64]	@ (8000524 <main+0x110>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4911      	ldr	r1, [pc, #68]	@ (800052c <main+0x118>)
 80004e8:	4811      	ldr	r0, [pc, #68]	@ (8000530 <main+0x11c>)
 80004ea:	f003 f88b 	bl	8003604 <siprintf>
			  lcd_send_string(buffer);
 80004ee:	4810      	ldr	r0, [pc, #64]	@ (8000530 <main+0x11c>)
 80004f0:	f7ff feff 	bl	80002f2 <lcd_send_string>
			  numSpace_pre = numSpace_cur;
 80004f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <main+0x110>)
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000528 <main+0x114>)
 80004fa:	701a      	strb	r2, [r3, #0]
  {
 80004fc:	e7b7      	b.n	800046e <main+0x5a>
 80004fe:	bf00      	nop
 8000500:	08003f7c 	.word	0x08003f7c
 8000504:	08003f8c 	.word	0x08003f8c
 8000508:	200001b0 	.word	0x200001b0
 800050c:	20000120 	.word	0x20000120
 8000510:	200001c0 	.word	0x200001c0
 8000514:	20000168 	.word	0x20000168
 8000518:	20000004 	.word	0x20000004
 800051c:	200001d0 	.word	0x200001d0
 8000520:	20000007 	.word	0x20000007
 8000524:	20000006 	.word	0x20000006
 8000528:	20000008 	.word	0x20000008
 800052c:	08003f90 	.word	0x08003f90
 8000530:	200001d4 	.word	0x200001d4

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b090      	sub	sp, #64	@ 0x40
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	2228      	movs	r2, #40	@ 0x28
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f87e 	bl	8003644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000556:	2301      	movs	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000572:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0318 	add.w	r3, r7, #24
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fb4f 	bl	8001c20 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000588:	f000 f91a 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2102      	movs	r1, #2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fdbc 	bl	8002124 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005b2:	f000 f905 	bl	80007c0 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3740      	adds	r7, #64	@ 0x40
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <MX_I2C1_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <MX_I2C1_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <MX_I2C1_Init+0x50>)
 80005fe:	f000 fe73 	bl	80012e8 <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f8da 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000084 	.word	0x20000084
 8000614:	40005400 	.word	0x40005400
 8000618:	000186a0 	.word	0x000186a0

0800061c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <MX_TIM1_Init+0x98>)
 800063a:	4a1f      	ldr	r2, [pc, #124]	@ (80006b8 <MX_TIM1_Init+0x9c>)
 800063c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_TIM1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_TIM1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_TIM1_Init+0x98>)
 800064c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000650:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <MX_TIM1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000658:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <MX_TIM1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_TIM1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000664:	4813      	ldr	r0, [pc, #76]	@ (80006b4 <MX_TIM1_Init+0x98>)
 8000666:	f001 feeb 	bl	8002440 <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000670:	f000 f8a6 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	4619      	mov	r1, r3
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <MX_TIM1_Init+0x98>)
 8000682:	f001 ff2c 	bl	80024de <HAL_TIM_ConfigClockSource>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800068c:	f000 f898 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_TIM1_Init+0x98>)
 800069e:	f002 f8e9 	bl	8002874 <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006a8:	f000 f88a 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000d8 	.word	0x200000d8
 80006b8:	40012c00 	.word	0x40012c00

080006bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_USART1_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART1_UART_Init+0x4c>)
 80006f4:	f002 f91c 	bl	8002930 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f85f 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000120 	.word	0x20000120
 800070c:	40013800 	.word	0x40013800

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f002 f8f2 	bl	8002930 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f835 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000168 	.word	0x20000168
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_GPIO_Init+0x58>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a13      	ldr	r2, [pc, #76]	@ (80007bc <MX_GPIO_Init+0x58>)
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_GPIO_Init+0x58>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0320 	and.w	r3, r3, #32
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_GPIO_Init+0x58>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <MX_GPIO_Init+0x58>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_GPIO_Init+0x58>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_GPIO_Init+0x58>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <MX_GPIO_Init+0x58>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <MX_GPIO_Init+0x58>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a14      	ldr	r2, [pc, #80]	@ (8000828 <HAL_MspInit+0x5c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000828 <HAL_MspInit+0x5c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000802:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <HAL_MspInit+0x60>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4a04      	ldr	r2, [pc, #16]	@ (800082c <HAL_MspInit+0x60>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000

08000830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <HAL_I2C_MspInit+0x70>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d123      	bne.n	8000898 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000868:	23c0      	movs	r3, #192	@ 0xc0
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086c:	2312      	movs	r3, #18
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <HAL_I2C_MspInit+0x78>)
 800087c:	f000 fbb0 	bl	8000fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 8000886:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800088a:	61d3      	str	r3, [r2, #28]
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010c00 	.word	0x40010c00

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a09      	ldr	r2, [pc, #36]	@ (80008e0 <HAL_TIM_Base_MspInit+0x34>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d10b      	bne.n	80008d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40012c00 	.word	0x40012c00
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a3f      	ldr	r2, [pc, #252]	@ (8000a00 <HAL_UART_MspInit+0x118>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d13a      	bne.n	800097e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000908:	4b3e      	ldr	r3, [pc, #248]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b3b      	ldr	r3, [pc, #236]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b38      	ldr	r3, [pc, #224]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a37      	ldr	r2, [pc, #220]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0318 	add.w	r3, r7, #24
 800094a:	4619      	mov	r1, r3
 800094c:	482e      	ldr	r0, [pc, #184]	@ (8000a08 <HAL_UART_MspInit+0x120>)
 800094e:	f000 fb47 	bl	8000fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4619      	mov	r1, r3
 8000966:	4828      	ldr	r0, [pc, #160]	@ (8000a08 <HAL_UART_MspInit+0x120>)
 8000968:	f000 fb3a 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2025      	movs	r0, #37	@ 0x25
 8000972:	f000 fa4c 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000976:	2025      	movs	r0, #37	@ 0x25
 8000978:	f000 fa65 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097c:	e03c      	b.n	80009f8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a22      	ldr	r2, [pc, #136]	@ (8000a0c <HAL_UART_MspInit+0x124>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d137      	bne.n	80009f8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 800098e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000992:	61d3      	str	r3, [r2, #28]
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_UART_MspInit+0x11c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b8:	2304      	movs	r3, #4
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <HAL_UART_MspInit+0x120>)
 80009cc:	f000 fb08 	bl	8000fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d0:	2308      	movs	r3, #8
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	4619      	mov	r1, r3
 80009e2:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <HAL_UART_MspInit+0x120>)
 80009e4:	f000 fafc 	bl	8000fe0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2026      	movs	r0, #38	@ 0x26
 80009ee:	f000 fa0e 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f2:	2026      	movs	r0, #38	@ 0x26
 80009f4:	f000 fa27 	bl	8000e46 <HAL_NVIC_EnableIRQ>
}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	@ 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40013800 	.word	0x40013800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	40004400 	.word	0x40004400

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 f8be 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <USART1_IRQHandler+0x10>)
 8000a6e:	f002 f85f 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000120 	.word	0x20000120

08000a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <USART2_IRQHandler+0x10>)
 8000a82:	f002 f855 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000168 	.word	0x20000168

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f002 fdc8 	bl	8003654 <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20005000 	.word	0x20005000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	200001e4 	.word	0x200001e4
 8000af8:	20000338 	.word	0x20000338

08000afc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff fff8 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b0e:	490c      	ldr	r1, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b24:	4c09      	ldr	r4, [pc, #36]	@ (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f002 fd95 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fc6d 	bl	8000414 <main>
  bx lr
 8000b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b44:	08003ffc 	.word	0x08003ffc
  ldr r2, =_sbss
 8000b48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b4c:	20000334 	.word	0x20000334

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f947 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe2c 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f95f 	bl	8000e62 <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f927 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000014 	.word	0x20000014
 8000bdc:	20000010 	.word	0x20000010

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000014 	.word	0x20000014
 8000c00:	200001e8 	.word	0x200001e8

08000c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	@ (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	200001e8 	.word	0x200001e8

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000014 	.word	0x20000014

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4906      	ldr	r1, [pc, #24]	@ (8000cf8 <__NVIC_EnableIRQ+0x34>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	@ (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	@ (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	@ 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff90 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff2d 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff42 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff35 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d008      	beq.n	8000ea4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2204      	movs	r2, #4
 8000e96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e020      	b.n	8000ee6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 020e 	bic.w	r2, r2, #14
 8000eb2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d005      	beq.n	8000f14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e051      	b.n	8000fb8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 020e 	bic.w	r2, r2, #14
 8000f22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a22      	ldr	r2, [pc, #136]	@ (8000fc4 <HAL_DMA_Abort_IT+0xd4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d029      	beq.n	8000f92 <HAL_DMA_Abort_IT+0xa2>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a21      	ldr	r2, [pc, #132]	@ (8000fc8 <HAL_DMA_Abort_IT+0xd8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d022      	beq.n	8000f8e <HAL_DMA_Abort_IT+0x9e>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <HAL_DMA_Abort_IT+0xdc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01a      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x98>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <HAL_DMA_Abort_IT+0xe0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d012      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x92>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <HAL_DMA_Abort_IT+0xe4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00a      	beq.n	8000f7c <HAL_DMA_Abort_IT+0x8c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd8 <HAL_DMA_Abort_IT+0xe8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d102      	bne.n	8000f76 <HAL_DMA_Abort_IT+0x86>
 8000f70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f74:	e00e      	b.n	8000f94 <HAL_DMA_Abort_IT+0xa4>
 8000f76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f7a:	e00b      	b.n	8000f94 <HAL_DMA_Abort_IT+0xa4>
 8000f7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f80:	e008      	b.n	8000f94 <HAL_DMA_Abort_IT+0xa4>
 8000f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f86:	e005      	b.n	8000f94 <HAL_DMA_Abort_IT+0xa4>
 8000f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f8c:	e002      	b.n	8000f94 <HAL_DMA_Abort_IT+0xa4>
 8000f8e:	2310      	movs	r3, #16
 8000f90:	e000      	b.n	8000f94 <HAL_DMA_Abort_IT+0xa4>
 8000f92:	2301      	movs	r3, #1
 8000f94:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <HAL_DMA_Abort_IT+0xec>)
 8000f96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	4798      	blx	r3
    } 
  }
  return status;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40020008 	.word	0x40020008
 8000fc8:	4002001c 	.word	0x4002001c
 8000fcc:	40020030 	.word	0x40020030
 8000fd0:	40020044 	.word	0x40020044
 8000fd4:	40020058 	.word	0x40020058
 8000fd8:	4002006c 	.word	0x4002006c
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b08b      	sub	sp, #44	@ 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e169      	b.n	80012c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8158 	bne.w	80012c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a9a      	ldr	r2, [pc, #616]	@ (8001280 <HAL_GPIO_Init+0x2a0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d05e      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 800101c:	4a98      	ldr	r2, [pc, #608]	@ (8001280 <HAL_GPIO_Init+0x2a0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d875      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001022:	4a98      	ldr	r2, [pc, #608]	@ (8001284 <HAL_GPIO_Init+0x2a4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d058      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001028:	4a96      	ldr	r2, [pc, #600]	@ (8001284 <HAL_GPIO_Init+0x2a4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d86f      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800102e:	4a96      	ldr	r2, [pc, #600]	@ (8001288 <HAL_GPIO_Init+0x2a8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d052      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001034:	4a94      	ldr	r2, [pc, #592]	@ (8001288 <HAL_GPIO_Init+0x2a8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d869      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800103a:	4a94      	ldr	r2, [pc, #592]	@ (800128c <HAL_GPIO_Init+0x2ac>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d04c      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001040:	4a92      	ldr	r2, [pc, #584]	@ (800128c <HAL_GPIO_Init+0x2ac>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d863      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001046:	4a92      	ldr	r2, [pc, #584]	@ (8001290 <HAL_GPIO_Init+0x2b0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d046      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 800104c:	4a90      	ldr	r2, [pc, #576]	@ (8001290 <HAL_GPIO_Init+0x2b0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d85d      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001052:	2b12      	cmp	r3, #18
 8001054:	d82a      	bhi.n	80010ac <HAL_GPIO_Init+0xcc>
 8001056:	2b12      	cmp	r3, #18
 8001058:	d859      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800105a:	a201      	add	r2, pc, #4	@ (adr r2, 8001060 <HAL_GPIO_Init+0x80>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	080010db 	.word	0x080010db
 8001064:	080010b5 	.word	0x080010b5
 8001068:	080010c7 	.word	0x080010c7
 800106c:	08001109 	.word	0x08001109
 8001070:	0800110f 	.word	0x0800110f
 8001074:	0800110f 	.word	0x0800110f
 8001078:	0800110f 	.word	0x0800110f
 800107c:	0800110f 	.word	0x0800110f
 8001080:	0800110f 	.word	0x0800110f
 8001084:	0800110f 	.word	0x0800110f
 8001088:	0800110f 	.word	0x0800110f
 800108c:	0800110f 	.word	0x0800110f
 8001090:	0800110f 	.word	0x0800110f
 8001094:	0800110f 	.word	0x0800110f
 8001098:	0800110f 	.word	0x0800110f
 800109c:	0800110f 	.word	0x0800110f
 80010a0:	0800110f 	.word	0x0800110f
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	4a79      	ldr	r2, [pc, #484]	@ (8001294 <HAL_GPIO_Init+0x2b4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010b2:	e02c      	b.n	800110e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	623b      	str	r3, [r7, #32]
          break;
 80010ba:	e029      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	3304      	adds	r3, #4
 80010c2:	623b      	str	r3, [r7, #32]
          break;
 80010c4:	e024      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	3308      	adds	r3, #8
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e01f      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	330c      	adds	r3, #12
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e01a      	b.n	8001110 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010e2:	2304      	movs	r3, #4
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e013      	b.n	8001110 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d105      	bne.n	80010fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f0:	2308      	movs	r3, #8
 80010f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	611a      	str	r2, [r3, #16]
          break;
 80010fa:	e009      	b.n	8001110 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010fc:	2308      	movs	r3, #8
 80010fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	615a      	str	r2, [r3, #20]
          break;
 8001106:	e003      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
          break;
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x130>
          break;
 800110e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2bff      	cmp	r3, #255	@ 0xff
 8001114:	d801      	bhi.n	800111a <HAL_GPIO_Init+0x13a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e001      	b.n	800111e <HAL_GPIO_Init+0x13e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3304      	adds	r3, #4
 800111e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	@ 0xff
 8001124:	d802      	bhi.n	800112c <HAL_GPIO_Init+0x14c>
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	e002      	b.n	8001132 <HAL_GPIO_Init+0x152>
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	3b08      	subs	r3, #8
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	210f      	movs	r1, #15
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	6a39      	ldr	r1, [r7, #32]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	431a      	orrs	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80b1 	beq.w	80012c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001160:	4b4d      	ldr	r3, [pc, #308]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a4c      	ldr	r2, [pc, #304]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b4a      	ldr	r3, [pc, #296]	@ (8001298 <HAL_GPIO_Init+0x2b8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001178:	4a48      	ldr	r2, [pc, #288]	@ (800129c <HAL_GPIO_Init+0x2bc>)
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a40      	ldr	r2, [pc, #256]	@ (80012a0 <HAL_GPIO_Init+0x2c0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a3f      	ldr	r2, [pc, #252]	@ (80012a4 <HAL_GPIO_Init+0x2c4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1e8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3e      	ldr	r2, [pc, #248]	@ (80012a8 <HAL_GPIO_Init+0x2c8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3d      	ldr	r2, [pc, #244]	@ (80012ac <HAL_GPIO_Init+0x2cc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1e0>
 80011bc:	2303      	movs	r3, #3
 80011be:	e006      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e004      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011cc:	2300      	movs	r3, #0
 80011ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d0:	f002 0203 	and.w	r2, r2, #3
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011de:	492f      	ldr	r1, [pc, #188]	@ (800129c <HAL_GPIO_Init+0x2bc>)
 80011e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	492c      	ldr	r1, [pc, #176]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001206:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	4928      	ldr	r1, [pc, #160]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	4922      	ldr	r1, [pc, #136]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122e:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	491e      	ldr	r1, [pc, #120]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4918      	ldr	r1, [pc, #96]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	4914      	ldr	r1, [pc, #80]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d021      	beq.n	80012b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	490e      	ldr	r1, [pc, #56]	@ (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e021      	b.n	80012c2 <HAL_GPIO_Init+0x2e2>
 800127e:	bf00      	nop
 8001280:	10320000 	.word	0x10320000
 8001284:	10310000 	.word	0x10310000
 8001288:	10220000 	.word	0x10220000
 800128c:	10210000 	.word	0x10210000
 8001290:	10120000 	.word	0x10120000
 8001294:	10110000 	.word	0x10110000
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	40010800 	.word	0x40010800
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40011400 	.word	0x40011400
 80012b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_GPIO_Init+0x304>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	4909      	ldr	r1, [pc, #36]	@ (80012e4 <HAL_GPIO_Init+0x304>)
 80012be:	4013      	ands	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	3301      	adds	r3, #1
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f ae8e 	bne.w	8000ff4 <HAL_GPIO_Init+0x14>
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	372c      	adds	r7, #44	@ 0x2c
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e12b      	b.n	8001552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fa8e 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	@ 0x24
 8001318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800133a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800134a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800134c:	f001 f832 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 8001350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a81      	ldr	r2, [pc, #516]	@ (800155c <HAL_I2C_Init+0x274>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d807      	bhi.n	800136c <HAL_I2C_Init+0x84>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4a80      	ldr	r2, [pc, #512]	@ (8001560 <HAL_I2C_Init+0x278>)
 8001360:	4293      	cmp	r3, r2
 8001362:	bf94      	ite	ls
 8001364:	2301      	movls	r3, #1
 8001366:	2300      	movhi	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e006      	b.n	800137a <HAL_I2C_Init+0x92>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a7d      	ldr	r2, [pc, #500]	@ (8001564 <HAL_I2C_Init+0x27c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0e7      	b.n	8001552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a78      	ldr	r2, [pc, #480]	@ (8001568 <HAL_I2C_Init+0x280>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a6a      	ldr	r2, [pc, #424]	@ (800155c <HAL_I2C_Init+0x274>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d802      	bhi.n	80013bc <HAL_I2C_Init+0xd4>
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	e009      	b.n	80013d0 <HAL_I2C_Init+0xe8>
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a69      	ldr	r2, [pc, #420]	@ (800156c <HAL_I2C_Init+0x284>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	3301      	adds	r3, #1
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	495c      	ldr	r1, [pc, #368]	@ (800155c <HAL_I2C_Init+0x274>)
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d819      	bhi.n	8001424 <HAL_I2C_Init+0x13c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e59      	subs	r1, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fe:	1c59      	adds	r1, r3, #1
 8001400:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001404:	400b      	ands	r3, r1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <HAL_I2C_Init+0x138>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e59      	subs	r1, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fbb1 f3f3 	udiv	r3, r1, r3
 8001418:	3301      	adds	r3, #1
 800141a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141e:	e051      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001420:	2304      	movs	r3, #4
 8001422:	e04f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_I2C_Init+0x168>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e012      	b.n	8001476 <HAL_I2C_Init+0x18e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e58      	subs	r0, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	0099      	lsls	r1, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	fbb0 f3f3 	udiv	r3, r0, r3
 8001466:	3301      	adds	r3, #1
 8001468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x196>
 800147a:	2301      	movs	r3, #1
 800147c:	e022      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10e      	bne.n	80014a4 <HAL_I2C_Init+0x1bc>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e58      	subs	r0, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	fbb0 f3f3 	udiv	r3, r0, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014a2:	e00f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	0099      	lsls	r1, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6809      	ldr	r1, [r1, #0]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6911      	ldr	r1, [r2, #16]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68d2      	ldr	r2, [r2, #12]
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	000186a0 	.word	0x000186a0
 8001560:	001e847f 	.word	0x001e847f
 8001564:	003d08ff 	.word	0x003d08ff
 8001568:	431bde83 	.word	0x431bde83
 800156c:	10624dd3 	.word	0x10624dd3

08001570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	817b      	strh	r3, [r7, #10]
 8001580:	4613      	mov	r3, r2
 8001582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fb3e 	bl	8000c04 <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	f040 80e0 	bne.w	8001758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2319      	movs	r3, #25
 800159e:	2201      	movs	r2, #1
 80015a0:	4970      	ldr	r1, [pc, #448]	@ (8001764 <HAL_I2C_Master_Transmit+0x1f4>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f964 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	e0d3      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_I2C_Master_Transmit+0x50>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d007      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2221      	movs	r2, #33	@ 0x21
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a50      	ldr	r2, [pc, #320]	@ (8001768 <HAL_I2C_Master_Transmit+0x1f8>)
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001628:	8979      	ldrh	r1, [r7, #10]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f89c 	bl	800176c <I2C_MasterRequestWrite>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e08d      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001654:	e066      	b.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fa22 	bl	8001aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fa19 	bl	8001b34 <I2C_WaitOnBTFFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00d      	beq.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	2b04      	cmp	r3, #4
 800170e:	d107      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800171e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e01a      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d194      	bne.n	8001656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d006      	beq.n	8001796 <I2C_MasterRequestWrite+0x2a>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d003      	beq.n	8001796 <I2C_MasterRequestWrite+0x2a>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001794:	d108      	bne.n	80017a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00b      	b.n	80017c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d107      	bne.n	80017c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f84f 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017e6:	d103      	bne.n	80017f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e035      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017fc:	d108      	bne.n	8001810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017fe:	897b      	ldrh	r3, [r7, #10]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	e01b      	b.n	8001848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001810:	897b      	ldrh	r3, [r7, #10]
 8001812:	11db      	asrs	r3, r3, #7
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 0306 	and.w	r3, r3, #6
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f063 030f 	orn	r3, r3, #15
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	490e      	ldr	r1, [pc, #56]	@ (8001868 <I2C_MasterRequestWrite+0xfc>)
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f898 	bl	8001964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e010      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4907      	ldr	r1, [pc, #28]	@ (800186c <I2C_MasterRequestWrite+0x100>)
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f888 	bl	8001964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	00010008 	.word	0x00010008
 800186c:	00010002 	.word	0x00010002

08001870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001880:	e048      	b.n	8001914 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d044      	beq.n	8001914 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188a:	f7ff f9bb 	bl	8000c04 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d302      	bcc.n	80018a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d139      	bne.n	8001914 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0c1b      	lsrs	r3, r3, #16
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10d      	bne.n	80018c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	43da      	mvns	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4013      	ands	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	e00c      	b.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	43da      	mvns	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	4013      	ands	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d116      	bne.n	8001914 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	f043 0220 	orr.w	r2, r3, #32
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e023      	b.n	800195c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d10d      	bne.n	800193a <I2C_WaitOnFlagUntilTimeout+0xca>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	43da      	mvns	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4013      	ands	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	e00c      	b.n	8001954 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	43da      	mvns	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4013      	ands	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	429a      	cmp	r2, r3
 8001958:	d093      	beq.n	8001882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001972:	e071      	b.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001982:	d123      	bne.n	80019cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001992:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800199c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f043 0204 	orr.w	r2, r3, #4
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e067      	b.n	8001a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d2:	d041      	beq.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d4:	f7ff f916 	bl	8000c04 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d302      	bcc.n	80019ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d136      	bne.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d10c      	bne.n	8001a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4013      	ands	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	e00b      	b.n	8001a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	43da      	mvns	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e021      	b.n	8001a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10c      	bne.n	8001a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e00b      	b.n	8001a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4013      	ands	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f47f af6d 	bne.w	8001974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ab0:	e034      	b.n	8001b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f886 	bl	8001bc4 <I2C_IsAcknowledgeFailed>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e034      	b.n	8001b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d028      	beq.n	8001b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aca:	f7ff f89b 	bl	8000c04 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11d      	bne.n	8001b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aea:	2b80      	cmp	r3, #128	@ 0x80
 8001aec:	d016      	beq.n	8001b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f043 0220 	orr.w	r2, r3, #32
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e007      	b.n	8001b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b26:	2b80      	cmp	r3, #128	@ 0x80
 8001b28:	d1c3      	bne.n	8001ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b40:	e034      	b.n	8001bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f83e 	bl	8001bc4 <I2C_IsAcknowledgeFailed>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e034      	b.n	8001bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d028      	beq.n	8001bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff f853 	bl	8000c04 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11d      	bne.n	8001bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d016      	beq.n	8001bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f043 0220 	orr.w	r2, r3, #32
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e007      	b.n	8001bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d1c3      	bne.n	8001b42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bda:	d11b      	bne.n	8001c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f043 0204 	orr.w	r2, r3, #4
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e272      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	4b92      	ldr	r3, [pc, #584]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d00c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d112      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
 8001c58:	4b8c      	ldr	r3, [pc, #560]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c64:	d10b      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4b89      	ldr	r3, [pc, #548]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d06c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x12c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d168      	bne.n	8001d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e24c      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76>
 8001c88:	4b80      	ldr	r3, [pc, #512]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e02e      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x98>
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7a      	ldr	r2, [pc, #488]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b78      	ldr	r3, [pc, #480]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a77      	ldr	r2, [pc, #476]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0xbc>
 8001cc2:	4b72      	ldr	r3, [pc, #456]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a71      	ldr	r2, [pc, #452]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6f      	ldr	r3, [pc, #444]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b68      	ldr	r3, [pc, #416]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a67      	ldr	r2, [pc, #412]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe ff82 	bl	8000c04 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7fe ff7e 	bl	8000c04 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	@ 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e200      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b5d      	ldr	r3, [pc, #372]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe4>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7fe ff6e 	bl	8000c04 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7fe ff6a 	bl	8000c04 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1ec      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	4b53      	ldr	r3, [pc, #332]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x10c>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d66:	4b49      	ldr	r3, [pc, #292]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
 8001d72:	4b46      	ldr	r3, [pc, #280]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b43      	ldr	r3, [pc, #268]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1c0      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4939      	ldr	r1, [pc, #228]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7fe ff23 	bl	8000c04 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7fe ff1f 	bl	8000c04 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1a1      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4927      	ldr	r1, [pc, #156]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7fe ff02 	bl	8000c04 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7fe fefe 	bl	8000c04 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e180      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03a      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7fe fee2 	bl	8000c04 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7fe fede 	bl	8000c04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e160      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 face 	bl	8002404 <RCC_Delay>
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7fe fec8 	bl	8000c04 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7fe fec4 	bl	8000c04 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d908      	bls.n	8001e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e146      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	42420000 	.word	0x42420000
 8001e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	4b92      	ldr	r3, [pc, #584]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e9      	bne.n	8001e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a6 	beq.w	8001ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b88      	ldr	r3, [pc, #544]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a87      	ldr	r2, [pc, #540]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b85      	ldr	r3, [pc, #532]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b82      	ldr	r3, [pc, #520]	@ (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b7f      	ldr	r3, [pc, #508]	@ (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7e      	ldr	r2, [pc, #504]	@ (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fe85 	bl	8000c04 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7fe fe81 	bl	8000c04 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	@ 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e103      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b75      	ldr	r3, [pc, #468]	@ (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x312>
 8001f24:	4b6f      	ldr	r3, [pc, #444]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a6e      	ldr	r2, [pc, #440]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x334>
 8001f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a69      	ldr	r2, [pc, #420]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b67      	ldr	r3, [pc, #412]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a66      	ldr	r2, [pc, #408]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	e01c      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x356>
 8001f5c:	4b61      	ldr	r3, [pc, #388]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a60      	ldr	r2, [pc, #384]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	4b5e      	ldr	r3, [pc, #376]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e00b      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f76:	4b5b      	ldr	r3, [pc, #364]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b58      	ldr	r3, [pc, #352]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a57      	ldr	r2, [pc, #348]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fe35 	bl	8000c04 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe fe31 	bl	8000c04 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0b1      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ee      	beq.n	8001f9e <HAL_RCC_OscConfig+0x37e>
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7fe fe1f 	bl	8000c04 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7fe fe1b 	bl	8000c04 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e09b      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	4b40      	ldr	r3, [pc, #256]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8087 	beq.w	8002116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d061      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d146      	bne.n	80020aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b33      	ldr	r3, [pc, #204]	@ (80020ec <HAL_RCC_OscConfig+0x4cc>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe fdef 	bl	8000c04 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fdeb 	bl	8000c04 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e06d      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	4921      	ldr	r1, [pc, #132]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b1f      	ldr	r3, [pc, #124]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a19      	ldr	r1, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	430b      	orrs	r3, r1
 8002076:	491b      	ldr	r1, [pc, #108]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_RCC_OscConfig+0x4cc>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fdbf 	bl	8000c04 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fdbb 	bl	8000c04 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e03d      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x46a>
 80020a8:	e035      	b.n	8002116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fda8 	bl	8000c04 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fda4 	bl	8000c04 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e026      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x498>
 80020d6:	e01e      	b.n	8002116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e019      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
 80020ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_OscConfig+0x500>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0d0      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b6a      	ldr	r3, [pc, #424]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b67      	ldr	r3, [pc, #412]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4965      	ldr	r1, [pc, #404]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b63      	ldr	r3, [pc, #396]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0b8      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002180:	4b59      	ldr	r3, [pc, #356]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800218a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002198:	4b53      	ldr	r3, [pc, #332]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a52      	ldr	r2, [pc, #328]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b50      	ldr	r3, [pc, #320]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	494d      	ldr	r1, [pc, #308]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d040      	beq.n	8002244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b47      	ldr	r3, [pc, #284]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e07f      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e2:	4b41      	ldr	r3, [pc, #260]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e073      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06b      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b39      	ldr	r3, [pc, #228]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4936      	ldr	r1, [pc, #216]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002214:	f7fe fcf6 	bl	8000c04 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	e00a      	b.n	8002232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7fe fcf2 	bl	8000c04 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e053      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 020c 	and.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1eb      	bne.n	800221c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002244:	4b27      	ldr	r3, [pc, #156]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d210      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b24      	ldr	r3, [pc, #144]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	4922      	ldr	r1, [pc, #136]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b20      	ldr	r3, [pc, #128]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e032      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002280:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4916      	ldr	r1, [pc, #88]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	490e      	ldr	r1, [pc, #56]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022b2:	f000 f821 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	490a      	ldr	r1, [pc, #40]	@ (80022ec <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	5ccb      	ldrb	r3, [r1, r3]
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	4a09      	ldr	r2, [pc, #36]	@ (80022f0 <HAL_RCC_ClockConfig+0x1cc>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ce:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <HAL_RCC_ClockConfig+0x1d0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fc54 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08003f94 	.word	0x08003f94
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	20000010 	.word	0x20000010

080022f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002312:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <HAL_RCC_GetSysClockFreq+0x94>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d002      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x30>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x36>
 8002326:	e027      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	e027      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	4a17      	ldr	r2, [pc, #92]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <HAL_RCC_GetSysClockFreq+0x94>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0c5b      	lsrs	r3, r3, #17
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800235a:	fb03 f202 	mul.w	r2, r3, r2
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e004      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0c      	ldr	r2, [pc, #48]	@ (800239c <HAL_RCC_GetSysClockFreq+0xa4>)
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	613b      	str	r3, [r7, #16]
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	693b      	ldr	r3, [r7, #16]
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	007a1200 	.word	0x007a1200
 8002394:	08003fac 	.word	0x08003fac
 8002398:	08003fbc 	.word	0x08003fbc
 800239c:	003d0900 	.word	0x003d0900

080023a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a4:	4b02      	ldr	r3, [pc, #8]	@ (80023b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	2000000c 	.word	0x2000000c

080023b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b8:	f7ff fff2 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	@ (80023d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	08003fa4 	.word	0x08003fa4

080023dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e0:	f7ff ffde 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0adb      	lsrs	r3, r3, #11
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4903      	ldr	r1, [pc, #12]	@ (8002400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08003fa4 	.word	0x08003fa4

08002404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <RCC_Delay+0x34>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <RCC_Delay+0x38>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002420:	bf00      	nop
  }
  while (Delay --);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <RCC_Delay+0x1c>
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	2000000c 	.word	0x2000000c
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e041      	b.n	80024d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fa20 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 f8f4 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_ConfigClockSource+0x1c>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0b4      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x186>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002518:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002520:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002532:	d03e      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0xd4>
 8002534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002538:	f200 8087 	bhi.w	800264a <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002540:	f000 8086 	beq.w	8002650 <HAL_TIM_ConfigClockSource+0x172>
 8002544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002548:	d87f      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x16c>
 800254a:	2b70      	cmp	r3, #112	@ 0x70
 800254c:	d01a      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0xa6>
 800254e:	2b70      	cmp	r3, #112	@ 0x70
 8002550:	d87b      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x16c>
 8002552:	2b60      	cmp	r3, #96	@ 0x60
 8002554:	d050      	beq.n	80025f8 <HAL_TIM_ConfigClockSource+0x11a>
 8002556:	2b60      	cmp	r3, #96	@ 0x60
 8002558:	d877      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x16c>
 800255a:	2b50      	cmp	r3, #80	@ 0x50
 800255c:	d03c      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0xfa>
 800255e:	2b50      	cmp	r3, #80	@ 0x50
 8002560:	d873      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x16c>
 8002562:	2b40      	cmp	r3, #64	@ 0x40
 8002564:	d058      	beq.n	8002618 <HAL_TIM_ConfigClockSource+0x13a>
 8002566:	2b40      	cmp	r3, #64	@ 0x40
 8002568:	d86f      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x16c>
 800256a:	2b30      	cmp	r3, #48	@ 0x30
 800256c:	d064      	beq.n	8002638 <HAL_TIM_ConfigClockSource+0x15a>
 800256e:	2b30      	cmp	r3, #48	@ 0x30
 8002570:	d86b      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x16c>
 8002572:	2b20      	cmp	r3, #32
 8002574:	d060      	beq.n	8002638 <HAL_TIM_ConfigClockSource+0x15a>
 8002576:	2b20      	cmp	r3, #32
 8002578:	d867      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x16c>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d05c      	beq.n	8002638 <HAL_TIM_ConfigClockSource+0x15a>
 800257e:	2b10      	cmp	r3, #16
 8002580:	d05a      	beq.n	8002638 <HAL_TIM_ConfigClockSource+0x15a>
 8002582:	e062      	b.n	800264a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	f000 f94f 	bl	8002836 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	609a      	str	r2, [r3, #8]
      break;
 80025b0:	e04f      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	f000 f938 	bl	8002836 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025d4:	609a      	str	r2, [r3, #8]
      break;
 80025d6:	e03c      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e4:	461a      	mov	r2, r3
 80025e6:	f000 f8af 	bl	8002748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2150      	movs	r1, #80	@ 0x50
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 f906 	bl	8002802 <TIM_ITRx_SetConfig>
      break;
 80025f6:	e02c      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002604:	461a      	mov	r2, r3
 8002606:	f000 f8cd 	bl	80027a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2160      	movs	r1, #96	@ 0x60
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f8f6 	bl	8002802 <TIM_ITRx_SetConfig>
      break;
 8002616:	e01c      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002624:	461a      	mov	r2, r3
 8002626:	f000 f88f 	bl	8002748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2140      	movs	r1, #64	@ 0x40
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f8e6 	bl	8002802 <TIM_ITRx_SetConfig>
      break;
 8002636:	e00c      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 f8dd 	bl	8002802 <TIM_ITRx_SetConfig>
      break;
 8002648:	e003      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
      break;
 800264e:	e000      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a2f      	ldr	r2, [pc, #188]	@ (800273c <TIM_Base_SetConfig+0xd0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00b      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800268a:	d007      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a2c      	ldr	r2, [pc, #176]	@ (8002740 <TIM_Base_SetConfig+0xd4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a2b      	ldr	r2, [pc, #172]	@ (8002744 <TIM_Base_SetConfig+0xd8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d108      	bne.n	80026ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a22      	ldr	r2, [pc, #136]	@ (800273c <TIM_Base_SetConfig+0xd0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00b      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <TIM_Base_SetConfig+0xd4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002744 <TIM_Base_SetConfig+0xd8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <TIM_Base_SetConfig+0xd0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d103      	bne.n	8002714 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f023 0201 	bic.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]
  }
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40000400 	.word	0x40000400
 8002744:	40000800 	.word	0x40000800

08002748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0201 	bic.w	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f023 030a 	bic.w	r3, r3, #10
 8002784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f023 0210 	bic.w	r2, r3, #16
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	031b      	lsls	r3, r3, #12
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	621a      	str	r2, [r3, #32]
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	f043 0307 	orr.w	r3, r3, #7
 8002824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002836:	b480      	push	{r7}
 8002838:	b087      	sub	sp, #28
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002850:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	021a      	lsls	r2, r3, #8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	431a      	orrs	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	609a      	str	r2, [r3, #8]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002888:	2302      	movs	r3, #2
 800288a:	e046      	b.n	800291a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a16      	ldr	r2, [pc, #88]	@ (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00e      	beq.n	80028ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d8:	d009      	beq.n	80028ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a12      	ldr	r2, [pc, #72]	@ (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a10      	ldr	r2, [pc, #64]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10c      	bne.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800

08002930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e042      	b.n	80029c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fd ffc6 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	@ 0x24
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fdb7 	bl	80034e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	@ 0x28
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d175      	bne.n	8002adc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_UART_Transmit+0x2c>
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e06e      	b.n	8002ade <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2221      	movs	r2, #33	@ 0x21
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe f8f9 	bl	8000c04 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a28:	d108      	bne.n	8002a3c <HAL_UART_Transmit+0x6c>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e003      	b.n	8002a44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a44:	e02e      	b.n	8002aa4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	@ 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fb1c 	bl	800308e <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e03a      	b.n	8002ade <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10b      	bne.n	8002a86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3302      	adds	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	e007      	b.n	8002a96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	3301      	adds	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1cb      	bne.n	8002a46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2140      	movs	r1, #64	@ 0x40
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fae8 	bl	800308e <UART_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e006      	b.n	8002ade <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d112      	bne.n	8002b26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_UART_Receive_IT+0x26>
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e00b      	b.n	8002b28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fb0f 	bl	8003140 <UART_Start_Receive_IT>
 8002b22:	4603      	mov	r3, r0
 8002b24:	e000      	b.n	8002b28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
  }
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b0ba      	sub	sp, #232	@ 0xe8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_UART_IRQHandler+0x66>
 8002b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fbec 	bl	800336c <UART_Receive_IT>
      return;
 8002b94:	e25b      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80de 	beq.w	8002d5c <HAL_UART_IRQHandler+0x22c>
 8002ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80d1 	beq.w	8002d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_UART_IRQHandler+0xae>
 8002bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_UART_IRQHandler+0xd2>
 8002bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f043 0202 	orr.w	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_UART_IRQHandler+0xf6>
 8002c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f043 0204 	orr.w	r2, r3, #4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d011      	beq.n	8002c56 <HAL_UART_IRQHandler+0x126>
 8002c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	f043 0208 	orr.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 81f2 	beq.w	8003044 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_UART_IRQHandler+0x14e>
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fb77 	bl	800336c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_UART_IRQHandler+0x17a>
 8002ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d04f      	beq.n	8002d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa81 	bl	80031b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d041      	beq.n	8002d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3314      	adds	r3, #20
 8002ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002cea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1d9      	bne.n	8002cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d013      	beq.n	8002d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	4a7e      	ldr	r2, [pc, #504]	@ (8002f10 <HAL_UART_IRQHandler+0x3e0>)
 8002d18:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe f8e6 	bl	8000ef0 <HAL_DMA_Abort_IT>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d34:	4610      	mov	r0, r2
 8002d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d38:	e00e      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f993 	bl	8003066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	e00a      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f98f 	bl	8003066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d48:	e006      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f98b 	bl	8003066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d56:	e175      	b.n	8003044 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	bf00      	nop
    return;
 8002d5a:	e173      	b.n	8003044 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 814f 	bne.w	8003004 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8148 	beq.w	8003004 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8141 	beq.w	8003004 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80b6 	beq.w	8002f14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8145 	beq.w	8003048 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	f080 813e 	bcs.w	8003048 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	f000 8088 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e0c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1d9      	bne.n	8002de0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e50:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e54:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e58:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e1      	bne.n	8002e2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3314      	adds	r3, #20
 8002e88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e8c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e3      	bne.n	8002e68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ec0:	f023 0310 	bic.w	r3, r3, #16
 8002ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ed2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ed4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ed8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e3      	bne.n	8002eae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd ffc5 	bl	8000e7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8b6 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f0c:	e09c      	b.n	8003048 <HAL_UART_IRQHandler+0x518>
 8002f0e:	bf00      	nop
 8002f10:	08003277 	.word	0x08003277
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 808e 	beq.w	800304c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8089 	beq.w	800304c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e3      	bne.n	8002f3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3314      	adds	r3, #20
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	623b      	str	r3, [r7, #32]
   return(result);
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3314      	adds	r3, #20
 8002f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f96:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e3      	bne.n	8002f72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0310 	bic.w	r3, r3, #16
 8002fce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fdc:	61fa      	str	r2, [r7, #28]
 8002fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	69b9      	ldr	r1, [r7, #24]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e3      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f83b 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003002:	e023      	b.n	800304c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_UART_IRQHandler+0x4f4>
 8003010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f93e 	bl	800329e <UART_Transmit_IT>
    return;
 8003022:	e014      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <HAL_UART_IRQHandler+0x51e>
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f97d 	bl	800333c <UART_EndTransmit_IT>
    return;
 8003042:	e004      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
    return;
 8003044:	bf00      	nop
 8003046:	e002      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
      return;
 8003048:	bf00      	nop
 800304a:	e000      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
      return;
 800304c:	bf00      	nop
  }
}
 800304e:	37e8      	adds	r7, #232	@ 0xe8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309e:	e03b      	b.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d037      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	f7fd fdac 	bl	8000c04 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	6a3a      	ldr	r2, [r7, #32]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <UART_WaitOnFlagUntilTimeout+0x30>
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e03a      	b.n	8003138 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b80      	cmp	r3, #128	@ 0x80
 80030d4:	d020      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b40      	cmp	r3, #64	@ 0x40
 80030da:	d01d      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d116      	bne.n	8003118 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f856 	bl	80031b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2208      	movs	r2, #8
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e00f      	b.n	8003138 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	429a      	cmp	r2, r3
 8003134:	d0b4      	beq.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2222      	movs	r2, #34	@ 0x22
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003184:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0220 	orr.w	r2, r2, #32
 80031a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b095      	sub	sp, #84	@ 0x54
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031da:	643a      	str	r2, [r7, #64]	@ 0x40
 80031dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e5      	bne.n	80031ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3314      	adds	r3, #20
 800320c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800320e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e5      	bne.n	80031ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	2b01      	cmp	r3, #1
 8003228:	d119      	bne.n	800325e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	60bb      	str	r3, [r7, #8]
   return(result);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f023 0310 	bic.w	r3, r3, #16
 8003240:	647b      	str	r3, [r7, #68]	@ 0x44
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800324a:	61ba      	str	r2, [r7, #24]
 800324c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6979      	ldr	r1, [r7, #20]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	613b      	str	r3, [r7, #16]
   return(result);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e5      	bne.n	800322a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800326c:	bf00      	nop
 800326e:	3754      	adds	r7, #84	@ 0x54
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff fee8 	bl	8003066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b21      	cmp	r3, #33	@ 0x21
 80032b0:	d13e      	bne.n	8003330 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ba:	d114      	bne.n	80032e6 <UART_Transmit_IT+0x48>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d110      	bne.n	80032e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	1c9a      	adds	r2, r3, #2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	621a      	str	r2, [r3, #32]
 80032e4:	e008      	b.n	80032f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	1c59      	adds	r1, r3, #1
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6211      	str	r1, [r2, #32]
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4619      	mov	r1, r3
 8003306:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10f      	bne.n	800332c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800331a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800332a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003352:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fe79 	bl	8003054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	@ 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b22      	cmp	r3, #34	@ 0x22
 800337e:	f040 80ae 	bne.w	80034de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338a:	d117      	bne.n	80033bc <UART_Receive_IT+0x50>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d113      	bne.n	80033bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80033ba:	e026      	b.n	800340a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ce:	d007      	beq.n	80033e0 <UART_Receive_IT+0x74>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <UART_Receive_IT+0x82>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e008      	b.n	8003400 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29b      	uxth	r3, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4619      	mov	r1, r3
 8003418:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800341a:	2b00      	cmp	r3, #0
 800341c:	d15d      	bne.n	80034da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0220 	bic.w	r2, r2, #32
 800342c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800343c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	2b01      	cmp	r3, #1
 8003462:	d135      	bne.n	80034d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	613b      	str	r3, [r7, #16]
   return(result);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f023 0310 	bic.w	r3, r3, #16
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348a:	623a      	str	r2, [r7, #32]
 800348c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	69f9      	ldr	r1, [r7, #28]
 8003490:	6a3a      	ldr	r2, [r7, #32]
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	61bb      	str	r3, [r7, #24]
   return(result);
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e5      	bne.n	800346a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d10a      	bne.n	80034c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fdd5 	bl	8003078 <HAL_UARTEx_RxEventCallback>
 80034ce:	e002      	b.n	80034d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fc ff3d 	bl	8000350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e002      	b.n	80034e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3730      	adds	r7, #48	@ 0x30
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003522:	f023 030c 	bic.w	r3, r3, #12
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	430b      	orrs	r3, r1
 800352e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2c      	ldr	r2, [pc, #176]	@ (80035fc <UART_SetConfig+0x114>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003550:	f7fe ff44 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	e002      	b.n	800355e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7fe ff2c 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 800355c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009a      	lsls	r2, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	4a22      	ldr	r2, [pc, #136]	@ (8003600 <UART_SetConfig+0x118>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	0119      	lsls	r1, r3, #4
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009a      	lsls	r2, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <UART_SetConfig+0x118>)
 8003596:	fba3 0302 	umull	r0, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2064      	movs	r0, #100	@ 0x64
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	@ 0x32
 80035a8:	4a15      	ldr	r2, [pc, #84]	@ (8003600 <UART_SetConfig+0x118>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b4:	4419      	add	r1, r3
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <UART_SetConfig+0x118>)
 80035ce:	fba3 0302 	umull	r0, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2064      	movs	r0, #100	@ 0x64
 80035d6:	fb00 f303 	mul.w	r3, r0, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3332      	adds	r3, #50	@ 0x32
 80035e0:	4a07      	ldr	r2, [pc, #28]	@ (8003600 <UART_SetConfig+0x118>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	440a      	add	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40013800 	.word	0x40013800
 8003600:	51eb851f 	.word	0x51eb851f

08003604 <siprintf>:
 8003604:	b40e      	push	{r1, r2, r3}
 8003606:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800360a:	b500      	push	{lr}
 800360c:	b09c      	sub	sp, #112	@ 0x70
 800360e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003610:	9002      	str	r0, [sp, #8]
 8003612:	9006      	str	r0, [sp, #24]
 8003614:	9107      	str	r1, [sp, #28]
 8003616:	9104      	str	r1, [sp, #16]
 8003618:	4808      	ldr	r0, [pc, #32]	@ (800363c <siprintf+0x38>)
 800361a:	4909      	ldr	r1, [pc, #36]	@ (8003640 <siprintf+0x3c>)
 800361c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003620:	9105      	str	r1, [sp, #20]
 8003622:	6800      	ldr	r0, [r0, #0]
 8003624:	a902      	add	r1, sp, #8
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	f000 f992 	bl	8003950 <_svfiprintf_r>
 800362c:	2200      	movs	r2, #0
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	b01c      	add	sp, #112	@ 0x70
 8003634:	f85d eb04 	ldr.w	lr, [sp], #4
 8003638:	b003      	add	sp, #12
 800363a:	4770      	bx	lr
 800363c:	20000018 	.word	0x20000018
 8003640:	ffff0208 	.word	0xffff0208

08003644 <memset>:
 8003644:	4603      	mov	r3, r0
 8003646:	4402      	add	r2, r0
 8003648:	4293      	cmp	r3, r2
 800364a:	d100      	bne.n	800364e <memset+0xa>
 800364c:	4770      	bx	lr
 800364e:	f803 1b01 	strb.w	r1, [r3], #1
 8003652:	e7f9      	b.n	8003648 <memset+0x4>

08003654 <__errno>:
 8003654:	4b01      	ldr	r3, [pc, #4]	@ (800365c <__errno+0x8>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000018 	.word	0x20000018

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	2600      	movs	r6, #0
 8003664:	4d0c      	ldr	r5, [pc, #48]	@ (8003698 <__libc_init_array+0x38>)
 8003666:	4c0d      	ldr	r4, [pc, #52]	@ (800369c <__libc_init_array+0x3c>)
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	42a6      	cmp	r6, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	f000 fc78 	bl	8003f64 <_init>
 8003674:	2600      	movs	r6, #0
 8003676:	4d0a      	ldr	r5, [pc, #40]	@ (80036a0 <__libc_init_array+0x40>)
 8003678:	4c0a      	ldr	r4, [pc, #40]	@ (80036a4 <__libc_init_array+0x44>)
 800367a:	1b64      	subs	r4, r4, r5
 800367c:	10a4      	asrs	r4, r4, #2
 800367e:	42a6      	cmp	r6, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f855 3b04 	ldr.w	r3, [r5], #4
 8003688:	4798      	blx	r3
 800368a:	3601      	adds	r6, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003692:	4798      	blx	r3
 8003694:	3601      	adds	r6, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	08003ff4 	.word	0x08003ff4
 800369c:	08003ff4 	.word	0x08003ff4
 80036a0:	08003ff4 	.word	0x08003ff4
 80036a4:	08003ff8 	.word	0x08003ff8

080036a8 <__retarget_lock_acquire_recursive>:
 80036a8:	4770      	bx	lr

080036aa <__retarget_lock_release_recursive>:
 80036aa:	4770      	bx	lr

080036ac <_free_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4605      	mov	r5, r0
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d040      	beq.n	8003736 <_free_r+0x8a>
 80036b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b8:	1f0c      	subs	r4, r1, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bfb8      	it	lt
 80036be:	18e4      	addlt	r4, r4, r3
 80036c0:	f000 f8de 	bl	8003880 <__malloc_lock>
 80036c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <_free_r+0x8c>)
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	b933      	cbnz	r3, 80036d8 <_free_r+0x2c>
 80036ca:	6063      	str	r3, [r4, #4]
 80036cc:	6014      	str	r4, [r2, #0]
 80036ce:	4628      	mov	r0, r5
 80036d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036d4:	f000 b8da 	b.w	800388c <__malloc_unlock>
 80036d8:	42a3      	cmp	r3, r4
 80036da:	d908      	bls.n	80036ee <_free_r+0x42>
 80036dc:	6820      	ldr	r0, [r4, #0]
 80036de:	1821      	adds	r1, r4, r0
 80036e0:	428b      	cmp	r3, r1
 80036e2:	bf01      	itttt	eq
 80036e4:	6819      	ldreq	r1, [r3, #0]
 80036e6:	685b      	ldreq	r3, [r3, #4]
 80036e8:	1809      	addeq	r1, r1, r0
 80036ea:	6021      	streq	r1, [r4, #0]
 80036ec:	e7ed      	b.n	80036ca <_free_r+0x1e>
 80036ee:	461a      	mov	r2, r3
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	b10b      	cbz	r3, 80036f8 <_free_r+0x4c>
 80036f4:	42a3      	cmp	r3, r4
 80036f6:	d9fa      	bls.n	80036ee <_free_r+0x42>
 80036f8:	6811      	ldr	r1, [r2, #0]
 80036fa:	1850      	adds	r0, r2, r1
 80036fc:	42a0      	cmp	r0, r4
 80036fe:	d10b      	bne.n	8003718 <_free_r+0x6c>
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	4401      	add	r1, r0
 8003704:	1850      	adds	r0, r2, r1
 8003706:	4283      	cmp	r3, r0
 8003708:	6011      	str	r1, [r2, #0]
 800370a:	d1e0      	bne.n	80036ce <_free_r+0x22>
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4408      	add	r0, r1
 8003712:	6010      	str	r0, [r2, #0]
 8003714:	6053      	str	r3, [r2, #4]
 8003716:	e7da      	b.n	80036ce <_free_r+0x22>
 8003718:	d902      	bls.n	8003720 <_free_r+0x74>
 800371a:	230c      	movs	r3, #12
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	e7d6      	b.n	80036ce <_free_r+0x22>
 8003720:	6820      	ldr	r0, [r4, #0]
 8003722:	1821      	adds	r1, r4, r0
 8003724:	428b      	cmp	r3, r1
 8003726:	bf01      	itttt	eq
 8003728:	6819      	ldreq	r1, [r3, #0]
 800372a:	685b      	ldreq	r3, [r3, #4]
 800372c:	1809      	addeq	r1, r1, r0
 800372e:	6021      	streq	r1, [r4, #0]
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	6054      	str	r4, [r2, #4]
 8003734:	e7cb      	b.n	80036ce <_free_r+0x22>
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	20000330 	.word	0x20000330

0800373c <sbrk_aligned>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4e0f      	ldr	r6, [pc, #60]	@ (800377c <sbrk_aligned+0x40>)
 8003740:	460c      	mov	r4, r1
 8003742:	6831      	ldr	r1, [r6, #0]
 8003744:	4605      	mov	r5, r0
 8003746:	b911      	cbnz	r1, 800374e <sbrk_aligned+0x12>
 8003748:	f000 fbaa 	bl	8003ea0 <_sbrk_r>
 800374c:	6030      	str	r0, [r6, #0]
 800374e:	4621      	mov	r1, r4
 8003750:	4628      	mov	r0, r5
 8003752:	f000 fba5 	bl	8003ea0 <_sbrk_r>
 8003756:	1c43      	adds	r3, r0, #1
 8003758:	d103      	bne.n	8003762 <sbrk_aligned+0x26>
 800375a:	f04f 34ff 	mov.w	r4, #4294967295
 800375e:	4620      	mov	r0, r4
 8003760:	bd70      	pop	{r4, r5, r6, pc}
 8003762:	1cc4      	adds	r4, r0, #3
 8003764:	f024 0403 	bic.w	r4, r4, #3
 8003768:	42a0      	cmp	r0, r4
 800376a:	d0f8      	beq.n	800375e <sbrk_aligned+0x22>
 800376c:	1a21      	subs	r1, r4, r0
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fb96 	bl	8003ea0 <_sbrk_r>
 8003774:	3001      	adds	r0, #1
 8003776:	d1f2      	bne.n	800375e <sbrk_aligned+0x22>
 8003778:	e7ef      	b.n	800375a <sbrk_aligned+0x1e>
 800377a:	bf00      	nop
 800377c:	2000032c 	.word	0x2000032c

08003780 <_malloc_r>:
 8003780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003784:	1ccd      	adds	r5, r1, #3
 8003786:	f025 0503 	bic.w	r5, r5, #3
 800378a:	3508      	adds	r5, #8
 800378c:	2d0c      	cmp	r5, #12
 800378e:	bf38      	it	cc
 8003790:	250c      	movcc	r5, #12
 8003792:	2d00      	cmp	r5, #0
 8003794:	4606      	mov	r6, r0
 8003796:	db01      	blt.n	800379c <_malloc_r+0x1c>
 8003798:	42a9      	cmp	r1, r5
 800379a:	d904      	bls.n	80037a6 <_malloc_r+0x26>
 800379c:	230c      	movs	r3, #12
 800379e:	6033      	str	r3, [r6, #0]
 80037a0:	2000      	movs	r0, #0
 80037a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800387c <_malloc_r+0xfc>
 80037aa:	f000 f869 	bl	8003880 <__malloc_lock>
 80037ae:	f8d8 3000 	ldr.w	r3, [r8]
 80037b2:	461c      	mov	r4, r3
 80037b4:	bb44      	cbnz	r4, 8003808 <_malloc_r+0x88>
 80037b6:	4629      	mov	r1, r5
 80037b8:	4630      	mov	r0, r6
 80037ba:	f7ff ffbf 	bl	800373c <sbrk_aligned>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	4604      	mov	r4, r0
 80037c2:	d158      	bne.n	8003876 <_malloc_r+0xf6>
 80037c4:	f8d8 4000 	ldr.w	r4, [r8]
 80037c8:	4627      	mov	r7, r4
 80037ca:	2f00      	cmp	r7, #0
 80037cc:	d143      	bne.n	8003856 <_malloc_r+0xd6>
 80037ce:	2c00      	cmp	r4, #0
 80037d0:	d04b      	beq.n	800386a <_malloc_r+0xea>
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	4639      	mov	r1, r7
 80037d6:	4630      	mov	r0, r6
 80037d8:	eb04 0903 	add.w	r9, r4, r3
 80037dc:	f000 fb60 	bl	8003ea0 <_sbrk_r>
 80037e0:	4581      	cmp	r9, r0
 80037e2:	d142      	bne.n	800386a <_malloc_r+0xea>
 80037e4:	6821      	ldr	r1, [r4, #0]
 80037e6:	4630      	mov	r0, r6
 80037e8:	1a6d      	subs	r5, r5, r1
 80037ea:	4629      	mov	r1, r5
 80037ec:	f7ff ffa6 	bl	800373c <sbrk_aligned>
 80037f0:	3001      	adds	r0, #1
 80037f2:	d03a      	beq.n	800386a <_malloc_r+0xea>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	442b      	add	r3, r5
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	f8d8 3000 	ldr.w	r3, [r8]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	bb62      	cbnz	r2, 800385c <_malloc_r+0xdc>
 8003802:	f8c8 7000 	str.w	r7, [r8]
 8003806:	e00f      	b.n	8003828 <_malloc_r+0xa8>
 8003808:	6822      	ldr	r2, [r4, #0]
 800380a:	1b52      	subs	r2, r2, r5
 800380c:	d420      	bmi.n	8003850 <_malloc_r+0xd0>
 800380e:	2a0b      	cmp	r2, #11
 8003810:	d917      	bls.n	8003842 <_malloc_r+0xc2>
 8003812:	1961      	adds	r1, r4, r5
 8003814:	42a3      	cmp	r3, r4
 8003816:	6025      	str	r5, [r4, #0]
 8003818:	bf18      	it	ne
 800381a:	6059      	strne	r1, [r3, #4]
 800381c:	6863      	ldr	r3, [r4, #4]
 800381e:	bf08      	it	eq
 8003820:	f8c8 1000 	streq.w	r1, [r8]
 8003824:	5162      	str	r2, [r4, r5]
 8003826:	604b      	str	r3, [r1, #4]
 8003828:	4630      	mov	r0, r6
 800382a:	f000 f82f 	bl	800388c <__malloc_unlock>
 800382e:	f104 000b 	add.w	r0, r4, #11
 8003832:	1d23      	adds	r3, r4, #4
 8003834:	f020 0007 	bic.w	r0, r0, #7
 8003838:	1ac2      	subs	r2, r0, r3
 800383a:	bf1c      	itt	ne
 800383c:	1a1b      	subne	r3, r3, r0
 800383e:	50a3      	strne	r3, [r4, r2]
 8003840:	e7af      	b.n	80037a2 <_malloc_r+0x22>
 8003842:	6862      	ldr	r2, [r4, #4]
 8003844:	42a3      	cmp	r3, r4
 8003846:	bf0c      	ite	eq
 8003848:	f8c8 2000 	streq.w	r2, [r8]
 800384c:	605a      	strne	r2, [r3, #4]
 800384e:	e7eb      	b.n	8003828 <_malloc_r+0xa8>
 8003850:	4623      	mov	r3, r4
 8003852:	6864      	ldr	r4, [r4, #4]
 8003854:	e7ae      	b.n	80037b4 <_malloc_r+0x34>
 8003856:	463c      	mov	r4, r7
 8003858:	687f      	ldr	r7, [r7, #4]
 800385a:	e7b6      	b.n	80037ca <_malloc_r+0x4a>
 800385c:	461a      	mov	r2, r3
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	42a3      	cmp	r3, r4
 8003862:	d1fb      	bne.n	800385c <_malloc_r+0xdc>
 8003864:	2300      	movs	r3, #0
 8003866:	6053      	str	r3, [r2, #4]
 8003868:	e7de      	b.n	8003828 <_malloc_r+0xa8>
 800386a:	230c      	movs	r3, #12
 800386c:	4630      	mov	r0, r6
 800386e:	6033      	str	r3, [r6, #0]
 8003870:	f000 f80c 	bl	800388c <__malloc_unlock>
 8003874:	e794      	b.n	80037a0 <_malloc_r+0x20>
 8003876:	6005      	str	r5, [r0, #0]
 8003878:	e7d6      	b.n	8003828 <_malloc_r+0xa8>
 800387a:	bf00      	nop
 800387c:	20000330 	.word	0x20000330

08003880 <__malloc_lock>:
 8003880:	4801      	ldr	r0, [pc, #4]	@ (8003888 <__malloc_lock+0x8>)
 8003882:	f7ff bf11 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 8003886:	bf00      	nop
 8003888:	20000328 	.word	0x20000328

0800388c <__malloc_unlock>:
 800388c:	4801      	ldr	r0, [pc, #4]	@ (8003894 <__malloc_unlock+0x8>)
 800388e:	f7ff bf0c 	b.w	80036aa <__retarget_lock_release_recursive>
 8003892:	bf00      	nop
 8003894:	20000328 	.word	0x20000328

08003898 <__ssputs_r>:
 8003898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	461f      	mov	r7, r3
 800389e:	688e      	ldr	r6, [r1, #8]
 80038a0:	4682      	mov	sl, r0
 80038a2:	42be      	cmp	r6, r7
 80038a4:	460c      	mov	r4, r1
 80038a6:	4690      	mov	r8, r2
 80038a8:	680b      	ldr	r3, [r1, #0]
 80038aa:	d82d      	bhi.n	8003908 <__ssputs_r+0x70>
 80038ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038b4:	d026      	beq.n	8003904 <__ssputs_r+0x6c>
 80038b6:	6965      	ldr	r5, [r4, #20]
 80038b8:	6909      	ldr	r1, [r1, #16]
 80038ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038be:	eba3 0901 	sub.w	r9, r3, r1
 80038c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038c6:	1c7b      	adds	r3, r7, #1
 80038c8:	444b      	add	r3, r9
 80038ca:	106d      	asrs	r5, r5, #1
 80038cc:	429d      	cmp	r5, r3
 80038ce:	bf38      	it	cc
 80038d0:	461d      	movcc	r5, r3
 80038d2:	0553      	lsls	r3, r2, #21
 80038d4:	d527      	bpl.n	8003926 <__ssputs_r+0x8e>
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7ff ff52 	bl	8003780 <_malloc_r>
 80038dc:	4606      	mov	r6, r0
 80038de:	b360      	cbz	r0, 800393a <__ssputs_r+0xa2>
 80038e0:	464a      	mov	r2, r9
 80038e2:	6921      	ldr	r1, [r4, #16]
 80038e4:	f000 fafa 	bl	8003edc <memcpy>
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038f2:	81a3      	strh	r3, [r4, #12]
 80038f4:	6126      	str	r6, [r4, #16]
 80038f6:	444e      	add	r6, r9
 80038f8:	6026      	str	r6, [r4, #0]
 80038fa:	463e      	mov	r6, r7
 80038fc:	6165      	str	r5, [r4, #20]
 80038fe:	eba5 0509 	sub.w	r5, r5, r9
 8003902:	60a5      	str	r5, [r4, #8]
 8003904:	42be      	cmp	r6, r7
 8003906:	d900      	bls.n	800390a <__ssputs_r+0x72>
 8003908:	463e      	mov	r6, r7
 800390a:	4632      	mov	r2, r6
 800390c:	4641      	mov	r1, r8
 800390e:	6820      	ldr	r0, [r4, #0]
 8003910:	f000 faac 	bl	8003e6c <memmove>
 8003914:	2000      	movs	r0, #0
 8003916:	68a3      	ldr	r3, [r4, #8]
 8003918:	1b9b      	subs	r3, r3, r6
 800391a:	60a3      	str	r3, [r4, #8]
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	4433      	add	r3, r6
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003926:	462a      	mov	r2, r5
 8003928:	f000 fae6 	bl	8003ef8 <_realloc_r>
 800392c:	4606      	mov	r6, r0
 800392e:	2800      	cmp	r0, #0
 8003930:	d1e0      	bne.n	80038f4 <__ssputs_r+0x5c>
 8003932:	4650      	mov	r0, sl
 8003934:	6921      	ldr	r1, [r4, #16]
 8003936:	f7ff feb9 	bl	80036ac <_free_r>
 800393a:	230c      	movs	r3, #12
 800393c:	f8ca 3000 	str.w	r3, [sl]
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	f04f 30ff 	mov.w	r0, #4294967295
 8003946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800394a:	81a3      	strh	r3, [r4, #12]
 800394c:	e7e9      	b.n	8003922 <__ssputs_r+0x8a>
	...

08003950 <_svfiprintf_r>:
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	4698      	mov	r8, r3
 8003956:	898b      	ldrh	r3, [r1, #12]
 8003958:	4607      	mov	r7, r0
 800395a:	061b      	lsls	r3, r3, #24
 800395c:	460d      	mov	r5, r1
 800395e:	4614      	mov	r4, r2
 8003960:	b09d      	sub	sp, #116	@ 0x74
 8003962:	d510      	bpl.n	8003986 <_svfiprintf_r+0x36>
 8003964:	690b      	ldr	r3, [r1, #16]
 8003966:	b973      	cbnz	r3, 8003986 <_svfiprintf_r+0x36>
 8003968:	2140      	movs	r1, #64	@ 0x40
 800396a:	f7ff ff09 	bl	8003780 <_malloc_r>
 800396e:	6028      	str	r0, [r5, #0]
 8003970:	6128      	str	r0, [r5, #16]
 8003972:	b930      	cbnz	r0, 8003982 <_svfiprintf_r+0x32>
 8003974:	230c      	movs	r3, #12
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	b01d      	add	sp, #116	@ 0x74
 800397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003982:	2340      	movs	r3, #64	@ 0x40
 8003984:	616b      	str	r3, [r5, #20]
 8003986:	2300      	movs	r3, #0
 8003988:	9309      	str	r3, [sp, #36]	@ 0x24
 800398a:	2320      	movs	r3, #32
 800398c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003990:	2330      	movs	r3, #48	@ 0x30
 8003992:	f04f 0901 	mov.w	r9, #1
 8003996:	f8cd 800c 	str.w	r8, [sp, #12]
 800399a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003b34 <_svfiprintf_r+0x1e4>
 800399e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039a2:	4623      	mov	r3, r4
 80039a4:	469a      	mov	sl, r3
 80039a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039aa:	b10a      	cbz	r2, 80039b0 <_svfiprintf_r+0x60>
 80039ac:	2a25      	cmp	r2, #37	@ 0x25
 80039ae:	d1f9      	bne.n	80039a4 <_svfiprintf_r+0x54>
 80039b0:	ebba 0b04 	subs.w	fp, sl, r4
 80039b4:	d00b      	beq.n	80039ce <_svfiprintf_r+0x7e>
 80039b6:	465b      	mov	r3, fp
 80039b8:	4622      	mov	r2, r4
 80039ba:	4629      	mov	r1, r5
 80039bc:	4638      	mov	r0, r7
 80039be:	f7ff ff6b 	bl	8003898 <__ssputs_r>
 80039c2:	3001      	adds	r0, #1
 80039c4:	f000 80a7 	beq.w	8003b16 <_svfiprintf_r+0x1c6>
 80039c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039ca:	445a      	add	r2, fp
 80039cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80039ce:	f89a 3000 	ldrb.w	r3, [sl]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 809f 	beq.w	8003b16 <_svfiprintf_r+0x1c6>
 80039d8:	2300      	movs	r3, #0
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039e2:	f10a 0a01 	add.w	sl, sl, #1
 80039e6:	9304      	str	r3, [sp, #16]
 80039e8:	9307      	str	r3, [sp, #28]
 80039ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80039f0:	4654      	mov	r4, sl
 80039f2:	2205      	movs	r2, #5
 80039f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f8:	484e      	ldr	r0, [pc, #312]	@ (8003b34 <_svfiprintf_r+0x1e4>)
 80039fa:	f000 fa61 	bl	8003ec0 <memchr>
 80039fe:	9a04      	ldr	r2, [sp, #16]
 8003a00:	b9d8      	cbnz	r0, 8003a3a <_svfiprintf_r+0xea>
 8003a02:	06d0      	lsls	r0, r2, #27
 8003a04:	bf44      	itt	mi
 8003a06:	2320      	movmi	r3, #32
 8003a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a0c:	0711      	lsls	r1, r2, #28
 8003a0e:	bf44      	itt	mi
 8003a10:	232b      	movmi	r3, #43	@ 0x2b
 8003a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a16:	f89a 3000 	ldrb.w	r3, [sl]
 8003a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a1c:	d015      	beq.n	8003a4a <_svfiprintf_r+0xfa>
 8003a1e:	4654      	mov	r4, sl
 8003a20:	2000      	movs	r0, #0
 8003a22:	f04f 0c0a 	mov.w	ip, #10
 8003a26:	9a07      	ldr	r2, [sp, #28]
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a2e:	3b30      	subs	r3, #48	@ 0x30
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	d94b      	bls.n	8003acc <_svfiprintf_r+0x17c>
 8003a34:	b1b0      	cbz	r0, 8003a64 <_svfiprintf_r+0x114>
 8003a36:	9207      	str	r2, [sp, #28]
 8003a38:	e014      	b.n	8003a64 <_svfiprintf_r+0x114>
 8003a3a:	eba0 0308 	sub.w	r3, r0, r8
 8003a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a42:	4313      	orrs	r3, r2
 8003a44:	46a2      	mov	sl, r4
 8003a46:	9304      	str	r3, [sp, #16]
 8003a48:	e7d2      	b.n	80039f0 <_svfiprintf_r+0xa0>
 8003a4a:	9b03      	ldr	r3, [sp, #12]
 8003a4c:	1d19      	adds	r1, r3, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	9103      	str	r1, [sp, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfbb      	ittet	lt
 8003a56:	425b      	neglt	r3, r3
 8003a58:	f042 0202 	orrlt.w	r2, r2, #2
 8003a5c:	9307      	strge	r3, [sp, #28]
 8003a5e:	9307      	strlt	r3, [sp, #28]
 8003a60:	bfb8      	it	lt
 8003a62:	9204      	strlt	r2, [sp, #16]
 8003a64:	7823      	ldrb	r3, [r4, #0]
 8003a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a68:	d10a      	bne.n	8003a80 <_svfiprintf_r+0x130>
 8003a6a:	7863      	ldrb	r3, [r4, #1]
 8003a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a6e:	d132      	bne.n	8003ad6 <_svfiprintf_r+0x186>
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	3402      	adds	r4, #2
 8003a74:	1d1a      	adds	r2, r3, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	9203      	str	r2, [sp, #12]
 8003a7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a7e:	9305      	str	r3, [sp, #20]
 8003a80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003b38 <_svfiprintf_r+0x1e8>
 8003a84:	2203      	movs	r2, #3
 8003a86:	4650      	mov	r0, sl
 8003a88:	7821      	ldrb	r1, [r4, #0]
 8003a8a:	f000 fa19 	bl	8003ec0 <memchr>
 8003a8e:	b138      	cbz	r0, 8003aa0 <_svfiprintf_r+0x150>
 8003a90:	2240      	movs	r2, #64	@ 0x40
 8003a92:	9b04      	ldr	r3, [sp, #16]
 8003a94:	eba0 000a 	sub.w	r0, r0, sl
 8003a98:	4082      	lsls	r2, r0
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	3401      	adds	r4, #1
 8003a9e:	9304      	str	r3, [sp, #16]
 8003aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa4:	2206      	movs	r2, #6
 8003aa6:	4825      	ldr	r0, [pc, #148]	@ (8003b3c <_svfiprintf_r+0x1ec>)
 8003aa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003aac:	f000 fa08 	bl	8003ec0 <memchr>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d036      	beq.n	8003b22 <_svfiprintf_r+0x1d2>
 8003ab4:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <_svfiprintf_r+0x1f0>)
 8003ab6:	bb1b      	cbnz	r3, 8003b00 <_svfiprintf_r+0x1b0>
 8003ab8:	9b03      	ldr	r3, [sp, #12]
 8003aba:	3307      	adds	r3, #7
 8003abc:	f023 0307 	bic.w	r3, r3, #7
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	9303      	str	r3, [sp, #12]
 8003ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ac6:	4433      	add	r3, r6
 8003ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aca:	e76a      	b.n	80039a2 <_svfiprintf_r+0x52>
 8003acc:	460c      	mov	r4, r1
 8003ace:	2001      	movs	r0, #1
 8003ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ad4:	e7a8      	b.n	8003a28 <_svfiprintf_r+0xd8>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f04f 0c0a 	mov.w	ip, #10
 8003adc:	4619      	mov	r1, r3
 8003ade:	3401      	adds	r4, #1
 8003ae0:	9305      	str	r3, [sp, #20]
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae8:	3a30      	subs	r2, #48	@ 0x30
 8003aea:	2a09      	cmp	r2, #9
 8003aec:	d903      	bls.n	8003af6 <_svfiprintf_r+0x1a6>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0c6      	beq.n	8003a80 <_svfiprintf_r+0x130>
 8003af2:	9105      	str	r1, [sp, #20]
 8003af4:	e7c4      	b.n	8003a80 <_svfiprintf_r+0x130>
 8003af6:	4604      	mov	r4, r0
 8003af8:	2301      	movs	r3, #1
 8003afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003afe:	e7f0      	b.n	8003ae2 <_svfiprintf_r+0x192>
 8003b00:	ab03      	add	r3, sp, #12
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	462a      	mov	r2, r5
 8003b06:	4638      	mov	r0, r7
 8003b08:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <_svfiprintf_r+0x1f4>)
 8003b0a:	a904      	add	r1, sp, #16
 8003b0c:	f3af 8000 	nop.w
 8003b10:	1c42      	adds	r2, r0, #1
 8003b12:	4606      	mov	r6, r0
 8003b14:	d1d6      	bne.n	8003ac4 <_svfiprintf_r+0x174>
 8003b16:	89ab      	ldrh	r3, [r5, #12]
 8003b18:	065b      	lsls	r3, r3, #25
 8003b1a:	f53f af2d 	bmi.w	8003978 <_svfiprintf_r+0x28>
 8003b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b20:	e72c      	b.n	800397c <_svfiprintf_r+0x2c>
 8003b22:	ab03      	add	r3, sp, #12
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	462a      	mov	r2, r5
 8003b28:	4638      	mov	r0, r7
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <_svfiprintf_r+0x1f4>)
 8003b2c:	a904      	add	r1, sp, #16
 8003b2e:	f000 f87d 	bl	8003c2c <_printf_i>
 8003b32:	e7ed      	b.n	8003b10 <_svfiprintf_r+0x1c0>
 8003b34:	08003fbe 	.word	0x08003fbe
 8003b38:	08003fc4 	.word	0x08003fc4
 8003b3c:	08003fc8 	.word	0x08003fc8
 8003b40:	00000000 	.word	0x00000000
 8003b44:	08003899 	.word	0x08003899

08003b48 <_printf_common>:
 8003b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	4616      	mov	r6, r2
 8003b4e:	4698      	mov	r8, r3
 8003b50:	688a      	ldr	r2, [r1, #8]
 8003b52:	690b      	ldr	r3, [r1, #16]
 8003b54:	4607      	mov	r7, r0
 8003b56:	4293      	cmp	r3, r2
 8003b58:	bfb8      	it	lt
 8003b5a:	4613      	movlt	r3, r2
 8003b5c:	6033      	str	r3, [r6, #0]
 8003b5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b62:	460c      	mov	r4, r1
 8003b64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b68:	b10a      	cbz	r2, 8003b6e <_printf_common+0x26>
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	0699      	lsls	r1, r3, #26
 8003b72:	bf42      	ittt	mi
 8003b74:	6833      	ldrmi	r3, [r6, #0]
 8003b76:	3302      	addmi	r3, #2
 8003b78:	6033      	strmi	r3, [r6, #0]
 8003b7a:	6825      	ldr	r5, [r4, #0]
 8003b7c:	f015 0506 	ands.w	r5, r5, #6
 8003b80:	d106      	bne.n	8003b90 <_printf_common+0x48>
 8003b82:	f104 0a19 	add.w	sl, r4, #25
 8003b86:	68e3      	ldr	r3, [r4, #12]
 8003b88:	6832      	ldr	r2, [r6, #0]
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	42ab      	cmp	r3, r5
 8003b8e:	dc2b      	bgt.n	8003be8 <_printf_common+0xa0>
 8003b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b94:	6822      	ldr	r2, [r4, #0]
 8003b96:	3b00      	subs	r3, #0
 8003b98:	bf18      	it	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	0692      	lsls	r2, r2, #26
 8003b9e:	d430      	bmi.n	8003c02 <_printf_common+0xba>
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ba8:	47c8      	blx	r9
 8003baa:	3001      	adds	r0, #1
 8003bac:	d023      	beq.n	8003bf6 <_printf_common+0xae>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	6922      	ldr	r2, [r4, #16]
 8003bb2:	f003 0306 	and.w	r3, r3, #6
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	bf14      	ite	ne
 8003bba:	2500      	movne	r5, #0
 8003bbc:	6833      	ldreq	r3, [r6, #0]
 8003bbe:	f04f 0600 	mov.w	r6, #0
 8003bc2:	bf08      	it	eq
 8003bc4:	68e5      	ldreq	r5, [r4, #12]
 8003bc6:	f104 041a 	add.w	r4, r4, #26
 8003bca:	bf08      	it	eq
 8003bcc:	1aed      	subeq	r5, r5, r3
 8003bce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bd2:	bf08      	it	eq
 8003bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	bfc4      	itt	gt
 8003bdc:	1a9b      	subgt	r3, r3, r2
 8003bde:	18ed      	addgt	r5, r5, r3
 8003be0:	42b5      	cmp	r5, r6
 8003be2:	d11a      	bne.n	8003c1a <_printf_common+0xd2>
 8003be4:	2000      	movs	r0, #0
 8003be6:	e008      	b.n	8003bfa <_printf_common+0xb2>
 8003be8:	2301      	movs	r3, #1
 8003bea:	4652      	mov	r2, sl
 8003bec:	4641      	mov	r1, r8
 8003bee:	4638      	mov	r0, r7
 8003bf0:	47c8      	blx	r9
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d103      	bne.n	8003bfe <_printf_common+0xb6>
 8003bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bfe:	3501      	adds	r5, #1
 8003c00:	e7c1      	b.n	8003b86 <_printf_common+0x3e>
 8003c02:	2030      	movs	r0, #48	@ 0x30
 8003c04:	18e1      	adds	r1, r4, r3
 8003c06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c10:	4422      	add	r2, r4
 8003c12:	3302      	adds	r3, #2
 8003c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c18:	e7c2      	b.n	8003ba0 <_printf_common+0x58>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	4641      	mov	r1, r8
 8003c20:	4638      	mov	r0, r7
 8003c22:	47c8      	blx	r9
 8003c24:	3001      	adds	r0, #1
 8003c26:	d0e6      	beq.n	8003bf6 <_printf_common+0xae>
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7d9      	b.n	8003be0 <_printf_common+0x98>

08003c2c <_printf_i>:
 8003c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c30:	7e0f      	ldrb	r7, [r1, #24]
 8003c32:	4691      	mov	r9, r2
 8003c34:	2f78      	cmp	r7, #120	@ 0x78
 8003c36:	4680      	mov	r8, r0
 8003c38:	460c      	mov	r4, r1
 8003c3a:	469a      	mov	sl, r3
 8003c3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c42:	d807      	bhi.n	8003c54 <_printf_i+0x28>
 8003c44:	2f62      	cmp	r7, #98	@ 0x62
 8003c46:	d80a      	bhi.n	8003c5e <_printf_i+0x32>
 8003c48:	2f00      	cmp	r7, #0
 8003c4a:	f000 80d3 	beq.w	8003df4 <_printf_i+0x1c8>
 8003c4e:	2f58      	cmp	r7, #88	@ 0x58
 8003c50:	f000 80ba 	beq.w	8003dc8 <_printf_i+0x19c>
 8003c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c5c:	e03a      	b.n	8003cd4 <_printf_i+0xa8>
 8003c5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c62:	2b15      	cmp	r3, #21
 8003c64:	d8f6      	bhi.n	8003c54 <_printf_i+0x28>
 8003c66:	a101      	add	r1, pc, #4	@ (adr r1, 8003c6c <_printf_i+0x40>)
 8003c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c6c:	08003cc5 	.word	0x08003cc5
 8003c70:	08003cd9 	.word	0x08003cd9
 8003c74:	08003c55 	.word	0x08003c55
 8003c78:	08003c55 	.word	0x08003c55
 8003c7c:	08003c55 	.word	0x08003c55
 8003c80:	08003c55 	.word	0x08003c55
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003c55 	.word	0x08003c55
 8003c8c:	08003c55 	.word	0x08003c55
 8003c90:	08003c55 	.word	0x08003c55
 8003c94:	08003c55 	.word	0x08003c55
 8003c98:	08003ddb 	.word	0x08003ddb
 8003c9c:	08003d03 	.word	0x08003d03
 8003ca0:	08003d95 	.word	0x08003d95
 8003ca4:	08003c55 	.word	0x08003c55
 8003ca8:	08003c55 	.word	0x08003c55
 8003cac:	08003dfd 	.word	0x08003dfd
 8003cb0:	08003c55 	.word	0x08003c55
 8003cb4:	08003d03 	.word	0x08003d03
 8003cb8:	08003c55 	.word	0x08003c55
 8003cbc:	08003c55 	.word	0x08003c55
 8003cc0:	08003d9d 	.word	0x08003d9d
 8003cc4:	6833      	ldr	r3, [r6, #0]
 8003cc6:	1d1a      	adds	r2, r3, #4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6032      	str	r2, [r6, #0]
 8003ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e09e      	b.n	8003e16 <_printf_i+0x1ea>
 8003cd8:	6833      	ldr	r3, [r6, #0]
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	1d19      	adds	r1, r3, #4
 8003cde:	6031      	str	r1, [r6, #0]
 8003ce0:	0606      	lsls	r6, r0, #24
 8003ce2:	d501      	bpl.n	8003ce8 <_printf_i+0xbc>
 8003ce4:	681d      	ldr	r5, [r3, #0]
 8003ce6:	e003      	b.n	8003cf0 <_printf_i+0xc4>
 8003ce8:	0645      	lsls	r5, r0, #25
 8003cea:	d5fb      	bpl.n	8003ce4 <_printf_i+0xb8>
 8003cec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cf0:	2d00      	cmp	r5, #0
 8003cf2:	da03      	bge.n	8003cfc <_printf_i+0xd0>
 8003cf4:	232d      	movs	r3, #45	@ 0x2d
 8003cf6:	426d      	negs	r5, r5
 8003cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cfc:	230a      	movs	r3, #10
 8003cfe:	4859      	ldr	r0, [pc, #356]	@ (8003e64 <_printf_i+0x238>)
 8003d00:	e011      	b.n	8003d26 <_printf_i+0xfa>
 8003d02:	6821      	ldr	r1, [r4, #0]
 8003d04:	6833      	ldr	r3, [r6, #0]
 8003d06:	0608      	lsls	r0, r1, #24
 8003d08:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d0c:	d402      	bmi.n	8003d14 <_printf_i+0xe8>
 8003d0e:	0649      	lsls	r1, r1, #25
 8003d10:	bf48      	it	mi
 8003d12:	b2ad      	uxthmi	r5, r5
 8003d14:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d16:	6033      	str	r3, [r6, #0]
 8003d18:	bf14      	ite	ne
 8003d1a:	230a      	movne	r3, #10
 8003d1c:	2308      	moveq	r3, #8
 8003d1e:	4851      	ldr	r0, [pc, #324]	@ (8003e64 <_printf_i+0x238>)
 8003d20:	2100      	movs	r1, #0
 8003d22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d26:	6866      	ldr	r6, [r4, #4]
 8003d28:	2e00      	cmp	r6, #0
 8003d2a:	bfa8      	it	ge
 8003d2c:	6821      	ldrge	r1, [r4, #0]
 8003d2e:	60a6      	str	r6, [r4, #8]
 8003d30:	bfa4      	itt	ge
 8003d32:	f021 0104 	bicge.w	r1, r1, #4
 8003d36:	6021      	strge	r1, [r4, #0]
 8003d38:	b90d      	cbnz	r5, 8003d3e <_printf_i+0x112>
 8003d3a:	2e00      	cmp	r6, #0
 8003d3c:	d04b      	beq.n	8003dd6 <_printf_i+0x1aa>
 8003d3e:	4616      	mov	r6, r2
 8003d40:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d44:	fb03 5711 	mls	r7, r3, r1, r5
 8003d48:	5dc7      	ldrb	r7, [r0, r7]
 8003d4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d4e:	462f      	mov	r7, r5
 8003d50:	42bb      	cmp	r3, r7
 8003d52:	460d      	mov	r5, r1
 8003d54:	d9f4      	bls.n	8003d40 <_printf_i+0x114>
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d10b      	bne.n	8003d72 <_printf_i+0x146>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	07df      	lsls	r7, r3, #31
 8003d5e:	d508      	bpl.n	8003d72 <_printf_i+0x146>
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	6861      	ldr	r1, [r4, #4]
 8003d64:	4299      	cmp	r1, r3
 8003d66:	bfde      	ittt	le
 8003d68:	2330      	movle	r3, #48	@ 0x30
 8003d6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d72:	1b92      	subs	r2, r2, r6
 8003d74:	6122      	str	r2, [r4, #16]
 8003d76:	464b      	mov	r3, r9
 8003d78:	4621      	mov	r1, r4
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	f8cd a000 	str.w	sl, [sp]
 8003d80:	aa03      	add	r2, sp, #12
 8003d82:	f7ff fee1 	bl	8003b48 <_printf_common>
 8003d86:	3001      	adds	r0, #1
 8003d88:	d14a      	bne.n	8003e20 <_printf_i+0x1f4>
 8003d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8e:	b004      	add	sp, #16
 8003d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	f043 0320 	orr.w	r3, r3, #32
 8003d9a:	6023      	str	r3, [r4, #0]
 8003d9c:	2778      	movs	r7, #120	@ 0x78
 8003d9e:	4832      	ldr	r0, [pc, #200]	@ (8003e68 <_printf_i+0x23c>)
 8003da0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	6831      	ldr	r1, [r6, #0]
 8003da8:	061f      	lsls	r7, r3, #24
 8003daa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dae:	d402      	bmi.n	8003db6 <_printf_i+0x18a>
 8003db0:	065f      	lsls	r7, r3, #25
 8003db2:	bf48      	it	mi
 8003db4:	b2ad      	uxthmi	r5, r5
 8003db6:	6031      	str	r1, [r6, #0]
 8003db8:	07d9      	lsls	r1, r3, #31
 8003dba:	bf44      	itt	mi
 8003dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8003dc0:	6023      	strmi	r3, [r4, #0]
 8003dc2:	b11d      	cbz	r5, 8003dcc <_printf_i+0x1a0>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	e7ab      	b.n	8003d20 <_printf_i+0xf4>
 8003dc8:	4826      	ldr	r0, [pc, #152]	@ (8003e64 <_printf_i+0x238>)
 8003dca:	e7e9      	b.n	8003da0 <_printf_i+0x174>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	f023 0320 	bic.w	r3, r3, #32
 8003dd2:	6023      	str	r3, [r4, #0]
 8003dd4:	e7f6      	b.n	8003dc4 <_printf_i+0x198>
 8003dd6:	4616      	mov	r6, r2
 8003dd8:	e7bd      	b.n	8003d56 <_printf_i+0x12a>
 8003dda:	6833      	ldr	r3, [r6, #0]
 8003ddc:	6825      	ldr	r5, [r4, #0]
 8003dde:	1d18      	adds	r0, r3, #4
 8003de0:	6961      	ldr	r1, [r4, #20]
 8003de2:	6030      	str	r0, [r6, #0]
 8003de4:	062e      	lsls	r6, r5, #24
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	d501      	bpl.n	8003dee <_printf_i+0x1c2>
 8003dea:	6019      	str	r1, [r3, #0]
 8003dec:	e002      	b.n	8003df4 <_printf_i+0x1c8>
 8003dee:	0668      	lsls	r0, r5, #25
 8003df0:	d5fb      	bpl.n	8003dea <_printf_i+0x1be>
 8003df2:	8019      	strh	r1, [r3, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	4616      	mov	r6, r2
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	e7bc      	b.n	8003d76 <_printf_i+0x14a>
 8003dfc:	6833      	ldr	r3, [r6, #0]
 8003dfe:	2100      	movs	r1, #0
 8003e00:	1d1a      	adds	r2, r3, #4
 8003e02:	6032      	str	r2, [r6, #0]
 8003e04:	681e      	ldr	r6, [r3, #0]
 8003e06:	6862      	ldr	r2, [r4, #4]
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 f859 	bl	8003ec0 <memchr>
 8003e0e:	b108      	cbz	r0, 8003e14 <_printf_i+0x1e8>
 8003e10:	1b80      	subs	r0, r0, r6
 8003e12:	6060      	str	r0, [r4, #4]
 8003e14:	6863      	ldr	r3, [r4, #4]
 8003e16:	6123      	str	r3, [r4, #16]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e1e:	e7aa      	b.n	8003d76 <_printf_i+0x14a>
 8003e20:	4632      	mov	r2, r6
 8003e22:	4649      	mov	r1, r9
 8003e24:	4640      	mov	r0, r8
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	47d0      	blx	sl
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d0ad      	beq.n	8003d8a <_printf_i+0x15e>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	079b      	lsls	r3, r3, #30
 8003e32:	d413      	bmi.n	8003e5c <_printf_i+0x230>
 8003e34:	68e0      	ldr	r0, [r4, #12]
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	4298      	cmp	r0, r3
 8003e3a:	bfb8      	it	lt
 8003e3c:	4618      	movlt	r0, r3
 8003e3e:	e7a6      	b.n	8003d8e <_printf_i+0x162>
 8003e40:	2301      	movs	r3, #1
 8003e42:	4632      	mov	r2, r6
 8003e44:	4649      	mov	r1, r9
 8003e46:	4640      	mov	r0, r8
 8003e48:	47d0      	blx	sl
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d09d      	beq.n	8003d8a <_printf_i+0x15e>
 8003e4e:	3501      	adds	r5, #1
 8003e50:	68e3      	ldr	r3, [r4, #12]
 8003e52:	9903      	ldr	r1, [sp, #12]
 8003e54:	1a5b      	subs	r3, r3, r1
 8003e56:	42ab      	cmp	r3, r5
 8003e58:	dcf2      	bgt.n	8003e40 <_printf_i+0x214>
 8003e5a:	e7eb      	b.n	8003e34 <_printf_i+0x208>
 8003e5c:	2500      	movs	r5, #0
 8003e5e:	f104 0619 	add.w	r6, r4, #25
 8003e62:	e7f5      	b.n	8003e50 <_printf_i+0x224>
 8003e64:	08003fcf 	.word	0x08003fcf
 8003e68:	08003fe0 	.word	0x08003fe0

08003e6c <memmove>:
 8003e6c:	4288      	cmp	r0, r1
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	eb01 0402 	add.w	r4, r1, r2
 8003e74:	d902      	bls.n	8003e7c <memmove+0x10>
 8003e76:	4284      	cmp	r4, r0
 8003e78:	4623      	mov	r3, r4
 8003e7a:	d807      	bhi.n	8003e8c <memmove+0x20>
 8003e7c:	1e43      	subs	r3, r0, #1
 8003e7e:	42a1      	cmp	r1, r4
 8003e80:	d008      	beq.n	8003e94 <memmove+0x28>
 8003e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e8a:	e7f8      	b.n	8003e7e <memmove+0x12>
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	4402      	add	r2, r0
 8003e90:	428a      	cmp	r2, r1
 8003e92:	d100      	bne.n	8003e96 <memmove+0x2a>
 8003e94:	bd10      	pop	{r4, pc}
 8003e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e9e:	e7f7      	b.n	8003e90 <memmove+0x24>

08003ea0 <_sbrk_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4d05      	ldr	r5, [pc, #20]	@ (8003ebc <_sbrk_r+0x1c>)
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	602b      	str	r3, [r5, #0]
 8003eac:	f7fc fdf0 	bl	8000a90 <_sbrk>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_sbrk_r+0x1a>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_sbrk_r+0x1a>
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	20000324 	.word	0x20000324

08003ec0 <memchr>:
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	b2c9      	uxtb	r1, r1
 8003ec6:	4402      	add	r2, r0
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	d101      	bne.n	8003ed2 <memchr+0x12>
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e003      	b.n	8003eda <memchr+0x1a>
 8003ed2:	7804      	ldrb	r4, [r0, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	428c      	cmp	r4, r1
 8003ed8:	d1f6      	bne.n	8003ec8 <memchr+0x8>
 8003eda:	bd10      	pop	{r4, pc}

08003edc <memcpy>:
 8003edc:	440a      	add	r2, r1
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ee4:	d100      	bne.n	8003ee8 <memcpy+0xc>
 8003ee6:	4770      	bx	lr
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ef4:	d1f9      	bne.n	8003eea <memcpy+0xe>
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <_realloc_r>:
 8003ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efc:	4680      	mov	r8, r0
 8003efe:	4615      	mov	r5, r2
 8003f00:	460c      	mov	r4, r1
 8003f02:	b921      	cbnz	r1, 8003f0e <_realloc_r+0x16>
 8003f04:	4611      	mov	r1, r2
 8003f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0a:	f7ff bc39 	b.w	8003780 <_malloc_r>
 8003f0e:	b92a      	cbnz	r2, 8003f1c <_realloc_r+0x24>
 8003f10:	f7ff fbcc 	bl	80036ac <_free_r>
 8003f14:	2400      	movs	r4, #0
 8003f16:	4620      	mov	r0, r4
 8003f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f1c:	f000 f81a 	bl	8003f54 <_malloc_usable_size_r>
 8003f20:	4285      	cmp	r5, r0
 8003f22:	4606      	mov	r6, r0
 8003f24:	d802      	bhi.n	8003f2c <_realloc_r+0x34>
 8003f26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f2a:	d8f4      	bhi.n	8003f16 <_realloc_r+0x1e>
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4640      	mov	r0, r8
 8003f30:	f7ff fc26 	bl	8003780 <_malloc_r>
 8003f34:	4607      	mov	r7, r0
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d0ec      	beq.n	8003f14 <_realloc_r+0x1c>
 8003f3a:	42b5      	cmp	r5, r6
 8003f3c:	462a      	mov	r2, r5
 8003f3e:	4621      	mov	r1, r4
 8003f40:	bf28      	it	cs
 8003f42:	4632      	movcs	r2, r6
 8003f44:	f7ff ffca 	bl	8003edc <memcpy>
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	f7ff fbae 	bl	80036ac <_free_r>
 8003f50:	463c      	mov	r4, r7
 8003f52:	e7e0      	b.n	8003f16 <_realloc_r+0x1e>

08003f54 <_malloc_usable_size_r>:
 8003f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f58:	1f18      	subs	r0, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bfbc      	itt	lt
 8003f5e:	580b      	ldrlt	r3, [r1, r0]
 8003f60:	18c0      	addlt	r0, r0, r3
 8003f62:	4770      	bx	lr

08003f64 <_init>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr

08003f70 <_fini>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	bf00      	nop
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr
